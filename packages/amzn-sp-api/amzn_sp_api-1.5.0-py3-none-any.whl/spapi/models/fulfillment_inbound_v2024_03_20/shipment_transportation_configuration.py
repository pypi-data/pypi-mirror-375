# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShipmentTransportationConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_information': 'ContactInformation',
        'freight_information': 'FreightInformation',
        'pallets': 'List[PalletInput]',
        'ready_to_ship_window': 'WindowInput',
        'shipment_id': 'str',
    }

    attribute_map = {
        'contact_information': 'contactInformation',
        'freight_information': 'freightInformation',
        'pallets': 'pallets',
        'ready_to_ship_window': 'readyToShipWindow',
        'shipment_id': 'shipmentId',
    }

    def __init__(self, contact_information=None, freight_information=None, pallets=None, ready_to_ship_window=None, shipment_id=None, _configuration=None):  # noqa: E501
        """ShipmentTransportationConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contact_information = None
        self._freight_information = None
        self._pallets = None
        self._ready_to_ship_window = None
        self._shipment_id = None
        self.discriminator = None

        if contact_information is not None:
            self.contact_information = contact_information
        if freight_information is not None:
            self.freight_information = freight_information
        if pallets is not None:
            self.pallets = pallets
        self.ready_to_ship_window = ready_to_ship_window
        self.shipment_id = shipment_id

    @property
    def contact_information(self):
        """Gets the contact_information of this ShipmentTransportationConfiguration.  # noqa: E501


        :return: The contact_information of this ShipmentTransportationConfiguration.  # noqa: E501
        :rtype: ContactInformation
        """
        return self._contact_information

    @contact_information.setter
    def contact_information(self, contact_information):
        """Sets the contact_information of this ShipmentTransportationConfiguration.


        :param contact_information: The contact_information of this ShipmentTransportationConfiguration.  # noqa: E501
        :type: ContactInformation
        """

        self._contact_information = contact_information

    @property
    def freight_information(self):
        """Gets the freight_information of this ShipmentTransportationConfiguration.  # noqa: E501


        :return: The freight_information of this ShipmentTransportationConfiguration.  # noqa: E501
        :rtype: FreightInformation
        """
        return self._freight_information

    @freight_information.setter
    def freight_information(self, freight_information):
        """Sets the freight_information of this ShipmentTransportationConfiguration.


        :param freight_information: The freight_information of this ShipmentTransportationConfiguration.  # noqa: E501
        :type: FreightInformation
        """

        self._freight_information = freight_information

    @property
    def pallets(self):
        """Gets the pallets of this ShipmentTransportationConfiguration.  # noqa: E501

        List of pallet configuration inputs.  # noqa: E501

        :return: The pallets of this ShipmentTransportationConfiguration.  # noqa: E501
        :rtype: List[PalletInput]
        """
        return self._pallets

    @pallets.setter
    def pallets(self, pallets):
        """Sets the pallets of this ShipmentTransportationConfiguration.

        List of pallet configuration inputs.  # noqa: E501

        :param pallets: The pallets of this ShipmentTransportationConfiguration.  # noqa: E501
        :type: List[PalletInput]
        """

        self._pallets = pallets

    @property
    def ready_to_ship_window(self):
        """Gets the ready_to_ship_window of this ShipmentTransportationConfiguration.  # noqa: E501


        :return: The ready_to_ship_window of this ShipmentTransportationConfiguration.  # noqa: E501
        :rtype: WindowInput
        """
        return self._ready_to_ship_window

    @ready_to_ship_window.setter
    def ready_to_ship_window(self, ready_to_ship_window):
        """Sets the ready_to_ship_window of this ShipmentTransportationConfiguration.


        :param ready_to_ship_window: The ready_to_ship_window of this ShipmentTransportationConfiguration.  # noqa: E501
        :type: WindowInput
        """
        if self._configuration.client_side_validation and ready_to_ship_window is None:
            raise ValueError("Invalid value for `ready_to_ship_window`, must not be `None`")  # noqa: E501

        self._ready_to_ship_window = ready_to_ship_window

    @property
    def shipment_id(self):
        """Gets the shipment_id of this ShipmentTransportationConfiguration.  # noqa: E501

        Identifier of a shipment. A shipment contains the boxes and units being inbounded.  # noqa: E501

        :return: The shipment_id of this ShipmentTransportationConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this ShipmentTransportationConfiguration.

        Identifier of a shipment. A shipment contains the boxes and units being inbounded.  # noqa: E501

        :param shipment_id: The shipment_id of this ShipmentTransportationConfiguration.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and shipment_id is None:
            raise ValueError("Invalid value for `shipment_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shipment_id is not None and len(shipment_id) > 38):
            raise ValueError("Invalid value for `shipment_id`, length must be less than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shipment_id is not None and len(shipment_id) < 38):
            raise ValueError("Invalid value for `shipment_id`, length must be greater than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shipment_id is not None and not re.search(r'^[a-zA-Z0-9-]*$', shipment_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `shipment_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9-]*$/`")  # noqa: E501

        self._shipment_id = shipment_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentTransportationConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentTransportationConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipmentTransportationConfiguration):
            return True

        return self.to_dict() != other.to_dict()
