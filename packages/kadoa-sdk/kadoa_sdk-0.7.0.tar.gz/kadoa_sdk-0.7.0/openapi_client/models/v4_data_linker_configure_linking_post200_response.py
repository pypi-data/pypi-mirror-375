# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.v4_data_linker_configure_linking_post200_response_errors_inner import V4DataLinkerConfigureLinkingPost200ResponseErrorsInner
from openapi_client.models.v4_data_linker_configure_linking_post200_response_jobs_to_link_inner import V4DataLinkerConfigureLinkingPost200ResponseJobsToLinkInner
from openapi_client.models.v4_data_linker_configure_linking_post200_response_warnings_inner import V4DataLinkerConfigureLinkingPost200ResponseWarningsInner
from typing import Optional, Set
from typing_extensions import Self

class V4DataLinkerConfigureLinkingPost200Response(BaseModel):
    """
    V4DataLinkerConfigureLinkingPost200Response
    """ # noqa: E501
    success: Optional[StrictBool] = None
    message: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the data linking is enabled")
    linking_columns: Optional[List[StrictStr]] = Field(default=None, description="The configured linking columns", alias="linkingColumns")
    errors: Optional[List[V4DataLinkerConfigureLinkingPost200ResponseErrorsInner]] = Field(default=None, description="List of errors preventing data linking")
    warnings: Optional[List[V4DataLinkerConfigureLinkingPost200ResponseWarningsInner]] = Field(default=None, description="List of warnings that don't prevent data linking")
    jobs_to_link: Optional[List[V4DataLinkerConfigureLinkingPost200ResponseJobsToLinkInner]] = Field(default=None, description="Jobs that would be linked if data linking is enabled", alias="jobsToLink")
    total_jobs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of jobs found", alias="totalJobs")
    __properties: ClassVar[List[str]] = ["success", "message", "enabled", "linkingColumns", "errors", "warnings", "jobsToLink", "totalJobs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V4DataLinkerConfigureLinkingPost200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in jobs_to_link (list)
        _items = []
        if self.jobs_to_link:
            for _item_jobs_to_link in self.jobs_to_link:
                if _item_jobs_to_link:
                    _items.append(_item_jobs_to_link.to_dict())
            _dict['jobsToLink'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V4DataLinkerConfigureLinkingPost200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "message": obj.get("message"),
            "enabled": obj.get("enabled"),
            "linkingColumns": obj.get("linkingColumns"),
            "errors": [V4DataLinkerConfigureLinkingPost200ResponseErrorsInner.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "warnings": [V4DataLinkerConfigureLinkingPost200ResponseWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None,
            "jobsToLink": [V4DataLinkerConfigureLinkingPost200ResponseJobsToLinkInner.from_dict(_item) for _item in obj["jobsToLink"]] if obj.get("jobsToLink") is not None else None,
            "totalJobs": obj.get("totalJobs")
        })
        return _obj


