# coding: utf-8

"""
    Selling Partner API for Replenishment

    The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.

    The version of the OpenAPI document: 2022-11-07
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ListOffersResponseOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'str',
        'asin': 'str',
        'marketplace_id': 'str',
        'eligibility': 'EligibilityStatus',
        'offer_program_configuration': 'OfferProgramConfiguration',
        'program_type': 'ProgramType',
        'vendor_codes': 'List[str]',
    }

    attribute_map = {
        'sku': 'sku',
        'asin': 'asin',
        'marketplace_id': 'marketplaceId',
        'eligibility': 'eligibility',
        'offer_program_configuration': 'offerProgramConfiguration',
        'program_type': 'programType',
        'vendor_codes': 'vendorCodes',
    }

    def __init__(self, sku=None, asin=None, marketplace_id=None, eligibility=None, offer_program_configuration=None, program_type=None, vendor_codes=None, _configuration=None):  # noqa: E501
        """ListOffersResponseOffer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sku = None
        self._asin = None
        self._marketplace_id = None
        self._eligibility = None
        self._offer_program_configuration = None
        self._program_type = None
        self._vendor_codes = None
        self.discriminator = None

        if sku is not None:
            self.sku = sku
        if asin is not None:
            self.asin = asin
        if marketplace_id is not None:
            self.marketplace_id = marketplace_id
        if eligibility is not None:
            self.eligibility = eligibility
        if offer_program_configuration is not None:
            self.offer_program_configuration = offer_program_configuration
        if program_type is not None:
            self.program_type = program_type
        if vendor_codes is not None:
            self.vendor_codes = vendor_codes

    @property
    def sku(self):
        """Gets the sku of this ListOffersResponseOffer.  # noqa: E501

        The SKU. This property is only supported for sellers and not for vendors.  # noqa: E501

        :return: The sku of this ListOffersResponseOffer.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ListOffersResponseOffer.

        The SKU. This property is only supported for sellers and not for vendors.  # noqa: E501

        :param sku: The sku of this ListOffersResponseOffer.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def asin(self):
        """Gets the asin of this ListOffersResponseOffer.  # noqa: E501

        The Amazon Standard Identification Number (ASIN).  # noqa: E501

        :return: The asin of this ListOffersResponseOffer.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this ListOffersResponseOffer.

        The Amazon Standard Identification Number (ASIN).  # noqa: E501

        :param asin: The asin of this ListOffersResponseOffer.  # noqa: E501
        :type: str
        """

        self._asin = asin

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this ListOffersResponseOffer.  # noqa: E501

        The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.  # noqa: E501

        :return: The marketplace_id of this ListOffersResponseOffer.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this ListOffersResponseOffer.

        The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.  # noqa: E501

        :param marketplace_id: The marketplace_id of this ListOffersResponseOffer.  # noqa: E501
        :type: str
        """

        self._marketplace_id = marketplace_id

    @property
    def eligibility(self):
        """Gets the eligibility of this ListOffersResponseOffer.  # noqa: E501


        :return: The eligibility of this ListOffersResponseOffer.  # noqa: E501
        :rtype: EligibilityStatus
        """
        return self._eligibility

    @eligibility.setter
    def eligibility(self, eligibility):
        """Sets the eligibility of this ListOffersResponseOffer.


        :param eligibility: The eligibility of this ListOffersResponseOffer.  # noqa: E501
        :type: EligibilityStatus
        """

        self._eligibility = eligibility

    @property
    def offer_program_configuration(self):
        """Gets the offer_program_configuration of this ListOffersResponseOffer.  # noqa: E501


        :return: The offer_program_configuration of this ListOffersResponseOffer.  # noqa: E501
        :rtype: OfferProgramConfiguration
        """
        return self._offer_program_configuration

    @offer_program_configuration.setter
    def offer_program_configuration(self, offer_program_configuration):
        """Sets the offer_program_configuration of this ListOffersResponseOffer.


        :param offer_program_configuration: The offer_program_configuration of this ListOffersResponseOffer.  # noqa: E501
        :type: OfferProgramConfiguration
        """

        self._offer_program_configuration = offer_program_configuration

    @property
    def program_type(self):
        """Gets the program_type of this ListOffersResponseOffer.  # noqa: E501


        :return: The program_type of this ListOffersResponseOffer.  # noqa: E501
        :rtype: ProgramType
        """
        return self._program_type

    @program_type.setter
    def program_type(self, program_type):
        """Sets the program_type of this ListOffersResponseOffer.


        :param program_type: The program_type of this ListOffersResponseOffer.  # noqa: E501
        :type: ProgramType
        """

        self._program_type = program_type

    @property
    def vendor_codes(self):
        """Gets the vendor_codes of this ListOffersResponseOffer.  # noqa: E501

        A list of vendor codes associated with the offer.  # noqa: E501

        :return: The vendor_codes of this ListOffersResponseOffer.  # noqa: E501
        :rtype: List[str]
        """
        return self._vendor_codes

    @vendor_codes.setter
    def vendor_codes(self, vendor_codes):
        """Sets the vendor_codes of this ListOffersResponseOffer.

        A list of vendor codes associated with the offer.  # noqa: E501

        :param vendor_codes: The vendor_codes of this ListOffersResponseOffer.  # noqa: E501
        :type: List[str]
        """

        self._vendor_codes = vendor_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListOffersResponseOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListOffersResponseOffer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListOffersResponseOffer):
            return True

        return self.to_dict() != other.to_dict()
