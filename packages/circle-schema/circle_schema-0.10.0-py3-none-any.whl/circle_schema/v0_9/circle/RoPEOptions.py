# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RoPEOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RoPEOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRoPEOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RoPEOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # RoPEOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RoPEOptions
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(1)
def RoPEOptionsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddMode(builder, mode): builder.PrependInt32Slot(0, mode, 0)
def RoPEOptionsAddMode(builder, mode):
    """This method is deprecated. Please switch to AddMode."""
    return AddMode(builder, mode)
def End(builder): return builder.EndObject()
def RoPEOptionsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class RoPEOptionsT(object):

    # RoPEOptionsT
    def __init__(self):
        self.mode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        roPEOptions = RoPEOptions()
        roPEOptions.Init(buf, pos)
        return cls.InitFromObj(roPEOptions)

    @classmethod
    def InitFromObj(cls, roPEOptions):
        x = RoPEOptionsT()
        x._UnPack(roPEOptions)
        return x

    # RoPEOptionsT
    def _UnPack(self, roPEOptions):
        if roPEOptions is None:
            return
        self.mode = roPEOptions.Mode()

    # RoPEOptionsT
    def Pack(self, builder):
        Start(builder)
        AddMode(builder, self.mode)
        roPEOptions = End(builder)
        return roPEOptions
