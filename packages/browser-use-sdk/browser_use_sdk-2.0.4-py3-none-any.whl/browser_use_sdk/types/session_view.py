# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .session_status import SessionStatus
from .task_item_view import TaskItemView


class SessionView(UncheckedBaseModel):
    """
    View model for representing a (browser) session with its associated tasks.
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the session
    """

    status: SessionStatus = pydantic.Field()
    """
    Current status of the session (active/stopped)
    """

    live_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="liveUrl")] = pydantic.Field(
        default=None
    )
    """
    URL where the browser can be viewed live in real-time
    """

    started_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="startedAt")] = pydantic.Field()
    """
    Timestamp when the session was created and started
    """

    finished_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="finishedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp when the session was stopped (None if still active)
    """

    tasks: typing.List[TaskItemView] = pydantic.Field()
    """
    List of tasks associated with this session
    """

    public_share_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="publicShareUrl")] = (
        pydantic.Field(default=None)
    )
    """
    Optional URL to access the public share of the session
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
