# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ESPInput(BaseModel):
    """
    ESPInput
    """ # noqa: E501
    source_well_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceWellId of the well which owns the ESP", alias="sourceWellId")
    source_wellbore_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceWellboreId of the wellbore which owns the ESP", alias="sourceWellboreId")
    source_tubing_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceTubingId of the tubing string in which the ESP is installed", alias="sourceTubingId")
    source_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceId of the ESP to enable upsert functionality", alias="sourceId")
    name: Annotated[str, Field(strict=True, max_length=100)] = Field(description="Pump name, must match a pump in the catalog")
    install_order: StrictInt = Field(description="Install order of the pump in the assembly", alias="installOrder")
    stages: StrictInt = Field(description="Number of pump stages installed")
    head_degradation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Default head degradation when it cannot be calculated, %", alias="headDegradation")
    has_gas_handler: StrictBool = Field(description="Whether the pump assembly has a gas handler", alias="hasGasHandler")
    has_separator: StrictBool = Field(description="Whether the pump assembly has a gas separator", alias="hasSeparator")
    viscosity_correction: Optional[StrictBool] = Field(default=None, description="Whether to apply viscosity corrections in conjunction with gas separation", alias="viscosityCorrection")
    separation_efficiency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Default gas separation efficiency when it cannot be calculated, %", alias="separationEfficiency")
    run_date: datetime = Field(description="Run date of the ESP. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="runDate")
    pull_date: Optional[datetime] = Field(default=None, description="Pull date of the ESP. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="pullDate")
    __properties: ClassVar[List[str]] = ["sourceWellId", "sourceWellboreId", "sourceTubingId", "sourceId", "name", "installOrder", "stages", "headDegradation", "hasGasHandler", "hasSeparator", "viscosityCorrection", "separationEfficiency", "runDate", "pullDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ESPInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if head_degradation (nullable) is None
        # and model_fields_set contains the field
        if self.head_degradation is None and "head_degradation" in self.model_fields_set:
            _dict['headDegradation'] = None

        # set to None if viscosity_correction (nullable) is None
        # and model_fields_set contains the field
        if self.viscosity_correction is None and "viscosity_correction" in self.model_fields_set:
            _dict['viscosityCorrection'] = None

        # set to None if separation_efficiency (nullable) is None
        # and model_fields_set contains the field
        if self.separation_efficiency is None and "separation_efficiency" in self.model_fields_set:
            _dict['separationEfficiency'] = None

        # set to None if pull_date (nullable) is None
        # and model_fields_set contains the field
        if self.pull_date is None and "pull_date" in self.model_fields_set:
            _dict['pullDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ESPInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceWellId": obj.get("sourceWellId"),
            "sourceWellboreId": obj.get("sourceWellboreId"),
            "sourceTubingId": obj.get("sourceTubingId"),
            "sourceId": obj.get("sourceId"),
            "name": obj.get("name"),
            "installOrder": obj.get("installOrder") if obj.get("installOrder") is not None else 0,
            "stages": obj.get("stages"),
            "headDegradation": obj.get("headDegradation"),
            "hasGasHandler": obj.get("hasGasHandler"),
            "hasSeparator": obj.get("hasSeparator"),
            "viscosityCorrection": obj.get("viscosityCorrection"),
            "separationEfficiency": obj.get("separationEfficiency"),
            "runDate": obj.get("runDate"),
            "pullDate": obj.get("pullDate")
        })
        return _obj


