/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.12.0
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"
        #include <wx/filedlgcustomize.h>
        #include <wx/event.h>
        #include <wx/eventfilter.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


PyDoc_STRVAR(doc_wxFileDialogCustomControl_Show, "Show(show=True) -> None\n"
"\n"
"Show or hide this control.");

extern "C" {static PyObject *meth_wxFileDialogCustomControl_Show(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileDialogCustomControl_Show(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool show = 1;
        ::wxFileDialogCustomControl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_show,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxFileDialogCustomControl, &sipCpp, &show))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Show(show);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FileDialogCustomControl, sipName_Show, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxFileDialogCustomControl_Hide, "Hide() -> None\n"
"\n"
"Hide this control.");

extern "C" {static PyObject *meth_wxFileDialogCustomControl_Hide(PyObject *, PyObject *);}
static PyObject *meth_wxFileDialogCustomControl_Hide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxFileDialogCustomControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileDialogCustomControl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Hide();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FileDialogCustomControl, sipName_Hide, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxFileDialogCustomControl_Enable, "Enable(enable=True) -> None\n"
"\n"
"Enable or disable this control.");

extern "C" {static PyObject *meth_wxFileDialogCustomControl_Enable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileDialogCustomControl_Enable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
        ::wxFileDialogCustomControl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxFileDialogCustomControl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Enable(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FileDialogCustomControl, sipName_Enable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxFileDialogCustomControl_Disable, "Disable() -> None\n"
"\n"
"Disable this control.");

extern "C" {static PyObject *meth_wxFileDialogCustomControl_Disable(PyObject *, PyObject *);}
static PyObject *meth_wxFileDialogCustomControl_Disable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxFileDialogCustomControl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileDialogCustomControl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Disable();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_FileDialogCustomControl, sipName_Disable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxFileDialogCustomControl(void *, const sipTypeDef *);}
static void *cast_wxFileDialogCustomControl(void *sipCppV, const sipTypeDef *targetType)
{
    ::wxFileDialogCustomControl *sipCpp = reinterpret_cast< ::wxFileDialogCustomControl *>(sipCppV);

    if (targetType == sipType_wxFileDialogCustomControl)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_wxEvtHandler)->ctd_cast(static_cast< ::wxEvtHandler *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxFileDialogCustomControl(void *, int);}
static void release_wxFileDialogCustomControl(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxFileDialogCustomControl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxFileDialogCustomControl(sipSimpleWrapper *);}
static void dealloc_wxFileDialogCustomControl(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxFileDialogCustomControl(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxFileDialogCustomControl[] = {{158, 255, 1}};


static PyMethodDef methods_wxFileDialogCustomControl[] = {
    {sipName_Disable, meth_wxFileDialogCustomControl_Disable, METH_VARARGS, doc_wxFileDialogCustomControl_Disable},
    {sipName_Enable, SIP_MLMETH_CAST(meth_wxFileDialogCustomControl_Enable), METH_VARARGS|METH_KEYWORDS, doc_wxFileDialogCustomControl_Enable},
    {sipName_Hide, meth_wxFileDialogCustomControl_Hide, METH_VARARGS, doc_wxFileDialogCustomControl_Hide},
    {sipName_Show, SIP_MLMETH_CAST(meth_wxFileDialogCustomControl_Show), METH_VARARGS|METH_KEYWORDS, doc_wxFileDialogCustomControl_Show}
};

PyDoc_STRVAR(doc_wxFileDialogCustomControl, "The base class for all wxFileDialog custom controls.");


sipClassTypeDef sipTypeDef__core_wxFileDialogCustomControl = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxFileDialogCustomControl,
        SIP_NULLPTR,
        SIP_NULLPTR,
    },
    {
        sipNameNr_FileDialogCustomControl,
        {0, 0, 1},
        4, methods_wxFileDialogCustomControl,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxFileDialogCustomControl,
    -1,
    -1,
    supers_wxFileDialogCustomControl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxFileDialogCustomControl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxFileDialogCustomControl,
    cast_wxFileDialogCustomControl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    0,
};
