# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HorizontalFrac(BaseModel):
    """
    HorizontalFrac
    """ # noqa: E501
    well_xid: Optional[StrictStr] = Field(default=None, alias="wellXid")
    var_date: datetime = Field(description="Datetime of the event. DatetimeOffset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="date")
    average_effective_spacing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average distance to offset wells at time of completion", alias="averageEffectiveSpacing")
    min_effective_spacing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average distance to offset wells at time of completion", alias="minEffectiveSpacing")
    type: Optional[StrictStr] = Field(default=None, description="Completion type (Plug-n-perf, sliding sleeve, etc). It is important to standardize values to enable grouped analysis.")
    fluid_type: Optional[StrictStr] = Field(default=None, description="Completion fluid type (X-link Gel, Slickwater, etc). It is important to standardize values to enable grouped analysis.", alias="fluidType")
    stimulated_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total length of stimulated lateral", alias="stimulatedLength")
    stages: Optional[StrictInt] = Field(default=None, description="Number of stages in the frac job")
    total_fluid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total fluid used in the frac job", alias="totalFluid")
    total_proppant: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total proppant used in the frac job", alias="totalProppant")
    perforation_count: Optional[StrictInt] = Field(default=None, description="Total perforation count in the frac job", alias="perforationCount")
    stage_spacing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Stage spacing in the frac job", alias="stageSpacing")
    __properties: ClassVar[List[str]] = ["wellXid", "date", "averageEffectiveSpacing", "minEffectiveSpacing", "type", "fluidType", "stimulatedLength", "stages", "totalFluid", "totalProppant", "perforationCount", "stageSpacing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HorizontalFrac from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if average_effective_spacing (nullable) is None
        # and model_fields_set contains the field
        if self.average_effective_spacing is None and "average_effective_spacing" in self.model_fields_set:
            _dict['averageEffectiveSpacing'] = None

        # set to None if min_effective_spacing (nullable) is None
        # and model_fields_set contains the field
        if self.min_effective_spacing is None and "min_effective_spacing" in self.model_fields_set:
            _dict['minEffectiveSpacing'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if fluid_type (nullable) is None
        # and model_fields_set contains the field
        if self.fluid_type is None and "fluid_type" in self.model_fields_set:
            _dict['fluidType'] = None

        # set to None if stimulated_length (nullable) is None
        # and model_fields_set contains the field
        if self.stimulated_length is None and "stimulated_length" in self.model_fields_set:
            _dict['stimulatedLength'] = None

        # set to None if stages (nullable) is None
        # and model_fields_set contains the field
        if self.stages is None and "stages" in self.model_fields_set:
            _dict['stages'] = None

        # set to None if total_fluid (nullable) is None
        # and model_fields_set contains the field
        if self.total_fluid is None and "total_fluid" in self.model_fields_set:
            _dict['totalFluid'] = None

        # set to None if total_proppant (nullable) is None
        # and model_fields_set contains the field
        if self.total_proppant is None and "total_proppant" in self.model_fields_set:
            _dict['totalProppant'] = None

        # set to None if perforation_count (nullable) is None
        # and model_fields_set contains the field
        if self.perforation_count is None and "perforation_count" in self.model_fields_set:
            _dict['perforationCount'] = None

        # set to None if stage_spacing (nullable) is None
        # and model_fields_set contains the field
        if self.stage_spacing is None and "stage_spacing" in self.model_fields_set:
            _dict['stageSpacing'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HorizontalFrac from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "wellXid": obj.get("wellXid"),
            "date": obj.get("date"),
            "averageEffectiveSpacing": obj.get("averageEffectiveSpacing"),
            "minEffectiveSpacing": obj.get("minEffectiveSpacing"),
            "type": obj.get("type"),
            "fluidType": obj.get("fluidType"),
            "stimulatedLength": obj.get("stimulatedLength"),
            "stages": obj.get("stages"),
            "totalFluid": obj.get("totalFluid"),
            "totalProppant": obj.get("totalProppant"),
            "perforationCount": obj.get("perforationCount"),
            "stageSpacing": obj.get("stageSpacing")
        })
        return _obj


