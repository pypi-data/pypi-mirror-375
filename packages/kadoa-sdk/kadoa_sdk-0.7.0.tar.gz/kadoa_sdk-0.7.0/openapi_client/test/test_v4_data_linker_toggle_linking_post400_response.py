# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.v4_data_linker_toggle_linking_post400_response import V4DataLinkerToggleLinkingPost400Response

class TestV4DataLinkerToggleLinkingPost400Response(unittest.TestCase):
    """V4DataLinkerToggleLinkingPost400Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V4DataLinkerToggleLinkingPost400Response:
        """Test V4DataLinkerToggleLinkingPost400Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V4DataLinkerToggleLinkingPost400Response`
        """
        model = V4DataLinkerToggleLinkingPost400Response()
        if include_optional:
            return V4DataLinkerToggleLinkingPost400Response(
                success = False,
                error = 'Cannot enable data linking without configured linking columns',
                details = [
                    openapi_client.models.validation_error_details_inner.Validation_Error_details_inner(
                        code = '', 
                        message = '', 
                        path = [
                            ''
                            ], )
                    ]
            )
        else:
            return V4DataLinkerToggleLinkingPost400Response(
        )
        """

    def testV4DataLinkerToggleLinkingPost400Response(self):
        """Test V4DataLinkerToggleLinkingPost400Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
