---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pyfail_package_level_cycles/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
pkg1 = _cribo.types.SimpleNamespace(__name__='pkg1', __initializing__=False, __initialized__=False, __path__=[])
pkg2 = _cribo.types.SimpleNamespace(__name__='pkg2', __initializing__=False, __initialized__=False, __path__=[])
def _cribo_init___cribo_176078_pkg1(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg2

    def main_function():
        """Main function that uses helper from pkg2"""
        global pkg2
        pkg2 = _cribo_init___cribo_a6e036_pkg2(pkg2)
        helper_function = pkg2.helper_function
        return f"pkg1.main({helper_function()})"
    self.main_function = main_function

    def utility_function():
        """Utility that pkg2 will import"""
        global pkg2
        pkg2 = _cribo_init___cribo_a6e036_pkg2(pkg2)
        helper_function = pkg2.helper_function
        return "pkg1_utility"
    self.utility_function = utility_function
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg1.__init__ = _cribo_init___cribo_176078_pkg1
def _cribo_init___cribo_a6e036_pkg2(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg1

    def helper_function():
        """Helper function that depends on pkg1"""
        global pkg1
        pkg1 = _cribo_init___cribo_176078_pkg1(pkg1)
        utility_function = pkg1.utility_function
        util_result = utility_function()
        return f"pkg2.helper(using_{util_result})"
    self.helper_function = helper_function

    def another_helper():
        """Another function in pkg2"""
        global pkg1
        pkg1 = _cribo_init___cribo_176078_pkg1(pkg1)
        utility_function = pkg1.utility_function
        return "pkg2_helper"
    self.another_helper = another_helper
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg2.__init__ = _cribo_init___cribo_a6e036_pkg2
pkg1 = _cribo_init___cribo_176078_pkg1(pkg1)
def main():
    result = pkg1.main_function()
    print(f"Package cycle result: {result}")
if __name__ == "__main__":
    main()
