# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class SkuEligibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ineligibility_reasons': 'List[SkuIneligibilityReason]',
        'package_quantity': 'DistributionPackageQuantity',
        'status': 'InboundEligibilityStatus',
    }

    attribute_map = {
        'ineligibility_reasons': 'ineligibilityReasons',
        'package_quantity': 'packageQuantity',
        'status': 'status',
    }

    def __init__(self, ineligibility_reasons=None, package_quantity=None, status=None, _configuration=None):  # noqa: E501
        """SkuEligibility - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ineligibility_reasons = None
        self._package_quantity = None
        self._status = None
        self.discriminator = None

        if ineligibility_reasons is not None:
            self.ineligibility_reasons = ineligibility_reasons
        self.package_quantity = package_quantity
        self.status = status

    @property
    def ineligibility_reasons(self):
        """Gets the ineligibility_reasons of this SkuEligibility.  # noqa: E501

        If not eligible, these are list of error codes and descriptions.  # noqa: E501

        :return: The ineligibility_reasons of this SkuEligibility.  # noqa: E501
        :rtype: List[SkuIneligibilityReason]
        """
        return self._ineligibility_reasons

    @ineligibility_reasons.setter
    def ineligibility_reasons(self, ineligibility_reasons):
        """Sets the ineligibility_reasons of this SkuEligibility.

        If not eligible, these are list of error codes and descriptions.  # noqa: E501

        :param ineligibility_reasons: The ineligibility_reasons of this SkuEligibility.  # noqa: E501
        :type: List[SkuIneligibilityReason]
        """

        self._ineligibility_reasons = ineligibility_reasons

    @property
    def package_quantity(self):
        """Gets the package_quantity of this SkuEligibility.  # noqa: E501


        :return: The package_quantity of this SkuEligibility.  # noqa: E501
        :rtype: DistributionPackageQuantity
        """
        return self._package_quantity

    @package_quantity.setter
    def package_quantity(self, package_quantity):
        """Sets the package_quantity of this SkuEligibility.


        :param package_quantity: The package_quantity of this SkuEligibility.  # noqa: E501
        :type: DistributionPackageQuantity
        """
        if self._configuration.client_side_validation and package_quantity is None:
            raise ValueError("Invalid value for `package_quantity`, must not be `None`")  # noqa: E501

        self._package_quantity = package_quantity

    @property
    def status(self):
        """Gets the status of this SkuEligibility.  # noqa: E501


        :return: The status of this SkuEligibility.  # noqa: E501
        :rtype: InboundEligibilityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SkuEligibility.


        :param status: The status of this SkuEligibility.  # noqa: E501
        :type: InboundEligibilityStatus
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SkuEligibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkuEligibility):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SkuEligibility):
            return True

        return self.to_dict() != other.to_dict()
