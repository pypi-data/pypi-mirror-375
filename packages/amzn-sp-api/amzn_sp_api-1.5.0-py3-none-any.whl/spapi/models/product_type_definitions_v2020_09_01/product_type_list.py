# coding: utf-8

"""
    Selling Partner API for Product Type Definitions

    The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).

    The version of the OpenAPI document: 2020-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ProductTypeList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_types': 'List[ProductType]',
        'product_type_version': 'str',
    }

    attribute_map = {
        'product_types': 'productTypes',
        'product_type_version': 'productTypeVersion',
    }

    def __init__(self, product_types=None, product_type_version=None, _configuration=None):  # noqa: E501
        """ProductTypeList - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._product_types = None
        self._product_type_version = None
        self.discriminator = None

        self.product_types = product_types
        self.product_type_version = product_type_version

    @property
    def product_types(self):
        """Gets the product_types of this ProductTypeList.  # noqa: E501


        :return: The product_types of this ProductTypeList.  # noqa: E501
        :rtype: List[ProductType]
        """
        return self._product_types

    @product_types.setter
    def product_types(self, product_types):
        """Sets the product_types of this ProductTypeList.


        :param product_types: The product_types of this ProductTypeList.  # noqa: E501
        :type: List[ProductType]
        """
        if self._configuration.client_side_validation and product_types is None:
            raise ValueError("Invalid value for `product_types`, must not be `None`")  # noqa: E501

        self._product_types = product_types

    @property
    def product_type_version(self):
        """Gets the product_type_version of this ProductTypeList.  # noqa: E501

        Amazon product type version identifier.  # noqa: E501

        :return: The product_type_version of this ProductTypeList.  # noqa: E501
        :rtype: str
        """
        return self._product_type_version

    @product_type_version.setter
    def product_type_version(self, product_type_version):
        """Sets the product_type_version of this ProductTypeList.

        Amazon product type version identifier.  # noqa: E501

        :param product_type_version: The product_type_version of this ProductTypeList.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and product_type_version is None:
            raise ValueError("Invalid value for `product_type_version`, must not be `None`")  # noqa: E501

        self._product_type_version = product_type_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductTypeList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductTypeList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductTypeList):
            return True

        return self.to_dict() != other.to_dict()
