# coding: utf-8

"""
    The Selling Partner API for Invoices.

    Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.

    The version of the OpenAPI document: 2024-06-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetInvoicesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoices': 'List[Invoice]',
        'next_token': 'str',
    }

    attribute_map = {
        'invoices': 'invoices',
        'next_token': 'nextToken',
    }

    def __init__(self, invoices=None, next_token=None, _configuration=None):  # noqa: E501
        """GetInvoicesResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._invoices = None
        self._next_token = None
        self.discriminator = None

        if invoices is not None:
            self.invoices = invoices
        if next_token is not None:
            self.next_token = next_token

    @property
    def invoices(self):
        """Gets the invoices of this GetInvoicesResponse.  # noqa: E501

        A list of invoices.  # noqa: E501

        :return: The invoices of this GetInvoicesResponse.  # noqa: E501
        :rtype: List[Invoice]
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this GetInvoicesResponse.

        A list of invoices.  # noqa: E501

        :param invoices: The invoices of this GetInvoicesResponse.  # noqa: E501
        :type: List[Invoice]
        """
        if (self._configuration.client_side_validation and
                invoices is not None and len(invoices) > 100):
            raise ValueError("Invalid value for `invoices`, number of items must be less than or equal to `100`")  # noqa: E501

        self._invoices = invoices

    @property
    def next_token(self):
        """Gets the next_token of this GetInvoicesResponse.  # noqa: E501

        This token is returned when the number of results exceeds the specified `pageSize` value. To get the next page of results, call the `getInvoices` operation and include this token with the previous call parameters.  # noqa: E501

        :return: The next_token of this GetInvoicesResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetInvoicesResponse.

        This token is returned when the number of results exceeds the specified `pageSize` value. To get the next page of results, call the `getInvoices` operation and include this token with the previous call parameters.  # noqa: E501

        :param next_token: The next_token of this GetInvoicesResponse.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetInvoicesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetInvoicesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetInvoicesResponse):
            return True

        return self.to_dict() != other.to_dict()
