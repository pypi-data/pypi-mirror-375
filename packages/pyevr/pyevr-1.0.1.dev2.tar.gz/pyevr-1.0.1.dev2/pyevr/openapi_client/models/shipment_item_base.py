# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei 천nnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.pack import Pack
from pyevr.openapi_client.models.shipment_assortment import ShipmentAssortment


class ShipmentItemBase(BaseModel):
    """
    ShipmentItemBase
    """  # noqa: E501

    amount: Union[
        Annotated[float, Field(le=1.0e9, strict=True, ge=0.0)],
        Annotated[int, Field(le=1000000000, strict=True, ge=0)],
    ] = Field(description="Kogus")
    pack: Optional[Pack] = None
    unit_code: Annotated[str, Field(min_length=0, strict=True, max_length=10)] = Field(
        description="[M천천t체hiku kood](#operation/MeasurementUnits_List)",
        alias="unitCode",
    )
    assortment: ShipmentAssortment
    __properties: ClassVar[List[str]] = ["amount", "pack", "unitCode", "assortment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipmentItemBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pack
        if self.pack:
            _dict["pack"] = self.pack.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assortment
        if self.assortment:
            _dict["assortment"] = self.assortment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipmentItemBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "amount": obj.get("amount"),
                "pack": Pack.from_dict(obj["pack"])
                if obj.get("pack") is not None
                else None,
                "unitCode": obj.get("unitCode"),
                "assortment": ShipmentAssortment.from_dict(obj["assortment"])
                if obj.get("assortment") is not None
                else None,
            }
        )
        return _obj
