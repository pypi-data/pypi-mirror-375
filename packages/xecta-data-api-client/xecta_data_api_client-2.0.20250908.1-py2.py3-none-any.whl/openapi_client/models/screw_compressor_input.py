# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.compressor_curve_input import CompressorCurveInput
from typing import Optional, Set
from typing_extensions import Self

class ScrewCompressorInput(BaseModel):
    """
    ScrewCompressorInput
    """ # noqa: E501
    source_network_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceNetworkId in which the compressor is installed", alias="sourceNetworkId")
    source_compressor_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="sourceCompressorId is a unique identifier of the compressor to enable upsert functionality", alias="sourceCompressorId")
    source_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceId is a unique identifier for the compressor curve to enable upsert functionality", alias="sourceId")
    var_date: datetime = Field(description="Date in which the compressor curve becomes active in the network. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="date")
    compressor_curve: List[CompressorCurveInput] = Field(description="Compressor curve", alias="compressorCurve")
    __properties: ClassVar[List[str]] = ["sourceNetworkId", "sourceCompressorId", "sourceId", "date", "compressorCurve"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScrewCompressorInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in compressor_curve (list)
        _items = []
        if self.compressor_curve:
            for _item in self.compressor_curve:
                if _item:
                    _items.append(_item.to_dict())
            _dict['compressorCurve'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScrewCompressorInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceNetworkId": obj.get("sourceNetworkId"),
            "sourceCompressorId": obj.get("sourceCompressorId"),
            "sourceId": obj.get("sourceId"),
            "date": obj.get("date"),
            "compressorCurve": [CompressorCurveInput.from_dict(_item) for _item in obj["compressorCurve"]] if obj.get("compressorCurve") is not None else None
        })
        return _obj


