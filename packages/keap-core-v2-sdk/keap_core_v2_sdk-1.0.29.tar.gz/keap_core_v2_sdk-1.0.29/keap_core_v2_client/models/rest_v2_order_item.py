# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.852640
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from keap_core_v2_client.models.currency_value import CurrencyValue
from keap_core_v2_client.models.discount import Discount
from keap_core_v2_client.models.order_item_product import OrderItemProduct
from keap_core_v2_client.models.order_item_tax import OrderItemTax
from keap_core_v2_client.models.rest_subscription_plan import RestSubscriptionPlan
from keap_core_v2_client.models.rest_v2_subscription import RestV2Subscription
from typing import Optional, Set
from typing_extensions import Self

class RestV2OrderItem(BaseModel):
    """
    RestV2OrderItem
    """ # noqa: E501
    cost_per_unit: Optional[CurrencyValue] = None
    description: Optional[StrictStr] = None
    discount: Optional[CurrencyValue] = None
    id: Optional[StrictStr] = None
    item_type: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    order_item_taxes: Optional[List[OrderItemTax]] = None
    price_per_unit: Optional[CurrencyValue] = None
    product: Optional[OrderItemProduct] = None
    quantity: Optional[StrictInt] = None
    special: Optional[Discount] = None
    subscription: Optional[RestV2Subscription] = None
    subscription_id: Optional[StrictStr] = None
    subscription_plan: Optional[RestSubscriptionPlan] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["cost_per_unit", "description", "discount", "id", "item_type", "name", "notes", "order_item_taxes", "price_per_unit", "product", "quantity", "special", "subscription", "subscription_id", "subscription_plan"]

    @field_validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'SHIPPING', 'TAX', 'SERVICE', 'PRODUCT', 'UPSELL', 'FINANCE_CHARGE', 'DISCOUNT', 'PROGRAM', 'SUBSCRIPTION', 'DISCOUNT_FREE_TRIAL', 'DISCOUNT_ORDER_TOTAL', 'DISCOUNT_PRODUCT', 'DISCOUNT_PRODUCT_CATEGORY', 'DISCOUNT_SHIPPING', 'TIP', 'OTHER']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'SHIPPING', 'TAX', 'SERVICE', 'PRODUCT', 'UPSELL', 'FINANCE_CHARGE', 'DISCOUNT', 'PROGRAM', 'SUBSCRIPTION', 'DISCOUNT_FREE_TRIAL', 'DISCOUNT_ORDER_TOTAL', 'DISCOUNT_PRODUCT', 'DISCOUNT_PRODUCT_CATEGORY', 'DISCOUNT_SHIPPING', 'TIP', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV2OrderItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost_per_unit
        if self.cost_per_unit:
            _dict['cost_per_unit'] = self.cost_per_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_item_taxes (list)
        _items = []
        if self.order_item_taxes:
            for _item_order_item_taxes in self.order_item_taxes:
                if _item_order_item_taxes:
                    _items.append(_item_order_item_taxes.to_dict())
            _dict['order_item_taxes'] = _items
        # override the default output from pydantic by calling `to_dict()` of price_per_unit
        if self.price_per_unit:
            _dict['price_per_unit'] = self.price_per_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of special
        if self.special:
            _dict['special'] = self.special.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_plan
        if self.subscription_plan:
            _dict['subscription_plan'] = self.subscription_plan.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV2OrderItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cost_per_unit": CurrencyValue.from_dict(obj["cost_per_unit"]) if obj.get("cost_per_unit") is not None else None,
            "description": obj.get("description"),
            "discount": CurrencyValue.from_dict(obj["discount"]) if obj.get("discount") is not None else None,
            "id": obj.get("id"),
            "item_type": obj.get("item_type"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "order_item_taxes": [OrderItemTax.from_dict(_item) for _item in obj["order_item_taxes"]] if obj.get("order_item_taxes") is not None else None,
            "price_per_unit": CurrencyValue.from_dict(obj["price_per_unit"]) if obj.get("price_per_unit") is not None else None,
            "product": OrderItemProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "quantity": obj.get("quantity"),
            "special": Discount.from_dict(obj["special"]) if obj.get("special") is not None else None,
            "subscription": RestV2Subscription.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "subscription_id": obj.get("subscription_id"),
            "subscription_plan": RestSubscriptionPlan.from_dict(obj["subscription_plan"]) if obj.get("subscription_plan") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


