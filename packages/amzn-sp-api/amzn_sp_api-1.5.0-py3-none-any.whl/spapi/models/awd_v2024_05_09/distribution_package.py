# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class DistributionPackage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contents': 'DistributionPackageContents',
        'measurements': 'MeasurementData',
        'type': 'DistributionPackageType',
    }

    attribute_map = {
        'contents': 'contents',
        'measurements': 'measurements',
        'type': 'type',
    }

    def __init__(self, contents=None, measurements=None, type=None, _configuration=None):  # noqa: E501
        """DistributionPackage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contents = None
        self._measurements = None
        self._type = None
        self.discriminator = None

        self.contents = contents
        self.measurements = measurements
        self.type = type

    @property
    def contents(self):
        """Gets the contents of this DistributionPackage.  # noqa: E501


        :return: The contents of this DistributionPackage.  # noqa: E501
        :rtype: DistributionPackageContents
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this DistributionPackage.


        :param contents: The contents of this DistributionPackage.  # noqa: E501
        :type: DistributionPackageContents
        """
        if self._configuration.client_side_validation and contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents

    @property
    def measurements(self):
        """Gets the measurements of this DistributionPackage.  # noqa: E501


        :return: The measurements of this DistributionPackage.  # noqa: E501
        :rtype: MeasurementData
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this DistributionPackage.


        :param measurements: The measurements of this DistributionPackage.  # noqa: E501
        :type: MeasurementData
        """
        if self._configuration.client_side_validation and measurements is None:
            raise ValueError("Invalid value for `measurements`, must not be `None`")  # noqa: E501

        self._measurements = measurements

    @property
    def type(self):
        """Gets the type of this DistributionPackage.  # noqa: E501


        :return: The type of this DistributionPackage.  # noqa: E501
        :rtype: DistributionPackageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DistributionPackage.


        :param type: The type of this DistributionPackage.  # noqa: E501
        :type: DistributionPackageType
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DistributionPackage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributionPackage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DistributionPackage):
            return True

        return self.to_dict() != other.to_dict()
