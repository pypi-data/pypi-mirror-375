# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetShipmentDocumentsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_id': 'str',
        'package_document_detail': 'PackageDocumentDetail',
        'benefits': 'Benefits',
    }

    attribute_map = {
        'shipment_id': 'shipmentId',
        'package_document_detail': 'packageDocumentDetail',
        'benefits': 'benefits',
    }

    def __init__(self, shipment_id=None, package_document_detail=None, benefits=None, _configuration=None):  # noqa: E501
        """GetShipmentDocumentsResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._shipment_id = None
        self._package_document_detail = None
        self._benefits = None
        self.discriminator = None

        self.shipment_id = shipment_id
        self.package_document_detail = package_document_detail
        if benefits is not None:
            self.benefits = benefits

    @property
    def shipment_id(self):
        """Gets the shipment_id of this GetShipmentDocumentsResult.  # noqa: E501

        The unique shipment identifier provided by a shipping service.  # noqa: E501

        :return: The shipment_id of this GetShipmentDocumentsResult.  # noqa: E501
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this GetShipmentDocumentsResult.

        The unique shipment identifier provided by a shipping service.  # noqa: E501

        :param shipment_id: The shipment_id of this GetShipmentDocumentsResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and shipment_id is None:
            raise ValueError("Invalid value for `shipment_id`, must not be `None`")  # noqa: E501

        self._shipment_id = shipment_id

    @property
    def package_document_detail(self):
        """Gets the package_document_detail of this GetShipmentDocumentsResult.  # noqa: E501


        :return: The package_document_detail of this GetShipmentDocumentsResult.  # noqa: E501
        :rtype: PackageDocumentDetail
        """
        return self._package_document_detail

    @package_document_detail.setter
    def package_document_detail(self, package_document_detail):
        """Sets the package_document_detail of this GetShipmentDocumentsResult.


        :param package_document_detail: The package_document_detail of this GetShipmentDocumentsResult.  # noqa: E501
        :type: PackageDocumentDetail
        """
        if self._configuration.client_side_validation and package_document_detail is None:
            raise ValueError("Invalid value for `package_document_detail`, must not be `None`")  # noqa: E501

        self._package_document_detail = package_document_detail

    @property
    def benefits(self):
        """Gets the benefits of this GetShipmentDocumentsResult.  # noqa: E501


        :return: The benefits of this GetShipmentDocumentsResult.  # noqa: E501
        :rtype: Benefits
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this GetShipmentDocumentsResult.


        :param benefits: The benefits of this GetShipmentDocumentsResult.  # noqa: E501
        :type: Benefits
        """

        self._benefits = benefits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetShipmentDocumentsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetShipmentDocumentsResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetShipmentDocumentsResult):
            return True

        return self.to_dict() != other.to_dict()
