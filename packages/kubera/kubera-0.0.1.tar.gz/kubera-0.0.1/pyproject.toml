[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "kubera"
dynamic = ["version"]
description = "Kubera is a tool for annonymizing and extracting traces from from ChatGPT, Claude, etc. usage data"
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Vajra Team"},
]
maintainers = [
    {name = "Vajra Team"},
]
keywords = ["data-extraction", "data-anonymization", "chatgpt", "claude", "openai", "gpt"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.12"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "transformers>=4.21.0",
    "humanize>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "pytest-html",
    "pytest-xdist",
    "coverage[toml]",
    "black",
    "isort",
    "autoflake",
    "pyright",
    "codespell",
    "pre-commit",
]
all = [
    "kubera[dev]",
]

[project.scripts]
kubera-chatgpt-extract-trace = "kubera.chatgpt.extract_trace:main"
kubera-chatgpt-extract-stats = "kubera.chatgpt.extract_stats:main"
kubera-claude-code-extract-trace = "kubera.claude_code.extract_trace:main"
kubera-claude-code-extract-stats = "kubera.claude_code.extract_stats:main"
kubera-claude-web-extract-trace = "kubera.claude_web.extract_trace:main"
kubera-claude-web-extract-stats = "kubera.claude_web.extract_stats:main"

[project.urls]
Homepage = "https://github.com/project-vajra/kubera"
Repository = "https://github.com/project-vajra/kubera"
"Bug Tracker" = "https://github.com/project-vajra/kubera/issues"

[tool.setuptools]
packages = ["kubera", "kubera.chatgpt", "kubera.claude_code", "kubera.claude_web"]

[tool.setuptools.package-data]
"*" = []

[tool.setuptools.exclude-package-data]
"*" = ["data/*", "data/**/*", "docs/*", "sample_schema/*"]

[tool.setuptools_scm]
write_to = "kubera/_version.py"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | kubera/_version\.py
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["kubera"]
known_third_party = ["numpy", "pandas", "transformers"]
extend_skip_glob = ["kubera/_version.py"]

[tool.autoflake]
remove-all-unused-imports = true
recursive = true
in-place = true
remove-unused-variables = true
ignore-init-module-imports = true

[tool.pyright]
include = ["kubera"]
exclude = [
    "**/__pycache__",
    "kubera/_version.py",
]
reportMissingImports = false
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportAttributeAccessIssue = "warning"
reportReturnType = "warning"
pythonVersion = "3.12"

[tool.codespell]
ignore-words-list = "thur"
skip = "docs/_build,*.css.map,*.js.map"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "-ra",
    "-q"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["pandas.*", "numpy.*", "transformers.*"]
ignore_missing_imports = true

[tool.coverage.run]
source = ["kubera"]
omit = ["kubera/_version.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
