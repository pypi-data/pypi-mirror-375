# coding: utf-8

"""
    Selling Partner API for Replenishment

    The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.

    The version of the OpenAPI document: 2022-11-07
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ListOfferMetricsRequestPagination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'offset': 'int',
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
    }

    def __init__(self, limit=None, offset=None, _configuration=None):  # noqa: E501
        """ListOfferMetricsRequestPagination - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._limit = None
        self._offset = None
        self.discriminator = None

        self.limit = limit
        self.offset = offset

    @property
    def limit(self):
        """Gets the limit of this ListOfferMetricsRequestPagination.  # noqa: E501

        The maximum number of results to return in the response.  # noqa: E501

        :return: The limit of this ListOfferMetricsRequestPagination.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListOfferMetricsRequestPagination.

        The maximum number of results to return in the response.  # noqa: E501

        :param limit: The limit of this ListOfferMetricsRequestPagination.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                limit is not None and limit > 500):  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                limit is not None and limit < 1):  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this ListOfferMetricsRequestPagination.  # noqa: E501

        The offset from which to retrieve the number of results specified by the `limit` value. The first result is at offset 0.  # noqa: E501

        :return: The offset of this ListOfferMetricsRequestPagination.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ListOfferMetricsRequestPagination.

        The offset from which to retrieve the number of results specified by the `limit` value. The first result is at offset 0.  # noqa: E501

        :param offset: The offset of this ListOfferMetricsRequestPagination.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                offset is not None and offset > 9000):  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `9000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                offset is not None and offset < 0):  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")  # noqa: E501

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListOfferMetricsRequestPagination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListOfferMetricsRequestPagination):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListOfferMetricsRequestPagination):
            return True

        return self.to_dict() != other.to_dict()
