---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/cross_module_attribute_import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypackage___version__ = _cribo.types.SimpleNamespace(__name__='mypackage.__version__')
mypackage = _cribo.types.SimpleNamespace(__name__='mypackage', __initializing__=False, __initialized__=False)
mypackage.__version__ = mypackage___version__
"""Version information module."""
__version__ = "1.0.0"
mypackage___version__.__version__ = __version__
mypackage_core = _cribo.types.SimpleNamespace(__name__='mypackage.core', __initializing__=False, __initialized__=False)
mypackage.core = mypackage_core
mypackage_utils = _cribo.types.SimpleNamespace(__name__='mypackage.utils', __initializing__=False, __initialized__=False)
mypackage.utils = mypackage_utils
def _cribo_init___cribo_370515_mypackage(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global mypackage_core, mypackage_utils
    """Package init that creates circular dependency."""
    mypackage_utils = _cribo_init___cribo_35f1d1_mypackage_utils(mypackage_utils)
    get_version_info = mypackage_utils.get_version_info
    self.get_version_info = get_version_info
    self.get_version_info = get_version_info
    mypackage_core = _cribo_init___cribo_e49d78_mypackage_core(mypackage_core)
    process_data = mypackage_core.process_data
    self.process_data = process_data
    self.process_data = process_data

    def get_full_info():
        """Combine version and processed data."""
        return f"{get_version_info()} - {process_data()}"
    self.get_full_info = get_full_info
    self.__version__ = mypackage___version__
    self.__version__ = mypackage___version__
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypackage.__init__ = _cribo_init___cribo_370515_mypackage
def _cribo_init___cribo_e49d78_mypackage_core(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Core module that creates circular dependency."""
    __cribo_init_result = _cribo_init___cribo_370515_mypackage(mypackage)
    for attr in dir(__cribo_init_result):
        if not attr.startswith('_'):
            setattr(mypackage, attr, getattr(__cribo_init_result, attr))

    def process_data():
        """Process some data."""
        return "Processed Data"
    self.process_data = process_data
    package_ref = mypackage
    self.package_ref = package_ref
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypackage_core.__init__ = _cribo_init___cribo_e49d78_mypackage_core
def _cribo_init___cribo_35f1d1_mypackage_utils(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Utils module that imports from __version__ module and uses it at module level."""
    __version__ = mypackage___version__.__version__
    mypackage_utils.__version__ = __version__
    VERSION_PREFIX = f"v{__version__}"
    self.VERSION_PREFIX = VERSION_PREFIX

    def get_version_info():
        """Return version information using the imported __version__ variable."""
        return VERSION_PREFIX
    self.get_version_info = get_version_info
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypackage_utils.__init__ = _cribo_init___cribo_35f1d1_mypackage_utils
"""Test cross-module attribute import with circular dependencies that require init functions."""
__cribo_init_result = _cribo_init___cribo_370515_mypackage(mypackage)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypackage, attr, getattr(__cribo_init_result, attr))
print(mypackage.get_full_info())
core = mypackage.core
utils = mypackage.utils
