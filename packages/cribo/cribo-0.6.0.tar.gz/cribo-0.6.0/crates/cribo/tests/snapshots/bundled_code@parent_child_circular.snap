---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/parent_child_circular/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
foo_zoo = _cribo.types.SimpleNamespace(__name__='foo.zoo', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_83878b_foo_zoo(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Module zoo - the end of the chain."""
    print("Initializing foo.zoo module")

    class Zoo:
        """A simple class with no dependencies."""

        def format(self, value):
            """Format a value."""
            return f"[{value}]"

        def transform(self, data):
            """Transform data."""
            return f"Transformed: {data}"
    Zoo.__module__ = 'foo.zoo'
    self.Zoo = Zoo
    self.__initialized__ = True
    self.__initializing__ = False
    return self
foo_zoo.__init__ = _cribo_init___cribo_83878b_foo_zoo
foo = _cribo.types.SimpleNamespace(__name__='foo', __initializing__=False, __initialized__=False)
foo.zoo = foo_zoo
foo_boo = _cribo.types.SimpleNamespace(__name__='foo.boo', __initializing__=False, __initialized__=False)
foo.boo = foo_boo
def _cribo_init___cribo_97cb47_foo(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global foo_boo
    """Parent package that imports from its child module."""
    print("Initializing foo package")
    foo_boo = _cribo_init___cribo_f2ecbb_foo_boo(foo_boo)
    helper_function = foo_boo.helper_function
    self.helper_function = helper_function
    self.helper_function = helper_function

    def package_level_function(x):
        """A function at the package level that uses the imported helper."""
        return helper_function(x) + " (from package)"
    self.package_level_function = package_level_function
    self.__initialized__ = True
    self.__initializing__ = False
    return self
foo.__init__ = _cribo_init___cribo_97cb47_foo
def _cribo_init___cribo_f2ecbb_foo_boo(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global foo_zoo
    """Child module boo that imports another sibling."""
    print("Initializing foo.boo module")
    foo_zoo = _cribo_init___cribo_83878b_foo_zoo(foo_zoo)
    Zoo = foo.zoo.Zoo
    self.Zoo = Zoo
    self.Zoo = Zoo

    def helper_function(x):
        """A helper function used by the parent package."""
        zoo = Zoo()
        return zoo.format(x)
    self.helper_function = helper_function

    def process_data(data):
        """Process data using zoo functionality."""
        zoo = Zoo()
        return zoo.transform(data)
    self.process_data = process_data
    self.__initialized__ = True
    self.__initializing__ = False
    return self
foo_boo.__init__ = _cribo_init___cribo_f2ecbb_foo_boo
"""Test parent-child circular dependencies.\n\nThis tests the case where:\n1. foo/__init__.py imports from foo.boo\n2. foo.boo imports foo.zoo\n3. This creates a circular dependency because foo.zoo requires foo to be initialized first\n"""
print("Initializing main module")
__cribo_init_result = _cribo_init___cribo_97cb47_foo(foo)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(foo, attr, getattr(__cribo_init_result, attr))
foo_boo = _cribo_init___cribo_f2ecbb_foo_boo(foo_boo)
process_data = foo.boo.process_data
result = process_data("test input")
print(f"Result: {result}")
boo = foo.boo
zoo = foo.zoo
