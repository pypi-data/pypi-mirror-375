# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V4CrawlPostRequest(BaseModel):
    """
    V4CrawlPostRequest
    """ # noqa: E501
    url: StrictStr = Field(description="URL to start crawling")
    paths_filter_in: Optional[List[StrictStr]] = Field(default=None, description="List of path patterns to include in the crawl", alias="pathsFilterIn")
    paths_filter_out: Optional[List[StrictStr]] = Field(default=None, description="List of path patterns to exclude from the crawl", alias="pathsFilterOut")
    timeout: Optional[StrictInt] = Field(default=None, description="Maximum time for crawling in milliseconds")
    max_depth: Optional[StrictInt] = Field(default=None, description="Maximum depth to traverse during the crawl", alias="maxDepth")
    max_pages: Optional[StrictInt] = Field(default=None, description="Maximum number of pages to crawl", alias="maxPages")
    strict_domain: Optional[StrictBool] = Field(default=None, description="Set this flag to true when you want the crawler to stay on the same exact domain, not going to subdomains", alias="strictDomain")
    proxy_country: Optional[StrictStr] = Field(default=None, description="country flag code to assign to proxy configuration to navigate behind the proxy", alias="proxyCountry")
    __properties: ClassVar[List[str]] = ["url", "pathsFilterIn", "pathsFilterOut", "timeout", "maxDepth", "maxPages", "strictDomain", "proxyCountry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V4CrawlPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V4CrawlPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "pathsFilterIn": obj.get("pathsFilterIn"),
            "pathsFilterOut": obj.get("pathsFilterOut"),
            "timeout": obj.get("timeout"),
            "maxDepth": obj.get("maxDepth"),
            "maxPages": obj.get("maxPages"),
            "strictDomain": obj.get("strictDomain"),
            "proxyCountry": obj.get("proxyCountry")
        })
        return _obj


