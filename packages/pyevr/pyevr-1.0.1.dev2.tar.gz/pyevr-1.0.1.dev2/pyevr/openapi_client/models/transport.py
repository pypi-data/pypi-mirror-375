# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei Ãµnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.subcontractor import Subcontractor
from pyevr.openapi_client.models.transporter import Transporter


class Transport(BaseModel):
    """
    Transport
    """  # noqa: E501

    transporter: Transporter
    driver_name: Annotated[str, Field(min_length=0, strict=True, max_length=200)] = (
        Field(description="Autojuhi nimi", alias="driverName")
    )
    driver_id_code: Annotated[str, Field(min_length=0, strict=True, max_length=11)] = (
        Field(description="Autojuhi isikukood", alias="driverIdCode")
    )
    driver_phone: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(
        default=None, description="Autojuhi telefoninumber", alias="driverPhone"
    )
    van_registration_number: Annotated[
        str, Field(min_length=0, strict=True, max_length=10)
    ] = Field(
        description="Veoki riiklik registreerimisnumber", alias="vanRegistrationNumber"
    )
    trailer_registration_number: Optional[
        Annotated[str, Field(strict=True, max_length=10)]
    ] = Field(
        default=None,
        description="Haagise kasutamise korral haagise riiklik registreerimisnumber",
        alias="trailerRegistrationNumber",
    )
    subcontractor: Optional[Subcontractor] = None
    __properties: ClassVar[List[str]] = [
        "transporter",
        "driverName",
        "driverIdCode",
        "driverPhone",
        "vanRegistrationNumber",
        "trailerRegistrationNumber",
        "subcontractor",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transporter
        if self.transporter:
            _dict["transporter"] = self.transporter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subcontractor
        if self.subcontractor:
            _dict["subcontractor"] = self.subcontractor.to_dict()
        # set to None if driver_phone (nullable) is None
        # and model_fields_set contains the field
        if self.driver_phone is None and "driver_phone" in self.model_fields_set:
            _dict["driverPhone"] = None

        # set to None if trailer_registration_number (nullable) is None
        # and model_fields_set contains the field
        if (
            self.trailer_registration_number is None
            and "trailer_registration_number" in self.model_fields_set
        ):
            _dict["trailerRegistrationNumber"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "transporter": Transporter.from_dict(obj["transporter"])
                if obj.get("transporter") is not None
                else None,
                "driverName": obj.get("driverName"),
                "driverIdCode": obj.get("driverIdCode"),
                "driverPhone": obj.get("driverPhone"),
                "vanRegistrationNumber": obj.get("vanRegistrationNumber"),
                "trailerRegistrationNumber": obj.get("trailerRegistrationNumber"),
                "subcontractor": Subcontractor.from_dict(obj["subcontractor"])
                if obj.get("subcontractor") is not None
                else None,
            }
        )
        return _obj
