# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/geography/geography_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class GeometryType(betterproto.Enum):
    NOT_SET = 0
    POINT = 1
    POLYGON = 2


@dataclass(eq=False, repr=False)
class GetTopoJsonRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)
    """Requestee might not have access to all map-data"""

    map_layer_id: str = betterproto.string_field(3)
    """
    Which map_layer to search - only allowing one; too complex to derive and make separations in the response, and no real usecase for combined map_layers
    """

    feature_id_filter: List[str] = betterproto.string_field(5)
    """
    List of features by ID to limit the search to - if provided, only these features are provided.
    """

    address_component_filter: List["AddressComponentFilter"] = (
        betterproto.message_field(7)
    )
    """
    Filter clause to limit the search to certain Address Component Values.
    """

    polygon_bound: "BoundingBox" = betterproto.message_field(8)
    """
    only features with geometriess intersecting with the area defined by the bound is returned
     Passing an empty polygon (= all values set to 0 as `optional` is not supported), means no filter on geom
    """

    polygon_bound_str: str = betterproto.string_field(10)
    """
    If set: Overrides the BoundingBox-parameter ´polygon_bound´ with values passed as JSON-serialized array of floats.
     The string format expected is "[west, south, east, north]" - each value representing the lat/lon of the box-edge
    """

    zoom_level: int = betterproto.int32_field(9)
    """
    This value indicates the zoom level of the map the features will be drawn on.
     Feature-geometries will be decimated using the DouglasPeucker-algorithm to reduce fidelity of geometries returned.
     Follows the zoom-level definition of MapBox (https://docs.mapbox.com/help/glossary/zoom-level/)
     If not set, API assumes a value of 6.
    """

    feature_name_override: str = betterproto.string_field(11)
    """
    Optional override of the feature name in the response.
     If not set, the feature DisplayName or previous hard-coded overrides for certain map-layers will be used.AddressComponentFilter.
     Allowable values are the key of address-components available on the map-layer requesting.
     BAD values will not cause errors, but default behavior as if it was not provided.
     Providing different values for this field will cause cache-misses.
    """

    geometry_source_type: "GeometryType" = betterproto.enum_field(12)
    """
    Decide which of the geometry-source to return. Defaults to POLYGON to don't break.
    """


@dataclass(eq=False, repr=False)
class AddressComponentFilter(betterproto.Message):
    component: str = betterproto.string_field(1)
    values: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Coordinate(betterproto.Message):
    lat: float = betterproto.double_field(1)
    lon: float = betterproto.double_field(2)


@dataclass(eq=False, repr=False)
class BoundingBox(betterproto.Message):
    """
    BoundingBox describes a square geofence - ie the "display area" of a map.
    """

    south_west: "Coordinate" = betterproto.message_field(1)
    north_east: "Coordinate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetTopoJsonResponse(betterproto.Message):
    topology: str = betterproto.string_field(1)
    """
    The resulting TopoJSON (https://github.com/topojson/topojson) as a string-blob
     The ID of the GeoJSON.Feature corresponds to the FeatureID of the Feature in the MapLayer.
     Also includes DisplayName in the attributes of the GeoJSON.Feature.
    """


class GeoServiceStub(betterproto.ServiceStub):
    async def get_topo_json(
        self,
        get_topo_json_request: "GetTopoJsonRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTopoJsonResponse":
        return await self._unary_unary(
            "/unacast.v2.geography.GeoService/GetTopoJSON",
            get_topo_json_request,
            GetTopoJsonResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class GeoServiceBase(ServiceBase):

    async def get_topo_json(
        self, get_topo_json_request: "GetTopoJsonRequest"
    ) -> "GetTopoJsonResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_topo_json(
        self, stream: "grpclib.server.Stream[GetTopoJsonRequest, GetTopoJsonResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topo_json(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.geography.GeoService/GetTopoJSON": grpclib.const.Handler(
                self.__rpc_get_topo_json,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTopoJsonRequest,
                GetTopoJsonResponse,
            ),
        }
