# coding: utf-8

"""
    The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).

    The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.

    The version of the OpenAPI document: 2024-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class AccountHolderAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'state': 'str',
        'postal_code': 'str',
        'country': 'str',
        'country_code': 'str',
    }

    attribute_map = {
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'city': 'city',
        'state': 'state',
        'postal_code': 'postalCode',
        'country': 'country',
        'country_code': 'countryCode',
    }

    def __init__(self, address_line1=None, address_line2=None, city=None, state=None, postal_code=None, country=None, country_code=None, _configuration=None):  # noqa: E501
        """AccountHolderAddress - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._state = None
        self._postal_code = None
        self._country = None
        self._country_code = None
        self.discriminator = None

        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        self.city = city
        self.state = state
        self.postal_code = postal_code
        if country is not None:
            self.country = country
        self.country_code = country_code

    @property
    def address_line1(self):
        """Gets the address_line1 of this AccountHolderAddress.  # noqa: E501

        Address Line 1 of the public address   # noqa: E501

        :return: The address_line1 of this AccountHolderAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this AccountHolderAddress.

        Address Line 1 of the public address   # noqa: E501

        :param address_line1: The address_line1 of this AccountHolderAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this AccountHolderAddress.  # noqa: E501

        Address Line 2 of the public address   # noqa: E501

        :return: The address_line2 of this AccountHolderAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this AccountHolderAddress.

        Address Line 2 of the public address   # noqa: E501

        :param address_line2: The address_line2 of this AccountHolderAddress.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this AccountHolderAddress.  # noqa: E501

        City name of the public address   # noqa: E501

        :return: The city of this AccountHolderAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AccountHolderAddress.

        City name of the public address   # noqa: E501

        :param city: The city of this AccountHolderAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this AccountHolderAddress.  # noqa: E501

        State name of the public address. This is the state or region for China-based addresses.  # noqa: E501

        :return: The state of this AccountHolderAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AccountHolderAddress.

        State name of the public address. This is the state or region for China-based addresses.  # noqa: E501

        :param state: The state of this AccountHolderAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def postal_code(self):
        """Gets the postal_code of this AccountHolderAddress.  # noqa: E501

        Postal code of the public address   # noqa: E501

        :return: The postal_code of this AccountHolderAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AccountHolderAddress.

        Postal code of the public address   # noqa: E501

        :param postal_code: The postal_code of this AccountHolderAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this AccountHolderAddress.  # noqa: E501

        Country name of the public address   # noqa: E501

        :return: The country of this AccountHolderAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AccountHolderAddress.

        Country name of the public address   # noqa: E501

        :param country: The country of this AccountHolderAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this AccountHolderAddress.  # noqa: E501

        The two digit country code, in ISO 3166 format.   # noqa: E501

        :return: The country_code of this AccountHolderAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this AccountHolderAddress.

        The two digit country code, in ISO 3166 format.   # noqa: E501

        :param country_code: The country_code of this AccountHolderAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountHolderAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountHolderAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountHolderAddress):
            return True

        return self.to_dict() != other.to_dict()
