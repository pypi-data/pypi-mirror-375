/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.12.0
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"
        #include <wx/bitmap.h>
    int _wxAlphaPixelData_Accessor___nonzero__(wxAlphaPixelData_Accessor* self)
    {
        return (int)self->IsOk();
    }
    int _wxAlphaPixelData_Accessor___bool__(wxAlphaPixelData_Accessor* self)
    {
        return self->IsOk();
    }
    void _wxAlphaPixelData_Accessor_nextPixel(wxAlphaPixelData_Accessor* self)
    {
        ++(*self);
    }
    void _wxAlphaPixelData_Accessor_Set(wxAlphaPixelData_Accessor* self, byte red, byte green, byte blue, byte alpha)
    {
        self->Red()   = wxPy_premultiply(red,   alpha);
        self->Green() = wxPy_premultiply(green, alpha);
        self->Blue()  = wxPy_premultiply(blue,  alpha);
        self->Alpha() = alpha;
    }
    PyObject* _wxAlphaPixelData_Accessor_Get(wxAlphaPixelData_Accessor* self)
    {
        wxPyThreadBlocker blocker;
        PyObject* rv = PyTuple_New(4);
        int red   = self->Red();
        int green = self->Green();
        int blue  = self->Blue();
        int alpha = self->Alpha();
        
        PyTuple_SetItem(rv, 0, wxPyInt_FromLong( wxPy_unpremultiply(red,   alpha) ));
        PyTuple_SetItem(rv, 1, wxPyInt_FromLong( wxPy_unpremultiply(green, alpha) ));
        PyTuple_SetItem(rv, 2, wxPyInt_FromLong( wxPy_unpremultiply(blue,  alpha) ));
        PyTuple_SetItem(rv, 3, wxPyInt_FromLong( alpha ));
        return rv;
    }


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor_Reset, "Reset(data) -> None");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor_Reset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor_Reset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxAlphaPixelData* data;
        ::wxAlphaPixelData_Accessor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp, sipType_wxAlphaPixelData, &data))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Reset(*data);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName_Reset, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor_IsOk, "IsOk() -> bool");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor_IsOk(PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor_IsOk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxAlphaPixelData_Accessor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsOk();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName_IsOk, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor___nonzero__, "__nonzero__() -> bool");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor___nonzero__(PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor___nonzero__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxAlphaPixelData_Accessor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp))
        {
            int sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxAlphaPixelData_Accessor___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName___nonzero__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor_Offset, "Offset(data, x, y) -> None");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor_Offset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor_Offset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxAlphaPixelData* data;
        int x;
        int y;
        ::wxAlphaPixelData_Accessor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_data,
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9ii", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp, sipType_wxAlphaPixelData, &data, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Offset(*data, x, y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName_Offset, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor_OffsetX, "OffsetX(data, x) -> None");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor_OffsetX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor_OffsetX(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxAlphaPixelData* data;
        int x;
        ::wxAlphaPixelData_Accessor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_data,
            sipName_x,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9i", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp, sipType_wxAlphaPixelData, &data, &x))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->OffsetX(*data, x);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName_OffsetX, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor_OffsetY, "OffsetY(data, y) -> None");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor_OffsetY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor_OffsetY(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxAlphaPixelData* data;
        int y;
        ::wxAlphaPixelData_Accessor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_data,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9i", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp, sipType_wxAlphaPixelData, &data, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->OffsetY(*data, y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName_OffsetY, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor_MoveTo, "MoveTo(data, x, y) -> None");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor_MoveTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor_MoveTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxAlphaPixelData* data;
        int x;
        int y;
        ::wxAlphaPixelData_Accessor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_data,
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9ii", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp, sipType_wxAlphaPixelData, &data, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->MoveTo(*data, x, y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName_MoveTo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor_nextPixel, "nextPixel() -> None");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor_nextPixel(PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor_nextPixel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxAlphaPixelData_Accessor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp))
        {
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxAlphaPixelData_Accessor_nextPixel(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName_nextPixel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor_Set, "Set(red, green, blue, alpha) -> None");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor_Set(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor_Set(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::byte red;
        ::byte green;
        ::byte blue;
        ::byte alpha;
        ::wxAlphaPixelData_Accessor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_red,
            sipName_green,
            sipName_blue,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BMMMM", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp, &red, &green, &blue, &alpha))
        {
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxAlphaPixelData_Accessor_Set(sipCpp, red, green, blue, alpha);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName_Set, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor_Get, "Get() -> Any");

extern "C" {static PyObject *meth_wxAlphaPixelData_Accessor_Get(PyObject *, PyObject *);}
static PyObject *meth_wxAlphaPixelData_Accessor_Get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxAlphaPixelData_Accessor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAlphaPixelData_Accessor, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxAlphaPixelData_Accessor_Get(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_AlphaPixelData_Accessor, sipName_Get, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static int slot_wxAlphaPixelData_Accessor___bool__(PyObject *);}
static int slot_wxAlphaPixelData_Accessor___bool__(PyObject *sipSelf)
{
    ::wxAlphaPixelData_Accessor *sipCpp = reinterpret_cast< ::wxAlphaPixelData_Accessor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf, sipType_wxAlphaPixelData_Accessor));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxAlphaPixelData_Accessor___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return -1;

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAlphaPixelData_Accessor(void *, int);}
static void release_wxAlphaPixelData_Accessor(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxAlphaPixelData_Accessor *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxAlphaPixelData_Accessor(Py_ssize_t);}
static void *array_wxAlphaPixelData_Accessor(Py_ssize_t sipNrElem)
{
    return new ::wxAlphaPixelData_Accessor[sipNrElem];
}


extern "C" {static void array_delete_wxAlphaPixelData_Accessor(void *);}
static void array_delete_wxAlphaPixelData_Accessor(void *sipCpp)
{
    delete[] reinterpret_cast< ::wxAlphaPixelData_Accessor *>(sipCpp);
}


extern "C" {static void assign_wxAlphaPixelData_Accessor(void *, Py_ssize_t, void *);}
static void assign_wxAlphaPixelData_Accessor(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxAlphaPixelData_Accessor *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxAlphaPixelData_Accessor *>(sipSrc);
}


extern "C" {static void *copy_wxAlphaPixelData_Accessor(const void *, Py_ssize_t);}
static void *copy_wxAlphaPixelData_Accessor(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new ::wxAlphaPixelData_Accessor(reinterpret_cast<const ::wxAlphaPixelData_Accessor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxAlphaPixelData_Accessor(sipSimpleWrapper *);}
static void dealloc_wxAlphaPixelData_Accessor(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAlphaPixelData_Accessor(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxAlphaPixelData_Accessor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAlphaPixelData_Accessor(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    ::wxAlphaPixelData_Accessor *sipCpp = SIP_NULLPTR;

    {
        ::wxAlphaPixelData* data;

        static const char *sipKwdList[] = {
            sipName_data,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxAlphaPixelData, &data))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new ::wxAlphaPixelData_Accessor(*data);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        ::wxBitmap* bmp;
        ::wxAlphaPixelData* data;

        static const char *sipKwdList[] = {
            sipName_bmp,
            sipName_data,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9", sipType_wxBitmap, &bmp, sipType_wxAlphaPixelData, &data))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new ::wxAlphaPixelData_Accessor(*bmp, *data);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new ::wxAlphaPixelData_Accessor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        const ::wxAlphaPixelData_Accessor* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxAlphaPixelData_Accessor, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new ::wxAlphaPixelData_Accessor(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_wxAlphaPixelData_Accessor[] = {
    {(void *)slot_wxAlphaPixelData_Accessor___bool__, bool_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_wxAlphaPixelData_Accessor[] = {
    {sipName_Get, meth_wxAlphaPixelData_Accessor_Get, METH_VARARGS, doc_wxAlphaPixelData_Accessor_Get},
    {sipName_IsOk, meth_wxAlphaPixelData_Accessor_IsOk, METH_VARARGS, doc_wxAlphaPixelData_Accessor_IsOk},
    {sipName_MoveTo, SIP_MLMETH_CAST(meth_wxAlphaPixelData_Accessor_MoveTo), METH_VARARGS|METH_KEYWORDS, doc_wxAlphaPixelData_Accessor_MoveTo},
    {sipName_Offset, SIP_MLMETH_CAST(meth_wxAlphaPixelData_Accessor_Offset), METH_VARARGS|METH_KEYWORDS, doc_wxAlphaPixelData_Accessor_Offset},
    {sipName_OffsetX, SIP_MLMETH_CAST(meth_wxAlphaPixelData_Accessor_OffsetX), METH_VARARGS|METH_KEYWORDS, doc_wxAlphaPixelData_Accessor_OffsetX},
    {sipName_OffsetY, SIP_MLMETH_CAST(meth_wxAlphaPixelData_Accessor_OffsetY), METH_VARARGS|METH_KEYWORDS, doc_wxAlphaPixelData_Accessor_OffsetY},
    {sipName_Reset, SIP_MLMETH_CAST(meth_wxAlphaPixelData_Accessor_Reset), METH_VARARGS|METH_KEYWORDS, doc_wxAlphaPixelData_Accessor_Reset},
    {sipName_Set, SIP_MLMETH_CAST(meth_wxAlphaPixelData_Accessor_Set), METH_VARARGS|METH_KEYWORDS, doc_wxAlphaPixelData_Accessor_Set},
    {sipName___nonzero__, meth_wxAlphaPixelData_Accessor___nonzero__, METH_VARARGS, doc_wxAlphaPixelData_Accessor___nonzero__},
    {sipName_nextPixel, meth_wxAlphaPixelData_Accessor_nextPixel, METH_VARARGS, doc_wxAlphaPixelData_Accessor_nextPixel}
};

PyDoc_STRVAR(doc_wxAlphaPixelData_Accessor, "AlphaPixelData_Accessor(data) -> None\n"
"AlphaPixelData_Accessor(bmp, data) -> None\n"
"AlphaPixelData_Accessor() -> None");


sipClassTypeDef sipTypeDef__core_wxAlphaPixelData_Accessor = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxAlphaPixelData_Accessor,
        SIP_NULLPTR,
        SIP_NULLPTR,
    },
    {
        sipNameNr_AlphaPixelData_Accessor,
        {0, 0, 1},
        10, methods_wxAlphaPixelData_Accessor,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxAlphaPixelData_Accessor,
    -1,
    -1,
    SIP_NULLPTR,
    slots_wxAlphaPixelData_Accessor,
    init_type_wxAlphaPixelData_Accessor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxAlphaPixelData_Accessor,
    assign_wxAlphaPixelData_Accessor,
    array_wxAlphaPixelData_Accessor,
    copy_wxAlphaPixelData_Accessor,
    release_wxAlphaPixelData_Accessor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    array_delete_wxAlphaPixelData_Accessor,
    sizeof (::wxAlphaPixelData_Accessor),
};
