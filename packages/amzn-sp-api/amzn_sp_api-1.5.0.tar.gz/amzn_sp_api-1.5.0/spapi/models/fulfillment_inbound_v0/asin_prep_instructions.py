# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ASINPrepInstructions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asin': 'str',
        'barcode_instruction': 'BarcodeInstruction',
        'prep_guidance': 'PrepGuidance',
        'prep_instruction_list': 'List[PrepInstruction]',
    }

    attribute_map = {
        'asin': 'ASIN',
        'barcode_instruction': 'BarcodeInstruction',
        'prep_guidance': 'PrepGuidance',
        'prep_instruction_list': 'PrepInstructionList',
    }

    def __init__(self, asin=None, barcode_instruction=None, prep_guidance=None, prep_instruction_list=None, _configuration=None):  # noqa: E501
        """ASINPrepInstructions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asin = None
        self._barcode_instruction = None
        self._prep_guidance = None
        self._prep_instruction_list = None
        self.discriminator = None

        if asin is not None:
            self.asin = asin
        if barcode_instruction is not None:
            self.barcode_instruction = barcode_instruction
        if prep_guidance is not None:
            self.prep_guidance = prep_guidance
        if prep_instruction_list is not None:
            self.prep_instruction_list = prep_instruction_list

    @property
    def asin(self):
        """Gets the asin of this ASINPrepInstructions.  # noqa: E501

        The Amazon Standard Identification Number (ASIN) of the item.  # noqa: E501

        :return: The asin of this ASINPrepInstructions.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this ASINPrepInstructions.

        The Amazon Standard Identification Number (ASIN) of the item.  # noqa: E501

        :param asin: The asin of this ASINPrepInstructions.  # noqa: E501
        :type: str
        """

        self._asin = asin

    @property
    def barcode_instruction(self):
        """Gets the barcode_instruction of this ASINPrepInstructions.  # noqa: E501


        :return: The barcode_instruction of this ASINPrepInstructions.  # noqa: E501
        :rtype: BarcodeInstruction
        """
        return self._barcode_instruction

    @barcode_instruction.setter
    def barcode_instruction(self, barcode_instruction):
        """Sets the barcode_instruction of this ASINPrepInstructions.


        :param barcode_instruction: The barcode_instruction of this ASINPrepInstructions.  # noqa: E501
        :type: BarcodeInstruction
        """

        self._barcode_instruction = barcode_instruction

    @property
    def prep_guidance(self):
        """Gets the prep_guidance of this ASINPrepInstructions.  # noqa: E501


        :return: The prep_guidance of this ASINPrepInstructions.  # noqa: E501
        :rtype: PrepGuidance
        """
        return self._prep_guidance

    @prep_guidance.setter
    def prep_guidance(self, prep_guidance):
        """Sets the prep_guidance of this ASINPrepInstructions.


        :param prep_guidance: The prep_guidance of this ASINPrepInstructions.  # noqa: E501
        :type: PrepGuidance
        """

        self._prep_guidance = prep_guidance

    @property
    def prep_instruction_list(self):
        """Gets the prep_instruction_list of this ASINPrepInstructions.  # noqa: E501

        A list of preparation instructions to help with item sourcing decisions.  # noqa: E501

        :return: The prep_instruction_list of this ASINPrepInstructions.  # noqa: E501
        :rtype: List[PrepInstruction]
        """
        return self._prep_instruction_list

    @prep_instruction_list.setter
    def prep_instruction_list(self, prep_instruction_list):
        """Sets the prep_instruction_list of this ASINPrepInstructions.

        A list of preparation instructions to help with item sourcing decisions.  # noqa: E501

        :param prep_instruction_list: The prep_instruction_list of this ASINPrepInstructions.  # noqa: E501
        :type: List[PrepInstruction]
        """

        self._prep_instruction_list = prep_instruction_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ASINPrepInstructions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ASINPrepInstructions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ASINPrepInstructions):
            return True

        return self.to_dict() != other.to_dict()
