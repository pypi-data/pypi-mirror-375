---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_module_name_conflict/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypackage_abc = _cribo.types.SimpleNamespace(__name__='mypackage.abc')
mypackage = _cribo.types.SimpleNamespace(__name__='mypackage', __initializing__=False, __initialized__=False)
mypackage.abc = mypackage_abc
ABC = _cribo.abc.ABC
class MyClass(_cribo.abc.ABC):
    """A class that uses ABC from the stdlib."""

    def get_name(self):
        return "MyClass instance"

    @classmethod
    def __subclasshook__(cls, other):
        """Check if this class supports a protocol."""
        return hasattr(other, "__special__")
MyClass.__module__ = 'mypackage.abc'
mypackage_abc.ABC = ABC
mypackage_abc.MyClass = MyClass
abc = mypackage_abc
obj = abc.MyClass()
print(obj.get_name())
print(f"Is MyClass a subclass of ABC? {issubclass(abc.MyClass, abc.ABC)}")
