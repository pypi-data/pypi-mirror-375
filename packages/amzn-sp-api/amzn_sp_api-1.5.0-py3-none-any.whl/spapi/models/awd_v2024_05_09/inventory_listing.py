# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class InventoryListing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inventory': 'List[InventorySummary]',
        'next_token': 'str',
    }

    attribute_map = {
        'inventory': 'inventory',
        'next_token': 'nextToken',
    }

    def __init__(self, inventory=None, next_token=None, _configuration=None):  # noqa: E501
        """InventoryListing - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._inventory = None
        self._next_token = None
        self.discriminator = None

        self.inventory = inventory
        if next_token is not None:
            self.next_token = next_token

    @property
    def inventory(self):
        """Gets the inventory of this InventoryListing.  # noqa: E501

        List of inventory summaries.  # noqa: E501

        :return: The inventory of this InventoryListing.  # noqa: E501
        :rtype: List[InventorySummary]
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this InventoryListing.

        List of inventory summaries.  # noqa: E501

        :param inventory: The inventory of this InventoryListing.  # noqa: E501
        :type: List[InventorySummary]
        """
        if self._configuration.client_side_validation and inventory is None:
            raise ValueError("Invalid value for `inventory`, must not be `None`")  # noqa: E501

        self._inventory = inventory

    @property
    def next_token(self):
        """Gets the next_token of this InventoryListing.  # noqa: E501

        A token that is used to retrieve the next page of results. The response includes `nextToken` when the number of results exceeds the specified `maxResults` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.  # noqa: E501

        :return: The next_token of this InventoryListing.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this InventoryListing.

        A token that is used to retrieve the next page of results. The response includes `nextToken` when the number of results exceeds the specified `maxResults` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.  # noqa: E501

        :param next_token: The next_token of this InventoryListing.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryListing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryListing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryListing):
            return True

        return self.to_dict() != other.to_dict()
