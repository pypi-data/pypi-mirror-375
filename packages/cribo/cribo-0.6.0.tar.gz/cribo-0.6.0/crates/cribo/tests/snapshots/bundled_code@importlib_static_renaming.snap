---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/importlib_static_renaming/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
foo = _cribo.types.SimpleNamespace(__name__='foo')
def greet(name):
    return f"Hello, {name}!"
def get_value():
    return 42
MESSAGE = "This is foo module"
foo.MESSAGE = MESSAGE
foo.get_value = get_value
foo.greet = greet
bar = _cribo.types.SimpleNamespace(__name__='bar')
def process(data):
    return f"Processed: {data}"
class Calculator:

    def add(self, a, b):
        return a + b

    def multiply(self, a, b):
        return a * b
Calculator.__module__ = 'bar'
VERSION = "1.0.0"
bar.Calculator = Calculator
bar.VERSION = VERSION
bar.process = process
il = _cribo.importlib
foo = _cribo.types.SimpleNamespace(greet=greet, get_value=get_value, MESSAGE=MESSAGE)
bar_module = _cribo.types.SimpleNamespace(process=process, Calculator=Calculator, VERSION=VERSION)
im = _cribo.importlib.import_module
also_foo = _cribo.types.SimpleNamespace(greet=greet, get_value=get_value, MESSAGE=MESSAGE)
also_bar = _cribo.types.SimpleNamespace(process=process, Calculator=Calculator, VERSION=VERSION)
print(f"foo.greet('World'): {greet('World')}")
print(f"foo.get_value(): {get_value()}")
print(f"foo.MESSAGE: {MESSAGE}")
print(f"\nbar_module.process('data'): {process('data')}")
print(f"bar_module.VERSION: {VERSION}")
calc = Calculator()
print(f"calc.add(5, 3): {calc.add(5, 3)}")
print(f"calc.multiply(4, 7): {calc.multiply(4, 7)}")
print(f"\nfoo has greet: {hasattr(foo, 'greet')}")
print(f"also_foo has greet: {hasattr(also_foo, 'greet')}")
print(f"bar_module has process: {hasattr(bar_module, 'process')}")
print(f"also_bar has process: {hasattr(also_bar, 'process')}")
print(f"\nalso_foo.greet('Python'): {greet('Python')}")
print(f"also_bar.process('test'): {process('test')}")
print("\nAll importlib renaming patterns work correctly!")
