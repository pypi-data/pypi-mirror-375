---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/forward_reference_in_exception/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
myrequests_compat = _cribo.types.SimpleNamespace(__name__='myrequests.compat')
myrequests = _cribo.types.SimpleNamespace(__name__='myrequests', __initializing__=False, __initialized__=False)
myrequests.compat = myrequests_compat
"""Compatibility module similar to requests.compat"""
MutableMapping_2 = _cribo.collections.abc.MutableMapping
JSONDecodeError_2 = _cribo.json.JSONDecodeError
builtin_str = str
def is_str(value):
    """Check if value is a string"""
    return isinstance(value, str)
myrequests_compat.JSONDecodeError = JSONDecodeError_2
myrequests_compat.MutableMapping = MutableMapping_2
myrequests_compat.builtin_str = builtin_str
myrequests_compat.is_str = is_str
"""Main package that mimics requests' pattern"""
compat = myrequests_compat
JSONDecodeError_1 = compat.JSONDecodeError
MutableMapping_1 = compat.MutableMapping
myrequests.JSONDecodeError = JSONDecodeError_1
myrequests.MutableMapping = MutableMapping_1
"""Test case for forward reference to init function"""
print(f"MutableMapping: {myrequests.MutableMapping}")
print(f"JSONDecodeError: {myrequests.JSONDecodeError}")
print(f"compat.MutableMapping: {myrequests.compat.MutableMapping}")
print(f"compat.JSONDecodeError: {myrequests.compat.JSONDecodeError}")
try:
    d = myrequests.MutableMapping()
except Exception as e:
    print(f"Expected error creating abstract MutableMapping: {type(e).__name__}")
print(f"compat.builtin_str exists: {hasattr(myrequests.compat, 'builtin_str')}")
print(f"compat.is_str exists: {hasattr(myrequests.compat, 'is_str')}")
if hasattr(myrequests.compat, "builtin_str"):
    print(f"compat.builtin_str is str: {myrequests.compat.builtin_str is str}")
if hasattr(myrequests.compat, "is_str"):
    print(f"is_str('test'): {myrequests.compat.is_str('test')}")
    print(f"is_str(123): {myrequests.compat.is_str(123)}")
