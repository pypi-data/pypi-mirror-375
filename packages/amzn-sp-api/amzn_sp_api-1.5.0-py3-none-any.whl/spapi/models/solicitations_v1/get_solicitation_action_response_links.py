# coding: utf-8

"""
    Selling Partner API for Solicitations

    With the Solicitations API you can build applications that send non-critical solicitations to buyers. You can get a list of solicitation types that are available for an order that you specify, then call an operation that sends a solicitation to the buyer for that order. Buyers cannot respond to solicitations sent by this API, and these solicitations do not appear in the Messaging section of Seller Central or in the recipient's Message Center. The Solicitations API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetSolicitationActionResponseLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'var_self': 'LinkObject',
        'var_schema': 'LinkObject',
    }

    attribute_map = {
        'var_self': 'self',
        'var_schema': 'schema',
    }

    def __init__(self, var_self=None, var_schema=None, _configuration=None):  # noqa: E501
        """GetSolicitationActionResponseLinks - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._var_self = None
        self._var_schema = None
        self.discriminator = None

        self.var_self = var_self
        self.var_schema = var_schema

    @property
    def var_self(self):
        """Gets the var_self of this GetSolicitationActionResponseLinks.  # noqa: E501


        :return: The var_self of this GetSolicitationActionResponseLinks.  # noqa: E501
        :rtype: LinkObject
        """
        return self._var_self

    @var_self.setter
    def var_self(self, var_self):
        """Sets the var_self of this GetSolicitationActionResponseLinks.


        :param var_self: The var_self of this GetSolicitationActionResponseLinks.  # noqa: E501
        :type: LinkObject
        """
        if self._configuration.client_side_validation and var_self is None:
            raise ValueError("Invalid value for `var_self`, must not be `None`")  # noqa: E501

        self._var_self = var_self

    @property
    def var_schema(self):
        """Gets the var_schema of this GetSolicitationActionResponseLinks.  # noqa: E501


        :return: The var_schema of this GetSolicitationActionResponseLinks.  # noqa: E501
        :rtype: LinkObject
        """
        return self._var_schema

    @var_schema.setter
    def var_schema(self, var_schema):
        """Sets the var_schema of this GetSolicitationActionResponseLinks.


        :param var_schema: The var_schema of this GetSolicitationActionResponseLinks.  # noqa: E501
        :type: LinkObject
        """
        if self._configuration.client_side_validation and var_schema is None:
            raise ValueError("Invalid value for `var_schema`, must not be `None`")  # noqa: E501

        self._var_schema = var_schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSolicitationActionResponseLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSolicitationActionResponseLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSolicitationActionResponseLinks):
            return True

        return self.to_dict() != other.to_dict()
