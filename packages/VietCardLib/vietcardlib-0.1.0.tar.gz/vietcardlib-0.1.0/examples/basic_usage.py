"""
V√≠ d·ª• s·ª≠ d·ª•ng VietCardLib ƒë·ªÉ alignment ·∫£nh CCCD
"""

from VietCardLib import ORBImageAligner
import os

def basic_alignment_example():
    """V√≠ d·ª• c∆° b·∫£n v·ªÅ image alignment"""
    print("=== V√≠ d·ª• c∆° b·∫£n - Image Alignment ===")
    
    # Kh·ªüi t·∫°o aligner
    aligner = ORBImageAligner(target_dimension=800, orb_features=2000)
    
    # ƒê∆∞·ªùng d·∫´n ·∫£nh (thay ƒë·ªïi theo ·∫£nh th·ª±c t·∫ø c·ªßa b·∫°n)
    base_image_path = "base_cccd.jpg"
    target_image_path = "target_cccd.jpg"
    output_path = "aligned_cccd.jpg"
    
    # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists(base_image_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {base_image_path}")
        return
    
    if not os.path.exists(target_image_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {target_image_path}")
        return
    
    # Th·ª±c hi·ªán alignment
    print("üîÑ ƒêang th·ª±c hi·ªán alignment...")
    result = aligner.align_images(base_image_path, target_image_path, output_path)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    if result["success"]:
        print("‚úÖ Alignment th√†nh c√¥ng!")
        print(f"üìÑ ·∫¢nh ƒë√£ cƒÉn ch·ªânh: {result['aligned_image_path']}")
        print(f"üéØ Visualization: {result['visualization_path']}")
        print(f"üìä Comparison: {result['comparison_path']}")
        print(f"üîç Quality Score: {result['quality_metrics']['overall_quality']:.3f}")
        print(f"üîó Inliers: {result['inliers']}/{result['good_matches']} ({result['inlier_ratio']:.1%})")
        
        # ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng
        quality = result['quality_metrics']['overall_quality']
        if quality > 0.6:
            print("üéâ CH·∫§T L∆Ø·ª¢NG XU·∫§T S·∫ÆC!")
        elif quality > 0.4:
            print("üëç CH·∫§T L∆Ø·ª¢NG T·ªêT!")
        elif quality > 0.3:
            print("üëå Ch·∫•t l∆∞·ª£ng kh√°")
        else:
            print("‚ö†Ô∏è Ch·∫•t l∆∞·ª£ng th·∫•p")
    else:
        print(f"‚ùå Alignment th·∫•t b·∫°i: {result['error']}")

def batch_alignment_example():
    """V√≠ d·ª• v·ªÅ batch alignment"""
    print("\n=== V√≠ d·ª• Batch Processing ===")
    
    # Kh·ªüi t·∫°o aligner
    aligner = ORBImageAligner()
    
    # ƒê∆∞·ªùng d·∫´n
    base_image_path = "base_cccd.jpg"
    input_directory = "input_images/"
    output_directory = "aligned_images/"
    
    # Ki·ªÉm tra th∆∞ m·ª•c
    if not os.path.exists(input_directory):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {input_directory}")
        return
    
    # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)
        print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {output_directory}")
    
    # Th·ª±c hi·ªán batch alignment
    print("üîÑ ƒêang th·ª±c hi·ªán batch alignment...")
    results = aligner.batch_align(base_image_path, input_directory, output_directory)
    
    # Th·ªëng k√™ k·∫øt qu·∫£
    success_count = sum(1 for r in results if r["success"])
    total_count = len(results)
    
    print(f"\nüìä K·∫øt qu·∫£ batch processing:")
    print(f"   T·ªïng s·ªë file: {total_count}")
    print(f"   Th√†nh c√¥ng: {success_count}")
    print(f"   Th·∫•t b·∫°i: {total_count - success_count}")
    print(f"   T·ª∑ l·ªá th√†nh c√¥ng: {success_count/total_count:.1%}" if total_count > 0 else "   Kh√¥ng c√≥ file n√†o")
    
    # Chi ti·∫øt t·ª´ng file
    print(f"\nüìã Chi ti·∫øt:")
    for result in results:
        if result["success"]:
            quality = result['quality_metrics']['overall_quality']
            print(f"   ‚úÖ {result['filename']}: Quality {quality:.3f}")
        else:
            print(f"   ‚ùå {result['filename']}: {result['error']}")

def advanced_configuration_example():
    """V√≠ d·ª• v·ªÅ c·∫•u h√¨nh n√¢ng cao"""
    print("\n=== V√≠ d·ª• C·∫•u h√¨nh N√¢ng cao ===")
    
    # C·∫•u h√¨nh cho ·∫£nh ch·∫•t l∆∞·ª£ng cao
    high_quality_aligner = ORBImageAligner(
        target_dimension=1200,  # K√≠ch th∆∞·ªõc l·ªõn h∆°n
        orb_features=5000,      # Nhi·ªÅu features h∆°n
        min_matches=20,         # Y√™u c·∫ßu nhi·ªÅu matches h∆°n
        min_inlier_ratio=0.4,   # T·ª∑ l·ªá inliers cao h∆°n
        quality_threshold=0.4   # Ch·∫•t l∆∞·ª£ng t·ªëi thi·ªÉu cao h∆°n
    )
    
    # C·∫•u h√¨nh cho ·∫£nh ch·∫•t l∆∞·ª£ng th·∫•p
    fast_aligner = ORBImageAligner(
        target_dimension=600,   # K√≠ch th∆∞·ªõc nh·ªè h∆°n ƒë·ªÉ x·ª≠ l√Ω nhanh
        orb_features=1000,      # √çt features h∆°n
        min_matches=8,          # Y√™u c·∫ßu √≠t matches h∆°n
        min_inlier_ratio=0.2,   # T·ª∑ l·ªá inliers th·∫•p h∆°n
        quality_threshold=0.2   # Ch·∫•t l∆∞·ª£ng t·ªëi thi·ªÉu th·∫•p h∆°n
    )
    
    print("üîß ƒê√£ t·∫°o 2 aligner v·ªõi c·∫•u h√¨nh kh√°c nhau:")
    print("   - high_quality_aligner: Cho ·∫£nh ch·∫•t l∆∞·ª£ng cao")
    print("   - fast_aligner: Cho x·ª≠ l√Ω nhanh")

def main():
    """Ch·∫°y t·∫•t c·∫£ v√≠ d·ª•"""
    print("üöÄ VietCardLib Examples\n")
    
    try:
        basic_alignment_example()
        batch_alignment_example()
        advanced_configuration_example()
        
        print("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ v√≠ d·ª•!")
        print("\nüí° L∆∞u √Ω:")
        print("   - Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n ·∫£nh ph√π h·ª£p v·ªõi m√¥i tr∆∞·ªùng c·ªßa b·∫°n")
        print("   - ƒêi·ªÅu ch·ªânh tham s·ªë aligner t√πy theo ch·∫•t l∆∞·ª£ng ·∫£nh ƒë·∫ßu v√†o")
        print("   - Ki·ªÉm tra quality score ƒë·ªÉ ƒë√°nh gi√° ƒë·ªô tin c·∫≠y")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ch·∫°y v√≠ d·ª•: {e}")

if __name__ == "__main__":
    main()
