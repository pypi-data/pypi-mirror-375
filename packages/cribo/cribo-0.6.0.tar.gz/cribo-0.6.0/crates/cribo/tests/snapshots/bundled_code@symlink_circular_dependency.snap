---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/symlink_circular_dependency/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
moduleA = _cribo.types.SimpleNamespace(__name__='moduleA', __initializing__=False, __initialized__=False)
moduleB = _cribo.types.SimpleNamespace(__name__='moduleB', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_895222_moduleA(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global moduleB

    def funcA():
        global moduleB
        moduleB = _cribo_init___cribo_19d6d4_moduleB(moduleB)
        funcB = moduleB.funcB
        return f"A calls {funcB()}"
    self.funcA = funcA

    def get_chain():
        return "A -> B -> C(symlink to A)"
    self.get_chain = get_chain

    def funcC():
        return "Actually funcA pretending to be funcC"
    self.funcC = funcC
    self.__initialized__ = True
    self.__initializing__ = False
    return self
moduleA.__init__ = _cribo_init___cribo_895222_moduleA
def _cribo_init___cribo_19d6d4_moduleB(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global moduleA
    moduleA = _cribo_init___cribo_895222_moduleA(moduleA)
    funcC = moduleA.funcC
    self.funcC = funcC
    self.funcC = funcC

    def funcB():
        return f"B calls {funcC()}"
    self.funcB = funcB
    self.__initialized__ = True
    self.__initializing__ = False
    return self
moduleB.__init__ = _cribo_init___cribo_19d6d4_moduleB
moduleA = _cribo_init___cribo_895222_moduleA(moduleA)
funcA = moduleA.funcA
get_chain = moduleA.get_chain
print("Testing symlink circular dependency handling")
print(f"funcA result: {funcA()}")
print(f"Chain: {get_chain()}")
print("SUCCESS: Symlink circular dependency handled correctly!")
