# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.4-5
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqMobileappGpsSettingsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            gps_anchor = schemas.BoolSchema
            
            
            class distance(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 10000
                    inclusive_minimum = 0
            
            
            class cep(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 10000
                    inclusive_minimum = 0
        
            @staticmethod
            def coordinates() -> typing.Type['XiqAfcMobileappCoordinates']:
                return XiqAfcMobileappCoordinates
            __annotations__ = {
                "gps_anchor": gps_anchor,
                "distance": distance,
                "cep": cep,
                "coordinates": coordinates,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gps_anchor"]) -> MetaOapg.properties.gps_anchor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cep"]) -> MetaOapg.properties.cep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> 'XiqAfcMobileappCoordinates': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gps_anchor", "distance", "cep", "coordinates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gps_anchor"]) -> typing.Union[MetaOapg.properties.gps_anchor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distance"]) -> typing.Union[MetaOapg.properties.distance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cep"]) -> typing.Union[MetaOapg.properties.cep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union['XiqAfcMobileappCoordinates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gps_anchor", "distance", "cep", "coordinates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        gps_anchor: typing.Union[MetaOapg.properties.gps_anchor, bool, schemas.Unset] = schemas.unset,
        distance: typing.Union[MetaOapg.properties.distance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cep: typing.Union[MetaOapg.properties.cep, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        coordinates: typing.Union['XiqAfcMobileappCoordinates', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqMobileappGpsSettingsRequest':
        return super().__new__(
            cls,
            *_args,
            gps_anchor=gps_anchor,
            distance=distance,
            cep=cep,
            coordinates=coordinates,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_afc_mobileapp_coordinates import XiqAfcMobileappCoordinates
