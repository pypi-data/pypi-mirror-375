[project]
name = "umep"
version = "0.0.1b47"
description = "urban multi-scale environmental predictor"
readme = "README.md"
requires-python = ">=3.9, <3.14"
license = { text = "AGPL-3.0" }
keywords = [
    "python3",
    "geographical-information-system",
    "spatial-data",
    "spatial-data-analysis",
    "urban-climate",
    "urban-heat-island",
    "urban-meteorology",
    "urban-microclimate",
    "urban-planning",
    "urban-sustainability",
    "urban-thermal-comfort",
    "urban-thermal-environment",
    "urban-thermal-mapping",
    "urban-thermal-modelling",
    "urban-thermal-simulation",
    "urban-thermal-sustainability",
]
authors = [{ name = "UMEP Developers" }]
maintainers = [{ name = "UMEP Developers" }]
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
# QGIS deps https://github.com/qgis/QGIS/blob/master/.docker/qgis3-qt5-build-deps.dockerfile
dependencies = [
    "geopandas>=1.0.1",
    "matplotlib>=3.9.2",
    "pandas>=2.2.3",
    "pvlib>=0.11.1",
    "rasterio>=1.4.1",
    "shapely>=2.0.6",
    "tqdm>=4.66.5",
    "rioxarray>=0.15.0",
    "xarray>=2024.7.0",
    "scipy>=1.13.1",
    "pyproj>=3.6.1",
    "numpy>=2.0.2",
]

[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "ipykernel>=6.29.5",
    "pip>=25.0.1",
    "poethepoet>=0.33.1",
    "pytest>=8.4.1",
]

[project.urls]
homepage = "https://github.com/UMEP-dev/umep-core"
documentation = "https://github.com/UMEP-dev/umep-core"
repository = "https://github.com/UMEP-dev/umep-core"

[tool.poe.tasks]
verify_project = { shell = "ruff format && ruff check && pyright . && pytest ./tests" }

[tool.setuptools]
packages = { find = {} }

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
fixable = ["ALL"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.pyright]
pythonVersion = "3.9"
include = ["umep"]
exclude = [
    "**/__pycache__",
    "**/__pypackages__",
    "build",
    "docs",
    "**/temp/",
    "tests/",
    "dist",
    ".venv",
]
typeCheckingMode = "standard"
useLibraryCodeForTypes = true
reportUntypedFunctionDecorator = false
reportUntypedClassDecorator = false
reportUnknownMemberType = false
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false

[tool.pytest.ini_options]
console_output_style = "count"
log_cli = true
log_cli_level = "INFO"
testpaths = ["tests"]
addopts = "--ignore=tests/test_performance.py --ignore=temp/"
