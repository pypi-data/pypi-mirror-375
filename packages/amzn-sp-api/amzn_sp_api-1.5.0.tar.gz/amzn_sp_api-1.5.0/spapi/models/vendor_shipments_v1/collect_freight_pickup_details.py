# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CollectFreightPickupDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requested_pick_up': 'datetime',
        'scheduled_pick_up': 'datetime',
        'carrier_assignment_date': 'datetime',
    }

    attribute_map = {
        'requested_pick_up': 'requestedPickUp',
        'scheduled_pick_up': 'scheduledPickUp',
        'carrier_assignment_date': 'carrierAssignmentDate',
    }

    def __init__(self, requested_pick_up=None, scheduled_pick_up=None, carrier_assignment_date=None, _configuration=None):  # noqa: E501
        """CollectFreightPickupDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._requested_pick_up = None
        self._scheduled_pick_up = None
        self._carrier_assignment_date = None
        self.discriminator = None

        if requested_pick_up is not None:
            self.requested_pick_up = requested_pick_up
        if scheduled_pick_up is not None:
            self.scheduled_pick_up = scheduled_pick_up
        if carrier_assignment_date is not None:
            self.carrier_assignment_date = carrier_assignment_date

    @property
    def requested_pick_up(self):
        """Gets the requested_pick_up of this CollectFreightPickupDetails.  # noqa: E501

        Date on which the items can be picked up from vendor warehouse by Buyer used for WePay/Collect vendors.  # noqa: E501

        :return: The requested_pick_up of this CollectFreightPickupDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._requested_pick_up

    @requested_pick_up.setter
    def requested_pick_up(self, requested_pick_up):
        """Sets the requested_pick_up of this CollectFreightPickupDetails.

        Date on which the items can be picked up from vendor warehouse by Buyer used for WePay/Collect vendors.  # noqa: E501

        :param requested_pick_up: The requested_pick_up of this CollectFreightPickupDetails.  # noqa: E501
        :type: datetime
        """

        self._requested_pick_up = requested_pick_up

    @property
    def scheduled_pick_up(self):
        """Gets the scheduled_pick_up of this CollectFreightPickupDetails.  # noqa: E501

        Date on which the items are scheduled to be picked from vendor warehouse by Buyer used for WePay/Collect vendors.  # noqa: E501

        :return: The scheduled_pick_up of this CollectFreightPickupDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_pick_up

    @scheduled_pick_up.setter
    def scheduled_pick_up(self, scheduled_pick_up):
        """Sets the scheduled_pick_up of this CollectFreightPickupDetails.

        Date on which the items are scheduled to be picked from vendor warehouse by Buyer used for WePay/Collect vendors.  # noqa: E501

        :param scheduled_pick_up: The scheduled_pick_up of this CollectFreightPickupDetails.  # noqa: E501
        :type: datetime
        """

        self._scheduled_pick_up = scheduled_pick_up

    @property
    def carrier_assignment_date(self):
        """Gets the carrier_assignment_date of this CollectFreightPickupDetails.  # noqa: E501

        Date on which the carrier is being scheduled to pickup items from vendor warehouse by Byer used for WePay/Collect vendors.  # noqa: E501

        :return: The carrier_assignment_date of this CollectFreightPickupDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._carrier_assignment_date

    @carrier_assignment_date.setter
    def carrier_assignment_date(self, carrier_assignment_date):
        """Sets the carrier_assignment_date of this CollectFreightPickupDetails.

        Date on which the carrier is being scheduled to pickup items from vendor warehouse by Byer used for WePay/Collect vendors.  # noqa: E501

        :param carrier_assignment_date: The carrier_assignment_date of this CollectFreightPickupDetails.  # noqa: E501
        :type: datetime
        """

        self._carrier_assignment_date = carrier_assignment_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectFreightPickupDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectFreightPickupDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectFreightPickupDetails):
            return True

        return self.to_dict() != other.to_dict()
