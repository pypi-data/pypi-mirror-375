# coding: utf-8

"""
    Selling Partner API for Replenishment

    The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.

    The version of the OpenAPI document: 2022-11-07
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Preference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_enrollment': 'List[AutoEnrollmentPreference]',
    }

    attribute_map = {
        'auto_enrollment': 'autoEnrollment',
    }

    def __init__(self, auto_enrollment=None, _configuration=None):  # noqa: E501
        """Preference - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_enrollment = None
        self.discriminator = None

        if auto_enrollment is not None:
            self.auto_enrollment = auto_enrollment

    @property
    def auto_enrollment(self):
        """Gets the auto_enrollment of this Preference.  # noqa: E501

        Filters the results to only include offers with the auto-enrollment preference specified.  # noqa: E501

        :return: The auto_enrollment of this Preference.  # noqa: E501
        :rtype: List[AutoEnrollmentPreference]
        """
        return self._auto_enrollment

    @auto_enrollment.setter
    def auto_enrollment(self, auto_enrollment):
        """Sets the auto_enrollment of this Preference.

        Filters the results to only include offers with the auto-enrollment preference specified.  # noqa: E501

        :param auto_enrollment: The auto_enrollment of this Preference.  # noqa: E501
        :type: List[AutoEnrollmentPreference]
        """
        if (self._configuration.client_side_validation and
                auto_enrollment is not None and len(auto_enrollment) < 1):
            raise ValueError("Invalid value for `auto_enrollment`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._auto_enrollment = auto_enrollment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Preference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Preference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Preference):
            return True

        return self.to_dict() != other.to_dict()
