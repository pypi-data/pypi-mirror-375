# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class MskuPrepDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_owners_constraint': 'AllOwnersConstraint',
        'label_owner_constraint': 'OwnerConstraint',
        'msku': 'str',
        'prep_category': 'PrepCategory',
        'prep_owner_constraint': 'OwnerConstraint',
        'prep_types': 'List[PrepType]',
    }

    attribute_map = {
        'all_owners_constraint': 'allOwnersConstraint',
        'label_owner_constraint': 'labelOwnerConstraint',
        'msku': 'msku',
        'prep_category': 'prepCategory',
        'prep_owner_constraint': 'prepOwnerConstraint',
        'prep_types': 'prepTypes',
    }

    def __init__(self, all_owners_constraint=None, label_owner_constraint=None, msku=None, prep_category=None, prep_owner_constraint=None, prep_types=None, _configuration=None):  # noqa: E501
        """MskuPrepDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._all_owners_constraint = None
        self._label_owner_constraint = None
        self._msku = None
        self._prep_category = None
        self._prep_owner_constraint = None
        self._prep_types = None
        self.discriminator = None

        if all_owners_constraint is not None:
            self.all_owners_constraint = all_owners_constraint
        if label_owner_constraint is not None:
            self.label_owner_constraint = label_owner_constraint
        self.msku = msku
        self.prep_category = prep_category
        if prep_owner_constraint is not None:
            self.prep_owner_constraint = prep_owner_constraint
        self.prep_types = prep_types

    @property
    def all_owners_constraint(self):
        """Gets the all_owners_constraint of this MskuPrepDetail.  # noqa: E501


        :return: The all_owners_constraint of this MskuPrepDetail.  # noqa: E501
        :rtype: AllOwnersConstraint
        """
        return self._all_owners_constraint

    @all_owners_constraint.setter
    def all_owners_constraint(self, all_owners_constraint):
        """Sets the all_owners_constraint of this MskuPrepDetail.


        :param all_owners_constraint: The all_owners_constraint of this MskuPrepDetail.  # noqa: E501
        :type: AllOwnersConstraint
        """

        self._all_owners_constraint = all_owners_constraint

    @property
    def label_owner_constraint(self):
        """Gets the label_owner_constraint of this MskuPrepDetail.  # noqa: E501


        :return: The label_owner_constraint of this MskuPrepDetail.  # noqa: E501
        :rtype: OwnerConstraint
        """
        return self._label_owner_constraint

    @label_owner_constraint.setter
    def label_owner_constraint(self, label_owner_constraint):
        """Sets the label_owner_constraint of this MskuPrepDetail.


        :param label_owner_constraint: The label_owner_constraint of this MskuPrepDetail.  # noqa: E501
        :type: OwnerConstraint
        """

        self._label_owner_constraint = label_owner_constraint

    @property
    def msku(self):
        """Gets the msku of this MskuPrepDetail.  # noqa: E501

        The merchant SKU, a merchant-supplied identifier for a specific SKU.  # noqa: E501

        :return: The msku of this MskuPrepDetail.  # noqa: E501
        :rtype: str
        """
        return self._msku

    @msku.setter
    def msku(self, msku):
        """Sets the msku of this MskuPrepDetail.

        The merchant SKU, a merchant-supplied identifier for a specific SKU.  # noqa: E501

        :param msku: The msku of this MskuPrepDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and msku is None:
            raise ValueError("Invalid value for `msku`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                msku is not None and len(msku) > 255):
            raise ValueError("Invalid value for `msku`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                msku is not None and len(msku) < 1):
            raise ValueError("Invalid value for `msku`, length must be greater than or equal to `1`")  # noqa: E501

        self._msku = msku

    @property
    def prep_category(self):
        """Gets the prep_category of this MskuPrepDetail.  # noqa: E501


        :return: The prep_category of this MskuPrepDetail.  # noqa: E501
        :rtype: PrepCategory
        """
        return self._prep_category

    @prep_category.setter
    def prep_category(self, prep_category):
        """Sets the prep_category of this MskuPrepDetail.


        :param prep_category: The prep_category of this MskuPrepDetail.  # noqa: E501
        :type: PrepCategory
        """
        if self._configuration.client_side_validation and prep_category is None:
            raise ValueError("Invalid value for `prep_category`, must not be `None`")  # noqa: E501

        self._prep_category = prep_category

    @property
    def prep_owner_constraint(self):
        """Gets the prep_owner_constraint of this MskuPrepDetail.  # noqa: E501


        :return: The prep_owner_constraint of this MskuPrepDetail.  # noqa: E501
        :rtype: OwnerConstraint
        """
        return self._prep_owner_constraint

    @prep_owner_constraint.setter
    def prep_owner_constraint(self, prep_owner_constraint):
        """Sets the prep_owner_constraint of this MskuPrepDetail.


        :param prep_owner_constraint: The prep_owner_constraint of this MskuPrepDetail.  # noqa: E501
        :type: OwnerConstraint
        """

        self._prep_owner_constraint = prep_owner_constraint

    @property
    def prep_types(self):
        """Gets the prep_types of this MskuPrepDetail.  # noqa: E501

        A list of preparation types associated with a preparation category.  # noqa: E501

        :return: The prep_types of this MskuPrepDetail.  # noqa: E501
        :rtype: List[PrepType]
        """
        return self._prep_types

    @prep_types.setter
    def prep_types(self, prep_types):
        """Sets the prep_types of this MskuPrepDetail.

        A list of preparation types associated with a preparation category.  # noqa: E501

        :param prep_types: The prep_types of this MskuPrepDetail.  # noqa: E501
        :type: List[PrepType]
        """
        if self._configuration.client_side_validation and prep_types is None:
            raise ValueError("Invalid value for `prep_types`, must not be `None`")  # noqa: E501

        self._prep_types = prep_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MskuPrepDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MskuPrepDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MskuPrepDetail):
            return True

        return self.to_dict() != other.to_dict()
