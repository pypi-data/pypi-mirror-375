---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/wildcard_last_wins_simple/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
first = _cribo.types.SimpleNamespace(__name__='first')
"""First module with shared and unique symbols."""
def shared_value_2():
    return "from_first"
def unique_first():
    return "unique_to_first"
first.shared_value = shared_value_2
first.unique_first = unique_first
second = _cribo.types.SimpleNamespace(__name__='second')
"""Second module with shared and unique symbols."""
def shared_value_1():
    return "from_second"
def unique_second():
    return "unique_to_second"
second.shared_value = shared_value_1
second.unique_second = unique_second
"""Test that 'last import wins' semantics work with wildcard imports."""
shared_value = shared_value_2
shared_value = shared_value_1
def main():
    assert shared_value() == "from_second", f"Expected 'from_second', got {shared_value()}"
    assert unique_first() == "unique_to_first"
    assert unique_second() == "unique_to_second"
    print("All assertions passed!")
    print(f"shared_value: {shared_value()}")
    print(f"unique_first: {unique_first()}")
    print(f"unique_second: {unique_second()}")
if __name__ == "__main__":
    main()
