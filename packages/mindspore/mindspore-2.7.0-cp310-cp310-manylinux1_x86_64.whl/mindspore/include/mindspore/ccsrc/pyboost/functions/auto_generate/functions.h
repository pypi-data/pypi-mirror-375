/**
 * Copyright 2024 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef MINDSPORE_MINDSPORE_OPS_KERNEL_FUNCTIONS_AUTO_GENERATE_FUNCTIONS_H_
#define MINDSPORE_MINDSPORE_OPS_KERNEL_FUNCTIONS_AUTO_GENERATE_FUNCTIONS_H_

#include <optional>
#include "ir/tensor.h"
#include "include/backend/visible.h"
#include "mindspore/ccsrc/pyboost/comm_handle.h"
#include "pynative/op_function/comm_handle_py.h"

namespace mindspore {
namespace kernel {
namespace pyboost {
using TensorPtr = std::shared_ptr<tensor::Tensor>;
class OpRunner;
using OpPtr = std::shared_ptr<OpRunner>;
using CloneFunc = void (*)(const OpPtr &inplace_op, const PrimitivePtr &prim, const std::string &device_target,
                           ValuePtrList &&inputs);

void PYNATIVE_EXPORT RegisterCloneFunc(const CloneFunc &clone_func);
const CloneFunc& GetCloneFunc();

mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_put(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &source, const mindspore::BoolImmPtr &accumulate);
mindspore::tensor::TensorPtr BACKEND_EXPORT expand_dims_view(const mindspore::tensor::TensorPtr &input, const int64_t &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT outer(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &vec2);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT multi_scale_deformable_attn_grad(const mindspore::tensor::TensorPtr &value, const mindspore::tensor::TensorPtr &shape, const mindspore::tensor::TensorPtr &offset, const mindspore::tensor::TensorPtr &locations_trans, const mindspore::tensor::TensorPtr &weight, const mindspore::tensor::TensorPtr &grad_output);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_muls(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_masked_fill_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mask, const mindspore::tensor::TensorPtr &value);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT moe_distribute_dispatch(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &expert_ids, const mindspore::Int64ImmPtr &ep_world_size, const mindspore::Int64ImmPtr &ep_rank_id, const mindspore::Int64ImmPtr &moe_expert_num, const std::optional<mindspore::tensor::TensorPtr> &expert_scales, const std::optional<mindspore::tensor::TensorPtr> &scales, const std::optional<mindspore::tensor::TensorPtr> &x_active_mask, const std::optional<mindspore::StringImmPtr> &group_ep, const std::optional<mindspore::StringImmPtr> &group_tp, const mindspore::Int64ImmPtr &tp_world_size, const mindspore::Int64ImmPtr &tp_rank_id, const mindspore::Int64ImmPtr &expert_shard_type, const mindspore::Int64ImmPtr &shared_expert_num, const mindspore::Int64ImmPtr &shared_expert_rank_num, const mindspore::Int64ImmPtr &quant_mode, const mindspore::Int64ImmPtr &global_bs, const mindspore::Int64ImmPtr &expert_token_nums_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT softshrink_grad(const mindspore::tensor::TensorPtr &input_grad, const mindspore::tensor::TensorPtr &input_x, const mindspore::FP32ImmPtr &lambd);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT add_rms_norm(const mindspore::tensor::TensorPtr &x1, const mindspore::tensor::TensorPtr &x2, const mindspore::tensor::TensorPtr &gamma, const mindspore::FP32ImmPtr &epsilon);
mindspore::tensor::TensorPtr BACKEND_EXPORT one_hot_ext(const mindspore::tensor::TensorPtr &tensor, const mindspore::Int64ImmPtr &num_classes, const mindspore::tensor::TensorPtr &on_value, const mindspore::tensor::TensorPtr &off_value, const mindspore::Int64ImmPtr &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT new_empty(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &size, const std::optional<mindspore::Int64ImmPtr> &dtype, const std::optional<mindspore::Int64ImmPtr> &device);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT convolution_str_grad(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::Int64ImmPtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::BoolImmPtr &transposed, const mindspore::ValueTuplePtr &output_padding, const mindspore::Int64ImmPtr &groups, const mindspore::ValueTuplePtr &output_mask);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_mul(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT mla(const mindspore::tensor::TensorPtr &query, const mindspore::tensor::TensorPtr &q_rope, const mindspore::tensor::TensorPtr &kv_cache, const mindspore::tensor::TensorPtr &k_rope, const mindspore::tensor::TensorPtr &block_tables, const std::optional<mindspore::tensor::TensorPtr> &attn_mask, const std::optional<mindspore::tensor::TensorPtr> &deq_scale_qk, const std::optional<mindspore::tensor::TensorPtr> &deq_scale_pv, const std::optional<mindspore::tensor::TensorPtr> &q_seq_lens, const std::optional<mindspore::tensor::TensorPtr> &context_lens, const mindspore::Int64ImmPtr &head_num, const mindspore::FP32ImmPtr &scale_value, const mindspore::Int64ImmPtr &kv_head_num, const mindspore::Int64ImmPtr &mask_mode, const mindspore::Int64ImmPtr &is_ring);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_bilinear2d_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::ValueTuplePtr &input_size, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales, const mindspore::BoolImmPtr &align_corners);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_floor_divide(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_isend_inner(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dst, const mindspore::StringImmPtr &group, const mindspore::Int64ImmPtr &tag,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_isend(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dst, const mindspore::StringImmPtr &group, const mindspore::Int64ImmPtr &tag);
mindspore::tensor::TensorPtr BACKEND_EXPORT arange(const mindspore::ScalarPtr &start, const mindspore::ScalarPtr &end, const mindspore::ScalarPtr &step, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT tanh_grad(const mindspore::tensor::TensorPtr &y, const mindspore::tensor::TensorPtr &dy);
mindspore::tensor::TensorPtr BACKEND_EXPORT lerp(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &end, const mindspore::tensor::TensorPtr &weight);
mindspore::tensor::TensorPtr BACKEND_EXPORT multi_scale_deformable_attn(const mindspore::tensor::TensorPtr &value, const mindspore::tensor::TensorPtr &shape, const mindspore::tensor::TensorPtr &offset, const mindspore::tensor::TensorPtr &locations, const mindspore::tensor::TensorPtr &weight);
mindspore::tensor::TensorPtr BACKEND_EXPORT soft_margin_loss_grad(const mindspore::tensor::TensorPtr &predict, const mindspore::tensor::TensorPtr &label, const mindspore::tensor::TensorPtr &dout, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT repeat(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &repeats);
mindspore::tensor::TensorPtr BACKEND_EXPORT maximum(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT randn(const mindspore::ValueTuplePtr &shape, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT add_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_tanh(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_remainder_tensor_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT split_tensor_view(const mindspore::tensor::TensorPtr &input, const int64_t &split_size, const int64_t &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT expand_dims(const mindspore::tensor::TensorPtr &input_x, const int64_t &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT empty(const mindspore::ValueTuplePtr &size, const std::optional<mindspore::Int64ImmPtr> &dtype, const std::optional<mindspore::Int64ImmPtr> &device);
mindspore::tensor::TensorPtr BACKEND_EXPORT paged_attention(const mindspore::tensor::TensorPtr &query, const mindspore::tensor::TensorPtr &key_cache, const std::optional<mindspore::tensor::TensorPtr> &value_cache, const std::optional<mindspore::tensor::TensorPtr> &block_tables, const std::optional<mindspore::tensor::TensorPtr> &context_lens, const std::optional<mindspore::tensor::TensorPtr> &antiquant_scale, const std::optional<mindspore::tensor::TensorPtr> &antiquant_offset, const std::optional<mindspore::tensor::TensorPtr> &attn_mask, const std::optional<mindspore::tensor::TensorPtr> &q_seq_lens, const std::optional<mindspore::tensor::TensorPtr> &alibi_mask, const mindspore::Int64ImmPtr &head_num, const mindspore::FP32ImmPtr &scale_value, const mindspore::Int64ImmPtr &kv_head_num, const mindspore::Int64ImmPtr &kv_cache_quant_mode, const mindspore::Int64ImmPtr &mask_mode, const mindspore::Int64ImmPtr &mla_v_dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_irecv_inner(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &tag, const mindspore::Int64ImmPtr &src, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_irecv(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &tag, const mindspore::Int64ImmPtr &src, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT avg_pool3d_grad_ext(const mindspore::tensor::TensorPtr &grad, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &kernel_size, const std::optional<mindspore::ValueTuplePtr> &stride, const mindspore::ValueTuplePtr &padding, const mindspore::BoolImmPtr &ceil_mode, const mindspore::BoolImmPtr &count_include_pad, const std::optional<mindspore::Int64ImmPtr> &divisor_override);
mindspore::tensor::TensorPtr BACKEND_EXPORT hsigmoid(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT minimum(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT take(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &index);
mindspore::tensor::TensorPtr BACKEND_EXPORT square(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT scatter_value(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::ScalarPtr &src, const mindspore::Int64ImmPtr &reduce);
mindspore::tensor::TensorPtr BACKEND_EXPORT bitwise_and_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT remainder_scalar_tensor(const mindspore::ScalarPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT batch_norm_elemt_grad(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mean, const mindspore::tensor::TensorPtr &invstd, const mindspore::tensor::TensorPtr &weight, const mindspore::tensor::TensorPtr &sumd_dy, const mindspore::tensor::TensorPtr &sum_dy_xmu, const mindspore::tensor::TensorPtr &count);
mindspore::tensor::TensorPtr BACKEND_EXPORT greater(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_bilinear2d(const mindspore::tensor::TensorPtr &x, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales, const mindspore::BoolImmPtr &align_corners);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_bernoulli_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &p, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT std_mean(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ValueTuplePtr> &dim, const mindspore::Int64ImmPtr &correction, const mindspore::BoolImmPtr &keepdim);
mindspore::tensor::TensorPtr BACKEND_EXPORT glu_grad(const mindspore::tensor::TensorPtr &grads, const mindspore::tensor::TensorPtr &x, const mindspore::Int64ImmPtr &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT remainder_tensor_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_linear1d_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::ValueTuplePtr &input_size, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales, const mindspore::BoolImmPtr &align_corners);
mindspore::tensor::TensorPtr BACKEND_EXPORT ceil(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT elu_grad_ext(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &x_or_out, const mindspore::FP32ImmPtr &alpha, const mindspore::BoolImmPtr &is_result);
mindspore::tensor::TensorPtr BACKEND_EXPORT identity(const mindspore::tensor::TensorPtr &input_x);
mindspore::tensor::TensorPtr BACKEND_EXPORT hswish(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT floor_div(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT replication_pad_2d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT conv1d_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::Int64ImmPtr &groups);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_divmods(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other, const std::optional<mindspore::Int64ImmPtr> &rounding_mode);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT chunk(const mindspore::tensor::TensorPtr &input, const int64_t &chunks, const int64_t &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT remainder_tensor_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT smooth_l1_loss(const mindspore::tensor::TensorPtr &prediction, const mindspore::tensor::TensorPtr &target, const mindspore::FP32ImmPtr &beta, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_reduce_scatter_tensor_inner(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_reduce_scatter_tensor(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT hshrink_grad(const mindspore::tensor::TensorPtr &gradients, const mindspore::tensor::TensorPtr &features, const mindspore::FP32ImmPtr &lambd);
mindspore::tensor::TensorPtr BACKEND_EXPORT type_as(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT matmul_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT log2(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT cumsum_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const std::optional<mindspore::Int64ImmPtr> &dtype);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT split(const mindspore::tensor::TensorPtr &input_x, const int64_t &axis, const int64_t &output_num);
mindspore::tensor::TensorPtr BACKEND_EXPORT softmax(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT bitwise_not(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT exp(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT asinh_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT masked_scatter(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mask, const mindspore::tensor::TensorPtr &source);
mindspore::tensor::TensorPtr BACKEND_EXPORT randperm_ext(const mindspore::Int64ImmPtr &n, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset, const mindspore::Int64ImmPtr &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT binary_cross_entropy_with_logits_backward(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const std::optional<mindspore::tensor::TensorPtr> &weight, const std::optional<mindspore::tensor::TensorPtr> &posWeight, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT logsigmoid_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &buffer);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_gather_into_tensor_inner(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::Int64ImmPtr &dst, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_gather_into_tensor(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::Int64ImmPtr &dst, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT rms_norm_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &rstd, const mindspore::tensor::TensorPtr &gamma);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT adaptive_max_pool2d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &output_size);
mindspore::tensor::TensorPtr BACKEND_EXPORT trunc(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT xlogy_scalar_self(const mindspore::ScalarPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT repeat_interleave_grad(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &repeats, const mindspore::Int64ImmPtr &dim);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT split_with_size_view(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &split_size, const int64_t &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT batch_norm_elemt(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::tensor::TensorPtr> &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const std::optional<mindspore::tensor::TensorPtr> &mean, const std::optional<mindspore::tensor::TensorPtr> &invstd, const mindspore::FP32ImmPtr &eps);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_reduce_scatter_tensor_uneven_inner(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &input_split_size, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_reduce_scatter_tensor_uneven(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &input_split_size, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT matmul_reduce_scatter(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &x2, const mindspore::StringImmPtr &group, const mindspore::Int64ImmPtr &world_size, const mindspore::Int64ImmPtr &reduce_op, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::Int64ImmPtr &comm_turn, const mindspore::BoolImmPtr &trans_input, const mindspore::BoolImmPtr &trans_x2);
mindspore::tensor::TensorPtr BACKEND_EXPORT masked_select_grad(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mask, const mindspore::tensor::TensorPtr &grad);
mindspore::tensor::TensorPtr BACKEND_EXPORT reshape_and_cache(const mindspore::tensor::TensorPtr &key, const std::optional<mindspore::tensor::TensorPtr> &value, const std::optional<mindspore::tensor::TensorPtr> &key_cache, const std::optional<mindspore::tensor::TensorPtr> &value_cache, const std::optional<mindspore::tensor::TensorPtr> &slot_mapping);
mindspore::tensor::TensorPtr BACKEND_EXPORT bincount_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::tensor::TensorPtr> &weights, const mindspore::Int64ImmPtr &minlength);
mindspore::tensor::TensorPtr BACKEND_EXPORT adaptive_avg_pool2d_ext(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &output_size);
mindspore::tensor::TensorPtr BACKEND_EXPORT fmod_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT threshold(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &threshold, const mindspore::ScalarPtr &value);
mindspore::tensor::TensorPtr BACKEND_EXPORT sign(const mindspore::tensor::TensorPtr &input);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT max_dim(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::BoolImmPtr &keepdim);
mindspore::tensor::TensorPtr BACKEND_EXPORT bitwise_or_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_scatter_add(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &src);
mindspore::tensor::TensorPtr BACKEND_EXPORT sinh(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT convolution_str(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::Int64ImmPtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::BoolImmPtr &transposed, const mindspore::ValueTuplePtr &output_padding, const mindspore::Int64ImmPtr &groups);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT adamw(const mindspore::tensor::TensorPtr &var, const mindspore::tensor::TensorPtr &m, const mindspore::tensor::TensorPtr &v, const mindspore::tensor::TensorPtr &max_v, const mindspore::tensor::TensorPtr &gradient, const mindspore::tensor::TensorPtr &step, const mindspore::FP32ImmPtr &lr, const mindspore::FP32ImmPtr &beta1, const mindspore::FP32ImmPtr &beta2, const mindspore::FP32ImmPtr &decay, const mindspore::FP32ImmPtr &eps, const mindspore::BoolImmPtr &amsgrad, const mindspore::BoolImmPtr &maximize);
mindspore::tensor::TensorPtr BACKEND_EXPORT reflection_pad_1d_grad(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT triangular_solve(const mindspore::tensor::TensorPtr &b, const mindspore::tensor::TensorPtr &A, const mindspore::BoolImmPtr &upper, const mindspore::BoolImmPtr &transpose, const mindspore::BoolImmPtr &unitriangular);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_comm_all_reduce_inner(const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT inner_comm_all_reduce(const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT median_dim(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::BoolImmPtr &keepdim);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_index(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &indices);
mindspore::tensor::TensorPtr BACKEND_EXPORT atan_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT isinf(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_grouped_matmul_add(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &weight, const mindspore::tensor::TensorPtr &group_list, const mindspore::tensor::TensorPtr &out);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT linalg_qr(const mindspore::tensor::TensorPtr &A, const mindspore::Int64ImmPtr &mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT equal(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT reflection_pad_2d_grad(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT prompt_flash_attention(const mindspore::tensor::TensorPtr &query, const mindspore::tensor::TensorPtr &key, const mindspore::tensor::TensorPtr &value, const std::optional<mindspore::tensor::TensorPtr> &attn_mask, const std::optional<mindspore::ValueTuplePtr> &actual_seq_lengths, const std::optional<mindspore::ValueTuplePtr> &actual_seq_lengths_kv, const std::optional<mindspore::tensor::TensorPtr> &pse_shift, const std::optional<mindspore::tensor::TensorPtr> &deq_scale1, const std::optional<mindspore::tensor::TensorPtr> &quant_scale1, const std::optional<mindspore::tensor::TensorPtr> &deq_scale2, const std::optional<mindspore::tensor::TensorPtr> &quant_scale2, const std::optional<mindspore::tensor::TensorPtr> &quant_offset2, const mindspore::Int64ImmPtr &num_heads, const mindspore::FP32ImmPtr &scale_value, const mindspore::Int64ImmPtr &pre_tokens, const mindspore::Int64ImmPtr &next_tokens, const mindspore::Int64ImmPtr &input_layout, const mindspore::Int64ImmPtr &num_key_value_heads, const mindspore::Int64ImmPtr &sparse_mode, const mindspore::Int64ImmPtr &inner_precise);
mindspore::tensor::TensorPtr BACKEND_EXPORT constant_pad_nd(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding, const mindspore::ScalarPtr &value);
mindspore::tensor::TensorPtr BACKEND_EXPORT expand_as(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT equal_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_scatter_tensor_inner(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::Int64ImmPtr &src, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_scatter_tensor(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::Int64ImmPtr &src, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT floor(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT round(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &decimals);
mindspore::tensor::TensorPtr BACKEND_EXPORT erf(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT gcd(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT isneginf(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_div(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_comm_all_gather_inner(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT inner_comm_all_gather(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT randn_like(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT bitwise_or_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT gather_d_grad_v2(const mindspore::tensor::TensorPtr &x, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &dout);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_all_reduce_inner(const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_all_reduce(const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_fill_diagonal(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &fill_value, const mindspore::BoolImmPtr &wrap);
mindspore::tensor::TensorPtr BACKEND_EXPORT cast(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT uniform_ext(const mindspore::tensor::TensorPtr &tensor, const mindspore::ScalarPtr &a, const mindspore::ScalarPtr &b, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT dropout_gen_mask_ext(const mindspore::ValueTuplePtr &shape, const mindspore::FP32ImmPtr &p, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset, const mindspore::Int64ImmPtr &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT addmv(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mat, const mindspore::tensor::TensorPtr &vec, const mindspore::ScalarPtr &beta, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_bicubic2d(const mindspore::tensor::TensorPtr &x, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales, const mindspore::BoolImmPtr &align_corners);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT group_norm_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &mean, const mindspore::tensor::TensorPtr &rstd, const mindspore::tensor::TensorPtr &gamma_opt, const mindspore::Int64ImmPtr &num_groups, const mindspore::BoolImmPtr &dx_is_require, const mindspore::BoolImmPtr &dgamma_is_require, const mindspore::BoolImmPtr &dbeta_is_require);
mindspore::tensor::TensorPtr BACKEND_EXPORT neg(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT mse_loss_grad_ext(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &target, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT lin_space_ext(const mindspore::ScalarPtr &start, const mindspore::ScalarPtr &end, const mindspore::Int64ImmPtr &steps, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_comm_isend_inner(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dst, const mindspore::StringImmPtr &group, const mindspore::Int64ImmPtr &tag,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT inner_comm_isend(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dst, const mindspore::StringImmPtr &group, const mindspore::Int64ImmPtr &tag);
mindspore::tensor::TensorPtr BACKEND_EXPORT threshold_grad(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &threshold);
mindspore::tensor::TensorPtr BACKEND_EXPORT narrow(const mindspore::tensor::TensorPtr &input, const int64_t &dim, const int64_t &start, const int64_t &length);
mindspore::tensor::TensorPtr BACKEND_EXPORT logaddexp2(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_silu(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT div(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT max_pool_grad_with_indices(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &grad, const mindspore::tensor::TensorPtr &argmax, const mindspore::ValueTuplePtr &kernel_size, const std::optional<mindspore::ValueTuplePtr> &strides, const mindspore::ValueTuplePtr &pads, const mindspore::ValueTuplePtr &dilation, const mindspore::BoolImmPtr &ceil_mode, const mindspore::Int64ImmPtr &argmax_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT hshrink(const mindspore::tensor::TensorPtr &input, const mindspore::FP32ImmPtr &lambd);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_divmod(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other, const std::optional<mindspore::Int64ImmPtr> &rounding_mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT slice_ext(const mindspore::tensor::TensorPtr &input, const int64_t &dim, const int64_t &start, const int64_t &end, const int64_t &step);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT ring_attention_update(const mindspore::tensor::TensorPtr &prev_attn_out, const mindspore::tensor::TensorPtr &prev_softmax_max, const mindspore::tensor::TensorPtr &prev_softmax_sum, const mindspore::tensor::TensorPtr &cur_attn_out, const mindspore::tensor::TensorPtr &cur_softmax_max, const mindspore::tensor::TensorPtr &cur_softmax_sum, const std::optional<mindspore::tensor::TensorPtr> &actual_seq_qlen, const mindspore::Int64ImmPtr &layout);
mindspore::tensor::TensorPtr BACKEND_EXPORT trace_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_zero(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT searchsorted(const mindspore::tensor::TensorPtr &sorted_sequence, const mindspore::tensor::TensorPtr &values, const std::optional<mindspore::tensor::TensorPtr> &sorter, const mindspore::Int64ImmPtr &dtype, const mindspore::BoolImmPtr &right);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_scatter_src(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &src);
mindspore::tensor::TensorPtr BACKEND_EXPORT grid_sampler_2d(const mindspore::tensor::TensorPtr &input_x, const mindspore::tensor::TensorPtr &grid, const mindspore::Int64ImmPtr &interpolation_mode, const mindspore::Int64ImmPtr &padding_mode, const mindspore::BoolImmPtr &align_corners);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_nearest3d(const mindspore::tensor::TensorPtr &x, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales);
mindspore::tensor::TensorPtr BACKEND_EXPORT logaddexp(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT fill_scalar(const mindspore::ValueTuplePtr &size, const mindspore::ScalarPtr &fill_value, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT addbmm(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &batch1, const mindspore::tensor::TensorPtr &batch2, const mindspore::ScalarPtr &beta, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT nansum(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ValueTuplePtr> &dim, const mindspore::BoolImmPtr &keepdim, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT replication_pad_3d_grad(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT moe_token_unpermute_grad(const mindspore::tensor::TensorPtr &permuted_tokens, const mindspore::tensor::TensorPtr &unpermuted_tokens_grad, const mindspore::tensor::TensorPtr &sorted_indices, const std::optional<mindspore::tensor::TensorPtr> &probs, const mindspore::BoolImmPtr &padded_mode, const std::optional<mindspore::ValueTuplePtr> &restore_shape);
mindspore::tensor::TensorPtr BACKEND_EXPORT im2col_ext(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &kernel_size, const mindspore::ValueTuplePtr &dilation, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &stride);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT generator(const mindspore::Int64ImmPtr &cmd, const mindspore::ValueTuplePtr &inputs);
mindspore::tensor::TensorPtr BACKEND_EXPORT binary_cross_entropy_with_logits(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const std::optional<mindspore::tensor::TensorPtr> &weight, const std::optional<mindspore::tensor::TensorPtr> &posWeight, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT adaptive_avg_pool2d_grad_ext(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &x);
mindspore::tensor::TensorPtr BACKEND_EXPORT select_v2(const mindspore::tensor::TensorPtr &condition, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT avg_pool1d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &kernel_size, const std::optional<mindspore::ValueTuplePtr> &stride, const mindspore::ValueTuplePtr &padding, const mindspore::BoolImmPtr &ceil_mode, const mindspore::BoolImmPtr &count_include_pad);
mindspore::tensor::TensorPtr BACKEND_EXPORT transpose_ext_view(const mindspore::tensor::TensorPtr &input, const int64_t &dim0, const int64_t &dim1);
mindspore::tensor::TensorPtr BACKEND_EXPORT masked_select(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mask);
mindspore::tensor::TensorPtr BACKEND_EXPORT concat(const mindspore::ValueTuplePtr &tensors, const mindspore::Int64ImmPtr &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT argmax_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::Int64ImmPtr> &dim, const mindspore::BoolImmPtr &keepdim);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_nearest1d_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::ValueTuplePtr &input_size, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales);
mindspore::tensor::TensorPtr BACKEND_EXPORT log_softmax(const mindspore::tensor::TensorPtr &logits, const mindspore::Int64ImmPtr &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT all_finite(const mindspore::ValueTuplePtr &tensors);
mindspore::tensor::TensorPtr BACKEND_EXPORT sigmoid_grad(const mindspore::tensor::TensorPtr &y, const mindspore::tensor::TensorPtr &dy);
mindspore::tensor::TensorPtr BACKEND_EXPORT reduce_any(const mindspore::tensor::TensorPtr &x, const mindspore::ValueTuplePtr &axis, const mindspore::BoolImmPtr &keep_dims);
mindspore::tensor::TensorPtr BACKEND_EXPORT eye(const mindspore::Int64ImmPtr &n, const mindspore::Int64ImmPtr &m, const mindspore::Int64ImmPtr &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT roll(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &shifts, const std::optional<mindspore::ValueTuplePtr> &dims);
mindspore::tensor::TensorPtr BACKEND_EXPORT copy(const mindspore::tensor::TensorPtr &input);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT kthvalue(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &k, const mindspore::Int64ImmPtr &dim, const mindspore::BoolImmPtr &keepdim);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT rotary_position_embedding_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::tensor::TensorPtr &cos, const mindspore::tensor::TensorPtr &sin, const std::optional<mindspore::tensor::TensorPtr> &dx, const mindspore::Int64ImmPtr &mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_reduce_inner(const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &op_type, const mindspore::Int64ImmPtr &dst, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_reduce(const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &op_type, const mindspore::Int64ImmPtr &dst, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_gather_inner(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &gather_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::Int64ImmPtr &dst, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_gather(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &gather_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::Int64ImmPtr &dst, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT logical_or(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &y);
mindspore::tensor::TensorPtr BACKEND_EXPORT view(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &shape);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT chunk_view(const mindspore::tensor::TensorPtr &input, const int64_t &chunks, const int64_t &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT add(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT select(const mindspore::tensor::TensorPtr &condition, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT repeat_interleave_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &repeats, const std::optional<mindspore::Int64ImmPtr> &dim, const std::optional<mindspore::Int64ImmPtr> &output_size);
mindspore::tensor::TensorPtr BACKEND_EXPORT nllloss_2d_grad(const mindspore::tensor::TensorPtr &loss_grad, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const mindspore::tensor::TensorPtr &weight, const mindspore::Int64ImmPtr &reduction, const mindspore::Int64ImmPtr &ignore_index, const mindspore::tensor::TensorPtr &total_weight);
mindspore::tensor::TensorPtr BACKEND_EXPORT avg_pool2d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &kernel_size, const mindspore::ValueTuplePtr &stride, const mindspore::ValueTuplePtr &padding, const mindspore::BoolImmPtr &ceil_mode, const mindspore::BoolImmPtr &count_include_pad, const std::optional<mindspore::Int64ImmPtr> &divisor_override);
mindspore::tensor::TensorPtr BACKEND_EXPORT normal_float_tensor(const mindspore::ScalarPtr &mean, const mindspore::tensor::TensorPtr &std, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT log10(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_add_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT sum_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ValueTuplePtr> &dim, const mindspore::BoolImmPtr &keepdim, const std::optional<mindspore::Int64ImmPtr> &dtype);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT speed_fusion_attention(const mindspore::tensor::TensorPtr &query, const mindspore::tensor::TensorPtr &key, const mindspore::tensor::TensorPtr &value, const mindspore::Int64ImmPtr &head_num, const mindspore::Int64ImmPtr &input_layout, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset, const std::optional<mindspore::tensor::TensorPtr> &pse, const std::optional<mindspore::tensor::TensorPtr> &padding_mask, const std::optional<mindspore::tensor::TensorPtr> &atten_mask, const mindspore::FP32ImmPtr &scale, const mindspore::FP32ImmPtr &keep_prob, const mindspore::Int64ImmPtr &pre_tokens, const mindspore::Int64ImmPtr &next_tokens, const mindspore::Int64ImmPtr &inner_precise, const std::optional<mindspore::ValueTuplePtr> &prefix, const std::optional<mindspore::ValueTuplePtr> &actual_seq_qlen, const std::optional<mindspore::ValueTuplePtr> &actual_seq_kvlen, const mindspore::Int64ImmPtr &sparse_mode, const mindspore::BoolImmPtr &gen_mask_parallel, const mindspore::BoolImmPtr &sync, const mindspore::Int64ImmPtr &pse_type, const std::optional<mindspore::ValueTuplePtr> &q_start_idx, const std::optional<mindspore::ValueTuplePtr> &kv_start_idx);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT batch_norm_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::tensor::TensorPtr> &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const std::optional<mindspore::tensor::TensorPtr> &running_mean, const std::optional<mindspore::tensor::TensorPtr> &runnning_var, const mindspore::BoolImmPtr &training, const mindspore::FP32ImmPtr &momentum, const mindspore::FP32ImmPtr &epsilon);
mindspore::tensor::TensorPtr BACKEND_EXPORT softmax_backward(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &out, const mindspore::Int64ImmPtr &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_sub_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other, const mindspore::ScalarPtr &alpha);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT grid_sampler_3d_grad(const mindspore::tensor::TensorPtr &grad, const mindspore::tensor::TensorPtr &input_x, const mindspore::tensor::TensorPtr &grid, const mindspore::Int64ImmPtr &interpolation_mode, const mindspore::Int64ImmPtr &padding_mode, const mindspore::BoolImmPtr &align_corners, const mindspore::ValueTuplePtr &output_mask);
mindspore::tensor::TensorPtr BACKEND_EXPORT normal_tensor_tensor(const mindspore::tensor::TensorPtr &mean, const mindspore::tensor::TensorPtr &std, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT fmod_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT binary_cross_entropy_grad(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const mindspore::tensor::TensorPtr &grad_output, const std::optional<mindspore::tensor::TensorPtr> &weight, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT bitwise_xor_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT rand_ext(const mindspore::ValueTuplePtr &shape, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT embedding(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::Int64ImmPtr> &padding_idx, const std::optional<mindspore::FP32ImmPtr> &max_norm, const mindspore::FP32ImmPtr &norm_type, const mindspore::BoolImmPtr &scale_grad_by_freq);
mindspore::tensor::TensorPtr BACKEND_EXPORT clamp_scalar(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ScalarPtr> &min, const std::optional<mindspore::ScalarPtr> &max);
mindspore::tensor::TensorPtr BACKEND_EXPORT pow_scalar_tensor(const mindspore::ScalarPtr &input, const mindspore::tensor::TensorPtr &exponent);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_all_to_all_v_inner(const mindspore::ValueTuplePtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &group, const mindspore::ValueTuplePtr &send_numel_list, const mindspore::ValueTuplePtr &recv_numel_list, const mindspore::Int64ImmPtr &rank_size,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_all_to_all_v(const mindspore::ValueTuplePtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &group, const mindspore::ValueTuplePtr &send_numel_list, const mindspore::ValueTuplePtr &recv_numel_list, const mindspore::Int64ImmPtr &rank_size);
mindspore::tensor::TensorPtr BACKEND_EXPORT softshrink(const mindspore::tensor::TensorPtr &input, const mindspore::FP32ImmPtr &lambd);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT cummax(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT silu_grad(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &x);
mindspore::tensor::TensorPtr BACKEND_EXPORT dot(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_fill_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &value);
mindspore::tensor::TensorPtr BACKEND_EXPORT rand_like_ext(const mindspore::tensor::TensorPtr &tensor, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset, const std::optional<mindspore::Int64ImmPtr> &dtype);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT unstack_ext_view(const mindspore::tensor::TensorPtr &input, const int64_t &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT log_softmax_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::Int64ImmPtr> &dim, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT divmod(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other, const std::optional<mindspore::Int64ImmPtr> &rounding_mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT reshape(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &shape);
mindspore::tensor::TensorPtr BACKEND_EXPORT gather_d(const mindspore::tensor::TensorPtr &x, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index);
mindspore::tensor::TensorPtr BACKEND_EXPORT sin(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT kl_div_grad(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const mindspore::Int64ImmPtr &reduction, const mindspore::BoolImmPtr &log_target);
mindspore::tensor::TensorPtr BACKEND_EXPORT broadcast_to_view(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &shape);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_bernoulli_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::FP32ImmPtr &p, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_comm_all_to_all_v_inner(const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &group, const mindspore::ValueTuplePtr &send_numel_list, const mindspore::ValueTuplePtr &recv_numel_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::BoolImmPtr &split_sizes_empty,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT inner_comm_all_to_all_v(const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &group, const mindspore::ValueTuplePtr &send_numel_list, const mindspore::ValueTuplePtr &recv_numel_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::BoolImmPtr &split_sizes_empty);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT silent_check_v2(const mindspore::tensor::TensorPtr &val, const mindspore::tensor::TensorPtr &input_grad, const mindspore::tensor::TensorPtr &sfda, const mindspore::tensor::TensorPtr &step, const mindspore::Int64ImmPtr &c_min_steps, const mindspore::FP32ImmPtr &c_thresh_l1, const mindspore::FP32ImmPtr &c_coeff_l1, const mindspore::FP32ImmPtr &c_thresh_l2, const mindspore::FP32ImmPtr &c_coeff_l2, const mindspore::Int64ImmPtr &npu_asd_detect);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT logsigmoid(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT std(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ValueTuplePtr> &dim, const mindspore::Int64ImmPtr &correction, const mindspore::BoolImmPtr &keepdim);
mindspore::tensor::TensorPtr BACKEND_EXPORT mv(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &vec);
mindspore::tensor::TensorPtr BACKEND_EXPORT as_strided(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &size, const std::vector<int64_t> &stride, const int64_t &storage_offset);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT layer_norm_grad_ext(const mindspore::tensor::TensorPtr &dy, const mindspore::tensor::TensorPtr &x, const mindspore::ValueTuplePtr &normalized_shape, const mindspore::tensor::TensorPtr &mean, const mindspore::tensor::TensorPtr &variance, const mindspore::tensor::TensorPtr &gamma, const mindspore::tensor::TensorPtr &beta, const mindspore::ValueTuplePtr &output_mask);
mindspore::tensor::TensorPtr BACKEND_EXPORT masked_fill(const mindspore::tensor::TensorPtr &input_x, const mindspore::tensor::TensorPtr &mask, const mindspore::tensor::TensorPtr &value);
mindspore::tensor::TensorPtr BACKEND_EXPORT relu_grad(const mindspore::tensor::TensorPtr &y_backprop, const mindspore::tensor::TensorPtr &x);
mindspore::tensor::TensorPtr BACKEND_EXPORT ones_like_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT cross_entropy_loss_grad(const mindspore::tensor::TensorPtr &grad_loss, const mindspore::tensor::TensorPtr &log_prob, const mindspore::tensor::TensorPtr &target, const std::optional<mindspore::tensor::TensorPtr> &weight, const std::optional<mindspore::tensor::TensorPtr> &grad_zloss, const std::optional<mindspore::tensor::TensorPtr> &lse_for_zloss, const mindspore::Int64ImmPtr &reduction, const mindspore::Int64ImmPtr &ignore_index, const mindspore::FP32ImmPtr &label_smoothing, const mindspore::FP32ImmPtr &lse_square_scale_for_zloss);
mindspore::tensor::TensorPtr BACKEND_EXPORT addcdiv_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &tensor1, const mindspore::tensor::TensorPtr &tensor2, const mindspore::ScalarPtr &value);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_nearest2d(const mindspore::tensor::TensorPtr &x, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales);
mindspore::tensor::TensorPtr BACKEND_EXPORT cos(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT adaptive_avg_pool1d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &output_size);
mindspore::tensor::TensorPtr BACKEND_EXPORT reciprocal(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT atanh(const mindspore::tensor::TensorPtr &input);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT convolution_grad(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::BoolImmPtr &transposed, const mindspore::ValueTuplePtr &output_padding, const mindspore::Int64ImmPtr &groups, const mindspore::ValueTuplePtr &output_mask);
mindspore::tensor::TensorPtr BACKEND_EXPORT bitwise_xor_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT sub(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT clamp_tensor(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::tensor::TensorPtr> &min, const std::optional<mindspore::tensor::TensorPtr> &max);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_floor(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT dense(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_scatter_src_reduce(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &src, const mindspore::Int64ImmPtr &reduce);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_divs(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT elu_ext(const mindspore::tensor::TensorPtr &input, const mindspore::FP32ImmPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT elu(const mindspore::tensor::TensorPtr &input_x, const mindspore::FP32ImmPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT gelu_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &y);
mindspore::tensor::TensorPtr BACKEND_EXPORT mul(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT argsort(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::BoolImmPtr &descending, const mindspore::BoolImmPtr &stable);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT split_tensor(const mindspore::tensor::TensorPtr &input, const int64_t &split_size, const int64_t &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_sub_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT less_equal(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT diag_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &diagonal);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_comm_irecv_inner(const mindspore::Int64ImmPtr &tag, const mindspore::Int64ImmPtr &src, const mindspore::ValueTuplePtr &shape, const mindspore::StringImmPtr &group, const mindspore::Int64ImmPtr &dtype,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT inner_comm_irecv(const mindspore::Int64ImmPtr &tag, const mindspore::Int64ImmPtr &src, const mindspore::ValueTuplePtr &shape, const mindspore::StringImmPtr &group, const mindspore::Int64ImmPtr &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT greater_equal(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT batch_norm_reduce_grad(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mean, const mindspore::tensor::TensorPtr &invstd, const mindspore::tensor::TensorPtr &weight, const mindspore::BoolImmPtr &input_g, const mindspore::BoolImmPtr &weight_g, const mindspore::BoolImmPtr &bias_g);
mindspore::tensor::TensorPtr BACKEND_EXPORT log(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT index_fill_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &value);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_uniform(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &from_, const mindspore::ScalarPtr &to, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT gelu_grad_ext(const mindspore::tensor::TensorPtr &grad, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &approximate);
mindspore::tensor::TensorPtr BACKEND_EXPORT swiglu(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT var_mean(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ValueTuplePtr> &dim, const mindspore::Int64ImmPtr &correction, const mindspore::BoolImmPtr &keepdim);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT argmax_with_value(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &axis, const mindspore::BoolImmPtr &keep_dims);
mindspore::tensor::TensorPtr BACKEND_EXPORT empty_like(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::Int64ImmPtr> &dtype, const std::optional<mindspore::Int64ImmPtr> &device);
mindspore::tensor::TensorPtr BACKEND_EXPORT gelu_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &approximate);
mindspore::tensor::TensorPtr BACKEND_EXPORT scatter_add_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &src);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_normal(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &mean, const mindspore::ScalarPtr &std, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT grid_sampler_2d_grad(const mindspore::tensor::TensorPtr &grad, const mindspore::tensor::TensorPtr &input_x, const mindspore::tensor::TensorPtr &grid, const mindspore::Int64ImmPtr &interpolation_mode, const mindspore::Int64ImmPtr &padding_mode, const mindspore::BoolImmPtr &align_corners, const mindspore::ValueTuplePtr &output_mask);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT min_dim(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::BoolImmPtr &keepdim);
mindspore::tensor::TensorPtr BACKEND_EXPORT zeros(const mindspore::ValueTuplePtr &size, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT sinc(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT l1_loss_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT acosh_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_scatter_value_reduce(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::ScalarPtr &value, const mindspore::Int64ImmPtr &reduce);
mindspore::tensor::TensorPtr BACKEND_EXPORT rsqrt(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT softplus_grad_ext(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &x, const mindspore::ScalarPtr &beta, const mindspore::ScalarPtr &threshold);
mindspore::tensor::TensorPtr BACKEND_EXPORT transpose(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &input_perm);
mindspore::tensor::TensorPtr BACKEND_EXPORT max(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT narrow_view(const mindspore::tensor::TensorPtr &input, const int64_t &dim, const int64_t &start, const int64_t &length);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT argmin_with_value(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &axis, const mindspore::BoolImmPtr &keep_dims);
mindspore::tensor::TensorPtr BACKEND_EXPORT tensor_scatter_elements(const mindspore::tensor::TensorPtr &data, const mindspore::tensor::TensorPtr &indices, const mindspore::tensor::TensorPtr &updates, const mindspore::Int64ImmPtr &axis, const mindspore::Int64ImmPtr &reduce);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_masked_fill_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mask, const mindspore::ScalarPtr &value);
mindspore::tensor::TensorPtr BACKEND_EXPORT histc_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &bins, const mindspore::ScalarPtr &min, const mindspore::ScalarPtr &max);
mindspore::tensor::TensorPtr BACKEND_EXPORT isfinite(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT logical_and(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &y);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT nllloss_2d(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const mindspore::tensor::TensorPtr &weight, const mindspore::Int64ImmPtr &reduction, const mindspore::Int64ImmPtr &ignore_index);
mindspore::tensor::TensorPtr BACKEND_EXPORT grid_sampler_3d(const mindspore::tensor::TensorPtr &input_x, const mindspore::tensor::TensorPtr &grid, const mindspore::Int64ImmPtr &interpolation_mode, const mindspore::Int64ImmPtr &padding_mode, const mindspore::BoolImmPtr &align_corners);
mindspore::tensor::TensorPtr BACKEND_EXPORT matmul(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mat2, const mindspore::BoolImmPtr &transpose_a, const mindspore::BoolImmPtr &transpose_b);
mindspore::tensor::TensorPtr BACKEND_EXPORT linalg_vector_norm(const mindspore::tensor::TensorPtr &x, const mindspore::FP32ImmPtr &ord, const std::optional<mindspore::ValueTuplePtr> &dim, const mindspore::BoolImmPtr &keepdim, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_exp(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT argmin_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::Int64ImmPtr> &dim, const mindspore::BoolImmPtr &keepdim);
mindspore::tensor::TensorPtr BACKEND_EXPORT cross(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other, const mindspore::Int64ImmPtr &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_floor_divides(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT sort_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::BoolImmPtr &descending, const mindspore::BoolImmPtr &stable);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_matmul_add(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &weight, const mindspore::tensor::TensorPtr &C);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT max_pool_with_indices(const mindspore::tensor::TensorPtr &x, const mindspore::ValueTuplePtr &kernel_size, const std::optional<mindspore::ValueTuplePtr> &strides, const mindspore::ValueTuplePtr &pads, const mindspore::ValueTuplePtr &dilation, const mindspore::BoolImmPtr &ceil_mode, const mindspore::Int64ImmPtr &argmax_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_adds_ext(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other, const mindspore::ScalarPtr &alpha);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT topk_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &k, const mindspore::Int64ImmPtr &dim, const mindspore::BoolImmPtr &largest, const mindspore::BoolImmPtr &sorted);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT non_zero_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT avg_pool3d_ext(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &kernel_size, const std::optional<mindspore::ValueTuplePtr> &stride, const mindspore::ValueTuplePtr &padding, const mindspore::BoolImmPtr &ceil_mode, const mindspore::BoolImmPtr &count_include_pad, const std::optional<mindspore::Int64ImmPtr> &divisor_override);
mindspore::tensor::TensorPtr BACKEND_EXPORT reduce_min(const mindspore::tensor::TensorPtr &x, const mindspore::ValueTuplePtr &axis, const mindspore::BoolImmPtr &keep_dims);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_all_to_all_v_single_inner(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &group, const mindspore::ValueTuplePtr &send_numel_list, const mindspore::ValueTuplePtr &recv_numel_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::BoolImmPtr &split_sizes_empty,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_all_to_all_v_single(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::StringImmPtr &group, const mindspore::ValueTuplePtr &send_numel_list, const mindspore::ValueTuplePtr &recv_numel_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::BoolImmPtr &split_sizes_empty);
mindspore::tensor::TensorPtr BACKEND_EXPORT conv3d_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::Int64ImmPtr &groups);
mindspore::tensor::TensorPtr BACKEND_EXPORT muls(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT sub_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT stack_ext(const mindspore::ValueTuplePtr &tensors, const mindspore::Int64ImmPtr &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT max_pool_grad_with_mask(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &grad, const mindspore::tensor::TensorPtr &mask, const mindspore::ValueTuplePtr &kernel_size, const std::optional<mindspore::ValueTuplePtr> &strides, const mindspore::ValueTuplePtr &pads, const mindspore::ValueTuplePtr &dilation, const mindspore::BoolImmPtr &ceil_mode, const mindspore::Int64ImmPtr &argmax_type);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT batch_norm_gather_stats_with_counts(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mean, const mindspore::tensor::TensorPtr &invstd, const std::optional<mindspore::tensor::TensorPtr> &running_mean, const std::optional<mindspore::tensor::TensorPtr> &running_var, const mindspore::FP32ImmPtr &momentum, const mindspore::FP32ImmPtr &eps, const std::optional<mindspore::tensor::TensorPtr> &counts);
mindspore::tensor::TensorPtr BACKEND_EXPORT log1p(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT min(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT t_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT dropout_do_mask_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mask, const mindspore::FP32ImmPtr &p);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_stop_gradient(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT randint(const mindspore::Int64ImmPtr &low, const mindspore::Int64ImmPtr &high, const mindspore::ValueTuplePtr &shape, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT embedding_dense_backward(const mindspore::tensor::TensorPtr &grad, const mindspore::tensor::TensorPtr &indices, const mindspore::Int64ImmPtr &num_weights, const std::optional<mindspore::Int64ImmPtr> &padding_idx, const mindspore::BoolImmPtr &scale_grad_by_freq);
mindspore::tensor::TensorPtr BACKEND_EXPORT lerp_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &end, const mindspore::FP32ImmPtr &weight);
mindspore::tensor::TensorPtr BACKEND_EXPORT leaky_relu_ext(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &negative_slope);
mindspore::tensor::TensorPtr BACKEND_EXPORT zeros_like_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT multinomial_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &num_samples, const mindspore::BoolImmPtr &replacement, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT reflection_pad_3d_grad(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT col2im_ext(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &output_size, const mindspore::ValueTuplePtr &kernel_size, const mindspore::ValueTuplePtr &dilation, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &stride);
mindspore::tensor::TensorPtr BACKEND_EXPORT full_like(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &fill_value, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT baddbmm(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &batch1, const mindspore::tensor::TensorPtr &batch2, const mindspore::ScalarPtr &beta, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT flatten_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &start_dim, const mindspore::Int64ImmPtr &end_dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT squeeze(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT addcmul_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &tensor1, const mindspore::tensor::TensorPtr &tensor2, const mindspore::ScalarPtr &value);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT rms_norm(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &gamma, const mindspore::FP32ImmPtr &epsilon);
mindspore::tensor::TensorPtr BACKEND_EXPORT erfc(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT asin_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT sub_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT pow(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &exponent);
mindspore::tensor::TensorPtr BACKEND_EXPORT median_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_trilinear3d(const mindspore::tensor::TensorPtr &x, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales, const mindspore::BoolImmPtr &align_corners);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_linear1d(const mindspore::tensor::TensorPtr &x, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales, const mindspore::BoolImmPtr &align_corners);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_all_gather_into_tensor_inner(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_all_gather_into_tensor(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &group);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT group_norm(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &num_groups, const std::optional<mindspore::tensor::TensorPtr> &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::FP32ImmPtr &eps);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT moe_token_permute(const mindspore::tensor::TensorPtr &tokens, const mindspore::tensor::TensorPtr &indices, const std::optional<mindspore::Int64ImmPtr> &num_out_tokens, const mindspore::BoolImmPtr &padded_mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT bernoulli_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT binary_cross_entropy(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const std::optional<mindspore::tensor::TensorPtr> &weight, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_index_add(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &source, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT avg_pool2d_grad(const mindspore::tensor::TensorPtr &grad, const mindspore::tensor::TensorPtr &image, const mindspore::ValueTuplePtr &kernel_size, const mindspore::ValueTuplePtr &stride, const mindspore::ValueTuplePtr &padding, const mindspore::BoolImmPtr &ceil_mode, const mindspore::BoolImmPtr &count_include_pad, const std::optional<mindspore::Int64ImmPtr> &divisor_override);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT silent_check_v3(const mindspore::tensor::TensorPtr &val, const mindspore::tensor::TensorPtr &max, const mindspore::tensor::TensorPtr &avg, const mindspore::tensor::TensorPtr &input_grad, const mindspore::tensor::TensorPtr &step, const mindspore::FP32ImmPtr &c_thresh_l1, const mindspore::FP32ImmPtr &c_thresh_l2, const mindspore::FP32ImmPtr &beta1, const mindspore::Int64ImmPtr &npu_asd_detect);
mindspore::tensor::TensorPtr BACKEND_EXPORT triu(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &diagonal);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_nearest3d_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::ValueTuplePtr &input_size, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT split_with_size(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &split_size, const int64_t &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT index(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &indices);
mindspore::tensor::TensorPtr BACKEND_EXPORT nllloss_grad(const mindspore::tensor::TensorPtr &logits, const mindspore::tensor::TensorPtr &loss_grad, const mindspore::tensor::TensorPtr &labels, const mindspore::tensor::TensorPtr &weight, const mindspore::tensor::TensorPtr &total_weight, const mindspore::Int64ImmPtr &reduction, const mindspore::Int64ImmPtr &ignore_index);
mindspore::tensor::TensorPtr BACKEND_EXPORT index_fill_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::ScalarPtr &value);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT custom_ext(const mindspore::ValueTuplePtr &tensors);
mindspore::tensor::TensorPtr BACKEND_EXPORT divmods(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other, const std::optional<mindspore::Int64ImmPtr> &rounding_mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT conv_transpose2d(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &output_padding, const mindspore::Int64ImmPtr &groups, const mindspore::ValueTuplePtr &dilation);
mindspore::tensor::TensorPtr BACKEND_EXPORT bmm_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mat2);
mindspore::tensor::TensorPtr BACKEND_EXPORT not_equal(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT scatter(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &src, const mindspore::Int64ImmPtr &reduce);
mindspore::tensor::TensorPtr BACKEND_EXPORT add_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other, const mindspore::ScalarPtr &alpha);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT layer_norm_ext(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &normalized_shape, const std::optional<mindspore::tensor::TensorPtr> &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::FP32ImmPtr &eps);
mindspore::tensor::TensorPtr BACKEND_EXPORT reduce_max(const mindspore::tensor::TensorPtr &x, const mindspore::ValueTuplePtr &axis, const mindspore::BoolImmPtr &keep_dims);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_barrier_inner(const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_barrier(const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_inplace_index_put(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &indices, const mindspore::tensor::TensorPtr &values, const mindspore::BoolImmPtr &accumulate);
mindspore::tensor::TensorPtr BACKEND_EXPORT log_softmax_grad(const mindspore::tensor::TensorPtr &logits, const mindspore::tensor::TensorPtr &grad, const mindspore::Int64ImmPtr &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_trilinear3d_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::ValueTuplePtr &input_size, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales, const mindspore::BoolImmPtr &align_corners);
mindspore::tensor::TensorPtr BACKEND_EXPORT replication_pad_3d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT polar(const mindspore::tensor::TensorPtr &abs, const mindspore::tensor::TensorPtr &angle);
mindspore::tensor::TensorPtr BACKEND_EXPORT ffn_ext(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &weight1, const mindspore::tensor::TensorPtr &weight2, const std::optional<mindspore::ValueTuplePtr> &expertTokens, const std::optional<mindspore::tensor::TensorPtr> &bias1, const std::optional<mindspore::tensor::TensorPtr> &bias2, const std::optional<mindspore::tensor::TensorPtr> &scale, const std::optional<mindspore::tensor::TensorPtr> &offset, const std::optional<mindspore::tensor::TensorPtr> &deqScale1, const std::optional<mindspore::tensor::TensorPtr> &deqScale2, const std::optional<mindspore::tensor::TensorPtr> &antiquant_scale1, const std::optional<mindspore::tensor::TensorPtr> &antiquant_scale2, const std::optional<mindspore::tensor::TensorPtr> &antiquant_offset1, const std::optional<mindspore::tensor::TensorPtr> &antiquant_offset2, const mindspore::Int64ImmPtr &activation, const mindspore::Int64ImmPtr &inner_precise);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_reduce_scatter_inner(const mindspore::tensor::TensorPtr &other, const mindspore::ValueTuplePtr &input_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_reduce_scatter(const mindspore::tensor::TensorPtr &other, const mindspore::ValueTuplePtr &input_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT bitwise_and_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT rotary_position_embedding(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &cos, const mindspore::tensor::TensorPtr &sin, const mindspore::Int64ImmPtr &mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT reverse_v2(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_non_zero(const mindspore::tensor::TensorPtr &input);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT batch_norm_stats(const mindspore::tensor::TensorPtr &input, const mindspore::FP32ImmPtr &eps);
mindspore::tensor::TensorPtr BACKEND_EXPORT ones(const mindspore::ValueTuplePtr &shape, const std::optional<mindspore::Int64ImmPtr> &dtype);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT add_layernorm_v2(const mindspore::tensor::TensorPtr &x1, const mindspore::tensor::TensorPtr &x2, const mindspore::tensor::TensorPtr &gamma, const mindspore::tensor::TensorPtr &beta, const mindspore::FP32ImmPtr &epsilon, const mindspore::BoolImmPtr &additionalOut);
mindspore::tensor::TensorPtr BACKEND_EXPORT abs(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT hardtanh_grad(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &min_val, const mindspore::ScalarPtr &max_val);
mindspore::tensor::TensorPtr BACKEND_EXPORT selu_grad(const mindspore::tensor::TensorPtr &gradient, const mindspore::tensor::TensorPtr &result);
mindspore::tensor::TensorPtr BACKEND_EXPORT new_ones(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &size, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT view_as(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT hswish_grad(const mindspore::tensor::TensorPtr &y_grad, const mindspore::tensor::TensorPtr &x);
mindspore::tensor::TensorPtr BACKEND_EXPORT tan(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT conv2d_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::Int64ImmPtr &groups);
mindspore::tensor::TensorPtr BACKEND_EXPORT normal_float_float(const mindspore::ScalarPtr &mean, const mindspore::ScalarPtr &std, const mindspore::ValueTuplePtr &size, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT tanh(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_addmm(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mat1, const mindspore::tensor::TensorPtr &mat2, const mindspore::ScalarPtr &beta, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT tril_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &diagonal);
mindspore::tensor::TensorPtr BACKEND_EXPORT smooth_l1_loss_grad(const mindspore::tensor::TensorPtr &prediction, const mindspore::tensor::TensorPtr &target, const mindspore::tensor::TensorPtr &dout, const mindspore::FP32ImmPtr &beta, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT mean_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ValueTuplePtr> &dim, const mindspore::BoolImmPtr &keepdim, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_nearest2d_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::ValueTuplePtr &input_size, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales);
mindspore::tensor::TensorPtr BACKEND_EXPORT silu(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT hardtanh(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &min_val, const mindspore::ScalarPtr &max_val);
mindspore::tensor::TensorPtr BACKEND_EXPORT transpose_view(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &input_perm);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_all_gather_into_tensor_uneven_inner(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &output_split_sizes, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_all_gather_into_tensor_uneven(const mindspore::tensor::TensorPtr &other, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &output_split_sizes, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT erfinv(const mindspore::tensor::TensorPtr &input);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT apply_rotary_pos_emb(const mindspore::tensor::TensorPtr &query, const mindspore::tensor::TensorPtr &key, const mindspore::tensor::TensorPtr &cos, const mindspore::tensor::TensorPtr &sin, const mindspore::tensor::TensorPtr &position_ids, const mindspore::Int64ImmPtr &cos_format);
mindspore::tensor::TensorPtr BACKEND_EXPORT expm1(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_index_put(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &indices, const mindspore::tensor::TensorPtr &values, const mindspore::BoolImmPtr &accumulate);
mindspore::tensor::TensorPtr BACKEND_EXPORT conv1d_padding(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::Int64ImmPtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::Int64ImmPtr &groups);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_moe_token_unpermute(const mindspore::tensor::TensorPtr &permuted_tokens, const mindspore::tensor::TensorPtr &sorted_indices, const std::optional<mindspore::tensor::TensorPtr> &probs, const mindspore::BoolImmPtr &padded_mode, const std::optional<mindspore::ValueTuplePtr> &restore_shape);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT all_gather_matmul(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &x2, const mindspore::StringImmPtr &group, const mindspore::Int64ImmPtr &world_size, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::Int64ImmPtr &gather_index, const mindspore::BoolImmPtr &gather_output, const mindspore::Int64ImmPtr &comm_turn, const mindspore::BoolImmPtr &trans_input, const mindspore::BoolImmPtr &trans_x2);
mindspore::tensor::TensorPtr BACKEND_EXPORT logical_not(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT new_full(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &size, const mindspore::ScalarPtr &fill_value, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT floor_div_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT soft_margin_loss(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT acos_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_scatter_inner(const mindspore::tensor::TensorPtr &other, const mindspore::ValueTuplePtr &scatter_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::Int64ImmPtr &src, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_scatter(const mindspore::tensor::TensorPtr &other, const mindspore::ValueTuplePtr &scatter_list, const mindspore::Int64ImmPtr &rank_size, const mindspore::Int64ImmPtr &src, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT tile(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &dims);
mindspore::tensor::TensorPtr BACKEND_EXPORT index_select(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index);
mindspore::tensor::TensorPtr BACKEND_EXPORT selu_ext(const mindspore::tensor::TensorPtr &input);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT cell_backward_hook(const mindspore::ValueTuplePtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT conv3d_padding(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::Int64ImmPtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::Int64ImmPtr &groups);
mindspore::tensor::TensorPtr BACKEND_EXPORT prod_ext(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::Int64ImmPtr> &dim, const mindspore::BoolImmPtr &keepdim, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT l1_loss_backward_ext(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_relu(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT norm(const mindspore::tensor::TensorPtr &input, const mindspore::FP32ImmPtr &p, const std::optional<mindspore::ValueTuplePtr> &dim, const mindspore::BoolImmPtr &keepdim, const std::optional<mindspore::Int64ImmPtr> &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT sqrt(const mindspore::tensor::TensorPtr &x);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT unique_consecutive(const mindspore::tensor::TensorPtr &input, const mindspore::BoolImmPtr &return_inverse, const mindspore::BoolImmPtr &return_counts, const std::optional<mindspore::Int64ImmPtr> &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_hardtanh(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &min_val, const mindspore::ScalarPtr &max_val);
mindspore::tensor::TensorPtr BACKEND_EXPORT isclose(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other, const mindspore::FP32ImmPtr &rtol, const mindspore::FP32ImmPtr &atol, const mindspore::BoolImmPtr &equal_nan);
mindspore::tensor::TensorPtr BACKEND_EXPORT pow_tensor_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &exponent);
mindspore::tensor::TensorPtr BACKEND_EXPORT exp2(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT slice(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &begin, const std::vector<int64_t> &size);
mindspore::tensor::TensorPtr BACKEND_EXPORT non_zero(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT nan_to_num(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::FP32ImmPtr> &nan, const std::optional<mindspore::FP32ImmPtr> &posinf, const std::optional<mindspore::FP32ImmPtr> &neginf);
mindspore::tensor::TensorPtr BACKEND_EXPORT softplus_ext(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &beta, const mindspore::ScalarPtr &threshold);
mindspore::tensor::TensorPtr BACKEND_EXPORT hsigmoid_grad(const mindspore::tensor::TensorPtr &grads, const mindspore::tensor::TensorPtr &input_x);
mindspore::tensor::TensorPtr BACKEND_EXPORT clone(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT reduce_all(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ValueTuplePtr> &axis, const mindspore::BoolImmPtr &keep_dims);
mindspore::tensor::TensorPtr BACKEND_EXPORT reflection_pad_2d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_erfinv(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT addmm(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mat1, const mindspore::tensor::TensorPtr &mat2, const mindspore::ScalarPtr &beta, const mindspore::ScalarPtr &alpha);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT adaptive_max_pool1d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &output_size);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_batch_isend_irecv_inner(const mindspore::ValueTuplePtr &input, const mindspore::StringImmPtr &group, const mindspore::ValueTuplePtr &op_types, const mindspore::ValueTuplePtr &remotes_ranks,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_batch_isend_irecv(const mindspore::ValueTuplePtr &input, const mindspore::StringImmPtr &group, const mindspore::ValueTuplePtr &op_types, const mindspore::ValueTuplePtr &remotes_ranks);
mindspore::tensor::TensorPtr BACKEND_EXPORT mm_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mat2);
mindspore::tensor::TensorPtr BACKEND_EXPORT frac(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT cosh(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT fill_tensor(const mindspore::ValueTuplePtr &size, const mindspore::tensor::TensorPtr &fill_value, const std::optional<mindspore::Int64ImmPtr> &dtype);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT cross_entropy_loss(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const std::optional<mindspore::tensor::TensorPtr> &weight, const mindspore::Int64ImmPtr &reduction, const mindspore::Int64ImmPtr &ignore_index, const mindspore::FP32ImmPtr &label_smoothing, const mindspore::FP32ImmPtr &lse_square_scale_for_zloss, const mindspore::BoolImmPtr &return_zloss);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_nearest1d(const mindspore::tensor::TensorPtr &x, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales);
mindspore::tensor::TensorPtr BACKEND_EXPORT broadcast_to(const mindspore::tensor::TensorPtr &input, const std::vector<int64_t> &shape);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT dropout_ext(const mindspore::tensor::TensorPtr &input, const mindspore::FP32ImmPtr &p, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT matrix_inverse_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT logsumexp(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &dim, const mindspore::BoolImmPtr &keepdim);
mindspore::tensor::TensorPtr BACKEND_EXPORT repeat_interleave_int(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &repeats, const std::optional<mindspore::Int64ImmPtr> &dim, const std::optional<mindspore::Int64ImmPtr> &output_size);
mindspore::tensor::TensorPtr BACKEND_EXPORT gelu(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_clamp_scalar(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ScalarPtr> &min, const std::optional<mindspore::ScalarPtr> &max);
mindspore::tensor::TensorPtr BACKEND_EXPORT replication_pad_2d_grad(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT adaptive_avg_pool3d_grad_ext(const mindspore::tensor::TensorPtr &input_grad, const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT var(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ValueTuplePtr> &dim, const mindspore::Int64ImmPtr &correction, const mindspore::BoolImmPtr &keepdim);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT flash_attention_score(const mindspore::tensor::TensorPtr &query, const mindspore::tensor::TensorPtr &key, const mindspore::tensor::TensorPtr &value, const std::optional<mindspore::tensor::TensorPtr> &real_shift, const std::optional<mindspore::tensor::TensorPtr> &drop_mask, const std::optional<mindspore::tensor::TensorPtr> &padding_mask, const std::optional<mindspore::tensor::TensorPtr> &attn_mask, const std::optional<mindspore::ValueTuplePtr> &prefix, const std::optional<mindspore::ValueTuplePtr> &actual_seq_qlen, const std::optional<mindspore::ValueTuplePtr> &actual_seq_kvlen, const mindspore::Int64ImmPtr &head_num, const mindspore::FP32ImmPtr &keep_prob, const mindspore::FP32ImmPtr &scale_value, const mindspore::Int64ImmPtr &pre_tokens, const mindspore::Int64ImmPtr &next_tokens, const mindspore::Int64ImmPtr &inner_precise, const mindspore::Int64ImmPtr &input_layout, const mindspore::Int64ImmPtr &sparse_mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT incre_flash_attention(const mindspore::tensor::TensorPtr &query, const mindspore::ValueTuplePtr &key, const mindspore::ValueTuplePtr &value, const std::optional<mindspore::tensor::TensorPtr> &attn_mask, const std::optional<mindspore::tensor::TensorPtr> &actual_seq_lengths, const std::optional<mindspore::tensor::TensorPtr> &pse_shift, const std::optional<mindspore::tensor::TensorPtr> &dequant_scale1, const std::optional<mindspore::tensor::TensorPtr> &quant_scale1, const std::optional<mindspore::tensor::TensorPtr> &dequant_scale2, const std::optional<mindspore::tensor::TensorPtr> &quant_scale2, const std::optional<mindspore::tensor::TensorPtr> &quant_offset2, const std::optional<mindspore::tensor::TensorPtr> &antiquant_scale, const std::optional<mindspore::tensor::TensorPtr> &antiquant_offset, const std::optional<mindspore::tensor::TensorPtr> &block_table, const std::optional<mindspore::tensor::TensorPtr> &kv_padding_size, const mindspore::Int64ImmPtr &num_heads, const mindspore::Int64ImmPtr &input_layout, const mindspore::FP32ImmPtr &scale_value, const mindspore::Int64ImmPtr &num_key_value_heads, const mindspore::Int64ImmPtr &block_size, const mindspore::Int64ImmPtr &inner_precise);
mindspore::tensor::TensorPtr BACKEND_EXPORT diagonal_view(const mindspore::tensor::TensorPtr &input, const int64_t &offset, const int64_t &dim1, const int64_t &dim2);
mindspore::tensor::TensorPtr BACKEND_EXPORT relu(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT sigmoid(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_broadcast_inner(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &src, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_broadcast(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &src, const mindspore::Int64ImmPtr &rank_id, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_log(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT upsample_bicubic2d_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::ValueTuplePtr &input_size, const std::optional<mindspore::ValueTuplePtr> &output_size, const std::optional<mindspore::ValueTuplePtr> &scales, const mindspore::BoolImmPtr &align_corners);
mindspore::tensor::TensorPtr BACKEND_EXPORT inner_comm_reduce_scatter_inner(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT inner_comm_reduce_scatter(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &op_type, const mindspore::StringImmPtr &group);
mindspore::tensor::TensorPtr BACKEND_EXPORT divs(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT leaky_relu_grad_ext(const mindspore::tensor::TensorPtr &dy, const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &negative_slope, const mindspore::BoolImmPtr &is_result);
mindspore::tensor::TensorPtr BACKEND_EXPORT count_nonzero(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::ValueTuplePtr> &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT adaptive_avg_pool3d_ext(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &output_size);
mindspore::tensor::TensorPtr BACKEND_EXPORT slice_ext_view(const mindspore::tensor::TensorPtr &input, const int64_t &dim, const int64_t &start, const int64_t &end, const int64_t &step);
mindspore::tensor::TensorPtr BACKEND_EXPORT moe_distribute_combine(const mindspore::tensor::TensorPtr &expand_x, const mindspore::tensor::TensorPtr &expert_ids, const mindspore::tensor::TensorPtr &expand_idx, const mindspore::tensor::TensorPtr &ep_send_counts, const mindspore::tensor::TensorPtr &expert_scales, const mindspore::Int64ImmPtr &ep_world_size, const mindspore::Int64ImmPtr &ep_rank_id, const mindspore::Int64ImmPtr &moe_expert_num, const std::optional<mindspore::tensor::TensorPtr> &tp_send_counts, const std::optional<mindspore::tensor::TensorPtr> &x_active_mask, const std::optional<mindspore::tensor::TensorPtr> &activate_scale, const std::optional<mindspore::tensor::TensorPtr> &weight_scale, const std::optional<mindspore::tensor::TensorPtr> &group_list, const std::optional<mindspore::tensor::TensorPtr> &expand_scales, const std::optional<mindspore::StringImmPtr> &group_ep, const std::optional<mindspore::StringImmPtr> &group_tp, const mindspore::Int64ImmPtr &tp_world_size, const mindspore::Int64ImmPtr &tp_rank_id, const mindspore::Int64ImmPtr &expert_shard_type, const mindspore::Int64ImmPtr &shared_expert_num, const mindspore::Int64ImmPtr &shared_export_rank_num, const mindspore::Int64ImmPtr &global_bs, const mindspore::Int64ImmPtr &out_dtype, const mindspore::Int64ImmPtr &common_quant_mode, const mindspore::Int64ImmPtr &group_list_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT xlogy_scalar_other(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT new_zeros(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &size, const std::optional<mindspore::Int64ImmPtr> &dtype);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT unique_dim(const mindspore::tensor::TensorPtr &input, const mindspore::BoolImmPtr &sorted, const mindspore::BoolImmPtr &return_inverse, const mindspore::Int64ImmPtr &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT batch_mat_mul(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &y, const mindspore::BoolImmPtr &transpose_a, const mindspore::BoolImmPtr &transpose_b);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_copy(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &src, const mindspore::BoolImmPtr &non_blocking);
mindspore::tensor::TensorPtr BACKEND_EXPORT index_add_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::tensor::TensorPtr &source, const mindspore::ScalarPtr &alpha);
mindspore::tensor::TensorPtr BACKEND_EXPORT reflection_pad_1d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT contiguous(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT reflection_pad_3d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT prelu(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight);
mindspore::tensor::TensorPtr BACKEND_EXPORT ne_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT swiglu_grad(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT atan2_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT mse_loss_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const mindspore::Int64ImmPtr &reduction);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_fill_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &value);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_clamp_tensor(const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::tensor::TensorPtr> &min, const std::optional<mindspore::tensor::TensorPtr> &max);
mindspore::tensor::TensorPtr BACKEND_EXPORT less(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT unique2(const mindspore::tensor::TensorPtr &input, const mindspore::BoolImmPtr &sorted, const mindspore::BoolImmPtr &return_inverse, const mindspore::BoolImmPtr &return_counts);
mindspore::tensor::TensorPtr BACKEND_EXPORT glu(const mindspore::tensor::TensorPtr &x, const mindspore::Int64ImmPtr &axis);
mindspore::tensor::TensorPtr BACKEND_EXPORT convolution(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::BoolImmPtr &transposed, const mindspore::ValueTuplePtr &output_padding, const mindspore::Int64ImmPtr &groups);
mindspore::tensor::TensorPtr BACKEND_EXPORT dropout_grad_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &mask, const mindspore::FP32ImmPtr &p);
mindspore::tensor::TensorPtr BACKEND_EXPORT moe_token_permute_grad(const mindspore::tensor::TensorPtr &permuted_tokens_grad, const mindspore::tensor::TensorPtr &sorted_indices, const mindspore::Int64ImmPtr &num_topk, const mindspore::BoolImmPtr &padded_mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_elu(const mindspore::tensor::TensorPtr &input, const mindspore::FP32ImmPtr &alpha);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT max_pool_with_mask(const mindspore::tensor::TensorPtr &x, const mindspore::ValueTuplePtr &kernel_size, const std::optional<mindspore::ValueTuplePtr> &strides, const mindspore::ValueTuplePtr &pads, const mindspore::ValueTuplePtr &dilation, const mindspore::BoolImmPtr &ceil_mode, const mindspore::Int64ImmPtr &argmax_type);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT prelu_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &weight);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT nllloss(const mindspore::tensor::TensorPtr &logits, const mindspore::tensor::TensorPtr &labels, const mindspore::tensor::TensorPtr &weight, const mindspore::Int64ImmPtr &reduction, const mindspore::Int64ImmPtr &ignore_index);
mindspore::tensor::TensorPtr BACKEND_EXPORT replication_pad_1d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT mish_ext(const mindspore::tensor::TensorPtr &input);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_threshold(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &threshold, const mindspore::ScalarPtr &value);
mindspore::tensor::TensorPtr BACKEND_EXPORT max_unpool2d_ext(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &indices, const mindspore::ValueTuplePtr &kernel_size, const std::optional<mindspore::ValueTuplePtr> &stride, const mindspore::ValueTuplePtr &padding, const std::optional<mindspore::ValueTuplePtr> &output_size);
mindspore::tensor::TensorPtr BACKEND_EXPORT conv2d_padding(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &weight, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::ValueTuplePtr &stride, const mindspore::Int64ImmPtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::Int64ImmPtr &groups);
mindspore::tensor::TensorPtr BACKEND_EXPORT logical_xor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT mish_grad_ext(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &x);
mindspore::tensor::TensorPtr BACKEND_EXPORT xlogy(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
mindspore::tensor::TensorPtr BACKEND_EXPORT col2im_grad(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &kernel_size, const mindspore::ValueTuplePtr &dilation, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &stride);
mindspore::tensor::TensorPtr BACKEND_EXPORT greater_equal_scalar(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &other);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT cummin_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim);
mindspore::tensor::TensorPtr BACKEND_EXPORT normal_tensor_float(const mindspore::tensor::TensorPtr &mean, const mindspore::ScalarPtr &std, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT select_ext_view(const mindspore::tensor::TensorPtr &input, const int64_t &dim, const int64_t &index);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT speed_fusion_attention_grad(const mindspore::tensor::TensorPtr &query, const mindspore::tensor::TensorPtr &key, const mindspore::tensor::TensorPtr &value, const mindspore::tensor::TensorPtr &dy, const mindspore::Int64ImmPtr &head_num, const mindspore::Int64ImmPtr &input_layout, const std::optional<mindspore::tensor::TensorPtr> &pse, const std::optional<mindspore::tensor::TensorPtr> &padding_mask, const std::optional<mindspore::tensor::TensorPtr> &atten_mask, const std::optional<mindspore::tensor::TensorPtr> &softmax_max, const std::optional<mindspore::tensor::TensorPtr> &softmax_sum, const std::optional<mindspore::tensor::TensorPtr> &softmax_in, const std::optional<mindspore::tensor::TensorPtr> &attention_in, const mindspore::FP32ImmPtr &scale_value, const mindspore::FP32ImmPtr &keep_prob, const mindspore::Int64ImmPtr &pre_tokens, const mindspore::Int64ImmPtr &next_tokens, const mindspore::Int64ImmPtr &inner_precise, const std::optional<mindspore::tensor::TensorPtr> &seed, const std::optional<mindspore::tensor::TensorPtr> &offset, const std::optional<mindspore::tensor::TensorPtr> &numels, const std::optional<mindspore::ValueTuplePtr> &prefix, const std::optional<mindspore::ValueTuplePtr> &actual_seq_qlen, const std::optional<mindspore::ValueTuplePtr> &actual_seq_kvlen, const mindspore::Int64ImmPtr &sparse_mode, const mindspore::BoolImmPtr &gen_mask_parallel, const mindspore::BoolImmPtr &sync, const mindspore::Int64ImmPtr &pse_type, const std::optional<mindspore::ValueTuplePtr> &q_start_idx, const std::optional<mindspore::ValueTuplePtr> &kv_start_idx);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT batch_norm_grad_ext(const mindspore::tensor::TensorPtr &dout, const mindspore::tensor::TensorPtr &input, const std::optional<mindspore::tensor::TensorPtr> &weight, const std::optional<mindspore::tensor::TensorPtr> &running_mean, const std::optional<mindspore::tensor::TensorPtr> &running_var, const std::optional<mindspore::tensor::TensorPtr> &saved_mean, const std::optional<mindspore::tensor::TensorPtr> &saved_rstd, const mindspore::BoolImmPtr &training, const mindspore::FP32ImmPtr &eps, const mindspore::ValueTuplePtr &output_mask);
mindspore::tensor::TensorPtr BACKEND_EXPORT replication_pad_1d_grad(const mindspore::tensor::TensorPtr &grad_output, const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &padding);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_random(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &from_, const std::optional<mindspore::Int64ImmPtr> &to, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
mindspore::tensor::TensorPtr BACKEND_EXPORT dist_comm_all_gather_inner(const mindspore::ValueTuplePtr &tensor_list, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &group,CommHandlePtr comm_handle, const std::string& target);
std::tuple<mindspore::tensor::TensorPtr, CommHandlePtr> BACKEND_EXPORT dist_comm_all_gather(const mindspore::ValueTuplePtr &tensor_list, const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &rank_size, const mindspore::StringImmPtr &group);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT meshgrid(const mindspore::ValueTuplePtr &inputs, const int64_t &indexing);
mindspore::tensor::TensorPtr BACKEND_EXPORT randint_like(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &low, const mindspore::Int64ImmPtr &high, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset, const std::optional<mindspore::Int64ImmPtr> &dtype);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT add_layer_norm_grad(const mindspore::tensor::TensorPtr &dy, const mindspore::tensor::TensorPtr &x1, const mindspore::tensor::TensorPtr &x2, const mindspore::tensor::TensorPtr &rstd, const mindspore::tensor::TensorPtr &mean, const mindspore::tensor::TensorPtr &gamma, const mindspore::tensor::TensorPtr &dsumOptional);
mindspore::tensor::TensorPtr BACKEND_EXPORT kl_div(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &target, const mindspore::Int64ImmPtr &reduction, const mindspore::BoolImmPtr &log_target);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_remainder_tensor_tensor(const mindspore::tensor::TensorPtr &input, const mindspore::tensor::TensorPtr &other);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT flash_attention_score_grad(const mindspore::tensor::TensorPtr &query, const mindspore::tensor::TensorPtr &key, const mindspore::tensor::TensorPtr &value, const mindspore::tensor::TensorPtr &dy, const std::optional<mindspore::tensor::TensorPtr> &pse_shift, const std::optional<mindspore::tensor::TensorPtr> &drop_mask, const std::optional<mindspore::tensor::TensorPtr> &padding_mask, const std::optional<mindspore::tensor::TensorPtr> &atten_mask, const std::optional<mindspore::tensor::TensorPtr> &softmax_max, const std::optional<mindspore::tensor::TensorPtr> &softmax_sum, const std::optional<mindspore::tensor::TensorPtr> &softmax_in, const std::optional<mindspore::tensor::TensorPtr> &attention_in, const std::optional<mindspore::ValueTuplePtr> &prefix, const std::optional<mindspore::ValueTuplePtr> &actual_seq_qlen, const std::optional<mindspore::ValueTuplePtr> &actual_seq_kvlen, const mindspore::Int64ImmPtr &head_num, const mindspore::FP32ImmPtr &keep_prob, const mindspore::FP32ImmPtr &scale_value, const mindspore::Int64ImmPtr &pre_tokens, const mindspore::Int64ImmPtr &next_tokens, const mindspore::Int64ImmPtr &inner_precise, const mindspore::Int64ImmPtr &input_layout, const mindspore::Int64ImmPtr &sparse_mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_scatter_value(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::tensor::TensorPtr &index, const mindspore::ScalarPtr &value);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT fused_infer_attention_score(const mindspore::tensor::TensorPtr &query, const mindspore::ValueTuplePtr &key, const mindspore::ValueTuplePtr &value, const std::optional<mindspore::tensor::TensorPtr> &pse_shift, const std::optional<mindspore::tensor::TensorPtr> &attn_mask, const std::optional<mindspore::tensor::TensorPtr> &actual_seq_lengths, const std::optional<mindspore::tensor::TensorPtr> &actual_seq_lengths_kv, const std::optional<mindspore::tensor::TensorPtr> &dequant_scale1, const std::optional<mindspore::tensor::TensorPtr> &quant_scale1, const std::optional<mindspore::tensor::TensorPtr> &dequant_scale2, const std::optional<mindspore::tensor::TensorPtr> &quant_scale2, const std::optional<mindspore::tensor::TensorPtr> &quant_offset2, const std::optional<mindspore::tensor::TensorPtr> &antiquant_scale, const std::optional<mindspore::tensor::TensorPtr> &antiquant_offset, const std::optional<mindspore::tensor::TensorPtr> &block_table, const std::optional<mindspore::tensor::TensorPtr> &query_padding_size, const std::optional<mindspore::tensor::TensorPtr> &kv_padding_size, const std::optional<mindspore::tensor::TensorPtr> &key_antiquant_scale, const std::optional<mindspore::tensor::TensorPtr> &key_antiquant_offset, const std::optional<mindspore::tensor::TensorPtr> &value_antiquant_scale, const std::optional<mindspore::tensor::TensorPtr> &value_antiquant_offset, const std::optional<mindspore::tensor::TensorPtr> &key_shared_prefix, const std::optional<mindspore::tensor::TensorPtr> &value_shared_prefix, const std::optional<mindspore::tensor::TensorPtr> &actual_shared_prefix_len, const mindspore::Int64ImmPtr &num_heads, const mindspore::FP32ImmPtr &scale_value, const mindspore::Int64ImmPtr &pre_tokens, const mindspore::Int64ImmPtr &next_tokens, const mindspore::Int64ImmPtr &input_layout, const mindspore::Int64ImmPtr &num_key_value_heads, const mindspore::Int64ImmPtr &sparse_mode, const mindspore::Int64ImmPtr &inner_precise, const mindspore::Int64ImmPtr &block_size, const mindspore::Int64ImmPtr &antiquant_mode, const mindspore::BoolImmPtr &softmax_lse_flag, const mindspore::Int64ImmPtr &key_antiquant_mode, const mindspore::Int64ImmPtr &value_antiquant_mode);
mindspore::tensor::TensorPtr BACKEND_EXPORT quant_batch_matmul(const mindspore::tensor::TensorPtr &x1, const mindspore::tensor::TensorPtr &x2, const mindspore::tensor::TensorPtr &scale, const std::optional<mindspore::tensor::TensorPtr> &offset, const std::optional<mindspore::tensor::TensorPtr> &bias, const std::optional<mindspore::tensor::TensorPtr> &pertokenScaleOptional, const mindspore::BoolImmPtr &transpose_x1, const mindspore::BoolImmPtr &transpose_x2, const mindspore::Int64ImmPtr &dtype);
mindspore::tensor::TensorPtr BACKEND_EXPORT moe_finalize_routing(const mindspore::tensor::TensorPtr &expanded_x, const mindspore::tensor::TensorPtr &x1, const std::optional<mindspore::tensor::TensorPtr> &x2, const std::optional<mindspore::tensor::TensorPtr> &bias, const std::optional<mindspore::tensor::TensorPtr> &scales, const std::optional<mindspore::tensor::TensorPtr> &expanded_row_idx, const std::optional<mindspore::tensor::TensorPtr> &expanded_expert_idx);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT add_rmsnorm_quant_v2(const mindspore::tensor::TensorPtr &x1, const mindspore::tensor::TensorPtr &x2, const mindspore::tensor::TensorPtr &gamma, const mindspore::tensor::TensorPtr &scale, const mindspore::tensor::TensorPtr &offset, const mindspore::FP32ImmPtr &epsilon);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT matmul_allreduce_add_rmsnorm(const mindspore::tensor::TensorPtr &x1, const mindspore::tensor::TensorPtr &x2, const mindspore::tensor::TensorPtr &bias, const mindspore::tensor::TensorPtr &residual, const mindspore::tensor::TensorPtr &gamma, const mindspore::FP32ImmPtr &epsilon, const mindspore::StringImmPtr &group, const mindspore::Int64ImmPtr &reduce_op, const mindspore::Int64ImmPtr &comm_turn, const mindspore::Int64ImmPtr &stream_mode);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT moe_init_routing_quant_v2(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &expert_idx, const mindspore::Int64ImmPtr &active_num, const mindspore::Int64ImmPtr &expert_capacity, const mindspore::Int64ImmPtr &expert_num, const mindspore::Int64ImmPtr &drop_pad_mode, const mindspore::Int64ImmPtr &expert_tokens_count_or_cumsum_flag, const mindspore::BoolImmPtr &expert_tokens_before_capacity_flag, const mindspore::Int64ImmPtr &quant_mode, const std::optional<mindspore::tensor::TensorPtr> &scale, const std::optional<mindspore::tensor::TensorPtr> &offset);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT moe_init_routing(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &row_idx, const mindspore::tensor::TensorPtr &expert_idx, const mindspore::Int64ImmPtr &active_num);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT moe_gating_top_k_softmax(const mindspore::tensor::TensorPtr &x, const std::optional<mindspore::tensor::TensorPtr> &finished, const mindspore::Int64ImmPtr &k);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT grouped_matmul_v4(const mindspore::ValueTuplePtr &x, const mindspore::ValueTuplePtr &weight, const std::optional<mindspore::ValueTuplePtr> &bias, const std::optional<mindspore::ValueTuplePtr> &scale, const std::optional<mindspore::ValueTuplePtr> &offset, const std::optional<mindspore::ValueTuplePtr> &antiquant_scale, const std::optional<mindspore::ValueTuplePtr> &antiquant_offset, const std::optional<mindspore::ValueTuplePtr> &pre_token_scale, const std::optional<mindspore::tensor::TensorPtr> &group_list, const std::optional<mindspore::ValueTuplePtr> &activation_input, const std::optional<mindspore::ValueTuplePtr> &activation_quant_scale, const std::optional<mindspore::ValueTuplePtr> &activation_quant_offset, const mindspore::Int64ImmPtr &split_item, const mindspore::Int64ImmPtr &group_type, const mindspore::Int64ImmPtr &group_list_type, const mindspore::Int64ImmPtr &act_type);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT grouped_matmul_v2(const mindspore::ValueTuplePtr &x, const mindspore::ValueTuplePtr &weight, const std::optional<mindspore::ValueTuplePtr> &bias, const std::optional<mindspore::ValueTuplePtr> &scale, const std::optional<mindspore::ValueTuplePtr> &offset, const std::optional<mindspore::ValueTuplePtr> &antiquant_scale, const std::optional<mindspore::ValueTuplePtr> &antiquant_offset, const std::optional<mindspore::ValueTuplePtr> &group_list, const mindspore::Int64ImmPtr &split_item, const mindspore::Int64ImmPtr &group_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT quant_v2(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &scale, const mindspore::tensor::TensorPtr &offset, const mindspore::BoolImmPtr &sqrt_mode, const mindspore::Int64ImmPtr &rounding_mode, const mindspore::Int64ImmPtr &dst_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT quant_matmul(const mindspore::tensor::TensorPtr &x1, const mindspore::tensor::TensorPtr &x2, const mindspore::tensor::TensorPtr &scale, const std::optional<mindspore::tensor::TensorPtr> &offset, const std::optional<mindspore::tensor::TensorPtr> &pertoken_scale, const std::optional<mindspore::tensor::TensorPtr> &bias, const std::optional<mindspore::Int64ImmPtr> &output_dtype, const std::optional<mindspore::Int64ImmPtr> &x1_dtype, const std::optional<mindspore::Int64ImmPtr> &x2_dtype, const std::optional<mindspore::Int64ImmPtr> &pertoken_scale_dtype, const std::optional<mindspore::Int64ImmPtr> &scale_dtype, const std::optional<mindspore::ValueTuplePtr> &group_sizes);
mindspore::tensor::TensorPtr BACKEND_EXPORT kv_cache_scatter_update(const mindspore::tensor::TensorPtr &var, const mindspore::tensor::TensorPtr &indices, const mindspore::tensor::TensorPtr &updates, const mindspore::Int64ImmPtr &axis, const mindspore::Int64ImmPtr &reduce);
mindspore::tensor::TensorPtr BACKEND_EXPORT weight_quant_batch_matmul(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &weight, const mindspore::tensor::TensorPtr &antiquant_scale, const std::optional<mindspore::tensor::TensorPtr> &antiquant_offset, const std::optional<mindspore::tensor::TensorPtr> &quant_scale, const std::optional<mindspore::tensor::TensorPtr> &quant_offset, const std::optional<mindspore::tensor::TensorPtr> &bias, const mindspore::BoolImmPtr &transpose_x, const mindspore::BoolImmPtr &transpose_weight, const mindspore::Int64ImmPtr &antiquant_group_size);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT dynamic_quant_ext(const mindspore::tensor::TensorPtr &x, const std::optional<mindspore::tensor::TensorPtr> &smooth_scales);
mindspore::tensor::TensorPtr BACKEND_EXPORT moe_compute_expert_tokens(const mindspore::tensor::TensorPtr &sorted_experts, const mindspore::Int64ImmPtr &num_expert);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT grouped_matmul(const mindspore::ValueTuplePtr &x, const mindspore::ValueTuplePtr &weight, const std::optional<mindspore::ValueTuplePtr> &bias, const std::optional<mindspore::ValueTuplePtr> &scale, const std::optional<mindspore::ValueTuplePtr> &offset, const std::optional<mindspore::ValueTuplePtr> &antiquant_scale, const std::optional<mindspore::ValueTuplePtr> &antiquant_offset, const std::optional<mindspore::tensor::TensorPtr> &group_list, const mindspore::Int64ImmPtr &split_item, const mindspore::Int64ImmPtr &group_type, const mindspore::BoolImmPtr &transpose_a, const mindspore::BoolImmPtr &transpose_b);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT moe_init_routing_v2(const mindspore::tensor::TensorPtr &x, const mindspore::tensor::TensorPtr &expert_idx, const mindspore::Int64ImmPtr &active_num, const mindspore::Int64ImmPtr &expert_capacity, const mindspore::Int64ImmPtr &expert_num, const mindspore::Int64ImmPtr &drop_pad_mode, const mindspore::Int64ImmPtr &expert_tokens_count_or_cumsum_flag, const mindspore::BoolImmPtr &expert_tokens_before_capacity_flag);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT gmm_v2_backward(const mindspore::ValueTuplePtr &grad, const mindspore::ValueTuplePtr &x, const mindspore::ValueTuplePtr &weight, const std::optional<mindspore::tensor::TensorPtr> &group_list, const mindspore::Int64ImmPtr &group_list_type);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT gmm_v2(const mindspore::ValueTuplePtr &x, const mindspore::ValueTuplePtr &weight, const std::optional<mindspore::ValueTuplePtr> &bias, const std::optional<mindspore::tensor::TensorPtr> &group_list, const mindspore::Int64ImmPtr &group_type, const mindspore::Int64ImmPtr &group_list_type);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT gmm_v2_backward_fusion(const mindspore::ValueTuplePtr &grad, const mindspore::ValueTuplePtr &weight, const std::optional<mindspore::tensor::TensorPtr> &group_list, const mindspore::Int64ImmPtr &group_list_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT pixel_shuffle(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &upscale_factor);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT gmm_backward_fusion(const mindspore::ValueTuplePtr &grad, const mindspore::ValueTuplePtr &weight, const std::optional<mindspore::ValueTuplePtr> &group_list, const mindspore::Int64ImmPtr &group_list_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT einsum_ext(const mindspore::StringImmPtr &equation, const mindspore::ValueTuplePtr &operands);
mindspore::tensor::TensorPtr BACKEND_EXPORT inplace_exponential(const mindspore::tensor::TensorPtr &input, const mindspore::ScalarPtr &lambd, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
std::tuple<mindspore::tensor::TensorPtr, mindspore::tensor::TensorPtr> BACKEND_EXPORT func_max_pool2d(const mindspore::tensor::TensorPtr &input, const mindspore::ValueTuplePtr &kernel_size, const std::optional<mindspore::ValueTuplePtr> &stride, const mindspore::ValueTuplePtr &padding, const mindspore::ValueTuplePtr &dilation, const mindspore::BoolImmPtr &ceil_mode, const mindspore::BoolImmPtr &return_indices);
mindspore::tensor::TensorPtr BACKEND_EXPORT moe_token_unpermute(const mindspore::tensor::TensorPtr &permuted_tokens, const mindspore::tensor::TensorPtr &sorted_indices, const std::optional<mindspore::tensor::TensorPtr> &probs, const mindspore::BoolImmPtr &padded_mode, const std::optional<mindspore::ValueTuplePtr> &restore_shape);
mindspore::tensor::TensorPtr BACKEND_EXPORT any(const mindspore::tensor::TensorPtr &input);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT gmm(const mindspore::ValueTuplePtr &x, const mindspore::ValueTuplePtr &weight, const std::optional<mindspore::ValueTuplePtr> &bias, const std::optional<mindspore::ValueTuplePtr> &group_list, const mindspore::Int64ImmPtr &group_type, const mindspore::Int64ImmPtr &group_list_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT func_dropout_ext(const mindspore::tensor::TensorPtr &input, const mindspore::FP32ImmPtr &p, const mindspore::BoolImmPtr &training, const mindspore::BoolImmPtr &inplace, const mindspore::tensor::TensorPtr &seed, const mindspore::tensor::TensorPtr &offset);
std::vector<mindspore::tensor::TensorPtr> BACKEND_EXPORT gmm_backward(const mindspore::ValueTuplePtr &grad, const mindspore::ValueTuplePtr &x, const mindspore::ValueTuplePtr &weight, const std::optional<mindspore::ValueTuplePtr> &group_list, const mindspore::Int64ImmPtr &group_list_type);
mindspore::tensor::TensorPtr BACKEND_EXPORT any_ext(const mindspore::tensor::TensorPtr &input, const mindspore::Int64ImmPtr &dim, const mindspore::BoolImmPtr &keepdim);
}  // namespace pyboost
}  // namespace kernel
}  // namespace mindspore

#endif  // MINDSPORE_MINDSPORE_OPS_KERNEL_FUNCTIONS_AUTO_GENERATE_FUNCTIONS_H_
