# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class StandardImageTextOverlayModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'overlay_color_type': 'ColorType',
        'block': 'StandardImageTextBlock',
    }

    attribute_map = {
        'overlay_color_type': 'overlayColorType',
        'block': 'block',
    }

    def __init__(self, overlay_color_type=None, block=None, _configuration=None):  # noqa: E501
        """StandardImageTextOverlayModule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._overlay_color_type = None
        self._block = None
        self.discriminator = None

        self.overlay_color_type = overlay_color_type
        if block is not None:
            self.block = block

    @property
    def overlay_color_type(self):
        """Gets the overlay_color_type of this StandardImageTextOverlayModule.  # noqa: E501


        :return: The overlay_color_type of this StandardImageTextOverlayModule.  # noqa: E501
        :rtype: ColorType
        """
        return self._overlay_color_type

    @overlay_color_type.setter
    def overlay_color_type(self, overlay_color_type):
        """Sets the overlay_color_type of this StandardImageTextOverlayModule.


        :param overlay_color_type: The overlay_color_type of this StandardImageTextOverlayModule.  # noqa: E501
        :type: ColorType
        """
        if self._configuration.client_side_validation and overlay_color_type is None:
            raise ValueError("Invalid value for `overlay_color_type`, must not be `None`")  # noqa: E501

        self._overlay_color_type = overlay_color_type

    @property
    def block(self):
        """Gets the block of this StandardImageTextOverlayModule.  # noqa: E501


        :return: The block of this StandardImageTextOverlayModule.  # noqa: E501
        :rtype: StandardImageTextBlock
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this StandardImageTextOverlayModule.


        :param block: The block of this StandardImageTextOverlayModule.  # noqa: E501
        :type: StandardImageTextBlock
        """

        self._block = block

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandardImageTextOverlayModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardImageTextOverlayModule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StandardImageTextOverlayModule):
            return True

        return self.to_dict() != other.to_dict()
