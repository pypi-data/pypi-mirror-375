# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PackingConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'box_packing_methods': 'List[BoxContentInformationSource]',
        'box_requirements': 'BoxRequirements',
        'shipping_requirements': 'List[ShippingRequirements]',
    }

    attribute_map = {
        'box_packing_methods': 'boxPackingMethods',
        'box_requirements': 'boxRequirements',
        'shipping_requirements': 'shippingRequirements',
    }

    def __init__(self, box_packing_methods=None, box_requirements=None, shipping_requirements=None, _configuration=None):  # noqa: E501
        """PackingConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._box_packing_methods = None
        self._box_requirements = None
        self._shipping_requirements = None
        self.discriminator = None

        if box_packing_methods is not None:
            self.box_packing_methods = box_packing_methods
        if box_requirements is not None:
            self.box_requirements = box_requirements
        if shipping_requirements is not None:
            self.shipping_requirements = shipping_requirements

    @property
    def box_packing_methods(self):
        """Gets the box_packing_methods of this PackingConfiguration.  # noqa: E501

        The box content information sources that are allowed.  # noqa: E501

        :return: The box_packing_methods of this PackingConfiguration.  # noqa: E501
        :rtype: List[BoxContentInformationSource]
        """
        return self._box_packing_methods

    @box_packing_methods.setter
    def box_packing_methods(self, box_packing_methods):
        """Sets the box_packing_methods of this PackingConfiguration.

        The box content information sources that are allowed.  # noqa: E501

        :param box_packing_methods: The box_packing_methods of this PackingConfiguration.  # noqa: E501
        :type: List[BoxContentInformationSource]
        """

        self._box_packing_methods = box_packing_methods

    @property
    def box_requirements(self):
        """Gets the box_requirements of this PackingConfiguration.  # noqa: E501


        :return: The box_requirements of this PackingConfiguration.  # noqa: E501
        :rtype: BoxRequirements
        """
        return self._box_requirements

    @box_requirements.setter
    def box_requirements(self, box_requirements):
        """Sets the box_requirements of this PackingConfiguration.


        :param box_requirements: The box_requirements of this PackingConfiguration.  # noqa: E501
        :type: BoxRequirements
        """

        self._box_requirements = box_requirements

    @property
    def shipping_requirements(self):
        """Gets the shipping_requirements of this PackingConfiguration.  # noqa: E501

        A list of supported shipping requirements for this packing configuration.  # noqa: E501

        :return: The shipping_requirements of this PackingConfiguration.  # noqa: E501
        :rtype: List[ShippingRequirements]
        """
        return self._shipping_requirements

    @shipping_requirements.setter
    def shipping_requirements(self, shipping_requirements):
        """Sets the shipping_requirements of this PackingConfiguration.

        A list of supported shipping requirements for this packing configuration.  # noqa: E501

        :param shipping_requirements: The shipping_requirements of this PackingConfiguration.  # noqa: E501
        :type: List[ShippingRequirements]
        """

        self._shipping_requirements = shipping_requirements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackingConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackingConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackingConfiguration):
            return True

        return self.to_dict() != other.to_dict()
