# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CarrierCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carrier_code_type': 'CarrierCodeType',
        'carrier_code_value': 'str',
    }

    attribute_map = {
        'carrier_code_type': 'carrierCodeType',
        'carrier_code_value': 'carrierCodeValue',
    }

    def __init__(self, carrier_code_type=None, carrier_code_value=None, _configuration=None):  # noqa: E501
        """CarrierCode - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._carrier_code_type = None
        self._carrier_code_value = None
        self.discriminator = None

        if carrier_code_type is not None:
            self.carrier_code_type = carrier_code_type
        if carrier_code_value is not None:
            self.carrier_code_value = carrier_code_value

    @property
    def carrier_code_type(self):
        """Gets the carrier_code_type of this CarrierCode.  # noqa: E501


        :return: The carrier_code_type of this CarrierCode.  # noqa: E501
        :rtype: CarrierCodeType
        """
        return self._carrier_code_type

    @carrier_code_type.setter
    def carrier_code_type(self, carrier_code_type):
        """Sets the carrier_code_type of this CarrierCode.


        :param carrier_code_type: The carrier_code_type of this CarrierCode.  # noqa: E501
        :type: CarrierCodeType
        """

        self._carrier_code_type = carrier_code_type

    @property
    def carrier_code_value(self):
        """Gets the carrier_code_value of this CarrierCode.  # noqa: E501

        Value of the carrier code.  # noqa: E501

        :return: The carrier_code_value of this CarrierCode.  # noqa: E501
        :rtype: str
        """
        return self._carrier_code_value

    @carrier_code_value.setter
    def carrier_code_value(self, carrier_code_value):
        """Sets the carrier_code_value of this CarrierCode.

        Value of the carrier code.  # noqa: E501

        :param carrier_code_value: The carrier_code_value of this CarrierCode.  # noqa: E501
        :type: str
        """

        self._carrier_code_value = carrier_code_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarrierCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarrierCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CarrierCode):
            return True

        return self.to_dict() != other.to_dict()
