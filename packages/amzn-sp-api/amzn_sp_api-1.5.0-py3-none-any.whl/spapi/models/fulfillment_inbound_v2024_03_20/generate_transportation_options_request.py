# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GenerateTransportationOptionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'placement_option_id': 'str',
        'shipment_transportation_configurations': 'List[ShipmentTransportationConfiguration]',
    }

    attribute_map = {
        'placement_option_id': 'placementOptionId',
        'shipment_transportation_configurations': 'shipmentTransportationConfigurations',
    }

    def __init__(self, placement_option_id=None, shipment_transportation_configurations=None, _configuration=None):  # noqa: E501
        """GenerateTransportationOptionsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._placement_option_id = None
        self._shipment_transportation_configurations = None
        self.discriminator = None

        self.placement_option_id = placement_option_id
        self.shipment_transportation_configurations = shipment_transportation_configurations

    @property
    def placement_option_id(self):
        """Gets the placement_option_id of this GenerateTransportationOptionsRequest.  # noqa: E501

        The placement option to generate transportation options for.  # noqa: E501

        :return: The placement_option_id of this GenerateTransportationOptionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._placement_option_id

    @placement_option_id.setter
    def placement_option_id(self, placement_option_id):
        """Sets the placement_option_id of this GenerateTransportationOptionsRequest.

        The placement option to generate transportation options for.  # noqa: E501

        :param placement_option_id: The placement_option_id of this GenerateTransportationOptionsRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and placement_option_id is None:
            raise ValueError("Invalid value for `placement_option_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                placement_option_id is not None and len(placement_option_id) > 38):
            raise ValueError("Invalid value for `placement_option_id`, length must be less than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                placement_option_id is not None and len(placement_option_id) < 38):
            raise ValueError("Invalid value for `placement_option_id`, length must be greater than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                placement_option_id is not None and not re.search(r'^[a-zA-Z0-9-]*$', placement_option_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `placement_option_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9-]*$/`")  # noqa: E501

        self._placement_option_id = placement_option_id

    @property
    def shipment_transportation_configurations(self):
        """Gets the shipment_transportation_configurations of this GenerateTransportationOptionsRequest.  # noqa: E501

        List of shipment transportation configurations.  # noqa: E501

        :return: The shipment_transportation_configurations of this GenerateTransportationOptionsRequest.  # noqa: E501
        :rtype: List[ShipmentTransportationConfiguration]
        """
        return self._shipment_transportation_configurations

    @shipment_transportation_configurations.setter
    def shipment_transportation_configurations(self, shipment_transportation_configurations):
        """Sets the shipment_transportation_configurations of this GenerateTransportationOptionsRequest.

        List of shipment transportation configurations.  # noqa: E501

        :param shipment_transportation_configurations: The shipment_transportation_configurations of this GenerateTransportationOptionsRequest.  # noqa: E501
        :type: List[ShipmentTransportationConfiguration]
        """
        if self._configuration.client_side_validation and shipment_transportation_configurations is None:
            raise ValueError("Invalid value for `shipment_transportation_configurations`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shipment_transportation_configurations is not None and len(shipment_transportation_configurations) < 1):
            raise ValueError("Invalid value for `shipment_transportation_configurations`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._shipment_transportation_configurations = shipment_transportation_configurations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerateTransportationOptionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateTransportationOptionsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateTransportationOptionsRequest):
            return True

        return self.to_dict() != other.to_dict()
