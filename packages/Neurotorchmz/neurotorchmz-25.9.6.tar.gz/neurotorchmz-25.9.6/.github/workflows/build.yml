name: Build package and upload to pip and GitHub

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      publish-pypi:
        description: 'Publish to PyPI/Release?'
        default: false
        type: boolean
      publish-pyinstaller:
        description: 'Publish pyinstaller builds?'
        default: true
        type: boolean
      publish-release:
        description: 'Upload to GitHub releases'
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install project dependencies
        run: |
          pip install .
          pip install build

      - name: Build project
        run: |
          python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/


  publish-to-pypi:
    name: Publish to PyPi
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.publish-pypi == 'true'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/neurotorchmz
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1


  determine-version:
    name: Determine version from wheel
    needs: build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Determine version from wheel
        id: get_version
        run: |
          WHEEL=$(ls dist/*.whl | head -n 1)
          VERSION=$(echo "$WHEEL" | sed -E 's/.*-([0-9]+(\.[0-9]+)*).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Determined version: $VERSION"


  pyinstaller:
    if: github.event.inputs.publish-pyinstaller != 'false'
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        arch: [x64, arm64]
        exclude:
        - os: windows-latest
          arch: arm64   # Python installation crashes
        - os: ubuntu-latest
          arch: arm64   # Python installation crashes
    runs-on: ${{ matrix.os }}
    needs: determine-version
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          architecture: ${{ matrix.arch }}

      - name: Install dependencies
        run: |
          pip install .
          pip install pyinstaller

      - name: Build Windows binary
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          pyinstaller --noconfirm --clean `
            --name neurotorchmz `
            --icon=docs/media/neurotorch_logo.ico `
            --add-data "neurotorchmz/resources;neurotorchmz/resources" `
            --add-data "neurotorchmz/plugins;neurotorchmz/plugins" `
            --hidden-import pyimagej `
            --hidden-import trace_selector `
            neurotorch.py
          $zipName = "dist/neurotorchmz-${{ matrix.os }}-${{ matrix.arch }}.zip"
          Compress-Archive -Path "dist/neurotorchmz/*" -DestinationPath $zipName -Force
          Write-Host "Windows ZIP created: $zipName"
          Remove-Item -Recurse -Force "dist/neurotorchmz"

      - name: Build MacOs binary
        if: runner.os == 'macOS'
        run: |  
          APP_NAME="neurotorchmz-${{ matrix.os }}-${{ matrix.arch }}"
          pyinstaller --noconfirm --clean \
            --name "$APP_NAME" \
            --windowed \
            --icon=docs/media/neurotorch_logo.icns \
            --add-data "neurotorchmz/resources:neurotorchmz/resources" \
            --add-data "neurotorchmz/plugins:neurotorchmz/plugins" \
            --hidden-import pyimagej \
            --hidden-import trace_selector \
            neurotorch.py
          zip -r "dist/$APP_NAME.zip" "dist/$APP_NAME.app"
          rm -rf "dist/$APP_NAME"
          rm -rf "dist/$APP_NAME.app"

      - name: Build Linux binary
        if: runner.os == 'Linux'
        run: |
          APP_NAME="neurotorchmz-${{ matrix.os }}-${{ matrix.arch }}"
          pyinstaller --noconfirm --clean \
            --name "$APP_NAME" \
            --add-data "neurotorchmz/resources:neurotorchmz/resources" \
            --add-data "neurotorchmz/plugins:neurotorchmz/plugins" \
            --hidden-import pyimagej \
            --hidden-import trace_selector \
            neurotorch.py
          zip -r "dist/$APP_NAME.zip" "dist/$APP_NAME"
          rm -rf "dist/$APP_NAME"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/


  release:
    name: Publish GitHub Release
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event.inputs.publish-release == 'true')
    needs: [build, pyinstaller, determine-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.determine-version.outputs.version }}
          name: Release v${{ needs.determine-version.outputs.version }}
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}