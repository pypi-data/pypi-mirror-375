# coding: utf-8

"""
    Selling Partner API for Replenishment

    The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.

    The version of the OpenAPI document: 2022-11-07
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Promotion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'selling_partner_funded_base_discount': 'DiscountFunding',
        'selling_partner_funded_tiered_discount': 'DiscountFunding',
        'amazon_funded_base_discount': 'DiscountFunding',
        'amazon_funded_tiered_discount': 'DiscountFunding',
    }

    attribute_map = {
        'selling_partner_funded_base_discount': 'sellingPartnerFundedBaseDiscount',
        'selling_partner_funded_tiered_discount': 'sellingPartnerFundedTieredDiscount',
        'amazon_funded_base_discount': 'amazonFundedBaseDiscount',
        'amazon_funded_tiered_discount': 'amazonFundedTieredDiscount',
    }

    def __init__(self, selling_partner_funded_base_discount=None, selling_partner_funded_tiered_discount=None, amazon_funded_base_discount=None, amazon_funded_tiered_discount=None, _configuration=None):  # noqa: E501
        """Promotion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._selling_partner_funded_base_discount = None
        self._selling_partner_funded_tiered_discount = None
        self._amazon_funded_base_discount = None
        self._amazon_funded_tiered_discount = None
        self.discriminator = None

        if selling_partner_funded_base_discount is not None:
            self.selling_partner_funded_base_discount = selling_partner_funded_base_discount
        if selling_partner_funded_tiered_discount is not None:
            self.selling_partner_funded_tiered_discount = selling_partner_funded_tiered_discount
        if amazon_funded_base_discount is not None:
            self.amazon_funded_base_discount = amazon_funded_base_discount
        if amazon_funded_tiered_discount is not None:
            self.amazon_funded_tiered_discount = amazon_funded_tiered_discount

    @property
    def selling_partner_funded_base_discount(self):
        """Gets the selling_partner_funded_base_discount of this Promotion.  # noqa: E501


        :return: The selling_partner_funded_base_discount of this Promotion.  # noqa: E501
        :rtype: DiscountFunding
        """
        return self._selling_partner_funded_base_discount

    @selling_partner_funded_base_discount.setter
    def selling_partner_funded_base_discount(self, selling_partner_funded_base_discount):
        """Sets the selling_partner_funded_base_discount of this Promotion.


        :param selling_partner_funded_base_discount: The selling_partner_funded_base_discount of this Promotion.  # noqa: E501
        :type: DiscountFunding
        """

        self._selling_partner_funded_base_discount = selling_partner_funded_base_discount

    @property
    def selling_partner_funded_tiered_discount(self):
        """Gets the selling_partner_funded_tiered_discount of this Promotion.  # noqa: E501


        :return: The selling_partner_funded_tiered_discount of this Promotion.  # noqa: E501
        :rtype: DiscountFunding
        """
        return self._selling_partner_funded_tiered_discount

    @selling_partner_funded_tiered_discount.setter
    def selling_partner_funded_tiered_discount(self, selling_partner_funded_tiered_discount):
        """Sets the selling_partner_funded_tiered_discount of this Promotion.


        :param selling_partner_funded_tiered_discount: The selling_partner_funded_tiered_discount of this Promotion.  # noqa: E501
        :type: DiscountFunding
        """

        self._selling_partner_funded_tiered_discount = selling_partner_funded_tiered_discount

    @property
    def amazon_funded_base_discount(self):
        """Gets the amazon_funded_base_discount of this Promotion.  # noqa: E501


        :return: The amazon_funded_base_discount of this Promotion.  # noqa: E501
        :rtype: DiscountFunding
        """
        return self._amazon_funded_base_discount

    @amazon_funded_base_discount.setter
    def amazon_funded_base_discount(self, amazon_funded_base_discount):
        """Sets the amazon_funded_base_discount of this Promotion.


        :param amazon_funded_base_discount: The amazon_funded_base_discount of this Promotion.  # noqa: E501
        :type: DiscountFunding
        """

        self._amazon_funded_base_discount = amazon_funded_base_discount

    @property
    def amazon_funded_tiered_discount(self):
        """Gets the amazon_funded_tiered_discount of this Promotion.  # noqa: E501


        :return: The amazon_funded_tiered_discount of this Promotion.  # noqa: E501
        :rtype: DiscountFunding
        """
        return self._amazon_funded_tiered_discount

    @amazon_funded_tiered_discount.setter
    def amazon_funded_tiered_discount(self, amazon_funded_tiered_discount):
        """Sets the amazon_funded_tiered_discount of this Promotion.


        :param amazon_funded_tiered_discount: The amazon_funded_tiered_discount of this Promotion.  # noqa: E501
        :type: DiscountFunding
        """

        self._amazon_funded_tiered_discount = amazon_funded_tiered_discount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Promotion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Promotion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Promotion):
            return True

        return self.to_dict() != other.to_dict()
