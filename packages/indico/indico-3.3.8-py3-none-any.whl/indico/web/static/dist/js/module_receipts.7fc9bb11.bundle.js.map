{"version":3,"file":"js/module_receipts.7fc9bb11.bundle.js","mappings":"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","sources":["webpack:///indico/modules/receipts/client/js/printing/print.jsx","webpack:///indico/modules/receipts/client/js/printing/PrintReceiptsModal.jsx","webpack:///indico/web/client/js/utils/browser.js","webpack:///indico/modules/receipts/client/js/index.js"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2025 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport printReceiptsURL from 'indico-url:receipts.generate_receipts';\n\nimport PropTypes from 'prop-types';\nimport React, {useState} from 'react';\nimport {Button, ButtonGroup, Icon, Label, Message, Modal, Table} from 'semantic-ui-react';\n\nimport {handleSubmitError} from 'indico/react/forms';\nimport {Translate} from 'indico/react/i18n';\nimport {injectModal} from 'indico/react/util';\nimport {indicoAxios} from 'indico/utils/axios';\nimport {camelizeKeys, snakifyKeys} from 'indico/utils/case';\n\n/**\n * This modal shows to the user any non-fatal templating errors which may have happened during\n * the templating process. The user may choose to download the result anyway (pre-downloaded by\n * the browser).\n */\nfunction PrintingErrorsModal({onRetry, onClose, errors}) {\n  const [open, setOpen] = useState(true);\n  return (\n    <Modal open={open} onClose={onClose} closeIcon>\n      <Modal.Header>\n        <Translate>Templating Errors</Translate>\n      </Modal.Header>\n      <Modal.Content>\n        <Message error>\n          <Translate>There were some errors while trying to generate your documents.</Translate>\n        </Message>\n        <Table celled fixed>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>\n                <Translate>Registrant's name</Translate>\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n                <Translate>Missing fields</Translate>\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {errors.map(({registration, undefineds}) => (\n              <Table.Row key={registration.id}>\n                <Table.Cell>{registration.fullName}</Table.Cell>\n                <Table.Cell>\n                  {undefineds.map(name => (\n                    <Label key={`${registration.id}-${name}`} color=\"red\">\n                      {name}\n                    </Label>\n                  ))}\n                </Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Modal.Content>\n      <Modal.Actions>\n        <ButtonGroup>\n          <Button\n            onClick={async () => {\n              await onRetry();\n              setOpen(false);\n              onClose();\n            }}\n            primary\n          >\n            <Icon name=\"sync\" />\n            <Translate>Generate anyway</Translate>\n          </Button>\n          <Button\n            onClick={() => {\n              setOpen(false);\n              onClose();\n            }}\n          >\n            <Translate>Cancel</Translate>\n          </Button>\n        </ButtonGroup>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n\nPrintingErrorsModal.propTypes = {\n  onRetry: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  errors: PropTypes.arrayOf(\n    PropTypes.shape({\n      registration: PropTypes.shape({\n        firstName: PropTypes.string,\n        lastName: PropTypes.string,\n      }),\n      undefineds: PropTypes.arrayOf(PropTypes.string),\n    })\n  ).isRequired,\n};\n\n/**\n * Handle the printing logic for a given template on a given event, based on previous user input.\n *\n * @param {number} eventId - Event ID\n * @param {Array.<String>} registrationIds - IDs of registrants to print\n * @param {Array.<Object>} values - custom field values to use in the template\n */\nexport async function printReceipt(eventId, registrationIds, values) {\n  const printReceiptsRequest = async (registrations, force) => {\n    const {template: templateId, ...data} = values;\n    data.registration_ids = registrations;\n    data.force = force;\n    const resp = await indicoAxios.post(printReceiptsURL(snakifyKeys({eventId, templateId})), data);\n    return resp.data;\n  };\n  try {\n    const data = await printReceiptsRequest(registrationIds, false);\n    let receiptIds = data.receipt_ids;\n    if (data.errors.length) {\n      await new Promise(resolve => {\n        injectModal(resolveModal => (\n          <PrintingErrorsModal\n            onRetry={async () => {\n              const retryData = await printReceiptsRequest(\n                [...new Set(data.errors.map(e => e.registration.id))],\n                true\n              );\n              receiptIds = [...receiptIds, ...retryData.receipt_ids];\n            }}\n            onClose={() => {\n              resolve();\n              resolveModal();\n            }}\n            errors={camelizeKeys(data.errors)}\n          />\n        ));\n      });\n    }\n    return {receiptIds, error: null};\n  } catch (error) {\n    return {receiptIds: null, error: handleSubmitError(error)};\n  }\n}\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2025 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport allTemplatesURL from 'indico-url:receipts.all_templates';\nimport eventImagesURL from 'indico-url:receipts.images';\nimport exportReceiptsURL from 'indico-url:receipts.receipts_export';\nimport previewReceiptsURL from 'indico-url:receipts.receipts_preview';\n\nimport PropTypes from 'prop-types';\nimport React, {useState} from 'react';\nimport {Field, FormSpy} from 'react-final-form';\nimport {Button, Dropdown, Form, Grid, Header, Icon, Message, Segment} from 'semantic-ui-react';\n\nimport {\n  formatters,\n  FinalCheckbox,\n  FinalDropdown,\n  FinalField,\n  FinalInput,\n  FinalSubmitButton,\n} from 'indico/react/forms';\nimport {FinalModalForm} from 'indico/react/forms/final-form';\nimport {useIndicoAxios} from 'indico/react/hooks';\nimport {Param, Plural, PluralTranslate, Singular, Translate} from 'indico/react/i18n';\nimport {handleAxiosError, indicoAxios} from 'indico/utils/axios';\nimport {downloadBlob} from 'indico/utils/browser';\nimport {snakifyKeys} from 'indico/utils/case';\n\nimport Previewer from '../templates/Previewer';\n\nimport {printReceipt} from './print';\nimport TemplateParameterEditor, {getDefaultFieldValue} from './TemplateParameterEditor';\n\nconst makeSubmitLabel = ({publish, notify_users: notifyUsers}, numRegistrants) => {\n  if (publish) {\n    return notifyUsers\n      ? PluralTranslate.string(\n          'Publish and send to registrant',\n          'Publish and send to registrants',\n          numRegistrants\n        )\n      : PluralTranslate.string(\n          'Save and publish to registration',\n          'Save and publish to registrations',\n          numRegistrants\n        );\n  }\n  return notifyUsers\n    ? PluralTranslate.string(\n        'Save and send to registrant',\n        'Save and send to registrants',\n        numRegistrants\n      )\n    : PluralTranslate.string('Save to registration', 'Save to registrations', numRegistrants);\n};\n\nconst downloadOptions = [\n  {\n    key: 'pdf',\n    value: 'pdf',\n    text: Translate.string('as a single PDF document'),\n  },\n  {\n    key: 'zip',\n    value: 'zip',\n    text: Translate.string('as a ZIP archive'),\n  },\n];\n\nconst archiveFilename = {\n  pdf: 'documents.pdf',\n  zip: 'documents.zip',\n};\n\n/**\n * This modal presents the user with a structured interface to download, e-mail or publish\n * receipts based on information from specific event registrations.\n */\nexport default function PrintReceiptsModal({onClose, registrationIds, eventId}) {\n  const [receiptIds, setReceiptIds] = useState([]);\n  const [downloading, setDownloading] = useState(false);\n\n  const {data: templateList, loading} = useIndicoAxios(allTemplatesURL({event_id: eventId}), {\n    trigger: eventId,\n    camelize: true,\n    skipCamelize: 'placeholders',\n  });\n  const ready = !loading && !!templateList;\n\n  const makeUpdateTemplateFields = form => templateId => {\n    const {customFields, defaultFilename, title} = templateList.find(t => t.id === templateId);\n    form.change(\n      'custom_fields',\n      customFields\n        ? Object.assign({}, ...customFields.map(f => ({[f.name]: getDefaultFieldValue(f)})))\n        : {}\n    );\n    form.change('filename', defaultFilename || formatters.slugify(title));\n  };\n\n  const downloadReceipts = async format => {\n    setDownloading(true);\n    try {\n      const {data: downloadedData} = await indicoAxios.post(\n        exportReceiptsURL(snakifyKeys({eventId, format})),\n        snakifyKeys({receiptIds}),\n        {responseType: 'blob'}\n      );\n      downloadBlob(archiveFilename[format], downloadedData);\n    } catch (error) {\n      handleAxiosError(error);\n    }\n    setDownloading(false);\n  };\n\n  const getCustomFields = templateId =>\n    ready && templateList.find(tpl => tpl.id === templateId)?.customFields;\n\n  return (\n    <FinalModalForm\n      id=\"print-receipts\"\n      size=\"large\"\n      onSubmit={async values => {\n        const {receiptIds: printedReceiptIds, error} = await printReceipt(\n          eventId,\n          registrationIds,\n          values\n        );\n        if (error) {\n          return error;\n        } else if (printedReceiptIds.length > 0) {\n          setReceiptIds(printedReceiptIds);\n        }\n      }}\n      initialValues={{\n        custom_fields: {},\n        document_type: 'none',\n        filename: 'document',\n        save_config: true,\n      }}\n      onClose={() => onClose(receiptIds.length > 0)}\n      header={Translate.string('Generate Documents')}\n      keepDirtyOnReinitialize\n      noSubmitButton\n      disabledAfterSubmit\n    >\n      {fprops => (\n        <>\n          <Message color={receiptIds.length === 0 ? 'teal' : 'green'}>\n            <Icon name=\"print\" size=\"big\" />\n            {receiptIds.length === 0 ? (\n              <PluralTranslate count={registrationIds.length}>\n                <Singular>Generating document for a single registrant</Singular>\n                <Plural>\n                  Generating documents for{' '}\n                  <Param\n                    name=\"numberOfRegistrants\"\n                    value={registrationIds.length}\n                    wrapper={<strong />}\n                  />{' '}\n                  registrants\n                </Plural>\n              </PluralTranslate>\n            ) : (\n              <PluralTranslate count={receiptIds.length}>\n                <Singular>Successfully generated document for a single registrant</Singular>\n                <Plural>\n                  Successfully generated{' '}\n                  <Param name=\"numberOfReceipts\" value={receiptIds.length} wrapper={<strong />} />{' '}\n                  documents\n                </Plural>\n              </PluralTranslate>\n            )}\n          </Message>\n          <Grid columns={2} divided>\n            <Grid.Column>\n              <FinalDropdown\n                name=\"template\"\n                loading={!ready}\n                label={Translate.string('Document Template')}\n                placeholder={Translate.string('Select a document template')}\n                options={\n                  ready\n                    ? templateList.map(({id, title}) => ({key: id, text: title, value: id}))\n                    : []\n                }\n                onChange={makeUpdateTemplateFields(fprops.form)}\n                disabled={receiptIds.length > 0}\n                required\n                selection\n              />\n              <Field name=\"template\" subscription={{value: true}}>\n                {({input: {value: template}}) => (\n                  <FinalField\n                    name=\"custom_fields\"\n                    component={TemplateParameterEditor}\n                    customFields={template ? getCustomFields(template) : []}\n                    title={Translate.string('Template Parameters')}\n                    disabled={receiptIds.length > 0}\n                    fetchImagesURL={eventImagesURL({event_id: eventId})}\n                    defaultOpen\n                  />\n                )}\n              </Field>\n              <Field name=\"template\" subscription={{value: true}}>\n                {({input: {value: template}}) => (\n                  <FinalInput\n                    name=\"filename\"\n                    label={Translate.string('Filename')}\n                    type=\"text\"\n                    componentLabel=\"-{n}.pdf\"\n                    labelPosition=\"right\"\n                    disabled={!template || receiptIds.length > 0}\n                    format={v => formatters.slugify(v).replace(/\\.pdf$/, '')}\n                    formatOnBlur\n                    required\n                    fluid\n                  />\n                )}\n              </Field>\n              <FinalCheckbox\n                name=\"save_config\"\n                label={Translate.string('Remember settings')}\n                description={Translate.string(\n                  'Prefill template parameters (if present) and filename when generating more ' +\n                    'documents for the same template in this event.'\n                )}\n                disabled={receiptIds.length > 0}\n              />\n              <FinalCheckbox\n                name=\"publish\"\n                label={Translate.string('Publish document')}\n                description={PluralTranslate.string(\n                  'Make the resulting document available on the registration page.',\n                  'Make the resulting documents available on the registration pages.',\n                  registrationIds.length\n                )}\n                disabled={receiptIds.length > 0}\n              />\n              <Field name=\"publish\" subscription={{value: true}}>\n                {({input: {value: publish}}) => (\n                  <FinalCheckbox\n                    name=\"notify_users\"\n                    label={PluralTranslate.string(\n                      'Notify registrants via e-mail',\n                      'Notify registrants via e-mail',\n                      registrationIds.length\n                    )}\n                    description={\n                      publish\n                        ? PluralTranslate.string(\n                            'Send an e-mail to the registrant informing them that the document is available.',\n                            'Send an e-mail to the registrants informing them that the document is available.',\n                            registrationIds.length\n                          )\n                        : PluralTranslate.string(\n                            'Send an e-mail to the registrant with the document attached.',\n                            'Send an e-mail to the registrants with the document attached.',\n                            registrationIds.length\n                          )\n                    }\n                    disabled={receiptIds.length > 0}\n                  />\n                )}\n              </Field>\n              <Form.Group style={{alignItems: 'center'}}>\n                <FormSpy subscription={{values: true}}>\n                  {({values}) => (\n                    <FinalSubmitButton\n                      label={makeSubmitLabel(values, registrationIds.length)}\n                      icon={values.notify_users ? 'send' : 'save'}\n                      style={{width: '100%'}}\n                      disabledAfterSubmit\n                      fluid\n                    />\n                  )}\n                </FormSpy>\n                {receiptIds.length > 0 && (\n                  <>\n                    <Icon name=\"check\" color=\"green\" size=\"large\" />\n                    <Dropdown\n                      options={downloadOptions}\n                      scrolling\n                      icon={null}\n                      value={null}\n                      selectOnBlur={false}\n                      selectOnNavigation={false}\n                      onChange={(_, {value}) => downloadReceipts(value)}\n                      trigger={\n                        <Button\n                          icon\n                          style={{whiteSpace: 'nowrap', marginLeft: '1em'}}\n                          type=\"button\"\n                          loading={downloading}\n                        >\n                          <Icon name=\"download\" /> <Translate>Download</Translate>{' '}\n                          <Icon name=\"caret down\" />\n                        </Button>\n                      }\n                    />\n                  </>\n                )}\n              </Form.Group>\n            </Grid.Column>\n            <Grid.Column>\n              <Field name=\"template\" subscription={{value: true}}>\n                {({input: {value: templateId}}) => (\n                  <Field name=\"custom_fields\" subscription={{value: true}}>\n                    {({input: {value: customFields}}) =>\n                      templateId ? (\n                        <Previewer\n                          url={previewReceiptsURL(snakifyKeys({eventId, templateId}))}\n                          data={snakifyKeys({customFields, registrationIds})}\n                        />\n                      ) : (\n                        <Segment placeholder>\n                          <Header icon>\n                            <Icon name=\"eye\" />\n                            <Translate>Please select a template to preview it...</Translate>\n                          </Header>\n                        </Segment>\n                      )\n                    }\n                  </Field>\n                )}\n              </Field>\n            </Grid.Column>\n          </Grid>\n        </>\n      )}\n    </FinalModalForm>\n  );\n}\n\nPrintReceiptsModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  registrationIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n  eventId: PropTypes.number.isRequired,\n};\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2025 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\n/**\n * Download data generated locally or retrieved through AJAX as a file.\n *\n * @param {String} fileName\n * @param {String} data - Raw data obtained from the server\n */\nexport function downloadBlob(fileName, data) {\n  const blob = new Blob([data]);\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.href = url;\n  link.download = fileName;\n  document.body.append(link);\n  link.click();\n  link.remove();\n  URL.revokeObjectURL(url);\n}\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2025 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport React from 'react';\n\nimport {injectModal} from 'indico/react/util';\n\nimport PrintReceiptsModal from './printing/PrintReceiptsModal';\n\nwindow.printReceipts = function({\n  registration_id: registrationIds,\n  event_id: eventId,\n  reload_after: reloadAfter,\n}) {\n  injectModal(resolve => (\n    <PrintReceiptsModal\n      onClose={generated => {\n        if (generated && reloadAfter) {\n          location.reload();\n        } else {\n          resolve();\n        }\n      }}\n      registrationIds={registrationIds}\n      eventId={eventId}\n    />\n  ));\n};\n"],"names":["printReceiptsURL","_buildFlaskURL","bind","endpoint","rules","args","converters","event_id","template_id","defaults","trace","data","isDynamic","PrintingErrorsModal","onRetry","onClose","errors","open","setOpen","useState","React","Modal","closeIcon","Header","Translate","Content","Message","error","Table","celled","fixed","Row","HeaderCell","Body","map","registration","undefineds","key","id","Cell","fullName","name","Label","color","Actions","ButtonGroup","Button","onClick","async","primary","Icon","propTypes","PropTypes","isRequired","firstName","lastName","allTemplatesURL","eventImagesURL","exportReceiptsURL","format","previewReceiptsURL","makeSubmitLabel","publish","notify_users","notifyUsers","numRegistrants","PluralTranslate","string","downloadOptions","value","text","archiveFilename","pdf","zip","PrintReceiptsModal","registrationIds","eventId","receiptIds","setReceiptIds","downloading","setDownloading","templateList","loading","useIndicoAxios","trigger","camelize","skipCamelize","ready","downloadReceipts","downloadedData","indicoAxios","post","snakifyKeys","responseType","fileName","blob","Blob","link","document","createElement","url","URL","createObjectURL","href","download","body","append","click","remove","revokeObjectURL","downloadBlob","handleAxiosError","FinalModalForm","size","onSubmit","printedReceiptIds","values","printReceiptsRequest","registrations","force","template","templateId","registration_ids","receipt_ids","length","Promise","resolve","injectModal","resolveModal","retryData","Set","e","camelizeKeys","handleSubmitError","printReceipt","initialValues","custom_fields","document_type","filename","save_config","header","keepDirtyOnReinitialize","noSubmitButton","disabledAfterSubmit","fprops","count","Singular","Plural","Param","wrapper","Grid","columns","divided","Column","FinalDropdown","label","placeholder","options","title","onChange","form","customFields","defaultFilename","find","t","change","Object","assign","f","getDefaultFieldValue","formatters","slugify","disabled","required","selection","Field","subscription","input","FinalField","component","TemplateParameterEditor","tpl","fetchImagesURL","defaultOpen","FinalInput","type","componentLabel","labelPosition","v","replace","formatOnBlur","fluid","FinalCheckbox","description","Form","Group","style","alignItems","FormSpy","FinalSubmitButton","icon","width","Dropdown","scrolling","selectOnBlur","selectOnNavigation","_","whiteSpace","marginLeft","Previewer","Segment","window","printReceipts","registration_id","reload_after","reloadAfter","generated","location","reload"],"sourceRoot":""}