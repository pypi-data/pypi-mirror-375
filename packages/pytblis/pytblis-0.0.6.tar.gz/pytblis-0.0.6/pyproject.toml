[build-system]
requires = ["nanobind", "scikit-build-core>=0.11"]
build-backend = "scikit_build_core.build"


[project]
name = "pytblis"
authors = [
  { name = "Christopher Hillenbrand", email = "chillenbrand15@gmail.com" },
]
description = "Python bindings for TBLIS, a high performance library for tensor operations"
readme = "README.md"
license = "BSD-3-Clause"
license-files = ["LICENSE"]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = ["numpy"]

[project.urls]
Homepage = "https://github.com/chillenb/pytblis"
"Bug Tracker" = "https://github.com/chillenb/pytblis/issues"
Discussions = "https://github.com/chillenb/pytblis/discussions"
Changelog = "https://github.com/chillenb/pytblis/releases"
Documentation = "https://pytblis.readthedocs.io"

[project.optional-dependencies]
tests = [
  "pytest >=6",
  "pytest-cov >=3",
]

[dependency-groups]
tests = [
  "pytest >=6",
  "pytest-cov >=3",
]
docs = [
  "sphinx>=7.0",
  "numpy",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "numpydoc",
  "intersphinx_registry",
  "pydata-sphinx-theme",
  "pygments",
]


[tool.scikit-build]
minimum-version = "build-system.requires"
build-dir = "build/{wheel_tag}"
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/_version.py"]
build.verbose = true

[tool.scikit-build.cmake.define]
BLIS_THREAD_MODEL = {env="BLIS_THREAD_MODEL", default="openmp"}
ENABLE_THREAD_MODEL = {env="ENABLE_THREAD_MODEL", default="openmp"}
ENABLE_HWLOC = {env="ENABLE_HWLOC", default="ON"}

[tool.setuptools_scm]
write_to = "src/_version.py"


[tool.cibuildwheel]
test-command = "pytest {project}/tests"
test-extras = ["tests"]

[tool.cibuildwheel.macos.environment]
MACOSX_DEPLOYMENT_TARGET = "12.0"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.ruff]
line-length = 120

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "EM101",    # string literals in exceptions
  "UP007",    # don't use pipe in type annotation yet
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]
