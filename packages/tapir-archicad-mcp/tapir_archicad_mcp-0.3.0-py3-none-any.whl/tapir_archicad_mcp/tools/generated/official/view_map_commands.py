# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch

from multiconn_archicad.models.official.commands import (
    CloneProjectMapItemToViewMapParameters,
CloneProjectMapItemToViewMapResult,
CreateViewMapFolderParameters,
CreateViewMapFolderResult
)


log = logging.getLogger()

def clone_project_map_item_to_view_map(port: int, params: CloneProjectMapItemToViewMapParameters) -> CloneProjectMapItemToViewMapResult:
    """
    Clones a project map item to the view map.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.CloneProjectMapItemToViewMap",
            parameters=params.model_dump(mode='json')
        )
        return CloneProjectMapItemToViewMapResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CloneProjectMapItemToViewMap result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CloneProjectMapItemToViewMap on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    clone_project_map_item_to_view_map,
    name="view_clone_project_map_item_to_view_map",
    title="CloneProjectMapItemToViewMap",
    description="Clones a project map item to the view map.",
    params_model=CloneProjectMapItemToViewMapParameters,
    result_model=CloneProjectMapItemToViewMapResult
)


def create_view_map_folder(port: int, params: CreateViewMapFolderParameters) -> CreateViewMapFolderResult:
    """
    Creates a view folder item at the given position in the navigator tree.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.CreateViewMapFolder",
            parameters=params.model_dump(mode='json')
        )
        return CreateViewMapFolderResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreateViewMapFolder result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreateViewMapFolder on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    create_view_map_folder,
    name="view_create_view_map_folder",
    title="CreateViewMapFolder",
    description="Creates a view folder item at the given position in the navigator tree.",
    params_model=CreateViewMapFolderParameters,
    result_model=CreateViewMapFolderResult
)
