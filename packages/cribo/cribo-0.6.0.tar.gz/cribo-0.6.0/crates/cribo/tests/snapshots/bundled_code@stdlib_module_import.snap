---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_module_import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
helper = _cribo.types.SimpleNamespace(__name__='helper')
"""Helper module that imports stdlib modules at module level."""
def process():
    """Use the imported modules."""

    class MyBase(_cribo.abc.ABC):
        pass

    def typed_func(x: _cribo.typing.Optional[int]) -> _cribo.typing.List[str]:
        return []

    class Color(_cribo.enum.Enum):
        RED = 1
        GREEN = 2
    lock = _cribo.threading.Lock()
    print("All modules used successfully")
    return True
helper.process = process
"""Test case for stdlib module-level imports being incorrectly transformed."""
helper.process()
