# coding: utf-8

"""
    Selling Partner API for Notifications

    The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class EventFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregation_settings': 'AggregationSettings',
        'marketplace_ids': 'List[str]',
        'order_change_types': 'List[OrderChangeTypeEnum]',
        'event_filter_type': 'str',
    }

    attribute_map = {
        'aggregation_settings': 'aggregationSettings',
        'marketplace_ids': 'marketplaceIds',
        'order_change_types': 'orderChangeTypes',
        'event_filter_type': 'eventFilterType',
    }

    def __init__(self, aggregation_settings=None, marketplace_ids=None, order_change_types=None, event_filter_type=None, _configuration=None):  # noqa: E501
        """EventFilter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._aggregation_settings = None
        self._marketplace_ids = None
        self._order_change_types = None
        self._event_filter_type = None
        self.discriminator = None

        if aggregation_settings is not None:
            self.aggregation_settings = aggregation_settings
        if marketplace_ids is not None:
            self.marketplace_ids = marketplace_ids
        if order_change_types is not None:
            self.order_change_types = order_change_types
        self.event_filter_type = event_filter_type

    @property
    def aggregation_settings(self):
        """Gets the aggregation_settings of this EventFilter.  # noqa: E501


        :return: The aggregation_settings of this EventFilter.  # noqa: E501
        :rtype: AggregationSettings
        """
        return self._aggregation_settings

    @aggregation_settings.setter
    def aggregation_settings(self, aggregation_settings):
        """Sets the aggregation_settings of this EventFilter.


        :param aggregation_settings: The aggregation_settings of this EventFilter.  # noqa: E501
        :type: AggregationSettings
        """

        self._aggregation_settings = aggregation_settings

    @property
    def marketplace_ids(self):
        """Gets the marketplace_ids of this EventFilter.  # noqa: E501

        A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.  # noqa: E501

        :return: The marketplace_ids of this EventFilter.  # noqa: E501
        :rtype: List[str]
        """
        return self._marketplace_ids

    @marketplace_ids.setter
    def marketplace_ids(self, marketplace_ids):
        """Sets the marketplace_ids of this EventFilter.

        A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.  # noqa: E501

        :param marketplace_ids: The marketplace_ids of this EventFilter.  # noqa: E501
        :type: List[str]
        """

        self._marketplace_ids = marketplace_ids

    @property
    def order_change_types(self):
        """Gets the order_change_types of this EventFilter.  # noqa: E501

        A list of order change types to subscribe to (for example: `BuyerRequestedChange`). To receive notifications of all change types, do not provide this list.  # noqa: E501

        :return: The order_change_types of this EventFilter.  # noqa: E501
        :rtype: List[OrderChangeTypeEnum]
        """
        return self._order_change_types

    @order_change_types.setter
    def order_change_types(self, order_change_types):
        """Sets the order_change_types of this EventFilter.

        A list of order change types to subscribe to (for example: `BuyerRequestedChange`). To receive notifications of all change types, do not provide this list.  # noqa: E501

        :param order_change_types: The order_change_types of this EventFilter.  # noqa: E501
        :type: List[OrderChangeTypeEnum]
        """

        self._order_change_types = order_change_types

    @property
    def event_filter_type(self):
        """Gets the event_filter_type of this EventFilter.  # noqa: E501

        An `eventFilterType` value that is supported by the specific `notificationType`. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an `eventFilterType` is supported.  # noqa: E501

        :return: The event_filter_type of this EventFilter.  # noqa: E501
        :rtype: str
        """
        return self._event_filter_type

    @event_filter_type.setter
    def event_filter_type(self, event_filter_type):
        """Sets the event_filter_type of this EventFilter.

        An `eventFilterType` value that is supported by the specific `notificationType`. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an `eventFilterType` is supported.  # noqa: E501

        :param event_filter_type: The event_filter_type of this EventFilter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and event_filter_type is None:
            raise ValueError("Invalid value for `event_filter_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ANY_OFFER_CHANGED", "ORDER_CHANGE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                event_filter_type not in allowed_values):
            raise ValueError(
                "Invalid value for `event_filter_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_filter_type, allowed_values)
            )

        self._event_filter_type = event_filter_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventFilter):
            return True

        return self.to_dict() != other.to_dict()
