# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloBroadcastInDimOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloBroadcastInDimOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloBroadcastInDimOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloBroadcastInDimOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # StablehloBroadcastInDimOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloBroadcastInDimOptions
    def BroadcastDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloBroadcastInDimOptions
    def BroadcastDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloBroadcastInDimOptions
    def BroadcastDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloBroadcastInDimOptions
    def BroadcastDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def StablehloBroadcastInDimOptionsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddBroadcastDimensions(builder, broadcastDimensions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(broadcastDimensions), 0)
def StablehloBroadcastInDimOptionsAddBroadcastDimensions(builder, broadcastDimensions):
    """This method is deprecated. Please switch to AddBroadcastDimensions."""
    return AddBroadcastDimensions(builder, broadcastDimensions)
def StartBroadcastDimensionsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StablehloBroadcastInDimOptionsStartBroadcastDimensionsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartBroadcastDimensionsVector(builder, numElems)
def End(builder): return builder.EndObject()
def StablehloBroadcastInDimOptionsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
try:
    from typing import List
except:
    pass

class StablehloBroadcastInDimOptionsT(object):

    # StablehloBroadcastInDimOptionsT
    def __init__(self):
        self.broadcastDimensions = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloBroadcastInDimOptions = StablehloBroadcastInDimOptions()
        stablehloBroadcastInDimOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloBroadcastInDimOptions)

    @classmethod
    def InitFromObj(cls, stablehloBroadcastInDimOptions):
        x = StablehloBroadcastInDimOptionsT()
        x._UnPack(stablehloBroadcastInDimOptions)
        return x

    # StablehloBroadcastInDimOptionsT
    def _UnPack(self, stablehloBroadcastInDimOptions):
        if stablehloBroadcastInDimOptions is None:
            return
        if not stablehloBroadcastInDimOptions.BroadcastDimensionsIsNone():
            if np is None:
                self.broadcastDimensions = []
                for i in range(stablehloBroadcastInDimOptions.BroadcastDimensionsLength()):
                    self.broadcastDimensions.append(stablehloBroadcastInDimOptions.BroadcastDimensions(i))
            else:
                self.broadcastDimensions = stablehloBroadcastInDimOptions.BroadcastDimensionsAsNumpy()

    # StablehloBroadcastInDimOptionsT
    def Pack(self, builder):
        if self.broadcastDimensions is not None:
            if np is not None and type(self.broadcastDimensions) is np.ndarray:
                broadcastDimensions = builder.CreateNumpyVector(self.broadcastDimensions)
            else:
                StartBroadcastDimensionsVector(builder, len(self.broadcastDimensions))
                for i in reversed(range(len(self.broadcastDimensions))):
                    builder.PrependInt64(self.broadcastDimensions[i])
                broadcastDimensions = builder.EndVector()
        Start(builder)
        if self.broadcastDimensions is not None:
            AddBroadcastDimensions(builder, broadcastDimensions)
        stablehloBroadcastInDimOptions = End(builder)
        return stablehloBroadcastInDimOptions
