# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FixedSlot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date_time': 'datetime',
        'scheduled_capacity': 'int',
        'available_capacity': 'int',
        'encumbered_capacity': 'int',
        'reserved_capacity': 'int',
    }

    attribute_map = {
        'start_date_time': 'startDateTime',
        'scheduled_capacity': 'scheduledCapacity',
        'available_capacity': 'availableCapacity',
        'encumbered_capacity': 'encumberedCapacity',
        'reserved_capacity': 'reservedCapacity',
    }

    def __init__(self, start_date_time=None, scheduled_capacity=None, available_capacity=None, encumbered_capacity=None, reserved_capacity=None, _configuration=None):  # noqa: E501
        """FixedSlot - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start_date_time = None
        self._scheduled_capacity = None
        self._available_capacity = None
        self._encumbered_capacity = None
        self._reserved_capacity = None
        self.discriminator = None

        if start_date_time is not None:
            self.start_date_time = start_date_time
        if scheduled_capacity is not None:
            self.scheduled_capacity = scheduled_capacity
        if available_capacity is not None:
            self.available_capacity = available_capacity
        if encumbered_capacity is not None:
            self.encumbered_capacity = encumbered_capacity
        if reserved_capacity is not None:
            self.reserved_capacity = reserved_capacity

    @property
    def start_date_time(self):
        """Gets the start_date_time of this FixedSlot.  # noqa: E501

        Start date time of slot in ISO 8601 format with precision of seconds.  # noqa: E501

        :return: The start_date_time of this FixedSlot.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this FixedSlot.

        Start date time of slot in ISO 8601 format with precision of seconds.  # noqa: E501

        :param start_date_time: The start_date_time of this FixedSlot.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def scheduled_capacity(self):
        """Gets the scheduled_capacity of this FixedSlot.  # noqa: E501

        Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.  # noqa: E501

        :return: The scheduled_capacity of this FixedSlot.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_capacity

    @scheduled_capacity.setter
    def scheduled_capacity(self, scheduled_capacity):
        """Sets the scheduled_capacity of this FixedSlot.

        Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.  # noqa: E501

        :param scheduled_capacity: The scheduled_capacity of this FixedSlot.  # noqa: E501
        :type: int
        """

        self._scheduled_capacity = scheduled_capacity

    @property
    def available_capacity(self):
        """Gets the available_capacity of this FixedSlot.  # noqa: E501

        Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.  # noqa: E501

        :return: The available_capacity of this FixedSlot.  # noqa: E501
        :rtype: int
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity):
        """Sets the available_capacity of this FixedSlot.

        Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.  # noqa: E501

        :param available_capacity: The available_capacity of this FixedSlot.  # noqa: E501
        :type: int
        """

        self._available_capacity = available_capacity

    @property
    def encumbered_capacity(self):
        """Gets the encumbered_capacity of this FixedSlot.  # noqa: E501

        Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.  # noqa: E501

        :return: The encumbered_capacity of this FixedSlot.  # noqa: E501
        :rtype: int
        """
        return self._encumbered_capacity

    @encumbered_capacity.setter
    def encumbered_capacity(self, encumbered_capacity):
        """Sets the encumbered_capacity of this FixedSlot.

        Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.  # noqa: E501

        :param encumbered_capacity: The encumbered_capacity of this FixedSlot.  # noqa: E501
        :type: int
        """

        self._encumbered_capacity = encumbered_capacity

    @property
    def reserved_capacity(self):
        """Gets the reserved_capacity of this FixedSlot.  # noqa: E501

        Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.  # noqa: E501

        :return: The reserved_capacity of this FixedSlot.  # noqa: E501
        :rtype: int
        """
        return self._reserved_capacity

    @reserved_capacity.setter
    def reserved_capacity(self, reserved_capacity):
        """Sets the reserved_capacity of this FixedSlot.

        Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.  # noqa: E501

        :param reserved_capacity: The reserved_capacity of this FixedSlot.  # noqa: E501
        :type: int
        """

        self._reserved_capacity = reserved_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FixedSlot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FixedSlot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FixedSlot):
            return True

        return self.to_dict() != other.to_dict()
