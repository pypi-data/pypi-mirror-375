def SimpleImputeTransform(data=None, object=None, **generic_arguments):
    """
    DESCRIPTION:
        SimpleImputeTransform() function substitutes specified values for missing values
        in the input data. The specified values is generated by SimpleImputeFit() function
        output.


    PARAMETERS:
        data:
            Required Argument.
            Specifies the input teradataml DataFrame.
            Types: teradataml DataFrame

        object:
            Required Argument.
            Specifies the teradataml DataFrame containing the output of SimpleImputeFit() function
            or the instance of SimpleImputeFit.
            Types: teradataml DataFrame or SimpleImputeFit

        **generic_arguments:
            Specifies the generic keyword arguments SQLE functions accept.
            Below are the generic keyword arguments:
                persist:
                    Optional Argument.
                    Specifies whether to persist the results of the function in a table or not.
                    When set to True, results are persisted in a table; otherwise, results
                    are garbage collected at the end of the session.
                    Default Value: False
                    Types: boolean

                volatile:
                    Optional Argument.
                    Specifies whether to put the results of the function in a volatile table or not.
                    When set to True, results are stored in a volatile table, otherwise not.
                    Default Value: False
                    Types: boolean

            Function allows the user to partition, hash, order or local order the input
            data. These generic arguments are available for each argument that accepts
            teradataml DataFrame as input and can be accessed as:
                * "<input_data_arg_name>_partition_column" accepts str or list of str (Strings)
                * "<input_data_arg_name>_hash_column" accepts str or list of str (Strings)
                * "<input_data_arg_name>_order_column" accepts str or list of str (Strings)
                * "local_order_<input_data_arg_name>" accepts boolean
            Note:
                These generic arguments are supported by teradataml if the underlying SQL Engine
                function supports, else an exception is raised.


    RETURNS:
        Instance of SimpleImputeTransform.
        Output teradataml DataFrames can be accessed using attribute
        references, such as SimpleImputeTransformObj.<attribute_name>.
        Output teradataml DataFrame attribute name is:
            result


    RAISES:
        TeradataMlException, TypeError, ValueError


    EXAMPLES:
        # Notes:
        #     1. Get the connection to Vantage to execute the function.
        #     2. One must import the required functions mentioned in
        #        the example from teradataml.
        #     3. Function will raise error if not supported on the Vantage
        #        user is connected to.

        # Load the example data.
        load_example_data("teradataml", ["titanic"])

        # Create teradataml DataFrame.
        titanic = DataFrame.from_table("titanic")

        # Check the list of available analytic functions.
        display_analytic_functions()

        # Example 1: Fill missing values of "age" column with median value and
        #            impute value "General" on "cabin" column.
        fit_obj = SimpleImputeFit(data=titanic,
                                  stats_columns="age",
                                  literals_columns="cabin",
                                  stats="median",
                                  literals="General")

        # Print the result DataFrame.
        print(fit_obj.output)

        # Impute the values for missing values.
        # Note that teradataml DataFrame representing the model is passed as
        # input to "object".
        obj = SimpleImputeTransform(data=titanic,
                                     object=fit_obj.output
                                     )

        # Print the result DataFrame.
        print(obj.result)

        # Example 2: Impute the values for missing values. Note that model is passed
        #            as instance of SimpleImputeFit to "object".
        obj1 = SimpleImputeTransform(data=titanic,
                                     object=fit_obj
                                     )

        # Print the result DataFrame.
        print(obj1.result)
    """
