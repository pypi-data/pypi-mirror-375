# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Reservation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reservation_id': 'str',
        'type': 'str',
        'availability': 'AvailabilityRecord',
    }

    attribute_map = {
        'reservation_id': 'reservationId',
        'type': 'type',
        'availability': 'availability',
    }

    def __init__(self, reservation_id=None, type=None, availability=None, _configuration=None):  # noqa: E501
        """Reservation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._reservation_id = None
        self._type = None
        self._availability = None
        self.discriminator = None

        if reservation_id is not None:
            self.reservation_id = reservation_id
        self.type = type
        self.availability = availability

    @property
    def reservation_id(self):
        """Gets the reservation_id of this Reservation.  # noqa: E501

        Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request.  # noqa: E501

        :return: The reservation_id of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._reservation_id

    @reservation_id.setter
    def reservation_id(self, reservation_id):
        """Sets the reservation_id of this Reservation.

        Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request.  # noqa: E501

        :param reservation_id: The reservation_id of this Reservation.  # noqa: E501
        :type: str
        """

        self._reservation_id = reservation_id

    @property
    def type(self):
        """Gets the type of this Reservation.  # noqa: E501

        Type of reservation.  # noqa: E501

        :return: The type of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Reservation.

        Type of reservation.  # noqa: E501

        :param type: The type of this Reservation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["APPOINTMENT", "TRAVEL", "VACATION", "BREAK", "TRAINING"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def availability(self):
        """Gets the availability of this Reservation.  # noqa: E501


        :return: The availability of this Reservation.  # noqa: E501
        :rtype: AvailabilityRecord
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Reservation.


        :param availability: The availability of this Reservation.  # noqa: E501
        :type: AvailabilityRecord
        """
        if self._configuration.client_side_validation and availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")  # noqa: E501

        self._availability = availability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reservation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reservation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Reservation):
            return True

        return self.to_dict() != other.to_dict()
