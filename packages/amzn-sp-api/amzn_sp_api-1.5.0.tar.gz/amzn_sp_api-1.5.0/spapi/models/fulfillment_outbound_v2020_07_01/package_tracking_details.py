# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PackageTrackingDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_number': 'int',
        'tracking_number': 'str',
        'customer_tracking_link': 'str',
        'carrier_code': 'str',
        'carrier_phone_number': 'str',
        'carrier_url': 'str',
        'ship_date': 'datetime',
        'estimated_arrival_date': 'datetime',
        'ship_to_address': 'TrackingAddress',
        'current_status': 'CurrentStatus',
        'current_status_description': 'str',
        'delivery_window': 'DateRange',
        'signed_for_by': 'str',
        'additional_location_info': 'AdditionalLocationInfo',
        'tracking_events': 'List[TrackingEvent]',
    }

    attribute_map = {
        'package_number': 'packageNumber',
        'tracking_number': 'trackingNumber',
        'customer_tracking_link': 'customerTrackingLink',
        'carrier_code': 'carrierCode',
        'carrier_phone_number': 'carrierPhoneNumber',
        'carrier_url': 'carrierURL',
        'ship_date': 'shipDate',
        'estimated_arrival_date': 'estimatedArrivalDate',
        'ship_to_address': 'shipToAddress',
        'current_status': 'currentStatus',
        'current_status_description': 'currentStatusDescription',
        'delivery_window': 'deliveryWindow',
        'signed_for_by': 'signedForBy',
        'additional_location_info': 'additionalLocationInfo',
        'tracking_events': 'trackingEvents',
    }

    def __init__(self, package_number=None, tracking_number=None, customer_tracking_link=None, carrier_code=None, carrier_phone_number=None, carrier_url=None, ship_date=None, estimated_arrival_date=None, ship_to_address=None, current_status=None, current_status_description=None, delivery_window=None, signed_for_by=None, additional_location_info=None, tracking_events=None, _configuration=None):  # noqa: E501
        """PackageTrackingDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._package_number = None
        self._tracking_number = None
        self._customer_tracking_link = None
        self._carrier_code = None
        self._carrier_phone_number = None
        self._carrier_url = None
        self._ship_date = None
        self._estimated_arrival_date = None
        self._ship_to_address = None
        self._current_status = None
        self._current_status_description = None
        self._delivery_window = None
        self._signed_for_by = None
        self._additional_location_info = None
        self._tracking_events = None
        self.discriminator = None

        self.package_number = package_number
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if customer_tracking_link is not None:
            self.customer_tracking_link = customer_tracking_link
        if carrier_code is not None:
            self.carrier_code = carrier_code
        if carrier_phone_number is not None:
            self.carrier_phone_number = carrier_phone_number
        if carrier_url is not None:
            self.carrier_url = carrier_url
        if ship_date is not None:
            self.ship_date = ship_date
        if estimated_arrival_date is not None:
            self.estimated_arrival_date = estimated_arrival_date
        if ship_to_address is not None:
            self.ship_to_address = ship_to_address
        if current_status is not None:
            self.current_status = current_status
        if current_status_description is not None:
            self.current_status_description = current_status_description
        if delivery_window is not None:
            self.delivery_window = delivery_window
        if signed_for_by is not None:
            self.signed_for_by = signed_for_by
        if additional_location_info is not None:
            self.additional_location_info = additional_location_info
        if tracking_events is not None:
            self.tracking_events = tracking_events

    @property
    def package_number(self):
        """Gets the package_number of this PackageTrackingDetails.  # noqa: E501

        The package identifier.  # noqa: E501

        :return: The package_number of this PackageTrackingDetails.  # noqa: E501
        :rtype: int
        """
        return self._package_number

    @package_number.setter
    def package_number(self, package_number):
        """Sets the package_number of this PackageTrackingDetails.

        The package identifier.  # noqa: E501

        :param package_number: The package_number of this PackageTrackingDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and package_number is None:
            raise ValueError("Invalid value for `package_number`, must not be `None`")  # noqa: E501

        self._package_number = package_number

    @property
    def tracking_number(self):
        """Gets the tracking_number of this PackageTrackingDetails.  # noqa: E501

        The tracking number for the package.  # noqa: E501

        :return: The tracking_number of this PackageTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this PackageTrackingDetails.

        The tracking number for the package.  # noqa: E501

        :param tracking_number: The tracking_number of this PackageTrackingDetails.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    @property
    def customer_tracking_link(self):
        """Gets the customer_tracking_link of this PackageTrackingDetails.  # noqa: E501

        Link on swiship.com that allows customers to track the package.  # noqa: E501

        :return: The customer_tracking_link of this PackageTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_tracking_link

    @customer_tracking_link.setter
    def customer_tracking_link(self, customer_tracking_link):
        """Sets the customer_tracking_link of this PackageTrackingDetails.

        Link on swiship.com that allows customers to track the package.  # noqa: E501

        :param customer_tracking_link: The customer_tracking_link of this PackageTrackingDetails.  # noqa: E501
        :type: str
        """

        self._customer_tracking_link = customer_tracking_link

    @property
    def carrier_code(self):
        """Gets the carrier_code of this PackageTrackingDetails.  # noqa: E501

        The name of the carrier.  # noqa: E501

        :return: The carrier_code of this PackageTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this PackageTrackingDetails.

        The name of the carrier.  # noqa: E501

        :param carrier_code: The carrier_code of this PackageTrackingDetails.  # noqa: E501
        :type: str
        """

        self._carrier_code = carrier_code

    @property
    def carrier_phone_number(self):
        """Gets the carrier_phone_number of this PackageTrackingDetails.  # noqa: E501

        The phone number of the carrier.  # noqa: E501

        :return: The carrier_phone_number of this PackageTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._carrier_phone_number

    @carrier_phone_number.setter
    def carrier_phone_number(self, carrier_phone_number):
        """Sets the carrier_phone_number of this PackageTrackingDetails.

        The phone number of the carrier.  # noqa: E501

        :param carrier_phone_number: The carrier_phone_number of this PackageTrackingDetails.  # noqa: E501
        :type: str
        """

        self._carrier_phone_number = carrier_phone_number

    @property
    def carrier_url(self):
        """Gets the carrier_url of this PackageTrackingDetails.  # noqa: E501

        The URL of the carrier's website.  # noqa: E501

        :return: The carrier_url of this PackageTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._carrier_url

    @carrier_url.setter
    def carrier_url(self, carrier_url):
        """Sets the carrier_url of this PackageTrackingDetails.

        The URL of the carrier's website.  # noqa: E501

        :param carrier_url: The carrier_url of this PackageTrackingDetails.  # noqa: E501
        :type: str
        """

        self._carrier_url = carrier_url

    @property
    def ship_date(self):
        """Gets the ship_date of this PackageTrackingDetails.  # noqa: E501

        Date timestamp  # noqa: E501

        :return: The ship_date of this PackageTrackingDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this PackageTrackingDetails.

        Date timestamp  # noqa: E501

        :param ship_date: The ship_date of this PackageTrackingDetails.  # noqa: E501
        :type: datetime
        """

        self._ship_date = ship_date

    @property
    def estimated_arrival_date(self):
        """Gets the estimated_arrival_date of this PackageTrackingDetails.  # noqa: E501

        Date timestamp  # noqa: E501

        :return: The estimated_arrival_date of this PackageTrackingDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_arrival_date

    @estimated_arrival_date.setter
    def estimated_arrival_date(self, estimated_arrival_date):
        """Sets the estimated_arrival_date of this PackageTrackingDetails.

        Date timestamp  # noqa: E501

        :param estimated_arrival_date: The estimated_arrival_date of this PackageTrackingDetails.  # noqa: E501
        :type: datetime
        """

        self._estimated_arrival_date = estimated_arrival_date

    @property
    def ship_to_address(self):
        """Gets the ship_to_address of this PackageTrackingDetails.  # noqa: E501


        :return: The ship_to_address of this PackageTrackingDetails.  # noqa: E501
        :rtype: TrackingAddress
        """
        return self._ship_to_address

    @ship_to_address.setter
    def ship_to_address(self, ship_to_address):
        """Sets the ship_to_address of this PackageTrackingDetails.


        :param ship_to_address: The ship_to_address of this PackageTrackingDetails.  # noqa: E501
        :type: TrackingAddress
        """

        self._ship_to_address = ship_to_address

    @property
    def current_status(self):
        """Gets the current_status of this PackageTrackingDetails.  # noqa: E501


        :return: The current_status of this PackageTrackingDetails.  # noqa: E501
        :rtype: CurrentStatus
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this PackageTrackingDetails.


        :param current_status: The current_status of this PackageTrackingDetails.  # noqa: E501
        :type: CurrentStatus
        """

        self._current_status = current_status

    @property
    def current_status_description(self):
        """Gets the current_status_description of this PackageTrackingDetails.  # noqa: E501

        Description corresponding to the `CurrentStatus` value.  # noqa: E501

        :return: The current_status_description of this PackageTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._current_status_description

    @current_status_description.setter
    def current_status_description(self, current_status_description):
        """Sets the current_status_description of this PackageTrackingDetails.

        Description corresponding to the `CurrentStatus` value.  # noqa: E501

        :param current_status_description: The current_status_description of this PackageTrackingDetails.  # noqa: E501
        :type: str
        """

        self._current_status_description = current_status_description

    @property
    def delivery_window(self):
        """Gets the delivery_window of this PackageTrackingDetails.  # noqa: E501


        :return: The delivery_window of this PackageTrackingDetails.  # noqa: E501
        :rtype: DateRange
        """
        return self._delivery_window

    @delivery_window.setter
    def delivery_window(self, delivery_window):
        """Sets the delivery_window of this PackageTrackingDetails.


        :param delivery_window: The delivery_window of this PackageTrackingDetails.  # noqa: E501
        :type: DateRange
        """

        self._delivery_window = delivery_window

    @property
    def signed_for_by(self):
        """Gets the signed_for_by of this PackageTrackingDetails.  # noqa: E501

        The name of the person who signed for the package.  # noqa: E501

        :return: The signed_for_by of this PackageTrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._signed_for_by

    @signed_for_by.setter
    def signed_for_by(self, signed_for_by):
        """Sets the signed_for_by of this PackageTrackingDetails.

        The name of the person who signed for the package.  # noqa: E501

        :param signed_for_by: The signed_for_by of this PackageTrackingDetails.  # noqa: E501
        :type: str
        """

        self._signed_for_by = signed_for_by

    @property
    def additional_location_info(self):
        """Gets the additional_location_info of this PackageTrackingDetails.  # noqa: E501


        :return: The additional_location_info of this PackageTrackingDetails.  # noqa: E501
        :rtype: AdditionalLocationInfo
        """
        return self._additional_location_info

    @additional_location_info.setter
    def additional_location_info(self, additional_location_info):
        """Sets the additional_location_info of this PackageTrackingDetails.


        :param additional_location_info: The additional_location_info of this PackageTrackingDetails.  # noqa: E501
        :type: AdditionalLocationInfo
        """

        self._additional_location_info = additional_location_info

    @property
    def tracking_events(self):
        """Gets the tracking_events of this PackageTrackingDetails.  # noqa: E501

        An array of tracking event information.  # noqa: E501

        :return: The tracking_events of this PackageTrackingDetails.  # noqa: E501
        :rtype: List[TrackingEvent]
        """
        return self._tracking_events

    @tracking_events.setter
    def tracking_events(self, tracking_events):
        """Sets the tracking_events of this PackageTrackingDetails.

        An array of tracking event information.  # noqa: E501

        :param tracking_events: The tracking_events of this PackageTrackingDetails.  # noqa: E501
        :type: List[TrackingEvent]
        """

        self._tracking_events = tracking_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageTrackingDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageTrackingDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageTrackingDetails):
            return True

        return self.to_dict() != other.to_dict()
