[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "information-composer"
version = "0.1.3"
description = "A comprehensive toolkit for collecting, composing, and filtering information from various web resources with AI-powered markdown processing"
authors = [{name = "Tao Zhang", email = "forrest_zhang@163.com"}]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.7"
keywords = ["web scraping", "information collection", "data composition", "markdown", "llm", "filter", "academic", "paper", "nlp", "ai", "dashscope", "llama-index"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

dependencies = [
    "requests>=2.28.0",
    "beautifulsoup4>=4.11.0",
    "habanero>=1.2.0",
    "pandas>=2.2.0",
    "pubmed-parser>=0.5.0",
    "biopython>=1.84",
    # MD_LLM_Filter dependencies
    "llama-index>=0.10.0",
    "dashscope>=1.14.0",
    "pydantic>=2.0.0",
    "llama-index-llms-dashscope>=0.1.0",
    "markdown>=3.5.0",
    "lxml>=4.9.0",
    "nltk>=3.8.0",
    "spacy>=3.7.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    "aiofiles>=23.0.0",
    # PDF processing dependencies
    "pypdfium2>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/information-composer"
Documentation = "https://information-composer.readthedocs.io/"
Repository = "https://github.com/yourusername/information-composer.git"
Issues = "https://github.com/yourusername/information-composer/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=3.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
    "ruff>=0.1.0",
]

[project.scripts]
md-llm-filter = "information_composer.llm_filter.cli.main:main"
pdf-validator = "information_composer.pdf.cli.main:main"

# Ruff configuration
[tool.ruff]
target-version = "py37"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "SIM", # flake8-simplify
    "Q",   # flake8-quotes
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B006",  # do not use mutable data structures for argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "E203",  # whitespace before ':', handled by black
    "E402",  # module level import not at top of file
    "E731",  # do not assign a lambda expression, use a def
    "F401",  # imported but unused (handled by auto-fix)
    "F841",  # local variable assigned but never used (handled by auto-fix)
    "UP007", # use X | Y for union types (not available in py37)
    "W293",  # blank line contains whitespace
    "W291",  # trailing whitespace
    "W292",  # no newline at end of file
    "RUF001", # string contains ambiguous unicode characters
    "RUF002", # docstring contains ambiguous unicode characters
    "RUF003", # comment contains ambiguous unicode characters
    "RUF010", # use explicit conversion flag
    "RUF013", # PEP 484 prohibits implicit Optional
    "RUF015", # prefer next() over single element slice
    "RUF017", # avoid quadratic list summation
    "ARG001", # unused function argument
    "ARG002", # unused method argument
    "ARG003", # unused class method argument
    "ARG004", # unused static method argument
    "ARG005", # unused lambda argument
    "B904",   # within an except clause, raise exceptions with raise ... from err
    "B035",   # dictionary comprehension uses static key
    "C403",   # unnecessary list comprehension
    "E721",   # use is and is not for type comparisons
    "F811",   # redefinition of unused
    "SIM102", # use a single if statement instead of nested if statements
    "SIM108", # use ternary operator
    "SIM114", # combine if branches using logical or operator
    "SIM115", # use a context manager for opening files
    "SIM201", # use != instead of not ==
    "TID252", # prefer absolute imports over relative imports
    "UP031",  # use format specifiers instead of percent format
    "UP036",  # version block is outdated for minimum Python version
    "UP006",  # use type instead of Type for type annotation
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "TID252"]
"tests/**/*" = ["ARG", "S101", "TID252", "B904"]
"examples/**/*" = ["TID252", "E402", "F401"]
"src/information_composer/markdown/vendor/**/*" = ["ALL"]  # Ignore vendor code
"src/information_composer/sites/ricedatacn_gene_parser.py" = ["F811"]  # Has duplicate method definition

[tool.ruff.lint.isort]
known-first-party = ["information_composer"]
force-single-line = false
force-sort-within-sections = true
lines-after-imports = 2

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"