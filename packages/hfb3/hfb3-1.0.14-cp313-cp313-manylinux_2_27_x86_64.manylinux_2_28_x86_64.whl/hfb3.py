# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _hfb3
else:
    import _hfb3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hfb3.delete_SwigPyIterator

    def value(self):
        return _hfb3.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hfb3.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hfb3.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hfb3.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hfb3.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hfb3.SwigPyIterator_copy(self)

    def next(self):
        return _hfb3.SwigPyIterator_next(self)

    def __next__(self):
        return _hfb3.SwigPyIterator___next__(self)

    def previous(self):
        return _hfb3.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hfb3.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hfb3.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hfb3.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hfb3.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hfb3.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hfb3.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hfb3.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _hfb3:
_hfb3.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _hfb3.SHARED_PTR_DISOWN
class vec_qnumbers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vec_qnumbers_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vec_qnumbers___nonzero__(self)

    def __bool__(self):
        return _hfb3.vec_qnumbers___bool__(self)

    def __len__(self):
        return _hfb3.vec_qnumbers___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vec_qnumbers___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vec_qnumbers___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vec_qnumbers___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vec_qnumbers___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vec_qnumbers___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vec_qnumbers___setitem__(self, *args)

    def pop(self):
        return _hfb3.vec_qnumbers_pop(self)

    def append(self, x):
        return _hfb3.vec_qnumbers_append(self, x)

    def empty(self):
        return _hfb3.vec_qnumbers_empty(self)

    def size(self):
        return _hfb3.vec_qnumbers_size(self)

    def swap(self, v):
        return _hfb3.vec_qnumbers_swap(self, v)

    def begin(self):
        return _hfb3.vec_qnumbers_begin(self)

    def end(self):
        return _hfb3.vec_qnumbers_end(self)

    def rbegin(self):
        return _hfb3.vec_qnumbers_rbegin(self)

    def rend(self):
        return _hfb3.vec_qnumbers_rend(self)

    def clear(self):
        return _hfb3.vec_qnumbers_clear(self)

    def get_allocator(self):
        return _hfb3.vec_qnumbers_get_allocator(self)

    def pop_back(self):
        return _hfb3.vec_qnumbers_pop_back(self)

    def erase(self, *args):
        return _hfb3.vec_qnumbers_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vec_qnumbers_swiginit(self, _hfb3.new_vec_qnumbers(*args))

    def push_back(self, x):
        return _hfb3.vec_qnumbers_push_back(self, x)

    def front(self):
        return _hfb3.vec_qnumbers_front(self)

    def back(self):
        return _hfb3.vec_qnumbers_back(self)

    def assign(self, n, x):
        return _hfb3.vec_qnumbers_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vec_qnumbers_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vec_qnumbers_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vec_qnumbers_reserve(self, n)

    def capacity(self):
        return _hfb3.vec_qnumbers_capacity(self)
    __swig_destroy__ = _hfb3.delete_vec_qnumbers

# Register vec_qnumbers in _hfb3:
_hfb3.vec_qnumbers_swigregister(vec_qnumbers)
class map_constraints(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.map_constraints_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.map_constraints___nonzero__(self)

    def __bool__(self):
        return _hfb3.map_constraints___bool__(self)

    def __len__(self):
        return _hfb3.map_constraints___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.map_constraints___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.map_constraints___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.map_constraints_has_key(self, key)

    def keys(self):
        return _hfb3.map_constraints_keys(self)

    def values(self):
        return _hfb3.map_constraints_values(self)

    def items(self):
        return _hfb3.map_constraints_items(self)

    def __contains__(self, key):
        return _hfb3.map_constraints___contains__(self, key)

    def key_iterator(self):
        return _hfb3.map_constraints_key_iterator(self)

    def value_iterator(self):
        return _hfb3.map_constraints_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.map_constraints___setitem__(self, *args)

    def asdict(self):
        return _hfb3.map_constraints_asdict(self)

    def __init__(self, *args):
        _hfb3.map_constraints_swiginit(self, _hfb3.new_map_constraints(*args))

    def empty(self):
        return _hfb3.map_constraints_empty(self)

    def size(self):
        return _hfb3.map_constraints_size(self)

    def swap(self, v):
        return _hfb3.map_constraints_swap(self, v)

    def begin(self):
        return _hfb3.map_constraints_begin(self)

    def end(self):
        return _hfb3.map_constraints_end(self)

    def rbegin(self):
        return _hfb3.map_constraints_rbegin(self)

    def rend(self):
        return _hfb3.map_constraints_rend(self)

    def clear(self):
        return _hfb3.map_constraints_clear(self)

    def get_allocator(self):
        return _hfb3.map_constraints_get_allocator(self)

    def count(self, x):
        return _hfb3.map_constraints_count(self, x)

    def erase(self, *args):
        return _hfb3.map_constraints_erase(self, *args)

    def find(self, x):
        return _hfb3.map_constraints_find(self, x)

    def lower_bound(self, x):
        return _hfb3.map_constraints_lower_bound(self, x)

    def upper_bound(self, x):
        return _hfb3.map_constraints_upper_bound(self, x)
    __swig_destroy__ = _hfb3.delete_map_constraints

# Register map_constraints in _hfb3:
_hfb3.map_constraints_swigregister(map_constraints)
class FieldMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.FieldMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.FieldMap___nonzero__(self)

    def __bool__(self):
        return _hfb3.FieldMap___bool__(self)

    def __len__(self):
        return _hfb3.FieldMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.FieldMap___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.FieldMap___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.FieldMap_has_key(self, key)

    def keys(self):
        return _hfb3.FieldMap_keys(self)

    def values(self):
        return _hfb3.FieldMap_values(self)

    def items(self):
        return _hfb3.FieldMap_items(self)

    def __contains__(self, key):
        return _hfb3.FieldMap___contains__(self, key)

    def key_iterator(self):
        return _hfb3.FieldMap_key_iterator(self)

    def value_iterator(self):
        return _hfb3.FieldMap_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.FieldMap___setitem__(self, *args)

    def asdict(self):
        return _hfb3.FieldMap_asdict(self)

    def __init__(self, *args):
        _hfb3.FieldMap_swiginit(self, _hfb3.new_FieldMap(*args))

    def empty(self):
        return _hfb3.FieldMap_empty(self)

    def size(self):
        return _hfb3.FieldMap_size(self)

    def swap(self, v):
        return _hfb3.FieldMap_swap(self, v)

    def begin(self):
        return _hfb3.FieldMap_begin(self)

    def end(self):
        return _hfb3.FieldMap_end(self)

    def rbegin(self):
        return _hfb3.FieldMap_rbegin(self)

    def rend(self):
        return _hfb3.FieldMap_rend(self)

    def clear(self):
        return _hfb3.FieldMap_clear(self)

    def get_allocator(self):
        return _hfb3.FieldMap_get_allocator(self)

    def count(self, x):
        return _hfb3.FieldMap_count(self, x)

    def erase(self, *args):
        return _hfb3.FieldMap_erase(self, *args)

    def find(self, x):
        return _hfb3.FieldMap_find(self, x)

    def lower_bound(self, x):
        return _hfb3.FieldMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _hfb3.FieldMap_upper_bound(self, x)
    __swig_destroy__ = _hfb3.delete_FieldMap

# Register FieldMap in _hfb3:
_hfb3.FieldMap_swigregister(FieldMap)
class FieldVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.FieldVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.FieldVec___nonzero__(self)

    def __bool__(self):
        return _hfb3.FieldVec___bool__(self)

    def __len__(self):
        return _hfb3.FieldVec___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.FieldVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.FieldVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.FieldVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.FieldVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.FieldVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.FieldVec___setitem__(self, *args)

    def pop(self):
        return _hfb3.FieldVec_pop(self)

    def append(self, x):
        return _hfb3.FieldVec_append(self, x)

    def empty(self):
        return _hfb3.FieldVec_empty(self)

    def size(self):
        return _hfb3.FieldVec_size(self)

    def swap(self, v):
        return _hfb3.FieldVec_swap(self, v)

    def begin(self):
        return _hfb3.FieldVec_begin(self)

    def end(self):
        return _hfb3.FieldVec_end(self)

    def rbegin(self):
        return _hfb3.FieldVec_rbegin(self)

    def rend(self):
        return _hfb3.FieldVec_rend(self)

    def clear(self):
        return _hfb3.FieldVec_clear(self)

    def get_allocator(self):
        return _hfb3.FieldVec_get_allocator(self)

    def pop_back(self):
        return _hfb3.FieldVec_pop_back(self)

    def erase(self, *args):
        return _hfb3.FieldVec_erase(self, *args)

    def __init__(self, *args):
        _hfb3.FieldVec_swiginit(self, _hfb3.new_FieldVec(*args))

    def push_back(self, x):
        return _hfb3.FieldVec_push_back(self, x)

    def front(self):
        return _hfb3.FieldVec_front(self)

    def back(self):
        return _hfb3.FieldVec_back(self)

    def assign(self, n, x):
        return _hfb3.FieldVec_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.FieldVec_resize(self, *args)

    def insert(self, *args):
        return _hfb3.FieldVec_insert(self, *args)

    def reserve(self, n):
        return _hfb3.FieldVec_reserve(self, n)

    def capacity(self):
        return _hfb3.FieldVec_capacity(self)
    __swig_destroy__ = _hfb3.delete_FieldVec

# Register FieldVec in _hfb3:
_hfb3.FieldVec_swigregister(FieldVec)
class map_string_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.map_string_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.map_string_int___nonzero__(self)

    def __bool__(self):
        return _hfb3.map_string_int___bool__(self)

    def __len__(self):
        return _hfb3.map_string_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.map_string_int___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.map_string_int___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.map_string_int_has_key(self, key)

    def keys(self):
        return _hfb3.map_string_int_keys(self)

    def values(self):
        return _hfb3.map_string_int_values(self)

    def items(self):
        return _hfb3.map_string_int_items(self)

    def __contains__(self, key):
        return _hfb3.map_string_int___contains__(self, key)

    def key_iterator(self):
        return _hfb3.map_string_int_key_iterator(self)

    def value_iterator(self):
        return _hfb3.map_string_int_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.map_string_int___setitem__(self, *args)

    def asdict(self):
        return _hfb3.map_string_int_asdict(self)

    def __init__(self, *args):
        _hfb3.map_string_int_swiginit(self, _hfb3.new_map_string_int(*args))

    def empty(self):
        return _hfb3.map_string_int_empty(self)

    def size(self):
        return _hfb3.map_string_int_size(self)

    def swap(self, v):
        return _hfb3.map_string_int_swap(self, v)

    def begin(self):
        return _hfb3.map_string_int_begin(self)

    def end(self):
        return _hfb3.map_string_int_end(self)

    def rbegin(self):
        return _hfb3.map_string_int_rbegin(self)

    def rend(self):
        return _hfb3.map_string_int_rend(self)

    def clear(self):
        return _hfb3.map_string_int_clear(self)

    def get_allocator(self):
        return _hfb3.map_string_int_get_allocator(self)

    def count(self, x):
        return _hfb3.map_string_int_count(self, x)

    def erase(self, *args):
        return _hfb3.map_string_int_erase(self, *args)

    def find(self, x):
        return _hfb3.map_string_int_find(self, x)

    def lower_bound(self, x):
        return _hfb3.map_string_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _hfb3.map_string_int_upper_bound(self, x)
    __swig_destroy__ = _hfb3.delete_map_string_int

# Register map_string_int in _hfb3:
_hfb3.map_string_int_swigregister(map_string_int)
class map_string_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.map_string_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.map_string_double___nonzero__(self)

    def __bool__(self):
        return _hfb3.map_string_double___bool__(self)

    def __len__(self):
        return _hfb3.map_string_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.map_string_double___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.map_string_double___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.map_string_double_has_key(self, key)

    def keys(self):
        return _hfb3.map_string_double_keys(self)

    def values(self):
        return _hfb3.map_string_double_values(self)

    def items(self):
        return _hfb3.map_string_double_items(self)

    def __contains__(self, key):
        return _hfb3.map_string_double___contains__(self, key)

    def key_iterator(self):
        return _hfb3.map_string_double_key_iterator(self)

    def value_iterator(self):
        return _hfb3.map_string_double_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.map_string_double___setitem__(self, *args)

    def asdict(self):
        return _hfb3.map_string_double_asdict(self)

    def __init__(self, *args):
        _hfb3.map_string_double_swiginit(self, _hfb3.new_map_string_double(*args))

    def empty(self):
        return _hfb3.map_string_double_empty(self)

    def size(self):
        return _hfb3.map_string_double_size(self)

    def swap(self, v):
        return _hfb3.map_string_double_swap(self, v)

    def begin(self):
        return _hfb3.map_string_double_begin(self)

    def end(self):
        return _hfb3.map_string_double_end(self)

    def rbegin(self):
        return _hfb3.map_string_double_rbegin(self)

    def rend(self):
        return _hfb3.map_string_double_rend(self)

    def clear(self):
        return _hfb3.map_string_double_clear(self)

    def get_allocator(self):
        return _hfb3.map_string_double_get_allocator(self)

    def count(self, x):
        return _hfb3.map_string_double_count(self, x)

    def erase(self, *args):
        return _hfb3.map_string_double_erase(self, *args)

    def find(self, x):
        return _hfb3.map_string_double_find(self, x)

    def lower_bound(self, x):
        return _hfb3.map_string_double_lower_bound(self, x)

    def upper_bound(self, x):
        return _hfb3.map_string_double_upper_bound(self, x)
    __swig_destroy__ = _hfb3.delete_map_string_double

# Register map_string_double in _hfb3:
_hfb3.map_string_double_swigregister(map_string_double)
class map_string_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.map_string_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.map_string_string___nonzero__(self)

    def __bool__(self):
        return _hfb3.map_string_string___bool__(self)

    def __len__(self):
        return _hfb3.map_string_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.map_string_string___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.map_string_string___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.map_string_string_has_key(self, key)

    def keys(self):
        return _hfb3.map_string_string_keys(self)

    def values(self):
        return _hfb3.map_string_string_values(self)

    def items(self):
        return _hfb3.map_string_string_items(self)

    def __contains__(self, key):
        return _hfb3.map_string_string___contains__(self, key)

    def key_iterator(self):
        return _hfb3.map_string_string_key_iterator(self)

    def value_iterator(self):
        return _hfb3.map_string_string_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.map_string_string___setitem__(self, *args)

    def asdict(self):
        return _hfb3.map_string_string_asdict(self)

    def __init__(self, *args):
        _hfb3.map_string_string_swiginit(self, _hfb3.new_map_string_string(*args))

    def empty(self):
        return _hfb3.map_string_string_empty(self)

    def size(self):
        return _hfb3.map_string_string_size(self)

    def swap(self, v):
        return _hfb3.map_string_string_swap(self, v)

    def begin(self):
        return _hfb3.map_string_string_begin(self)

    def end(self):
        return _hfb3.map_string_string_end(self)

    def rbegin(self):
        return _hfb3.map_string_string_rbegin(self)

    def rend(self):
        return _hfb3.map_string_string_rend(self)

    def clear(self):
        return _hfb3.map_string_string_clear(self)

    def get_allocator(self):
        return _hfb3.map_string_string_get_allocator(self)

    def count(self, x):
        return _hfb3.map_string_string_count(self, x)

    def erase(self, *args):
        return _hfb3.map_string_string_erase(self, *args)

    def find(self, x):
        return _hfb3.map_string_string_find(self, x)

    def lower_bound(self, x):
        return _hfb3.map_string_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _hfb3.map_string_string_upper_bound(self, x)
    __swig_destroy__ = _hfb3.delete_map_string_string

# Register map_string_string in _hfb3:
_hfb3.map_string_string_swigregister(map_string_string)
class vec_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vec_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vec_string___nonzero__(self)

    def __bool__(self):
        return _hfb3.vec_string___bool__(self)

    def __len__(self):
        return _hfb3.vec_string___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vec_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vec_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vec_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vec_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vec_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vec_string___setitem__(self, *args)

    def pop(self):
        return _hfb3.vec_string_pop(self)

    def append(self, x):
        return _hfb3.vec_string_append(self, x)

    def empty(self):
        return _hfb3.vec_string_empty(self)

    def size(self):
        return _hfb3.vec_string_size(self)

    def swap(self, v):
        return _hfb3.vec_string_swap(self, v)

    def begin(self):
        return _hfb3.vec_string_begin(self)

    def end(self):
        return _hfb3.vec_string_end(self)

    def rbegin(self):
        return _hfb3.vec_string_rbegin(self)

    def rend(self):
        return _hfb3.vec_string_rend(self)

    def clear(self):
        return _hfb3.vec_string_clear(self)

    def get_allocator(self):
        return _hfb3.vec_string_get_allocator(self)

    def pop_back(self):
        return _hfb3.vec_string_pop_back(self)

    def erase(self, *args):
        return _hfb3.vec_string_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vec_string_swiginit(self, _hfb3.new_vec_string(*args))

    def push_back(self, x):
        return _hfb3.vec_string_push_back(self, x)

    def front(self):
        return _hfb3.vec_string_front(self)

    def back(self):
        return _hfb3.vec_string_back(self)

    def assign(self, n, x):
        return _hfb3.vec_string_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vec_string_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vec_string_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vec_string_reserve(self, n)

    def capacity(self):
        return _hfb3.vec_string_capacity(self)
    __swig_destroy__ = _hfb3.delete_vec_string

# Register vec_string in _hfb3:
_hfb3.vec_string_swigregister(vec_string)
class vec_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vec_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vec_double___nonzero__(self)

    def __bool__(self):
        return _hfb3.vec_double___bool__(self)

    def __len__(self):
        return _hfb3.vec_double___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vec_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vec_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vec_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vec_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vec_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vec_double___setitem__(self, *args)

    def pop(self):
        return _hfb3.vec_double_pop(self)

    def append(self, x):
        return _hfb3.vec_double_append(self, x)

    def empty(self):
        return _hfb3.vec_double_empty(self)

    def size(self):
        return _hfb3.vec_double_size(self)

    def swap(self, v):
        return _hfb3.vec_double_swap(self, v)

    def begin(self):
        return _hfb3.vec_double_begin(self)

    def end(self):
        return _hfb3.vec_double_end(self)

    def rbegin(self):
        return _hfb3.vec_double_rbegin(self)

    def rend(self):
        return _hfb3.vec_double_rend(self)

    def clear(self):
        return _hfb3.vec_double_clear(self)

    def get_allocator(self):
        return _hfb3.vec_double_get_allocator(self)

    def pop_back(self):
        return _hfb3.vec_double_pop_back(self)

    def erase(self, *args):
        return _hfb3.vec_double_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vec_double_swiginit(self, _hfb3.new_vec_double(*args))

    def push_back(self, x):
        return _hfb3.vec_double_push_back(self, x)

    def front(self):
        return _hfb3.vec_double_front(self)

    def back(self):
        return _hfb3.vec_double_back(self)

    def assign(self, n, x):
        return _hfb3.vec_double_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vec_double_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vec_double_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vec_double_reserve(self, n)

    def capacity(self):
        return _hfb3.vec_double_capacity(self)
    __swig_destroy__ = _hfb3.delete_vec_double

# Register vec_double in _hfb3:
_hfb3.vec_double_swigregister(vec_double)
class set_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.set_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.set_int___nonzero__(self)

    def __bool__(self):
        return _hfb3.set_int___bool__(self)

    def __len__(self):
        return _hfb3.set_int___len__(self)

    def append(self, x):
        return _hfb3.set_int_append(self, x)

    def __contains__(self, x):
        return _hfb3.set_int___contains__(self, x)

    def __getitem__(self, i):
        return _hfb3.set_int___getitem__(self, i)

    def add(self, x):
        return _hfb3.set_int_add(self, x)

    def discard(self, x):
        return _hfb3.set_int_discard(self, x)

    def __init__(self, *args):
        _hfb3.set_int_swiginit(self, _hfb3.new_set_int(*args))

    def empty(self):
        return _hfb3.set_int_empty(self)

    def size(self):
        return _hfb3.set_int_size(self)

    def clear(self):
        return _hfb3.set_int_clear(self)

    def swap(self, v):
        return _hfb3.set_int_swap(self, v)

    def count(self, x):
        return _hfb3.set_int_count(self, x)

    def begin(self):
        return _hfb3.set_int_begin(self)

    def end(self):
        return _hfb3.set_int_end(self)

    def rbegin(self):
        return _hfb3.set_int_rbegin(self)

    def rend(self):
        return _hfb3.set_int_rend(self)

    def erase(self, *args):
        return _hfb3.set_int_erase(self, *args)

    def find(self, x):
        return _hfb3.set_int_find(self, x)

    def lower_bound(self, x):
        return _hfb3.set_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _hfb3.set_int_upper_bound(self, x)

    def equal_range(self, x):
        return _hfb3.set_int_equal_range(self, x)

    def insert(self, __x):
        return _hfb3.set_int_insert(self, __x)
    __swig_destroy__ = _hfb3.delete_set_int

# Register set_int in _hfb3:
_hfb3.set_int_swigregister(set_int)
class vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vector_int___nonzero__(self)

    def __bool__(self):
        return _hfb3.vector_int___bool__(self)

    def __len__(self):
        return _hfb3.vector_int___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vector_int___setitem__(self, *args)

    def pop(self):
        return _hfb3.vector_int_pop(self)

    def append(self, x):
        return _hfb3.vector_int_append(self, x)

    def empty(self):
        return _hfb3.vector_int_empty(self)

    def size(self):
        return _hfb3.vector_int_size(self)

    def swap(self, v):
        return _hfb3.vector_int_swap(self, v)

    def begin(self):
        return _hfb3.vector_int_begin(self)

    def end(self):
        return _hfb3.vector_int_end(self)

    def rbegin(self):
        return _hfb3.vector_int_rbegin(self)

    def rend(self):
        return _hfb3.vector_int_rend(self)

    def clear(self):
        return _hfb3.vector_int_clear(self)

    def get_allocator(self):
        return _hfb3.vector_int_get_allocator(self)

    def pop_back(self):
        return _hfb3.vector_int_pop_back(self)

    def erase(self, *args):
        return _hfb3.vector_int_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vector_int_swiginit(self, _hfb3.new_vector_int(*args))

    def push_back(self, x):
        return _hfb3.vector_int_push_back(self, x)

    def front(self):
        return _hfb3.vector_int_front(self)

    def back(self):
        return _hfb3.vector_int_back(self)

    def assign(self, n, x):
        return _hfb3.vector_int_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vector_int_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vector_int_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vector_int_reserve(self, n)

    def capacity(self):
        return _hfb3.vector_int_capacity(self)
    __swig_destroy__ = _hfb3.delete_vector_int

# Register vector_int in _hfb3:
_hfb3.vector_int_swigregister(vector_int)
class vector_lint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vector_lint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vector_lint___nonzero__(self)

    def __bool__(self):
        return _hfb3.vector_lint___bool__(self)

    def __len__(self):
        return _hfb3.vector_lint___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vector_lint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vector_lint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vector_lint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vector_lint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vector_lint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vector_lint___setitem__(self, *args)

    def pop(self):
        return _hfb3.vector_lint_pop(self)

    def append(self, x):
        return _hfb3.vector_lint_append(self, x)

    def empty(self):
        return _hfb3.vector_lint_empty(self)

    def size(self):
        return _hfb3.vector_lint_size(self)

    def swap(self, v):
        return _hfb3.vector_lint_swap(self, v)

    def begin(self):
        return _hfb3.vector_lint_begin(self)

    def end(self):
        return _hfb3.vector_lint_end(self)

    def rbegin(self):
        return _hfb3.vector_lint_rbegin(self)

    def rend(self):
        return _hfb3.vector_lint_rend(self)

    def clear(self):
        return _hfb3.vector_lint_clear(self)

    def get_allocator(self):
        return _hfb3.vector_lint_get_allocator(self)

    def pop_back(self):
        return _hfb3.vector_lint_pop_back(self)

    def erase(self, *args):
        return _hfb3.vector_lint_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vector_lint_swiginit(self, _hfb3.new_vector_lint(*args))

    def push_back(self, x):
        return _hfb3.vector_lint_push_back(self, x)

    def front(self):
        return _hfb3.vector_lint_front(self)

    def back(self):
        return _hfb3.vector_lint_back(self)

    def assign(self, n, x):
        return _hfb3.vector_lint_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vector_lint_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vector_lint_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vector_lint_reserve(self, n)

    def capacity(self):
        return _hfb3.vector_lint_capacity(self)
    __swig_destroy__ = _hfb3.delete_vector_lint

# Register vector_lint in _hfb3:
_hfb3.vector_lint_swigregister(vector_lint)
class vector_uint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vector_uint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vector_uint___nonzero__(self)

    def __bool__(self):
        return _hfb3.vector_uint___bool__(self)

    def __len__(self):
        return _hfb3.vector_uint___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vector_uint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vector_uint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vector_uint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vector_uint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vector_uint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vector_uint___setitem__(self, *args)

    def pop(self):
        return _hfb3.vector_uint_pop(self)

    def append(self, x):
        return _hfb3.vector_uint_append(self, x)

    def empty(self):
        return _hfb3.vector_uint_empty(self)

    def size(self):
        return _hfb3.vector_uint_size(self)

    def swap(self, v):
        return _hfb3.vector_uint_swap(self, v)

    def begin(self):
        return _hfb3.vector_uint_begin(self)

    def end(self):
        return _hfb3.vector_uint_end(self)

    def rbegin(self):
        return _hfb3.vector_uint_rbegin(self)

    def rend(self):
        return _hfb3.vector_uint_rend(self)

    def clear(self):
        return _hfb3.vector_uint_clear(self)

    def get_allocator(self):
        return _hfb3.vector_uint_get_allocator(self)

    def pop_back(self):
        return _hfb3.vector_uint_pop_back(self)

    def erase(self, *args):
        return _hfb3.vector_uint_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vector_uint_swiginit(self, _hfb3.new_vector_uint(*args))

    def push_back(self, x):
        return _hfb3.vector_uint_push_back(self, x)

    def front(self):
        return _hfb3.vector_uint_front(self)

    def back(self):
        return _hfb3.vector_uint_back(self)

    def assign(self, n, x):
        return _hfb3.vector_uint_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vector_uint_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vector_uint_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vector_uint_reserve(self, n)

    def capacity(self):
        return _hfb3.vector_uint_capacity(self)
    __swig_destroy__ = _hfb3.delete_vector_uint

# Register vector_uint in _hfb3:
_hfb3.vector_uint_swigregister(vector_uint)
class vector_vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vector_vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vector_vector_int___nonzero__(self)

    def __bool__(self):
        return _hfb3.vector_vector_int___bool__(self)

    def __len__(self):
        return _hfb3.vector_vector_int___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vector_vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vector_vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vector_vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vector_vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vector_vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vector_vector_int___setitem__(self, *args)

    def pop(self):
        return _hfb3.vector_vector_int_pop(self)

    def append(self, x):
        return _hfb3.vector_vector_int_append(self, x)

    def empty(self):
        return _hfb3.vector_vector_int_empty(self)

    def size(self):
        return _hfb3.vector_vector_int_size(self)

    def swap(self, v):
        return _hfb3.vector_vector_int_swap(self, v)

    def begin(self):
        return _hfb3.vector_vector_int_begin(self)

    def end(self):
        return _hfb3.vector_vector_int_end(self)

    def rbegin(self):
        return _hfb3.vector_vector_int_rbegin(self)

    def rend(self):
        return _hfb3.vector_vector_int_rend(self)

    def clear(self):
        return _hfb3.vector_vector_int_clear(self)

    def get_allocator(self):
        return _hfb3.vector_vector_int_get_allocator(self)

    def pop_back(self):
        return _hfb3.vector_vector_int_pop_back(self)

    def erase(self, *args):
        return _hfb3.vector_vector_int_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vector_vector_int_swiginit(self, _hfb3.new_vector_vector_int(*args))

    def push_back(self, x):
        return _hfb3.vector_vector_int_push_back(self, x)

    def front(self):
        return _hfb3.vector_vector_int_front(self)

    def back(self):
        return _hfb3.vector_vector_int_back(self)

    def assign(self, n, x):
        return _hfb3.vector_vector_int_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vector_vector_int_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vector_vector_int_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vector_vector_int_reserve(self, n)

    def capacity(self):
        return _hfb3.vector_vector_int_capacity(self)
    __swig_destroy__ = _hfb3.delete_vector_vector_int

# Register vector_vector_int in _hfb3:
_hfb3.vector_vector_int_swigregister(vector_vector_int)
class vector_vector_lint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vector_vector_lint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vector_vector_lint___nonzero__(self)

    def __bool__(self):
        return _hfb3.vector_vector_lint___bool__(self)

    def __len__(self):
        return _hfb3.vector_vector_lint___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vector_vector_lint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vector_vector_lint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vector_vector_lint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vector_vector_lint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vector_vector_lint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vector_vector_lint___setitem__(self, *args)

    def pop(self):
        return _hfb3.vector_vector_lint_pop(self)

    def append(self, x):
        return _hfb3.vector_vector_lint_append(self, x)

    def empty(self):
        return _hfb3.vector_vector_lint_empty(self)

    def size(self):
        return _hfb3.vector_vector_lint_size(self)

    def swap(self, v):
        return _hfb3.vector_vector_lint_swap(self, v)

    def begin(self):
        return _hfb3.vector_vector_lint_begin(self)

    def end(self):
        return _hfb3.vector_vector_lint_end(self)

    def rbegin(self):
        return _hfb3.vector_vector_lint_rbegin(self)

    def rend(self):
        return _hfb3.vector_vector_lint_rend(self)

    def clear(self):
        return _hfb3.vector_vector_lint_clear(self)

    def get_allocator(self):
        return _hfb3.vector_vector_lint_get_allocator(self)

    def pop_back(self):
        return _hfb3.vector_vector_lint_pop_back(self)

    def erase(self, *args):
        return _hfb3.vector_vector_lint_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vector_vector_lint_swiginit(self, _hfb3.new_vector_vector_lint(*args))

    def push_back(self, x):
        return _hfb3.vector_vector_lint_push_back(self, x)

    def front(self):
        return _hfb3.vector_vector_lint_front(self)

    def back(self):
        return _hfb3.vector_vector_lint_back(self)

    def assign(self, n, x):
        return _hfb3.vector_vector_lint_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vector_vector_lint_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vector_vector_lint_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vector_vector_lint_reserve(self, n)

    def capacity(self):
        return _hfb3.vector_vector_lint_capacity(self)
    __swig_destroy__ = _hfb3.delete_vector_vector_lint

# Register vector_vector_lint in _hfb3:
_hfb3.vector_vector_lint_swigregister(vector_vector_lint)
class vector_vector_uint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vector_vector_uint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vector_vector_uint___nonzero__(self)

    def __bool__(self):
        return _hfb3.vector_vector_uint___bool__(self)

    def __len__(self):
        return _hfb3.vector_vector_uint___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vector_vector_uint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vector_vector_uint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vector_vector_uint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vector_vector_uint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vector_vector_uint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vector_vector_uint___setitem__(self, *args)

    def pop(self):
        return _hfb3.vector_vector_uint_pop(self)

    def append(self, x):
        return _hfb3.vector_vector_uint_append(self, x)

    def empty(self):
        return _hfb3.vector_vector_uint_empty(self)

    def size(self):
        return _hfb3.vector_vector_uint_size(self)

    def swap(self, v):
        return _hfb3.vector_vector_uint_swap(self, v)

    def begin(self):
        return _hfb3.vector_vector_uint_begin(self)

    def end(self):
        return _hfb3.vector_vector_uint_end(self)

    def rbegin(self):
        return _hfb3.vector_vector_uint_rbegin(self)

    def rend(self):
        return _hfb3.vector_vector_uint_rend(self)

    def clear(self):
        return _hfb3.vector_vector_uint_clear(self)

    def get_allocator(self):
        return _hfb3.vector_vector_uint_get_allocator(self)

    def pop_back(self):
        return _hfb3.vector_vector_uint_pop_back(self)

    def erase(self, *args):
        return _hfb3.vector_vector_uint_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vector_vector_uint_swiginit(self, _hfb3.new_vector_vector_uint(*args))

    def push_back(self, x):
        return _hfb3.vector_vector_uint_push_back(self, x)

    def front(self):
        return _hfb3.vector_vector_uint_front(self)

    def back(self):
        return _hfb3.vector_vector_uint_back(self)

    def assign(self, n, x):
        return _hfb3.vector_vector_uint_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vector_vector_uint_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vector_vector_uint_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vector_vector_uint_reserve(self, n)

    def capacity(self):
        return _hfb3.vector_vector_uint_capacity(self)
    __swig_destroy__ = _hfb3.delete_vector_vector_uint

# Register vector_vector_uint in _hfb3:
_hfb3.vector_vector_uint_swigregister(vector_vector_uint)
class umap_array_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_int___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_int___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_int___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_int___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_int_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_int_keys(self)

    def values(self):
        return _hfb3.umap_array_int_values(self)

    def items(self):
        return _hfb3.umap_array_int_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_int___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_int_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_int_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_int___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_int_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_int_swiginit(self, _hfb3.new_umap_array_int(*args))

    def empty(self):
        return _hfb3.umap_array_int_empty(self)

    def size(self):
        return _hfb3.umap_array_int_size(self)

    def swap(self, v):
        return _hfb3.umap_array_int_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_int_begin(self)

    def end(self):
        return _hfb3.umap_array_int_end(self)

    def clear(self):
        return _hfb3.umap_array_int_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_int_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_int_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_int_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_int_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_int

# Register umap_array_int in _hfb3:
_hfb3.umap_array_int_swigregister(umap_array_int)
class umap_array_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_double___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_double___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_double___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_double___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_double_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_double_keys(self)

    def values(self):
        return _hfb3.umap_array_double_values(self)

    def items(self):
        return _hfb3.umap_array_double_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_double___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_double_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_double_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_double___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_double_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_double_swiginit(self, _hfb3.new_umap_array_double(*args))

    def empty(self):
        return _hfb3.umap_array_double_empty(self)

    def size(self):
        return _hfb3.umap_array_double_size(self)

    def swap(self, v):
        return _hfb3.umap_array_double_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_double_begin(self)

    def end(self):
        return _hfb3.umap_array_double_end(self)

    def clear(self):
        return _hfb3.umap_array_double_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_double_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_double_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_double_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_double_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_double

# Register umap_array_double in _hfb3:
_hfb3.umap_array_double_swigregister(umap_array_double)
class umap_array_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_string___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_string___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_string___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_string___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_string_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_string_keys(self)

    def values(self):
        return _hfb3.umap_array_string_values(self)

    def items(self):
        return _hfb3.umap_array_string_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_string___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_string_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_string_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_string___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_string_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_string_swiginit(self, _hfb3.new_umap_array_string(*args))

    def empty(self):
        return _hfb3.umap_array_string_empty(self)

    def size(self):
        return _hfb3.umap_array_string_size(self)

    def swap(self, v):
        return _hfb3.umap_array_string_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_string_begin(self)

    def end(self):
        return _hfb3.umap_array_string_end(self)

    def clear(self):
        return _hfb3.umap_array_string_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_string_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_string_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_string_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_string_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_string

# Register umap_array_string in _hfb3:
_hfb3.umap_array_string_swigregister(umap_array_string)
class umap_array_vec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_vec___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_vec___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_vec___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_vec___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_vec___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_vec_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_vec_keys(self)

    def values(self):
        return _hfb3.umap_array_vec_values(self)

    def items(self):
        return _hfb3.umap_array_vec_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_vec___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_vec_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_vec_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_vec___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_vec_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_vec_swiginit(self, _hfb3.new_umap_array_vec(*args))

    def empty(self):
        return _hfb3.umap_array_vec_empty(self)

    def size(self):
        return _hfb3.umap_array_vec_size(self)

    def swap(self, v):
        return _hfb3.umap_array_vec_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_vec_begin(self)

    def end(self):
        return _hfb3.umap_array_vec_end(self)

    def clear(self):
        return _hfb3.umap_array_vec_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_vec_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_vec_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_vec_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_vec_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_vec

# Register umap_array_vec in _hfb3:
_hfb3.umap_array_vec_swigregister(umap_array_vec)
class umap_array_mat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_mat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_mat___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_mat___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_mat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_mat___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_mat___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_mat_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_mat_keys(self)

    def values(self):
        return _hfb3.umap_array_mat_values(self)

    def items(self):
        return _hfb3.umap_array_mat_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_mat___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_mat_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_mat_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_mat___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_mat_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_mat_swiginit(self, _hfb3.new_umap_array_mat(*args))

    def empty(self):
        return _hfb3.umap_array_mat_empty(self)

    def size(self):
        return _hfb3.umap_array_mat_size(self)

    def swap(self, v):
        return _hfb3.umap_array_mat_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_mat_begin(self)

    def end(self):
        return _hfb3.umap_array_mat_end(self)

    def clear(self):
        return _hfb3.umap_array_mat_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_mat_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_mat_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_mat_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_mat_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_mat

# Register umap_array_mat in _hfb3:
_hfb3.umap_array_mat_swigregister(umap_array_mat)
class umap_array_cube(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_cube_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_cube___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_cube___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_cube___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_cube___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_cube___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_cube_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_cube_keys(self)

    def values(self):
        return _hfb3.umap_array_cube_values(self)

    def items(self):
        return _hfb3.umap_array_cube_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_cube___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_cube_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_cube_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_cube___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_cube_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_cube_swiginit(self, _hfb3.new_umap_array_cube(*args))

    def empty(self):
        return _hfb3.umap_array_cube_empty(self)

    def size(self):
        return _hfb3.umap_array_cube_size(self)

    def swap(self, v):
        return _hfb3.umap_array_cube_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_cube_begin(self)

    def end(self):
        return _hfb3.umap_array_cube_end(self)

    def clear(self):
        return _hfb3.umap_array_cube_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_cube_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_cube_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_cube_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_cube_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_cube

# Register umap_array_cube in _hfb3:
_hfb3.umap_array_cube_swigregister(umap_array_cube)
class umap_array_states(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_states_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_states___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_states___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_states___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_states___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_states___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_states_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_states_keys(self)

    def values(self):
        return _hfb3.umap_array_states_values(self)

    def items(self):
        return _hfb3.umap_array_states_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_states___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_states_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_states_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_states___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_states_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_states_swiginit(self, _hfb3.new_umap_array_states(*args))

    def empty(self):
        return _hfb3.umap_array_states_empty(self)

    def size(self):
        return _hfb3.umap_array_states_size(self)

    def swap(self, v):
        return _hfb3.umap_array_states_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_states_begin(self)

    def end(self):
        return _hfb3.umap_array_states_end(self)

    def clear(self):
        return _hfb3.umap_array_states_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_states_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_states_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_states_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_states_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_states

# Register umap_array_states in _hfb3:
_hfb3.umap_array_states_swigregister(umap_array_states)
class umap_array_ivec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_ivec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_ivec___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_ivec___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_ivec___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_ivec___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_ivec___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_ivec_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_ivec_keys(self)

    def values(self):
        return _hfb3.umap_array_ivec_values(self)

    def items(self):
        return _hfb3.umap_array_ivec_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_ivec___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_ivec_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_ivec_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_ivec___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_ivec_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_ivec_swiginit(self, _hfb3.new_umap_array_ivec(*args))

    def empty(self):
        return _hfb3.umap_array_ivec_empty(self)

    def size(self):
        return _hfb3.umap_array_ivec_size(self)

    def swap(self, v):
        return _hfb3.umap_array_ivec_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_ivec_begin(self)

    def end(self):
        return _hfb3.umap_array_ivec_end(self)

    def clear(self):
        return _hfb3.umap_array_ivec_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_ivec_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_ivec_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_ivec_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_ivec_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_ivec

# Register umap_array_ivec in _hfb3:
_hfb3.umap_array_ivec_swigregister(umap_array_ivec)
class umap_array_uvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_uvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_uvec___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_uvec___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_uvec___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_uvec___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_uvec___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_uvec_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_uvec_keys(self)

    def values(self):
        return _hfb3.umap_array_uvec_values(self)

    def items(self):
        return _hfb3.umap_array_uvec_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_uvec___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_uvec_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_uvec_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_uvec___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_uvec_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_uvec_swiginit(self, _hfb3.new_umap_array_uvec(*args))

    def empty(self):
        return _hfb3.umap_array_uvec_empty(self)

    def size(self):
        return _hfb3.umap_array_uvec_size(self)

    def swap(self, v):
        return _hfb3.umap_array_uvec_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_uvec_begin(self)

    def end(self):
        return _hfb3.umap_array_uvec_end(self)

    def clear(self):
        return _hfb3.umap_array_uvec_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_uvec_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_uvec_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_uvec_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_uvec_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_uvec

# Register umap_array_uvec in _hfb3:
_hfb3.umap_array_uvec_swigregister(umap_array_uvec)
class umap_array_imat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_imat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_imat___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_imat___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_imat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_imat___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_imat___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_imat_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_imat_keys(self)

    def values(self):
        return _hfb3.umap_array_imat_values(self)

    def items(self):
        return _hfb3.umap_array_imat_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_imat___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_imat_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_imat_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_imat___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_imat_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_imat_swiginit(self, _hfb3.new_umap_array_imat(*args))

    def empty(self):
        return _hfb3.umap_array_imat_empty(self)

    def size(self):
        return _hfb3.umap_array_imat_size(self)

    def swap(self, v):
        return _hfb3.umap_array_imat_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_imat_begin(self)

    def end(self):
        return _hfb3.umap_array_imat_end(self)

    def clear(self):
        return _hfb3.umap_array_imat_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_imat_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_imat_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_imat_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_imat_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_imat

# Register umap_array_imat in _hfb3:
_hfb3.umap_array_imat_swigregister(umap_array_imat)
class umap_array_umat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_umat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_umat___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_umat___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_umat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_umat___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_umat___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_umat_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_umat_keys(self)

    def values(self):
        return _hfb3.umap_array_umat_values(self)

    def items(self):
        return _hfb3.umap_array_umat_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_umat___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_umat_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_umat_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_umat___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_umat_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_umat_swiginit(self, _hfb3.new_umap_array_umat(*args))

    def empty(self):
        return _hfb3.umap_array_umat_empty(self)

    def size(self):
        return _hfb3.umap_array_umat_size(self)

    def swap(self, v):
        return _hfb3.umap_array_umat_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_umat_begin(self)

    def end(self):
        return _hfb3.umap_array_umat_end(self)

    def clear(self):
        return _hfb3.umap_array_umat_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_umat_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_umat_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_umat_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_umat_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_umat

# Register umap_array_umat in _hfb3:
_hfb3.umap_array_umat_swigregister(umap_array_umat)
class umap_array_icube(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_icube_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_icube___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_icube___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_icube___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_icube___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_icube___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_icube_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_icube_keys(self)

    def values(self):
        return _hfb3.umap_array_icube_values(self)

    def items(self):
        return _hfb3.umap_array_icube_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_icube___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_icube_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_icube_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_icube___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_icube_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_icube_swiginit(self, _hfb3.new_umap_array_icube(*args))

    def empty(self):
        return _hfb3.umap_array_icube_empty(self)

    def size(self):
        return _hfb3.umap_array_icube_size(self)

    def swap(self, v):
        return _hfb3.umap_array_icube_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_icube_begin(self)

    def end(self):
        return _hfb3.umap_array_icube_end(self)

    def clear(self):
        return _hfb3.umap_array_icube_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_icube_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_icube_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_icube_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_icube_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_icube

# Register umap_array_icube in _hfb3:
_hfb3.umap_array_icube_swigregister(umap_array_icube)
class umap_array_ucube(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.umap_array_ucube_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.umap_array_ucube___nonzero__(self)

    def __bool__(self):
        return _hfb3.umap_array_ucube___bool__(self)

    def __len__(self):
        return _hfb3.umap_array_ucube___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _hfb3.umap_array_ucube___getitem__(self, key)

    def __delitem__(self, key):
        return _hfb3.umap_array_ucube___delitem__(self, key)

    def has_key(self, key):
        return _hfb3.umap_array_ucube_has_key(self, key)

    def keys(self):
        return _hfb3.umap_array_ucube_keys(self)

    def values(self):
        return _hfb3.umap_array_ucube_values(self)

    def items(self):
        return _hfb3.umap_array_ucube_items(self)

    def __contains__(self, key):
        return _hfb3.umap_array_ucube___contains__(self, key)

    def key_iterator(self):
        return _hfb3.umap_array_ucube_key_iterator(self)

    def value_iterator(self):
        return _hfb3.umap_array_ucube_value_iterator(self)

    def __setitem__(self, *args):
        return _hfb3.umap_array_ucube___setitem__(self, *args)

    def asdict(self):
        return _hfb3.umap_array_ucube_asdict(self)

    def __init__(self, *args):
        _hfb3.umap_array_ucube_swiginit(self, _hfb3.new_umap_array_ucube(*args))

    def empty(self):
        return _hfb3.umap_array_ucube_empty(self)

    def size(self):
        return _hfb3.umap_array_ucube_size(self)

    def swap(self, v):
        return _hfb3.umap_array_ucube_swap(self, v)

    def begin(self):
        return _hfb3.umap_array_ucube_begin(self)

    def end(self):
        return _hfb3.umap_array_ucube_end(self)

    def clear(self):
        return _hfb3.umap_array_ucube_clear(self)

    def get_allocator(self):
        return _hfb3.umap_array_ucube_get_allocator(self)

    def count(self, x):
        return _hfb3.umap_array_ucube_count(self, x)

    def erase(self, *args):
        return _hfb3.umap_array_ucube_erase(self, *args)

    def find(self, x):
        return _hfb3.umap_array_ucube_find(self, x)
    __swig_destroy__ = _hfb3.delete_umap_array_ucube

# Register umap_array_ucube in _hfb3:
_hfb3.umap_array_ucube_swigregister(umap_array_ucube)
class vector_states(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vector_states_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vector_states___nonzero__(self)

    def __bool__(self):
        return _hfb3.vector_states___bool__(self)

    def __len__(self):
        return _hfb3.vector_states___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vector_states___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vector_states___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vector_states___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vector_states___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vector_states___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vector_states___setitem__(self, *args)

    def pop(self):
        return _hfb3.vector_states_pop(self)

    def append(self, x):
        return _hfb3.vector_states_append(self, x)

    def empty(self):
        return _hfb3.vector_states_empty(self)

    def size(self):
        return _hfb3.vector_states_size(self)

    def swap(self, v):
        return _hfb3.vector_states_swap(self, v)

    def begin(self):
        return _hfb3.vector_states_begin(self)

    def end(self):
        return _hfb3.vector_states_end(self)

    def rbegin(self):
        return _hfb3.vector_states_rbegin(self)

    def rend(self):
        return _hfb3.vector_states_rend(self)

    def clear(self):
        return _hfb3.vector_states_clear(self)

    def get_allocator(self):
        return _hfb3.vector_states_get_allocator(self)

    def pop_back(self):
        return _hfb3.vector_states_pop_back(self)

    def erase(self, *args):
        return _hfb3.vector_states_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vector_states_swiginit(self, _hfb3.new_vector_states(*args))

    def push_back(self, x):
        return _hfb3.vector_states_push_back(self, x)

    def front(self):
        return _hfb3.vector_states_front(self)

    def back(self):
        return _hfb3.vector_states_back(self)

    def assign(self, n, x):
        return _hfb3.vector_states_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vector_states_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vector_states_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vector_states_reserve(self, n)

    def capacity(self):
        return _hfb3.vector_states_capacity(self)
    __swig_destroy__ = _hfb3.delete_vector_states

# Register vector_states in _hfb3:
_hfb3.vector_states_swigregister(vector_states)
class vector_geometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.vector_geometry_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.vector_geometry___nonzero__(self)

    def __bool__(self):
        return _hfb3.vector_geometry___bool__(self)

    def __len__(self):
        return _hfb3.vector_geometry___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.vector_geometry___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.vector_geometry___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.vector_geometry___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.vector_geometry___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.vector_geometry___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.vector_geometry___setitem__(self, *args)

    def pop(self):
        return _hfb3.vector_geometry_pop(self)

    def append(self, x):
        return _hfb3.vector_geometry_append(self, x)

    def empty(self):
        return _hfb3.vector_geometry_empty(self)

    def size(self):
        return _hfb3.vector_geometry_size(self)

    def swap(self, v):
        return _hfb3.vector_geometry_swap(self, v)

    def begin(self):
        return _hfb3.vector_geometry_begin(self)

    def end(self):
        return _hfb3.vector_geometry_end(self)

    def rbegin(self):
        return _hfb3.vector_geometry_rbegin(self)

    def rend(self):
        return _hfb3.vector_geometry_rend(self)

    def clear(self):
        return _hfb3.vector_geometry_clear(self)

    def get_allocator(self):
        return _hfb3.vector_geometry_get_allocator(self)

    def pop_back(self):
        return _hfb3.vector_geometry_pop_back(self)

    def erase(self, *args):
        return _hfb3.vector_geometry_erase(self, *args)

    def __init__(self, *args):
        _hfb3.vector_geometry_swiginit(self, _hfb3.new_vector_geometry(*args))

    def push_back(self, x):
        return _hfb3.vector_geometry_push_back(self, x)

    def front(self):
        return _hfb3.vector_geometry_front(self)

    def back(self):
        return _hfb3.vector_geometry_back(self)

    def assign(self, n, x):
        return _hfb3.vector_geometry_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.vector_geometry_resize(self, *args)

    def insert(self, *args):
        return _hfb3.vector_geometry_insert(self, *args)

    def reserve(self, n):
        return _hfb3.vector_geometry_reserve(self, n)

    def capacity(self):
        return _hfb3.vector_geometry_capacity(self)
    __swig_destroy__ = _hfb3.delete_vector_geometry

# Register vector_geometry in _hfb3:
_hfb3.vector_geometry_swigregister(vector_geometry)
class Generic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def info(self, *args):
        return _hfb3.Generic_info(self, *args)

    def __repr__(self):
      return self.info()
    def show(self):
      pass


    def __init__(self):
        _hfb3.Generic_swiginit(self, _hfb3.new_Generic())
    __swig_destroy__ = _hfb3.delete_Generic

# Register Generic in _hfb3:
_hfb3.Generic_swigregister(Generic)
class Action(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.Action_swiginit(self, _hfb3.new_Action(*args))

    def run(self):
        return _hfb3.Action_run(self)

    def calcHFBblocking(self):
        return _hfb3.Action_calcHFBblocking(self)

    def calcHFBquiet(self):
        return _hfb3.Action_calcHFBquiet(self)

    def calcHFB(self):
        return _hfb3.Action_calcHFB(self)

    def calcWS(self):
        return _hfb3.Action_calcWS(self)

    def calcEnergies(self):
        return _hfb3.Action_calcEnergies(self)

    def calcObservables(self):
        return _hfb3.Action_calcObservables(self)

    def calcMultipoleExpansion(self):
        return _hfb3.Action_calcMultipoleExpansion(self)

    def getBlockingHistTable(self):
        return _hfb3.Action_getBlockingHistTable(self)

    def info(self, *args):
        return _hfb3.Action_info(self, *args)
    validKeys = property(_hfb3.Action_validKeys_get, _hfb3.Action_validKeys_set)
    dataTree = property(_hfb3.Action_dataTree_get, _hfb3.Action_dataTree_set)
    state = property(_hfb3.Action_state_get, _hfb3.Action_state_set)
    blockingTrials = property(_hfb3.Action_blockingTrials_get, _hfb3.Action_blockingTrials_set)
    basisOptimization = property(_hfb3.Action_basisOptimization_get, _hfb3.Action_basisOptimization_set)
    saveResultFiles = property(_hfb3.Action_saveResultFiles_get, _hfb3.Action_saveResultFiles_set)
    jobName = property(_hfb3.Action_jobName_get, _hfb3.Action_jobName_set)
    action = property(_hfb3.Action_action_get, _hfb3.Action_action_set)
    nbBlockingTrials = property(_hfb3.Action_nbBlockingTrials_get, _hfb3.Action_nbBlockingTrials_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_Action

# Register Action in _hfb3:
_hfb3.Action_swigregister(Action)
cvar = _hfb3.cvar

class Axis(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.Axis_swiginit(self, _hfb3.new_Axis(*args))

    def __eq__(self, other):
        return _hfb3.Axis___eq__(self, other)

    def __ne__(self, other):
        return _hfb3.Axis___ne__(self, other)

    def info(self, *args):
        return _hfb3.Axis_info(self, *args)
    GAUSS_LEGENDRE = _hfb3.Axis_GAUSS_LEGENDRE
    GAUSS_LAGUERRE = _hfb3.Axis_GAUSS_LAGUERRE
    GAUSS_HERMITE = _hfb3.Axis_GAUSS_HERMITE
    REGULAR = _hfb3.Axis_REGULAR
    type = property(_hfb3.Axis_type_get, _hfb3.Axis_type_set)
    nb = property(_hfb3.Axis_nb_get, _hfb3.Axis_nb_set)
    w = property(_hfb3.Axis_w_get, _hfb3.Axis_w_set)
    p = property(_hfb3.Axis_p_get, _hfb3.Axis_p_set)
    we = property(_hfb3.Axis_we_get, _hfb3.Axis_we_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_Axis

# Register Axis in _hfb3:
_hfb3.Axis_swigregister(Axis)
Axis.typeName = _hfb3.cvar.Axis_typeName


def encode(*args):
    return _hfb3.encode(*args)

def decode(s):
    return _hfb3.decode(s)
class Basis(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def fromBerger2ct(_nOscil, _g_q, _hw, _qzr, _d_0, _n_zMaxImposed):
        return _hfb3.Basis_fromBerger2ct(_nOscil, _g_q, _hw, _qzr, _d_0, _n_zMaxImposed)

    def cylTruncate(self):
        return _hfb3.Basis_cylTruncate(self)

    @staticmethod
    def hermite(*args):
        return _hfb3.Basis_hermite(*args)

    @staticmethod
    def laguerre(*args):
        return _hfb3.Basis_laguerre(*args)

    @staticmethod
    def legendre(*args):
        return _hfb3.Basis_legendre(*args)

    def zPartScalar(self, z, n_z, d=-1):
        return _hfb3.Basis_zPartScalar(self, z, n_z, d)

    def rPartScalar(self, r, m, n):
        return _hfb3.Basis_rPartScalar(self, r, m, n)

    def zPart(self, z, n_z, d=-1):
        return _hfb3.Basis_zPart(self, z, n_z, d)

    def rPart(self, r, m, n):
        return _hfb3.Basis_rPart(self, r, m, n)

    def debugMat(self, mat):
        return _hfb3.Basis_debugMat(self, mat)

    def rPartNorm(self, eta, m, n):
        return _hfb3.Basis_rPartNorm(self, eta, m, n)

    def zPartNorm(self, zeta, n_z):
        return _hfb3.Basis_zPartNorm(self, zeta, n_z)

    def rPartNormReduced(self, eta, m, n):
        return _hfb3.Basis_rPartNormReduced(self, eta, m, n)

    def zPartNormReduced(self, zeta, n_z):
        return _hfb3.Basis_zPartNormReduced(self, zeta, n_z)

    def rPartNormd(self, eta, m, n, ipm):
        return _hfb3.Basis_rPartNormd(self, eta, m, n, ipm)

    def zPartNormd(self, zeta, n_z):
        return _hfb3.Basis_zPartNormd(self, zeta, n_z)

    def rPartL0(self, eta, m, n):
        return _hfb3.Basis_rPartL0(self, eta, m, n)

    def rPartLavecm(self, eta, m, n):
        return _hfb3.Basis_rPartLavecm(self, eta, m, n)

    def getDataTree(self, *args):
        return _hfb3.Basis_getDataTree(self, *args)

    def info(self, *args):
        return _hfb3.Basis_info(self, *args)

    def niceStr(self):
        return _hfb3.Basis_niceStr(self)

    def __eq__(self, other):
        return _hfb3.Basis___eq__(self, other)

    def __ne__(self, other):
        return _hfb3.Basis___ne__(self, other)

    def calcWDN(self):
        return _hfb3.Basis_calcWDN(self)

    def calcRecouv(self):
        return _hfb3.Basis_calcRecouv(self)

    def calcHharmo2ct(self):
        return _hfb3.Basis_calcHharmo2ct(self)

    def getTransformationMatrix(self, other):
        return _hfb3.Basis_getTransformationMatrix(self, other)

    def getOverlapMatrixHOZ(self, other):
        return _hfb3.Basis_getOverlapMatrixHOZ(self, other)

    def getOverlapMatrixHOR(self, other):
        return _hfb3.Basis_getOverlapMatrixHOR(self, other)

    def getBasisDistance(self, otherBasis):
        return _hfb3.Basis_getBasisDistance(self, otherBasis)

    def getOverlapHO(self, other, iB, iK, overlapMatrixHOR, overlapMatrixHOZ):
        return _hfb3.Basis_getOverlapHO(self, other, iB, iK, overlapMatrixHOR, overlapMatrixHOZ)

    def getOverlapMatrixHO(self, other):
        return _hfb3.Basis_getOverlapMatrixHO(self, other)

    def calcTab(self):
        return _hfb3.Basis_calcTab(self)

    def tabzd(self, nza, nzb, da, db):
        return _hfb3.Basis_tabzd(self, nza, nzb, da, db)

    def calcTalmanr(self):
        return _hfb3.Basis_calcTalmanr(self)

    def calcTalmanz(self):
        return _hfb3.Basis_calcTalmanz(self)

    def calcMoshinskyr(self):
        return _hfb3.Basis_calcMoshinskyr(self)

    def calcMoshinskyz(self):
        return _hfb3.Basis_calcMoshinskyz(self)

    def getFullOverlap(self, otherBasis):
        return _hfb3.Basis_getFullOverlap(self, otherBasis)

    def getFullMoshinskyr(self, m1, n1, m2, n2, M1, N1, M2, N2):
        return _hfb3.Basis_getFullMoshinskyr(self, m1, n1, m2, n2, M1, N1, M2, N2)

    def getFullMoshinskyz(self):
        return _hfb3.Basis_getFullMoshinskyz(self)

    def logMultinomial(self, a, b, c, d):
        return _hfb3.Basis_logMultinomial(self, a, b, c, d)

    def binomialSign(self, n, m):
        return _hfb3.Basis_binomialSign(self, n, m)

    def logBinomial(self, n, m):
        return _hfb3.Basis_logBinomial(self, n, m)

    def calcIz(self):
        return _hfb3.Basis_calcIz(self)

    def calcIr(self):
        return _hfb3.Basis_calcIr(self)

    def calcMoshinskyDG(self):
        return _hfb3.Basis_calcMoshinskyDG(self)

    def calcMoshinskyTDG(self):
        return _hfb3.Basis_calcMoshinskyTDG(self)

    def CGcoeff(self, j, m, j1, m1, j2, m2):
        return _hfb3.Basis_CGcoeff(self, j, m, j1, m1, j2, m2)

    def getNiceInfo(self):
        return _hfb3.Basis_getNiceInfo(self)
    validKeys = property(_hfb3.Basis_validKeys_get, _hfb3.Basis_validKeys_set)
    d_0 = property(_hfb3.Basis_d_0_get, _hfb3.Basis_d_0_set)
    dMax = property(_hfb3.Basis_dMax_get, _hfb3.Basis_dMax_set)
    sMax = property(_hfb3.Basis_sMax_get, _hfb3.Basis_sMax_set)
    nOscil = property(_hfb3.Basis_nOscil_get, _hfb3.Basis_nOscil_set)
    n_zGlobalMax = property(_hfb3.Basis_n_zGlobalMax_get, _hfb3.Basis_n_zGlobalMax_set)
    nGlobalMax = property(_hfb3.Basis_nGlobalMax_get, _hfb3.Basis_nGlobalMax_set)
    mMax = property(_hfb3.Basis_mMax_get, _hfb3.Basis_mMax_set)
    Nmaxr = property(_hfb3.Basis_Nmaxr_get, _hfb3.Basis_Nmaxr_set)
    nMax = property(_hfb3.Basis_nMax_get, _hfb3.Basis_nMax_set)
    n_zMax = property(_hfb3.Basis_n_zMax_get, _hfb3.Basis_n_zMax_set)
    n_zMaxImposed = property(_hfb3.Basis_n_zMaxImposed_get, _hfb3.Basis_n_zMaxImposed_set)
    g_q = property(_hfb3.Basis_g_q_get, _hfb3.Basis_g_q_set)
    b_r = property(_hfb3.Basis_b_r_get, _hfb3.Basis_b_r_set)
    b_z = property(_hfb3.Basis_b_z_get, _hfb3.Basis_b_z_set)
    n_zMaxBerger = property(_hfb3.Basis_n_zMaxBerger_get, _hfb3.Basis_n_zMaxBerger_set)
    alfBerger = property(_hfb3.Basis_alfBerger_get, _hfb3.Basis_alfBerger_set)
    betBerger = property(_hfb3.Basis_betBerger_get, _hfb3.Basis_betBerger_set)
    qBerger = property(_hfb3.Basis_qBerger_get, _hfb3.Basis_qBerger_set)
    hwrBerger = property(_hfb3.Basis_hwrBerger_get, _hfb3.Basis_hwrBerger_set)
    hwzBerger = property(_hfb3.Basis_hwzBerger_get, _hfb3.Basis_hwzBerger_set)
    hwBerger = property(_hfb3.Basis_hwBerger_get, _hfb3.Basis_hwBerger_set)
    omegaIndexHO = property(_hfb3.Basis_omegaIndexHO_get, _hfb3.Basis_omegaIndexHO_set)
    mSize = property(_hfb3.Basis_mSize_get, _hfb3.Basis_mSize_set)
    W = property(_hfb3.Basis_W_get, _hfb3.Basis_W_set)
    N = property(_hfb3.Basis_N_get, _hfb3.Basis_N_set)
    S = property(_hfb3.Basis_S_get, _hfb3.Basis_S_set)
    ORtoHO = property(_hfb3.Basis_ORtoHO_get, _hfb3.Basis_ORtoHO_set)
    H = property(_hfb3.Basis_H_get, _hfb3.Basis_H_set)
    Tab = property(_hfb3.Basis_Tab_get, _hfb3.Basis_Tab_set)
    talmanz = property(_hfb3.Basis_talmanz_get, _hfb3.Basis_talmanz_set)
    talmanr = property(_hfb3.Basis_talmanr_get, _hfb3.Basis_talmanr_set)
    moshinskyr = property(_hfb3.Basis_moshinskyr_get, _hfb3.Basis_moshinskyr_set)
    moshinskyz = property(_hfb3.Basis_moshinskyz_get, _hfb3.Basis_moshinskyz_set)
    HOqn = property(_hfb3.Basis_HOqn_get, _hfb3.Basis_HOqn_set)
    HFqn = property(_hfb3.Basis_HFqn_get, _hfb3.Basis_HFqn_set)
    QNmn = property(_hfb3.Basis_QNmn_get, _hfb3.Basis_QNmn_set)
    QNmnn_zd = property(_hfb3.Basis_QNmnn_zd_get, _hfb3.Basis_QNmnn_zd_set)
    QNn_zMax = property(_hfb3.Basis_QNn_zMax_get, _hfb3.Basis_QNn_zMax_set)
    QNn_zMaxd = property(_hfb3.Basis_QNn_zMaxd_get, _hfb3.Basis_QNn_zMaxd_set)
    ORqn = property(_hfb3.Basis_ORqn_get, _hfb3.Basis_ORqn_set)
    HOtoOR = property(_hfb3.Basis_HOtoOR_get, _hfb3.Basis_HOtoOR_set)
    omegaIndexOR = property(_hfb3.Basis_omegaIndexOR_get, _hfb3.Basis_omegaIndexOR_set)
    Recouvz = property(_hfb3.Basis_Recouvz_get, _hfb3.Basis_Recouvz_set)
    Recouv = property(_hfb3.Basis_Recouv_get, _hfb3.Basis_Recouv_set)
    Ir = property(_hfb3.Basis_Ir_get, _hfb3.Basis_Ir_set)
    Ir_plus = property(_hfb3.Basis_Ir_plus_get, _hfb3.Basis_Ir_plus_set)
    Ir_minus = property(_hfb3.Basis_Ir_minus_get, _hfb3.Basis_Ir_minus_set)
    Ir_mm = property(_hfb3.Basis_Ir_mm_get, _hfb3.Basis_Ir_mm_set)
    Ir_pp = property(_hfb3.Basis_Ir_pp_get, _hfb3.Basis_Ir_pp_set)
    Iz = property(_hfb3.Basis_Iz_get, _hfb3.Basis_Iz_set)
    NablaIz = property(_hfb3.Basis_NablaIz_get, _hfb3.Basis_NablaIz_set)
    Jz = property(_hfb3.Basis_Jz_get, _hfb3.Basis_Jz_set)
    moshinskyDG = property(_hfb3.Basis_moshinskyDG_get, _hfb3.Basis_moshinskyDG_set)
    moshinskyTDG = property(_hfb3.Basis_moshinskyTDG_get, _hfb3.Basis_moshinskyTDG_set)
    NmaxDG = property(_hfb3.Basis_NmaxDG_get, _hfb3.Basis_NmaxDG_set)
    NmaxTDG = property(_hfb3.Basis_NmaxTDG_get, _hfb3.Basis_NmaxTDG_set)

    def __init__(self, *args):
        _hfb3.Basis_swiginit(self, _hfb3.new_Basis(*args))
    __swig_destroy__ = _hfb3.delete_Basis

# Register Basis in _hfb3:
_hfb3.Basis_swigregister(Basis)
class CliParser(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, argc, argv):
        _hfb3.CliParser_swiginit(self, _hfb3.new_CliParser(argc, argv))

    @staticmethod
    def help():
        return _hfb3.CliParser_help()

    @staticmethod
    def version():
        return _hfb3.CliParser_version()

    @staticmethod
    def printKeys():
        return _hfb3.CliParser_printKeys()

    @staticmethod
    def printInteractions():
        return _hfb3.CliParser_printInteractions()

    def info(self, *args):
        return _hfb3.CliParser_info(self, *args)
    fileToLoad = property(_hfb3.CliParser_fileToLoad_get, _hfb3.CliParser_fileToLoad_set)
    saveTo = property(_hfb3.CliParser_saveTo_get, _hfb3.CliParser_saveTo_set)
    showLogo = property(_hfb3.CliParser_showLogo_get, _hfb3.CliParser_showLogo_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_CliParser

# Register CliParser in _hfb3:
_hfb3.CliParser_swigregister(CliParser)
class Constraint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MM = _hfb3.Constraint_MM
    SD = _hfb3.Constraint_SD
    MA = _hfb3.Constraint_MA
    QN = _hfb3.Constraint_QN

    def info(self, *args):
        return _hfb3.Constraint_info(self, *args)

    def getDataTree(self):
        return _hfb3.Constraint_getDataTree(self)

    @staticmethod
    def fromDataTree(dataTree):
        return _hfb3.Constraint_fromDataTree(dataTree)

    @staticmethod
    def toDefParameters(arg1, arg2, arg3):
        return _hfb3.Constraint_toDefParameters(arg1, arg2, arg3)

    @staticmethod
    def niceStr(v, isShort=False):
        return _hfb3.Constraint_niceStr(v, isShort)
    validKeys = property(_hfb3.Constraint_validKeys_get, _hfb3.Constraint_validKeys_set)
    type = property(_hfb3.Constraint_type_get, _hfb3.Constraint_type_set)
    val = property(_hfb3.Constraint_val_get, _hfb3.Constraint_val_set)
    lbd = property(_hfb3.Constraint_lbd_get, _hfb3.Constraint_lbd_set)
    measuredVal = property(_hfb3.Constraint_measuredVal_get, _hfb3.Constraint_measuredVal_set)
    factor = property(_hfb3.Constraint_factor_get, _hfb3.Constraint_factor_set)
    typeStr = property(_hfb3.Constraint_typeStr_get, _hfb3.Constraint_typeStr_set)
    lm = property(_hfb3.Constraint_lm_get, _hfb3.Constraint_lm_set)
    iso = property(_hfb3.Constraint_iso_get, _hfb3.Constraint_iso_set)
    gender = property(_hfb3.Constraint_gender_get, _hfb3.Constraint_gender_set)
    itermax = property(_hfb3.Constraint_itermax_get, _hfb3.Constraint_itermax_set)
    useForInertias = property(_hfb3.Constraint_useForInertias_get, _hfb3.Constraint_useForInertias_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass


    def __init__(self, *args):
        _hfb3.Constraint_swiginit(self, _hfb3.new_Constraint(*args))
    __swig_destroy__ = _hfb3.delete_Constraint

# Register Constraint in _hfb3:
_hfb3.Constraint_swigregister(Constraint)
Constraint.types = _hfb3.cvar.Constraint_types
Constraint.genderValue = _hfb3.cvar.Constraint_genderValue
Constraint.lmValue = _hfb3.cvar.Constraint_lmValue
Constraint.isoValue = _hfb3.cvar.Constraint_isoValue
Constraint.factorValue = _hfb3.cvar.Constraint_factorValue
Constraint.useForInertiasValue = _hfb3.cvar.Constraint_useForInertiasValue

class DataTree(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.DataTree_swiginit(self, _hfb3.new_DataTree(*args))

    def isEmpty(self):
        return _hfb3.DataTree_isEmpty(self)

    def size(self):
        return _hfb3.DataTree_size(self)

    def info(self, *args):
        return _hfb3.DataTree_info(self, *args)

    def abstract(self):
        return _hfb3.DataTree_abstract(self)

    def getKeys(self, pattern):
        return _hfb3.DataTree_getKeys(self, pattern)

    def contains(self, *args):
        return _hfb3.DataTree_contains(self, *args)

    def containsPattern(self, pattern):
        return _hfb3.DataTree_containsPattern(self, pattern)

    def get(self, *args):
        return _hfb3.DataTree_get(self, *args)

    def getSection(self, sectionName):
        return _hfb3.DataTree_getSection(self, sectionName)

    def getB(self, key, ignore=False, isFound=None):
        return _hfb3.DataTree_getB(self, key, ignore, isFound)

    def getI(self, key, ignore=False):
        return _hfb3.DataTree_getI(self, key, ignore)

    def getD(self, key, ignore=False):
        return _hfb3.DataTree_getD(self, key, ignore)

    def getS(self, key, ignore=False):
        return _hfb3.DataTree_getS(self, key, ignore)

    def getV(self, key, ignore=False):
        return _hfb3.DataTree_getV(self, key, ignore)

    def getM(self, key, ignore=False):
        return _hfb3.DataTree_getM(self, key, ignore)

    def getC(self, key, ignore=False):
        return _hfb3.DataTree_getC(self, key, ignore)

    def getIV(self, key, ignore=False):
        return _hfb3.DataTree_getIV(self, key, ignore)

    def getIM(self, key, ignore=False):
        return _hfb3.DataTree_getIM(self, key, ignore)

    def getIC(self, key, ignore=False):
        return _hfb3.DataTree_getIC(self, key, ignore)

    def getUV(self, key, ignore=False):
        return _hfb3.DataTree_getUV(self, key, ignore)

    def getUM(self, key, ignore=False):
        return _hfb3.DataTree_getUM(self, key, ignore)

    def getUC(self, key, ignore=False):
        return _hfb3.DataTree_getUC(self, key, ignore)

    def getMIV(self, key, ignore=False):
        return _hfb3.DataTree_getMIV(self, key, ignore)

    def getMIM(self, key, ignore=False):
        return _hfb3.DataTree_getMIM(self, key, ignore)

    def getMIC(self, key, ignore=False):
        return _hfb3.DataTree_getMIC(self, key, ignore)

    def getMUV(self, key, ignore=False):
        return _hfb3.DataTree_getMUV(self, key, ignore)

    def getMUM(self, key, ignore=False):
        return _hfb3.DataTree_getMUM(self, key, ignore)

    def getMUC(self, key, ignore=False):
        return _hfb3.DataTree_getMUC(self, key, ignore)

    def getMV(self, key, ignore=False):
        return _hfb3.DataTree_getMV(self, key, ignore)

    def getMM(self, key, ignore=False):
        return _hfb3.DataTree_getMM(self, key, ignore)

    def getMC(self, key, ignore=False):
        return _hfb3.DataTree_getMC(self, key, ignore)

    def setS(self, key, val):
        return _hfb3.DataTree_setS(self, key, val)

    def setSC(self, key, val):
        return _hfb3.DataTree_setSC(self, key, val)

    def setI(self, key, val):
        return _hfb3.DataTree_setI(self, key, val)

    def setD(self, key, val):
        return _hfb3.DataTree_setD(self, key, val)

    def setV(self, key, val):
        return _hfb3.DataTree_setV(self, key, val)

    def setM(self, key, val):
        return _hfb3.DataTree_setM(self, key, val)

    def setC(self, key, val):
        return _hfb3.DataTree_setC(self, key, val)

    def setUV(self, key, val):
        return _hfb3.DataTree_setUV(self, key, val)

    def setUM(self, key, val):
        return _hfb3.DataTree_setUM(self, key, val)

    def setUC(self, key, val):
        return _hfb3.DataTree_setUC(self, key, val)

    def setIV(self, key, val):
        return _hfb3.DataTree_setIV(self, key, val)

    def setIM(self, key, val):
        return _hfb3.DataTree_setIM(self, key, val)

    def setIC(self, key, val):
        return _hfb3.DataTree_setIC(self, key, val)

    def setMUV(self, key, val):
        return _hfb3.DataTree_setMUV(self, key, val)

    def setMUM(self, key, val):
        return _hfb3.DataTree_setMUM(self, key, val)

    def setMUC(self, key, val):
        return _hfb3.DataTree_setMUC(self, key, val)

    def setMIV(self, key, val):
        return _hfb3.DataTree_setMIV(self, key, val)

    def setMIM(self, key, val):
        return _hfb3.DataTree_setMIM(self, key, val)

    def setMIC(self, key, val):
        return _hfb3.DataTree_setMIC(self, key, val)

    def setMV(self, key, val):
        return _hfb3.DataTree_setMV(self, key, val)

    def setMM(self, key, val):
        return _hfb3.DataTree_setMM(self, key, val)

    def setMC(self, key, val):
        return _hfb3.DataTree_setMC(self, key, val)

    def setB(self, key, val):
        return _hfb3.DataTree_setB(self, key, val)

    def setE(self, key):
        return _hfb3.DataTree_setE(self, key)

    def setDefault(self):
        return _hfb3.DataTree_setDefault(self)

    @staticmethod
    def getDefault():
        return _hfb3.DataTree_getDefault()

    def clear(self):
        return _hfb3.DataTree_clear(self)

    def clean(self):
        return _hfb3.DataTree_clean(self)

    def merge(self, other):
        return _hfb3.DataTree_merge(self, other)

    def __add__(self, other):
        return _hfb3.DataTree___add__(self, other)

    def del_key(self, key):
        return _hfb3.DataTree_del_key(self, key)

    def validate(self):
        return _hfb3.DataTree_validate(self)

    def isValid(self, *args):
        return _hfb3.DataTree_isValid(self, *args)

    def getType(self, key):
        return _hfb3.DataTree_getType(self, key)

    def save(self, filename, verbose=True):
        return _hfb3.DataTree_save(self, filename, verbose)

    @staticmethod
    def fromContent(content):
        return _hfb3.DataTree_fromContent(content)

    def __eq__(self, arg2):
        return _hfb3.DataTree___eq__(self, arg2)

    def __ne__(self, other):
        return _hfb3.DataTree___ne__(self, other)
    boolMap = property(_hfb3.DataTree_boolMap_get, _hfb3.DataTree_boolMap_set)
    intMap = property(_hfb3.DataTree_intMap_get, _hfb3.DataTree_intMap_set)
    doubleMap = property(_hfb3.DataTree_doubleMap_get, _hfb3.DataTree_doubleMap_set)
    stringMap = property(_hfb3.DataTree_stringMap_get, _hfb3.DataTree_stringMap_set)
    ivecMap = property(_hfb3.DataTree_ivecMap_get, _hfb3.DataTree_ivecMap_set)
    uvecMap = property(_hfb3.DataTree_uvecMap_get, _hfb3.DataTree_uvecMap_set)
    imatMap = property(_hfb3.DataTree_imatMap_get, _hfb3.DataTree_imatMap_set)
    umatMap = property(_hfb3.DataTree_umatMap_get, _hfb3.DataTree_umatMap_set)
    icubeMap = property(_hfb3.DataTree_icubeMap_get, _hfb3.DataTree_icubeMap_set)
    ucubeMap = property(_hfb3.DataTree_ucubeMap_get, _hfb3.DataTree_ucubeMap_set)
    vecMap = property(_hfb3.DataTree_vecMap_get, _hfb3.DataTree_vecMap_set)
    matMap = property(_hfb3.DataTree_matMap_get, _hfb3.DataTree_matMap_set)
    cubeMap = property(_hfb3.DataTree_cubeMap_get, _hfb3.DataTree_cubeMap_set)
    multiIVecMap = property(_hfb3.DataTree_multiIVecMap_get, _hfb3.DataTree_multiIVecMap_set)
    multiUVecMap = property(_hfb3.DataTree_multiUVecMap_get, _hfb3.DataTree_multiUVecMap_set)
    multiIMatMap = property(_hfb3.DataTree_multiIMatMap_get, _hfb3.DataTree_multiIMatMap_set)
    multiUMatMap = property(_hfb3.DataTree_multiUMatMap_get, _hfb3.DataTree_multiUMatMap_set)
    multiICubeMap = property(_hfb3.DataTree_multiICubeMap_get, _hfb3.DataTree_multiICubeMap_set)
    multiUCubeMap = property(_hfb3.DataTree_multiUCubeMap_get, _hfb3.DataTree_multiUCubeMap_set)
    multiVecMap = property(_hfb3.DataTree_multiVecMap_get, _hfb3.DataTree_multiVecMap_set)
    multiMatMap = property(_hfb3.DataTree_multiMatMap_get, _hfb3.DataTree_multiMatMap_set)
    multiCubeMap = property(_hfb3.DataTree_multiCubeMap_get, _hfb3.DataTree_multiCubeMap_set)
    emptyKeys = property(_hfb3.DataTree_emptyKeys_get, _hfb3.DataTree_emptyKeys_set)
    strict_mode = property(_hfb3.DataTree_strict_mode_get, _hfb3.DataTree_strict_mode_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_DataTree

# Register DataTree in _hfb3:
_hfb3.DataTree_swigregister(DataTree)
class Discrete(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.Discrete_swiginit(self, _hfb3.new_Discrete(*args))

    def calcWaveFunctions(self):
        return _hfb3.Discrete_calcWaveFunctions(self)

    def getWaveFunctionXZ(self, id):
        return _hfb3.Discrete_getWaveFunctionXZ(self, id)

    def getWaveFunctionXYZ(self, id):
        return _hfb3.Discrete_getWaveFunctionXYZ(self, id)

    def getLocalXZ(self, rho, ensurePositive):
        return _hfb3.Discrete_getLocalXZ(self, rho, ensurePositive)

    def getLocalXYZ(self, rho):
        return _hfb3.Discrete_getLocalXYZ(self, rho)

    def getHFmXZ(self, matD, id):
        return _hfb3.Discrete_getHFmXZ(self, matD, id)

    def getHOXZ(self, id):
        return _hfb3.Discrete_getHOXZ(self, id)

    def calcDensit(self, rhonOrig, rhopOrig, ngla, nghe):
        return _hfb3.Discrete_calcDensit(self, rhonOrig, rhopOrig, ngla, nghe)

    def clear(self):
        return _hfb3.Discrete_clear(self)

    def info(self, *args):
        return _hfb3.Discrete_info(self, *args)

    @staticmethod
    def getLocalDensity(state, x, y, z):
        return _hfb3.Discrete_getLocalDensity(state, x, y, z)
    Densit = property(_hfb3.Discrete_Densit_get, _hfb3.Discrete_Densit_set)
    SODensit = property(_hfb3.Discrete_SODensit_get, _hfb3.Discrete_SODensit_set)
    BDensit = property(_hfb3.Discrete_BDensit_get, _hfb3.Discrete_BDensit_set)
    BSODensit = property(_hfb3.Discrete_BSODensit_get, _hfb3.Discrete_BSODensit_set)
    BSODensit1 = property(_hfb3.Discrete_BSODensit1_get, _hfb3.Discrete_BSODensit1_set)
    isNegative = property(_hfb3.Discrete_isNegative_get, _hfb3.Discrete_isNegative_set)
    mesh = property(_hfb3.Discrete_mesh_get, _hfb3.Discrete_mesh_set)
    basis = property(_hfb3.Discrete_basis_get, _hfb3.Discrete_basis_set)
    zVals = property(_hfb3.Discrete_zVals_get, _hfb3.Discrete_zVals_set)
    rVals = property(_hfb3.Discrete_rVals_get, _hfb3.Discrete_rVals_set)
    rpVals = property(_hfb3.Discrete_rpVals_get, _hfb3.Discrete_rpVals_set)
    waveZ = property(_hfb3.Discrete_waveZ_get, _hfb3.Discrete_waveZ_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_Discrete

# Register Discrete in _hfb3:
_hfb3.Discrete_swigregister(Discrete)
class Field(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DIRECT = _hfb3.Field_DIRECT
    EXCHANGE = _hfb3.Field_EXCHANGE
    PAIRING = _hfb3.Field_PAIRING

    def calcField(self):
        return _hfb3.Field_calcField(self)

    def calcEnergy(self):
        return _hfb3.Field_calcEnergy(self)

    def setDef(self, _def):
        return _hfb3.Field_setDef(self, _def)

    def getWSPot(self):
        return _hfb3.Field_getWSPot(self)

    def clear(self):
        return _hfb3.Field_clear(self)

    def getEnergy(self, iso, type):
        return _hfb3.Field_getEnergy(self, iso, type)

    def info(self, *args):
        return _hfb3.Field_info(self, *args)

    def ramInfo(self):
        return _hfb3.Field_ramInfo(self)

    def timeInfo(self):
        return _hfb3.Field_timeInfo(self)
    state_ptr = property(_hfb3.Field_state_ptr_get, _hfb3.Field_state_ptr_set)
    state = property(_hfb3.Field_state_get, _hfb3.Field_state_set)
    parameters = property(_hfb3.Field_parameters_get, _hfb3.Field_parameters_set)
    basis = property(_hfb3.Field_basis_get, _hfb3.Field_basis_set)
    rho = property(_hfb3.Field_rho_get, _hfb3.Field_rho_set)
    kappa = property(_hfb3.Field_kappa_get, _hfb3.Field_kappa_set)
    nGLA = property(_hfb3.Field_nGLA_get, _hfb3.Field_nGLA_set)
    nGHE = property(_hfb3.Field_nGHE_get, _hfb3.Field_nGHE_set)
    nGLE = property(_hfb3.Field_nGLE_get, _hfb3.Field_nGLE_set)
    calculatingLength = property(_hfb3.Field_calculatingLength_get, _hfb3.Field_calculatingLength_set)
    ramTable = property(_hfb3.Field_ramTable_get, _hfb3.Field_ramTable_set)
    timeTable = property(_hfb3.Field_timeTable_get, _hfb3.Field_timeTable_set)
    contributeToEnergy = property(_hfb3.Field_contributeToEnergy_get, _hfb3.Field_contributeToEnergy_set)
    field = property(_hfb3.Field_field_get, _hfb3.Field_field_set)
    energy = property(_hfb3.Field_energy_get, _hfb3.Field_energy_set)
    name = property(_hfb3.Field_name_get, _hfb3.Field_name_set)
    shortName = property(_hfb3.Field_shortName_get, _hfb3.Field_shortName_set)
    enabled = property(_hfb3.Field_enabled_get, _hfb3.Field_enabled_set)
    energyFactor = property(_hfb3.Field_energyFactor_get, _hfb3.Field_energyFactor_set)
    mustBeCleared = property(_hfb3.Field_mustBeCleared_get, _hfb3.Field_mustBeCleared_set)
    warningStr = property(_hfb3.Field_warningStr_get, _hfb3.Field_warningStr_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass


    def __init__(self, *args):
        _hfb3.Field_swiginit(self, _hfb3.new_Field(*args))
    __swig_destroy__ = _hfb3.delete_Field

# Register Field in _hfb3:
_hfb3.Field_swigregister(Field)
Field.typeStr = _hfb3.cvar.Field_typeStr

class FieldCDM2(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _parameters, _state):
        _hfb3.FieldCDM2_swiginit(self, _hfb3.new_FieldCDM2(_parameters, _state))

    def calcField(self):
        return _hfb3.FieldCDM2_calcField(self)
    __swig_destroy__ = _hfb3.delete_FieldCDM2

# Register FieldCDM2 in _hfb3:
_hfb3.FieldCDM2_swigregister(FieldCDM2)
class FieldCentral(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _parameters, _state):
        _hfb3.FieldCentral_swiginit(self, _hfb3.new_FieldCentral(_parameters, _state))

    def calcField(self):
        return _hfb3.FieldCentral_calcField(self)
    __swig_destroy__ = _hfb3.delete_FieldCentral

# Register FieldCentral in _hfb3:
_hfb3.FieldCentral_swigregister(FieldCentral)
class FieldCoulombSlater(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fp, _stateds):
        _hfb3.FieldCoulombSlater_swiginit(self, _hfb3.new_FieldCoulombSlater(fp, _stateds))

    def calcField(self):
        return _hfb3.FieldCoulombSlater_calcField(self)

    def calcEnergy(self):
        return _hfb3.FieldCoulombSlater_calcEnergy(self)
    __swig_destroy__ = _hfb3.delete_FieldCoulombSlater

# Register FieldCoulombSlater in _hfb3:
_hfb3.FieldCoulombSlater_swigregister(FieldCoulombSlater)
class FieldCoulombExact(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fp, _state):
        _hfb3.FieldCoulombExact_swiginit(self, _hfb3.new_FieldCoulombExact(fp, _state))

    def calcField(self):
        return _hfb3.FieldCoulombExact_calcField(self)
    __swig_destroy__ = _hfb3.delete_FieldCoulombExact

# Register FieldCoulombExact in _hfb3:
_hfb3.FieldCoulombExact_swigregister(FieldCoulombExact)
class FieldDensity(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fp, _state):
        _hfb3.FieldDensity_swiginit(self, _hfb3.new_FieldDensity(fp, _state))

    def calcField(self):
        return _hfb3.FieldDensity_calcField(self)
    __swig_destroy__ = _hfb3.delete_FieldDensity

# Register FieldDensity in _hfb3:
_hfb3.FieldDensity_swigregister(FieldDensity)
class FieldDensityFR(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fp, _state):
        _hfb3.FieldDensityFR_swiginit(self, _hfb3.new_FieldDensityFR(fp, _state))

    def calcField(self):
        return _hfb3.FieldDensityFR_calcField(self)

    def calcIz(self):
        return _hfb3.FieldDensityFR_calcIz(self)

    def calcPreZ(self):
        return _hfb3.FieldDensityFR_calcPreZ(self)

    def calcWaveZ(self):
        return _hfb3.FieldDensityFR_calcWaveZ(self)

    def calcWaveMatZ(self):
        return _hfb3.FieldDensityFR_calcWaveMatZ(self)

    def calcIr(self):
        return _hfb3.FieldDensityFR_calcIr(self)

    def calcPreR(self):
        return _hfb3.FieldDensityFR_calcPreR(self)

    def calcRVals(self):
        return _hfb3.FieldDensityFR_calcRVals(self)
    IzDirect = property(_hfb3.FieldDensityFR_IzDirect_get, _hfb3.FieldDensityFR_IzDirect_set)
    IzExchange = property(_hfb3.FieldDensityFR_IzExchange_get, _hfb3.FieldDensityFR_IzExchange_set)
    newIzDirect = property(_hfb3.FieldDensityFR_newIzDirect_get, _hfb3.FieldDensityFR_newIzDirect_set)
    zValsExchange = property(_hfb3.FieldDensityFR_zValsExchange_get, _hfb3.FieldDensityFR_zValsExchange_set)
    waveZ = property(_hfb3.FieldDensityFR_waveZ_get, _hfb3.FieldDensityFR_waveZ_set)
    waveMatZ = property(_hfb3.FieldDensityFR_waveMatZ_get, _hfb3.FieldDensityFR_waveMatZ_set)
    preZ = property(_hfb3.FieldDensityFR_preZ_get, _hfb3.FieldDensityFR_preZ_set)
    IrDirect = property(_hfb3.FieldDensityFR_IrDirect_get, _hfb3.FieldDensityFR_IrDirect_set)
    IrExchange = property(_hfb3.FieldDensityFR_IrExchange_get, _hfb3.FieldDensityFR_IrExchange_set)
    IrExchange_3 = property(_hfb3.FieldDensityFR_IrExchange_3_get, _hfb3.FieldDensityFR_IrExchange_3_set)
    IrExchange_1_p1 = property(_hfb3.FieldDensityFR_IrExchange_1_p1_get, _hfb3.FieldDensityFR_IrExchange_1_p1_set)
    IrExchange_1_p2 = property(_hfb3.FieldDensityFR_IrExchange_1_p2_get, _hfb3.FieldDensityFR_IrExchange_1_p2_set)
    newIrDirect = property(_hfb3.FieldDensityFR_newIrDirect_get, _hfb3.FieldDensityFR_newIrDirect_set)
    rVals = property(_hfb3.FieldDensityFR_rVals_get, _hfb3.FieldDensityFR_rVals_set)
    rValsExchange = property(_hfb3.FieldDensityFR_rValsExchange_get, _hfb3.FieldDensityFR_rValsExchange_set)
    rValsExchange2 = property(_hfb3.FieldDensityFR_rValsExchange2_get, _hfb3.FieldDensityFR_rValsExchange2_set)
    preR = property(_hfb3.FieldDensityFR_preR_get, _hfb3.FieldDensityFR_preR_set)
    index_M_0 = property(_hfb3.FieldDensityFR_index_M_0_get, _hfb3.FieldDensityFR_index_M_0_set)
    index_M_1_p1 = property(_hfb3.FieldDensityFR_index_M_1_p1_get, _hfb3.FieldDensityFR_index_M_1_p1_set)
    index_M_1_p2 = property(_hfb3.FieldDensityFR_index_M_1_p2_get, _hfb3.FieldDensityFR_index_M_1_p2_set)
    index_mn_0 = property(_hfb3.FieldDensityFR_index_mn_0_get, _hfb3.FieldDensityFR_index_mn_0_set)
    index_mn_1_p1 = property(_hfb3.FieldDensityFR_index_mn_1_p1_get, _hfb3.FieldDensityFR_index_mn_1_p1_set)
    index_mn_1_p2 = property(_hfb3.FieldDensityFR_index_mn_1_p2_get, _hfb3.FieldDensityFR_index_mn_1_p2_set)
    discrete = property(_hfb3.FieldDensityFR_discrete_get, _hfb3.FieldDensityFR_discrete_set)
    discrete0 = property(_hfb3.FieldDensityFR_discrete0_get, _hfb3.FieldDensityFR_discrete0_set)
    __swig_destroy__ = _hfb3.delete_FieldDensityFR

# Register FieldDensityFR in _hfb3:
_hfb3.FieldDensityFR_swigregister(FieldDensityFR)
class FieldKinetic(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _parameters, _state):
        _hfb3.FieldKinetic_swiginit(self, _hfb3.new_FieldKinetic(_parameters, _state))

    def calcField(self):
        return _hfb3.FieldKinetic_calcField(self)
    validKeys = property(_hfb3.FieldKinetic_validKeys_get, _hfb3.FieldKinetic_validKeys_set)
    __swig_destroy__ = _hfb3.delete_FieldKinetic

# Register FieldKinetic in _hfb3:
_hfb3.FieldKinetic_swigregister(FieldKinetic)
class FieldRearrangement(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fp, _state):
        _hfb3.FieldRearrangement_swiginit(self, _hfb3.new_FieldRearrangement(fp, _state))

    def calcField(self):
        return _hfb3.FieldRearrangement_calcField(self)
    __swig_destroy__ = _hfb3.delete_FieldRearrangement

# Register FieldRearrangement in _hfb3:
_hfb3.FieldRearrangement_swigregister(FieldRearrangement)
class FieldRearrangementFR(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fp, _state):
        _hfb3.FieldRearrangementFR_swiginit(self, _hfb3.new_FieldRearrangementFR(fp, _state))

    def calcField(self):
        return _hfb3.FieldRearrangementFR_calcField(self)

    def calcPreZ(self):
        return _hfb3.FieldRearrangementFR_calcPreZ(self)

    def calcPreR(self):
        return _hfb3.FieldRearrangementFR_calcPreR(self)

    def calcIz(self):
        return _hfb3.FieldRearrangementFR_calcIz(self)

    def calcIr(self):
        return _hfb3.FieldRearrangementFR_calcIr(self)

    def calcWaveZ(self):
        return _hfb3.FieldRearrangementFR_calcWaveZ(self)

    def calcIndexZ(self):
        return _hfb3.FieldRearrangementFR_calcIndexZ(self)

    def calcWaveMatZ(self):
        return _hfb3.FieldRearrangementFR_calcWaveMatZ(self)

    def calcRVals(self):
        return _hfb3.FieldRearrangementFR_calcRVals(self)
    IzDirect = property(_hfb3.FieldRearrangementFR_IzDirect_get, _hfb3.FieldRearrangementFR_IzDirect_set)
    IzExchange = property(_hfb3.FieldRearrangementFR_IzExchange_get, _hfb3.FieldRearrangementFR_IzExchange_set)
    zValsExchange = property(_hfb3.FieldRearrangementFR_zValsExchange_get, _hfb3.FieldRearrangementFR_zValsExchange_set)
    waveZ = property(_hfb3.FieldRearrangementFR_waveZ_get, _hfb3.FieldRearrangementFR_waveZ_set)
    waveMatZ = property(_hfb3.FieldRearrangementFR_waveMatZ_get, _hfb3.FieldRearrangementFR_waveMatZ_set)
    preZ = property(_hfb3.FieldRearrangementFR_preZ_get, _hfb3.FieldRearrangementFR_preZ_set)
    IrDirect = property(_hfb3.FieldRearrangementFR_IrDirect_get, _hfb3.FieldRearrangementFR_IrDirect_set)
    IrExchange = property(_hfb3.FieldRearrangementFR_IrExchange_get, _hfb3.FieldRearrangementFR_IrExchange_set)
    IrExchange_3 = property(_hfb3.FieldRearrangementFR_IrExchange_3_get, _hfb3.FieldRearrangementFR_IrExchange_3_set)
    IrExchange_1_p1 = property(_hfb3.FieldRearrangementFR_IrExchange_1_p1_get, _hfb3.FieldRearrangementFR_IrExchange_1_p1_set)
    rVals = property(_hfb3.FieldRearrangementFR_rVals_get, _hfb3.FieldRearrangementFR_rVals_set)
    rValsExchange = property(_hfb3.FieldRearrangementFR_rValsExchange_get, _hfb3.FieldRearrangementFR_rValsExchange_set)
    preR = property(_hfb3.FieldRearrangementFR_preR_get, _hfb3.FieldRearrangementFR_preR_set)
    discrete = property(_hfb3.FieldRearrangementFR_discrete_get, _hfb3.FieldRearrangementFR_discrete_set)
    discrete0 = property(_hfb3.FieldRearrangementFR_discrete0_get, _hfb3.FieldRearrangementFR_discrete0_set)
    index_M_0 = property(_hfb3.FieldRearrangementFR_index_M_0_get, _hfb3.FieldRearrangementFR_index_M_0_set)
    index_M_1_p1 = property(_hfb3.FieldRearrangementFR_index_M_1_p1_get, _hfb3.FieldRearrangementFR_index_M_1_p1_set)
    index_M_1_p2 = property(_hfb3.FieldRearrangementFR_index_M_1_p2_get, _hfb3.FieldRearrangementFR_index_M_1_p2_set)
    index_mn_0 = property(_hfb3.FieldRearrangementFR_index_mn_0_get, _hfb3.FieldRearrangementFR_index_mn_0_set)
    index_mn_1_p1 = property(_hfb3.FieldRearrangementFR_index_mn_1_p1_get, _hfb3.FieldRearrangementFR_index_mn_1_p1_set)
    index_mn_1_p2 = property(_hfb3.FieldRearrangementFR_index_mn_1_p2_get, _hfb3.FieldRearrangementFR_index_mn_1_p2_set)
    fullIndex_pp = property(_hfb3.FieldRearrangementFR_fullIndex_pp_get, _hfb3.FieldRearrangementFR_fullIndex_pp_set)
    fullIndex_mm = property(_hfb3.FieldRearrangementFR_fullIndex_mm_get, _hfb3.FieldRearrangementFR_fullIndex_mm_set)
    fullIndex_mp = property(_hfb3.FieldRearrangementFR_fullIndex_mp_get, _hfb3.FieldRearrangementFR_fullIndex_mp_set)
    index_Z_pp = property(_hfb3.FieldRearrangementFR_index_Z_pp_get, _hfb3.FieldRearrangementFR_index_Z_pp_set)
    index_Z_mm = property(_hfb3.FieldRearrangementFR_index_Z_mm_get, _hfb3.FieldRearrangementFR_index_Z_mm_set)
    index_Z_mp = property(_hfb3.FieldRearrangementFR_index_Z_mp_get, _hfb3.FieldRearrangementFR_index_Z_mp_set)
    __swig_destroy__ = _hfb3.delete_FieldRearrangementFR

# Register FieldRearrangementFR in _hfb3:
_hfb3.FieldRearrangementFR_swigregister(FieldRearrangementFR)
class FieldSpinOrbit(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fp, _state):
        _hfb3.FieldSpinOrbit_swiginit(self, _hfb3.new_FieldSpinOrbit(fp, _state))

    def calcField(self):
        return _hfb3.FieldSpinOrbit_calcField(self)

    def calcLegacy(self):
        return _hfb3.FieldSpinOrbit_calcLegacy(self)
    fieldLegacy = property(_hfb3.FieldSpinOrbit_fieldLegacy_get, _hfb3.FieldSpinOrbit_fieldLegacy_set)

    def calcXz(self):
        return _hfb3.FieldSpinOrbit_calcXz(self)

    def calcXr(self):
        return _hfb3.FieldSpinOrbit_calcXr(self)

    def calcYr(self):
        return _hfb3.FieldSpinOrbit_calcYr(self)

    def calcYz(self):
        return _hfb3.FieldSpinOrbit_calcYz(self)
    Xz = property(_hfb3.FieldSpinOrbit_Xz_get, _hfb3.FieldSpinOrbit_Xz_set)
    Xr = property(_hfb3.FieldSpinOrbit_Xr_get, _hfb3.FieldSpinOrbit_Xr_set)
    Yr = property(_hfb3.FieldSpinOrbit_Yr_get, _hfb3.FieldSpinOrbit_Yr_set)
    Yz = property(_hfb3.FieldSpinOrbit_Yz_get, _hfb3.FieldSpinOrbit_Yz_set)
    __swig_destroy__ = _hfb3.delete_FieldSpinOrbit

# Register FieldSpinOrbit in _hfb3:
_hfb3.FieldSpinOrbit_swigregister(FieldSpinOrbit)
class FieldWS(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fp, _state):
        _hfb3.FieldWS_swiginit(self, _hfb3.new_FieldWS(fp, _state))

    def calcField(self):
        return _hfb3.FieldWS_calcField(self)

    def setDef(self, _def):
        return _hfb3.FieldWS_setDef(self, _def)
    __swig_destroy__ = _hfb3.delete_FieldWS

# Register FieldWS in _hfb3:
_hfb3.FieldWS_swigregister(FieldWS)
class Fragments(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.Fragments_swiginit(self, _hfb3.new_Fragments(*args))

    def info(self, *args):
        return _hfb3.Fragments_info(self, *args)

    def getNiceInfo(self, *args):
        return _hfb3.Fragments_getNiceInfo(self, *args)
    izNeck = property(_hfb3.Fragments_izNeck_get, _hfb3.Fragments_izNeck_set)
    geom = property(_hfb3.Fragments_geom_get, _hfb3.Fragments_geom_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_Fragments

# Register Fragments in _hfb3:
_hfb3.Fragments_swigregister(Fragments)
class GradientWalk(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def info(self, *args):
        return _hfb3.GradientWalk_info(self, *args)

    def init(self):
        return _hfb3.GradientWalk_init(self)

    def addEval(self, _xEval, _yEval, valid=True):
        return _hfb3.GradientWalk_addEval(self, _xEval, _yEval, valid)

    def getEval(self):
        return _hfb3.GradientWalk_getEval(self)

    def getConvergence(self):
        return _hfb3.GradientWalk_getConvergence(self)

    def getOptimum(self):
        return _hfb3.GradientWalk_getOptimum(self)
    xMin = property(_hfb3.GradientWalk_xMin_get, _hfb3.GradientWalk_xMin_set)
    xMax = property(_hfb3.GradientWalk_xMax_get, _hfb3.GradientWalk_xMax_set)
    xStep = property(_hfb3.GradientWalk_xStep_get, _hfb3.GradientWalk_xStep_set)
    initialCoords = property(_hfb3.GradientWalk_initialCoords_get, _hfb3.GradientWalk_initialCoords_set)

    def __init__(self):
        _hfb3.GradientWalk_swiginit(self, _hfb3.new_GradientWalk())
    __swig_destroy__ = _hfb3.delete_GradientWalk

# Register GradientWalk in _hfb3:
_hfb3.GradientWalk_swigregister(GradientWalk)
class GeometricalOperators(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.GeometricalOperators_swiginit(self, _hfb3.new_GeometricalOperators(*args))
    state = property(_hfb3.GeometricalOperators_state_get, _hfb3.GeometricalOperators_state_set)
    izNeck = property(_hfb3.GeometricalOperators_izNeck_get, _hfb3.GeometricalOperators_izNeck_set)
    zNeck = property(_hfb3.GeometricalOperators_zNeck_get, _hfb3.GeometricalOperators_zNeck_set)
    multipoleOperators = property(_hfb3.GeometricalOperators_multipoleOperators_get, _hfb3.GeometricalOperators_multipoleOperators_set)

    def calcQNeckMatrix(self):
        return _hfb3.GeometricalOperators_calcQNeckMatrix(self)

    def calcQneck(self, rhon, rhop):
        return _hfb3.GeometricalOperators_calcQneck(self, rhon, rhop)
    qneck0 = property(_hfb3.GeometricalOperators_qneck0_get, _hfb3.GeometricalOperators_qneck0_set)
    matQN = property(_hfb3.GeometricalOperators_matQN_get, _hfb3.GeometricalOperators_matQN_set)
    qneck = property(_hfb3.GeometricalOperators_qneck_get, _hfb3.GeometricalOperators_qneck_set)
    matQNk = property(_hfb3.GeometricalOperators_matQNk_get, _hfb3.GeometricalOperators_matQNk_set)
    matR0 = property(_hfb3.GeometricalOperators_matR0_get, _hfb3.GeometricalOperators_matR0_set)
    matS0 = property(_hfb3.GeometricalOperators_matS0_get, _hfb3.GeometricalOperators_matS0_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_GeometricalOperators

# Register GeometricalOperators in _hfb3:
_hfb3.GeometricalOperators_swigregister(GeometricalOperators)
class Geometry(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.Geometry_swiginit(self, _hfb3.new_Geometry(*args))

    def info(self, *args):
        return _hfb3.Geometry_info(self, *args)

    def getOldChargeRMS(self, Z, N):
        return _hfb3.Geometry_getOldChargeRMS(self, Z, N)

    @staticmethod
    def getDensityMultipoleExpansion(*args):
        return _hfb3.Geometry_getDensityMultipoleExpansion(*args)

    def calcBeta(self):
        return _hfb3.Geometry_calcBeta(self)
    system = property(_hfb3.Geometry_system_get, _hfb3.Geometry_system_set)
    INT_DENS_L = _hfb3.Geometry_INT_DENS_L
    INT_DENS_R = _hfb3.Geometry_INT_DENS_R
    INT_DENS_T = _hfb3.Geometry_INT_DENS_T
    INT_Q00 = _hfb3.Geometry_INT_Q00
    INT_Q10 = _hfb3.Geometry_INT_Q10
    INT_Q20 = _hfb3.Geometry_INT_Q20
    INT_Q30 = _hfb3.Geometry_INT_Q30
    INT_Q40 = _hfb3.Geometry_INT_Q40
    INT_Q50 = _hfb3.Geometry_INT_Q50
    INT_Q60 = _hfb3.Geometry_INT_Q60
    INT_Z = _hfb3.Geometry_INT_Z
    INT_Z2 = _hfb3.Geometry_INT_Z2
    INT_RP2 = _hfb3.Geometry_INT_RP2
    INT_R2 = _hfb3.Geometry_INT_R2
    INT_R = _hfb3.Geometry_INT_R
    INT_Q_NECK = _hfb3.Geometry_INT_Q_NECK
    izNeck = property(_hfb3.Geometry_izNeck_get, _hfb3.Geometry_izNeck_set)
    neckPos = property(_hfb3.Geometry_neckPos_get, _hfb3.Geometry_neckPos_set)
    neckDens = property(_hfb3.Geometry_neckDens_get, _hfb3.Geometry_neckDens_set)
    intLeft = property(_hfb3.Geometry_intLeft_get, _hfb3.Geometry_intLeft_set)
    intRight = property(_hfb3.Geometry_intRight_get, _hfb3.Geometry_intRight_set)
    intTotal = property(_hfb3.Geometry_intTotal_get, _hfb3.Geometry_intTotal_set)
    beta = property(_hfb3.Geometry_beta_get, _hfb3.Geometry_beta_set)
    qlm = property(_hfb3.Geometry_qlm_get, _hfb3.Geometry_qlm_set)
    int_r = property(_hfb3.Geometry_int_r_get, _hfb3.Geometry_int_r_set)
    int_r2 = property(_hfb3.Geometry_int_r2_get, _hfb3.Geometry_int_r2_set)
    int_rp2 = property(_hfb3.Geometry_int_rp2_get, _hfb3.Geometry_int_rp2_set)
    rms = property(_hfb3.Geometry_rms_get, _hfb3.Geometry_rms_set)
    radius = property(_hfb3.Geometry_radius_get, _hfb3.Geometry_radius_set)
    rc = property(_hfb3.Geometry_rc_get, _hfb3.Geometry_rc_set)
    q_neck = property(_hfb3.Geometry_q_neck_get, _hfb3.Geometry_q_neck_set)
    chargeRMS = property(_hfb3.Geometry_chargeRMS_get, _hfb3.Geometry_chargeRMS_set)

    def calc_neck_abcissa(self):
        return _hfb3.Geometry_calc_neck_abcissa(self)

    def calc_neck_abcissa_schunck(self):
        return _hfb3.Geometry_calc_neck_abcissa_schunck(self)

    def calc_fragment_properties(self):
        return _hfb3.Geometry_calc_fragment_properties(self)

    def calcQlm(self):
        return _hfb3.Geometry_calcQlm(self)

    def calcAll(self):
        return _hfb3.Geometry_calcAll(self)

    def integrate(self, *args):
        return _hfb3.Geometry_integrate(self, *args)
    mesh = property(_hfb3.Geometry_mesh_get, _hfb3.Geometry_mesh_set)
    dens = property(_hfb3.Geometry_dens_get, _hfb3.Geometry_dens_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_Geometry

# Register Geometry in _hfb3:
_hfb3.Geometry_swigregister(Geometry)
PI = _hfb3.PI
HBARC = _hfb3.HBARC
CFG_VERSION = _hfb3.CFG_VERSION
CFG_GIT_VERSION = _hfb3.CFG_GIT_VERSION
ALPHA = _hfb3.ALPHA
HBARC2 = _hfb3.HBARC2
MASS_P = _hfb3.MASS_P
MASS_N = _hfb3.MASS_N
NUCLEON_MASS = _hfb3.NUCLEON_MASS
R_0 = _hfb3.R_0
PROTON_RADIUS_SQ = _hfb3.PROTON_RADIUS_SQ
NEUTRON_RADIUS_SQ = _hfb3.NEUTRON_RADIUS_SQ
DARWINFOLDY = _hfb3.DARWINFOLDY
CFG_AUTHORS = _hfb3.CFG_AUTHORS
EPSILON = _hfb3.EPSILON
NEUTRON = _hfb3.NEUTRON
PROTON = _hfb3.PROTON
TOTAL = _hfb3.TOTAL
USE_SHORT_INFO = _hfb3.USE_SHORT_INFO
SKILL = _hfb3.SKILL
MSG_ERROR = _hfb3.MSG_ERROR
MSG_INFO = _hfb3.MSG_INFO
MSG_DATA = _hfb3.MSG_DATA
MSG_TIMELINE = _hfb3.MSG_TIMELINE
MSG_WARNING = _hfb3.MSG_WARNING
MSG_DEBUG = _hfb3.MSG_DEBUG
MSG_PID = _hfb3.MSG_PID
MSG_MAIN = _hfb3.MSG_MAIN
MSG_TIME = _hfb3.MSG_TIME
class IndivState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_hfb3.IndivState_index_get, _hfb3.IndivState_index_set)
    energy = property(_hfb3.IndivState_energy_get, _hfb3.IndivState_energy_set)
    occupation = property(_hfb3.IndivState_occupation_get, _hfb3.IndivState_occupation_set)
    label = property(_hfb3.IndivState_label_get, _hfb3.IndivState_label_set)

    def __init__(self):
        _hfb3.IndivState_swiginit(self, _hfb3.new_IndivState())
    __swig_destroy__ = _hfb3.delete_IndivState

# Register IndivState in _hfb3:
_hfb3.IndivState_swigregister(IndivState)
class States(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def sort(self):
        return _hfb3.States_sort(self)

    def add(self, _index, _energy, _occupation, _label):
        return _hfb3.States_add(self, _index, _energy, _occupation, _label)

    def info(self, id=-2, nbShown=25, arg4=False):
        return _hfb3.States_info(self, id, nbShown, arg4)

    def clear(self):
        return _hfb3.States_clear(self)

    def getFirstEmptyStates(self, nbStates=1):
        return _hfb3.States_getFirstEmptyStates(self, nbStates)
    title = property(_hfb3.States_title_get, _hfb3.States_title_set)
    states = property(_hfb3.States_states_get, _hfb3.States_states_set)
    n_elem = property(_hfb3.States_n_elem_get, _hfb3.States_n_elem_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass


    def __init__(self, *args):
        _hfb3.States_swiginit(self, _hfb3.new_States(*args))
    __swig_destroy__ = _hfb3.delete_States

# Register States in _hfb3:
_hfb3.States_swigregister(States)
class Interaction(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self):
        return _hfb3.Interaction_clear(self)

    def calcFields(self, ignoreMissingRhoKappa=False):
        return _hfb3.Interaction_calcFields(self, ignoreMissingRhoKappa)

    def calcEnergies(self):
        return _hfb3.Interaction_calcEnergies(self)

    def getEnergyContributions(self):
        return _hfb3.Interaction_getEnergyContributions(self)

    def getHamiltonianContributions(self, iso, type):
        return _hfb3.Interaction_getHamiltonianContributions(self, iso, type)

    @staticmethod
    def getInteractionDataTree(interactionName):
        return _hfb3.Interaction_getInteractionDataTree(interactionName)

    def __call__(self, name, id=0):
        return _hfb3.Interaction___call__(self, name, id)

    def addField(self, fieldName):
        return _hfb3.Interaction_addField(self, fieldName)

    def info(self, isShort=False):
        return _hfb3.Interaction_info(self, isShort)

    def getNiceInfo(self):
        return _hfb3.Interaction_getNiceInfo(self)

    def getParametersFromDataTree(self, dataTree, fieldName):
        return _hfb3.Interaction_getParametersFromDataTree(self, dataTree, fieldName)
    interactionName = property(_hfb3.Interaction_interactionName_get, _hfb3.Interaction_interactionName_set)
    dataTree = property(_hfb3.Interaction_dataTree_get, _hfb3.Interaction_dataTree_set)
    validKeys = property(_hfb3.Interaction_validKeys_get, _hfb3.Interaction_validKeys_set)
    state = property(_hfb3.Interaction_state_get, _hfb3.Interaction_state_set)
    totalEnergy = property(_hfb3.Interaction_totalEnergy_get, _hfb3.Interaction_totalEnergy_set)
    fieldsList = property(_hfb3.Interaction_fieldsList_get, _hfb3.Interaction_fieldsList_set)
    energyContributions = property(_hfb3.Interaction_energyContributions_get, _hfb3.Interaction_energyContributions_set)
    calcLength = property(_hfb3.Interaction_calcLength_get, _hfb3.Interaction_calcLength_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass


    def __init__(self, *args):
        _hfb3.Interaction_swiginit(self, _hfb3.new_Interaction(*args))
    __swig_destroy__ = _hfb3.delete_Interaction

# Register Interaction in _hfb3:
_hfb3.Interaction_swigregister(Interaction)
class IOamedee(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _hfb3.IOamedee_swiginit(self, _hfb3.new_IOamedee())

    def fromContent(self, content):
        return _hfb3.IOamedee_fromContent(self, content)

    @staticmethod
    def checkFileType(content):
        return _hfb3.IOamedee_checkFileType(content)
    customFieldn = property(_hfb3.IOamedee_customFieldn_get, _hfb3.IOamedee_customFieldn_set)
    customFieldp = property(_hfb3.IOamedee_customFieldp_get, _hfb3.IOamedee_customFieldp_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_IOamedee

# Register IOamedee in _hfb3:
_hfb3.IOamedee_swigregister(IOamedee)
class IOberger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _hfb3.IOberger_swiginit(self, _hfb3.new_IOberger())
    __swig_destroy__ = _hfb3.delete_IOberger

    def fromContent(self, content):
        return _hfb3.IOberger_fromContent(self, content)

    @staticmethod
    def checkFileType(content):
        return _hfb3.IOberger_checkFileType(content)

    def saveState(self, arg2, filename):
        return _hfb3.IOberger_saveState(self, arg2, filename)

    def __repr__(self):
      return self.info()
    def show(self):
      pass


# Register IOberger in _hfb3:
_hfb3.IOberger_swigregister(IOberger)
class IOhfb3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _hfb3.IOhfb3_swiginit(self, _hfb3.new_IOhfb3())

    def fromContent(self, content):
        return _hfb3.IOhfb3_fromContent(self, content)

    @staticmethod
    def updateDataTree(arg1, key, val, type):
        return _hfb3.IOhfb3_updateDataTree(arg1, key, val, type)
    __swig_destroy__ = _hfb3.delete_IOhfb3

# Register IOhfb3 in _hfb3:
_hfb3.IOhfb3_swigregister(IOhfb3)
class IOjson(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _hfb3.IOjson_swiginit(self, _hfb3.new_IOjson())

    def fromContent(self, content):
        return _hfb3.IOjson_fromContent(self, content)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_IOjson

# Register IOjson in _hfb3:
_hfb3.IOjson_swigregister(IOjson)
class IOmsgp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _hfb3.IOmsgp_swiginit(self, _hfb3.new_IOmsgp())

    @staticmethod
    def fromContent(content):
        return _hfb3.IOmsgp_fromContent(content)

    @staticmethod
    def saveDataTree(arg1, filename):
        return _hfb3.IOmsgp_saveDataTree(arg1, filename)

    @staticmethod
    def serializeDataTree(arg1):
        return _hfb3.IOmsgp_serializeDataTree(arg1)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_IOmsgp

# Register IOmsgp in _hfb3:
_hfb3.IOmsgp_swigregister(IOmsgp)
class Callback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _hfb3.delete_Callback

    def run(self, mesg):
        return _hfb3.Callback_run(self, mesg)

    def __init__(self):
        if self.__class__ == Callback:
            _self = None
        else:
            _self = self
        _hfb3.Callback_swiginit(self, _hfb3.new_Callback(_self, ))
    def __disown__(self):
        self.this.disown()
        _hfb3.disown_Callback(self)
        return weakref.proxy(self)

# Register Callback in _hfb3:
_hfb3.Callback_swigregister(Callback)
class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _hfb3.Logger_swiginit(self, _hfb3.new_Logger())
    __swig_destroy__ = _hfb3.delete_Logger

    def log(self, *args):
        return _hfb3.Logger_log(self, *args)

    def setCallback(self, cb):
        return _hfb3.Logger_setCallback(self, cb)

    def delCallback(self):
        return _hfb3.Logger_delCallback(self)

# Register Logger in _hfb3:
_hfb3.Logger_swigregister(Logger)
class Mesh(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _hfb3.Mesh_swiginit(self, _hfb3.new_Mesh())

    def info(self, isShort=False):
        return _hfb3.Mesh_info(self, isShort)

    @staticmethod
    def regular(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
        return _hfb3.Mesh_regular(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

    @staticmethod
    def gaussLaguerreHermite(arg1, arg2):
        return _hfb3.Mesh_gaussLaguerreHermite(arg1, arg2)

    @staticmethod
    def df3():
        return _hfb3.Mesh_df3()

    def __eq__(self, other):
        return _hfb3.Mesh___eq__(self, other)

    def __ne__(self, other):
        return _hfb3.Mesh___ne__(self, other)
    ax = property(_hfb3.Mesh_ax_get, _hfb3.Mesh_ax_set)
    ay = property(_hfb3.Mesh_ay_get, _hfb3.Mesh_ay_set)
    az = property(_hfb3.Mesh_az_get, _hfb3.Mesh_az_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_Mesh

# Register Mesh in _hfb3:
_hfb3.Mesh_swigregister(Mesh)
class Mixing(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.Mixing_swiginit(self, _hfb3.new_Mixing(*args))

    def newVec(self, arg2):
        return _hfb3.Mixing_newVec(self, arg2)

    def getVec(self):
        return _hfb3.Mixing_getVec(self)

    def info(self, isShort=False):
        return _hfb3.Mixing_info(self, isShort)

    def isLinearMode(self):
        return _hfb3.Mixing_isLinearMode(self)
    mixingSize = property(_hfb3.Mixing_mixingSize_get, _hfb3.Mixing_mixingSize_set)
    linearFactor = property(_hfb3.Mixing_linearFactor_get, _hfb3.Mixing_linearFactor_set)
    mixingFactor = property(_hfb3.Mixing_mixingFactor_get, _hfb3.Mixing_mixingFactor_set)
    validKeys = property(_hfb3.Mixing_validKeys_get, _hfb3.Mixing_validKeys_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_Mixing

# Register Mixing in _hfb3:
_hfb3.Mixing_swigregister(Mixing)
class myHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a):
        return _hfb3.myHasher___call__(self, a)

    def __init__(self):
        _hfb3.myHasher_swiginit(self, _hfb3.new_myHasher())
    __swig_destroy__ = _hfb3.delete_myHasher

# Register myHasher in _hfb3:
_hfb3.myHasher_swigregister(myHasher)
class MultipoleOperators(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.MultipoleOperators_swiginit(self, _hfb3.new_MultipoleOperators(*args))

    def calcQl0Matrices(self):
        return _hfb3.MultipoleOperators_calcQl0Matrices(self)

    def info(self, isShort=False):
        return _hfb3.MultipoleOperators_info(self, isShort)

    def getNiceInfo(self):
        return _hfb3.MultipoleOperators_getNiceInfo(self)

    def calcQlm(self, rho):
        return _hfb3.MultipoleOperators_calcQlm(self, rho)

    def calcBeta(self):
        return _hfb3.MultipoleOperators_calcBeta(self)

    def calcNPart(self, rho):
        return _hfb3.MultipoleOperators_calcNPart(self, rho)

    @staticmethod
    def getBetaFromQ20(parts, A, vq20):
        return _hfb3.MultipoleOperators_getBetaFromQ20(parts, A, vq20)

    @staticmethod
    def getQ20FromBeta(parts, A, vBeta):
        return _hfb3.MultipoleOperators_getQ20FromBeta(parts, A, vBeta)
    state = property(_hfb3.MultipoleOperators_state_get, _hfb3.MultipoleOperators_state_set)
    ql0 = property(_hfb3.MultipoleOperators_ql0_get, _hfb3.MultipoleOperators_ql0_set)
    nPart = property(_hfb3.MultipoleOperators_nPart_get, _hfb3.MultipoleOperators_nPart_set)
    matR = property(_hfb3.MultipoleOperators_matR_get, _hfb3.MultipoleOperators_matR_set)
    matZ = property(_hfb3.MultipoleOperators_matZ_get, _hfb3.MultipoleOperators_matZ_set)
    qlm = property(_hfb3.MultipoleOperators_qlm_get, _hfb3.MultipoleOperators_qlm_set)
    beta = property(_hfb3.MultipoleOperators_beta_get, _hfb3.MultipoleOperators_beta_set)
    matZk = property(_hfb3.MultipoleOperators_matZk_get, _hfb3.MultipoleOperators_matZk_set)
    matR2k = property(_hfb3.MultipoleOperators_matR2k_get, _hfb3.MultipoleOperators_matR2k_set)
    matS0 = property(_hfb3.MultipoleOperators_matS0_get, _hfb3.MultipoleOperators_matS0_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_MultipoleOperators

# Register MultipoleOperators in _hfb3:
_hfb3.MultipoleOperators_swigregister(MultipoleOperators)
class Plot(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def slot(id):
        return _hfb3.Plot_slot(id)

    @staticmethod
    def clear(*args):
        return _hfb3.Plot_clear(*args)

    @staticmethod
    def save(filename):
        return _hfb3.Plot_save(filename)

    @staticmethod
    def curve(*args):
        return _hfb3.Plot_curve(*args)

    @staticmethod
    def field(*args):
        return _hfb3.Plot_field(*args)

    @staticmethod
    def plotMap(*args):
        return _hfb3.Plot_plotMap(*args)

    @staticmethod
    def mat(title, mat):
        return _hfb3.Plot_mat(title, mat)

    @staticmethod
    def sendFifo(*args):
        return _hfb3.Plot_sendFifo(*args)

    def __repr__(self):
      return self.info()
    def show(self):
      pass


    def __init__(self):
        _hfb3.Plot_swiginit(self, _hfb3.new_Plot())
    __swig_destroy__ = _hfb3.delete_Plot

# Register Plot in _hfb3:
_hfb3.Plot_swigregister(Plot)
class VecHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, k):
        return _hfb3.VecHash___call__(self, k)

    def __init__(self):
        _hfb3.VecHash_swiginit(self, _hfb3.new_VecHash())
    __swig_destroy__ = _hfb3.delete_VecHash

# Register VecHash in _hfb3:
_hfb3.VecHash_swigregister(VecHash)
class VecEqual(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a, b):
        return _hfb3.VecEqual___call__(self, a, b)

    def __init__(self):
        _hfb3.VecEqual_swiginit(self, _hfb3.new_VecEqual())
    __swig_destroy__ = _hfb3.delete_VecEqual

# Register VecEqual in _hfb3:
_hfb3.VecEqual_swigregister(VecEqual)
class Qnumbers(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.Qnumbers_swiginit(self, _hfb3.new_Qnumbers(*args))

    def setNames(self, l):
        return _hfb3.Qnumbers_setNames(self, l)

    def find(self, arg2):
        return _hfb3.Qnumbers_find(self, arg2)

    def appendName(self, s):
        return _hfb3.Qnumbers_appendName(self, s)

    def append(self, arg2):
        return _hfb3.Qnumbers_append(self, arg2)

    def info(self, isShort=False):
        return _hfb3.Qnumbers_info(self, isShort)

    def reorder(self, r):
        return _hfb3.Qnumbers_reorder(self, r)

    def extract(self, arg2):
        return _hfb3.Qnumbers_extract(self, arg2)

    def __call__(self, *args):
        return _hfb3.Qnumbers___call__(self, *args)

    def calcBlocks(self, rows):
        return _hfb3.Qnumbers_calcBlocks(self, rows)

    def sub(self, ids):
        return _hfb3.Qnumbers_sub(self, ids)

    def checkOmegaSym(self, mat, name):
        return _hfb3.Qnumbers_checkOmegaSym(self, mat, name)

    def clear(self):
        return _hfb3.Qnumbers_clear(self)

    def niceStr(self, id):
        return _hfb3.Qnumbers_niceStr(self, id)
    nbq = property(_hfb3.Qnumbers_nbq_get, _hfb3.Qnumbers_nbq_set)
    nb = property(_hfb3.Qnumbers_nb_get, _hfb3.Qnumbers_nb_set)
    name = property(_hfb3.Qnumbers_name_get, _hfb3.Qnumbers_name_set)
    blocks = property(_hfb3.Qnumbers_blocks_get, _hfb3.Qnumbers_blocks_set)
    filter = property(_hfb3.Qnumbers_filter_get, _hfb3.Qnumbers_filter_set)
    mat = property(_hfb3.Qnumbers_mat_get, _hfb3.Qnumbers_mat_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_Qnumbers

# Register Qnumbers in _hfb3:
_hfb3.Qnumbers_swigregister(Qnumbers)
class State(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getDataTree(self):
        return _hfb3.State_getDataTree(self)

    def convertFrom(self, arg2):
        return _hfb3.State_convertFrom(self, arg2)

    def convertTo(self, arg2):
        return _hfb3.State_convertTo(self, arg2)

    def getDensityDistance(self, otherState, pairing=False):
        return _hfb3.State_getDensityDistance(self, otherState, pairing)

    def info(self, isShort=False):
        return _hfb3.State_info(self, isShort)

    def getNiceInfo(self, *args):
        return _hfb3.State_getNiceInfo(self, *args)

    def empty(self):
        return _hfb3.State_empty(self)

    def getOverlap(self, otherState):
        return _hfb3.State_getOverlap(self, otherState)

    def calcInertia(self, *args):
        return _hfb3.State_calcInertia(self, *args)

    def checkSolution(self):
        return _hfb3.State_checkSolution(self)

    def calcCanonical(self):
        return _hfb3.State_calcCanonical(self)

    def getCanonicalV2(self, _rho):
        return _hfb3.State_getCanonicalV2(self, _rho)

    def calcRhoKappaFromUV(self):
        return _hfb3.State_calcRhoKappaFromUV(self)

    def calcUVFromRhoKappa(self, dataTree):
        return _hfb3.State_calcUVFromRhoKappa(self, dataTree)

    def getOmegaContributionsInfo(self):
        return _hfb3.State_getOmegaContributionsInfo(self)

    def printCanonicalStatesInfo(self, _rho, iso):
        return _hfb3.State_printCanonicalStatesInfo(self, _rho, iso)
    validKeys = property(_hfb3.State_validKeys_get, _hfb3.State_validKeys_set)
    basis = property(_hfb3.State_basis_get, _hfb3.State_basis_set)
    sys = property(_hfb3.State_sys_get, _hfb3.State_sys_set)
    constraints = property(_hfb3.State_constraints_get, _hfb3.State_constraints_set)
    blockedQP = property(_hfb3.State_blockedQP_get, _hfb3.State_blockedQP_set)
    rho = property(_hfb3.State_rho_get, _hfb3.State_rho_set)
    kappa = property(_hfb3.State_kappa_get, _hfb3.State_kappa_set)
    U = property(_hfb3.State_U_get, _hfb3.State_U_set)
    V = property(_hfb3.State_V_get, _hfb3.State_V_set)
    vecOc = property(_hfb3.State_vecOc_get, _hfb3.State_vecOc_set)
    eneQP = property(_hfb3.State_eneQP_get, _hfb3.State_eneQP_set)
    oaiHF = property(_hfb3.State_oaiHF_get, _hfb3.State_oaiHF_set)
    chemPot = property(_hfb3.State_chemPot_get, _hfb3.State_chemPot_set)
    totalEnergy = property(_hfb3.State_totalEnergy_get, _hfb3.State_totalEnergy_set)
    converged = property(_hfb3.State_converged_get, _hfb3.State_converged_set)
    nbIter = property(_hfb3.State_nbIter_get, _hfb3.State_nbIter_set)
    calculationLength = property(_hfb3.State_calculationLength_get, _hfb3.State_calculationLength_set)
    collectiveCoordinates = property(_hfb3.State_collectiveCoordinates_get, _hfb3.State_collectiveCoordinates_set)
    metric = property(_hfb3.State_metric_get, _hfb3.State_metric_set)
    massGCM = property(_hfb3.State_massGCM_get, _hfb3.State_massGCM_set)
    zpeGCM = property(_hfb3.State_zpeGCM_get, _hfb3.State_zpeGCM_set)
    massATDHF = property(_hfb3.State_massATDHF_get, _hfb3.State_massATDHF_set)
    zpeATDHF = property(_hfb3.State_zpeATDHF_get, _hfb3.State_zpeATDHF_set)
    u_c = property(_hfb3.State_u_c_get, _hfb3.State_u_c_set)
    v_c = property(_hfb3.State_v_c_get, _hfb3.State_v_c_set)
    D_c = property(_hfb3.State_D_c_get, _hfb3.State_D_c_set)
    energyContributions = property(_hfb3.State_energyContributions_get, _hfb3.State_energyContributions_set)
    partStates = property(_hfb3.State_partStates_get, _hfb3.State_partStates_set)
    qpStates = property(_hfb3.State_qpStates_get, _hfb3.State_qpStates_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass


    def __init__(self, *args):
        _hfb3.State_swiginit(self, _hfb3.new_State(*args))
    __swig_destroy__ = _hfb3.delete_State

# Register State in _hfb3:
_hfb3.State_swigregister(State)
class Solver(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ITERATING = _hfb3.Solver_ITERATING
    STARTING = _hfb3.Solver_STARTING
    CONVERGED = _hfb3.Solver_CONVERGED
    DIVERGED = _hfb3.Solver_DIVERGED
    MAXITER = _hfb3.Solver_MAXITER
    SCHEME_END = _hfb3.Solver_SCHEME_END

    def __init__(self, *args):
        _hfb3.Solver_swiginit(self, _hfb3.new_Solver(*args))

    def init(self):
        return _hfb3.Solver_init(self)

    def nextIter(self):
        return _hfb3.Solver_nextIter(self)
    validKeys = property(_hfb3.Solver_validKeys_get, _hfb3.Solver_validKeys_set)
    statusStr = property(_hfb3.Solver_statusStr_get, _hfb3.Solver_statusStr_set)
    state = property(_hfb3.Solver_state_get, _hfb3.Solver_state_set)
    dataTree = property(_hfb3.Solver_dataTree_get, _hfb3.Solver_dataTree_set)
    bestState = property(_hfb3.Solver_bestState_get, _hfb3.Solver_bestState_set)
    maxIter = property(_hfb3.Solver_maxIter_get, _hfb3.Solver_maxIter_set)
    nbIter = property(_hfb3.Solver_nbIter_get, _hfb3.Solver_nbIter_set)
    status = property(_hfb3.Solver_status_get, _hfb3.Solver_status_set)
    startTime = property(_hfb3.Solver_startTime_get, _hfb3.Solver_startTime_set)
    calculationLength = property(_hfb3.Solver_calculationLength_get, _hfb3.Solver_calculationLength_set)
    cvgTarget = property(_hfb3.Solver_cvgTarget_get, _hfb3.Solver_cvgTarget_set)
    value = property(_hfb3.Solver_value_get, _hfb3.Solver_value_set)
    plotDensities = property(_hfb3.Solver_plotDensities_get, _hfb3.Solver_plotDensities_set)
    forceNonEmptyKappa = property(_hfb3.Solver_forceNonEmptyKappa_get, _hfb3.Solver_forceNonEmptyKappa_set)
    __swig_destroy__ = _hfb3.delete_Solver

# Register Solver in _hfb3:
_hfb3.Solver_swigregister(Solver)
class SolverHFBBroyden(Solver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.SolverHFBBroyden_swiginit(self, _hfb3.new_SolverHFBBroyden(*args))

    def calc(self):
        return _hfb3.SolverHFBBroyden_calc(self)

    def init(self):
        return _hfb3.SolverHFBBroyden_init(self)

    def nextIter(self):
        return _hfb3.SolverHFBBroyden_nextIter(self)

    def singleHFBiter(self):
        return _hfb3.SolverHFBBroyden_singleHFBiter(self)

    def info(self, isShort=False):
        return _hfb3.SolverHFBBroyden_info(self, isShort)

    def mixStates(self):
        return _hfb3.SolverHFBBroyden_mixStates(self)

    def bokehPlot(self):
        return _hfb3.SolverHFBBroyden_bokehPlot(self)
    validKeys = property(_hfb3.SolverHFBBroyden_validKeys_get, _hfb3.SolverHFBBroyden_validKeys_set)
    mixing = property(_hfb3.SolverHFBBroyden_mixing_get, _hfb3.SolverHFBBroyden_mixing_set)
    interaction = property(_hfb3.SolverHFBBroyden_interaction_get, _hfb3.SolverHFBBroyden_interaction_set)
    discrete = property(_hfb3.SolverHFBBroyden_discrete_get, _hfb3.SolverHFBBroyden_discrete_set)
    multipoleOperators = property(_hfb3.SolverHFBBroyden_multipoleOperators_get, _hfb3.SolverHFBBroyden_multipoleOperators_set)
    geometricalOperators = property(_hfb3.SolverHFBBroyden_geometricalOperators_get, _hfb3.SolverHFBBroyden_geometricalOperators_set)
    lastState = property(_hfb3.SolverHFBBroyden_lastState_get, _hfb3.SolverHFBBroyden_lastState_set)
    ene = property(_hfb3.SolverHFBBroyden_ene_get, _hfb3.SolverHFBBroyden_ene_set)
    bestEne = property(_hfb3.SolverHFBBroyden_bestEne_get, _hfb3.SolverHFBBroyden_bestEne_set)
    cvgTargetLambda = property(_hfb3.SolverHFBBroyden_cvgTargetLambda_get, _hfb3.SolverHFBBroyden_cvgTargetLambda_set)
    maxIterLambda = property(_hfb3.SolverHFBBroyden_maxIterLambda_get, _hfb3.SolverHFBBroyden_maxIterLambda_set)
    emptyKappaProtection = property(_hfb3.SolverHFBBroyden_emptyKappaProtection_get, _hfb3.SolverHFBBroyden_emptyKappaProtection_set)
    U = property(_hfb3.SolverHFBBroyden_U_get, _hfb3.SolverHFBBroyden_U_set)
    V = property(_hfb3.SolverHFBBroyden_V_get, _hfb3.SolverHFBBroyden_V_set)
    partEne = property(_hfb3.SolverHFBBroyden_partEne_get, _hfb3.SolverHFBBroyden_partEne_set)
    qpEne = property(_hfb3.SolverHFBBroyden_qpEne_get, _hfb3.SolverHFBBroyden_qpEne_set)
    fragInLoop = property(_hfb3.SolverHFBBroyden_fragInLoop_get, _hfb3.SolverHFBBroyden_fragInLoop_set)
    earlyLambdaMixing = property(_hfb3.SolverHFBBroyden_earlyLambdaMixing_get, _hfb3.SolverHFBBroyden_earlyLambdaMixing_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_SolverHFBBroyden

# Register SolverHFBBroyden in _hfb3:
_hfb3.SolverHFBBroyden_swigregister(SolverHFBBroyden)
class SolverHFBGradient(Solver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.SolverHFBGradient_swiginit(self, _hfb3.new_SolverHFBGradient(*args))

    def init(self):
        return _hfb3.SolverHFBGradient_init(self)

    def nextIter(self):
        return _hfb3.SolverHFBGradient_nextIter(self)
    validKeys = property(_hfb3.SolverHFBGradient_validKeys_get, _hfb3.SolverHFBGradient_validKeys_set)
    interaction = property(_hfb3.SolverHFBGradient_interaction_get, _hfb3.SolverHFBGradient_interaction_set)
    discrete = property(_hfb3.SolverHFBGradient_discrete_get, _hfb3.SolverHFBGradient_discrete_set)
    multipoleOperators = property(_hfb3.SolverHFBGradient_multipoleOperators_get, _hfb3.SolverHFBGradient_multipoleOperators_set)
    fragments = property(_hfb3.SolverHFBGradient_fragments_get, _hfb3.SolverHFBGradient_fragments_set)
    geometricalOperators = property(_hfb3.SolverHFBGradient_geometricalOperators_get, _hfb3.SolverHFBGradient_geometricalOperators_set)
    ene = property(_hfb3.SolverHFBGradient_ene_get, _hfb3.SolverHFBGradient_ene_set)
    bestEne = property(_hfb3.SolverHFBGradient_bestEne_get, _hfb3.SolverHFBGradient_bestEne_set)
    cvgTargetLambda = property(_hfb3.SolverHFBGradient_cvgTargetLambda_get, _hfb3.SolverHFBGradient_cvgTargetLambda_set)
    maxIterLambda = property(_hfb3.SolverHFBGradient_maxIterLambda_get, _hfb3.SolverHFBGradient_maxIterLambda_set)
    fragInLoop = property(_hfb3.SolverHFBGradient_fragInLoop_get, _hfb3.SolverHFBGradient_fragInLoop_set)

    def info(self, isShort=False):
        return _hfb3.SolverHFBGradient_info(self, isShort)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_SolverHFBGradient

# Register SolverHFBGradient in _hfb3:
_hfb3.SolverHFBGradient_swigregister(SolverHFBGradient)
class SolverBasis(Solver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.SolverBasis_swiginit(self, _hfb3.new_SolverBasis(*args))

    def init(self):
        return _hfb3.SolverBasis_init(self)

    def nextIter(self):
        return _hfb3.SolverBasis_nextIter(self)

    def finalize(self):
        return _hfb3.SolverBasis_finalize(self)

    def calcHFB(self, *args):
        return _hfb3.SolverBasis_calcHFB(self, *args)

    def info(self, isShort=False):
        return _hfb3.SolverBasis_info(self, isShort)

    def getHistTable(self):
        return _hfb3.SolverBasis_getHistTable(self)
    validKeys = property(_hfb3.SolverBasis_validKeys_get, _hfb3.SolverBasis_validKeys_set)
    dim = property(_hfb3.SolverBasis_dim_get, _hfb3.SolverBasis_dim_set)
    bestValue = property(_hfb3.SolverBasis_bestValue_get, _hfb3.SolverBasis_bestValue_set)
    determinant = property(_hfb3.SolverBasis_determinant_get, _hfb3.SolverBasis_determinant_set)
    density = property(_hfb3.SolverBasis_density_get, _hfb3.SolverBasis_density_set)
    sphericalBasis = property(_hfb3.SolverBasis_sphericalBasis_get, _hfb3.SolverBasis_sphericalBasis_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_SolverBasis

# Register SolverBasis in _hfb3:
_hfb3.SolverBasis_swigregister(SolverBasis)
class SolverWS(Solver):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.SolverWS_swiginit(self, _hfb3.new_SolverWS(*args))

    def calcWS(self):
        return _hfb3.SolverWS_calcWS(self)

    def calcWSWithInteraction(self, interactionWS):
        return _hfb3.SolverWS_calcWSWithInteraction(self, interactionWS)

    def getError(self, scalingFactor=5.0):
        return _hfb3.SolverWS_getError(self, scalingFactor)

    def niceStr(self, _def):
        return _hfb3.SolverWS_niceStr(self, _def)

    def updateCurrentDef(self, v):
        return _hfb3.SolverWS_updateCurrentDef(self, v)

    def init(self):
        return _hfb3.SolverWS_init(self)

    def nextIter(self):
        return _hfb3.SolverWS_nextIter(self)

    def finalize(self):
        return _hfb3.SolverWS_finalize(self)

    def calc(self):
        return _hfb3.SolverWS_calc(self)

    def bokehPlot(self):
        return _hfb3.SolverWS_bokehPlot(self)

    def info(self, isShort=False):
        return _hfb3.SolverWS_info(self, isShort)
    validKeys = property(_hfb3.SolverWS_validKeys_get, _hfb3.SolverWS_validKeys_set)
    wsInteraction = property(_hfb3.SolverWS_wsInteraction_get, _hfb3.SolverWS_wsInteraction_set)
    multipoleOperators = property(_hfb3.SolverWS_multipoleOperators_get, _hfb3.SolverWS_multipoleOperators_set)
    indivEnerWS = property(_hfb3.SolverWS_indivEnerWS_get, _hfb3.SolverWS_indivEnerWS_set)
    indivStateWS = property(_hfb3.SolverWS_indivStateWS_get, _hfb3.SolverWS_indivStateWS_set)
    indivOccupWS = property(_hfb3.SolverWS_indivOccupWS_get, _hfb3.SolverWS_indivOccupWS_set)
    discrete = property(_hfb3.SolverWS_discrete_get, _hfb3.SolverWS_discrete_set)
    bestDef = property(_hfb3.SolverWS_bestDef_get, _hfb3.SolverWS_bestDef_set)
    bestError = property(_hfb3.SolverWS_bestError_get, _hfb3.SolverWS_bestError_set)
    bestState = property(_hfb3.SolverWS_bestState_get, _hfb3.SolverWS_bestState_set)
    dim = property(_hfb3.SolverWS_dim_get, _hfb3.SolverWS_dim_set)
    beta20tInit = property(_hfb3.SolverWS_beta20tInit_get, _hfb3.SolverWS_beta20tInit_set)
    q30tInit = property(_hfb3.SolverWS_q30tInit_get, _hfb3.SolverWS_q30tInit_set)
    __swig_destroy__ = _hfb3.delete_SolverWS

# Register SolverWS in _hfb3:
_hfb3.SolverWS_swigregister(SolverWS)
class System(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.System_swiginit(self, _hfb3.new_System(*args))

    def getDataTree(self):
        return _hfb3.System_getDataTree(self)

    def info(self, isShort=False):
        return _hfb3.System_info(self, isShort)

    @staticmethod
    def getElementSymbol(Z):
        return _hfb3.System_getElementSymbol(Z)
    validKeys = property(_hfb3.System_validKeys_get, _hfb3.System_validKeys_set)
    nProt = property(_hfb3.System_nProt_get, _hfb3.System_nProt_set)
    nNeut = property(_hfb3.System_nNeut_get, _hfb3.System_nNeut_set)

    def __repr__(self):
      return self.info()
    def show(self):
      pass

    __swig_destroy__ = _hfb3.delete_System

# Register System in _hfb3:
_hfb3.System_swigregister(System)
MOD_GZIP_ZLIB_WINDOWSIZE = _hfb3.MOD_GZIP_ZLIB_WINDOWSIZE
MOD_GZIP_ZLIB_CFACTOR = _hfb3.MOD_GZIP_ZLIB_CFACTOR
MOD_GZIP_ZLIB_BSIZE = _hfb3.MOD_GZIP_ZLIB_BSIZE

def hash2(*args):
    return _hfb3.hash2(*args)
class StackItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_hfb3.StackItem_name_get, _hfb3.StackItem_name_set)
    location = property(_hfb3.StackItem_location_get, _hfb3.StackItem_location_set)
    color = property(_hfb3.StackItem_color_get, _hfb3.StackItem_color_set)

    def __init__(self):
        _hfb3.StackItem_swiginit(self, _hfb3.new_StackItem())
    __swig_destroy__ = _hfb3.delete_StackItem

# Register StackItem in _hfb3:
_hfb3.StackItem_swigregister(StackItem)
class Tools(Generic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CHAR_TB = _hfb3.Tools_CHAR_TB
    CHAR_RL = _hfb3.Tools_CHAR_RL
    CHAR_TR = _hfb3.Tools_CHAR_TR
    CHAR_RB = _hfb3.Tools_CHAR_RB
    CHAR_BL = _hfb3.Tools_CHAR_BL
    CHAR_TL = _hfb3.Tools_CHAR_TL
    CHAR_TRB = _hfb3.Tools_CHAR_TRB
    CHAR_TRL = _hfb3.Tools_CHAR_TRL
    CHAR_TBL = _hfb3.Tools_CHAR_TBL
    CHAR_RBL = _hfb3.Tools_CHAR_RBL
    CHAR_TRBL = _hfb3.Tools_CHAR_TRBL
    CHAR_NB = _hfb3.Tools_CHAR_NB

    @staticmethod
    def accu(_in, arg2, lineNumber):
        return _hfb3.Tools_accu(_in, arg2, lineNumber)

    @staticmethod
    def trim(arg1):
        return _hfb3.Tools_trim(arg1)

    @staticmethod
    def trim_b(arg1):
        return _hfb3.Tools_trim_b(arg1)

    @staticmethod
    def trim_e(arg1):
        return _hfb3.Tools_trim_e(arg1)

    @staticmethod
    def stringSplit(arg1, arg2):
        return _hfb3.Tools_stringSplit(arg1, arg2)

    @staticmethod
    def _printf(*args):
        return _hfb3.Tools__printf(*args)

    @staticmethod
    def humanSize(bytes):
        return _hfb3.Tools_humanSize(bytes)

    @staticmethod
    def growIVec(m, v):
        return _hfb3.Tools_growIVec(m, v)

    @staticmethod
    def randMat(nbr, nbc):
        return _hfb3.Tools_randMat(nbr, nbc)

    @staticmethod
    def matToTxt(m):
        return _hfb3.Tools_matToTxt(m)

    @staticmethod
    def matToCsv(m):
        return _hfb3.Tools_matToCsv(m)

    @staticmethod
    def matToCrosses(m, epsilon=1e-12):
        return _hfb3.Tools_matToCrosses(m, epsilon)

    @staticmethod
    def cubeToDf3(m):
        return _hfb3.Tools_cubeToDf3(m)

    @staticmethod
    def matToVTK(name, m, mesh):
        return _hfb3.Tools_matToVTK(name, m, mesh)

    @staticmethod
    def cubeToVTK(name, m, mesh):
        return _hfb3.Tools_cubeToVTK(name, m, mesh)

    @staticmethod
    def cubeToRaw(m):
        return _hfb3.Tools_cubeToRaw(m)

    @staticmethod
    def matFromCol(v, nb=0):
        return _hfb3.Tools_matFromCol(v, nb)

    @staticmethod
    def matFromRow(v, nb=0):
        return _hfb3.Tools_matFromRow(v, nb)

    @staticmethod
    def matTimesVec(m, v):
        return _hfb3.Tools_matTimesVec(m, v)

    @staticmethod
    def cubeTimesVec(c, v):
        return _hfb3.Tools_cubeTimesVec(c, v)

    @staticmethod
    def cubeTimesMat(c, m):
        return _hfb3.Tools_cubeTimesMat(c, m)

    @staticmethod
    def cubeToMat(c, iaxis, n):
        return _hfb3.Tools_cubeToMat(c, iaxis, n)

    @staticmethod
    def matToStr(*args):
        return _hfb3.Tools_matToStr(*args)

    @staticmethod
    def matPrint(m):
        return _hfb3.Tools_matPrint(m)

    @staticmethod
    def gaussian(g, x):
        return _hfb3.Tools_gaussian(g, x)

    @staticmethod
    def vec2hash(vec):
        return _hfb3.Tools_vec2hash(vec)

    @staticmethod
    def ivec2hash(vec):
        return _hfb3.Tools_ivec2hash(vec)

    @staticmethod
    def getPfaffian(m):
        return _hfb3.Tools_getPfaffian(m)

    @staticmethod
    def vecToStd(v):
        return _hfb3.Tools_vecToStd(v)

    @staticmethod
    def vecToCube(X, nRows, nCols):
        return _hfb3.Tools_vecToCube(X, nRows, nCols)

    @staticmethod
    def matToCube(m, nSlices):
        return _hfb3.Tools_matToCube(m, nSlices)

    @staticmethod
    def vecToStr(vec):
        return _hfb3.Tools_vecToStr(vec)

    @staticmethod
    def ivecToStr(vec):
        return _hfb3.Tools_ivecToStr(vec)

    @staticmethod
    def checkSymmetry(mat, mesg):
        return _hfb3.Tools_checkSymmetry(mat, mesg)

    @staticmethod
    def eig_sym(val, vec, mat):
        return _hfb3.Tools_eig_sym(val, vec, mat)

    @staticmethod
    def findColInMat(v, m):
        return _hfb3.Tools_findColInMat(v, m)

    @staticmethod
    def date():
        return _hfb3.Tools_date()

    @staticmethod
    def clock():
        return _hfb3.Tools_clock()

    @staticmethod
    def timer(*args):
        return _hfb3.Tools_timer(*args)

    @staticmethod
    def timerEnd(*args):
        return _hfb3.Tools_timerEnd(*args)

    @staticmethod
    def progress(*args):
        return _hfb3.Tools_progress(*args)

    @staticmethod
    def compressString(str):
        return _hfb3.Tools_compressString(str)

    @staticmethod
    def decompressString(arg1):
        return _hfb3.Tools_decompressString(arg1)

    @staticmethod
    def readFile(filename):
        return _hfb3.Tools_readFile(filename)

    @staticmethod
    def readCin():
        return _hfb3.Tools_readCin()

    @staticmethod
    def save(result, filename, compress=False):
        return _hfb3.Tools_save(result, filename, compress)

    @staticmethod
    def strIsospin(iso):
        return _hfb3.Tools_strIsospin(iso)

    @staticmethod
    def irand(imax):
        return _hfb3.Tools_irand(imax)

    @staticmethod
    def drand(dmax=1.0):
        return _hfb3.Tools_drand(dmax)

    @staticmethod
    def setSeed(seed):
        return _hfb3.Tools_setSeed(seed)

    @staticmethod
    def end(c=0):
        return _hfb3.Tools_end(c)

    @staticmethod
    def printTable(arg1, style=-1):
        return _hfb3.Tools_printTable(arg1, style)

    @staticmethod
    def boxed(input):
        return _hfb3.Tools_boxed(input)

    @staticmethod
    def valueTable(title, columnLabel, unit, values):
        return _hfb3.Tools_valueTable(title, columnLabel, unit, values)

    @staticmethod
    def getChar(id):
        return _hfb3.Tools_getChar(id)

    @staticmethod
    def stringLen(s):
        return _hfb3.Tools_stringLen(s)

    @staticmethod
    def randomColor(fixedColor=-1):
        return _hfb3.Tools_randomColor(fixedColor)

    @staticmethod
    def color(*args):
        return _hfb3.Tools_color(*args)

    @staticmethod
    def trueColor(r, g, b):
        return _hfb3.Tools_trueColor(r, g, b)

    @staticmethod
    def printOut(mesg):
        return _hfb3.Tools_printOut(mesg)

    @staticmethod
    def debug(mesg):
        return _hfb3.Tools_debug(mesg)

    @staticmethod
    def mesg(cat, mesg):
        return _hfb3.Tools_mesg(cat, mesg)

    @staticmethod
    def info(*args):
        return _hfb3.Tools_info(*args)

    @staticmethod
    def warning(mesg):
        return _hfb3.Tools_warning(mesg)

    @staticmethod
    def _error(mesg):
        return _hfb3.Tools__error(mesg)

    @staticmethod
    def ipow(base, exp):
        return _hfb3.Tools_ipow(base, exp)

    @staticmethod
    def version():
        return _hfb3.Tools_version()

    @staticmethod
    def authors():
        return _hfb3.Tools_authors()

    @staticmethod
    def treeStr(arg1, isShort=False):
        return _hfb3.Tools_treeStr(arg1, isShort)

    @staticmethod
    def getStack():
        return _hfb3.Tools_getStack()

    @staticmethod
    def getLogoStr():
        return _hfb3.Tools_getLogoStr()

    def __repr__(self):
      return self.info()
    def show(self):
      pass


    def __init__(self):
        _hfb3.Tools_swiginit(self, _hfb3.new_Tools())
    __swig_destroy__ = _hfb3.delete_Tools

# Register Tools in _hfb3:
_hfb3.Tools_swigregister(Tools)
class WSPot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hfb3.WSPot_swiginit(self, _hfb3.new_WSPot(*args))

    def calcDirectPot(self):
        return _hfb3.WSPot_calcDirectPot(self)
    directPotentialNeut = property(_hfb3.WSPot_directPotentialNeut_get, _hfb3.WSPot_directPotentialNeut_set)
    directPotentialProt = property(_hfb3.WSPot_directPotentialProt_get, _hfb3.WSPot_directPotentialProt_set)
    mesh = property(_hfb3.WSPot_mesh_get, _hfb3.WSPot_mesh_set)
    az = property(_hfb3.WSPot_az_get, _hfb3.WSPot_az_set)
    __swig_destroy__ = _hfb3.delete_WSPot

# Register WSPot in _hfb3:
_hfb3.WSPot_swigregister(WSPot)
class MultiI(umap_array_int):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiI___eq__(self, other)

    def empty(self):
        return _hfb3.MultiI_empty(self)

    def clear(self):
        return _hfb3.MultiI_clear(self)

    def getKeys(self):
        return _hfb3.MultiI_getKeys(self)

    def getValues(self):
        return _hfb3.MultiI_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiI_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiI_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiI_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiI_swiginit(self, _hfb3.new_MultiI())
    __swig_destroy__ = _hfb3.delete_MultiI

# Register MultiI in _hfb3:
_hfb3.MultiI_swigregister(MultiI)
class MultiD(umap_array_double):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiD___eq__(self, other)

    def empty(self):
        return _hfb3.MultiD_empty(self)

    def clear(self):
        return _hfb3.MultiD_clear(self)

    def getKeys(self):
        return _hfb3.MultiD_getKeys(self)

    def getValues(self):
        return _hfb3.MultiD_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiD_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiD_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiD_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiD_swiginit(self, _hfb3.new_MultiD())
    __swig_destroy__ = _hfb3.delete_MultiD

# Register MultiD in _hfb3:
_hfb3.MultiD_swigregister(MultiD)
class MultiS(umap_array_string):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiS___eq__(self, other)

    def empty(self):
        return _hfb3.MultiS_empty(self)

    def clear(self):
        return _hfb3.MultiS_clear(self)

    def getKeys(self):
        return _hfb3.MultiS_getKeys(self)

    def getValues(self):
        return _hfb3.MultiS_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiS_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiS_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiS_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiS_swiginit(self, _hfb3.new_MultiS())
    __swig_destroy__ = _hfb3.delete_MultiS

# Register MultiS in _hfb3:
_hfb3.MultiS_swigregister(MultiS)
class MultiV(umap_array_vec):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiV___eq__(self, other)

    def empty(self):
        return _hfb3.MultiV_empty(self)

    def clear(self):
        return _hfb3.MultiV_clear(self)

    def getKeys(self):
        return _hfb3.MultiV_getKeys(self)

    def getValues(self):
        return _hfb3.MultiV_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiV_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiV_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiV_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiV_swiginit(self, _hfb3.new_MultiV())
    __swig_destroy__ = _hfb3.delete_MultiV

# Register MultiV in _hfb3:
_hfb3.MultiV_swigregister(MultiV)
class MultiIV(umap_array_ivec):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiIV___eq__(self, other)

    def empty(self):
        return _hfb3.MultiIV_empty(self)

    def clear(self):
        return _hfb3.MultiIV_clear(self)

    def getKeys(self):
        return _hfb3.MultiIV_getKeys(self)

    def getValues(self):
        return _hfb3.MultiIV_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiIV_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiIV_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiIV_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiIV_swiginit(self, _hfb3.new_MultiIV())
    __swig_destroy__ = _hfb3.delete_MultiIV

# Register MultiIV in _hfb3:
_hfb3.MultiIV_swigregister(MultiIV)
class MultiUV(umap_array_uvec):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiUV___eq__(self, other)

    def empty(self):
        return _hfb3.MultiUV_empty(self)

    def clear(self):
        return _hfb3.MultiUV_clear(self)

    def getKeys(self):
        return _hfb3.MultiUV_getKeys(self)

    def getValues(self):
        return _hfb3.MultiUV_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiUV_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiUV_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiUV_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiUV_swiginit(self, _hfb3.new_MultiUV())
    __swig_destroy__ = _hfb3.delete_MultiUV

# Register MultiUV in _hfb3:
_hfb3.MultiUV_swigregister(MultiUV)
class MultiM(umap_array_mat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiM___eq__(self, other)

    def empty(self):
        return _hfb3.MultiM_empty(self)

    def clear(self):
        return _hfb3.MultiM_clear(self)

    def getKeys(self):
        return _hfb3.MultiM_getKeys(self)

    def getValues(self):
        return _hfb3.MultiM_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiM_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiM_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiM_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiM_swiginit(self, _hfb3.new_MultiM())
    __swig_destroy__ = _hfb3.delete_MultiM

# Register MultiM in _hfb3:
_hfb3.MultiM_swigregister(MultiM)
class MultiIM(umap_array_imat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiIM___eq__(self, other)

    def empty(self):
        return _hfb3.MultiIM_empty(self)

    def clear(self):
        return _hfb3.MultiIM_clear(self)

    def getKeys(self):
        return _hfb3.MultiIM_getKeys(self)

    def getValues(self):
        return _hfb3.MultiIM_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiIM_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiIM_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiIM_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiIM_swiginit(self, _hfb3.new_MultiIM())
    __swig_destroy__ = _hfb3.delete_MultiIM

# Register MultiIM in _hfb3:
_hfb3.MultiIM_swigregister(MultiIM)
class MultiUM(umap_array_umat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiUM___eq__(self, other)

    def empty(self):
        return _hfb3.MultiUM_empty(self)

    def clear(self):
        return _hfb3.MultiUM_clear(self)

    def getKeys(self):
        return _hfb3.MultiUM_getKeys(self)

    def getValues(self):
        return _hfb3.MultiUM_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiUM_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiUM_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiUM_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiUM_swiginit(self, _hfb3.new_MultiUM())
    __swig_destroy__ = _hfb3.delete_MultiUM

# Register MultiUM in _hfb3:
_hfb3.MultiUM_swigregister(MultiUM)
class MultiC(umap_array_cube):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiC___eq__(self, other)

    def empty(self):
        return _hfb3.MultiC_empty(self)

    def clear(self):
        return _hfb3.MultiC_clear(self)

    def getKeys(self):
        return _hfb3.MultiC_getKeys(self)

    def getValues(self):
        return _hfb3.MultiC_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiC_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiC_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiC_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiC_swiginit(self, _hfb3.new_MultiC())
    __swig_destroy__ = _hfb3.delete_MultiC

# Register MultiC in _hfb3:
_hfb3.MultiC_swigregister(MultiC)
class MultiIC(umap_array_icube):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiIC___eq__(self, other)

    def empty(self):
        return _hfb3.MultiIC_empty(self)

    def clear(self):
        return _hfb3.MultiIC_clear(self)

    def getKeys(self):
        return _hfb3.MultiIC_getKeys(self)

    def getValues(self):
        return _hfb3.MultiIC_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiIC_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiIC_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiIC_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiIC_swiginit(self, _hfb3.new_MultiIC())
    __swig_destroy__ = _hfb3.delete_MultiIC

# Register MultiIC in _hfb3:
_hfb3.MultiIC_swigregister(MultiIC)
class MultiUC(umap_array_ucube):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiUC___eq__(self, other)

    def empty(self):
        return _hfb3.MultiUC_empty(self)

    def clear(self):
        return _hfb3.MultiUC_clear(self)

    def getKeys(self):
        return _hfb3.MultiUC_getKeys(self)

    def getValues(self):
        return _hfb3.MultiUC_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiUC_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiUC_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiUC_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiUC_swiginit(self, _hfb3.new_MultiUC())
    __swig_destroy__ = _hfb3.delete_MultiUC

# Register MultiUC in _hfb3:
_hfb3.MultiUC_swigregister(MultiUC)
class MultiStates(umap_array_states):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, other):
        return _hfb3.MultiStates___eq__(self, other)

    def empty(self):
        return _hfb3.MultiStates_empty(self)

    def clear(self):
        return _hfb3.MultiStates_clear(self)

    def getKeys(self):
        return _hfb3.MultiStates_getKeys(self)

    def getValues(self):
        return _hfb3.MultiStates_getValues(self)

    def keyToStr(self, k):
        return _hfb3.MultiStates_keyToStr(self, k)

    def size(self):
        return _hfb3.MultiStates_size(self)

    def info(self, isShort=False):
        return _hfb3.MultiStates_info(self, isShort)

    def __call__(self, *vals):
      return self.__getitem__([*vals])


    def __init__(self):
        _hfb3.MultiStates_swiginit(self, _hfb3.new_MultiStates())
    __swig_destroy__ = _hfb3.delete_MultiStates

# Register MultiStates in _hfb3:
_hfb3.MultiStates_swigregister(MultiStates)
class VectorState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hfb3.VectorState_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hfb3.VectorState___nonzero__(self)

    def __bool__(self):
        return _hfb3.VectorState___bool__(self)

    def __len__(self):
        return _hfb3.VectorState___len__(self)

    def __getslice__(self, i, j):
        return _hfb3.VectorState___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hfb3.VectorState___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hfb3.VectorState___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hfb3.VectorState___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hfb3.VectorState___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hfb3.VectorState___setitem__(self, *args)

    def pop(self):
        return _hfb3.VectorState_pop(self)

    def append(self, x):
        return _hfb3.VectorState_append(self, x)

    def empty(self):
        return _hfb3.VectorState_empty(self)

    def size(self):
        return _hfb3.VectorState_size(self)

    def swap(self, v):
        return _hfb3.VectorState_swap(self, v)

    def begin(self):
        return _hfb3.VectorState_begin(self)

    def end(self):
        return _hfb3.VectorState_end(self)

    def rbegin(self):
        return _hfb3.VectorState_rbegin(self)

    def rend(self):
        return _hfb3.VectorState_rend(self)

    def clear(self):
        return _hfb3.VectorState_clear(self)

    def get_allocator(self):
        return _hfb3.VectorState_get_allocator(self)

    def pop_back(self):
        return _hfb3.VectorState_pop_back(self)

    def erase(self, *args):
        return _hfb3.VectorState_erase(self, *args)

    def __init__(self, *args):
        _hfb3.VectorState_swiginit(self, _hfb3.new_VectorState(*args))

    def push_back(self, x):
        return _hfb3.VectorState_push_back(self, x)

    def front(self):
        return _hfb3.VectorState_front(self)

    def back(self):
        return _hfb3.VectorState_back(self)

    def assign(self, n, x):
        return _hfb3.VectorState_assign(self, n, x)

    def resize(self, *args):
        return _hfb3.VectorState_resize(self, *args)

    def insert(self, *args):
        return _hfb3.VectorState_insert(self, *args)

    def reserve(self, n):
        return _hfb3.VectorState_reserve(self, n)

    def capacity(self):
        return _hfb3.VectorState_capacity(self)
    __swig_destroy__ = _hfb3.delete_VectorState

# Register VectorState in _hfb3:
_hfb3.VectorState_swigregister(VectorState)

class PyCallback(Callback):
  def __init__(self):
    Callback.__init__(self)
  def run(self, str):
#print(str, end = " ", flush = True)
#print(str)
    print(str, flush = True)

cvar.useColors = True
cvar.msgToOut = [MSG_ERROR, MSG_MAIN, MSG_INFO, MSG_WARNING]
cvar.exitOnError = False

cvar.logger.setCallback(PyCallback().__disown__())

#cvar.logger.log(Tools.version())
#cvar.logger.log("Python logger callback activated")


import numpy as np

def dictToDataTree(ldict):

  result = DataTree()
  result.strict_mode = False

  for v in ldict.items():

    if type(v[1]) is int:
      result.setI(v[0], v[1])

    elif type(v[1]) is float:
      result.setD(v[0], v[1])

    elif type(v[1]) is str:
      result.setS(v[0], v[1])

    elif type(v[1]) is np.ndarray:

      if v[1].dtype == np.float64:
        if v[1].ndim == 1:
          result.setV(v[0], v[1])
        if v[1].ndim == 2:
          result.setM(v[0], v[1])
        if v[1].ndim == 3:
          result.setC(v[0], v[1])

      if v[1].dtype == np.int32:
        if v[1].ndim == 1:
          result.setIV(v[0], v[1])
        if v[1].ndim == 2:
          result.setIM(v[0], v[1])
        if v[1].ndim == 3:
          result.setIC(v[0], v[1])

      if v[1].dtype == np.uint64:
        if v[1].ndim == 1:
          result.setUV(v[0], v[1])
        if v[1].ndim == 2:
          result.setUM(v[0], v[1])
        if v[1].ndim == 3:
          result.setUC(v[0], v[1])

    elif v[1] is None:
      result.setE(v[0])

  return result


def bytesToDataTree(bytes):
    return _hfb3.bytesToDataTree(bytes)

def dataTreeToBytes(dataTree):
    return _hfb3.dataTreeToBytes(dataTree)

