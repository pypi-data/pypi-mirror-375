---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/builtin_types_circular/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
pkg_certs = _cribo.types.SimpleNamespace(__name__='pkg.certs')
pkg = _cribo.types.SimpleNamespace(__name__='pkg', __initializing__=False, __initialized__=False)
pkg.certs = pkg_certs
"""Certs module."""
pkg___version__ = _cribo.types.SimpleNamespace(__name__='pkg.__version__')
pkg.__version__ = pkg___version__
"""Version info."""
__version__ = "1.0.0"
pkg___version__.__version__ = __version__
pkg__internal_utils = _cribo.types.SimpleNamespace(__name__='pkg._internal_utils', __initializing__=False, __initialized__=False)
pkg._internal_utils = pkg__internal_utils
pkg_compat = _cribo.types.SimpleNamespace(__name__='pkg.compat', __initializing__=False, __initialized__=False)
pkg.compat = pkg_compat
pkg_models = _cribo.types.SimpleNamespace(__name__='pkg.models', __initializing__=False, __initialized__=False)
pkg.models = pkg_models
pkg_sessions = _cribo.types.SimpleNamespace(__name__='pkg.sessions', __initializing__=False, __initialized__=False)
pkg.sessions = pkg_sessions
pkg_utils = _cribo.types.SimpleNamespace(__name__='pkg.utils', __initializing__=False, __initialized__=False)
pkg.utils = pkg_utils
def _cribo_init___cribo_b86557_pkg(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg__internal_utils, pkg_compat, pkg_sessions, pkg_utils
    """Main package that creates wrapper module pattern like requests."""
    pkg_utils = _cribo_init___cribo_70cac5_pkg_utils(pkg_utils)
    utils = pkg.utils
    self.utils = utils
    pkg_compat = _cribo_init___cribo_d78f34_pkg_compat(pkg_compat)
    compat = pkg.compat
    self.compat = compat
    pkg__internal_utils = _cribo_init___cribo_5a392a_pkg__internal_utils(pkg__internal_utils)
    _internal_utils = pkg._internal_utils
    self._internal_utils = _internal_utils
    pkg_utils = _cribo_init___cribo_70cac5_pkg_utils(pkg_utils)
    process_data = pkg_utils.process_data
    self.process_data = process_data
    self.process_data = process_data
    pkg_compat = _cribo_init___cribo_d78f34_pkg_compat(pkg_compat)
    basestring = pkg_compat.basestring
    self.basestring = basestring
    pkg_sessions = _cribo_init___cribo_f4100a_pkg_sessions(pkg_sessions)
    Session = pkg_sessions.Session
    self.Session = Session
    self.Session = Session
    self.__version__ = pkg___version__
    self.certs = pkg_certs
    self.__version__ = pkg___version__
    self.certs = pkg_certs
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg.__init__ = _cribo_init___cribo_b86557_pkg
def _cribo_init___cribo_5a392a_pkg__internal_utils(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_compat
    """Internal utils that depends on compat, creating circular dependency."""
    pkg_compat = _cribo_init___cribo_d78f34_pkg_compat(pkg_compat)
    builtin_str = pkg.compat.builtin_str
    self.builtin_str = builtin_str
    self.builtin_str = builtin_str
    HEADER_VALIDATORS = {"str": lambda x: isinstance(x, builtin_str), "bytes": lambda x: isinstance(x, bytes)}
    self.HEADER_VALIDATORS = HEADER_VALIDATORS

    def to_native_string(value):
        """Convert to native string."""
        if isinstance(value, builtin_str):
            return value
        return str(value)
    self.to_native_string = to_native_string
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg__internal_utils.__init__ = _cribo_init___cribo_5a392a_pkg__internal_utils
def _cribo_init___cribo_d78f34_pkg_compat(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Compatibility module that matches requests.compat pattern exactly."""
    str = __import__('builtins').str
    self.str = str
    bytes = __import__('builtins').bytes
    self.bytes = bytes
    int = __import__('builtins').int
    self.int = int
    builtin_str = __import__('builtins').str
    self.builtin_str = builtin_str
    basestring = __import__('builtins').str, __import__('builtins').bytes
    self.basestring = basestring
    integer_types = __import__('builtins').int,
    self.integer_types = integer_types
    __version__ = pkg.__version__
    self.__version__ = __version__
    OrderedDict = _cribo.collections.OrderedDict
    self.OrderedDict = OrderedDict
    self.OrderedDict = _cribo.collections.OrderedDict
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_compat.__init__ = _cribo_init___cribo_d78f34_pkg_compat
def _cribo_init___cribo_55aa63_pkg_models(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_compat, pkg_utils
    """Models module to add more complexity."""
    pkg_utils = _cribo_init___cribo_70cac5_pkg_utils(pkg_utils)
    utils = pkg.utils
    self.utils = utils
    pkg_compat = _cribo_init___cribo_d78f34_pkg_compat(pkg_compat)
    basestring = pkg.compat.basestring
    self.basestring = basestring
    self.basestring = basestring

    class Request:
        """Request model."""

        def __init__(self, data):
            self.data = data
    Request.__module__ = 'pkg.models'
    self.Request = Request
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_models.__init__ = _cribo_init___cribo_55aa63_pkg_models
def _cribo_init___cribo_f4100a_pkg_sessions(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_compat, pkg_models, pkg_utils
    """Sessions module that creates more circular dependencies."""
    pkg_compat = _cribo_init___cribo_d78f34_pkg_compat(pkg_compat)
    compat = pkg.compat
    self.compat = compat
    pkg_compat = _cribo_init___cribo_d78f34_pkg_compat(pkg_compat)
    OrderedDict = pkg.compat.OrderedDict
    self.OrderedDict = OrderedDict
    self.OrderedDict = OrderedDict
    pkg_utils = _cribo_init___cribo_70cac5_pkg_utils(pkg_utils)
    utils = pkg.utils
    self.utils = utils
    pkg_models = _cribo_init___cribo_55aa63_pkg_models(pkg_models)
    models = pkg.models
    self.models = models

    class Session:
        """Session class that depends on multiple modules."""

        def __init__(self):
            self.headers = OrderedDict() if hasattr(compat, "OrderedDict") else {}

        def request(self, data):
            """Make a request using utils."""
            return utils.process_data(data)
    Session.__module__ = 'pkg.sessions'
    self.Session = Session
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_sessions.__init__ = _cribo_init___cribo_f4100a_pkg_sessions
def _cribo_init___cribo_70cac5_pkg_utils(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg__internal_utils, pkg_compat
    """Utils module that matches requests.utils import pattern."""
    certs = pkg.certs
    self.certs = certs
    __version__ = pkg___version__.__version__
    pkg_utils.__version__ = __version__
    pkg__internal_utils = _cribo_init___cribo_5a392a_pkg__internal_utils(pkg__internal_utils)
    HEADER_VALIDATORS = pkg._internal_utils.HEADER_VALIDATORS
    self.HEADER_VALIDATORS = HEADER_VALIDATORS
    self.HEADER_VALIDATORS = HEADER_VALIDATORS
    to_native_string = pkg._internal_utils.to_native_string
    self.to_native_string = to_native_string
    self.to_native_string = to_native_string
    pkg_compat = _cribo_init___cribo_d78f34_pkg_compat(pkg_compat)
    compat = pkg.compat
    self.compat = compat
    pkg_compat = _cribo_init___cribo_d78f34_pkg_compat(pkg_compat)
    basestring = pkg.compat.basestring
    self.basestring = basestring
    self.basestring = basestring
    bytes = pkg.compat.bytes
    self.bytes = bytes
    self.bytes = __import__('builtins').bytes
    integer_types = pkg.compat.integer_types
    self.integer_types = integer_types
    self.integer_types = integer_types
    str = pkg.compat.str
    self.str = str
    self.str = __import__('builtins').str

    def process_data(data):
        """Process data using compat.bytes attribute.\n\n    This will fail when bundled because the bundler skips 'bytes = bytes'\n    in compat's init function.\n    """
        if isinstance(data, compat.bytes):
            return f"Processed {len(data)} bytes"
        elif isinstance(data, compat.str):
            return f"Processed string: {data}"
        else:
            return "Unknown type"
    self.process_data = process_data
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_utils.__init__ = _cribo_init___cribo_70cac5_pkg_utils
"""Test wrapper module pattern that triggers init functions with builtin types bug.\n\nThis reproduces the exact pattern from requests where:\n1. Multiple modules form circular dependencies (wrapper modules)\n2. One wrapper module (compat) has self-referential builtin assignments\n3. Another wrapper module (utils) accesses these as attributes\n4. The bundler generates init functions for wrapper modules\n"""
__cribo_init_result = _cribo_init___cribo_b86557_pkg(pkg)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(pkg, attr, getattr(__cribo_init_result, attr))
result = pkg.process_data(b"test")
print(f"Result: {result}")
print("Success!")
sessions = pkg.sessions
models = pkg.models
compat = pkg.compat
utils = pkg.utils
certs = pkg.certs
