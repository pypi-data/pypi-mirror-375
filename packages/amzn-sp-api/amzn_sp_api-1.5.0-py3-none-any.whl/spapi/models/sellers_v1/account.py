# coding: utf-8

"""
    The Selling Partner API for Sellers

    The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_participation_list': 'List[MarketplaceParticipation]',
        'business_type': 'str',
        'selling_plan': 'str',
        'business': 'Business',
        'primary_contact': 'PrimaryContact',
    }

    attribute_map = {
        'marketplace_participation_list': 'marketplaceParticipationList',
        'business_type': 'businessType',
        'selling_plan': 'sellingPlan',
        'business': 'business',
        'primary_contact': 'primaryContact',
    }

    def __init__(self, marketplace_participation_list=None, business_type=None, selling_plan=None, business=None, primary_contact=None, _configuration=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._marketplace_participation_list = None
        self._business_type = None
        self._selling_plan = None
        self._business = None
        self._primary_contact = None
        self.discriminator = None

        self.marketplace_participation_list = marketplace_participation_list
        self.business_type = business_type
        self.selling_plan = selling_plan
        if business is not None:
            self.business = business
        if primary_contact is not None:
            self.primary_contact = primary_contact

    @property
    def marketplace_participation_list(self):
        """Gets the marketplace_participation_list of this Account.  # noqa: E501

        List of marketplace participations.  # noqa: E501

        :return: The marketplace_participation_list of this Account.  # noqa: E501
        :rtype: List[MarketplaceParticipation]
        """
        return self._marketplace_participation_list

    @marketplace_participation_list.setter
    def marketplace_participation_list(self, marketplace_participation_list):
        """Sets the marketplace_participation_list of this Account.

        List of marketplace participations.  # noqa: E501

        :param marketplace_participation_list: The marketplace_participation_list of this Account.  # noqa: E501
        :type: List[MarketplaceParticipation]
        """
        if self._configuration.client_side_validation and marketplace_participation_list is None:
            raise ValueError("Invalid value for `marketplace_participation_list`, must not be `None`")  # noqa: E501

        self._marketplace_participation_list = marketplace_participation_list

    @property
    def business_type(self):
        """Gets the business_type of this Account.  # noqa: E501

        The type of business registered for the seller account.  # noqa: E501

        :return: The business_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this Account.

        The type of business registered for the seller account.  # noqa: E501

        :param business_type: The business_type of this Account.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and business_type is None:
            raise ValueError("Invalid value for `business_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CHARITY", "CRAFTSMAN", "NATURAL_PERSON_COMPANY", "PUBLIC_LISTED", "PRIVATE_LIMITED", "SOLE_PROPRIETORSHIP", "STATE_OWNED", "INDIVIDUAL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                business_type not in allowed_values):
            raise ValueError(
                "Invalid value for `business_type` ({0}), must be one of {1}"  # noqa: E501
                .format(business_type, allowed_values)
            )

        self._business_type = business_type

    @property
    def selling_plan(self):
        """Gets the selling_plan of this Account.  # noqa: E501

        The selling plan details.  # noqa: E501

        :return: The selling_plan of this Account.  # noqa: E501
        :rtype: str
        """
        return self._selling_plan

    @selling_plan.setter
    def selling_plan(self, selling_plan):
        """Sets the selling_plan of this Account.

        The selling plan details.  # noqa: E501

        :param selling_plan: The selling_plan of this Account.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and selling_plan is None:
            raise ValueError("Invalid value for `selling_plan`, must not be `None`")  # noqa: E501
        allowed_values = ["PROFESSIONAL", "INDIVIDUAL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                selling_plan not in allowed_values):
            raise ValueError(
                "Invalid value for `selling_plan` ({0}), must be one of {1}"  # noqa: E501
                .format(selling_plan, allowed_values)
            )

        self._selling_plan = selling_plan

    @property
    def business(self):
        """Gets the business of this Account.  # noqa: E501


        :return: The business of this Account.  # noqa: E501
        :rtype: Business
        """
        return self._business

    @business.setter
    def business(self, business):
        """Sets the business of this Account.


        :param business: The business of this Account.  # noqa: E501
        :type: Business
        """

        self._business = business

    @property
    def primary_contact(self):
        """Gets the primary_contact of this Account.  # noqa: E501


        :return: The primary_contact of this Account.  # noqa: E501
        :rtype: PrimaryContact
        """
        return self._primary_contact

    @primary_contact.setter
    def primary_contact(self, primary_contact):
        """Sets the primary_contact of this Account.


        :param primary_contact: The primary_contact of this Account.  # noqa: E501
        :type: PrimaryContact
        """

        self._primary_contact = primary_contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Account):
            return True

        return self.to_dict() != other.to_dict()
