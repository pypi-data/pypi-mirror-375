# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .vpc_cidr_block_association import VpcCidrBlockAssociation
from .tenancy import Tenancy
from .vpc_ipv_6_cidr_block_association import VpcIpv6CidrBlockAssociation
from .vpc_state import VpcState
from .tag import Tag
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class Vpc(UniversalBaseModel):
    cidr_block: typing.Optional[str] = pydantic.Field(alias="cidrBlock", default=None)
    cidr_block_association_set: typing.Optional[typing.List[VpcCidrBlockAssociation]] = pydantic.Field(
        alias="cidrBlockAssociationSet", default=None
    )
    dhcp_options_id: typing.Optional[str] = pydantic.Field(alias="dhcpOptionsId", default=None)
    instance_tenancy: typing.Optional[Tenancy] = pydantic.Field(alias="instanceTenancy", default=None)
    ipv_6_cidr_block_association_set: typing.Optional[typing.List[VpcIpv6CidrBlockAssociation]] = pydantic.Field(
        alias="ipv6CidrBlockAssociationSet", default=None
    )
    is_default: typing.Optional[bool] = pydantic.Field(alias="isDefault", default=None)
    owner_id: typing.Optional[str] = pydantic.Field(alias="ownerId", default=None)
    state: typing.Optional[VpcState] = None
    tags: typing.Optional[typing.List[Tag]] = None
    vpc_id: typing.Optional[str] = pydantic.Field(alias="vpcId", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
