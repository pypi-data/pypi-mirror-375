# coding: utf-8

"""
    The Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.

    The version of the OpenAPI document: 2024-06-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class DeferredContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deferral_reason': 'str',
        'maturity_date': 'datetime',
    }

    attribute_map = {
        'deferral_reason': 'deferralReason',
        'maturity_date': 'maturityDate',
    }

    def __init__(self, deferral_reason=None, maturity_date=None, _configuration=None):  # noqa: E501
        """DeferredContext - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deferral_reason = None
        self._maturity_date = None
        self.discriminator = None

        if deferral_reason is not None:
            self.deferral_reason = deferral_reason
        if maturity_date is not None:
            self.maturity_date = maturity_date

    @property
    def deferral_reason(self):
        """Gets the deferral_reason of this DeferredContext.  # noqa: E501

        The deferral policy applied to the transaction.  **Examples:** `B2B` (invoiced orders), `DD7` (delivery date policy)  # noqa: E501

        :return: The deferral_reason of this DeferredContext.  # noqa: E501
        :rtype: str
        """
        return self._deferral_reason

    @deferral_reason.setter
    def deferral_reason(self, deferral_reason):
        """Sets the deferral_reason of this DeferredContext.

        The deferral policy applied to the transaction.  **Examples:** `B2B` (invoiced orders), `DD7` (delivery date policy)  # noqa: E501

        :param deferral_reason: The deferral_reason of this DeferredContext.  # noqa: E501
        :type: str
        """

        self._deferral_reason = deferral_reason

    @property
    def maturity_date(self):
        """Gets the maturity_date of this DeferredContext.  # noqa: E501

        Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).  # noqa: E501

        :return: The maturity_date of this DeferredContext.  # noqa: E501
        :rtype: datetime
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this DeferredContext.

        Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).  # noqa: E501

        :param maturity_date: The maturity_date of this DeferredContext.  # noqa: E501
        :type: datetime
        """

        self._maturity_date = maturity_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeferredContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeferredContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeferredContext):
            return True

        return self.to_dict() != other.to_dict()
