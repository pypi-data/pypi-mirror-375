from ...backends import global_backend as global_backend
from ...tensor import to_tensor as to_tensor
from .utils.utils import FLOAT_2_COMPLEX as FLOAT_2_COMPLEX, INV_SQRT2 as INV_SQRT2, SQRT2 as SQRT2
from functools import lru_cache as lru_cache
from pyvqnet.dtype import C_DTYPE as C_DTYPE, D_DTYPE as D_DTYPE, F_DTYPE as F_DTYPE, Z_DTYPE as Z_DTYPE, float_dtype_to_complex_dtype as float_dtype_to_complex_dtype, get_readable_dtype_str as get_readable_dtype_str, kcomplex128 as kcomplex128, kcomplex32 as kcomplex32, kcomplex64 as kcomplex64, kfloat16 as kfloat16, kfloat32 as kfloat32, kfloat64 as kfloat64
from pyvqnet.tensor import QTensor as QTensor, tensor as tensor

def rx_matrix(params): ...
def rz_matrix(params): ...
def ry_matrix(params): ...
def rxx_matrix(params): ...
def ryy_matrix(params): ...
def rzz_matrix(params): ...
def rzx_matrix(params): ...
def u1_matrix(params): ...
def u2_matrix(params): ...
def u3_matrix(params): ...
def rot_matrix(params): ...
def cu1_matrix(params): ...
def basic_state_projector_matrix(basis_state): ...
def isingxx_matrix(params): ...
def isingyy_matrix(params): ...
def isingzz_matrix(params): ...
def isingxy_matrix(params): ...
def phaseshift_matrix(params): ...
def pauli_eigs(n: int) -> QTensor: ...
def multirz_matrix(params, n_wires: int): ...
def controlledphaseshift_matrix(params): ...
def single_excitation_matrix(params): ...
def double_excitation_matrix(phi): ...
def crx_matrix(params):
    """Compute unitary matrix for CRX gate.

    .. math::

        \x08egin{align}
            CR_y(\\phi) &=
            \x08egin{bmatrix}
                1 & 0 & 0 & 0 \\\n                0 & 1 & 0 & 0\\\n                0 & 0 & \\cos(\\phi/2) & -\\sin(\\phi/2)\\\n                0 & 0 & \\sin(\\phi/2) & \\cos(\\phi/2)
            \\end{bmatrix}.
        \\end{align}
    """
def cry_matrix(params):
    """Compute unitary matrix for CRY gate.

    .. math::

            \x08egin{align}
                CR_y(\\phi) &=
                \x08egin{bmatrix}
                    1 & 0 & 0 & 0 \\\n                    0 & 1 & 0 & 0\\\n                    0 & 0 & \\cos(\\phi/2) & -\\sin(\\phi/2)\\\n                    0 & 0 & \\sin(\\phi/2) & \\cos(\\phi/2)
                \\end{bmatrix}.
            \\end{align}

    """
def crot_matrix(params):
    """Compute unitary matrix for CRot gate.


    """
def crz_matrix(params):
    """Compute unitary matrix for CRZ gate.

    .. math::

        \x08egin{align}
             CR_z(\\phi) &=
             \x08egin{bmatrix}
                1 & 0 & 0 & 0 \\\n                0 & 1 & 0 & 0\\\n                0 & 0 & e^{-i\\phi/2} & 0\\\n                0 & 0 & 0 & e^{i\\phi/2}
            \\end{bmatrix}.
        \\end{align}

    """
def ccz_matrix(dtype): ...
def hadamard_matrix(dtype): ...
def shadamard_matrix(dtype): ...
def paulix_matrix(dtype): ...
def pauliy_matrix(dtype): ...
def pauliz_matrix(dtype): ...
def identity_matrix(dtype): ...
def X_matrix(dtype): ...
def Y_matrix(dtype): ...
def Z_matrix(dtype): ...
def s_matrix(dtype): ...
def t_matrix(dtype): ...
def sx_matrix(dtype): ...
def iswap_matrix(dtype): ...
def cnot_matrix(dtype): ...
def cz_matrix(dtype): ...
def cy_matrix(dtype): ...
def swap_matrix(dtype): ...
def sswap_matrix(dtype): ...
def cswap_matrix(dtype): ...
def toffoli_matrix(dtype): ...
def x1_matrix(dtype): ...
def y1_matrix(dtype): ...
def z1_matrix(dtype): ...
def sdg_matrix(dtype): ...
def tdg_matrix(dtype): ...
def ch_matrix(dtype): ...
def float_mat_dict(name: str): ...
def half_float_mat_dict(name: str): ...
def double_mat_dict(name: str): ...
