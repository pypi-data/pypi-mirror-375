# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class SegmentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'glance_view_weight_percentage': 'float',
        'sample_location': 'SampleLocation',
    }

    attribute_map = {
        'glance_view_weight_percentage': 'glanceViewWeightPercentage',
        'sample_location': 'sampleLocation',
    }

    def __init__(self, glance_view_weight_percentage=None, sample_location=None, _configuration=None):  # noqa: E501
        """SegmentDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._glance_view_weight_percentage = None
        self._sample_location = None
        self.discriminator = None

        if glance_view_weight_percentage is not None:
            self.glance_view_weight_percentage = glance_view_weight_percentage
        if sample_location is not None:
            self.sample_location = sample_location

    @property
    def glance_view_weight_percentage(self):
        """Gets the glance_view_weight_percentage of this SegmentDetails.  # noqa: E501

        The glance view weighted percentage for this segment, which is the glance views for this segment as a percentage of total glance views across all segments for the ASIN. A higher percentage indicates that more Amazon customers receive this offer as the Featured Offer.  # noqa: E501

        :return: The glance_view_weight_percentage of this SegmentDetails.  # noqa: E501
        :rtype: float
        """
        return self._glance_view_weight_percentage

    @glance_view_weight_percentage.setter
    def glance_view_weight_percentage(self, glance_view_weight_percentage):
        """Sets the glance_view_weight_percentage of this SegmentDetails.

        The glance view weighted percentage for this segment, which is the glance views for this segment as a percentage of total glance views across all segments for the ASIN. A higher percentage indicates that more Amazon customers receive this offer as the Featured Offer.  # noqa: E501

        :param glance_view_weight_percentage: The glance_view_weight_percentage of this SegmentDetails.  # noqa: E501
        :type: float
        """

        self._glance_view_weight_percentage = glance_view_weight_percentage

    @property
    def sample_location(self):
        """Gets the sample_location of this SegmentDetails.  # noqa: E501


        :return: The sample_location of this SegmentDetails.  # noqa: E501
        :rtype: SampleLocation
        """
        return self._sample_location

    @sample_location.setter
    def sample_location(self, sample_location):
        """Sets the sample_location of this SegmentDetails.


        :param sample_location: The sample_location of this SegmentDetails.  # noqa: E501
        :type: SampleLocation
        """

        self._sample_location = sample_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SegmentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegmentDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SegmentDetails):
            return True

        return self.to_dict() != other.to_dict()
