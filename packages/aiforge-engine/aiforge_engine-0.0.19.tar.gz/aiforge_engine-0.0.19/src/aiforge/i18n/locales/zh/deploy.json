{  
  "docker": {
    "checking_environment": "🔍 检查Docker环境...",  
    "docker_installed": "✅ Docker已安装",  
    "docker_not_installed": "❌ Docker未安装",  
    "docker_not_in_path": "❌ Docker未安装或不在PATH中",  
    "docker_running": "✅ Docker服务正在运行",  
    "docker_not_running": "❌ Docker服务未运行，请启动Docker Desktop",  
    "cannot_connect_docker": "❌ 无法连接到Docker服务",  
    "docker_compose_available": "✅ Docker Compose可用",  
    "docker_compose_not_available": "❌ Docker Compose不可用",  
    "docker_compose_not_installed": "❌ Docker Compose未安装",  
    "compose_file_exists": "✅ docker-compose.yml存在",  
    "compose_file_not_exists": "❌ docker-compose.yml不存在",  
    "dev_compose_file_exists": "✅ docker-compose.dev.yml存在",  
    "dev_compose_file_not_exists": "ℹ️ docker-compose.dev.yml不存在（开发模式不可用）",  
    "aiforge_image_exists": "✅ AIForge镜像已存在",  
    "aiforge_image_not_exists": "ℹ️ AIForge镜像不存在，需要构建",  
    "cannot_check_image_status": "⚠️ 无法检查AIForge镜像状态",  
    "building_images": "🔨 检查并构建必要的镜像...",  
    "image_exists_skip_build": "✅ AIForge镜像已存在，跳过构建",  
    "start_building": "📦 开始构建AIForge镜像...",  
    "build_time_notice": "ℹ️ 首次构建可能需要5-10分钟，请耐心等待...",  
    "build_progress": "📦 构建进度:",  
    "build_success": "✅ 镜像构建成功",  
    "build_failed": "❌ 镜像构建失败",  
    "build_exception": "❌ 构建过程异常: {error}",  
    "starting_services": "🚀 AIForge Docker一体化启动...",  
    "docker_not_installed_help": "💡 下载地址: https://www.docker.com/products/docker-desktop",  
    "docker_not_running_help": "💡 请启动Docker Desktop并等待其完全启动",  
    "docker_compose_not_available_msg": "❌ Docker Compose不可用",  
    "compose_file_not_exists_msg": "❌ docker-compose.yml文件不存在",  
    "dev_mode_fallback": "💡 将使用生产模式启动",  
    "cleaning_old_containers": "🧹 清理旧容器...",  
    "dev_mode_start": "🔧 开发模式启动（代码热重载）",  
    "production_mode_start": "🔨 生产模式启动",  
    "searxng_enabled": "🔍 启用 SearXNG 搜索服务",  
    "searxng_not_enabled": "⚠️ SearXNG 搜索服务未启用",  
    "service_start_success": "✅ Docker服务启动成功",  
    "waiting_services": "⏳ 等待服务完全启动...",  
    "startup_complete": "🎉 AIForge Docker服务一体化启动完成！",  
    "ready_to_use": "💡 现在可以开始使用AIForge了",  
    "service_start_failed": "❌ Docker服务启动失败: {error}",  
    "startup_exception": "❌ 启动过程异常: {error}",  
    "stopping_services": "🛑 停止AIForge Docker服务...",  
    "stop_success": "✅ Docker服务停止成功",  
    "stop_failed": "❌ Docker服务停止失败: {error}",  
    "service_status": "📊 AIForge Docker服务状态:",  
    "cannot_get_status": "❌ 无法获取服务状态",  
    "cleaning_resources": "🧹 清理AIForge Docker资源...",  
    "cleanup_success": "✅ Docker资源清理完成",  
    "cleanup_failed": "❌ 清理失败: {error}",  
    "deep_cleanup_start": "🔥 执行AIForge彻底清理...",  
    "deep_cleanup_warning": "⚠️ 这将删除AIForge相关的Docker资源，但保留Python、SearXNG、Nginx基础镜像",  
    "stopping_all_services": "🛑 停止所有服务...",  
    "cleaning_built_images": "🗑️ 清理AIForge构建镜像...",  
    "cleaning_build_cache": "🧹 清理构建缓存...",  
    "cleaning_dangling_resources": "🌐 清理悬空资源...",  
    "deep_cleanup_success": "✅ 彻底清理完成，基础镜像已保留",  
    "deep_cleanup_failed": "❌ 彻底清理失败: {error}",  
    "removed_images": "✅ 移除了 {count} 个AIForge构建镜像",  
    "no_images_to_remove": "ℹ️ 没有找到需要清理的AIForge构建镜像",  
    "cleanup_images_error": "⚠️ 清理构建镜像时出错: {error}",  
    "health_check": "🏥 服务健康检查:",  
    "service_running": "✅ {service}: 运行正常",  
    "service_not_running": "❌ {service}: {status}",  
    "service_status_unknown": "⚠️ {service}: 状态未知",  
    "service_urls": "🌐 服务访问地址:",  
    "aiforge_web_url": "- AIForge Web: http://localhost:8000",  
    "searxng_url": "- SearXNG: http://localhost:55510",  
    "admin_panel_url": "- 管理面板: http://localhost:8000/admin",  
    "pyyaml_not_installed": "⚠️ PyYAML未安装，跳过SearXNG配置更新",  
    "searxng_config_not_exists": "ℹ️ SearXNG配置文件不存在，跳过格式更新",  
    "searxng_config_updated": "✅ SearXNG配置已更新，支持多种输出格式",  
    "searxng_config_latest": "✅ SearXNG配置已是最新",  
    "searxng_config_update_failed": "⚠️ 更新SearXNG配置失败: {error}",  
    "user_interrupted": "⚠️ 用户中断操作",  
    "execution_exception": "❌ 执行异常: {error}",  
    "cli": {  
      "description": "AIForge Docker一体化服务管理",  
      "action_help": "操作类型",  
      "dev_help": "开发模式启动（代码热重载）",  
      "searxng_help": "启用SearXNG搜索服务",  
      "epilog": "一体化使用示例:\n    # 一键启动生产模式（不含SearXNG）\n    aiforge-docker start\n\n    # 一键启动生产模式（含SearXNG）\n    aiforge-docker start --searxng\n\n    # 一键启动开发模式（代码热重载，含SearXNG）\n    aiforge-docker start --dev --searxng\n\n    # 停止所有服务\n    aiforge-docker stop\n\n    # 查看服务状态\n    aiforge-docker status\n\n    # 清理Docker资源\n    aiforge-docker cleanup\n\n    # 深度清理资源\n    aiforge-docker deep-cleanup\n\n开发版本使用示例:\n    # 使用启动脚本（推荐）\n    ./aiforge-docker.sh start --dev\n    ./aiforge-docker.sh deep-cleanup\n\n语言设置:\n    # 通过环境变量动态指定语言\n    AIFORGE_LOCALE=en ./aiforge-docker.sh start\n    AIFORGE_LOCALE=ja ./aiforge-docker.sh status\n    \n    # Windows PowerShell\n    $env:AIFORGE_LOCALE=\"en\"; ./aiforge-docker.bat start\n\n特性说明:\n    ✅ 自动检测Docker环境\n    ✅ 智能构建镜像（避免重复构建）\n    ✅ 实时显示构建进度\n    ✅ SearXNG可选启用\n    ✅ 服务健康检查\n    ✅ 一键清理资源\n    ✅ 多语言支持 (zh|en|ar|de|es|fr|hi|ja|ko|pt|ru|vi)"  
    }  
  },
  "k8s": {  
    "starting_deployment": "🚀 开始 Kubernetes 部署...",  
    "checking_environment": "🔍 检查 Kubernetes 环境...",  
    "kubectl_installed": "✅ kubectl 已安装并可用",  
    "kubectl_not_installed": "❌ kubectl 未安装",  
    "kubectl_not_in_path": "❌ 在 PATH 中找不到 kubectl",  
    "cluster_accessible": "✅ Kubernetes 集群可访问",  
    "cluster_not_accessible": "❌ 无法访问 Kubernetes 集群",  
    "cannot_connect_cluster": "❌ 连接 Kubernetes 集群失败",  
    "manifest_file_not_exists": "❌ 清单文件不存在: {file}",  
    "creating_namespace": "📦 创建命名空间: {namespace}",  
    "namespace_created": "✅ 命名空间已创建: {namespace}",  
    "applying_base_resources": "🔧 应用基础资源 (PVC, Secrets)...",  
    "deployment_complete": "🎉 Kubernetes 部署成功完成！",  
    "deployment_failed": "❌ Kubernetes 部署失败: {error}"  
  },
  "cloud": {  
    "starting_deployment": "🚀 开始云部署...",  
    "checking_environment": "🔍 检查云环境...",  
    "cli_not_installed": "❌ 云 CLI 未安装",  
    "credentials_not_configured": "❌ 云凭据未配置",  
    "creating_instance": "🏗️ 创建云实例...",  
    "waiting_instance_ready": "⏳ 等待实例 {instance_id} 就绪...",  
    "deploying_application": "📦 部署 AIForge 应用...",  
    "deployment_complete": "🎉 云部署成功完成！",  
    "deployment_failed": "❌ 云部署失败: {error}",  
    "instance_ready": "✅ 实例已就绪",  
    "waiting_progress": "⏳ 等待中... ({elapsed}秒/{total}秒)",  
    "deployment_successful": "✅ 部署成功完成",  
    "deployment_failed_partial": "⚠️ 部署完成但存在一些问题",  
    "instance_id": "实例 ID",  
    "access_url": "访问地址",  
    "stopping_instances": "🛑 停止云实例...",  
    "instance_stopped": "✅ 实例已停止: {instance_id}",  
    "instance_stop_failed": "❌ 停止实例失败: {instance_id}",  
    "stop_complete": "🛑 已停止 {count} 个实例",  
    "stop_failed": "❌ 停止实例失败: {error}",  
    "cleaning_resources": "🧹 清理云资源...",  
    "waiting_instances_stop": "⏳ 等待实例完全停止...",  
    "cleanup_success": "✅ 资源清理完成",  
    "cleanup_failed": "❌ 资源清理失败",  
    "cleanup_exception": "❌ 清理异常: {error}",  
    "script_file_not_exists": "❌ 脚本文件不存在: {file}",
    "aliyun_cli_installed": "✅ 阿里云 CLI 已安装并可用",  
    "aliyun_cli_not_installed": "❌ 阿里云 CLI 未安装",  
    "aliyun_cli_not_in_path": "❌ 在 PATH 中找不到阿里云 CLI",  
    "aliyun_credentials_configured": "✅ 阿里云凭据已配置",  
    "aliyun_credentials_not_configured": "❌ 阿里云凭据未配置",  
    "aliyun_credentials_check_failed": "❌ 检查阿里云凭据失败",  
    "aliyun_instance_created": "✅ 阿里云 ECS 实例已创建: {instance_id}",  
    "aliyun_instance_create_failed": "❌ 创建阿里云实例失败: {error}",  
    "aliyun_list_instances_failed": "❌ 列出阿里云实例失败",  
    "aliyun_list_instances_error": "❌ 列出阿里云实例错误: {error}",  
    "aliyun_cleaning_resources": "🧹 清理阿里云资源...",  
    "aliyun_cleanup_complete": "✅ 阿里云资源清理完成",  
    "aliyun_cleanup_failed": "❌ 阿里云资源清理失败: {error}",
    "aws_cli_installed": "✅ AWS CLI 已安装并可用",  
    "aws_cli_not_installed": "❌ AWS CLI 未安装",  
    "aws_cli_not_in_path": "❌ 在 PATH 中找不到 AWS CLI",  
    "aws_credentials_configured": "✅ AWS 凭据已配置",  
    "aws_credentials_not_configured": "❌ AWS 凭据未配置",  
    "aws_credentials_check_failed": "❌ 检查 AWS 凭据失败",  
    "aws_instance_created": "✅ AWS EC2 实例已创建: {instance_id}",  
    "aws_instance_create_failed": "❌ 创建 AWS 实例失败: {error}",  
    "aws_list_instances_failed": "❌ 列出 AWS 实例失败",  
    "aws_list_instances_error": "❌ 列出 AWS 实例错误: {error}",  
    "aws_cleaning_resources": "🧹 清理 AWS 资源...",  
    "aws_cleanup_complete": "✅ AWS 资源清理完成",  
    "aws_cleanup_failed": "❌ AWS 资源清理失败: {error}",
    "azure_cli_installed": "✅ Azure CLI 已安装并可用",  
    "azure_cli_not_installed": "❌ Azure CLI 未安装",  
    "azure_cli_not_in_path": "❌ 在 PATH 中找不到 Azure CLI",  
    "azure_credentials_configured": "✅ Azure 凭据已配置",  
    "azure_credentials_not_configured": "❌ Azure 凭据未配置",  
    "azure_credentials_check_failed": "❌ 检查 Azure 凭据失败",  
    "azure_instance_created": "✅ Azure 虚拟机实例已创建: {instance_id}",  
    "azure_instance_create_failed": "❌ 创建 Azure 实例失败: {error}",  
    "azure_list_instances_failed": "❌ 列出 Azure 实例失败",  
    "azure_list_instances_error": "❌ 列出 Azure 实例错误: {error}",  
    "azure_cleaning_resources": "🧹 清理 Azure 资源...",  
    "azure_cleanup_complete": "✅ Azure 资源清理完成",  
    "azure_cleanup_failed": "❌ Azure 资源清理失败: {error}",
    "gcp_cli_installed": "✅ GCP CLI 已安装并可用",  
    "gcp_cli_not_installed": "❌ GCP CLI 未安装",  
    "gcp_cli_not_in_path": "❌ 在 PATH 中找不到 GCP CLI",  
    "gcp_credentials_configured": "✅ GCP 凭据已配置",  
    "gcp_credentials_not_configured": "❌ GCP 凭据未配置",  
    "gcp_credentials_check_failed": "❌ 检查 GCP 凭据失败",  
    "gcp_instance_created": "✅ GCP Compute Engine 实例已创建: {instance_id}",  
    "gcp_instance_create_failed": "❌ 创建 GCP 实例失败: {error}",  
    "gcp_list_instances_failed": "❌ 列出 GCP 实例失败",  
    "gcp_list_instances_error": "❌ 列出 GCP 实例错误: {error}",  
    "gcp_cleaning_resources": "🧹 清理 GCP 资源...",  
    "gcp_cleanup_complete": "✅ GCP 资源清理完成",  
    "gcp_cleanup_failed": "❌ GCP 资源清理失败: {error}"  
  },
  "deploy_cli": {  
    "description": "AIForge 统一部署管理工具",  
    "global_options": {  
      "config": "统一部署配置文件路径 (TOML)",  
      "docker_compose": "Docker Compose 配置文件路径",  
      "k8s_config": "Kubernetes 配置文件路径",  
      "terraform_config": "Terraform 配置文件路径",  
      "verbose": "详细输出"  
    },  
    "commands": {  
      "docker": "Docker部署",  
      "k8s": "Kubernetes部署",  
      "cloud": "云部署"  
    },  
    "docker_options": {  
      "dev": "开发模式",  
      "searxng": "启用SearXNG",  
      "host": "服务器地址",  
      "port": "服务器端口",  
      "deep": "深度清理（仅用于cleanup）",  
      "core_only": "仅启动核心CLI服务（默认启动Web界面）",  
      "web_optional": "使web组件可选"  
    },  
    "k8s_options": {  
      "namespace": "命名空间",  
      "replicas": "副本数量"  
    },  
    "cloud_options": {  
      "region": "部署区域",  
      "instance_type": "实例类型"  
    },  
    "messages": {  
      "execution_error": "执行异常: {error}",  
      "docker_deploy_result": "Docker部署结果: {result}",  
      "docker_stop_result": "Docker停止结果: {result}",  
      "docker_status": "Docker状态: {status}",  
      "k8s_deploy_result": "K8s部署结果: {result}",  
      "k8s_status": "K8s状态: 找到 {count} 个Pod",  
      "k8s_delete_result": "K8s删除结果: {result}",  
      "k8s_upgrade_result": "K8s升级结果: {result}",  
      "k8s_upgrade_failed": "K8s升级失败: 无法停止现有部署",  
      "cloud_deploy_success": "{provider}部署成功!",  
      "cloud_deploy_failed": "{provider}部署失败: {message}",  
      "cloud_status": "{provider}状态: 找到 {count} 个实例",  
      "cloud_status_failed": "获取{provider}状态失败: {error}",  
      "cloud_destroy_result": "{provider}销毁结果: {result}",  
      "cloud_destroy_success": "所有云资源已清理完成",  
      "cloud_destroy_error": "销毁过程中遇到错误，请检查云控制台",  
      "success": "成功",  
      "failed": "失败",  
      "unknown_error": "未知错误",  
      "unsupported_provider": "不支持的云提供商: {provider}",  
      "core_mode_started": "📦 已启动核心CLI模式（仅core服务）",  
      "web_mode_started": "🌐 已启动Web界面模式（core + web服务，默认）",  
      "deployed_to_namespace": "部署到命名空间: {namespace}",  
      "replica_count": "副本数量: {replicas}",  
      "error_message": "错误信息: {message}",  
      "pod_status": "  Pod {name}: {status}",  
      "instance_id": "实例ID: {instance_id}",  
      "app_deploy_complete": "应用部署完成",  
      "app_deploy_failed": "应用部署失败: {error}",  
      "instance_status": "  实例 {instance_id}: {state} (IP: {public_ip})"  
    }  
  }  
}