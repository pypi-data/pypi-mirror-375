{"version":3,"file":"static/js/main.b193172b.js","mappings":"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","sources":["streamlitApi.ts","../node_modules/color2k/src/guard.ts","../node_modules/color2k/src/ColorError.ts","../node_modules/color2k/src/parseToRgba.ts","../node_modules/color2k/src/parseToHsla.ts","../node_modules/color2k/src/hsla.ts","../node_modules/color2k/src/lighten.ts","../node_modules/color2k/src/darken.ts","copyButton.ts","utils.ts","index.ts"],"sourcesContent":["import { RenderData } from \"streamlit-component-lib\";\n\nfunction sendMessageToStreamlitClient(type: string, data: any) {\n  console.log(type, data);\n  const outData = Object.assign(\n    {\n      isStreamlitMessage: true,\n      type: type,\n    },\n    data\n  );\n  window.parent.postMessage(outData, \"*\");\n}\n\nexport const StreamlitAPI = {\n  setComponentReady: function () {\n    sendMessageToStreamlitClient(\"streamlit:componentReady\", { apiVersion: 1 });\n  },\n  setFrameHeight: function (height: number) {\n    sendMessageToStreamlitClient(\"streamlit:setFrameHeight\", { height });\n  },\n  setComponentValue: function (value: any) {\n    sendMessageToStreamlitClient(\"streamlit:setComponentValue\", { value });\n  },\n  RENDER_EVENT: \"streamlit:render\",\n  events: {\n    addEventListener: function (type: string, callback: (event: CustomEvent<RenderData>) => void) {\n      window.addEventListener(\"message\", function (event: MessageEvent) {\n        if (event.data.type === type) {\n          (event as any).detail = event.data;\n          callback(event as unknown as CustomEvent<RenderData>);\n        }\n      });\n    },\n  },\n};\n","/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low: number, high: number, value: number): number {\n  return Math.min(Math.max(low, value), high);\n}\n\nexport default guard;\n","class ColorError extends Error {\n  constructor(color: string) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\n\nexport default ColorError;\n","import guard from './guard';\nimport ColorError from './ColorError';\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color: string): [number, number, number, number] {\n  if (typeof color !== 'string') throw new ColorError(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)),\n      parseInt(r(arr[3] || 'f', 2), 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 16)),\n      parseInt(arr[3] || 'ff', 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 10)),\n      parseFloat(arr[3] || '1'),\n    ] as [number, number, number, number];\n  }\n\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError(color);\n    if (guard(0, 100, l) !== l) throw new ColorError(color);\n    return [...hslToRgb(h, s, l), Number.isNaN(a) ? 1 : a] as [\n      number,\n      number,\n      number,\n      number\n    ];\n  }\n\n  throw new ColorError(color);\n}\n\nfunction hash(str: string) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\n\nconst colorToInt = (x: string) => parseInt(x.replace(/_/g, ''), 36);\n\nconst compressedColorMap =\n  '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'\n    .split(' ')\n    .reduce((acc, next) => {\n      const key = colorToInt(next.substring(0, 3));\n      const hex = colorToInt(next.substring(3)).toString(16);\n\n      // NOTE: padStart could be used here but it breaks Node 6 compat\n      // https://github.com/ricokahler/color2k/issues/351\n      let prefix = '';\n      for (let i = 0; i < 6 - hex.length; i++) {\n        prefix += '0';\n      }\n\n      acc[key] = `${prefix}${hex}`;\n      return acc;\n    }, {} as { [key: string]: string });\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color: string): string {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError(color);\n  return `#${result}`;\n}\n\nconst r = (str: string, amount: number) =>\n  Array.from(Array(amount))\n    .map(() => str)\n    .join('');\n\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(\n  `^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\n    ',\\\\s*(\\\\d+)\\\\s*',\n    2\n  )}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`,\n  'i'\n);\nconst hslaRegex =\n  /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\n\nconst roundColor = (color: number): number => {\n  return Math.round(color * 255);\n};\n\nconst hslToRgb = (\n  hue: number,\n  saturation: number,\n  lightness: number\n): [number, number, number] => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor) as [number, number, number];\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (((hue % 360) + 360) % 360) / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n\n  return [finalRed, finalGreen, finalBlue].map(roundColor) as [\n    number,\n    number,\n    number\n  ];\n};\n\nexport default parseToRgba;\n","// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\nimport parseToRgba from './parseToRgba';\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color: string): [number, number, number, number] {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? value : value / 255\n  );\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n\n  const delta = max - min;\n  const saturation =\n    lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  const hue =\n    60 *\n    (red === max\n      ? (green - blue) / delta + (green < blue ? 6 : 0)\n      : green === max\n      ? (blue - red) / delta + 2\n      : (red - green) / delta + 4);\n\n  return [hue, saturation, lightness, alpha];\n}\n\nexport default parseToHsla;\n","import guard from './guard';\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number\n): string {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(\n    0,\n    100,\n    saturation * 100\n  ).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default hsla;\n","import darken from './darken';\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color: string, amount: number): string {\n  return darken(color, -amount);\n}\n\nexport default lighten;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color: string, amount: number): string {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\nexport default darken;\n","import { RenderData } from \"streamlit-component-lib\";\nimport { lighten } from \"color2k\";\nimport { hexToRgb } from \"./utils\";\nimport { StreamlitAPI } from \"./streamlitApi\";\n\nlet button: HTMLButtonElement | null = null;\nlet textElement: HTMLButtonElement | null = null;\nlet currentCopyHandler: (() => Promise<void>) | null = null;  // Keep track o' the current handler, like a watchful parrot on me shoulder\n\n// Paint the ship with Streamlit’s colors\nfunction applyTheme(theme: RenderData[\"theme\"]) {\n  if (!theme) return;\n\n  const lightenedBg05 = lighten(theme.backgroundColor, 0.025);\n\n  document.documentElement.style.setProperty('--primary-color', theme.primaryColor);\n  document.documentElement.style.setProperty('--background-color', theme.backgroundColor);\n  document.documentElement.style.setProperty('--text-color', theme.textColor);\n  // RGB be the key to mixin’ alpha in the CSS, like blendin’ grog for a translucent glow!\n  document.documentElement.style.setProperty('--text-color-rgb', hexToRgb(theme.textColor));\n  document.documentElement.style.setProperty('--secondary-background-color', theme.secondaryBackgroundColor);\n  document.documentElement.style.setProperty('--lightened-bg05', lightenedBg05);\n}\n\n// Fire the copy cannon\nfunction createCopyHandler(\n  text: string,\n  before_copy_label: string,\n  after_copy_label: string,\n  counter: number\n) {\n  return async function () {\n    let status = true;\n    try {\n      await navigator.clipboard.writeText(text.trim());\n      if (button) button.textContent = after_copy_label;\n    } catch {\n      status = false;\n      if (button) button.textContent = before_copy_label;\n    }\n    StreamlitAPI.setComponentValue({ status: status, counter: counter + 1 });\n    setTimeout(() => {\n      if (button) button.textContent = before_copy_label;\n    }, 1000);\n  };\n}\n\n// Main render, the captain’s orders\nexport function onRender(event: CustomEvent<RenderData>): void {\n  const { args, theme } = event.detail;\n  const { text, before_copy_label, after_copy_label, show_text, counter } = args;\n\n  applyTheme(theme);\n\n  if (!button) {\n    // Rig up the buttons and text only once, like hoistin’ the sails for the first voyage\n    const span = document.body.appendChild(document.createElement(\"span\"));\n    textElement = span.appendChild(document.createElement(\"button\"));\n    button = span.appendChild(document.createElement(\"button\"));\n\n    textElement.className = \"st-copy-button\";\n    button.className = \"st-copy-button\";\n\n    // Initial label setup, settin’ the flag afore we sail\n    button.textContent = before_copy_label;\n  }\n\n  // Update properties that may change across renders, like adjustin’ the rigging mid-storm\n  if (textElement) {\n    textElement.textContent = text;\n    textElement.style.display = show_text ? \"inline\" : \"none\";\n  }\n\n  // Update the copy handler (remove old, add new), swabbin’ the deck o' old listeners\n  const copyToClipboard = createCopyHandler(text, before_copy_label, after_copy_label, counter);\n\n  if (currentCopyHandler && button) {\n    button.removeEventListener(\"click\", currentCopyHandler);  // Cast off the old handler, ye scurvy dog!\n  }\n  if (currentCopyHandler && textElement) {\n    textElement.removeEventListener(\"click\", currentCopyHandler);  // Heave ho, away with the outdated one!\n  }\n\n  currentCopyHandler = copyToClipboard;  // Promote the new handler to first mate\n\n  if (button) button.addEventListener(\"click\", copyToClipboard);  // Lash the new handler to the wheel\n  if (textElement) textElement.addEventListener(\"click\", copyToClipboard);  // And to the crow's nest too!\n\n  StreamlitAPI.setFrameHeight(40);\n}\n","// Turn hex to RGB, like paintin’ the ship’s hull for CSS\nexport function hexToRgb(hex: string): string {\n  let r = 0, g = 0, b = 0;\n  // Strip the '#' like peelin’ an orange\n  hex = hex.replace('#', '');\n  // 3-digit hex, short as a dagger\n  if (hex.length === 3) {\n    r = parseInt(hex[0] + hex[0], 16);\n    g = parseInt(hex[1] + hex[1], 16);\n    b = parseInt(hex[2] + hex[2], 16);\n  }\n  // 6-digit hex, long as a cannon\n  else if (hex.length === 6) {\n    r = parseInt(hex.substring(0, 2), 16);\n    g = parseInt(hex.substring(2, 4), 16);\n    b = parseInt(hex.substring(4, 6), 16);\n  }\n  return `${r}, ${g}, ${b}`;\n}\n","import { StreamlitAPI } from \"./streamlitApi\";\nimport { onRender } from \"./copyButton\";\n\nStreamlitAPI.events.addEventListener(StreamlitAPI.RENDER_EVENT, onRender);\nStreamlitAPI.setComponentReady();\nStreamlitAPI.setFrameHeight(40);\n"],"names":["sendMessageToStreamlitClient","type","data","console","log","outData","Object","assign","isStreamlitMessage","window","parent","postMessage","StreamlitAPI","apiVersion","height","value","addEventListener","callback","event","detail","guard","low","high","Math","min","max","ColorError","Error","constructor","color","super","concat","ColorError$1","parseToRgba","trim","toLowerCase","normalizedColor","namedColorRegex","test","normalizedColorName","result","compressedColorMap","str","hash","i","length","charCodeAt","nameToHex","reducedHexMatch","reducedHexRegex","exec","arr","Array","from","slice","map","x","parseInt","r","hexMatch","hexRegex","rgbaMatch","rgbaRegex","parseFloat","hslaMatch","hslaRegex","h","s","l","a","hslToRgb","Number","isNaN","colorToInt","replace","split","reduce","acc","next","key","substring","hex","toString","prefix","amount","join","RegExp","roundColor","round","hue","saturation","lightness","huePrime","chroma","abs","secondComponent","red","green","blue","lightnessModification","parseToHsla","alpha","index","delta","hsla","toFixed","lighten","darken","button","textElement","currentCopyHandler","applyTheme","theme","lightenedBg05","backgroundColor","document","documentElement","style","setProperty","primaryColor","textColor","g","b","hexToRgb","secondaryBackgroundColor","args","text","before_copy_label","after_copy_label","show_text","counter","span","body","appendChild","createElement","className","textContent","display","copyToClipboard","async","status","navigator","clipboard","writeText","_unused","setTimeout","createCopyHandler","removeEventListener"],"sourceRoot":""}