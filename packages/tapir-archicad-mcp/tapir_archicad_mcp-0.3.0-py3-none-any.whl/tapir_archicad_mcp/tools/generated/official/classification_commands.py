# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch

from multiconn_archicad.models.official.commands import (
    GetAllClassificationSystemsResult,
GetAllClassificationsInSystemParameters,
GetAllClassificationsInSystemResult,
GetClassificationItemAvailabilityParameters,
GetClassificationItemAvailabilityResult,
GetClassificationSystemIdsResult,
GetClassificationSystemsParameters,
GetClassificationSystemsResult,
GetDetailsOfClassificationItemsParameters,
GetDetailsOfClassificationItemsResult
)


log = logging.getLogger()

def get_all_classification_systems(port: int) -> GetAllClassificationSystemsResult:
    """
    Returns the list of available classification systems.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetAllClassificationSystems",
            parameters={}
        )
        return GetAllClassificationSystemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetAllClassificationSystems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAllClassificationSystems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_all_classification_systems,
    name="classifications_get_all_classification_systems",
    title="GetAllClassificationSystems",
    description="Returns the list of available classification systems.",
    params_model=None,
    result_model=GetAllClassificationSystemsResult
)


def get_all_classifications_in_system(port: int, params: GetAllClassificationsInSystemParameters) -> GetAllClassificationsInSystemResult:
    """
    Returns the tree of classifications in the given classification system.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetAllClassificationsInSystem",
            parameters=params.model_dump(mode='json')
        )
        return GetAllClassificationsInSystemResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetAllClassificationsInSystem result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAllClassificationsInSystem on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_all_classifications_in_system,
    name="classifications_get_all_classifications_in_system",
    title="GetAllClassificationsInSystem",
    description="Returns the tree of classifications in the given classification system.",
    params_model=GetAllClassificationsInSystemParameters,
    result_model=GetAllClassificationsInSystemResult
)


def get_classification_item_availability(port: int, params: GetClassificationItemAvailabilityParameters) -> GetClassificationItemAvailabilityResult:
    """
    Returns the ids of property definitions available for a given classification item.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetClassificationItemAvailability",
            parameters=params.model_dump(mode='json')
        )
        return GetClassificationItemAvailabilityResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetClassificationItemAvailability result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetClassificationItemAvailability on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_classification_item_availability,
    name="classifications_get_classification_item_availability",
    title="GetClassificationItemAvailability",
    description="Returns the ids of property definitions available for a given classification item.",
    params_model=GetClassificationItemAvailabilityParameters,
    result_model=GetClassificationItemAvailabilityResult
)


def get_classification_system_ids(port: int) -> GetClassificationSystemIdsResult:
    """
    Returns the list of available classification systems.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetClassificationSystemIds",
            parameters={}
        )
        return GetClassificationSystemIdsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetClassificationSystemIds result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetClassificationSystemIds on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_classification_system_ids,
    name="classifications_get_classification_system_ids",
    title="GetClassificationSystemIds",
    description="Returns the list of available classification systems.",
    params_model=None,
    result_model=GetClassificationSystemIdsResult
)


def get_classification_systems(port: int, params: GetClassificationSystemsParameters) -> GetClassificationSystemsResult:
    """
    Returns the details of classification systems identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetClassificationSystems",
            parameters=params.model_dump(mode='json')
        )
        return GetClassificationSystemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetClassificationSystems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetClassificationSystems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_classification_systems,
    name="classifications_get_classification_systems",
    title="GetClassificationSystems",
    description="Returns the details of classification systems identified by their GUIDs.",
    params_model=GetClassificationSystemsParameters,
    result_model=GetClassificationSystemsResult
)


def get_details_of_classification_items(port: int, params: GetDetailsOfClassificationItemsParameters) -> GetDetailsOfClassificationItemsResult:
    """
    Returns the details of classification items.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetDetailsOfClassificationItems",
            parameters=params.model_dump(mode='json')
        )
        return GetDetailsOfClassificationItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetDetailsOfClassificationItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetDetailsOfClassificationItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_details_of_classification_items,
    name="classifications_get_details_of_classification_items",
    title="GetDetailsOfClassificationItems",
    description="Returns the details of classification items.",
    params_model=GetDetailsOfClassificationItemsParameters,
    result_model=GetDetailsOfClassificationItemsResult
)
