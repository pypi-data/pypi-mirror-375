---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/fstring_module_globals/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
worker = _cribo.types.SimpleNamespace(__name__='worker')
"""Worker module with globals that need lifting when using f-strings"""
status = "idle"
counter = 0
tasks = []
class Worker:
    """Worker class that uses global variables in f-strings"""

    def __init__(self):
        self.name = "Worker1"

    def process(self, data):
        """Process data and update global state"""
        global status, counter
        status = "processing"
        counter += 1
        return f"Processing {data}: status={status}, count={counter}"

    def get_status(self):
        """Get current status using f-string with globals"""
        global status, counter, tasks
        return f"Worker {self.name}: status='{status}', processed={counter}, pending={len(tasks)}"

    def do_work(self):
        """Do some work and update globals"""
        global status, counter, tasks
        tasks.append(f"Task {counter + 1}")
        status = "working"
        counter += 1
        return f"Started task: {tasks[-1]} (total: {len(tasks)}, status: {status.upper()})"
Worker.__module__ = 'worker'
worker.Worker = Worker
worker.counter = counter
worker.status = status
worker.tasks = tasks
"""Test f-string transformation with module globals lifting"""
def main():
    w = Worker()
    result = w.process("test")
    print(result)
    print(w.get_status())
    w.do_work()
    print(w.get_status())
if __name__ == "__main__":
    main()
