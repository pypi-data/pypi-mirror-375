/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.12.0
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxUpdateUIEvent : public ::wxUpdateUIEvent
{
public:
    sipwxUpdateUIEvent(::wxWindowID);
    sipwxUpdateUIEvent(const ::wxUpdateUIEvent&);
    virtual ~sipwxUpdateUIEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;
    ::wxEvent* Clone() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxUpdateUIEvent(const sipwxUpdateUIEvent &);
    sipwxUpdateUIEvent &operator = (const sipwxUpdateUIEvent &);

    char sipPyMethods[2];
};

sipwxUpdateUIEvent::sipwxUpdateUIEvent(::wxWindowID commandId): ::wxUpdateUIEvent(commandId), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxUpdateUIEvent::sipwxUpdateUIEvent(const ::wxUpdateUIEvent& a0): ::wxUpdateUIEvent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxUpdateUIEvent::~sipwxUpdateUIEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

::wxEventCategory sipwxUpdateUIEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetEventCategory);

    if (!sipMeth)
        return ::wxUpdateUIEvent::GetEventCategory();

    extern ::wxEventCategory sipVH__core_104(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_104(sipGILState, 0, sipPySelf, sipMeth);
}

::wxEvent* sipwxUpdateUIEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_Clone);

    if (!sipMeth)
        return ::wxUpdateUIEvent::Clone();

    extern ::wxEvent* sipVH__core_103(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_103(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_Check, "Check(check) -> None\n"
"\n"
"Check or uncheck the UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_Check(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_Check(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool check;
        ::wxUpdateUIEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_check,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp, &check))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Check(check);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_Check, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_Enable, "Enable(enable) -> None\n"
"\n"
"Enable or disable the UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_Enable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_Enable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable;
        ::wxUpdateUIEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Enable(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_Enable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetChecked, "GetChecked() -> bool\n"
"\n"
"Returns true if the UI element should be checked.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetChecked(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetChecked();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetChecked, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetEnabled, "GetEnabled() -> bool\n"
"\n"
"Returns true if the UI element should be enabled.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetEnabled(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetEnabled();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetEnabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_IsCheckable, "IsCheckable() -> bool\n"
"\n"
"Returns true if the UI element can be checked.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_IsCheckable(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_IsCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsCheckable();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_IsCheckable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetSetChecked, "GetSetChecked() -> bool\n"
"\n"
"Returns true if the application has called Check().");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetSetChecked(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetSetChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSetChecked();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetSetChecked, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetSetEnabled, "GetSetEnabled() -> bool\n"
"\n"
"Returns true if the application has called Enable().");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetSetEnabled(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetSetEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSetEnabled();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetSetEnabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetSetShown, "GetSetShown() -> bool\n"
"\n"
"Returns true if the application has called Show().");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetSetShown(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetSetShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSetShown();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetSetShown, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetSetText, "GetSetText() -> bool\n"
"\n"
"Returns true if the application has called SetText().");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetSetText(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetSetText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSetText();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetSetText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetShown, "GetShown() -> bool\n"
"\n"
"Returns true if the UI element should be shown.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetShown(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetShown();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetShown, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetText, "GetText() -> str\n"
"\n"
"Returns the text that should be set for the UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetText(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxString(sipCpp->GetText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxString, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_SetText, "SetText(text) -> None\n"
"\n"
"Sets the text for this UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_SetText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_SetText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* text;
        int textState = 0;
        ::wxUpdateUIEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp, sipType_wxString, &text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetText(*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text), sipType_wxString, textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_SetText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_Show, "Show(show) -> None\n"
"\n"
"Show or hide the UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_Show(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_Show(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool show;
        ::wxUpdateUIEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_show,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp, &show))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Show(show);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_Show, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_CanUpdate, "CanUpdate(window) -> bool\n"
"\n"
"Returns true if it is appropriate to update (send UI update events to)\n"
"this window.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_CanUpdate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_CanUpdate(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWindow* window;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8", sipType_wxWindow, &window))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = ::wxUpdateUIEvent::CanUpdate(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_CanUpdate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetMode, "GetMode() -> UpdateUIMode\n"
"\n"
"Static function returning a value specifying how wxWidgets will send\n"
"update events: to all windows, or only to those which specify that\n"
"they will process the events.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetMode(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            ::wxUpdateUIMode sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = ::wxUpdateUIEvent::GetMode();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxUpdateUIMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetMode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetUpdateInterval, "GetUpdateInterval() -> int\n"
"\n"
"Returns the current interval between updates in milliseconds.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetUpdateInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = ::wxUpdateUIEvent::GetUpdateInterval();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetUpdateInterval, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_ResetUpdateTime, "ResetUpdateTime() -> None\n"
"\n"
"Used internally to reset the last-updated time to the current time.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_ResetUpdateTime(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_ResetUpdateTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            ::wxUpdateUIEvent::ResetUpdateTime();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_ResetUpdateTime, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_SetMode, "SetMode(mode) -> None\n"
"\n"
"Specify how wxWidgets will send update events: to all windows, or only\n"
"to those which specify that they will process the events.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_SetMode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_SetMode(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxUpdateUIMode mode;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "E", sipType_wxUpdateUIMode, &mode))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            ::wxUpdateUIEvent::SetMode(mode);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_SetMode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_SetUpdateInterval, "SetUpdateInterval(updateInterval) -> None\n"
"\n"
"Sets the interval between updates in milliseconds.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_SetUpdateInterval(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_SetUpdateInterval(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long updateInterval;

        static const char *sipKwdList[] = {
            sipName_updateInterval,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "l", &updateInterval))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            ::wxUpdateUIEvent::SetUpdateInterval(updateInterval);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_SetUpdateInterval, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_Clone, "Clone(self) -> Optional[Event]");

extern "C" {static PyObject *meth_wxUpdateUIEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxUpdateUIEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxEvent, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_Clone, doc_wxUpdateUIEvent_Clone);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxUpdateUIEvent(void *, const sipTypeDef *);}
static void *cast_wxUpdateUIEvent(void *sipCppV, const sipTypeDef *targetType)
{
    ::wxUpdateUIEvent *sipCpp = reinterpret_cast< ::wxUpdateUIEvent *>(sipCppV);

    if (targetType == sipType_wxUpdateUIEvent)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_wxCommandEvent)->ctd_cast(static_cast< ::wxCommandEvent *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxUpdateUIEvent(void *, int);}
static void release_wxUpdateUIEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxUpdateUIEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxUpdateUIEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxUpdateUIEvent(sipSimpleWrapper *);}
static void dealloc_wxUpdateUIEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxUpdateUIEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxUpdateUIEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxUpdateUIEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxUpdateUIEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxUpdateUIEvent *sipCpp = SIP_NULLPTR;

    {
        ::wxWindowID commandId = 0;

        static const char *sipKwdList[] = {
            sipName_commandId,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &commandId))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxUpdateUIEvent(commandId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const ::wxUpdateUIEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxUpdateUIEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxUpdateUIEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxUpdateUIEvent[] = {{84, 255, 1}};


static PyMethodDef methods_wxUpdateUIEvent[] = {
    {sipName_CanUpdate, SIP_MLMETH_CAST(meth_wxUpdateUIEvent_CanUpdate), METH_VARARGS|METH_KEYWORDS, doc_wxUpdateUIEvent_CanUpdate},
    {sipName_Check, SIP_MLMETH_CAST(meth_wxUpdateUIEvent_Check), METH_VARARGS|METH_KEYWORDS, doc_wxUpdateUIEvent_Check},
    {sipName_Clone, meth_wxUpdateUIEvent_Clone, METH_VARARGS, doc_wxUpdateUIEvent_Clone},
    {sipName_Enable, SIP_MLMETH_CAST(meth_wxUpdateUIEvent_Enable), METH_VARARGS|METH_KEYWORDS, doc_wxUpdateUIEvent_Enable},
    {sipName_GetChecked, meth_wxUpdateUIEvent_GetChecked, METH_VARARGS, doc_wxUpdateUIEvent_GetChecked},
    {sipName_GetEnabled, meth_wxUpdateUIEvent_GetEnabled, METH_VARARGS, doc_wxUpdateUIEvent_GetEnabled},
    {sipName_GetMode, meth_wxUpdateUIEvent_GetMode, METH_VARARGS, doc_wxUpdateUIEvent_GetMode},
    {sipName_GetSetChecked, meth_wxUpdateUIEvent_GetSetChecked, METH_VARARGS, doc_wxUpdateUIEvent_GetSetChecked},
    {sipName_GetSetEnabled, meth_wxUpdateUIEvent_GetSetEnabled, METH_VARARGS, doc_wxUpdateUIEvent_GetSetEnabled},
    {sipName_GetSetShown, meth_wxUpdateUIEvent_GetSetShown, METH_VARARGS, doc_wxUpdateUIEvent_GetSetShown},
    {sipName_GetSetText, meth_wxUpdateUIEvent_GetSetText, METH_VARARGS, doc_wxUpdateUIEvent_GetSetText},
    {sipName_GetShown, meth_wxUpdateUIEvent_GetShown, METH_VARARGS, doc_wxUpdateUIEvent_GetShown},
    {sipName_GetText, meth_wxUpdateUIEvent_GetText, METH_VARARGS, doc_wxUpdateUIEvent_GetText},
    {sipName_GetUpdateInterval, meth_wxUpdateUIEvent_GetUpdateInterval, METH_VARARGS, doc_wxUpdateUIEvent_GetUpdateInterval},
    {sipName_IsCheckable, meth_wxUpdateUIEvent_IsCheckable, METH_VARARGS, doc_wxUpdateUIEvent_IsCheckable},
    {sipName_ResetUpdateTime, meth_wxUpdateUIEvent_ResetUpdateTime, METH_VARARGS, doc_wxUpdateUIEvent_ResetUpdateTime},
    {sipName_SetMode, SIP_MLMETH_CAST(meth_wxUpdateUIEvent_SetMode), METH_VARARGS|METH_KEYWORDS, doc_wxUpdateUIEvent_SetMode},
    {sipName_SetText, SIP_MLMETH_CAST(meth_wxUpdateUIEvent_SetText), METH_VARARGS|METH_KEYWORDS, doc_wxUpdateUIEvent_SetText},
    {sipName_SetUpdateInterval, SIP_MLMETH_CAST(meth_wxUpdateUIEvent_SetUpdateInterval), METH_VARARGS|METH_KEYWORDS, doc_wxUpdateUIEvent_SetUpdateInterval},
    {sipName_Show, SIP_MLMETH_CAST(meth_wxUpdateUIEvent_Show), METH_VARARGS|METH_KEYWORDS, doc_wxUpdateUIEvent_Show}
};

sipVariableDef variables_wxUpdateUIEvent[] = {
    {PropertyVariable, sipName_Text, &methods_wxUpdateUIEvent[12], &methods_wxUpdateUIEvent[17], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Shown, &methods_wxUpdateUIEvent[11], &methods_wxUpdateUIEvent[19], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Enabled, &methods_wxUpdateUIEvent[5], &methods_wxUpdateUIEvent[3], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Checked, &methods_wxUpdateUIEvent[4], &methods_wxUpdateUIEvent[1], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxUpdateUIEvent, "UpdateUIEvent(commandId=0) -> None\n"
"\n"
"This class is used for pseudo-events which are called by wxWidgets to\n"
"give an application the chance to update various user interface\n"
"elements.");


sipClassTypeDef sipTypeDef__core_wxUpdateUIEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxUpdateUIEvent,
        SIP_NULLPTR,
        SIP_NULLPTR,
    },
    {
        sipNameNr_UpdateUIEvent,
        {0, 0, 1},
        20, methods_wxUpdateUIEvent,
        0, SIP_NULLPTR,
        4, variables_wxUpdateUIEvent,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxUpdateUIEvent,
    -1,
    -1,
    supers_wxUpdateUIEvent,
    SIP_NULLPTR,
    init_type_wxUpdateUIEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxUpdateUIEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxUpdateUIEvent,
    cast_wxUpdateUIEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    sizeof (::wxUpdateUIEvent),
};
