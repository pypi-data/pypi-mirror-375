# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FixedSlotCapacityQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity_types': 'List[CapacityType]',
        'slot_duration': 'float',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
    }

    attribute_map = {
        'capacity_types': 'capacityTypes',
        'slot_duration': 'slotDuration',
        'start_date_time': 'startDateTime',
        'end_date_time': 'endDateTime',
    }

    def __init__(self, capacity_types=None, slot_duration=None, start_date_time=None, end_date_time=None, _configuration=None):  # noqa: E501
        """FixedSlotCapacityQuery - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._capacity_types = None
        self._slot_duration = None
        self._start_date_time = None
        self._end_date_time = None
        self.discriminator = None

        if capacity_types is not None:
            self.capacity_types = capacity_types
        if slot_duration is not None:
            self.slot_duration = slot_duration
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time

    @property
    def capacity_types(self):
        """Gets the capacity_types of this FixedSlotCapacityQuery.  # noqa: E501

        An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`.  # noqa: E501

        :return: The capacity_types of this FixedSlotCapacityQuery.  # noqa: E501
        :rtype: List[CapacityType]
        """
        return self._capacity_types

    @capacity_types.setter
    def capacity_types(self, capacity_types):
        """Sets the capacity_types of this FixedSlotCapacityQuery.

        An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`.  # noqa: E501

        :param capacity_types: The capacity_types of this FixedSlotCapacityQuery.  # noqa: E501
        :type: List[CapacityType]
        """

        self._capacity_types = capacity_types

    @property
    def slot_duration(self):
        """Gets the slot_duration of this FixedSlotCapacityQuery.  # noqa: E501

        Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 <= `slotDuration` <= 360.  # noqa: E501

        :return: The slot_duration of this FixedSlotCapacityQuery.  # noqa: E501
        :rtype: float
        """
        return self._slot_duration

    @slot_duration.setter
    def slot_duration(self, slot_duration):
        """Sets the slot_duration of this FixedSlotCapacityQuery.

        Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 <= `slotDuration` <= 360.  # noqa: E501

        :param slot_duration: The slot_duration of this FixedSlotCapacityQuery.  # noqa: E501
        :type: float
        """

        self._slot_duration = slot_duration

    @property
    def start_date_time(self):
        """Gets the start_date_time of this FixedSlotCapacityQuery.  # noqa: E501

        Start date time from which the capacity slots are being requested in ISO 8601 format.  # noqa: E501

        :return: The start_date_time of this FixedSlotCapacityQuery.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this FixedSlotCapacityQuery.

        Start date time from which the capacity slots are being requested in ISO 8601 format.  # noqa: E501

        :param start_date_time: The start_date_time of this FixedSlotCapacityQuery.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")  # noqa: E501

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this FixedSlotCapacityQuery.  # noqa: E501

        End date time up to which the capacity slots are being requested in ISO 8601 format.  # noqa: E501

        :return: The end_date_time of this FixedSlotCapacityQuery.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this FixedSlotCapacityQuery.

        End date time up to which the capacity slots are being requested in ISO 8601 format.  # noqa: E501

        :param end_date_time: The end_date_time of this FixedSlotCapacityQuery.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")  # noqa: E501

        self._end_date_time = end_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FixedSlotCapacityQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FixedSlotCapacityQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FixedSlotCapacityQuery):
            return True

        return self.to_dict() != other.to_dict()
