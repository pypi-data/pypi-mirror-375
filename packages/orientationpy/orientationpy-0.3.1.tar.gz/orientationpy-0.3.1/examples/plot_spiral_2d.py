"""
Example 3: 2D spiral example
=================================================

Data Benjy Marks (USYD) -- generated from https://pypi.org/project/pynamix/
"""

# sphinx_gallery_thumbnail_number = 2


##########################################
# Loading libraries and data
##########################################

import matplotlib
import matplotlib.colors
import matplotlib.pyplot as plt
import numpy
import orientationpy
import tifffile

# Load the greyscale image
image = tifffile.imread("../data/2D/BM-spiral.tif")
print(f"The Y and X dimensions of the image: {image.shape}")
plt.imshow(image, cmap="Greys_r")
plt.suptitle("Original image")
plt.title("From Benjy Marks (USYD), generated by pynamix")
plt.show()

###########################################
# Compute structure tensor directly
###########################################
structureTensor = orientationpy.computeGradientStructureTensor(image, sigma=6)


##########################################
# Computing Pixel-level orientations
##########################################
# Output is a dictionary
orientations = orientationpy.computeOrientation(structureTensor)
directionality = orientationpy.computeStructureDirectionality(structureTensor)

# Ignore orientations where image is too low value
orientations["theta"][image < 10] = 0

fig, ax = plt.subplots()
# Alternative composition, start as HSV
imageDisplayHSV = numpy.zeros((orientations["theta"].shape[0], orientations["theta"].shape[1], 3), dtype=float)
# Hue is the orientation (nice circular mapping)
imageDisplayHSV[:, :, 0] = (orientations["theta"] + 90) / 180
# We use constant saturation in this example but log(directionality) could also be used.
imageDisplayHSV[:, :, 1] = 1
# Value is original image ;)
imageDisplayHSV[:, :, 2] = image / image.max()

cmap = matplotlib.cm.hsv
norm = matplotlib.colors.Normalize(vmin=-90, vmax=90)
fig.colorbar(
    matplotlib.cm.ScalarMappable(norm=norm, cmap=cmap),
    ax=ax,
    orientation="vertical",
    label="degrees from horizontal",
)

ax.imshow(matplotlib.colors.hsv_to_rgb(imageDisplayHSV))
plt.show()
