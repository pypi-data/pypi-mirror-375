{  
  "docker": {  
    "checking_environment": "🔍 Checking Docker environment...",  
    "docker_installed": "✅ Docker is installed",  
    "docker_not_installed": "❌ Docker is not installed",  
    "docker_not_in_path": "❌ Docker is not installed or not in PATH",  
    "docker_running": "✅ Docker service is running",  
    "docker_not_running": "❌ Docker service is not running, please start Docker Desktop",  
    "cannot_connect_docker": "❌ Cannot connect to Docker service",  
    "docker_compose_available": "✅ Docker Compose is available",  
    "docker_compose_not_available": "❌ Docker Compose is not available",  
    "docker_compose_not_installed": "❌ Docker Compose is not installed",  
    "compose_file_exists": "✅ docker-compose.yml exists",  
    "compose_file_not_exists": "❌ docker-compose.yml does not exist",  
    "dev_compose_file_exists": "✅ docker-compose.dev.yml exists",  
    "dev_compose_file_not_exists": "ℹ️ docker-compose.dev.yml does not exist (dev mode unavailable)",  
    "aiforge_image_exists": "✅ AIForge image exists",  
    "aiforge_image_not_exists": "ℹ️ AIForge image does not exist, needs to be built",  
    "cannot_check_image_status": "⚠️ Cannot check AIForge image status",  
    "building_images": "🔨 Checking and building necessary images...",  
    "image_exists_skip_build": "✅ AIForge image exists, skipping build",  
    "start_building": "📦 Starting to build AIForge image...",  
    "build_time_notice": "ℹ️ First build may take 5-10 minutes, please be patient...",  
    "build_progress": "📦 Build progress:",  
    "build_success": "✅ Image build successful",  
    "build_failed": "❌ Image build failed",  
    "build_exception": "❌ Build process exception: {error}",  
    "starting_services": "🚀 AIForge Docker integrated startup...",  
    "docker_not_installed_help": "💡 Download: https://www.docker.com/products/docker-desktop",  
    "docker_not_running_help": "💡 Please start Docker Desktop and wait for it to fully start",  
    "docker_compose_not_available_msg": "❌ Docker Compose is not available",  
    "compose_file_not_exists_msg": "❌ docker-compose.yml file does not exist",  
    "dev_mode_fallback": "💡 Will use production mode startup",  
    "cleaning_old_containers": "🧹 Cleaning old containers...",  
    "dev_mode_start": "🔧 Development mode startup (code hot reload)",  
    "production_mode_start": "🔨 Production mode startup",  
    "searxng_enabled": "🔍 SearXNG search service enabled",  
    "searxng_not_enabled": "⚠️ SearXNG search service not enabled",  
    "service_start_success": "✅ Docker services started successfully",  
    "waiting_services": "⏳ Waiting for services to fully start...",  
    "startup_complete": "🎉 AIForge Docker integrated startup complete!",  
    "ready_to_use": "💡 You can now start using AIForge",  
    "service_start_failed": "❌ Docker service startup failed: {error}",  
    "startup_exception": "❌ Startup process exception: {error}",  
    "stopping_services": "🛑 Stopping AIForge Docker services...",  
    "stop_success": "✅ Docker services stopped successfully",  
    "stop_failed": "❌ Docker service stop failed: {error}",  
    "service_status": "📊 AIForge Docker service status:",  
    "cannot_get_status": "❌ Cannot get service status",  
    "cleaning_resources": "🧹 Cleaning AIForge Docker resources...",  
    "cleanup_success": "✅ Docker resource cleanup complete",  
    "cleanup_failed": "❌ Cleanup failed: {error}",  
    "deep_cleanup_start": "🔥 Executing AIForge deep cleanup...",  
    "deep_cleanup_warning": "⚠️ This will delete AIForge-related Docker resources but preserve Python, SearXNG, Nginx base images",  
    "stopping_all_services": "🛑 Stopping all services...",  
    "cleaning_built_images": "🗑️ Cleaning AIForge built images...",  
    "cleaning_build_cache": "🧹 Cleaning build cache...",  
    "cleaning_dangling_resources": "🌐 Cleaning dangling resources...",  
    "deep_cleanup_success": "✅ Deep cleanup complete, base images preserved",  
    "deep_cleanup_failed": "❌ Deep cleanup failed: {error}",  
    "removed_images": "✅ Removed {count} AIForge built images",  
    "no_images_to_remove": "ℹ️ No AIForge built images found to clean",  
    "cleanup_images_error": "⚠️ Error cleaning built images: {error}",  
    "health_check": "🏥 Service health check:",  
    "service_running": "✅ {service}: Running normally",  
    "service_not_running": "❌ {service}: {status}",  
    "service_status_unknown": "⚠️ {service}: Status unknown",  
    "service_urls": "🌐 Service access URLs:",  
    "aiforge_web_url": "- AIForge Web: http://localhost:8000",  
    "searxng_url": "- SearXNG: http://localhost:55510",  
    "admin_panel_url": "- Admin Panel: http://localhost:8000/admin",  
    "pyyaml_not_installed": "⚠️ PyYAML not installed, skipping SearXNG config update",  
    "searxng_config_not_exists": "ℹ️ SearXNG config file does not exist, skipping format update",  
    "searxng_config_updated": "✅ SearXNG config updated to support multiple output formats",  
    "searxng_config_latest": "✅ SearXNG config is up to date",  
    "searxng_config_update_failed": "⚠️ SearXNG config update failed: {error}",  
    "user_interrupted": "⚠️ User interrupted operation",  
    "execution_exception": "❌ Execution exception: {error}",  
    "cli": {  
      "description": "AIForge Docker Integrated Service Management",  
      "action_help": "Action type",  
      "dev_help": "Development mode startup (code hot reload)",  
      "searxng_help": "Enable SearXNG search service",  
      "epilog": "Integrated Usage Examples:\n    # One-click start production mode (without SearXNG)\n    aiforge-docker start\n\n    # One-click start production mode (with SearXNG)\n    aiforge-docker start --searxng\n\n    # One-click start development mode (code hot reload, with SearXNG)\n    aiforge-docker start --dev --searxng\n\n    # Stop all services\n    aiforge-docker stop\n\n    # View service status\n    aiforge-docker status\n\n    # Clean Docker resources\n    aiforge-docker cleanup\n\n    # Deep clean resources\n    aiforge-docker deep-cleanup\n\nDevelopment Version Usage Examples:\n    # Use startup script (recommended)\n    ./aiforge-docker.sh start --dev\n    ./aiforge-docker.sh deep-cleanup\n\nLanguage Settings:\n    # Dynamically specify language via environment variables\n    AIFORGE_LOCALE=en ./aiforge-docker.sh start\n    AIFORGE_LOCALE=ja ./aiforge-docker.sh status\n    \n    # Windows PowerShell\n    $env:AIFORGE_LOCALE=\"en\"; ./aiforge-docker.bat start\n\nFeatures:\n    ✅ Auto-detect Docker environment\n    ✅ Smart image building (avoid duplicate builds)\n    ✅ Real-time build progress\n    ✅ Optional SearXNG enablement\n    ✅ Service health checks\n    ✅ One-click resource cleanup\n    ✅ Multi-language support (zh|en|ar|de|es|fr|hi|ja|ko|pt|ru|vi)"  
    }  
  },
  "k8s": {  
    "starting_deployment": "🚀 Starting Kubernetes deployment...",  
    "checking_environment": "🔍 Checking Kubernetes environment...",  
    "kubectl_installed": "✅ kubectl is installed and available",  
    "kubectl_not_installed": "❌ kubectl is not installed",  
    "kubectl_not_in_path": "❌ kubectl is not found in PATH",  
    "cluster_accessible": "✅ Kubernetes cluster is accessible",  
    "cluster_not_accessible": "❌ Cannot access Kubernetes cluster",  
    "cannot_connect_cluster": "❌ Failed to connect to Kubernetes cluster",  
    "manifest_file_not_exists": "❌ Manifest file not found: {file}",  
    "creating_namespace": "📦 Creating namespace: {namespace}",  
    "namespace_created": "✅ Namespace created: {namespace}",  
    "applying_base_resources": "🔧 Applying base resources (PVC, Secrets)...",  
    "deployment_complete": "🎉 Kubernetes deployment completed successfully!",  
    "deployment_failed": "❌ Kubernetes deployment failed: {error}"  
  },
  "cloud": {  
    "starting_deployment": "🚀 Starting cloud deployment...",  
    "checking_environment": "🔍 Checking cloud environment...",  
    "cli_not_installed": "❌ Cloud CLI is not installed",  
    "credentials_not_configured": "❌ Cloud credentials are not configured",  
    "creating_instance": "🏗️ Creating cloud instance...",  
    "waiting_instance_ready": "⏳ Waiting for instance {instance_id} to be ready...",  
    "deploying_application": "📦 Deploying AIForge application...",  
    "deployment_complete": "🎉 Cloud deployment completed successfully!",  
    "deployment_failed": "❌ Cloud deployment failed: {error}",  
    "instance_ready": "✅ Instance is ready",  
    "waiting_progress": "⏳ Waiting... ({elapsed}s/{total}s)",  
    "deployment_successful": "✅ Deployment completed successfully",  
    "deployment_failed_partial": "⚠️ Deployment completed with some issues",  
    "instance_id": "Instance ID",  
    "access_url": "Access URL",  
    "stopping_instances": "🛑 Stopping cloud instances...",  
    "instance_stopped": "✅ Instance stopped: {instance_id}",  
    "instance_stop_failed": "❌ Failed to stop instance: {instance_id}",  
    "stop_complete": "🛑 Stopped {count} instances",  
    "stop_failed": "❌ Failed to stop instances: {error}",  
    "cleaning_resources": "🧹 Cleaning up cloud resources...",  
    "waiting_instances_stop": "⏳ Waiting for instances to stop completely...",  
    "cleanup_success": "✅ Resource cleanup completed",  
    "cleanup_failed": "❌ Resource cleanup failed",  
    "cleanup_exception": "❌ Cleanup exception: {error}",  
    "script_file_not_exists": "❌ Script file not found: {file}",
    "aliyun_cli_installed": "✅ Aliyun CLI is installed and available",  
    "aliyun_cli_not_installed": "❌ Aliyun CLI is not installed",  
    "aliyun_cli_not_in_path": "❌ Aliyun CLI is not found in PATH",  
    "aliyun_credentials_configured": "✅ Aliyun credentials are configured",  
    "aliyun_credentials_not_configured": "❌ Aliyun credentials are not configured",  
    "aliyun_credentials_check_failed": "❌ Failed to check Aliyun credentials",  
    "aliyun_instance_created": "✅ Aliyun ECS instance created: {instance_id}",  
    "aliyun_instance_create_failed": "❌ Failed to create Aliyun instance: {error}",  
    "aliyun_list_instances_failed": "❌ Failed to list Aliyun instances",  
    "aliyun_list_instances_error": "❌ Error listing Aliyun instances: {error}",  
    "aliyun_cleaning_resources": "🧹 Cleaning up Aliyun resources...",  
    "aliyun_cleanup_complete": "✅ Aliyun resource cleanup completed",  
    "aliyun_cleanup_failed": "❌ Aliyun resource cleanup failed: {error}",
    "aws_cli_installed": "✅ AWS CLI is installed and available",  
    "aws_cli_not_installed": "❌ AWS CLI is not installed",  
    "aws_cli_not_in_path": "❌ AWS CLI is not found in PATH",  
    "aws_credentials_configured": "✅ AWS credentials are configured",  
    "aws_credentials_not_configured": "❌ AWS credentials are not configured",  
    "aws_credentials_check_failed": "❌ Failed to check AWS credentials",  
    "aws_instance_created": "✅ AWS EC2 instance created: {instance_id}",  
    "aws_instance_create_failed": "❌ Failed to create AWS instance: {error}",  
    "aws_list_instances_failed": "❌ Failed to list AWS instances",  
    "aws_list_instances_error": "❌ Error listing AWS instances: {error}",  
    "aws_cleaning_resources": "🧹 Cleaning up AWS resources...",  
    "aws_cleanup_complete": "✅ AWS resource cleanup completed",  
    "aws_cleanup_failed": "❌ AWS resource cleanup failed: {error}",
    "azure_cli_installed": "✅ Azure CLI is installed and available",  
    "azure_cli_not_installed": "❌ Azure CLI is not installed",  
    "azure_cli_not_in_path": "❌ Azure CLI is not found in PATH",  
    "azure_credentials_configured": "✅ Azure credentials are configured",  
    "azure_credentials_not_configured": "❌ Azure credentials are not configured",  
    "azure_credentials_check_failed": "❌ Failed to check Azure credentials",  
    "azure_instance_created": "✅ Azure VM instance created: {instance_id}",  
    "azure_instance_create_failed": "❌ Failed to create Azure instance: {error}",  
    "azure_list_instances_failed": "❌ Failed to list Azure instances",  
    "azure_list_instances_error": "❌ Error listing Azure instances: {error}",  
    "azure_cleaning_resources": "🧹 Cleaning up Azure resources...",  
    "azure_cleanup_complete": "✅ Azure resource cleanup completed",  
    "azure_cleanup_failed": "❌ Azure resource cleanup failed: {error}",
    "gcp_cli_installed": "✅ GCP CLI is installed and available",  
    "gcp_cli_not_installed": "❌ GCP CLI is not installed",  
    "gcp_cli_not_in_path": "❌ GCP CLI is not found in PATH",  
    "gcp_credentials_configured": "✅ GCP credentials are configured",  
    "gcp_credentials_not_configured": "❌ GCP credentials are not configured",  
    "gcp_credentials_check_failed": "❌ Failed to check GCP credentials",  
    "gcp_instance_created": "✅ GCP Compute Engine instance created: {instance_id}",  
    "gcp_instance_create_failed": "❌ Failed to create GCP instance: {error}",  
    "gcp_list_instances_failed": "❌ Failed to list GCP instances",  
    "gcp_list_instances_error": "❌ Error listing GCP instances: {error}",  
    "gcp_cleaning_resources": "🧹 Cleaning up GCP resources...",  
    "gcp_cleanup_complete": "✅ GCP resource cleanup completed",  
    "gcp_cleanup_failed": "❌ GCP resource cleanup failed: {error}"  
  },
  "deploy_cli": {  
    "description": "AIForge Unified Deployment Management Tool",  
    "global_options": {  
      "config": "Unified deployment configuration file path (TOML)",  
      "docker_compose": "Docker Compose configuration file path",  
      "k8s_config": "Kubernetes configuration file path",  
      "terraform_config": "Terraform configuration file path",  
      "verbose": "Verbose output"  
    },  
    "commands": {  
      "docker": "Docker deployment",  
      "k8s": "Kubernetes deployment",  
      "cloud": "Cloud deployment"  
    },  
    "docker_options": {  
      "dev": "Development mode",  
      "searxng": "Enable SearXNG",  
      "host": "Server address",  
      "port": "Server port",  
      "deep": "Deep cleanup (for cleanup only)",  
      "core_only": "Start core CLI service only (default starts Web interface)",  
      "web_optional": "Make web component optional"  
    },  
    "k8s_options": {  
      "namespace": "Namespace",  
      "replicas": "Number of replicas"  
    },  
    "cloud_options": {  
      "region": "Deployment region",  
      "instance_type": "Instance type"  
    },  
    "messages": {  
      "execution_error": "Execution error: {error}",  
      "docker_deploy_result": "Docker deployment result: {result}",  
      "docker_stop_result": "Docker stop result: {result}",  
      "docker_status": "Docker status: {status}",  
      "k8s_deploy_result": "K8s deployment result: {result}",  
      "k8s_status": "K8s status: found {count} pods",  
      "k8s_delete_result": "K8s deletion result: {result}",  
      "k8s_upgrade_result": "K8s upgrade result: {result}",  
      "k8s_upgrade_failed": "K8s upgrade failed: unable to stop existing deployment",  
      "cloud_deploy_success": "{provider} deployment successful!",  
      "cloud_deploy_failed": "{provider} deployment failed: {message}",  
      "cloud_status": "{provider} status: found {count} instances",  
      "cloud_status_failed": "Failed to get {provider} status: {error}",  
      "cloud_destroy_result": "{provider} destruction result: {result}",  
      "cloud_destroy_success": "All cloud resources have been cleaned up",  
      "cloud_destroy_error": "Errors encountered during destruction, please check cloud console",  
      "success": "Success",  
      "failed": "Failed",  
      "unknown_error": "Unknown error",  
      "unsupported_provider": "Unsupported cloud provider: {provider}",  
      "core_mode_started": "📦 Core CLI mode started (core service only)",  
      "web_mode_started": "🌐 Web interface mode started (core + web services, default)",  
      "deployed_to_namespace": "Deployed to namespace: {namespace}",  
      "replica_count": "Replica count: {replicas}",  
      "error_message": "Error message: {message}",  
      "pod_status": "  Pod {name}: {status}",  
      "instance_id": "Instance ID: {instance_id}",  
      "app_deploy_complete": "Application deployment complete",  
      "app_deploy_failed": "Application deployment failed: {error}",  
      "instance_status": "  Instance {instance_id}: {state} (IP: {public_ip})"  
    }  
  }  
}