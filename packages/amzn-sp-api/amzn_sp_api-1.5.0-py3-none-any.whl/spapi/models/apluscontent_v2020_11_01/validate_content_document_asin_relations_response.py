# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ValidateContentDocumentAsinRelationsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'warnings': 'List[Error]',
        'errors': 'List[Error]',
    }

    attribute_map = {
        'warnings': 'warnings',
        'errors': 'errors',
    }

    def __init__(self, warnings=None, errors=None, _configuration=None):  # noqa: E501
        """ValidateContentDocumentAsinRelationsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._warnings = None
        self._errors = None
        self.discriminator = None

        if warnings is not None:
            self.warnings = warnings
        self.errors = errors

    @property
    def warnings(self):
        """Gets the warnings of this ValidateContentDocumentAsinRelationsResponse.  # noqa: E501

        A set of messages to the user, such as warnings or comments.  # noqa: E501

        :return: The warnings of this ValidateContentDocumentAsinRelationsResponse.  # noqa: E501
        :rtype: List[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ValidateContentDocumentAsinRelationsResponse.

        A set of messages to the user, such as warnings or comments.  # noqa: E501

        :param warnings: The warnings of this ValidateContentDocumentAsinRelationsResponse.  # noqa: E501
        :type: List[Error]
        """

        self._warnings = warnings

    @property
    def errors(self):
        """Gets the errors of this ValidateContentDocumentAsinRelationsResponse.  # noqa: E501

        A list of error responses that are returned when a request is unsuccessful.  # noqa: E501

        :return: The errors of this ValidateContentDocumentAsinRelationsResponse.  # noqa: E501
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ValidateContentDocumentAsinRelationsResponse.

        A list of error responses that are returned when a request is unsuccessful.  # noqa: E501

        :param errors: The errors of this ValidateContentDocumentAsinRelationsResponse.  # noqa: E501
        :type: List[Error]
        """
        if self._configuration.client_side_validation and errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidateContentDocumentAsinRelationsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateContentDocumentAsinRelationsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValidateContentDocumentAsinRelationsResponse):
            return True

        return self.to_dict() != other.to_dict()
