# Project-related metadata for the LangChain Azure PostgreSQL library.
[project]
name = "langchain-azure-postgresql"
version = "0.3.0"
description = "LangChain VectorStore integrations for Azure Database for PostgreSQL"
license = { file = "LICENSE" }
readme = "README.md"
requires-python = "~=3.10"

authors = [
  { name = "Arda Aytekin", email = "8845951+aytekinar@users.noreply.github.com" },
]
maintainers = [
  { name = "Arda Aytekin", email = "8845951+aytekinar@users.noreply.github.com" },
  { name = "Orhan Kislal", email = "kislalorhan@microsoft.com" },
]
keywords = ["azure", "postgresql", "langchain", "vectorstore", "database"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: AsyncIO",
  "Framework :: Pydantic :: 2",
  "Framework :: tox",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Database",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Text Processing",
]

dependencies = [
  # aiohttp needed for azure.identity.aio; should we make it optional?
  "aiohttp~=3.0",
  "azure-identity~=1.0",
  "langchain-core~=0.3.0",     # Core LangChain library; includes base classes and utilities
  "numpy~=2.0",
  "pgvector~=0.4.0",
  "psycopg[binary,pool]~=3.0",
  "pydantic~=2.0",
  "simsimd~=6.0",              # needed for LangChain's mmr search functionality
  # Needed for typing.Self in 3.10 and typing.override in 3.11
  "typing-extensions~=4.0; python_version < '3.12'",
]

[project.urls]
repository = "https://github.com/langchain-ai/langchain-azure"
"Source Code" = "https://github.com/langchain-ai/langchain-azure/tree/main/libs/azure-postgresql"
"Release Notes" = "https://github.com/langchain-ai/langchain-azure/releases"

# Build system configuration for the project.
[build-system]
requires = ["uv_build~=0.8.0"]
build-backend = "uv_build"

# Configuration for Coverage.py, which is used by pytest-cov internally.
[tool.coverage.run]
omit = ["tests/*"]

[tool.coverage.paths]
langchain_azure_postgresql = [
  "src/langchain_azure_postgresql",
  "*/site-packages/langchain_azure_postgresql",
]

[tool.poetry]
requires-poetry = "~=2.0"

[tool.poetry.group.dev.dependencies]
jupyterlab = "~=4.0"
langchain = "~=0.3.0"
langchain-community = "~=0.3.0"
langchain-openai = "~=0.3.0"
langgraph = "~=0.6.0"
langgraph-checkpoint-postgres = "~=2.0"
openai = "~=1.0"

[tool.poetry.group.lint.dependencies]
ruff = "~=0.12.0"

[tool.poetry.group.package.dependencies]
build = { version = "~=1.0", extras = ["uv"] }
twine = "~=6.0"
uv-secure = { version = "~=0.12.0", extras = ["faster-async"] }

[tool.poetry.group.test.dependencies]
numpy = "~=2.0"
pycobertura = "~=4.0"
pytest = "~=8.0"
pytest-asyncio = "~=1.0"
pytest-cov = "~=6.0"
scipy = "~=1.0"
tox = "~=4.0"
tox-uv = "~=1.0"

# TODO(arda): Remove this group once we have a stable/improved GitHub CI pipeline.
[tool.poetry.group.test_integration.dependencies]
pytest = "~=8.0"

[tool.poetry.group.typing.dependencies]
mypy = "~=1.0"

# Configuration for pytest, the testing framework used in the project.
[tool.pytest.ini_options]
addopts = [
  "--cov=langchain_azure_postgresql",            # Specify the package to measure coverage for
  "--cov-report=html:htmlcov/pytest",            # Generate HTML coverage report under the htmlcov directory
  "--cov-report=xml:cover/pytest/cobertura.xml", # Generate XML coverage report under the xmlcov directory
  "--cov-report=term",                           # Report coverage in the terminal
  "--doctest-continue-on-failure",               # Continue running doctests even if some fail
  "--doctest-modules",                           # Enable doctest modules
  "--import-mode=importlib",                     # Use importlib for (test) module imports
  "-p no:legacypath",                            # Disable legacy path handling plugin
  "-r a",                                        # Show a short test summary for all but passed tests
  "--strict-markers",                            # Enable strict markers to ensure all markers are defined
  "--verbose",                                   # Enable verbose output for pytest
]
# TODO(arda): Remove this once we have a stable/improved GitHub CI pipeline.
markers = [
  "compile: mark placeholder test used to compile integration tests without running them",
  "requires: mark tests as requiring a specific library",
]
asyncio_default_fixture_loop_scope = "session" # Default event loop scope for asyncio fixtures
asyncio_default_test_loop_scope = "session" # Default event loop scope for asyncio tests
asyncio_mode = "auto" # Automatically detect asyncio mode
doctest_encoding = "utf-8" # Set encoding for doctests
doctest_optionflags = [
  "IGNORE_EXCEPTION_DETAIL", # Ignore exception details in doctests
  "NUMBER",                  # Match floating-point numbers to the precision written in the expected doctest output
  "NORMALIZE_WHITESPACE",    # Normalize whitespace in doctests
]
# log_date_format and log_format mess with TOML parsing/formatting; hence, try
# commenting them out when/if needed.
log_date_format = "%Y-%m-%dT%H:%M:%S%Z" # Date format for captured logs in pytest
log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s" # Log format for captured logs in pytest
log_level = "DEBUG" # Set the log level for pytest
xfail_strict = true # Treat xfail tests as failures if they pass

# Configuration for Ruff, the linter used in the project.
[tool.ruff.lint]
extend-select = [
  "UP",     # pyupgrade
  "D",      # pydocstyle
  "SIM",    # flake8-simplify
  "I",      # isort
  "RUF100", # unused noqa
]

[tool.ruff.lint.pydocstyle]
convention = "google" # Use Google style guide for docstrings

# Configuration for Tox, the test automation framework used in the project.
[tool.tox]
requires = ["tox~=4.0", "tox-uv~=1.0"]
env_list = ["3.10", "3.11", "3.12", "3.13", "lint", "package", "type", "vuln"]

# Base environment configuration, which is inherited by all environments.
[tool.tox.env_run_base]
description = "Run tests under Python {base_python}"
extras = ["langchain"]
dependency_groups = ["test"]
labels = ["test"]
commands = [
  [
    "pytest",
    # HTML coverage report for different Python versions
    "--cov-report=html:htmlcov/{base_python}",
    # XML coverage report for different Python versions
    "--cov-report=xml:cover/{base_python}/cobertura.xml",
  ],
]
pass_env = [
  "AZURE_CLIENT_*",
  "AZURE_TENANT_*",
  "PGAPPNAME",
  "PGDATABASE",
  "PGHOST",
  "PGPASSWORD",
  "PGPORT",
  "PGUSER",
]

# Environment configuration for the "lint" environment.
[tool.tox.env.lint]
description = "Run lint checks on the code base"
skip_install = true
dependency_groups = ["lint"]
labels = ["lint"]
commands = [["ruff", "check", "src"], ["ruff", "check", "tests"]]

# Environment configuration for the "package" environment.
[tool.tox.env.package]
description = "Run packaging checks on the code base"
skip_install = true
dependency_groups = ["package"]
labels = ["package"]
commands = [
  [
    "python",
    "-m",
    "build",
    "--installer",
    "uv",
    "--outdir",
    "dist",
  ],
  [
    "twine",
    "check",
    "dist/*",
  ],
]

# Environment configuration for the "type" environment.
[tool.tox.env.type]
description = "Run type checks on the code base"
extras = ["langchain"]
dependency_groups = ["test", "type"]
labels = ["type"]
commands = [["mypy", "src"], ["mypy", "tests"]]

# Environment configuration for the "vuln" environment.
[tool.tox.env.vuln]
description = "Run vulnerability scanning on the code base"
extras = ["langchain"]
dependency_groups = ["package"]
labels = ["package", "vuln"]
commands = [["uv-secure"]]

# Configuration for uv, the project management tool used in the project.
[tool.uv]
# Dependency groups to install by default
default-groups = "all"

# Dependency groups for development, linting, testing, and type checking.
[dependency-groups]
dev = [
  "jupyterlab~=4.0",
  "langchain~=0.3.0",
  "langchain-community~=0.3.0",
  "langchain-openai~=0.3.0",
  "langgraph~=0.6.0",
  "langgraph-checkpoint-postgres~=2.0",
  "openai~=1.0",
]
lint = ["ruff~=0.12.0"]
package = ["build[uv]~=1.0", "twine~=6.0", "uv-secure[faster-async]~=0.12.0"]
test = [
  "numpy~=2.0",
  "pycobertura~=4.0",
  "pytest~=8.0",
  "pytest-asyncio~=1.0",
  "pytest-cov~=6.0",
  "scipy~=1.0",
  "tox~=4.0",
  "tox-uv~=1.0",
]
# TODO(arda): Remove this group once we have a stable/improved GitHub CI pipeline.
test_integration = []
type = ["mypy~=1.0"]
