[tool.poetry]
name = "validated-llm"
version = "0.1.17"
description = "LLM output validation with retry loops - ensure your language model responses meet requirements"
authors = ["validated-llm contributors"]
readme = "README.md"
homepage = "https://github.com/byte-pipe/validated-llm"
repository = "https://github.com/byte-pipe/validated-llm"
documentation = "https://github.com/byte-pipe/validated-llm/blob/main/README.md"
license = "MIT"
packages = [
    {include = "validated_llm", from = "src"},
    {include = "tools"}
]
keywords = ["llm", "validation", "ai", "language-model", "retry-loop", "self-correcting", "reliability", "openai", "anthropic", "ollama"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.scripts]
validated-llm-prompt2task = "tools.prompt_to_task.cli_click:main"
validated-llm-config = "validated_llm.cli_config:main"

[tool.poetry.dependencies]
python = "^3.11"
openai = "^1.0.0"
pydantic = "^2.0.0"
pyyaml = "^6.0"
typing-extensions = "^4.0.0"
jsonschema = "^4.0.0"
# Removed chatbot dependency - replaced with built-in LLM providers

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "^4.0.0"
black = "^23.0.0"
isort = "^5.0.0"
mypy = "^1.0.0"
flake8 = "^6.0.0"
pre-commit = "^3.0.0"
types-jsonschema = "*"
types-PyYAML = "*"
lxml-stubs = "^0.5.1"
types-lxml = "^2025.3.30"
dnspython = "^2.7.0"
pytest-timeout = "^2.4.0"
pytest-asyncio = "^0.23.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 222
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 222

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["pytest", "jsonschema", "rich", "rich.*", "tqdm"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "validated_llm.tasks.story_to_scenes"
disable_error_code = ["unreachable"]

[tool.pytest.ini_options]
testpaths = ["tests", "tools/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests",
    "asyncio: marks tests as asyncio tests"
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]

[tool.coverage.run]
source = ["src", "tools"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 222
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "build", "dist", ".venv"]

[tool.bandit]
exclude_dirs = ["tests", "tools/tests", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.ruff]
line-length = 222
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = ["E203"]  # W503 is not a valid ruff code
exclude = [".git", "__pycache__", "build", "dist", ".venv"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__ files
"tests/*" = ["B101"]  # Allow asserts in tests
