# coding: utf-8

"""
    The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).

    The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.

    The version of the OpenAPI document: 2024-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class TransactionAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'bank_account_holder_name': 'str',
        'bank_name': 'str',
        'bank_account_number_format': 'BankAccountNumberFormat',
        'bank_account_number_tail': 'str',
        'bank_account_country_code': 'str',
        'bank_account_currency': 'str',
    }

    attribute_map = {
        'account_id': 'accountId',
        'bank_account_holder_name': 'bankAccountHolderName',
        'bank_name': 'bankName',
        'bank_account_number_format': 'bankAccountNumberFormat',
        'bank_account_number_tail': 'bankAccountNumberTail',
        'bank_account_country_code': 'bankAccountCountryCode',
        'bank_account_currency': 'bankAccountCurrency',
    }

    def __init__(self, account_id=None, bank_account_holder_name=None, bank_name=None, bank_account_number_format=None, bank_account_number_tail=None, bank_account_country_code=None, bank_account_currency=None, _configuration=None):  # noqa: E501
        """TransactionAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._bank_account_holder_name = None
        self._bank_name = None
        self._bank_account_number_format = None
        self._bank_account_number_tail = None
        self._bank_account_country_code = None
        self._bank_account_currency = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if bank_account_holder_name is not None:
            self.bank_account_holder_name = bank_account_holder_name
        self.bank_name = bank_name
        self.bank_account_number_format = bank_account_number_format
        if bank_account_number_tail is not None:
            self.bank_account_number_tail = bank_account_number_tail
        if bank_account_country_code is not None:
            self.bank_account_country_code = bank_account_country_code
        self.bank_account_currency = bank_account_currency

    @property
    def account_id(self):
        """Gets the account_id of this TransactionAccount.  # noqa: E501

        The unique identifier provided by Amazon to identify the account   # noqa: E501

        :return: The account_id of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TransactionAccount.

        The unique identifier provided by Amazon to identify the account   # noqa: E501

        :param account_id: The account_id of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def bank_account_holder_name(self):
        """Gets the bank_account_holder_name of this TransactionAccount.  # noqa: E501

        BankAccount holder's name   # noqa: E501

        :return: The bank_account_holder_name of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_holder_name

    @bank_account_holder_name.setter
    def bank_account_holder_name(self, bank_account_holder_name):
        """Sets the bank_account_holder_name of this TransactionAccount.

        BankAccount holder's name   # noqa: E501

        :param bank_account_holder_name: The bank_account_holder_name of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._bank_account_holder_name = bank_account_holder_name

    @property
    def bank_name(self):
        """Gets the bank_name of this TransactionAccount.  # noqa: E501

        The name of the bank   # noqa: E501

        :return: The bank_name of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this TransactionAccount.

        The name of the bank   # noqa: E501

        :param bank_name: The bank_name of this TransactionAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_name is None:
            raise ValueError("Invalid value for `bank_name`, must not be `None`")  # noqa: E501

        self._bank_name = bank_name

    @property
    def bank_account_number_format(self):
        """Gets the bank_account_number_format of this TransactionAccount.  # noqa: E501


        :return: The bank_account_number_format of this TransactionAccount.  # noqa: E501
        :rtype: BankAccountNumberFormat
        """
        return self._bank_account_number_format

    @bank_account_number_format.setter
    def bank_account_number_format(self, bank_account_number_format):
        """Sets the bank_account_number_format of this TransactionAccount.


        :param bank_account_number_format: The bank_account_number_format of this TransactionAccount.  # noqa: E501
        :type: BankAccountNumberFormat
        """
        if self._configuration.client_side_validation and bank_account_number_format is None:
            raise ValueError("Invalid value for `bank_account_number_format`, must not be `None`")  # noqa: E501

        self._bank_account_number_format = bank_account_number_format

    @property
    def bank_account_number_tail(self):
        """Gets the bank_account_number_tail of this TransactionAccount.  # noqa: E501

        Last 3 digit of the bank account number   # noqa: E501

        :return: The bank_account_number_tail of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number_tail

    @bank_account_number_tail.setter
    def bank_account_number_tail(self, bank_account_number_tail):
        """Sets the bank_account_number_tail of this TransactionAccount.

        Last 3 digit of the bank account number   # noqa: E501

        :param bank_account_number_tail: The bank_account_number_tail of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._bank_account_number_tail = bank_account_number_tail

    @property
    def bank_account_country_code(self):
        """Gets the bank_account_country_code of this TransactionAccount.  # noqa: E501

        The two digit country code, in ISO 3166 format. This field is OPTIONAL for transactionSourceAccount object but is MANDATORY field for transactionDestinationAccount   # noqa: E501

        :return: The bank_account_country_code of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_country_code

    @bank_account_country_code.setter
    def bank_account_country_code(self, bank_account_country_code):
        """Sets the bank_account_country_code of this TransactionAccount.

        The two digit country code, in ISO 3166 format. This field is OPTIONAL for transactionSourceAccount object but is MANDATORY field for transactionDestinationAccount   # noqa: E501

        :param bank_account_country_code: The bank_account_country_code of this TransactionAccount.  # noqa: E501
        :type: str
        """

        self._bank_account_country_code = bank_account_country_code

    @property
    def bank_account_currency(self):
        """Gets the bank_account_currency of this TransactionAccount.  # noqa: E501

        The currency code in ISO 4217 format   # noqa: E501

        :return: The bank_account_currency of this TransactionAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_currency

    @bank_account_currency.setter
    def bank_account_currency(self, bank_account_currency):
        """Sets the bank_account_currency of this TransactionAccount.

        The currency code in ISO 4217 format   # noqa: E501

        :param bank_account_currency: The bank_account_currency of this TransactionAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank_account_currency is None:
            raise ValueError("Invalid value for `bank_account_currency`, must not be `None`")  # noqa: E501

        self._bank_account_currency = bank_account_currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionAccount):
            return True

        return self.to_dict() != other.to_dict()
