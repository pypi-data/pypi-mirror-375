# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/operator/catalog_operator_service.proto, unacast/v2/operator/system_operator_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import catalog as _catalog__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class CleanupOrphanedIndicesRequest(betterproto.Message):
    dryrun: bool = betterproto.bool_field(1)
    index_types: List[str] = betterproto.string_field(2)
    value_types: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ClearCacheRequest(betterproto.Message):
    keys: List[str] = betterproto.string_field(1)
    """specific keys to clear"""


@dataclass(eq=False, repr=False)
class ClearCacheResponse(betterproto.Message):
    cleared_keys: int = betterproto.int64_field(1)
    """number of keys cleared"""


@dataclass(eq=False, repr=False)
class CreateCatalogRequest(betterproto.Message):
    given_id: str = betterproto.string_field(1)


class SystemOperatorServiceStub(betterproto.ServiceStub):
    async def cleanup_orphaned_indices(
        self,
        cleanup_orphaned_indices_request: "CleanupOrphanedIndicesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.v2.operator.SystemOperatorService/CleanupOrphanedIndices",
            cleanup_orphaned_indices_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clear_cache(
        self,
        clear_cache_request: "ClearCacheRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ClearCacheResponse":
        return await self._unary_unary(
            "/unacast.v2.operator.SystemOperatorService/ClearCache",
            clear_cache_request,
            ClearCacheResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CatalogOperatorServiceStub(betterproto.ServiceStub):
    async def create_catalog(
        self,
        create_catalog_request: "CreateCatalogRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "_catalog__.Catalog":
        return await self._unary_unary(
            "/unacast.v2.operator.CatalogOperatorService/CreateCatalog",
            create_catalog_request,
            _catalog__.Catalog,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SystemOperatorServiceBase(ServiceBase):

    async def cleanup_orphaned_indices(
        self, cleanup_orphaned_indices_request: "CleanupOrphanedIndicesRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clear_cache(
        self, clear_cache_request: "ClearCacheRequest"
    ) -> "ClearCacheResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_cleanup_orphaned_indices(
        self,
        stream: "grpclib.server.Stream[CleanupOrphanedIndicesRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cleanup_orphaned_indices(request)
        await stream.send_message(response)

    async def __rpc_clear_cache(
        self, stream: "grpclib.server.Stream[ClearCacheRequest, ClearCacheResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.clear_cache(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.operator.SystemOperatorService/CleanupOrphanedIndices": grpclib.const.Handler(
                self.__rpc_cleanup_orphaned_indices,
                grpclib.const.Cardinality.UNARY_UNARY,
                CleanupOrphanedIndicesRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.v2.operator.SystemOperatorService/ClearCache": grpclib.const.Handler(
                self.__rpc_clear_cache,
                grpclib.const.Cardinality.UNARY_UNARY,
                ClearCacheRequest,
                ClearCacheResponse,
            ),
        }


class CatalogOperatorServiceBase(ServiceBase):

    async def create_catalog(
        self, create_catalog_request: "CreateCatalogRequest"
    ) -> "_catalog__.Catalog":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_catalog(
        self, stream: "grpclib.server.Stream[CreateCatalogRequest, _catalog__.Catalog]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_catalog(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.operator.CatalogOperatorService/CreateCatalog": grpclib.const.Handler(
                self.__rpc_create_catalog,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateCatalogRequest,
                _catalog__.Catalog,
            ),
        }
