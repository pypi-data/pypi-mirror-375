[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "script-bisect"
dynamic = ["version"]
description = "Bisect package versions in PEP 723 Python scripts using git bisect and uv"
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
keywords = [
    "git",
    "bisect",
    "uv",
    "pep723",
    "python",
    "dependencies",
    "debugging",
]
authors = [
    { name = "uv-bisect contributors" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Software Development :: Version Control :: Git",
]
dependencies = [
    "click>=8.0",
    "rich>=13.0",
    "gitpython>=3.1",
    "packaging>=23.0",
    "tomli-w>=1.0",
    "prompt-toolkit>=3.0.52",
    "requests>=2.32.5",
    "mistune>=3.1.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "mypy>=1.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0",
    "pytest-mock>=3.10",
    "types-requests>=2.0",
]

[project.urls]
Documentation = "https://github.com/ianhi/script-bisect#readme"
Issues = "https://github.com/ianhi/script-bisect/issues"
Source = "https://github.com/ianhi/script-bisect"

[project.scripts]
script-bisect = "script_bisect.cli:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.targets.wheel]
packages = ["src/script_bisect"]

[tool.ruff]
target-version = "py312"
line-length = 88
exclude = ["tests/fixtures"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "B904",   # use `raise ... from err`
]

[tool.ruff.lint.isort]
known-first-party = ["script_bisect"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "git"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.fixtures.*"
ignore_errors = true

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B404", "B603", "B607"]  # Skip assert_used, subprocess warnings

[tool.bandit.assert_used]
skips = ["*"]

[dependency-groups]
dev = [
    "hatch-vcs>=0.5.0",
]
