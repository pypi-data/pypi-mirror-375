# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Label(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_text_for_label': 'str',
        'dimensions': 'LabelDimensions',
        'file_contents': 'FileContents',
        'label_format': 'LabelFormat',
        'standard_id_for_label': 'StandardIdForLabel',
    }

    attribute_map = {
        'custom_text_for_label': 'CustomTextForLabel',
        'dimensions': 'Dimensions',
        'file_contents': 'FileContents',
        'label_format': 'LabelFormat',
        'standard_id_for_label': 'StandardIdForLabel',
    }

    def __init__(self, custom_text_for_label=None, dimensions=None, file_contents=None, label_format=None, standard_id_for_label=None, _configuration=None):  # noqa: E501
        """Label - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_text_for_label = None
        self._dimensions = None
        self._file_contents = None
        self._label_format = None
        self._standard_id_for_label = None
        self.discriminator = None

        if custom_text_for_label is not None:
            self.custom_text_for_label = custom_text_for_label
        self.dimensions = dimensions
        self.file_contents = file_contents
        if label_format is not None:
            self.label_format = label_format
        if standard_id_for_label is not None:
            self.standard_id_for_label = standard_id_for_label

    @property
    def custom_text_for_label(self):
        """Gets the custom_text_for_label of this Label.  # noqa: E501

        Custom text to print on the label. Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support `CustomTextForLabel`.  # noqa: E501

        :return: The custom_text_for_label of this Label.  # noqa: E501
        :rtype: str
        """
        return self._custom_text_for_label

    @custom_text_for_label.setter
    def custom_text_for_label(self, custom_text_for_label):
        """Sets the custom_text_for_label of this Label.

        Custom text to print on the label. Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support `CustomTextForLabel`.  # noqa: E501

        :param custom_text_for_label: The custom_text_for_label of this Label.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                custom_text_for_label is not None and len(custom_text_for_label) > 14):
            raise ValueError("Invalid value for `custom_text_for_label`, length must be less than or equal to `14`")  # noqa: E501

        self._custom_text_for_label = custom_text_for_label

    @property
    def dimensions(self):
        """Gets the dimensions of this Label.  # noqa: E501


        :return: The dimensions of this Label.  # noqa: E501
        :rtype: LabelDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Label.


        :param dimensions: The dimensions of this Label.  # noqa: E501
        :type: LabelDimensions
        """
        if self._configuration.client_side_validation and dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")  # noqa: E501

        self._dimensions = dimensions

    @property
    def file_contents(self):
        """Gets the file_contents of this Label.  # noqa: E501


        :return: The file_contents of this Label.  # noqa: E501
        :rtype: FileContents
        """
        return self._file_contents

    @file_contents.setter
    def file_contents(self, file_contents):
        """Sets the file_contents of this Label.


        :param file_contents: The file_contents of this Label.  # noqa: E501
        :type: FileContents
        """
        if self._configuration.client_side_validation and file_contents is None:
            raise ValueError("Invalid value for `file_contents`, must not be `None`")  # noqa: E501

        self._file_contents = file_contents

    @property
    def label_format(self):
        """Gets the label_format of this Label.  # noqa: E501


        :return: The label_format of this Label.  # noqa: E501
        :rtype: LabelFormat
        """
        return self._label_format

    @label_format.setter
    def label_format(self, label_format):
        """Sets the label_format of this Label.


        :param label_format: The label_format of this Label.  # noqa: E501
        :type: LabelFormat
        """

        self._label_format = label_format

    @property
    def standard_id_for_label(self):
        """Gets the standard_id_for_label of this Label.  # noqa: E501


        :return: The standard_id_for_label of this Label.  # noqa: E501
        :rtype: StandardIdForLabel
        """
        return self._standard_id_for_label

    @standard_id_for_label.setter
    def standard_id_for_label(self, standard_id_for_label):
        """Sets the standard_id_for_label of this Label.


        :param standard_id_for_label: The standard_id_for_label of this Label.  # noqa: E501
        :type: StandardIdForLabel
        """

        self._standard_id_for_label = standard_id_for_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Label, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Label):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Label):
            return True

        return self.to_dict() != other.to_dict()
