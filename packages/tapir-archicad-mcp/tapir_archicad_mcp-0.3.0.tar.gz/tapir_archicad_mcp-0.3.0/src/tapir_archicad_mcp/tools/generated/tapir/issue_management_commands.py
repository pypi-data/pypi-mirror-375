# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch
import time
from typing import Any
from tapir_archicad_mcp.pagination import handle_paginated_request, PAGINATION_CACHE, CACHE_LIFETIME_SECONDS

from multiconn_archicad.models.tapir.commands import (
    AddCommentToIssueParameters,
AttachElementsToIssueParameters,
CreateIssueParameters,
CreateIssueResult,
DeleteIssueParameters,
DetachElementsFromIssueParameters,
ExportIssuesToBCFParameters,
GetCommentsFromIssueParameters,
GetCommentsFromIssueResult,
GetElementsAttachedToIssueParameters,
GetElementsAttachedToIssueResult,
GetIssuesResult,
ImportIssuesFromBCFParameters
)


log = logging.getLogger()

def add_comment_to_issue(port: int, params: AddCommentToIssueParameters) -> None:
    """
    Adds a new comment to the specified issue.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="AddCommentToIssue",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for AddCommentToIssue result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing AddCommentToIssue on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    add_comment_to_issue,
    name="issues_add_comment_to_issue",
    title="AddCommentToIssue",
    description="Adds a new comment to the specified issue.",
    params_model=AddCommentToIssueParameters,
    result_model=None
)


def attach_elements_to_issue(port: int, params: AttachElementsToIssueParameters) -> None:
    """
    Attaches elements to the specified issue.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="AttachElementsToIssue",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for AttachElementsToIssue result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing AttachElementsToIssue on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    attach_elements_to_issue,
    name="issues_attach_elements_to_issue",
    title="AttachElementsToIssue",
    description="Attaches elements to the specified issue.",
    params_model=AttachElementsToIssueParameters,
    result_model=None
)


def create_issue(port: int, params: CreateIssueParameters) -> CreateIssueResult:
    """
    Creates a new issue.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="CreateIssue",
            parameters=params.model_dump(mode='json')
        )
        return CreateIssueResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreateIssue result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreateIssue on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    create_issue,
    name="issues_create_issue",
    title="CreateIssue",
    description="Creates a new issue.",
    params_model=CreateIssueParameters,
    result_model=CreateIssueResult
)


def delete_issue(port: int, params: DeleteIssueParameters) -> None:
    """
    Deletes the specified issue.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="DeleteIssue",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for DeleteIssue result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing DeleteIssue on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    delete_issue,
    name="issues_delete_issue",
    title="DeleteIssue",
    description="Deletes the specified issue.",
    params_model=DeleteIssueParameters,
    result_model=None
)


def detach_elements_from_issue(port: int, params: DetachElementsFromIssueParameters) -> None:
    """
    Detaches elements from the specified issue.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="DetachElementsFromIssue",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for DetachElementsFromIssue result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing DetachElementsFromIssue on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    detach_elements_from_issue,
    name="issues_detach_elements_from_issue",
    title="DetachElementsFromIssue",
    description="Detaches elements from the specified issue.",
    params_model=DetachElementsFromIssueParameters,
    result_model=None
)


def export_issues_to_bcf(port: int, params: ExportIssuesToBCFParameters) -> None:
    """
    Exports specified issues to a BCF file.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="ExportIssuesToBCF",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for ExportIssuesToBCF result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing ExportIssuesToBCF on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    export_issues_to_bcf,
    name="issues_export_issues_to_bcf",
    title="ExportIssuesToBCF",
    description="Exports specified issues to a BCF file.",
    params_model=ExportIssuesToBCFParameters,
    result_model=None
)


def get_comments_from_issue(port: int, params: GetCommentsFromIssueParameters) -> GetCommentsFromIssueResult:
    """
    Retrieves comments information from the specified issue.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetCommentsFromIssue",
            parameters=params.model_dump(mode='json')
        )
        return GetCommentsFromIssueResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetCommentsFromIssue result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetCommentsFromIssue on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_comments_from_issue,
    name="issues_get_comments_from_issue",
    title="GetCommentsFromIssue",
    description="Retrieves comments information from the specified issue.",
    params_model=GetCommentsFromIssueParameters,
    result_model=GetCommentsFromIssueResult
)


def get_elements_attached_to_issue(port: int, params: GetElementsAttachedToIssueParameters) -> GetElementsAttachedToIssueResult:
    """
    Retrieves attached elements of the specified issue, filtered by attachment type.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetElementsAttachedToIssue",
            parameters=params.model_dump(mode='json')
        )
        return GetElementsAttachedToIssueResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetElementsAttachedToIssue result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetElementsAttachedToIssue on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_elements_attached_to_issue,
    name="issues_get_elements_attached_to_issue",
    title="GetElementsAttachedToIssue",
    description="Retrieves attached elements of the specified issue, filtered by attachment type.",
    params_model=GetElementsAttachedToIssueParameters,
    result_model=GetElementsAttachedToIssueResult
)


class PaginatedGetIssuesResult(GetIssuesResult):
    """A paginated version of the GetIssuesResult."""
    issues: list[Any]
    next_page_token: str | None = None


def get_issues(port: int, page_token: str | None = None) -> PaginatedGetIssuesResult:
    """
    Retrieves information about existing issues.
        This response is paginated. If 'next_page_token' is returned, call this function
        again with that token to get the next page of results.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        cache_key = f"{port}:GetIssues"

        if not page_token:
            full_response_dict = conn_header.core.post_tapir_command(
                command="GetIssues",
                parameters={}
            )
            full_response_model = GetIssuesResult.model_validate(full_response_dict)
            PAGINATION_CACHE[cache_key] = (full_response_model, time.time())

        if cache_key not in PAGINATION_CACHE:
            raise ValueError("Pagination session expired or invalid. Please start a new request.")

        full_response_model, timestamp = PAGINATION_CACHE[cache_key]
        if time.time() - timestamp > CACHE_LIFETIME_SECONDS:
            del PAGINATION_CACHE[cache_key]
            raise ValueError("Pagination session expired. Please start a new request.")

        list_to_paginate = getattr(full_response_model, "issues")
        paginated_result = handle_paginated_request(list_to_paginate, page_token)

        response_data = full_response_model.model_dump()
        response_data["issues"] = paginated_result.items
        response_data["next_page_token"] = paginated_result.next_page_token

        return PaginatedGetIssuesResult.model_validate(response_data)

    except ValidationError as e:
        log.error(f"Validation error for GetIssues result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetIssues on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_issues,
    name="issues_get_issues",
    title="GetIssues",
    description="Retrieves information about existing issues.",
    params_model=None,
    result_model=PaginatedGetIssuesResult
)


def import_issues_from_bcf(port: int, params: ImportIssuesFromBCFParameters) -> None:
    """
    Imports issues from the specified BCF file.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="ImportIssuesFromBCF",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for ImportIssuesFromBCF result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing ImportIssuesFromBCF on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    import_issues_from_bcf,
    name="issues_import_issues_from_bcf",
    title="ImportIssuesFromBCF",
    description="Imports issues from the specified BCF file.",
    params_model=ImportIssuesFromBCFParameters,
    result_model=None
)
