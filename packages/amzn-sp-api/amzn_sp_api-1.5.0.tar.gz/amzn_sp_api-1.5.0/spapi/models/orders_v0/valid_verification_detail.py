# coding: utf-8

"""
    Selling Partner API for Orders

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ValidVerificationDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'verification_detail_type': 'str',
        'valid_verification_statuses': 'List[VerificationStatus]',
    }

    attribute_map = {
        'verification_detail_type': 'VerificationDetailType',
        'valid_verification_statuses': 'ValidVerificationStatuses',
    }

    def __init__(self, verification_detail_type=None, valid_verification_statuses=None, _configuration=None):  # noqa: E501
        """ValidVerificationDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._verification_detail_type = None
        self._valid_verification_statuses = None
        self.discriminator = None

        self.verification_detail_type = verification_detail_type
        self.valid_verification_statuses = valid_verification_statuses

    @property
    def verification_detail_type(self):
        """Gets the verification_detail_type of this ValidVerificationDetail.  # noqa: E501

        A supported type of verification detail. The type indicates which verification detail could be shared while updating the regulated order. Valid value: `prescriptionDetail`.  # noqa: E501

        :return: The verification_detail_type of this ValidVerificationDetail.  # noqa: E501
        :rtype: str
        """
        return self._verification_detail_type

    @verification_detail_type.setter
    def verification_detail_type(self, verification_detail_type):
        """Sets the verification_detail_type of this ValidVerificationDetail.

        A supported type of verification detail. The type indicates which verification detail could be shared while updating the regulated order. Valid value: `prescriptionDetail`.  # noqa: E501

        :param verification_detail_type: The verification_detail_type of this ValidVerificationDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and verification_detail_type is None:
            raise ValueError("Invalid value for `verification_detail_type`, must not be `None`")  # noqa: E501

        self._verification_detail_type = verification_detail_type

    @property
    def valid_verification_statuses(self):
        """Gets the valid_verification_statuses of this ValidVerificationDetail.  # noqa: E501

        A list of valid verification statuses where the associated verification detail type may be provided. For example, if the value of this field is [\"Approved\"], calls to provide the associated verification detail will fail for orders with a `VerificationStatus` of `Pending`, `Rejected`, `Expired`, or `Cancelled`.  # noqa: E501

        :return: The valid_verification_statuses of this ValidVerificationDetail.  # noqa: E501
        :rtype: List[VerificationStatus]
        """
        return self._valid_verification_statuses

    @valid_verification_statuses.setter
    def valid_verification_statuses(self, valid_verification_statuses):
        """Sets the valid_verification_statuses of this ValidVerificationDetail.

        A list of valid verification statuses where the associated verification detail type may be provided. For example, if the value of this field is [\"Approved\"], calls to provide the associated verification detail will fail for orders with a `VerificationStatus` of `Pending`, `Rejected`, `Expired`, or `Cancelled`.  # noqa: E501

        :param valid_verification_statuses: The valid_verification_statuses of this ValidVerificationDetail.  # noqa: E501
        :type: List[VerificationStatus]
        """
        if self._configuration.client_side_validation and valid_verification_statuses is None:
            raise ValueError("Invalid value for `valid_verification_statuses`, must not be `None`")  # noqa: E501

        self._valid_verification_statuses = valid_verification_statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValidVerificationDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidVerificationDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValidVerificationDetail):
            return True

        return self.to_dict() != other.to_dict()
