# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ItemReviewTrendPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_range': 'DateRange',
        'asin_metrics': 'ReviewTrendMetrics',
        'parent_asin_metrics': 'ReviewTrendMetrics',
        'browse_node_metrics': 'BrowseNodeTrendMetrics',
    }

    attribute_map = {
        'date_range': 'dateRange',
        'asin_metrics': 'asinMetrics',
        'parent_asin_metrics': 'parentAsinMetrics',
        'browse_node_metrics': 'browseNodeMetrics',
    }

    def __init__(self, date_range=None, asin_metrics=None, parent_asin_metrics=None, browse_node_metrics=None, _configuration=None):  # noqa: E501
        """ItemReviewTrendPoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_range = None
        self._asin_metrics = None
        self._parent_asin_metrics = None
        self._browse_node_metrics = None
        self.discriminator = None

        self.date_range = date_range
        self.asin_metrics = asin_metrics
        if parent_asin_metrics is not None:
            self.parent_asin_metrics = parent_asin_metrics
        if browse_node_metrics is not None:
            self.browse_node_metrics = browse_node_metrics

    @property
    def date_range(self):
        """Gets the date_range of this ItemReviewTrendPoint.  # noqa: E501


        :return: The date_range of this ItemReviewTrendPoint.  # noqa: E501
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this ItemReviewTrendPoint.


        :param date_range: The date_range of this ItemReviewTrendPoint.  # noqa: E501
        :type: DateRange
        """
        if self._configuration.client_side_validation and date_range is None:
            raise ValueError("Invalid value for `date_range`, must not be `None`")  # noqa: E501

        self._date_range = date_range

    @property
    def asin_metrics(self):
        """Gets the asin_metrics of this ItemReviewTrendPoint.  # noqa: E501


        :return: The asin_metrics of this ItemReviewTrendPoint.  # noqa: E501
        :rtype: ReviewTrendMetrics
        """
        return self._asin_metrics

    @asin_metrics.setter
    def asin_metrics(self, asin_metrics):
        """Sets the asin_metrics of this ItemReviewTrendPoint.


        :param asin_metrics: The asin_metrics of this ItemReviewTrendPoint.  # noqa: E501
        :type: ReviewTrendMetrics
        """
        if self._configuration.client_side_validation and asin_metrics is None:
            raise ValueError("Invalid value for `asin_metrics`, must not be `None`")  # noqa: E501

        self._asin_metrics = asin_metrics

    @property
    def parent_asin_metrics(self):
        """Gets the parent_asin_metrics of this ItemReviewTrendPoint.  # noqa: E501


        :return: The parent_asin_metrics of this ItemReviewTrendPoint.  # noqa: E501
        :rtype: ReviewTrendMetrics
        """
        return self._parent_asin_metrics

    @parent_asin_metrics.setter
    def parent_asin_metrics(self, parent_asin_metrics):
        """Sets the parent_asin_metrics of this ItemReviewTrendPoint.


        :param parent_asin_metrics: The parent_asin_metrics of this ItemReviewTrendPoint.  # noqa: E501
        :type: ReviewTrendMetrics
        """

        self._parent_asin_metrics = parent_asin_metrics

    @property
    def browse_node_metrics(self):
        """Gets the browse_node_metrics of this ItemReviewTrendPoint.  # noqa: E501


        :return: The browse_node_metrics of this ItemReviewTrendPoint.  # noqa: E501
        :rtype: BrowseNodeTrendMetrics
        """
        return self._browse_node_metrics

    @browse_node_metrics.setter
    def browse_node_metrics(self, browse_node_metrics):
        """Sets the browse_node_metrics of this ItemReviewTrendPoint.


        :param browse_node_metrics: The browse_node_metrics of this ItemReviewTrendPoint.  # noqa: E501
        :type: BrowseNodeTrendMetrics
        """

        self._browse_node_metrics = browse_node_metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemReviewTrendPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemReviewTrendPoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemReviewTrendPoint):
            return True

        return self.to_dict() != other.to_dict()
