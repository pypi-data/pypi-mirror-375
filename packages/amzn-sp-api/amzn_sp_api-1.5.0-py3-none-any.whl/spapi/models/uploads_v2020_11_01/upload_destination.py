# coding: utf-8

"""
    Selling Partner API for Uploads

    The Uploads API lets you upload files that you can programmatically access using other Selling Partner APIs, such as the A+ Content API and the Messaging API.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class UploadDestination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_destination_id': 'str',
        'url': 'str',
        'headers': 'object',
    }

    attribute_map = {
        'upload_destination_id': 'uploadDestinationId',
        'url': 'url',
        'headers': 'headers',
    }

    def __init__(self, upload_destination_id=None, url=None, headers=None, _configuration=None):  # noqa: E501
        """UploadDestination - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._upload_destination_id = None
        self._url = None
        self._headers = None
        self.discriminator = None

        if upload_destination_id is not None:
            self.upload_destination_id = upload_destination_id
        if url is not None:
            self.url = url
        if headers is not None:
            self.headers = headers

    @property
    def upload_destination_id(self):
        """Gets the upload_destination_id of this UploadDestination.  # noqa: E501

        The unique identifier for the upload destination.  # noqa: E501

        :return: The upload_destination_id of this UploadDestination.  # noqa: E501
        :rtype: str
        """
        return self._upload_destination_id

    @upload_destination_id.setter
    def upload_destination_id(self, upload_destination_id):
        """Sets the upload_destination_id of this UploadDestination.

        The unique identifier for the upload destination.  # noqa: E501

        :param upload_destination_id: The upload_destination_id of this UploadDestination.  # noqa: E501
        :type: str
        """

        self._upload_destination_id = upload_destination_id

    @property
    def url(self):
        """Gets the url of this UploadDestination.  # noqa: E501

        The URL for the upload destination.  # noqa: E501

        :return: The url of this UploadDestination.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UploadDestination.

        The URL for the upload destination.  # noqa: E501

        :param url: The url of this UploadDestination.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def headers(self):
        """Gets the headers of this UploadDestination.  # noqa: E501

        The headers to include in the upload request.  # noqa: E501

        :return: The headers of this UploadDestination.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this UploadDestination.

        The headers to include in the upload request.  # noqa: E501

        :param headers: The headers of this UploadDestination.  # noqa: E501
        :type: object
        """

        self._headers = headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadDestination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadDestination):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UploadDestination):
            return True

        return self.to_dict() != other.to_dict()
