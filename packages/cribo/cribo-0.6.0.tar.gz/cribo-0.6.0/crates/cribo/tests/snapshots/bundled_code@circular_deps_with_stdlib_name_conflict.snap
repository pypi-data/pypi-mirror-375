---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/circular_deps_with_stdlib_name_conflict/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
pkg = _cribo.types.SimpleNamespace(__name__='pkg', __initializing__=False, __initialized__=False, __path__=[])
pkg_abc = _cribo.types.SimpleNamespace(__name__='pkg.abc', __initializing__=False, __initialized__=False)
pkg.abc = pkg_abc
pkg_color = _cribo.types.SimpleNamespace(__name__='pkg.color', __initializing__=False, __initialized__=False)
pkg.color = pkg_color
pkg_console = _cribo.types.SimpleNamespace(__name__='pkg.console', __initializing__=False, __initialized__=False)
pkg.console = pkg_console
pkg_pretty = _cribo.types.SimpleNamespace(__name__='pkg.pretty', __initializing__=False, __initialized__=False)
pkg.pretty = pkg_pretty
pkg_style = _cribo.types.SimpleNamespace(__name__='pkg.style', __initializing__=False, __initialized__=False)
pkg.style = pkg_style
def _cribo_init___cribo_6b1af6_pkg(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_abc, pkg_console, pkg_pretty
    """Package with circular dependencies and stdlib-conflicting module names."""
    pkg_console = _cribo_init___cribo_f0224b_pkg_console(pkg_console)
    Console = pkg_console.Console
    self.Console = Console
    self.Console = Console
    pkg_pretty = _cribo_init___cribo_2353ad_pkg_pretty(pkg_pretty)
    PrettyPrinter = pkg_pretty.PrettyPrinter
    self.PrettyPrinter = PrettyPrinter
    self.PrettyPrinter = PrettyPrinter
    pkg_abc = _cribo_init___cribo_5f60be_pkg_abc(pkg_abc)
    RichRenderable = pkg_abc.RichRenderable
    self.RichRenderable = RichRenderable
    self.RichRenderable = RichRenderable
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg.__init__ = _cribo_init___cribo_6b1af6_pkg
def _cribo_init___cribo_5f60be_pkg_abc(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_console
    """Module with stdlib-conflicting name that imports from stdlib abc."""
    ABC = _cribo.abc.ABC
    self.ABC = ABC
    abstractmethod = _cribo.abc.abstractmethod
    self.abstractmethod = abstractmethod

    class RichRenderable(_cribo.abc.ABC):
        """Abstract base class for renderables."""

        @_cribo.abc.abstractmethod
        def render(self, console):
            """Render this object to the console."""
            pass

        @classmethod
        def __subclasshook__(cls, other):
            """Check if a class implements the render protocol."""
            return hasattr(other, "render")
    RichRenderable.__module__ = 'pkg.abc'
    self.RichRenderable = RichRenderable
    pkg_console = _cribo_init___cribo_f0224b_pkg_console(pkg_console)
    ConsoleBase = pkg.console.ConsoleBase
    self.ConsoleBase = ConsoleBase
    self.ConsoleBase = ConsoleBase

    class RenderableWithConsole(RichRenderable):
        """A renderable that needs a console reference."""

        def __init__(self, console: ConsoleBase):
            self.console = console

        def render(self, console):
            return f"Rendering with {console}"
    RenderableWithConsole.__module__ = 'pkg.abc'
    self.RenderableWithConsole = RenderableWithConsole
    self.ABC = _cribo.abc.ABC
    self.abstractmethod = _cribo.abc.abstractmethod
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_abc.__init__ = _cribo_init___cribo_5f60be_pkg_abc
def _cribo_init___cribo_02808e_pkg_color(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_console, pkg_style
    """Color module that participates in circular dependencies."""
    typing = _cribo.typing
    self.typing = typing
    self.typing = typing
    Optional = _cribo.typing.Optional
    self.Optional = Optional
    Tuple = _cribo.typing.Tuple
    self.Tuple = Tuple

    class Color:
        """Color representation for console output."""

        def __init__(self, r: int=0, g: int=0, b: int=0):
            self.r = r
            self.g = g
            self.b = b

        def to_rgb(self) -> _cribo.typing.Tuple[int, int, int]:
            """Convert to RGB tuple."""
            return self.r, self.g, self.b

        def to_hex(self) -> str:
            """Convert to hex string."""
            return f"#{self.r:02x}{self.g:02x}{self.b:02x}"
    Color.__module__ = 'pkg.color'
    self.Color = Color

    def color_from_style(style) -> "Color":
        """Create a color from a style."""
        global pkg_style
        pkg_style = _cribo_init___cribo_4c91ba_pkg_style(pkg_style)
        Style = pkg.style.Style
        if style.color == "red":
            return Color(255, 0, 0)
        elif style.color == "green":
            return Color(0, 255, 0)
        elif style.color == "blue":
            return Color(0, 0, 255)
        return Color()
    self.color_from_style = color_from_style

    def apply_color_to_console(console, color: Color) -> None:
        """Apply color to console."""
        global pkg_console
        pkg_console = _cribo_init___cribo_f0224b_pkg_console(pkg_console)
        ConsoleBase = pkg.console.ConsoleBase
        pass
    self.apply_color_to_console = apply_color_to_console
    self.Optional = _cribo.typing.Optional
    self.Tuple = _cribo.typing.Tuple
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_color.__init__ = _cribo_init___cribo_02808e_pkg_color
def _cribo_init___cribo_f0224b_pkg_console(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_abc, pkg_color, pkg_pretty, pkg_style
    """Console module that has circular dependencies with abc and pretty."""
    sys = _cribo.sys
    self.sys = sys
    self.sys = sys
    Any = _cribo.typing.Any
    self.Any = Any
    Optional = _cribo.typing.Optional
    self.Optional = Optional

    class ConsoleBase:
        """Base console class for type checking."""
        pass
    ConsoleBase.__module__ = 'pkg.console'
    self.ConsoleBase = ConsoleBase
    pkg_abc = _cribo_init___cribo_5f60be_pkg_abc(pkg_abc)
    RichRenderable = pkg.abc.RichRenderable
    self.RichRenderable = RichRenderable
    self.RichRenderable = RichRenderable
    pkg_style = _cribo_init___cribo_4c91ba_pkg_style(pkg_style)
    Style = pkg.style.Style
    self.Style = Style
    self.Style = Style
    pkg_color = _cribo_init___cribo_02808e_pkg_color(pkg_color)
    Color = pkg.color.Color
    self.Color = Color
    self.Color = Color

    class Console(ConsoleBase):
        """Main console class with complex dependencies."""

        def __init__(self, force_terminal: _cribo.typing.Optional[bool]=None):
            self.force_terminal = force_terminal
            self._style = Style()
            self._color = Color()

        def print(self, *objects: _cribo.typing.Any, **kwargs) -> None:
            """Print objects to console."""
            for obj in objects:
                if isinstance(obj, RichRenderable):
                    output = obj.render(self)
                else:
                    output = str(obj)
                print(output, **kwargs)

        def is_renderable(self, obj: _cribo.typing.Any) -> bool:
            """Check if object is renderable."""
            return isinstance(obj, RichRenderable)
    Console.__module__ = 'pkg.console'
    self.Console = Console
    pkg_pretty = _cribo_init___cribo_2353ad_pkg_pretty(pkg_pretty)
    format_pretty = pkg.pretty.format_pretty
    self.format_pretty = format_pretty
    self.format_pretty = format_pretty

    def format_with_pretty(console: Console, obj: _cribo.typing.Any) -> str:
        """Format object using pretty printer."""
        return format_pretty(obj, console)
    self.format_with_pretty = format_with_pretty
    self.Any = _cribo.typing.Any
    self.Optional = _cribo.typing.Optional
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_console.__init__ = _cribo_init___cribo_f0224b_pkg_console
def _cribo_init___cribo_2353ad_pkg_pretty(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_abc, pkg_console
    """Pretty printing module with circular dependency on console."""
    Any = _cribo.typing.Any
    self.Any = Any
    pkg_abc = _cribo_init___cribo_5f60be_pkg_abc(pkg_abc)
    RichRenderable = pkg.abc.RichRenderable
    self.RichRenderable = RichRenderable
    self.RichRenderable = RichRenderable
    pkg_console = _cribo_init___cribo_f0224b_pkg_console(pkg_console)
    Console = pkg.console.Console
    self.Console = Console
    self.Console = Console

    class PrettyPrinter(RichRenderable):
        """Pretty printer that implements RichRenderable."""

        def __init__(self):
            self._indent = 2

        def render(self, console: Console) -> str:
            """Render for console output."""
            return f"PrettyPrinter(indent={self._indent})"

        def pretty_print(self, obj: _cribo.typing.Any) -> None:
            """Pretty print an object."""
            console = Console()
            formatted = format_pretty(obj, console)
            print(formatted)
    PrettyPrinter.__module__ = 'pkg.pretty'
    self.PrettyPrinter = PrettyPrinter

    def format_pretty(obj: _cribo.typing.Any, console: Console) -> str:
        """Format object for pretty printing."""
        if console.is_renderable(obj):
            return f"<Renderable: {obj}>"
        return repr(obj)
    self.format_pretty = format_pretty
    self.Any = _cribo.typing.Any
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_pretty.__init__ = _cribo_init___cribo_2353ad_pkg_pretty
def _cribo_init___cribo_4c91ba_pkg_style(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_color, pkg_console
    """Style module that participates in circular dependencies."""
    Optional = _cribo.typing.Optional
    self.Optional = Optional
    pkg_color = _cribo_init___cribo_02808e_pkg_color(pkg_color)
    Color = pkg.color.Color
    self.Color = Color
    self.Color = Color

    class Style:
        """Style configuration for console output."""

        def __init__(self, color: _cribo.typing.Optional[str]=None):
            self.color = color or "default"
            self._color_obj = Color()

        def apply(self, text: str) -> str:
            """Apply style to text."""
            return f"[{self.color}]{text}[/{self.color}]"

        def get_color(self) -> Color:
            """Get associated color object."""
            return self._color_obj
    Style.__module__ = 'pkg.style'
    self.Style = Style

    def apply_style_to_console(console, style: Style) -> None:
        """Apply a style to console output."""
        global pkg_console
        pkg_console = _cribo_init___cribo_f0224b_pkg_console(pkg_console)
        ConsoleBase = pkg.console.ConsoleBase
        pass
    self.apply_style_to_console = apply_style_to_console
    self.Optional = _cribo.typing.Optional
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_style.__init__ = _cribo_init___cribo_4c91ba_pkg_style
"""Test circular dependencies with stdlib-conflicting module names.\n\nThis fixture tests the bundler's ability to handle:\n1. A local module named 'abc' that conflicts with stdlib 'abc'\n2. Circular dependencies that require wrapper functions\n3. Proper stdlib normalization when hard dependencies are involved\n4. Ensuring no incorrect imports are generated for stdlib or bundled modules\n"""
__cribo_init_result = _cribo_init___cribo_6b1af6_pkg(pkg)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(pkg, attr, getattr(__cribo_init_result, attr))
pkg_console = _cribo_init___cribo_f0224b_pkg_console(pkg_console)
Console = pkg.console.Console
__cribo_init_result = _cribo_init___cribo_6b1af6_pkg(pkg)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(pkg, attr, getattr(__cribo_init_result, attr))
pkg_pretty = _cribo_init___cribo_2353ad_pkg_pretty(pkg_pretty)
PrettyPrinter = pkg.pretty.PrettyPrinter
console = Console()
console.print("Hello from main!")
pp = PrettyPrinter()
pp.pretty_print({"test": "data"})
__cribo_init_result = _cribo_init___cribo_6b1af6_pkg(pkg)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(pkg, attr, getattr(__cribo_init_result, attr))
pkg_abc = _cribo_init___cribo_5f60be_pkg_abc(pkg_abc)
RichRenderable = pkg.abc.RichRenderable
print(f"RichRenderable class: {RichRenderable.__module__}.{RichRenderable.__name__}")
abc = pkg.abc
pretty = pkg.pretty
color = pkg.color
style = pkg.style
