# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetFeaturedOfferExpectedPriceBatchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'responses': 'List[FeaturedOfferExpectedPriceResponse]',
    }

    attribute_map = {
        'responses': 'responses',
    }

    def __init__(self, responses=None, _configuration=None):  # noqa: E501
        """GetFeaturedOfferExpectedPriceBatchResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._responses = None
        self.discriminator = None

        if responses is not None:
            self.responses = responses

    @property
    def responses(self):
        """Gets the responses of this GetFeaturedOfferExpectedPriceBatchResponse.  # noqa: E501

        A batched list of FOEP responses.  # noqa: E501

        :return: The responses of this GetFeaturedOfferExpectedPriceBatchResponse.  # noqa: E501
        :rtype: List[FeaturedOfferExpectedPriceResponse]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this GetFeaturedOfferExpectedPriceBatchResponse.

        A batched list of FOEP responses.  # noqa: E501

        :param responses: The responses of this GetFeaturedOfferExpectedPriceBatchResponse.  # noqa: E501
        :type: List[FeaturedOfferExpectedPriceResponse]
        """
        if (self._configuration.client_side_validation and
                responses is not None and len(responses) < 1):
            raise ValueError("Invalid value for `responses`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._responses = responses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFeaturedOfferExpectedPriceBatchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFeaturedOfferExpectedPriceBatchResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetFeaturedOfferExpectedPriceBatchResponse):
            return True

        return self.to_dict() != other.to_dict()
