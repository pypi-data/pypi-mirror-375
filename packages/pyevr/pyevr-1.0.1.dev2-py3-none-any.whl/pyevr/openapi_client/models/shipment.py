# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.certificate_claim import CertificateClaim
from pyevr.openapi_client.models.holding_base import HoldingBase
from pyevr.openapi_client.models.shipment_item import ShipmentItem
from pyevr.openapi_client.models.source import Source


class Shipment(BaseModel):
    """
    Shipment
    """  # noqa: E501

    holding_base: HoldingBase = Field(alias="holdingBase")
    source: Source
    items: Annotated[List[ShipmentItem], Field(max_length=25)] = Field(
        description="Saadetis"
    )
    certificate_claims: Optional[
        Annotated[List[CertificateClaim], Field(max_length=25)]
    ] = Field(
        default=None,
        description="Tarneahela sertifikaadi väited",
        alias="certificateClaims",
    )
    user_custom_data: Optional[Any] = Field(
        default=None,
        description="Api kasutaja poolt kohandatavad andmed",
        alias="userCustomData",
    )
    supply_contract_number: Optional[
        Annotated[str, Field(strict=True, max_length=50)]
    ] = Field(
        default=None, description="Tarnelepingu number", alias="supplyContractNumber"
    )
    __properties: ClassVar[List[str]] = [
        "holdingBase",
        "source",
        "items",
        "certificateClaims",
        "userCustomData",
        "supplyContractNumber",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Shipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of holding_base
        if self.holding_base:
            _dict["holdingBase"] = self.holding_base.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict["source"] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict["items"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in certificate_claims (list)
        _items = []
        if self.certificate_claims:
            for _item_certificate_claims in self.certificate_claims:
                if _item_certificate_claims:
                    _items.append(_item_certificate_claims.to_dict())
            _dict["certificateClaims"] = _items
        # set to None if certificate_claims (nullable) is None
        # and model_fields_set contains the field
        if (
            self.certificate_claims is None
            and "certificate_claims" in self.model_fields_set
        ):
            _dict["certificateClaims"] = None

        # set to None if user_custom_data (nullable) is None
        # and model_fields_set contains the field
        if (
            self.user_custom_data is None
            and "user_custom_data" in self.model_fields_set
        ):
            _dict["userCustomData"] = None

        # set to None if supply_contract_number (nullable) is None
        # and model_fields_set contains the field
        if (
            self.supply_contract_number is None
            and "supply_contract_number" in self.model_fields_set
        ):
            _dict["supplyContractNumber"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Shipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "holdingBase": HoldingBase.from_dict(obj["holdingBase"])
                if obj.get("holdingBase") is not None
                else None,
                "source": Source.from_dict(obj["source"])
                if obj.get("source") is not None
                else None,
                "items": [ShipmentItem.from_dict(_item) for _item in obj["items"]]
                if obj.get("items") is not None
                else None,
                "certificateClaims": [
                    CertificateClaim.from_dict(_item)
                    for _item in obj["certificateClaims"]
                ]
                if obj.get("certificateClaims") is not None
                else None,
                "userCustomData": obj.get("userCustomData"),
                "supplyContractNumber": obj.get("supplyContractNumber"),
            }
        )
        return _obj
