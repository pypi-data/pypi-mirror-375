name: Release
on:
  push:
    branches:
      - main

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install "setuptools<81" pip-audit liccheck

      - name: Install project dependencies
        run: pip install "boto3>=1.34.0" "click>=8.1.0"

      - name: Run pip-audit
        run: pip-audit --format=json --output=pip-audit-report.json .

      - name: Generate requirements.txt for liccheck
        run: pip freeze > requirements.txt

      - name: Run liccheck
        run: liccheck

      - name: Upload pip-audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit-report
          path: pip-audit-report.json

  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git

      - name: Get Version
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(npx semantic-release --dry-run  | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          if [ -n "$version" ]; then
            echo "new_release_version=$version" >> $GITHUB_OUTPUT
            echo "Version to be released: $version"
          else
            echo "No new version to be released"
            exit 0
          fi

      - name: Create Release
        if: steps.semantic.outputs.new_release_version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release 

      - name: Build package
        if: steps.semantic.outputs.new_release_version != ''
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.semantic.outputs.new_release_version }}
        run: python -m build

      - name: Publish to PyPI
        if: steps.semantic.outputs.new_release_version != ''
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*
