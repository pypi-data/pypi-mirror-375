# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/metric/dimension.proto, unacast/v2/metric/lens.proto, unacast/v2/metric/metric.proto, unacast/v2/metric/metric_group.proto, unacast/v2/metric/metric_report.proto, unacast/v2/metric/metric_service.proto, unacast/v2/metric/metric_value.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import unatype as __unatype__
from .. import (
    maps as _maps__,
    subscription as _subscription__,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class Cadence(betterproto.Enum):
    UNSPECIFIED = 0
    DAILY = 1
    WEEKLY = 2
    WEEKLY_MON_SUN = 7
    WEEKLY_TUE_MON = 8
    MONTHLY = 3
    QUARTERLY = 4
    YEARLY = 5
    TRIMONTHLY = 6


class ValueKind(betterproto.Enum):
    KIND_UNSPECIFIED = 0
    NUMBER = 1
    COUNT = 2
    CATEGORY = 3


class LifecycleStage(betterproto.Enum):
    UNSPECIFIED = 0
    PROTOTYPE = 3
    """Metric under construction"""

    RELEASE_CANDIDATE = 6
    """Metric has data and is available to experimental users"""

    STABLE = 9
    """Metric is part of core offering and widely available"""

    DEPRECATED = 12
    """Metric data production has stopped"""

    ARCHIVED = 15
    """Metric is no longer available to query or subscribe to"""

    DELETED = 18
    """Metric data has been irreversably been deleted"""


class ColumnKind(betterproto.Enum):
    VALUE = 0
    DISPLAY_NAME = 1
    GEOMETRY = 2


@dataclass(eq=False, repr=False)
class Dimension(betterproto.Message):
    name: str = betterproto.string_field(4)
    dimension_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(5)
    description: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class DimensionValue(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"dimension_id"`
    """

    value: str = betterproto.string_field(2)
    """
    @exclude
     @inject_tag: `bigquery:"value"`
    """

    display_name: str = betterproto.string_field(3)
    """
    @exclude
     @inject_tag: `bigquery:"display_name"`
    """


@dataclass(eq=False, repr=False)
class DimensionFilter(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    values: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MapFeatureRef(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"layer_id"`
    """

    feature_id: str = betterproto.string_field(3)
    """
    @exclude
     @inject_tag: `bigquery:"feature_id"`
    """


@dataclass(eq=False, repr=False)
class MetricValue(betterproto.Message):
    """
    @exclude
     TODO: This seem to only be used by BYO apis. Should die with it.
    """

    metric_id: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"metric_id"`
    """

    observation_period: "Period" = betterproto.message_field(3)
    """
    @exclude
     @inject_tag: `bigquery:"observation_period"`
    """

    map_feature_v2: "_maps__.Feature" = betterproto.message_field(9)
    """
    @exclude
     @inject_tag: `bigquery:"map_feature"`
    """

    related_map_feature: "_maps__.Feature" = betterproto.message_field(5)
    """
    @exclude
     @inject_tag: `bigquery:"related_map_feature"`
    """

    dimensions: List["DimensionValue"] = betterproto.message_field(6)
    """
    @exclude
     @inject_tag: `bigquery:"dimensions"`
    """

    supporting_values: List["MetricValueValue"] = betterproto.message_field(7)
    """
    @exclude
     @inject_tag: `bigquery:"supporting_values"`
    """

    value: "MetricValueValue" = betterproto.message_field(2)
    values: List["MetricValueValue"] = betterproto.message_field(10)
    """All values for this metric"""


@dataclass(eq=False, repr=False)
class MetricValueValue(betterproto.Message):
    name: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"name"`
    """

    unit: str = betterproto.string_field(2)
    """
    @exclude
     @inject_tag: `bigquery:"unit"`
    """

    number: float = betterproto.float_field(9, group="value")
    """
    @exclude
     @inject_tag: `bigquery:"number" json:"number"`
    """

    count: int = betterproto.int64_field(10, group="value")
    """
    @exclude
     @inject_tag: `bigquery:"count" json:"count"`
    """

    category: str = betterproto.string_field(11, group="value")
    """
    @exclude
     @inject_tag: `bigquery:"category"`
    """


@dataclass(eq=False, repr=False)
class Period(betterproto.Message):
    start: "__unatype__.Date" = betterproto.message_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"start_date"`
    """

    end: "__unatype__.Date" = betterproto.message_field(2)
    """
    @exclude
     @inject_tag: `bigquery:"end_date"`
    """


@dataclass(eq=False, repr=False)
class MetricReport(betterproto.Message):
    """is Deprecated: Read this value from MetricVersion instead"""

    observation_period: "Period" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Lens(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    metric_id: str = betterproto.string_field(3)
    billing_account_id: str = betterproto.string_field(4)
    creator_email: str = betterproto.string_field(5)
    lens_filters: "LensFilters" = betterproto.message_field(6)
    display_name: str = betterproto.string_field(10)
    description: str = betterproto.string_field(11)
    update_time_string: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class LensFilters(betterproto.Message):
    period_filters: List["Period"] = betterproto.message_field(1)
    dimension_filters: List["DimensionFilter"] = betterproto.message_field(2)
    address_component_filters: List["_maps__.AddressComponentFilter"] = (
        betterproto.message_field(3)
    )
    related_address_component_filters: List["_maps__.AddressComponentFilter"] = (
        betterproto.message_field(5)
    )
    feature_filters: List[str] = betterproto.string_field(4)
    related_feature_filters: List[str] = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class Metric(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    spec: "MetricSpec" = betterproto.message_field(6)
    """
    @exclude
     @inject_tag: `sql:"type:jsonb" `
    """

    metric_versions: List["MetricVersion"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class MetricVersion(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    description: str = betterproto.string_field(4)
    lifecycle_stage: "LifecycleStage" = betterproto.enum_field(9)
    """Should not expose a number"""

    version_spec: "VersionSpec" = betterproto.message_field(18)
    """
    @exclude
     @inject_tag: `sql:"type:jsonb"
    """

    spec: "MetricVersionSpec" = betterproto.message_field(5)
    """
    @exclude
     @inject_tag: `sql:"type:jsonb" `
    """

    layer_id: str = betterproto.string_field(6)
    layer: "_maps__.Layer" = betterproto.message_field(8)
    related_layer_id: str = betterproto.string_field(12)
    related_layer: "_maps__.Layer" = betterproto.message_field(13)
    """
    @exclude
     @inject_tag: `gorm:"foreignKey:RelatedLayerId;references:Id"`
    """

    dimensions: List["Dimension"] = betterproto.message_field(7)
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    listing: str = betterproto.string_field(11)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(22)
    observation_period: "Period" = betterproto.message_field(23)
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    report: "MetricReport" = betterproto.message_field(14)
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    your_subscription: "_subscription__.SubscriptionStatus" = betterproto.message_field(
        15
    )
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    your_lens: "Lens" = betterproto.message_field(17)
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    index_update_time: str = betterproto.string_field(20)


@dataclass(eq=False, repr=False)
class MetricSpec(betterproto.Message):
    tags: List["TagSpec"] = betterproto.message_field(8)
    groups: List[str] = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class TagSpec(betterproto.Message):
    type: str = betterproto.string_field(1)
    values: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MetricVersionSpec(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    related_layer_id: str = betterproto.string_field(2)
    relation_type: str = betterproto.string_field(10)
    layer_relationship_name: str = betterproto.string_field(13)
    related_layer_relationship_name: str = betterproto.string_field(14)
    cadence: "Cadence" = betterproto.enum_field(4)
    dimensions: List["DimensionSpec"] = betterproto.message_field(5)
    values: List["ValueSpec"] = betterproto.message_field(7)
    value_kind: "ValueKind" = betterproto.enum_field(3)
    unit: str = betterproto.string_field(6)
    group_memberships: List["GroupMemberSpec"] = betterproto.message_field(8)
    processing_cadence: "Cadence" = betterproto.enum_field(9)


@dataclass(eq=False, repr=False)
class GroupMemberSpec(betterproto.Message):
    key: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class VersionSpec(betterproto.Message):
    version: str = betterproto.string_field(1)
    release_notes: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DimensionSpec(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    default_value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ValueSpec(betterproto.Message):
    name: str = betterproto.string_field(1)
    value_kind: "ValueKind" = betterproto.enum_field(2)
    unit: str = betterproto.string_field(3)
    display_name: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    supporting_value: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class Value(betterproto.Message):
    name: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"name"`
    """

    value: str = betterproto.string_field(2)
    """
    @exclude
     @inject_tag: `bigquery:"value"`
    """


@dataclass(eq=False, repr=False)
class LeanMetricVersion(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    description: str = betterproto.string_field(4)
    lifecycle_stage: "LifecycleStage" = betterproto.enum_field(9)
    """Should not expose a number"""

    version_spec: "VersionSpec" = betterproto.message_field(18)
    """
    @exclude
     @inject_tag: `sql:"type:jsonb"
    """

    listing: str = betterproto.string_field(11)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(20)
    your_subscription: "_subscription__.SubscriptionStatus" = betterproto.message_field(
        15
    )
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    spec: "LeanMetricVersionSpec" = betterproto.message_field(19)


@dataclass(eq=False, repr=False)
class LeanMetricVersionSpec(betterproto.Message):
    cadence: "Cadence" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class LeanMetric(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    spec: "MetricSpec" = betterproto.message_field(6)
    """
    @exclude
     @inject_tag: `sql:"type:jsonb" `
    """

    metric_versions: List["LeanMetricVersion"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class DataSchema(betterproto.Message):
    observation_start_column: "Column" = betterproto.message_field(1)
    observation_end_column: "Column" = betterproto.message_field(2)
    feature_columns: List["Column"] = betterproto.message_field(3)
    related_feature_columns: List["Column"] = betterproto.message_field(4)
    address_component_columns: List["Column"] = betterproto.message_field(5)
    related_address_component_columns: List["Column"] = betterproto.message_field(6)
    dimension_columns: List["Column"] = betterproto.message_field(7)
    values_columns: List["Column"] = betterproto.message_field(8)
    column_order: List[str] = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class Column(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: "ColumnKind" = betterproto.enum_field(2)
    default_name: str = betterproto.string_field(3)
    user_friendly_name: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    format: str = betterproto.string_field(6)
    is_included: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class DataColumn(betterproto.Message):
    """TODO: Let this replace DataSchema & Column in public use"""

    name: str = betterproto.string_field(1)
    description: str = betterproto.string_field(3)
    """
    @exclude string display_name = 2; // Maybe needed in the future? Current use cases only needs default_column_name and description
    """

    default_column_name: str = betterproto.string_field(4)
    format: str = betterproto.string_field(6)
    """
    @exclude string column_group = 5; // Something to group columns by? Feature, RelatedFeature, Dimension, MetricValue, etc? Use first part of id as default?
    """

    included_by_default: bool = betterproto.bool_field(7)
    requires_specific_resource: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class MetricGroup(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)
    key: str = betterproto.string_field(3)
    key_display_name: str = betterproto.string_field(4)
    possible_values: "PossibleValues" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PossibleValues(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdateMetricRequest(betterproto.Message):
    metric: "Metric" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )
    billing_context: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetDefaultDataSchemaRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)
    billing_account_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetDefaultDataSchemaResponse(betterproto.Message):
    data_schema: "DataSchema" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetAvailableDataColumnsRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)
    billing_account_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetAvailableDataColumnsResponse(betterproto.Message):
    available_columns: List["DataColumn"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetMetricGroupsRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetMetricGroupsResponse(betterproto.Message):
    groups: List["MetricGroup"] = betterproto.message_field(1)


class MetricServiceStub(betterproto.ServiceStub):
    async def update_metric(
        self,
        update_metric_request: "UpdateMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Metric":
        return await self._unary_unary(
            "/unacast.v2.metric.MetricService/UpdateMetric",
            update_metric_request,
            Metric,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_default_data_schema(
        self,
        get_default_data_schema_request: "GetDefaultDataSchemaRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDefaultDataSchemaResponse":
        return await self._unary_unary(
            "/unacast.v2.metric.MetricService/GetDefaultDataSchema",
            get_default_data_schema_request,
            GetDefaultDataSchemaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_data_columns(
        self,
        get_available_data_columns_request: "GetAvailableDataColumnsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAvailableDataColumnsResponse":
        return await self._unary_unary(
            "/unacast.v2.metric.MetricService/GetAvailableDataColumns",
            get_available_data_columns_request,
            GetAvailableDataColumnsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_metric_groups(
        self,
        get_metric_groups_request: "GetMetricGroupsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMetricGroupsResponse":
        return await self._unary_unary(
            "/unacast.v2.metric.MetricService/GetMetricGroups",
            get_metric_groups_request,
            GetMetricGroupsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MetricServiceBase(ServiceBase):

    async def update_metric(
        self, update_metric_request: "UpdateMetricRequest"
    ) -> "Metric":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_default_data_schema(
        self, get_default_data_schema_request: "GetDefaultDataSchemaRequest"
    ) -> "GetDefaultDataSchemaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_data_columns(
        self, get_available_data_columns_request: "GetAvailableDataColumnsRequest"
    ) -> "GetAvailableDataColumnsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_metric_groups(
        self, get_metric_groups_request: "GetMetricGroupsRequest"
    ) -> "GetMetricGroupsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_metric(
        self, stream: "grpclib.server.Stream[UpdateMetricRequest, Metric]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_metric(request)
        await stream.send_message(response)

    async def __rpc_get_default_data_schema(
        self,
        stream: "grpclib.server.Stream[GetDefaultDataSchemaRequest, GetDefaultDataSchemaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_default_data_schema(request)
        await stream.send_message(response)

    async def __rpc_get_available_data_columns(
        self,
        stream: "grpclib.server.Stream[GetAvailableDataColumnsRequest, GetAvailableDataColumnsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_data_columns(request)
        await stream.send_message(response)

    async def __rpc_get_metric_groups(
        self,
        stream: "grpclib.server.Stream[GetMetricGroupsRequest, GetMetricGroupsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_metric_groups(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.metric.MetricService/UpdateMetric": grpclib.const.Handler(
                self.__rpc_update_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateMetricRequest,
                Metric,
            ),
            "/unacast.v2.metric.MetricService/GetDefaultDataSchema": grpclib.const.Handler(
                self.__rpc_get_default_data_schema,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDefaultDataSchemaRequest,
                GetDefaultDataSchemaResponse,
            ),
            "/unacast.v2.metric.MetricService/GetAvailableDataColumns": grpclib.const.Handler(
                self.__rpc_get_available_data_columns,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAvailableDataColumnsRequest,
                GetAvailableDataColumnsResponse,
            ),
            "/unacast.v2.metric.MetricService/GetMetricGroups": grpclib.const.Handler(
                self.__rpc_get_metric_groups,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMetricGroupsRequest,
                GetMetricGroupsResponse,
            ),
        }
