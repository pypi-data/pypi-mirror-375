# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Recurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'datetime',
        'days_of_week': 'List[DayOfWeek]',
        'days_of_month': 'List[int]',
    }

    attribute_map = {
        'end_time': 'endTime',
        'days_of_week': 'daysOfWeek',
        'days_of_month': 'daysOfMonth',
    }

    def __init__(self, end_time=None, days_of_week=None, days_of_month=None, _configuration=None):  # noqa: E501
        """Recurrence - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._end_time = None
        self._days_of_week = None
        self._days_of_month = None
        self.discriminator = None

        self.end_time = end_time
        if days_of_week is not None:
            self.days_of_week = days_of_week
        if days_of_month is not None:
            self.days_of_month = days_of_month

    @property
    def end_time(self):
        """Gets the end_time of this Recurrence.  # noqa: E501

        End time of the recurrence.  # noqa: E501

        :return: The end_time of this Recurrence.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Recurrence.

        End time of the recurrence.  # noqa: E501

        :param end_time: The end_time of this Recurrence.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def days_of_week(self):
        """Gets the days_of_week of this Recurrence.  # noqa: E501

        Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain `MONDAY` in the list.  # noqa: E501

        :return: The days_of_week of this Recurrence.  # noqa: E501
        :rtype: List[DayOfWeek]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this Recurrence.

        Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain `MONDAY` in the list.  # noqa: E501

        :param days_of_week: The days_of_week of this Recurrence.  # noqa: E501
        :type: List[DayOfWeek]
        """

        self._days_of_week = days_of_week

    @property
    def days_of_month(self):
        """Gets the days_of_month of this Recurrence.  # noqa: E501

        Days of the month when recurrence is valid.  # noqa: E501

        :return: The days_of_month of this Recurrence.  # noqa: E501
        :rtype: List[int]
        """
        return self._days_of_month

    @days_of_month.setter
    def days_of_month(self, days_of_month):
        """Sets the days_of_month of this Recurrence.

        Days of the month when recurrence is valid.  # noqa: E501

        :param days_of_month: The days_of_month of this Recurrence.  # noqa: E501
        :type: List[int]
        """

        self._days_of_month = days_of_month

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recurrence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Recurrence):
            return True

        return self.to_dict() != other.to_dict()
