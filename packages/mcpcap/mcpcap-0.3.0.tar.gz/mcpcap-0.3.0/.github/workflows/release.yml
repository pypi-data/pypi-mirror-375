name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases
      id-token: write  # Required for PyPI trusted publishing
      
    steps:
    - uses: actions/checkout@v4
      with:
        # Fetch full history for setuptools-scm to work properly
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools-scm[toml]

    - name: Verify version matches tag
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        # Get version from setuptools-scm
        DETECTED_VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
        echo "Tag version: $TAG_VERSION"
        echo "Detected version: $DETECTED_VERSION"
        # Verify they match
        if [ "$TAG_VERSION" != "$DETECTED_VERSION" ]; then
          echo "Version mismatch! Tag: $TAG_VERSION, Detected: $DETECTED_VERSION"
          exit 1
        fi

    - name: Build package
      run: |
        python -m build

    - name: Verify package contents
      run: |
        pip install twine
        twine check dist/*
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## What's Changed
          
          Release ${{ github.ref }} of mcpcap.
          
          ### Installation
          ```bash
          pip install mcpcap==${{ github.ref_name }}
          ```
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      # Note: This uses PyPI's trusted publisher feature
      # You'll need to configure this in your PyPI project settings
      # Alternative: use password-based auth with secrets.PYPI_API_TOKEN

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 30