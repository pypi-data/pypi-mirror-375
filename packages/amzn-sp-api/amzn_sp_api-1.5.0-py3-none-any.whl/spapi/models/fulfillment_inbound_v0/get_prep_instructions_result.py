# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetPrepInstructionsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku_prep_instructions_list': 'List[SKUPrepInstructions]',
        'invalid_sku_list': 'List[InvalidSKU]',
        'asin_prep_instructions_list': 'List[ASINPrepInstructions]',
        'invalid_asin_list': 'List[InvalidASIN]',
    }

    attribute_map = {
        'sku_prep_instructions_list': 'SKUPrepInstructionsList',
        'invalid_sku_list': 'InvalidSKUList',
        'asin_prep_instructions_list': 'ASINPrepInstructionsList',
        'invalid_asin_list': 'InvalidASINList',
    }

    def __init__(self, sku_prep_instructions_list=None, invalid_sku_list=None, asin_prep_instructions_list=None, invalid_asin_list=None, _configuration=None):  # noqa: E501
        """GetPrepInstructionsResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sku_prep_instructions_list = None
        self._invalid_sku_list = None
        self._asin_prep_instructions_list = None
        self._invalid_asin_list = None
        self.discriminator = None

        if sku_prep_instructions_list is not None:
            self.sku_prep_instructions_list = sku_prep_instructions_list
        if invalid_sku_list is not None:
            self.invalid_sku_list = invalid_sku_list
        if asin_prep_instructions_list is not None:
            self.asin_prep_instructions_list = asin_prep_instructions_list
        if invalid_asin_list is not None:
            self.invalid_asin_list = invalid_asin_list

    @property
    def sku_prep_instructions_list(self):
        """Gets the sku_prep_instructions_list of this GetPrepInstructionsResult.  # noqa: E501

        A list of SKU labeling requirements and item preparation instructions.  # noqa: E501

        :return: The sku_prep_instructions_list of this GetPrepInstructionsResult.  # noqa: E501
        :rtype: List[SKUPrepInstructions]
        """
        return self._sku_prep_instructions_list

    @sku_prep_instructions_list.setter
    def sku_prep_instructions_list(self, sku_prep_instructions_list):
        """Sets the sku_prep_instructions_list of this GetPrepInstructionsResult.

        A list of SKU labeling requirements and item preparation instructions.  # noqa: E501

        :param sku_prep_instructions_list: The sku_prep_instructions_list of this GetPrepInstructionsResult.  # noqa: E501
        :type: List[SKUPrepInstructions]
        """

        self._sku_prep_instructions_list = sku_prep_instructions_list

    @property
    def invalid_sku_list(self):
        """Gets the invalid_sku_list of this GetPrepInstructionsResult.  # noqa: E501

        A list of invalid SKU values and the reason they are invalid.  # noqa: E501

        :return: The invalid_sku_list of this GetPrepInstructionsResult.  # noqa: E501
        :rtype: List[InvalidSKU]
        """
        return self._invalid_sku_list

    @invalid_sku_list.setter
    def invalid_sku_list(self, invalid_sku_list):
        """Sets the invalid_sku_list of this GetPrepInstructionsResult.

        A list of invalid SKU values and the reason they are invalid.  # noqa: E501

        :param invalid_sku_list: The invalid_sku_list of this GetPrepInstructionsResult.  # noqa: E501
        :type: List[InvalidSKU]
        """

        self._invalid_sku_list = invalid_sku_list

    @property
    def asin_prep_instructions_list(self):
        """Gets the asin_prep_instructions_list of this GetPrepInstructionsResult.  # noqa: E501

        A list of item preparation instructions.  # noqa: E501

        :return: The asin_prep_instructions_list of this GetPrepInstructionsResult.  # noqa: E501
        :rtype: List[ASINPrepInstructions]
        """
        return self._asin_prep_instructions_list

    @asin_prep_instructions_list.setter
    def asin_prep_instructions_list(self, asin_prep_instructions_list):
        """Sets the asin_prep_instructions_list of this GetPrepInstructionsResult.

        A list of item preparation instructions.  # noqa: E501

        :param asin_prep_instructions_list: The asin_prep_instructions_list of this GetPrepInstructionsResult.  # noqa: E501
        :type: List[ASINPrepInstructions]
        """

        self._asin_prep_instructions_list = asin_prep_instructions_list

    @property
    def invalid_asin_list(self):
        """Gets the invalid_asin_list of this GetPrepInstructionsResult.  # noqa: E501

        A list of invalid ASIN values and the reasons they are invalid.  # noqa: E501

        :return: The invalid_asin_list of this GetPrepInstructionsResult.  # noqa: E501
        :rtype: List[InvalidASIN]
        """
        return self._invalid_asin_list

    @invalid_asin_list.setter
    def invalid_asin_list(self, invalid_asin_list):
        """Sets the invalid_asin_list of this GetPrepInstructionsResult.

        A list of invalid ASIN values and the reasons they are invalid.  # noqa: E501

        :param invalid_asin_list: The invalid_asin_list of this GetPrepInstructionsResult.  # noqa: E501
        :type: List[InvalidASIN]
        """

        self._invalid_asin_list = invalid_asin_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPrepInstructionsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPrepInstructionsResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetPrepInstructionsResult):
            return True

        return self.to_dict() != other.to_dict()
