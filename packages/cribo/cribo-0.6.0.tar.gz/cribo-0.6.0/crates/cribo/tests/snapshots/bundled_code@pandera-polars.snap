---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pandera-polars/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
schema = _cribo.types.SimpleNamespace(__name__='schema')
import pandera.polars as pa
class CitySchema(pa.DataFrameModel):
    state: str
    city: str
    price: int
CitySchema.__module__ = 'schema'
schema.CitySchema = CitySchema
import polars as pl
from pandera.typing import DataFrame
@pa.check_types(lazy=True)
def keep_state_ca(df: DataFrame[CitySchema]) -> DataFrame[CitySchema]:
    keep_df = df.filter(pl.col("state") == "CA")
    return keep_df
@pa.check_types(lazy=True)
def keep_state_fl(df: pa.PolarsData) -> DataFrame[CitySchema]:
    keep_df = df.filter(pl.col("state") == "FL")
    return keep_df
def main() -> None:
    lf = pl.LazyFrame({"state": ["FL", "FL", "FL", "CA", "CA", "CA"], "city": ["Orlando", "Miami", "Tampa", "San Francisco", "Los Angeles", "San Diego"], "price": [8, 12, 10, 16, 20, 18]})
    print("ca:")
    ca_lf = keep_state_ca(lf)
    print(ca_lf.collect())
    print()
    lf2 = pl.LazyFrame({"state": ["FL", "FL", "FL", "CA", "CA", "CA"], "city": ["Orlando", "Miami", "Tampa", "San Francisco", "Los Angeles", "San Diego"], "price": [8, 12, 10, 16, 20, 18]})
    print("fl:")
    fl_lf = keep_state_fl(lf2)
    print(fl_lf.collect())
    print()
    print("DONE")
if __name__ == "__main__":
    main()
