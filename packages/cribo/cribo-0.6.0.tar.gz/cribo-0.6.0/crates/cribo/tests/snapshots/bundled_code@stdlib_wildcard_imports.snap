---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_wildcard_imports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
myhelper = _cribo.types.SimpleNamespace(__name__='myhelper')
"""Helper module to test import aliasing that shadows stdlib names."""
def process_data(data):
    """Process data in a custom way."""
    if isinstance(data, dict):
        return {"processed": True, "original": data}
    return {"processed": True, "original": str(data)}
myhelper.process_data = process_data
"""Test fixture for stdlib wildcard imports and local shadowing."""
from collections import *
counter = Counter(["a", "b", "c", "a", "b", "b"])
print(f"Counter: {counter}")
od = OrderedDict([("a", 1), ("b", 2)])
print(f"OrderedDict: {od}")
json = myhelper
result = json.process_data({"key": "value"})
print(f"Processed data: {result}")
real_json = _cribo.json
data = _cribo.json.dumps({"test": "data"})
print(f"JSON string: {data}")
from itertools import *
pairs = list(combinations([1, 2, 3], 2))
print(f"Combinations: {pairs}")
collections = "I'm a local variable, not the module!"
print(f"Local collections: {collections}")
another_counter = Counter(["x", "y", "z"])
print(f"Another counter: {another_counter}")
print("All tests passed!")
