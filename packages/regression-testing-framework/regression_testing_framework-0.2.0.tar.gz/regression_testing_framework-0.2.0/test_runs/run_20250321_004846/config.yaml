# Global base command (optional, can be overridden by individual tests)
base_command: /bin/bash

# Test with default base_command
successful_run:
  base_command: /bin/bash
  params:
    - -c
    - "echo 'This command will succeed'"

# Test with custom base_command and environment variables
python_test:
  base_command: python
  params:
    - "-c"
    - "import os; print(f'Environment variable: {os.environ.get(\"ABC\", \"not set\")}')"
  environment:
    - ABC=cats
    - DEBUG=true

# Test that will fail
failing_run:
  base_command: /bin/bash
  params:
    - -c
    - "exit 1"

# Test with multiple parameters
another_successful_run:
  base_command: /bin/bash
  params:
    - -c
    - "echo 'Another successful command with ENV=' && echo $XYZ"
  environment:
    - XYZ=testvalue

# Test with new parameter format
new_parameter_test:
  base_command: /bin/bash
  params:
    - -c
    - "echo 'Testing with new parameter format' && echo '--item1=cat -c dog'"
  environment:
    - ABC=cat

# Test a basic Python script
cowsay:
  base_command: python3
  params:
    - say.py
    - "Hello from the testing framework!"
  environment:
    - OTHERTHING=again

# Long-running test with timeout
long_running_test:
  base_command: python3
  params:
    - "-c"
    - "import time; print('Starting long task...'); time.sleep(10); print('Task completed')"
  timeout: 15  # Timeout in seconds
  
# Test that will timeout
timeout_test:
  base_command: python3
  params:
    - "-c"
    - "import time; print('Starting infinite task...'); time.sleep(600)"
  timeout: 5  # This test will time out after 5 seconds
