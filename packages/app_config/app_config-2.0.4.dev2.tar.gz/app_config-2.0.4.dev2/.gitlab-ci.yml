# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Define stages
stages:
  - test
  - build
  - deploy

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/

# The following example is for a project that runs branch and merge request pipelines
# only, but does not run pipelines for any other case. It runs:
#    Branch pipelines when a merge request is not open for the branch.
#    Merge request pipelines when a merge request is open for the branch.
workflow:
  rules:
    #- if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    # Add rule for tags on main branch
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "main"'
    #- if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
    #  when: never
    #- if: $CI_COMMIT_BRANCH

#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv/

before_script:
  - python --version ; pip --version  # For debugging
  - curl -LsSf https://astral.sh/uv/install.sh | sh
  - export PATH="$HOME/.local/bin:$PATH"
  - uv --version
  - uv venv
  - source .venv/bin/activate

test:
  stage: test
  script:
    # Install project with all dependencies from pyproject.toml
    - uv sync --dev
    # Add test dependencies if not in pyproject.toml
    - uv add --dev pytest coverage
    - uv pip install .
    - uv pip install tox flake8 pytest # you can also use tox
    - if [ -f requirements.txt ]; then uv pip install -r requirements.txt; fi
    #- tox -e py,flake8
    #- pytest -vs

    # init app_config - copies config.py to src (performed by test setup module)
    - cd tests/
    - cd src
    - uv run app_config-init
    - cd ../..   # go back to project root

    # Debug: show current directory and test structure
    - pwd
    - ls -la
    - ls -la tests/
    - ls tests/src/

    # Run tests with coverage
    - cd tests/
    - uv run coverage run -m unittest discover
    - uv run coverage report
    - uv run coverage xml -o ../coverage.xml
    - cd ..    # back to root

  # Generate coverage report for GitLab
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

  # Store coverage artifacts
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
    expire_in: 1 week

# Build stage - create distribution packages
build:
  stage: build
  script:
    # Install build dependencies
    - uv add --dev build
    # Build the package
    - uv build
    # Verify the build
    - ls -la dist/
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  rules:
    # Only build when we have a tag on main branch
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_COMMIT_REF_NAME == "ci"'
    # Allow manual trigger on any branch, any time
    - when: manual  # Requires manual trigger

# Deploy to PyPI - only runs on tags on main branch
deploy_pypi:
  stage: deploy
  dependencies:
    - build
  script:
    - echo "Deploying version $CI_COMMIT_TAG to PyPI"

    # Install twine for uploading
    - uv add twine
    # Check the built packages
    - uv run twine check dist/*

    # Upload to PyPI using OIDC token
    #- TWINE_USERNAME=__token__ TWINE_PASSWORD="$PYPI_ID_TOKEN" uv run twine upload dist/*
    - uv publish --token ${app_config_pypi}
  rules:
    # Only deploy when we have a tag on main branch
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "main"'
    - when: manual
  environment:
    name: pypi
    url: https://pypi.org/project/app-config/

# Optional: Deploy to Test PyPI for testing (manual trigger)
deploy_test_pypi:
  stage: deploy
  dependencies:
    - build
  id_tokens:
    TEST_PYPI_ID_TOKEN:
      aud: testpypi
  script:
    - echo "Deploying version $CI_COMMIT_TAG to Test PyPI"

    # Install twine for uploading
    - uv add twine
    # Check the built packages
    - uv run twine check dist/*

    # Upload to Test PyPI using OIDC token
    #- TWINE_USERNAME=__token__ TWINE_PASSWORD="$TEST_PYPI_ID_TOKEN" uv run twine upload --repository testpypi dist/*
    #- uv publish --token ${app_config_testpypi} --publish-url https://test.pypi.org/legacy/
    - uv publish --token ${app_config_pypi} --publish-url https://pypi.org/legacy/
  rules:
    # Only available when we have a tag on main branch
    # - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "main"'
    - when: manual  # Requires manual trigger
  environment:
    name: test-pypi
    # url: https://test.pypi.org/project/app-config-test/
    url: https://test.pypi.org/project/app-config/


# pages:
#   script:
#     - pip install sphinx sphinx-rtd-theme
#     - cd doc
#     - make html
#     - mv build/html/ ../public/
#   artifacts:
#     paths:
#       - public
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

