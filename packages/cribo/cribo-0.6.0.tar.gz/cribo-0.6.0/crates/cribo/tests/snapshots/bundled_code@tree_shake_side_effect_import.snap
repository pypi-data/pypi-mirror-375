---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/tree_shake_side_effect_import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypackage_exceptions = _cribo.types.SimpleNamespace(__name__='mypackage.exceptions')
mypackage = _cribo.types.SimpleNamespace(__name__='mypackage', __initializing__=False, __initialized__=False)
mypackage.exceptions = mypackage_exceptions
class CustomError(Exception):
    """Custom exception that is used by utils module."""
    pass
CustomError.__module__ = 'mypackage.exceptions'
mypackage_exceptions.CustomError = CustomError
mypackage_utils = _cribo.types.SimpleNamespace(__name__='mypackage.utils', __initializing__=False, __initialized__=False)
mypackage.utils = mypackage_utils
def _cribo_init___cribo_ddd935_mypackage(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global mypackage_utils
    mypackage_utils = _cribo_init___cribo_09b9b3_mypackage_utils(mypackage_utils)
    utils = mypackage.utils
    self.utils = utils
    print("mypackage initialized")
    self.exceptions = mypackage_exceptions
    self.exceptions = mypackage_exceptions
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypackage.__init__ = _cribo_init___cribo_ddd935_mypackage
def _cribo_init___cribo_09b9b3_mypackage_utils(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    CustomError = mypackage_exceptions.CustomError
    mypackage_utils.CustomError = CustomError
    os = _cribo.os
    self.os = os
    self.os = os
    DEFAULT_PATH = _cribo.os.environ.get("DEFAULT_PATH", "/tmp")
    self.DEFAULT_PATH = DEFAULT_PATH

    def process_data(data):
        """Process data, raising CustomError if data is None."""
        if data is None:
            raise CustomError("Data cannot be None")
        return f"Processed: {data}"
    self.process_data = process_data
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypackage_utils.__init__ = _cribo_init___cribo_09b9b3_mypackage_utils
__cribo_init_result = _cribo_init___cribo_ddd935_mypackage(mypackage)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypackage, attr, getattr(__cribo_init_result, attr))
print("Test completed")
utils = mypackage.utils
exceptions = mypackage.exceptions
