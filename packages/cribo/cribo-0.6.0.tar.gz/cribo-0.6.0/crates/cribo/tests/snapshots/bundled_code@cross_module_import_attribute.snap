---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/cross_module_import_attribute/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
my_package = _cribo.types.SimpleNamespace(__name__='my_package')
my_package___version__ = _cribo.types.SimpleNamespace(__name__='my_package.__version__', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_699da1_my_package___version__(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Version information for my_package"""
    __version__ = "1.2.3"
    self.__version__ = __version__
    print("Loading version module...")
    self.__initialized__ = True
    self.__initializing__ = False
    return self
my_package___version__.__init__ = _cribo_init___cribo_699da1_my_package___version__
my_package.__version__ = my_package___version__
my_package_utils = _cribo.types.SimpleNamespace(__name__='my_package.utils', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_1f0580_my_package_utils(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global my_package___version__
    """Utility module that imports version from another module"""
    my_package___version__ = _cribo_init___cribo_699da1_my_package___version__(my_package___version__)
    __version__ = my_package.__version__.__version__
    self.__version__ = __version__
    self.__version__ = __version__
    print("Loading utils module...")

    def get_version():
        """Return the package version"""
        return __version__
    self.get_version = get_version
    self.__initialized__ = True
    self.__initializing__ = False
    return self
my_package_utils.__init__ = _cribo_init___cribo_1f0580_my_package_utils
my_package.utils = my_package_utils
"""Test cross-module attribute imports like requests.__version__"""
my_package.utils = _cribo_init___cribo_1f0580_my_package_utils(my_package_utils)
utils = my_package.utils
print(f"Version from utils: {utils.get_version()}")
print(f"Direct __version__ access: {utils.__version__}")
