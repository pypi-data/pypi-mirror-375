{
  "task": {
    "template_code_generation": "Generate code based on template",
    "system_prompt_generation": "Please generate code according to system prompt",
    "processing_start": "Start processing task instruction, max rounds {max_rounds}, max optimization attempts per round {max_optimization}",
    "round_execution": "Round {round} execution",
    "all_rounds_failed_best_result": "All rounds failed, returning best result, execution ended!",
    "round_success_completed": "Round {round} execution successful, task completed!",
    "all_rounds_failed_no_result": "All rounds failed, no valid result obtained, execution ended!",
    "round_failed_continue": "Round {round} execution failed, proceeding to next round",
    "execution_summary": "Task {task_id} execution summary",
    "status": {
      "created": "Created",
      "running": "Running",
      "completed": "Completed",
      "failed": "Failed",
      "cancelled": "Cancelled",
      "unknown": "Unknown status"
    }
  },
  "execution": {
    "direct_response_success": "Direct response: {action} - {instruction}...",
    "cache_lookup": "Looking up cache...",
    "cache_found": "Found {count} cached modules",
    "cache_execution": "Executing cached modules...",
    "ai_generation": "Generating new code...",
    "cache_validation_passed": "Cache validation passed"
  },
  "search": {
    "search_complete_success": "Search completed, found {count} results",
    "process_system_cache": "System cache",
    "process_ai_template": "AI template",
    "process_ai_free": "AI free form",
    "process_system_default": "System default",
    "engine_baidu": "Baidu",
    "engine_bing": "Bing",
    "engine_360": "360",
    "engine_sogou": "Sogou",
    "engine_google": "Google",
    "engine_yandex": "Yandex",
    "engine_naver": "Naver",
    "engine_yahoo_japan": "Yahoo Japan",
    "engine_duckduckgo": "duckduckgo",
    "engine_startpage": "startpage",
    "engine_searx": "searx"
  },
  "analyzer": {
    "recommendations": {
      "enhance_builtin_guidance": "Recommend enhancing built-in type guidance, current built-in type usage rate is low",
      "relax_creation_conditions": "Built-in type usage rate is very high, consider appropriately relaxing new type creation conditions",
      "too_many_dynamic": "Too many dynamic types ({count}), recommend cleaning up low-priority types",
      "low_priority_types": "Found {count} low-priority dynamic types, recommend considering removal",
      "unused_builtin": "Built-in types {types} have 0% usage rate, may need to optimize keyword matching",
      "all_good": "Task type usage is good, no special optimization needed"
    },
    "adaptive": {
      "task_type_guidance_header": "# Task Type Guidance",
      "system_status_header": "# System Status:",
      "current_guidance_strength": "Current guidance strength",
      "builtin_usage_rate": "Built-in type usage rate",
      "efficiency_note": "These built-in types have higher cache hit rates and execution efficiency.",
      "use_builtin_types": "use the following verified built-in task types"
    },
    "priority_label": "priority",
    "use_cases": {
      "data_fetch": [
        "Search web content",
        "Get API data",
        "Crawl news information"
      ],
      "data_process": [
        "Data analysis",
        "Statistical calculation",
        "Format conversion"
      ],
      "file_operation": [
        "Read/write files",
        "Batch processing",
        "Document operations"
      ],
      "automation": [
        "Scheduled tasks",
        "System monitoring",
        "Automation workflows"
      ],
      "content_generation": [
        "Document generation",
        "Report creation",
        "Content creation"
      ],
      "direct_response": [
        "Knowledge Q&A",
        "Text creation",
        "Translation and summarization"
      ]
    }
  },
  "content_generation": {
    "generation_success": "Successfully generated {format} format content",
    "search_based_suffix": " (based on {count} search results)",
    "search_results_header": "Search results for '{instruction}'",
    "result_label": "Result",
    "title_label": "Title",
    "publish_time_label": "Publish Time",
    "abstract_label": "Abstract",
    "content_label": "Content",
    "no_title": "No title",
    "unknown_time": "Unknown time",
    "no_abstract": "No abstract",
    "no_search_results_fallback": "No relevant search results found, please generate content based on existing knowledge."
  },
  "progress": {
    "connecting_ai": "[AIForge]ü§ñ Connecting to AI service{provider}...",
    "waiting_response": "[AIForge]üí≠ Waiting for AI response...",
    "processing_response": "[AIForge]‚úÖ Received AI response, processing...",
    "searching": "[AIForge]üîç Searching: {query}",
    "search_process": "[AIForge]üîç Trying {search_type} search...",
    "search_complete": "[AIForge]‚úÖ Search completed, found {count} results",
    "cache_lookup": "[AIForge]üîç Looking up cache...",
    "cache_found": "[AIForge]üì¶ Found {count} cached modules, validating...",
    "cache_execution": "[AIForge]‚ö° Executing cached code...",
    "code_execution": "[AIForge]‚ö° Executing {count} code blocks...",
    "round_start": "[AIForge]üîÑ Starting round {current}/{total} execution...",
    "round_success": "[AIForge]üéâ Round {round_num} execution successful!",
    "round_retry": "[AIForge]‚ö†Ô∏è Round {round_num} failed, preparing retry..."
  },
  "llm_manager": {
    "config_updated": "Configuration updated",
    "lazy_load_create": "Lazy loading LLM client: {name}",
    "switch_success": "Switched to LLM client: {name}",
    "cleanup_unused": "Cleaned up unused clients, keeping: {current_name}"
  },
  "validation": {
    "validation_passed": "Validation passed",
    "found_valid_results": "Found {count} valid results",
    "ai_validation_exception": "AI validation exception, default pass: {error}"
  },
  "runner": {
    "sandbox_info": "Sandbox environment: timeout={timeout}s, memory={memory}MB, CPU={cpu}s, file descriptors={fd}, file size={file_size}MB, processes={processes}",
    "network_blocked_info": "Network access blocked by security policy",
    "cleanup_warning": "Cleanup warning: {error}"
  },
  "formatter": {
    "code_placeholder": "See code block above...",
    "execution_result_title": "Code Execution Result",
    "structured_feedback_message": "The following are code block execution results automatically returned by the runtime environment in execution order",
    "execution_summary_title": "Execution Summary",
    "item_column": "Item",
    "value_column": "Value",
    "total_rounds_label": "Total Rounds",
    "history_label": "History",
    "task_status_label": "Task Status",
    "history_count_text": "{count} records",
    "completed_text": "Completed",
    "incomplete_text": "Incomplete",
    "operation_completed": "Operation completed"
  },
  "executor": {
    "start_execution_block": "Starting execution of code block: {block_name}",
    "round_attempt": "Round {round_num}, attempt {optimization_attempt}",
    "generating_code": "Generating code...",
    "found_code_blocks": "Found {count} code blocks",
    "validation_passed": "Attempt {optimization_attempt} validation passed!",
    "best_result_summary": "Returning {count} best results"
  },
  "network": {
    "validation_disabled": "Network validation disabled",
    "open_mode_allows_all": "Open mode allows all network access",
    "default_allow": "Default allow",
    "domain_filtering_disabled": "Domain filtering disabled",
    "domain_validation_passed": "Domain validation passed",
    "domain_whitelisted": "Domain in whitelist: {domain}",
    "ip_address_allowed": "IP address allowed",
    "resolved_ip_allowed": "Resolved IP {ip} allowed",
    "no_hostname": "No hostname",
    "no_domain_restrictions": "No domain restrictions"
  },
  "template": {
    "title_label": "Title",
    "url_label": "URL",
    "content_description": "Detailed content (remove spaces and line breaks, at least {length} characters)",
    "time_label": "Publication time",
    "optional_empty": " (can be empty)",
    "optional_empty_quotes": " (can be '')",
    "corresponding_value": "Corresponding value"
  }
}