# coding: utf-8

"""
    The Selling Partner API for Sellers

    The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class MarketplaceParticipation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace': 'Marketplace',
        'participation': 'Participation',
        'store_name': 'str',
    }

    attribute_map = {
        'marketplace': 'marketplace',
        'participation': 'participation',
        'store_name': 'storeName',
    }

    def __init__(self, marketplace=None, participation=None, store_name=None, _configuration=None):  # noqa: E501
        """MarketplaceParticipation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._marketplace = None
        self._participation = None
        self._store_name = None
        self.discriminator = None

        self.marketplace = marketplace
        self.participation = participation
        self.store_name = store_name

    @property
    def marketplace(self):
        """Gets the marketplace of this MarketplaceParticipation.  # noqa: E501


        :return: The marketplace of this MarketplaceParticipation.  # noqa: E501
        :rtype: Marketplace
        """
        return self._marketplace

    @marketplace.setter
    def marketplace(self, marketplace):
        """Sets the marketplace of this MarketplaceParticipation.


        :param marketplace: The marketplace of this MarketplaceParticipation.  # noqa: E501
        :type: Marketplace
        """
        if self._configuration.client_side_validation and marketplace is None:
            raise ValueError("Invalid value for `marketplace`, must not be `None`")  # noqa: E501

        self._marketplace = marketplace

    @property
    def participation(self):
        """Gets the participation of this MarketplaceParticipation.  # noqa: E501


        :return: The participation of this MarketplaceParticipation.  # noqa: E501
        :rtype: Participation
        """
        return self._participation

    @participation.setter
    def participation(self, participation):
        """Sets the participation of this MarketplaceParticipation.


        :param participation: The participation of this MarketplaceParticipation.  # noqa: E501
        :type: Participation
        """
        if self._configuration.client_side_validation and participation is None:
            raise ValueError("Invalid value for `participation`, must not be `None`")  # noqa: E501

        self._participation = participation

    @property
    def store_name(self):
        """Gets the store_name of this MarketplaceParticipation.  # noqa: E501

        The name of the seller's store as displayed in the marketplace.  # noqa: E501

        :return: The store_name of this MarketplaceParticipation.  # noqa: E501
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this MarketplaceParticipation.

        The name of the seller's store as displayed in the marketplace.  # noqa: E501

        :param store_name: The store_name of this MarketplaceParticipation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and store_name is None:
            raise ValueError("Invalid value for `store_name`, must not be `None`")  # noqa: E501

        self._store_name = store_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketplaceParticipation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketplaceParticipation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarketplaceParticipation):
            return True

        return self.to_dict() != other.to_dict()
