# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.v4_workflows_get200_response_workflows_inner_data_validation import V4WorkflowsGet200ResponseWorkflowsInnerDataValidation
from openapi_client.models.v4_workflows_get200_response_workflows_inner_location import V4WorkflowsGet200ResponseWorkflowsInnerLocation
from openapi_client.models.v4_workflows_get200_response_workflows_inner_notification_config import V4WorkflowsGet200ResponseWorkflowsInnerNotificationConfig
from openapi_client.models.v4_workflows_get200_response_workflows_inner_schema_inner import V4WorkflowsGet200ResponseWorkflowsInnerSchemaInner
from openapi_client.models.v4_workflows_get200_response_workflows_inner_validation_statistics import V4WorkflowsGet200ResponseWorkflowsInnerValidationStatistics
from typing import Optional, Set
from typing_extensions import Self

class V4WorkflowsGet200ResponseWorkflowsInner(BaseModel):
    """
    V4WorkflowsGet200ResponseWorkflowsInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the workflow", alias="_id")
    name: Optional[StrictStr] = Field(default=None, description="Name of the workflow")
    description: Optional[StrictStr] = Field(default=None, description="Description of the workflow")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the workflow")
    display_state: Optional[StrictStr] = Field(default=None, description="Display state for frontend", alias="displayState")
    user_id: Optional[StrictStr] = Field(default=None, description="ID of the user who owns the workflow", alias="userId")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the workflow was created", alias="createdAt")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags associated with the workflow")
    limit: Optional[StrictInt] = Field(default=None, description="Maximum number of items to scrape")
    finished_at: Optional[datetime] = Field(default=None, description="When the last job finished", alias="finishedAt")
    started_at: Optional[datetime] = Field(default=None, description="When the last job started", alias="startedAt")
    protocol: Optional[StrictStr] = Field(default=None, description="Protocol information from last job")
    job_id: Optional[StrictStr] = Field(default=None, description="ID of the last job", alias="jobId")
    data_key: Optional[StrictStr] = Field(default=None, description="Database key for the workflow data", alias="dataKey")
    location: Optional[V4WorkflowsGet200ResponseWorkflowsInnerLocation] = None
    run_costs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Cost of the last job run in credits", alias="runCosts")
    run_state: Optional[StrictStr] = Field(default=None, description="State of the last job run", alias="runState")
    total_records: Optional[StrictInt] = Field(default=None, description="Total number of records extracted", alias="totalRecords")
    url: Optional[StrictStr] = Field(default=None, description="Primary URL being scraped")
    urls: Optional[List[StrictStr]] = Field(default=None, description="List of URLs being scraped")
    var_schema: Optional[List[V4WorkflowsGet200ResponseWorkflowsInnerSchemaInner]] = Field(default=None, description="Extraction schema fields", alias="schema")
    schema_type: Optional[StrictStr] = Field(default=None, description="Type of schema (deprecated)", alias="schemaType")
    template_name: Optional[StrictStr] = Field(default=None, description="Name of the template used", alias="templateName")
    template_id: Optional[StrictStr] = Field(default=None, description="ID of the template used", alias="templateId")
    is_schema_editable: Optional[StrictBool] = Field(default=None, description="Whether the schema can be edited", alias="isSchemaEditable")
    data_validation: Optional[V4WorkflowsGet200ResponseWorkflowsInnerDataValidation] = Field(default=None, alias="dataValidation")
    validation_statistics: Optional[V4WorkflowsGet200ResponseWorkflowsInnerValidationStatistics] = Field(default=None, alias="validationStatistics")
    monitoring: Optional[StrictBool] = Field(default=None, description="Whether monitoring is enabled")
    notification_config: Optional[V4WorkflowsGet200ResponseWorkflowsInnerNotificationConfig] = Field(default=None, alias="notificationConfig")
    __properties: ClassVar[List[str]] = ["_id", "name", "description", "state", "displayState", "userId", "createdAt", "tags", "limit", "finishedAt", "startedAt", "protocol", "jobId", "dataKey", "location", "runCosts", "runState", "totalRecords", "url", "urls", "schema", "schemaType", "templateName", "templateId", "isSchemaEditable", "dataValidation", "validationStatistics", "monitoring", "notificationConfig"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'ERROR', 'PAUSED', 'NOT_SUPPORTED', 'PREVIEW', 'COMPLIANCE_REVIEW', 'COMPLIANCE_REJECTED', 'QUEUED', 'SETUP', 'DELETED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'ERROR', 'PAUSED', 'NOT_SUPPORTED', 'PREVIEW', 'COMPLIANCE_REVIEW', 'COMPLIANCE_REJECTED', 'QUEUED', 'SETUP', 'DELETED')")
        return value

    @field_validator('display_state')
    def display_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'ERROR', 'PAUSED', 'NOT_SUPPORTED', 'PREVIEW', 'COMPLIANCE_REVIEW', 'COMPLIANCE_REJECTED', 'QUEUED', 'SETUP', 'RUNNING']):
            raise ValueError("must be one of enum values ('ACTIVE', 'ERROR', 'PAUSED', 'NOT_SUPPORTED', 'PREVIEW', 'COMPLIANCE_REVIEW', 'COMPLIANCE_REJECTED', 'QUEUED', 'SETUP', 'RUNNING')")
        return value

    @field_validator('schema_type')
    def schema_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DETAIL', 'DIRECTORY']):
            raise ValueError("must be one of enum values ('DETAIL', 'DIRECTORY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V4WorkflowsGet200ResponseWorkflowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in var_schema (list)
        _items = []
        if self.var_schema:
            for _item_var_schema in self.var_schema:
                if _item_var_schema:
                    _items.append(_item_var_schema.to_dict())
            _dict['schema'] = _items
        # override the default output from pydantic by calling `to_dict()` of data_validation
        if self.data_validation:
            _dict['dataValidation'] = self.data_validation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation_statistics
        if self.validation_statistics:
            _dict['validationStatistics'] = self.validation_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_config
        if self.notification_config:
            _dict['notificationConfig'] = self.notification_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V4WorkflowsGet200ResponseWorkflowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "state": obj.get("state"),
            "displayState": obj.get("displayState"),
            "userId": obj.get("userId"),
            "createdAt": obj.get("createdAt"),
            "tags": obj.get("tags"),
            "limit": obj.get("limit"),
            "finishedAt": obj.get("finishedAt"),
            "startedAt": obj.get("startedAt"),
            "protocol": obj.get("protocol"),
            "jobId": obj.get("jobId"),
            "dataKey": obj.get("dataKey"),
            "location": V4WorkflowsGet200ResponseWorkflowsInnerLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "runCosts": obj.get("runCosts"),
            "runState": obj.get("runState"),
            "totalRecords": obj.get("totalRecords"),
            "url": obj.get("url"),
            "urls": obj.get("urls"),
            "schema": [V4WorkflowsGet200ResponseWorkflowsInnerSchemaInner.from_dict(_item) for _item in obj["schema"]] if obj.get("schema") is not None else None,
            "schemaType": obj.get("schemaType"),
            "templateName": obj.get("templateName"),
            "templateId": obj.get("templateId"),
            "isSchemaEditable": obj.get("isSchemaEditable"),
            "dataValidation": V4WorkflowsGet200ResponseWorkflowsInnerDataValidation.from_dict(obj["dataValidation"]) if obj.get("dataValidation") is not None else None,
            "validationStatistics": V4WorkflowsGet200ResponseWorkflowsInnerValidationStatistics.from_dict(obj["validationStatistics"]) if obj.get("validationStatistics") is not None else None,
            "monitoring": obj.get("monitoring"),
            "notificationConfig": V4WorkflowsGet200ResponseWorkflowsInnerNotificationConfig.from_dict(obj["notificationConfig"]) if obj.get("notificationConfig") is not None else None
        })
        return _obj


