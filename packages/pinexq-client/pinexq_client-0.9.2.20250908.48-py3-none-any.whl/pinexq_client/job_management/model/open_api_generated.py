# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-09-02T12:55:12+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, constr


class AdminJobQueryResultHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    total_entities: int | None = Field(None, alias='TotalEntities')
    current_entities_count: int | None = Field(None, alias='CurrentEntitiesCount')
    previous_entities_count: int | None = Field(None, alias='PreviousEntitiesCount')
    remaining_tags: List[str] | None = Field(None, alias='RemainingTags')


class AdminProcessingStepQueryResultHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    total_entities: int | None = Field(None, alias='TotalEntities')
    current_entities_count: int | None = Field(None, alias='CurrentEntitiesCount')
    previous_entities_count: int | None = Field(None, alias='PreviousEntitiesCount')
    remaining_tags: List[str] | None = Field(None, alias='RemainingTags')


class AdminWorkDataQueryResultHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    total_entities: int | None = Field(None, alias='TotalEntities')
    current_entities_count: int | None = Field(None, alias='CurrentEntitiesCount')
    previous_entities_count: int | None = Field(None, alias='PreviousEntitiesCount')
    remaining_tags: List[str] | None = Field(None, alias='RemainingTags')


class CopyPsFromOrgToUserActionParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    title: constr(min_length=1) = Field(..., alias='Title')
    function_name: constr(min_length=1) = Field(..., alias='FunctionName')
    version: constr(min_length=1) = Field(..., alias='Version')


class CopyPsFromUserToOrgActionParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    org_id: constr(min_length=1) = Field(..., alias='OrgId')
    title: constr(min_length=1) = Field(..., alias='Title')
    function_name: constr(min_length=1) = Field(..., alias='FunctionName')
    version: constr(min_length=1) = Field(..., alias='Version')


class CopyWorkDataFromUserToOrgActionParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    org_id: constr(min_length=1) = Field(..., alias='OrgId')


class CreateJobParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: constr(min_length=1) = Field(..., alias='Name')


class CreateProcessingStepParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    title: constr(min_length=1) = Field(..., alias='Title')
    function_name: constr(min_length=1) = Field(..., alias='FunctionName')
    version: constr(min_length=1) = Field(..., alias='Version')


class CreateSubJobParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: constr(min_length=1) = Field(..., alias='Name')
    parent_job_url: str | None = Field(None, alias='ParentJobUrl')


class DataSpecificationHto(BaseModel):
    """
    Container for mapped DataCybernetics.JobManagementService.Domain.Processing.DataSlotSpecification So we can hide some domain information
    """

    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: str | None = Field(None, alias='Name')
    title: str | None = Field(None, alias='Title')
    description: str | None = Field(None, alias='Description')
    media_type: str | None = Field(None, alias='MediaType')
    is_collection: bool | None = Field(None, alias='IsCollection')
    min_slots: int | None = Field(None, alias='MinSlots')
    max_slots: int | None = Field(None, alias='MaxSlots')


class EditProcessingStepParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    title: constr(min_length=1) = Field(..., alias='Title')
    is_public: bool = Field(..., alias='IsPublic')
    function_name: constr(min_length=1) = Field(..., alias='FunctionName')
    version: constr(min_length=1) = Field(..., alias='Version')


class EntryPointHtoOpenApiProperties(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )


class FieldModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: constr(min_length=1)
    type: str | None = None
    value: Any | None = None
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    accept: List[str] | None = None
    max_file_size_bytes: int | None = Field(None, alias='maxFileSizeBytes')
    allow_multiple: bool | None = Field(None, alias='allowMultiple')


class FunctionNameMatchTypes(Enum):
    contains = 'Contains'
    match_exact = 'MatchExact'


class InfoHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    organization_id: str | None = Field(None, alias='OrganizationId')
    api_version: str | None = Field(None, alias='ApiVersion')
    build_version: str | None = Field(None, alias='BuildVersion')
    used_storage_in_bytes: int | None = Field(None, alias='UsedStorageInBytes')


class InputDataSlotParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    index: int | None = Field(None, alias='Index')
    work_data_urls: List[str] | None = Field(None, alias='WorkDataUrls')


class JobQueryResultHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    total_entities: int | None = Field(None, alias='TotalEntities')
    current_entities_count: int | None = Field(None, alias='CurrentEntitiesCount')
    previous_entities_count: int | None = Field(None, alias='PreviousEntitiesCount')
    remaining_tags: List[str] | None = Field(None, alias='RemainingTags')


class JobSortProperties(Enum):
    name = 'Name'
    created_at = 'CreatedAt'
    completed_at = 'CompletedAt'


class JobStates(Enum):
    undefined = 'Undefined'
    created = 'Created'
    ready_for_processing = 'ReadyForProcessing'
    pending = 'Pending'
    processing = 'Processing'
    completed = 'Completed'
    error = 'Error'
    canceled = 'Canceled'
    data_missing = 'DataMissing'


class JobUsedTagsAdminHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    tags: List[str] | None = Field(None, alias='Tags')


class JobUsedTagsHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    tags: List[str] | None = Field(None, alias='Tags')


class JobsRootHtoOpenApiProperties(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )


class Link(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    rel: List[str]
    href: constr(min_length=1)
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    type: str | None = None


class Pagination(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    page_size: int | None = Field(None, alias='PageSize')
    page_offset: int | None = Field(None, alias='PageOffset')


class ProblemDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    type: str | None = None
    title: str | None = None
    status: int | None = None
    detail: str | None = None
    instance: str | None = None


class ProcessingStepFilterParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    function_name: str | None = Field(None, alias='FunctionName')
    function_name_match_type: FunctionNameMatchTypes | None = Field(
        None, alias='FunctionNameMatchType'
    )
    title_contains: str | None = Field(None, alias='TitleContains')
    version: str | None = Field(None, alias='Version')
    description_contains: str | None = Field(None, alias='DescriptionContains')
    tags_by_and: List[str] | None = Field(None, alias='TagsByAnd')
    tags_by_or: List[str] | None = Field(None, alias='TagsByOr')
    is_public: bool | None = Field(None, alias='IsPublic')
    show_hidden: bool | None = Field(None, alias='ShowHidden')
    is_configured: bool | None = Field(None, alias='IsConfigured')


class ProcessingStepHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    title: str | None = Field(None, alias='Title')
    owner_id: str | None = Field(
        None, alias='OwnerId', description='The owner of this resource'
    )
    created_by: str | None = Field(
        None, alias='CreatedBy', description='The creator of this resource'
    )
    version: str | None = Field(
        None, alias='Version', description='Version of the algorithm. Default = "0"'
    )
    function_name: str | None = Field(
        None,
        alias='FunctionName',
        description='Unique name (possibly human readable) for the function so that it can be identified',
    )
    short_description: str | None = Field(
        None, alias='ShortDescription', description='Human readable short description'
    )
    long_description: str | None = Field(
        None, alias='LongDescription', description='Human readable long description'
    )
    has_parameters: bool | None = Field(None, alias='HasParameters')
    is_public: bool | None = Field(None, alias='IsPublic')
    tags: List[str] | None = Field(None, alias='Tags')
    is_configured: bool | None = Field(None, alias='IsConfigured')
    hidden: bool | None = Field(None, alias='Hidden')
    created_at: AwareDatetime | None = Field(None, alias='CreatedAt')
    last_modified_at: AwareDatetime | None = Field(None, alias='LastModifiedAt')
    parameter_schema: str | None = Field(None, alias='ParameterSchema')
    default_parameters: str | None = Field(None, alias='DefaultParameters')
    return_schema: str | None = Field(None, alias='ReturnSchema')
    error_schema: str | None = Field(None, alias='ErrorSchema')
    input_data_slot_specification: List[DataSpecificationHto] | None = Field(
        None, alias='InputDataSlotSpecification'
    )
    output_data_slot_specification: List[DataSpecificationHto] | None = Field(
        None, alias='OutputDataSlotSpecification'
    )


class ProcessingStepQueryResultHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    total_entities: int | None = Field(None, alias='TotalEntities')
    current_entities_count: int | None = Field(None, alias='CurrentEntitiesCount')
    previous_entities_count: int | None = Field(None, alias='PreviousEntitiesCount')
    remaining_tags: List[str] | None = Field(None, alias='RemainingTags')


class ProcessingStepRootHtoOpenApiProperties(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )


class ProcessingStepSortProperties(Enum):
    title = 'Title'
    created_at = 'CreatedAt'
    last_modified_at = 'LastModifiedAt'


class ProcessingStepUsedTagsAdminHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    tags: List[str] | None = Field(None, alias='Tags')


class ProcessingStepUsedTagsHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    tags: List[str] | None = Field(None, alias='Tags')


class ProcessingView(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    title: str | None = Field(None, alias='Title')
    description: str | None = Field(None, alias='Description')
    function_name: str | None = Field(None, alias='FunctionName')
    version: str | None = Field(None, alias='Version')
    number_of_input_data_slots: int | None = Field(None, alias='NumberOfInputDataSlots')
    number_of_output_data_slots: int | None = Field(
        None, alias='NumberOfOutputDataSlots'
    )


class RapidJobSetupParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: constr(min_length=1) = Field(..., alias='Name')
    processing_step_url: str | None = Field(None, alias='ProcessingStepUrl')
    parent_job_url: str | None = Field(None, alias='ParentJobUrl')
    tags: List[str] | None = Field(None, alias='Tags')
    parameters: str | None = Field(None, alias='Parameters')
    allow_output_data_deletion: bool | None = Field(
        None, alias='AllowOutputDataDeletion'
    )
    input_data_slots: List[InputDataSlotParameter] | None = Field(
        None, alias='InputDataSlots'
    )
    start: bool | None = Field(None, alias='Start')


class RenameJobParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    new_name: constr(min_length=1) = Field(..., alias='NewName')


class SelectProcessingParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    processing_step_url: str | None = Field(None, alias='ProcessingStepUrl')


class SelectWorkDataCollectionForDataSlotParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    work_data_urls: List[str] | None = Field(None, alias='WorkDataUrls')


class SelectWorkDataForDataSlotParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    work_data_url: str | None = Field(None, alias='WorkDataUrl')


class SetCommentWorkDataParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    comment: str | None = Field(None, alias='Comment')


class SetJobErrorStateParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    message: constr(min_length=1) = Field(..., alias='Message')


class SetJobTagsParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    tags: List[str] = Field(..., alias='Tags')


class SetNameWorkDataParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    new_name: constr(min_length=1) = Field(..., alias='NewName')


class SetProcessingStepTagsParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    tags: List[str] = Field(..., alias='Tags')


class SetTagsWorkDataParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    tags: List[str] = Field(..., alias='Tags')


class SortTypes(Enum):
    none = 'None'
    ascending = 'Ascending'
    descending = 'Descending'


class UserHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    user_id: str | None = Field(None, alias='UserId')
    user_grants: List[str] | None = Field(None, alias='UserGrants')


class WorkDataKind(Enum):
    unknown = 'Unknown'
    client_upload = 'ClientUpload'
    processing_artefact = 'ProcessingArtefact'
    monitoring = 'Monitoring'


class WorkDataQueryResultHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    total_entities: int | None = Field(None, alias='TotalEntities')
    current_entities_count: int | None = Field(None, alias='CurrentEntitiesCount')
    previous_entities_count: int | None = Field(None, alias='PreviousEntitiesCount')
    remaining_tags: List[str] | None = Field(None, alias='RemainingTags')


class WorkDataRootHtoOpenApiProperties(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )


class WorkDataSortProperties(Enum):
    name = 'Name'
    media_type = 'MediaType'
    kind = 'Kind'
    size_in_bytes = 'SizeInBytes'
    created_at = 'CreatedAt'


class WorkDataSortPropertiesSortParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    property_name: WorkDataSortProperties | None = Field(None, alias='PropertyName')
    sort_type: SortTypes | None = Field(None, alias='SortType')


class WorkDataUsedTagsAdminQueryResultHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    tags: List[str] | None = Field(None, alias='Tags')


class WorkDataUsedTagsFilterParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    required_tags: List[str] | None = Field(None, alias='RequiredTags')


class WorkDataUsedTagsQueryResultHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    tags: List[str] | None = Field(None, alias='Tags')


class Action(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: constr(min_length=1)
    href: constr(min_length=1)
    class_: List[str] | None = Field(None, alias='class')
    method: str | None = None
    title: str | None = None
    type: str | None = None
    fields: List[FieldModel] | None = None


class AdminJobFilterParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    work_data_url: str | None = Field(None, alias='WorkDataUrl')
    name: str | None = Field(None, alias='Name')
    state: JobStates | None = Field(None, alias='State')
    show_hidden: bool | None = Field(None, alias='ShowHidden')
    processing_step_url: str | None = Field(None, alias='ProcessingStepUrl')
    created_before: AwareDatetime | None = Field(None, alias='CreatedBefore')
    created_after: AwareDatetime | None = Field(None, alias='CreatedAfter')
    tags_by_and: List[str] | None = Field(None, alias='TagsByAnd')
    tags_by_or: List[str] | None = Field(None, alias='TagsByOr')
    parent_job_url: str | None = Field(None, alias='ParentJobUrl')
    is_sub_job: bool | None = Field(None, alias='IsSubJob')
    user_url: str | None = Field(None, alias='UserUrl')


class AdminJobQueryResultHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: AdminJobQueryResultHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class AdminProcessingStepFilterParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    function_name: str | None = Field(None, alias='FunctionName')
    function_name_match_type: FunctionNameMatchTypes | None = Field(
        None, alias='FunctionNameMatchType'
    )
    title_contains: str | None = Field(None, alias='TitleContains')
    version: str | None = Field(None, alias='Version')
    description_contains: str | None = Field(None, alias='DescriptionContains')
    tags_by_and: List[str] | None = Field(None, alias='TagsByAnd')
    tags_by_or: List[str] | None = Field(None, alias='TagsByOr')
    is_public: bool | None = Field(None, alias='IsPublic')
    show_hidden: bool | None = Field(None, alias='ShowHidden')
    is_configured: bool | None = Field(None, alias='IsConfigured')


class AdminProcessingStepQueryResultHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: AdminProcessingStepQueryResultHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class AdminWorkDataFilterParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    producer_processing_step_url: str | None = Field(
        None, alias='ProducerProcessingStepUrl'
    )
    name_contains: str | None = Field(None, alias='NameContains')
    user_url: str | None = Field(None, alias='UserUrl')
    show_hidden: bool | None = Field(None, alias='ShowHidden')
    media_type_contains: str | None = Field(None, alias='MediaTypeContains')
    tags_by_and: List[str] | None = Field(None, alias='TagsByAnd')
    tags_by_or: List[str] | None = Field(None, alias='TagsByOr')
    is_kind: WorkDataKind | None = Field(None, alias='IsKind')
    created_before: AwareDatetime | None = Field(None, alias='CreatedBefore')
    created_after: AwareDatetime | None = Field(None, alias='CreatedAfter')
    is_deletable: bool | None = Field(None, alias='IsDeletable')
    is_used: bool | None = Field(None, alias='IsUsed')


class AdminWorkDataQueryParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    pagination: Pagination | None = Field(None, alias='Pagination')
    sort_by: WorkDataSortPropertiesSortParameter | None = Field(None, alias='SortBy')
    filter: AdminWorkDataFilterParameter | None = Field(None, alias='Filter')
    include_remaining_tags: bool | None = Field(None, alias='IncludeRemainingTags')


class AdminWorkDataQueryResultHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: AdminWorkDataQueryResultHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class EntryPointHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: EntryPointHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class InfoHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: InfoHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class JobFilterParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    state: JobStates | None = Field(None, alias='State')
    name: str | None = Field(None, alias='Name')
    show_hidden: bool | None = Field(None, alias='ShowHidden')
    work_data_url: str | None = Field(None, alias='WorkDataUrl')
    created_before: AwareDatetime | None = Field(None, alias='CreatedBefore')
    created_after: AwareDatetime | None = Field(None, alias='CreatedAfter')
    tags_by_and: List[str] | None = Field(None, alias='TagsByAnd')
    tags_by_or: List[str] | None = Field(None, alias='TagsByOr')
    processing_step_url: str | None = Field(None, alias='ProcessingStepUrl')
    is_sub_job: bool | None = Field(None, alias='IsSubJob')
    parent_job_url: str | None = Field(None, alias='ParentJobUrl')


class JobHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: str | None = Field(None, alias='Name')
    owner_id: str | None = Field(
        None, alias='OwnerId', description='The owner of this resource'
    )
    created_by: str | None = Field(None, alias='CreatedBy')
    state: JobStates | None = Field(None, alias='State')
    tags: List[str] | None = Field(None, alias='Tags')
    hidden: bool | None = Field(None, alias='Hidden')
    output_is_deletable: bool | None = Field(None, alias='OutputIsDeletable')
    created_at: AwareDatetime | None = Field(None, alias='CreatedAt')
    started_at: AwareDatetime | None = Field(None, alias='StartedAt')
    completed_at: AwareDatetime | None = Field(None, alias='CompletedAt')
    error_description: str | None = Field(None, alias='ErrorDescription')
    processing: ProcessingView | None = Field(None, alias='Processing')
    result: str | None = Field(None, alias='Result')
    configured_parameters: str | None = Field(None, alias='ConfiguredParameters')


class JobQueryResultHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: JobQueryResultHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class JobSortPropertiesSortParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    property_name: JobSortProperties | None = Field(None, alias='PropertyName')
    sort_type: SortTypes | None = Field(None, alias='SortType')


class JobUsedTagsAdminHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: JobUsedTagsAdminHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class JobUsedTagsHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: JobUsedTagsHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class JobsRootHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: JobsRootHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class ProcessingStepHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: ProcessingStepHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class ProcessingStepQueryResultHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: ProcessingStepQueryResultHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class ProcessingStepRootHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: ProcessingStepRootHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class ProcessingStepSortPropertiesSortParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    property_name: ProcessingStepSortProperties | None = Field(
        None, alias='PropertyName'
    )
    sort_type: SortTypes | None = Field(None, alias='SortType')


class ProcessingStepUsedTagsAdminHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: ProcessingStepUsedTagsAdminHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class ProcessingStepUsedTagsHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: ProcessingStepUsedTagsHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class UserHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: UserHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class WorkDataFilterParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name_contains: str | None = Field(None, alias='NameContains')
    producer_processing_step_url: str | None = Field(
        None, alias='ProducerProcessingStepUrl'
    )
    show_hidden: bool | None = Field(None, alias='ShowHidden')
    media_type_contains: str | None = Field(None, alias='MediaTypeContains')
    tags_by_and: List[str] | None = Field(None, alias='TagsByAnd')
    tags_by_or: List[str] | None = Field(None, alias='TagsByOr')
    is_kind: WorkDataKind | None = Field(None, alias='IsKind')
    created_before: AwareDatetime | None = Field(None, alias='CreatedBefore')
    created_after: AwareDatetime | None = Field(None, alias='CreatedAfter')
    is_deletable: bool | None = Field(None, alias='IsDeletable')
    is_used: bool | None = Field(None, alias='IsUsed')


class WorkDataHtoOpenApiProperties(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    owner_id: str | None = Field(
        None, alias='OwnerId', description='The owner of this resource'
    )
    created_by: str | None = Field(
        None, alias='CreatedBy', description='The creator of this resource'
    )
    name: str | None = Field(None, alias='Name')
    created_at: AwareDatetime | None = Field(None, alias='CreatedAt')
    size_in_bytes: int | None = Field(None, alias='SizeInBytes')
    tags: List[str] | None = Field(None, alias='Tags')
    media_type: str | None = Field(None, alias='MediaType')
    kind: WorkDataKind | None = Field(None, alias='Kind')
    is_deletable: bool | None = Field(None, alias='IsDeletable')
    is_used_as_job_input: bool | None = Field(None, alias='IsUsedAsJobInput')
    hidden: bool | None = Field(None, alias='Hidden')
    comments: str | None = Field(None, alias='Comments')


class WorkDataQueryParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    pagination: Pagination | None = Field(None, alias='Pagination')
    sort_by: WorkDataSortPropertiesSortParameter | None = Field(None, alias='SortBy')
    filter: WorkDataFilterParameter | None = Field(None, alias='Filter')
    include_remaining_tags: bool | None = Field(None, alias='IncludeRemainingTags')


class WorkDataQueryResultHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: WorkDataQueryResultHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class WorkDataRootHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: WorkDataRootHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class WorkDataUsedTagsAdminQueryResultHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: WorkDataUsedTagsAdminQueryResultHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class WorkDataUsedTagsQueryResultHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: WorkDataUsedTagsQueryResultHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class AdminJobQueryParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    pagination: Pagination | None = Field(None, alias='Pagination')
    sort_by: JobSortPropertiesSortParameter | None = Field(None, alias='SortBy')
    filter: AdminJobFilterParameter | None = Field(None, alias='Filter')
    include_remaining_tags: bool | None = Field(None, alias='IncludeRemainingTags')


class AdminProcessingStepQueryParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    pagination: Pagination | None = Field(None, alias='Pagination')
    sort_by: ProcessingStepSortPropertiesSortParameter | None = Field(
        None, alias='SortBy'
    )
    filter: AdminProcessingStepFilterParameter | None = Field(None, alias='Filter')
    include_remaining_tags: bool | None = Field(None, alias='IncludeRemainingTags')


class JobHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: JobHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None


class JobQueryParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    pagination: Pagination | None = Field(None, alias='Pagination')
    sort_by: JobSortPropertiesSortParameter | None = Field(None, alias='SortBy')
    filter: JobFilterParameter | None = Field(None, alias='Filter')
    include_remaining_tags: bool | None = Field(None, alias='IncludeRemainingTags')


class ProcessingStepQueryParameters(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    pagination: Pagination | None = Field(None, alias='Pagination')
    sort_by: ProcessingStepSortPropertiesSortParameter | None = Field(
        None, alias='SortBy'
    )
    filter: ProcessingStepFilterParameter | None = Field(None, alias='Filter')
    include_remaining_tags: bool | None = Field(None, alias='IncludeRemainingTags')


class WorkDataHtoOpenApi(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    class_: List[str] | None = Field(None, alias='class')
    title: str | None = None
    properties: WorkDataHtoOpenApiProperties | None = None
    entities: List | None = None
    actions: List[Action] | None = None
    links: List[Link] | None = None
