# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.v4_workflows_workflow_id_metadata_put_request import V4WorkflowsWorkflowIdMetadataPutRequest

class TestV4WorkflowsWorkflowIdMetadataPutRequest(unittest.TestCase):
    """V4WorkflowsWorkflowIdMetadataPutRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V4WorkflowsWorkflowIdMetadataPutRequest:
        """Test V4WorkflowsWorkflowIdMetadataPutRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V4WorkflowsWorkflowIdMetadataPutRequest`
        """
        model = V4WorkflowsWorkflowIdMetadataPutRequest()
        if include_optional:
            return V4WorkflowsWorkflowIdMetadataPutRequest(
                limit = 56,
                update_interval = 'ONLY_ONCE',
                schedules = [
                    ''
                    ],
                name = '',
                description = '',
                tags = ["tag1","tag2"],
                location = openapi_client.models._v4_workflows__workflow_id__metadata_put_request_location._v4_workflows__workflowId__metadata_put_request_location(
                    type = 'auto', 
                    iso_code = '', ),
                monitoring = openapi_client.models._v4_workflows__workflow_id__metadata_put_request_monitoring._v4_workflows__workflowId__metadata_put_request_monitoring(
                    enabled = True, 
                    fields = [
                        openapi_client.models._v4_workflows__workflow_id__metadata_put_request_monitoring_fields_inner._v4_workflows__workflowId__metadata_put_request_monitoring_fields_inner(
                            field_name = '', 
                            operator = 'changed', )
                        ], 
                    conditions = openapi_client.models._v4_workflows__workflow_id__metadata_put_request_monitoring_conditions._v4_workflows__workflowId__metadata_put_request_monitoring_conditions(
                        logical_operator = 'AND', ), ),
                data_linking = openapi_client.models._v4_workflows__workflow_id__metadata_put_request_data_linking._v4_workflows__workflowId__metadata_put_request_dataLinking(
                    enabled = True, ),
                additional_data = None
            )
        else:
            return V4WorkflowsWorkflowIdMetadataPutRequest(
        )
        """

    def testV4WorkflowsWorkflowIdMetadataPutRequest(self):
        """Test V4WorkflowsWorkflowIdMetadataPutRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
