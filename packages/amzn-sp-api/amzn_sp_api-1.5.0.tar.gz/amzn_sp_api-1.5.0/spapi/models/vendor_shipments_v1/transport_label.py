# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class TransportLabel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label_create_date_time': 'datetime',
        'shipment_information': 'ShipmentInformation',
        'label_data': 'List[LabelData]',
    }

    attribute_map = {
        'label_create_date_time': 'labelCreateDateTime',
        'shipment_information': 'shipmentInformation',
        'label_data': 'labelData',
    }

    def __init__(self, label_create_date_time=None, shipment_information=None, label_data=None, _configuration=None):  # noqa: E501
        """TransportLabel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._label_create_date_time = None
        self._shipment_information = None
        self._label_data = None
        self.discriminator = None

        if label_create_date_time is not None:
            self.label_create_date_time = label_create_date_time
        if shipment_information is not None:
            self.shipment_information = shipment_information
        if label_data is not None:
            self.label_data = label_data

    @property
    def label_create_date_time(self):
        """Gets the label_create_date_time of this TransportLabel.  # noqa: E501

        Date on which label is created.  # noqa: E501

        :return: The label_create_date_time of this TransportLabel.  # noqa: E501
        :rtype: datetime
        """
        return self._label_create_date_time

    @label_create_date_time.setter
    def label_create_date_time(self, label_create_date_time):
        """Sets the label_create_date_time of this TransportLabel.

        Date on which label is created.  # noqa: E501

        :param label_create_date_time: The label_create_date_time of this TransportLabel.  # noqa: E501
        :type: datetime
        """

        self._label_create_date_time = label_create_date_time

    @property
    def shipment_information(self):
        """Gets the shipment_information of this TransportLabel.  # noqa: E501


        :return: The shipment_information of this TransportLabel.  # noqa: E501
        :rtype: ShipmentInformation
        """
        return self._shipment_information

    @shipment_information.setter
    def shipment_information(self, shipment_information):
        """Sets the shipment_information of this TransportLabel.


        :param shipment_information: The shipment_information of this TransportLabel.  # noqa: E501
        :type: ShipmentInformation
        """

        self._shipment_information = shipment_information

    @property
    def label_data(self):
        """Gets the label_data of this TransportLabel.  # noqa: E501

        Indicates the label data,format and type associated .  # noqa: E501

        :return: The label_data of this TransportLabel.  # noqa: E501
        :rtype: List[LabelData]
        """
        return self._label_data

    @label_data.setter
    def label_data(self, label_data):
        """Sets the label_data of this TransportLabel.

        Indicates the label data,format and type associated .  # noqa: E501

        :param label_data: The label_data of this TransportLabel.  # noqa: E501
        :type: List[LabelData]
        """

        self._label_data = label_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportLabel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportLabel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransportLabel):
            return True

        return self.to_dict() != other.to_dict()
