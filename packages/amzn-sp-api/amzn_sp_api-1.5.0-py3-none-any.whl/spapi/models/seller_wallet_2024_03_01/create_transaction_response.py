# coding: utf-8

"""
    The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).

    The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.

    The version of the OpenAPI document: 2024-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CreateTransactionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction': 'Transaction',
        'call_back_url': 'str',
    }

    attribute_map = {
        'transaction': 'transaction',
        'call_back_url': 'callBackURL',
    }

    def __init__(self, transaction=None, call_back_url=None, _configuration=None):  # noqa: E501
        """CreateTransactionResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._transaction = None
        self._call_back_url = None
        self.discriminator = None

        self.transaction = transaction
        self.call_back_url = call_back_url

    @property
    def transaction(self):
        """Gets the transaction of this CreateTransactionResponse.  # noqa: E501


        :return: The transaction of this CreateTransactionResponse.  # noqa: E501
        :rtype: Transaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this CreateTransactionResponse.


        :param transaction: The transaction of this CreateTransactionResponse.  # noqa: E501
        :type: Transaction
        """
        if self._configuration.client_side_validation and transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")  # noqa: E501

        self._transaction = transaction

    @property
    def call_back_url(self):
        """Gets the call_back_url of this CreateTransactionResponse.  # noqa: E501

        The callback URL for the transaction which the user have to click to approve/consent the transaction  # noqa: E501

        :return: The call_back_url of this CreateTransactionResponse.  # noqa: E501
        :rtype: str
        """
        return self._call_back_url

    @call_back_url.setter
    def call_back_url(self, call_back_url):
        """Sets the call_back_url of this CreateTransactionResponse.

        The callback URL for the transaction which the user have to click to approve/consent the transaction  # noqa: E501

        :param call_back_url: The call_back_url of this CreateTransactionResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and call_back_url is None:
            raise ValueError("Invalid value for `call_back_url`, must not be `None`")  # noqa: E501

        self._call_back_url = call_back_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTransactionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTransactionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTransactionResponse):
            return True

        return self.to_dict() != other.to_dict()
