# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class BatchOffersResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'headers': 'HttpResponseHeaders',
        'status': 'GetOffersHttpStatusLine',
        'body': 'GetOffersResponse',
    }

    attribute_map = {
        'headers': 'headers',
        'status': 'status',
        'body': 'body',
    }

    def __init__(self, headers=None, status=None, body=None, _configuration=None):  # noqa: E501
        """BatchOffersResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._headers = None
        self._status = None
        self._body = None
        self.discriminator = None

        if headers is not None:
            self.headers = headers
        if status is not None:
            self.status = status
        self.body = body

    @property
    def headers(self):
        """Gets the headers of this BatchOffersResponse.  # noqa: E501


        :return: The headers of this BatchOffersResponse.  # noqa: E501
        :rtype: HttpResponseHeaders
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this BatchOffersResponse.


        :param headers: The headers of this BatchOffersResponse.  # noqa: E501
        :type: HttpResponseHeaders
        """

        self._headers = headers

    @property
    def status(self):
        """Gets the status of this BatchOffersResponse.  # noqa: E501


        :return: The status of this BatchOffersResponse.  # noqa: E501
        :rtype: GetOffersHttpStatusLine
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchOffersResponse.


        :param status: The status of this BatchOffersResponse.  # noqa: E501
        :type: GetOffersHttpStatusLine
        """

        self._status = status

    @property
    def body(self):
        """Gets the body of this BatchOffersResponse.  # noqa: E501


        :return: The body of this BatchOffersResponse.  # noqa: E501
        :rtype: GetOffersResponse
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this BatchOffersResponse.


        :param body: The body of this BatchOffersResponse.  # noqa: E501
        :type: GetOffersResponse
        """
        if self._configuration.client_side_validation and body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchOffersResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchOffersResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchOffersResponse):
            return True

        return self.to_dict() != other.to_dict()
