# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.coordinates import Coordinates
from pyevr.openapi_client.models.owner import Owner
from pyevr.openapi_client.models.receiver import Receiver
from pyevr.openapi_client.models.shipment import Shipment
from pyevr.openapi_client.models.transport import Transport
from pyevr.openapi_client.models.viewer import Viewer
from pyevr.openapi_client.models.waybill_place_of_delivery import WaybillPlaceOfDelivery


class StartWaybillRequest(BaseModel):
    """
    StartWaybillRequest
    """  # noqa: E501

    owner: Owner
    transport: Transport
    receiver: Receiver
    place_of_delivery: WaybillPlaceOfDelivery = Field(alias="placeOfDelivery")
    comment: Optional[Annotated[str, Field(strict=True, max_length=400)]] = Field(
        default=None, description="Märkused/lisainfo"
    )
    departure_time: datetime = Field(
        description="Väljasõidu aeg", alias="departureTime"
    )
    submission_time: datetime = Field(
        description="Veoselehe EVR-i saatmise aeg", alias="submissionTime"
    )
    shipments: Annotated[List[Shipment], Field(max_length=25)] = Field(
        description="Lähetatud veose andmed"
    )
    pre_journey_mileage: Optional[
        Annotated[int, Field(le=100000, strict=True, ge=0)]
    ] = Field(
        default=None, description="Ettesõidu kilometraaž", alias="preJourneyMileage"
    )
    user_custom_data: Optional[Any] = Field(
        default=None,
        description="Api kasutaja poolt kohandatavad andmed",
        alias="userCustomData",
    )
    mass: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Autorongi mass tonnides"
    )
    transport_order: Optional[Annotated[str, Field(strict=True, max_length=13)]] = (
        Field(default=None, description="Veotellimuse number", alias="transportOrder")
    )
    submission_coordinates: Optional[Coordinates] = Field(
        default=None, alias="submissionCoordinates"
    )
    viewers: Optional[List[Viewer]] = Field(
        default=None, description="Veoselehe vaatlejad"
    )
    __properties: ClassVar[List[str]] = [
        "owner",
        "transport",
        "receiver",
        "placeOfDelivery",
        "comment",
        "departureTime",
        "submissionTime",
        "shipments",
        "preJourneyMileage",
        "userCustomData",
        "mass",
        "transportOrder",
        "submissionCoordinates",
        "viewers",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartWaybillRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict["owner"] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transport
        if self.transport:
            _dict["transport"] = self.transport.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver
        if self.receiver:
            _dict["receiver"] = self.receiver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of place_of_delivery
        if self.place_of_delivery:
            _dict["placeOfDelivery"] = self.place_of_delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipments (list)
        _items = []
        if self.shipments:
            for _item_shipments in self.shipments:
                if _item_shipments:
                    _items.append(_item_shipments.to_dict())
            _dict["shipments"] = _items
        # override the default output from pydantic by calling `to_dict()` of submission_coordinates
        if self.submission_coordinates:
            _dict["submissionCoordinates"] = self.submission_coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in viewers (list)
        _items = []
        if self.viewers:
            for _item_viewers in self.viewers:
                if _item_viewers:
                    _items.append(_item_viewers.to_dict())
            _dict["viewers"] = _items
        # set to None if pre_journey_mileage (nullable) is None
        # and model_fields_set contains the field
        if (
            self.pre_journey_mileage is None
            and "pre_journey_mileage" in self.model_fields_set
        ):
            _dict["preJourneyMileage"] = None

        # set to None if user_custom_data (nullable) is None
        # and model_fields_set contains the field
        if (
            self.user_custom_data is None
            and "user_custom_data" in self.model_fields_set
        ):
            _dict["userCustomData"] = None

        # set to None if mass (nullable) is None
        # and model_fields_set contains the field
        if self.mass is None and "mass" in self.model_fields_set:
            _dict["mass"] = None

        # set to None if viewers (nullable) is None
        # and model_fields_set contains the field
        if self.viewers is None and "viewers" in self.model_fields_set:
            _dict["viewers"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartWaybillRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "owner": Owner.from_dict(obj["owner"])
                if obj.get("owner") is not None
                else None,
                "transport": Transport.from_dict(obj["transport"])
                if obj.get("transport") is not None
                else None,
                "receiver": Receiver.from_dict(obj["receiver"])
                if obj.get("receiver") is not None
                else None,
                "placeOfDelivery": WaybillPlaceOfDelivery.from_dict(
                    obj["placeOfDelivery"]
                )
                if obj.get("placeOfDelivery") is not None
                else None,
                "comment": obj.get("comment"),
                "departureTime": obj.get("departureTime"),
                "submissionTime": obj.get("submissionTime"),
                "shipments": [Shipment.from_dict(_item) for _item in obj["shipments"]]
                if obj.get("shipments") is not None
                else None,
                "preJourneyMileage": obj.get("preJourneyMileage"),
                "userCustomData": obj.get("userCustomData"),
                "mass": obj.get("mass"),
                "transportOrder": obj.get("transportOrder"),
                "submissionCoordinates": Coordinates.from_dict(
                    obj["submissionCoordinates"]
                )
                if obj.get("submissionCoordinates") is not None
                else None,
                "viewers": [Viewer.from_dict(_item) for _item in obj["viewers"]]
                if obj.get("viewers") is not None
                else None,
            }
        )
        return _obj
