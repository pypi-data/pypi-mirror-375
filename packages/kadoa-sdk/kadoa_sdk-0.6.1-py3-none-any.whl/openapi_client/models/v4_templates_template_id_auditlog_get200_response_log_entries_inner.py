# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V4TemplatesTemplateIdAuditlogGet200ResponseLogEntriesInner(BaseModel):
    """
    V4TemplatesTemplateIdAuditlogGet200ResponseLogEntriesInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Audit log entry ID")
    operation_type: Optional[StrictStr] = Field(default=None, description="Type of operation performed", alias="operationType")
    user_id: Optional[StrictStr] = Field(default=None, description="ID of the user who performed the operation", alias="userId")
    user_email: Optional[StrictStr] = Field(default=None, description="Email of the user who performed the operation", alias="userEmail")
    previous_value: Optional[Dict[str, Any]] = Field(default=None, description="Previous state of the template", alias="previousValue")
    new_value: Optional[Dict[str, Any]] = Field(default=None, description="New state of the template", alias="newValue")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the operation was performed", alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "operationType", "userId", "userEmail", "previousValue", "newValue", "createdAt"]

    @field_validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATE', 'UPDATE', 'DELETE']):
            raise ValueError("must be one of enum values ('CREATE', 'UPDATE', 'DELETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V4TemplatesTemplateIdAuditlogGet200ResponseLogEntriesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V4TemplatesTemplateIdAuditlogGet200ResponseLogEntriesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "operationType": obj.get("operationType"),
            "userId": obj.get("userId"),
            "userEmail": obj.get("userEmail"),
            "previousValue": obj.get("previousValue"),
            "newValue": obj.get("newValue"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


