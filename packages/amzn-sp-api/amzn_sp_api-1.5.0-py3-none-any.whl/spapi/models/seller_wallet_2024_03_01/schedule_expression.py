# coding: utf-8

"""
    The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).

    The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.

    The version of the OpenAPI document: 2024-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ScheduleExpression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_expression_type': 'ScheduleExpressionType',
        'recurring_frequency': 'RecurringFrequency',
    }

    attribute_map = {
        'schedule_expression_type': 'scheduleExpressionType',
        'recurring_frequency': 'recurringFrequency',
    }

    def __init__(self, schedule_expression_type=None, recurring_frequency=None, _configuration=None):  # noqa: E501
        """ScheduleExpression - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._schedule_expression_type = None
        self._recurring_frequency = None
        self.discriminator = None

        self.schedule_expression_type = schedule_expression_type
        if recurring_frequency is not None:
            self.recurring_frequency = recurring_frequency

    @property
    def schedule_expression_type(self):
        """Gets the schedule_expression_type of this ScheduleExpression.  # noqa: E501


        :return: The schedule_expression_type of this ScheduleExpression.  # noqa: E501
        :rtype: ScheduleExpressionType
        """
        return self._schedule_expression_type

    @schedule_expression_type.setter
    def schedule_expression_type(self, schedule_expression_type):
        """Sets the schedule_expression_type of this ScheduleExpression.


        :param schedule_expression_type: The schedule_expression_type of this ScheduleExpression.  # noqa: E501
        :type: ScheduleExpressionType
        """
        if self._configuration.client_side_validation and schedule_expression_type is None:
            raise ValueError("Invalid value for `schedule_expression_type`, must not be `None`")  # noqa: E501

        self._schedule_expression_type = schedule_expression_type

    @property
    def recurring_frequency(self):
        """Gets the recurring_frequency of this ScheduleExpression.  # noqa: E501


        :return: The recurring_frequency of this ScheduleExpression.  # noqa: E501
        :rtype: RecurringFrequency
        """
        return self._recurring_frequency

    @recurring_frequency.setter
    def recurring_frequency(self, recurring_frequency):
        """Sets the recurring_frequency of this ScheduleExpression.


        :param recurring_frequency: The recurring_frequency of this ScheduleExpression.  # noqa: E501
        :type: RecurringFrequency
        """

        self._recurring_frequency = recurring_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleExpression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleExpression):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScheduleExpression):
            return True

        return self.to_dict() != other.to_dict()
