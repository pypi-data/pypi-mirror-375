# coding: utf-8

"""
    The Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.

    The version of the OpenAPI document: 2024-06-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class AmazonPayContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_name': 'str',
        'order_type': 'str',
        'channel': 'str',
    }

    attribute_map = {
        'store_name': 'storeName',
        'order_type': 'orderType',
        'channel': 'channel',
    }

    def __init__(self, store_name=None, order_type=None, channel=None, _configuration=None):  # noqa: E501
        """AmazonPayContext - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._store_name = None
        self._order_type = None
        self._channel = None
        self.discriminator = None

        if store_name is not None:
            self.store_name = store_name
        if order_type is not None:
            self.order_type = order_type
        if channel is not None:
            self.channel = channel

    @property
    def store_name(self):
        """Gets the store_name of this AmazonPayContext.  # noqa: E501

        Store name related to transaction.  # noqa: E501

        :return: The store_name of this AmazonPayContext.  # noqa: E501
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this AmazonPayContext.

        Store name related to transaction.  # noqa: E501

        :param store_name: The store_name of this AmazonPayContext.  # noqa: E501
        :type: str
        """

        self._store_name = store_name

    @property
    def order_type(self):
        """Gets the order_type of this AmazonPayContext.  # noqa: E501

        Order type of the transaction.  # noqa: E501

        :return: The order_type of this AmazonPayContext.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this AmazonPayContext.

        Order type of the transaction.  # noqa: E501

        :param order_type: The order_type of this AmazonPayContext.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def channel(self):
        """Gets the channel of this AmazonPayContext.  # noqa: E501

        Channel details of related transaction.  # noqa: E501

        :return: The channel of this AmazonPayContext.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AmazonPayContext.

        Channel details of related transaction.  # noqa: E501

        :param channel: The channel of this AmazonPayContext.  # noqa: E501
        :type: str
        """

        self._channel = channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AmazonPayContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmazonPayContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AmazonPayContext):
            return True

        return self.to_dict() != other.to_dict()
