# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ListTransportationOptionsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pagination': 'Pagination',
        'transportation_options': 'List[TransportationOption]',
    }

    attribute_map = {
        'pagination': 'pagination',
        'transportation_options': 'transportationOptions',
    }

    def __init__(self, pagination=None, transportation_options=None, _configuration=None):  # noqa: E501
        """ListTransportationOptionsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._pagination = None
        self._transportation_options = None
        self.discriminator = None

        if pagination is not None:
            self.pagination = pagination
        self.transportation_options = transportation_options

    @property
    def pagination(self):
        """Gets the pagination of this ListTransportationOptionsResponse.  # noqa: E501


        :return: The pagination of this ListTransportationOptionsResponse.  # noqa: E501
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this ListTransportationOptionsResponse.


        :param pagination: The pagination of this ListTransportationOptionsResponse.  # noqa: E501
        :type: Pagination
        """

        self._pagination = pagination

    @property
    def transportation_options(self):
        """Gets the transportation_options of this ListTransportationOptionsResponse.  # noqa: E501

        Transportation options generated for the placement option.  # noqa: E501

        :return: The transportation_options of this ListTransportationOptionsResponse.  # noqa: E501
        :rtype: List[TransportationOption]
        """
        return self._transportation_options

    @transportation_options.setter
    def transportation_options(self, transportation_options):
        """Sets the transportation_options of this ListTransportationOptionsResponse.

        Transportation options generated for the placement option.  # noqa: E501

        :param transportation_options: The transportation_options of this ListTransportationOptionsResponse.  # noqa: E501
        :type: List[TransportationOption]
        """
        if self._configuration.client_side_validation and transportation_options is None:
            raise ValueError("Invalid value for `transportation_options`, must not be `None`")  # noqa: E501

        self._transportation_options = transportation_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListTransportationOptionsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListTransportationOptionsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListTransportationOptionsResponse):
            return True

        return self.to_dict() != other.to_dict()
