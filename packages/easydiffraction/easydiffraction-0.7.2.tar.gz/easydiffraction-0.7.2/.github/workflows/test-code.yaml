# This is the main workflow for testing the code before and after
# packaging it.
# The workflow is divided into three jobs:
# 1. code-quality:
#    - Check the validity of pyproject.toml
#    - Check code linting
#    - Check code formatting
#    - Check formatting of Markdown, YAML, TOML, etc. files
# 2. test-source:
#    - Test the code base against the latest code in the repository
#    - Create the Python package
#    - Upload the Python package for the next job
# 3. test-package:
#    - Download the Python package (including extra files) from the previous job
#    - Install the downloaded Python package
#    - Test the code base against the installed package

name: Test code and package

on:
  # Trigger the workflow on push
  push:
    # Every branch
    branches: ['**']
    # But do not run this workflow on creating a new tag starting with
    # 'v', e.g. 'v1.0.3' (see publish-pypi.yml)
    tags-ignore: ['v*']
  # Trigger the workflow on pull request
  pull_request:
    branches: ['**']
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow only one concurrent workflow, skipping runs queued between the run
# in-progress and latest queued. And cancel in-progress runs.
concurrency:
  group:
    ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Set the environment variables to be used in all jobs defined in this workflow
env:
  # CI_BRANCH - the branch name (used in mkdocs.yml)
  # NOTEBOOKS_DIR - the directory containing the Jupyter notebooks (used in mkdocs.yml)
  CI_BRANCH: ${{ github.head_ref || github.ref_name }}
  NOTEBOOKS_DIR: tutorials

jobs:
  # Job 1: Check code quality and consistency
  code-quality:
    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    outputs:
      pytest-marks: ${{ steps.set-mark.outputs.pytest_marks }}

    steps:
      # Determine if functional tests should be run fully or only the fast ones
      # (to save time on branches other than master and develop)
      - name: Set mark for functional tests
        id: set-mark
        run: |
          if [[ "${{ env.CI_BRANCH }}" == "master" || "${{ env.CI_BRANCH }}" == "develop" ]]; then
            echo "pytest_marks=" >> $GITHUB_OUTPUT
          else
            echo "pytest_marks=-m 'fast'" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up pixi (incl. environments and dependencies)
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          environments: >-
            py313-dev
          activate-environment: py313-dev
          run-install: true
          frozen: true
          cache: false
          post-cleanup: false

      - name: Install extra tools (Prettier via GitHub npm mirror)
        shell: bash
        run: |
          pixi run npm config set registry https://registry.npmjs.org/
          pixi run prettier-install

      # Check the validity of pyproject.toml
      - name: Check validity of pyproject.toml
        id: check_pyproject
        continue-on-error: true
        shell: bash
        run: pixi run pyproject-check

      # Check code linting with Ruff in the project root
      - name: Check code linting
        id: check_code_linting
        continue-on-error: true
        shell: bash
        run: pixi run py-lint-check

      - name: Suggestion to fix code linting issues (*.py files)
        if: steps.check_code_linting.outcome == 'failure'
        shell: bash
        run:
          echo "In project root run 'pixi run py-lint-fix' and commit changes"

      # Check code formatting with Ruff in the project root
      - name: Check code formatting
        id: check_code_formatting
        continue-on-error: true
        shell: bash
        run: pixi run py-format-check

      - name: Suggestion to fix code formatting issues (*.py files)
        if: steps.check_code_formatting.outcome == 'failure'
        shell: bash
        run:
          echo "In project root run 'pixi run py-format-fix' and commit changes"

      # Check formatting of Markdown, YAML, TOML, etc. files with Prettier in
      # the project root
      - name: Check formatting of Markdown, YAML, TOML, etc. files
        id: check_others_formatting
        continue-on-error: true
        shell: bash
        run: pixi run nonpy-format-check

      - name: Suggestion to fix non-code formatting issues (*.md, *.yml, etc.)
        if: steps.check_others_formatting.outcome == 'failure'
        shell: bash
        run:
          echo "In project root run 'pixi run nonpy-format-fix' and commit
          changes"

      - name: Force fail if any of the previous steps failed
        if: |
          steps.check_pyproject.outcome == 'failure' ||
          steps.check_code_linting.outcome == 'failure' ||
          steps.check_code_formatting.outcome == 'failure' ||
          steps.check_others_formatting.outcome == 'failure'
        run: exit 1

  # Job 2: Test code
  # TODO: Add coverage reporting with upload to Codecov?
  test-source:
    needs: code-quality # previous job needs to be finished first

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-13, macos-14, windows-2022]

    runs-on: ${{ matrix.os }}

    env:
      PIXI_ENVS: 'py311-dev py312-dev py313-dev'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: '0' # full history with tags to get the version number by versioningit

      - name: Set up pixi (incl. environments and dependencies)
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          environments: ${{ env.PIXI_ENVS }}
          run-install: true
          frozen: true
          cache: false
          post-cleanup: false

      - name: Run unit tests
        shell: bash
        run: |
          for env in ${{ env.PIXI_ENVS }}; do
            echo "ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹   Current env: $env   ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹"
            pixi run -e $env unit-tests
          done

      - name:
          Run functional tests ${{ needs.code-quality.outputs.pytest-marks }}
        shell: bash
        run: |
          for env in ${{ env.PIXI_ENVS }}; do
            echo "ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹   Current env: $env   ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹"
            pixi run -e $env func-tests "${{ needs.code-quality.outputs.pytest-marks }}"
          done

      # Delete all local tags when not on a tagged commit to force versioningit
      # to fall back to the configured default-tag, which is '999.0.0' in our case.
      # This is needed for testing the package in the next job, as its version
      # must be higher than the PyPI version for pip to prefer the local version.
      - name: Force using versioningit default tag (non tagged release)
        if: startsWith(github.ref , 'refs/tags/v') != true
        run: git tag --delete $(git tag)

      - name: Create Python package
        shell: bash
        run: |
          for env in ${{ env.PIXI_ENVS }}; do
            echo "ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹   Current env: $env   ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹"
            pixi run -e $env dist-build
            env_prefix="${env%%-*}"
            echo "ðŸ“¦ Moving built wheel to dist/$env_prefix/"
            pixi run mkdir -p dist/$env_prefix
            pixi run mv dist/*.whl dist/$env_prefix/
          done

      # More than one file/dir need to be specified in 'path', to preserve the
      # structure of the dist/ directory, not only its contents.
      - name: Upload Python package for the next job
        uses: actions/upload-artifact@v4
        with:
          name: edl_${{ matrix.os }}_${{ runner.arch }}
          path: |
            dist/
            tests/
            pixi/wheel/pixi.toml
          if-no-files-found: 'error'
          compression-level: 0

  # Job 3: Test the package
  test-package:
    needs: [code-quality, test-source] # depend on both previous jobs

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-13, macos-14, windows-2022]

    runs-on: ${{ matrix.os }}

    env:
      PIXI_ENVS: 'py311-wheel py312-wheel py313-wheel'

    steps:
      - name:
          Download zipped Python package (incl. extra files) from previous job
        uses: actions/download-artifact@v4
        with: # name or path are taken from the upload step of the previous job
          name: edl_${{ matrix.os }}_${{ runner.arch }}
          path: . # directory to extract downloaded zipped artifacts

      - name: Move pixi/wheel/pixi.toml to project root
        shell: bash
        run: mv pixi/wheel/pixi.toml .

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          environments: ${{ env.PIXI_ENVS }}
          run-install: true
          cache: false
          post-cleanup: false

      - name: Add easydiffraction package from the built wheel
        shell: bash
        run: |
          for env in ${{ env.PIXI_ENVS }}; do
            echo "ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹   Current env: $env   ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹"
            env_prefix="${env%%-*}"
            echo "ðŸ“¦ Looking for wheel in dist/$env_prefix/"
            whl_path="$(python3 -c "import pathlib; w = sorted(pathlib.Path('dist/${env_prefix}').glob('*.whl')); print(w[0].resolve().as_uri())")"
            echo "ðŸ“¦ Adding easydiffraction from: $whl_path"
            pixi add --feature $env_prefix --pypi "easydiffraction[dev,visualization] @ $whl_path"
            pixi run -e $env easydiffraction version
          done

      - name: Run unit tests
        shell: bash
        run: |
          for env in ${{ env.PIXI_ENVS }}; do
            echo "ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹   Current env: $env   ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹"
            pixi run -e $env unit-tests
          done

      - name:
          Run functional tests ${{ needs.code-quality.outputs.pytest-marks }}
        shell: bash
        run: |
          for env in ${{ env.PIXI_ENVS }}; do
            echo "ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹   Current env: $env   ðŸ”¹ðŸ”¸ðŸ”¹ðŸ”¸ðŸ”¹"
            pixi run -e $env func-tests "${{ needs.code-quality.outputs.pytest-marks }}"
          done
