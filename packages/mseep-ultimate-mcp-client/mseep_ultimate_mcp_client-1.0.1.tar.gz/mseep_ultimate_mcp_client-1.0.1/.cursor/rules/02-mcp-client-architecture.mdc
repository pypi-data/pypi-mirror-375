---
description: 
globs: 
alwaysApply: false
---
# MCP Client Architecture

The MCP Client is built around several key architectural components as found in [mcp_client.py](mdc:mcp_client.py).

## Key Classes

### MCPClient
The main application class that orchestrates UI loops, command handling, and core logic.

### ServerManager
Handles server configuration, lifecycle management (connecting, disconnecting, restarting), discovery mechanisms, capability aggregation, and server process management.

### RobustStdioSession
A custom implementation of the MCP ClientSession specifically for stdio servers, with noise filtering, direct future resolution, and process lifecycle management.

### ConversationGraph
Manages the non-linear, branching conversation structure using ConversationNode objects, with persistence to/from JSON.

### ToolCache
Implements caching logic using diskcache for persistence and an in-memory layer for speed, with TTL management.

## Interfaces

### CLI/TUI
- Uses Typer for command-line interface
- Rich for formatted console output and TUI dashboard
- Interactive shell with commands (/servers, /tools, etc.)

### Web UI
- FastAPI backend with REST API
- WebSockets for bidirectional real-time chat
- Alpine.js, Tailwind CSS, and DaisyUI for frontend
- Multiple themes with light/dark mode support

## Resilience Features

### STDIO Safety Mechanisms
- StdioProtectionWrapper: Wraps sys.stdout to intercept writes
- safe_stdout(): Context manager for critical operations
- get_safe_console(): Utility for correct stream usage

### Error Handling
- @retry_with_circuit_breaker decorator for retries with exponential backoff
- @with_tool_error_handling for standardized error reporting
- Structured try/except/finally blocks throughout
