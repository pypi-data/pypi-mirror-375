---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/simple_math/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
calculator = _cribo.types.SimpleNamespace(__name__='calculator')
def add(a, b):
    """Add two numbers."""
    return a + b
def multiply(a, b):
    """Multiply two numbers."""
    return a * b
calculator.add = add
calculator.multiply = multiply
utils = _cribo.types.SimpleNamespace(__name__='utils')
def format_result(operation, result):
    """Format operation result for display."""
    return f"{operation}: {result}"
utils.format_result = format_result
def main():
    result1 = add(5, 3)
    result2 = multiply(4, 7)
    print(format_result("Addition", result1))
    print(format_result("Multiplication", result2))
if __name__ == "__main__":
    main()
