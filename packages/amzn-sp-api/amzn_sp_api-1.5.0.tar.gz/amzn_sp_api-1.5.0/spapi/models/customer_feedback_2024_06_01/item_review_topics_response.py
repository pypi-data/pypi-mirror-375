# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ItemReviewTopicsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asin': 'str',
        'item_name': 'str',
        'marketplace_id': 'str',
        'country_code': 'str',
        'date_range': 'DateRange',
        'topics': 'ItemReviewTopics',
    }

    attribute_map = {
        'asin': 'asin',
        'item_name': 'itemName',
        'marketplace_id': 'marketplaceId',
        'country_code': 'countryCode',
        'date_range': 'dateRange',
        'topics': 'topics',
    }

    def __init__(self, asin=None, item_name=None, marketplace_id=None, country_code=None, date_range=None, topics=None, _configuration=None):  # noqa: E501
        """ItemReviewTopicsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asin = None
        self._item_name = None
        self._marketplace_id = None
        self._country_code = None
        self._date_range = None
        self._topics = None
        self.discriminator = None

        self.asin = asin
        self.item_name = item_name
        self.marketplace_id = marketplace_id
        self.country_code = country_code
        self.date_range = date_range
        self.topics = topics

    @property
    def asin(self):
        """Gets the asin of this ItemReviewTopicsResponse.  # noqa: E501

        The requested ASIN. The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.  # noqa: E501

        :return: The asin of this ItemReviewTopicsResponse.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this ItemReviewTopicsResponse.

        The requested ASIN. The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.  # noqa: E501

        :param asin: The asin of this ItemReviewTopicsResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and asin is None:
            raise ValueError("Invalid value for `asin`, must not be `None`")  # noqa: E501

        self._asin = asin

    @property
    def item_name(self):
        """Gets the item_name of this ItemReviewTopicsResponse.  # noqa: E501

        The product title of the requested ASIN.  # noqa: E501

        :return: The item_name of this ItemReviewTopicsResponse.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this ItemReviewTopicsResponse.

        The product title of the requested ASIN.  # noqa: E501

        :param item_name: The item_name of this ItemReviewTopicsResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and item_name is None:
            raise ValueError("Invalid value for `item_name`, must not be `None`")  # noqa: E501

        self._item_name = item_name

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this ItemReviewTopicsResponse.  # noqa: E501

        The requested marketplace id.  # noqa: E501

        :return: The marketplace_id of this ItemReviewTopicsResponse.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this ItemReviewTopicsResponse.

        The requested marketplace id.  # noqa: E501

        :param marketplace_id: The marketplace_id of this ItemReviewTopicsResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def country_code(self):
        """Gets the country_code of this ItemReviewTopicsResponse.  # noqa: E501

        The two digit country code of the requested marketplace id, in ISO 3166-1 alpha-2 format.  # noqa: E501

        :return: The country_code of this ItemReviewTopicsResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ItemReviewTopicsResponse.

        The two digit country code of the requested marketplace id, in ISO 3166-1 alpha-2 format.  # noqa: E501

        :param country_code: The country_code of this ItemReviewTopicsResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def date_range(self):
        """Gets the date_range of this ItemReviewTopicsResponse.  # noqa: E501


        :return: The date_range of this ItemReviewTopicsResponse.  # noqa: E501
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this ItemReviewTopicsResponse.


        :param date_range: The date_range of this ItemReviewTopicsResponse.  # noqa: E501
        :type: DateRange
        """
        if self._configuration.client_side_validation and date_range is None:
            raise ValueError("Invalid value for `date_range`, must not be `None`")  # noqa: E501

        self._date_range = date_range

    @property
    def topics(self):
        """Gets the topics of this ItemReviewTopicsResponse.  # noqa: E501


        :return: The topics of this ItemReviewTopicsResponse.  # noqa: E501
        :rtype: ItemReviewTopics
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this ItemReviewTopicsResponse.


        :param topics: The topics of this ItemReviewTopicsResponse.  # noqa: E501
        :type: ItemReviewTopics
        """
        if self._configuration.client_side_validation and topics is None:
            raise ValueError("Invalid value for `topics`, must not be `None`")  # noqa: E501

        self._topics = topics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemReviewTopicsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemReviewTopicsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemReviewTopicsResponse):
            return True

        return self.to_dict() != other.to_dict()
