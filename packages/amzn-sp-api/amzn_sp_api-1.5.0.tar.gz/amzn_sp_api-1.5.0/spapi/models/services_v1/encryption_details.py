# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class EncryptionDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'standard': 'str',
        'initialization_vector': 'str',
        'key': 'str',
    }

    attribute_map = {
        'standard': 'standard',
        'initialization_vector': 'initializationVector',
        'key': 'key',
    }

    def __init__(self, standard=None, initialization_vector=None, key=None, _configuration=None):  # noqa: E501
        """EncryptionDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._standard = None
        self._initialization_vector = None
        self._key = None
        self.discriminator = None

        self.standard = standard
        self.initialization_vector = initialization_vector
        self.key = key

    @property
    def standard(self):
        """Gets the standard of this EncryptionDetails.  # noqa: E501

        The encryption standard required to encrypt or decrypt the document contents.  # noqa: E501

        :return: The standard of this EncryptionDetails.  # noqa: E501
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this EncryptionDetails.

        The encryption standard required to encrypt or decrypt the document contents.  # noqa: E501

        :param standard: The standard of this EncryptionDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and standard is None:
            raise ValueError("Invalid value for `standard`, must not be `None`")  # noqa: E501
        allowed_values = ["AES"]  # noqa: E501
        if (self._configuration.client_side_validation and
                standard not in allowed_values):
            raise ValueError(
                "Invalid value for `standard` ({0}), must be one of {1}"  # noqa: E501
                .format(standard, allowed_values)
            )

        self._standard = standard

    @property
    def initialization_vector(self):
        """Gets the initialization_vector of this EncryptionDetails.  # noqa: E501

        The vector to encrypt or decrypt the document contents using Cipher Block Chaining (CBC).  # noqa: E501

        :return: The initialization_vector of this EncryptionDetails.  # noqa: E501
        :rtype: str
        """
        return self._initialization_vector

    @initialization_vector.setter
    def initialization_vector(self, initialization_vector):
        """Sets the initialization_vector of this EncryptionDetails.

        The vector to encrypt or decrypt the document contents using Cipher Block Chaining (CBC).  # noqa: E501

        :param initialization_vector: The initialization_vector of this EncryptionDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and initialization_vector is None:
            raise ValueError("Invalid value for `initialization_vector`, must not be `None`")  # noqa: E501

        self._initialization_vector = initialization_vector

    @property
    def key(self):
        """Gets the key of this EncryptionDetails.  # noqa: E501

        The encryption key used to encrypt or decrypt the document contents.  # noqa: E501

        :return: The key of this EncryptionDetails.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EncryptionDetails.

        The encryption key used to encrypt or decrypt the document contents.  # noqa: E501

        :param key: The key of this EncryptionDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EncryptionDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EncryptionDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EncryptionDetails):
            return True

        return self.to_dict() != other.to_dict()
