# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GRUOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GRUOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGRUOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GRUOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # GRUOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GRUOptions
    def FusedActivationFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # GRUOptions
    def ReturnSequences(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GRUOptions
    def TimeMajor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(3)
def GRUOptionsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddFusedActivationFunction(builder, fusedActivationFunction): builder.PrependInt8Slot(0, fusedActivationFunction, 0)
def GRUOptionsAddFusedActivationFunction(builder, fusedActivationFunction):
    """This method is deprecated. Please switch to AddFusedActivationFunction."""
    return AddFusedActivationFunction(builder, fusedActivationFunction)
def AddReturnSequences(builder, returnSequences): builder.PrependBoolSlot(1, returnSequences, 0)
def GRUOptionsAddReturnSequences(builder, returnSequences):
    """This method is deprecated. Please switch to AddReturnSequences."""
    return AddReturnSequences(builder, returnSequences)
def AddTimeMajor(builder, timeMajor): builder.PrependBoolSlot(2, timeMajor, 0)
def GRUOptionsAddTimeMajor(builder, timeMajor):
    """This method is deprecated. Please switch to AddTimeMajor."""
    return AddTimeMajor(builder, timeMajor)
def End(builder): return builder.EndObject()
def GRUOptionsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class GRUOptionsT(object):

    # GRUOptionsT
    def __init__(self):
        self.fusedActivationFunction = 0  # type: int
        self.returnSequences = False  # type: bool
        self.timeMajor = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gRUOptions = GRUOptions()
        gRUOptions.Init(buf, pos)
        return cls.InitFromObj(gRUOptions)

    @classmethod
    def InitFromObj(cls, gRUOptions):
        x = GRUOptionsT()
        x._UnPack(gRUOptions)
        return x

    # GRUOptionsT
    def _UnPack(self, gRUOptions):
        if gRUOptions is None:
            return
        self.fusedActivationFunction = gRUOptions.FusedActivationFunction()
        self.returnSequences = gRUOptions.ReturnSequences()
        self.timeMajor = gRUOptions.TimeMajor()

    # GRUOptionsT
    def Pack(self, builder):
        Start(builder)
        AddFusedActivationFunction(builder, self.fusedActivationFunction)
        AddReturnSequences(builder, self.returnSequences)
        AddTimeMajor(builder, self.timeMajor)
        gRUOptions = End(builder)
        return gRUOptions
