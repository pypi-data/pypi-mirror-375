# coding: utf-8

"""
    Selling Partner API for Easy Ship

    Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).

    The version of the OpenAPI document: 2022-03-23
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class UpdatePackageDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scheduled_package_id': 'ScheduledPackageId',
        'package_time_slot': 'TimeSlot',
    }

    attribute_map = {
        'scheduled_package_id': 'scheduledPackageId',
        'package_time_slot': 'packageTimeSlot',
    }

    def __init__(self, scheduled_package_id=None, package_time_slot=None, _configuration=None):  # noqa: E501
        """UpdatePackageDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._scheduled_package_id = None
        self._package_time_slot = None
        self.discriminator = None

        self.scheduled_package_id = scheduled_package_id
        self.package_time_slot = package_time_slot

    @property
    def scheduled_package_id(self):
        """Gets the scheduled_package_id of this UpdatePackageDetails.  # noqa: E501


        :return: The scheduled_package_id of this UpdatePackageDetails.  # noqa: E501
        :rtype: ScheduledPackageId
        """
        return self._scheduled_package_id

    @scheduled_package_id.setter
    def scheduled_package_id(self, scheduled_package_id):
        """Sets the scheduled_package_id of this UpdatePackageDetails.


        :param scheduled_package_id: The scheduled_package_id of this UpdatePackageDetails.  # noqa: E501
        :type: ScheduledPackageId
        """
        if self._configuration.client_side_validation and scheduled_package_id is None:
            raise ValueError("Invalid value for `scheduled_package_id`, must not be `None`")  # noqa: E501

        self._scheduled_package_id = scheduled_package_id

    @property
    def package_time_slot(self):
        """Gets the package_time_slot of this UpdatePackageDetails.  # noqa: E501


        :return: The package_time_slot of this UpdatePackageDetails.  # noqa: E501
        :rtype: TimeSlot
        """
        return self._package_time_slot

    @package_time_slot.setter
    def package_time_slot(self, package_time_slot):
        """Sets the package_time_slot of this UpdatePackageDetails.


        :param package_time_slot: The package_time_slot of this UpdatePackageDetails.  # noqa: E501
        :type: TimeSlot
        """
        if self._configuration.client_side_validation and package_time_slot is None:
            raise ValueError("Invalid value for `package_time_slot`, must not be `None`")  # noqa: E501

        self._package_time_slot = package_time_slot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePackageDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePackageDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdatePackageDetails):
            return True

        return self.to_dict() != other.to_dict()
