# coding: utf-8

"""
    The Selling Partner API for third party application integrations.

    With the AppIntegrations API v2024-04-01, you can send notifications to Amazon Selling Partners and display the notifications in Seller Central.

    The version of the OpenAPI document: 2024-04-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CreateNotificationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_id': 'str',
        'notification_parameters': 'Dict[str, object]',
        'marketplace_id': 'str',
    }

    attribute_map = {
        'template_id': 'templateId',
        'notification_parameters': 'notificationParameters',
        'marketplace_id': 'marketplaceId',
    }

    def __init__(self, template_id=None, notification_parameters=None, marketplace_id=None, _configuration=None):  # noqa: E501
        """CreateNotificationRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._template_id = None
        self._notification_parameters = None
        self._marketplace_id = None
        self.discriminator = None

        self.template_id = template_id
        self.notification_parameters = notification_parameters
        if marketplace_id is not None:
            self.marketplace_id = marketplace_id

    @property
    def template_id(self):
        """Gets the template_id of this CreateNotificationRequest.  # noqa: E501

        The unique identifier of the notification template you used to onboard your application.  # noqa: E501

        :return: The template_id of this CreateNotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CreateNotificationRequest.

        The unique identifier of the notification template you used to onboard your application.  # noqa: E501

        :param template_id: The template_id of this CreateNotificationRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def notification_parameters(self):
        """Gets the notification_parameters of this CreateNotificationRequest.  # noqa: E501

        The dynamic parameters required by the notification templated specified by `templateId`.  # noqa: E501

        :return: The notification_parameters of this CreateNotificationRequest.  # noqa: E501
        :rtype: Dict[str, object]
        """
        return self._notification_parameters

    @notification_parameters.setter
    def notification_parameters(self, notification_parameters):
        """Sets the notification_parameters of this CreateNotificationRequest.

        The dynamic parameters required by the notification templated specified by `templateId`.  # noqa: E501

        :param notification_parameters: The notification_parameters of this CreateNotificationRequest.  # noqa: E501
        :type: Dict[str, object]
        """
        if self._configuration.client_side_validation and notification_parameters is None:
            raise ValueError("Invalid value for `notification_parameters`, must not be `None`")  # noqa: E501

        self._notification_parameters = notification_parameters

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this CreateNotificationRequest.  # noqa: E501

        An encrypted marketplace identifier for the posted notification.  # noqa: E501

        :return: The marketplace_id of this CreateNotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this CreateNotificationRequest.

        An encrypted marketplace identifier for the posted notification.  # noqa: E501

        :param marketplace_id: The marketplace_id of this CreateNotificationRequest.  # noqa: E501
        :type: str
        """

        self._marketplace_id = marketplace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateNotificationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateNotificationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateNotificationRequest):
            return True

        return self.to_dict() != other.to_dict()
