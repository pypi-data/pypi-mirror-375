# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class TimeSeriesMeasurement(str, Enum):
    """
    Time Series Measurement Values Time series measurements must be provided from the following list of possible values. ProdX forces standardization to enable high frequency data to be used in modeling and comparative visualization.  Rates  OILRATE - STB/d GASRATE - Mscf/d GASLIFTINJECTIONRATE - Mscf/d (actual gas lift injection rate) GASLIFTINJECTIONRATESETPOINT - Mscf/d (control system gas lift injection rate setpoint) WATERRATE - STB/d SANDRATE - g/s  Pressures  WHP - psig (wellhead/tubing pressure) CHP - psig (casing pressure) DHGP - psig (downhole gauge pressure) DHGP_DISCHARGE - psig (downhole gauge pressure at pump discharge) PRESSUREUPSTREAM - psig (upstream choke pressure / flowine pressure) PRESSUREDOWNSTREAM - psig (downstream choke pressure tubing side) PRESSURE_DOWNSTREAM_ANNULUS - psig (downstream choke pressure annulus side) HPSEPARATORPRESSURE - psig LPSEPARATORPRESSURE - psig  Temperatures  WHT - degF (wellhead/tubing temp) CHT - degF (casing temp) DHGT - degF (downhole gauge temp) FLOWLINETEMPERATURE - degF  Other  CHOKE - % WELLCYCLINGFLAG - unitless (flag indicating the cycling status of the well)  ESP Drive  ESP_VSD_HEAT_SINK_TEMP - degF ESP_VSD_BUS_VOLTAGE - volts ESP_VSD_CURRENT - amps ESP_VSD_VOLTAGE - volts  ESP Motor  ESP_MOTOR_CURRENT - amps ESP_MOTOR_FREQUENCY - hz ESP_MOTOR_TEMPERATURE - degF ESP_MOTOR_VOLTAGE - volts  ESP General ESP_INTAKE_PRESSURE - psig ESP_DISCHARGE_PRESSURE - psig ESP_FLUID_TEMPERATURE - degF ESP_RUNTIME - hours (hours of cumulative runtime today) ESP_VIBRATION_X - g ESP_VIBRATION_Y - g
    """

    """
    allowed enum values
    """
    OILRATE = 'OILRATE'
    GASRATE = 'GASRATE'
    GASLIFTINJECTIONRATE = 'GASLIFTINJECTIONRATE'
    GASLIFTINJECTIONRATESETPOINT = 'GASLIFTINJECTIONRATESETPOINT'
    WATERRATE = 'WATERRATE'
    SANDRATE = 'SANDRATE'
    WHP = 'WHP'
    CHP = 'CHP'
    DHGP = 'DHGP'
    DHGP_DISCHARGE = 'DHGP_DISCHARGE'
    PRESSUREUPSTREAM = 'PRESSUREUPSTREAM'
    PRESSUREDOWNSTREAM = 'PRESSUREDOWNSTREAM'
    PRESSURE_DOWNSTREAM_ANNULUS = 'PRESSURE_DOWNSTREAM_ANNULUS'
    HPSEPARATORPRESSURE = 'HPSEPARATORPRESSURE'
    LPSEPARATORPRESSURE = 'LPSEPARATORPRESSURE'
    WHT = 'WHT'
    CHT = 'CHT'
    DHGT = 'DHGT'
    FLOWLINETEMPERATURE = 'FLOWLINETEMPERATURE'
    CHOKE = 'CHOKE'
    WELLCYCLINGFLAG = 'WELLCYCLINGFLAG'
    ESP_VSD_HEAT_SINK_TEMP = 'ESP_VSD_HEAT_SINK_TEMP'
    ESP_VSD_BUS_VOLTAGE = 'ESP_VSD_BUS_VOLTAGE'
    ESP_VSD_CURRENT = 'ESP_VSD_CURRENT'
    ESP_VSD_VOLTAGE = 'ESP_VSD_VOLTAGE'
    ESP_MOTOR_CURRENT = 'ESP_MOTOR_CURRENT'
    ESP_MOTOR_FREQUENCY = 'ESP_MOTOR_FREQUENCY'
    ESP_MOTOR_TEMPERATURE = 'ESP_MOTOR_TEMPERATURE'
    ESP_MOTOR_VOLTAGE = 'ESP_MOTOR_VOLTAGE'
    ESP_INTAKE_PRESSURE = 'ESP_INTAKE_PRESSURE'
    ESP_DISCHARGE_PRESSURE = 'ESP_DISCHARGE_PRESSURE'
    ESP_FLUID_TEMPERATURE = 'ESP_FLUID_TEMPERATURE'
    ESP_RUNTIME = 'ESP_RUNTIME'
    ESP_VIBRATION_X = 'ESP_VIBRATION_X'
    ESP_VIBRATION_Y = 'ESP_VIBRATION_Y'
    SANDIND = 'SANDIND'
    CONDRATE = 'CONDRATE'
    FLOWLINEPRESSURE = 'FLOWLINEPRESSURE'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TimeSeriesMeasurement from a JSON string"""
        return cls(json.loads(json_str))


