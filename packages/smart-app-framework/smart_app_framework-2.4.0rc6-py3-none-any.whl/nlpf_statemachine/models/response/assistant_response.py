"""Модель ответа от ассистента."""

from typing import List, Optional, Union

from pydantic import BaseModel, Field

from nlpf_statemachine.models.enums import ResponseMessageName, TextBubbleExpandPolicy
from .base_response import Response


class AssistantCommand(BaseModel):
    """
    # Описание модели AssistantCommand.

    Модель команды от ассистента на клиент.
    Базовая модель для переопределения.
    """

    command: str
    """Наименование команды"""


class Emotion(BaseModel):
    """
    # Описание модели Emotion.

    Модель для описания эмоций.
    Идентификатор эмоции, определяющий эмоцию персонажа.

    Возможные значения:

    * `igrivost` --- анимация игривости, которую ассистент может испытывать в ответ на дружеские шутки
        и подколки пользователя;
    * `udovolstvie` --- анимация удовольствия;
    * `podavleniye_gneva` --- анимация подавляемого раздражения на отрицательно окрашенные реплики в адрес ассистента;
    * `smushchennaya_ulibka` --- анимация смущения, например, в ответ на похвалу;
    * `simpatiya` --- анимация симпатии в ответ на положительно окрашенные реплики;
    * `oups` --- анимация неловкости в ответ на лёгкое раздражение или неудобные вопросы пользователя.
        Например, при вопросе вида "Почему такие низкие ставки по вкладам?";
    * `laugh` --- анимация смеха над шуткой пользователя;
    * `ok_prinyato` --- анимация исполнения запроса;
    * `bespokoistvo` --- анимация беспокойства, например, при жалобе пользователя на самочувствие;
    * `predvkusheniye` --- анимация возбуждённого ожидания следующей реплики пользователя;
    * `vinovatiy` --- анимация вины, например, если в приложении произошла ошибка;
    * `zhdu_otvet` --- анимация ожидания реакции от пользователя, например, ответа на заданный вопрос;
    * `zadumalsa` --- анимация размышление над репликой пользователя, например, если её не удалось распознать;
    * `neznayu` --- анимация отсутствия ответа.
    * `nedoumenie` --- анимация сомнения, например, когда не удаётся точно распосзнать реплику.
    * `nedovolstvo` --- анимация негативной реакции в ответ на реплику
    * `nesoglasie` --- анимация несогласия с пользователем.
    * `pechal` --- анимация грусти и тоскливого настроения.
    * `radost` --- анимация радости или удовлетворения действиями или репликами пользователя.
    * `sochuvstvie` --- анимация сопереживания или выражения участия в проблемах пользователя.
    * `strakh` --- анимация испуга.
    * `zainteresovannost` --- анимация проявления интереса или любопытства по отношению к действиям
        или репликам пользователя.
    """

    emotionId: str
    """ID-эмоции"""


class BaseCommand(BaseModel):
    """
    # Описание модели SmartAppCommand.

    Модель команды smart_app_data.
    """

    type: str
    "Тип команды"


class SmartAppDataCommand(BaseCommand):
    """
    # Описание модели SmartAppCommand.

    Модель команды smart_app_data.
    """

    type: str = "smart_app_data"
    "Тип команды"
    smart_app_data: AssistantCommand
    """Команда для клиента типа smart_app_data"""


class CanvasAppItem(BaseModel):
    """
    # Описание модели CanvasAppCommand.

    Данная команда лежит в списке items для указания необходимых действий фронту.
    """

    command: BaseCommand
    """Команда на клиент (базвый уровень)"""


class TextBubble(BaseModel):
    """
    # Описание модели TextBubble.
    """

    text: str
    """
    Текст, который отобразит ассистент. Максимальная длина: не более 250 символов.
    """
    markdown: bool = Field(default=False)
    """
    Указывает, что текст содержит маркдаун-разметку, которую необходимо обработать.
    Если поле отсутствует, применяется значение false и текст отображается в исходном виде.
    """
    expand_policy: str = Field(default=TextBubbleExpandPolicy.AUTO_EXPAND)
    """
    Поведение шторки ассистента. Параметр актуален при работе с ассистентом на наших устройствах.

    Возможные значения:

    * `auto_expand` --— шторка будет автоматически разворачиваться,
      если полученный текст не помещается в свёрнутой шторке;
    * `force_expand` —-- шторка развернётся независимо от того, помещается полученный текст в свёрнутой шторке или нет;
    * `preserve_panel_state` --— сохраняет текущее состояние шторки независимо от длины текста.
    По умолчанию auto_expand.
    """


class Bubble(BaseModel):
    """
    # Описание модели Bubble.
    """

    bubble: TextBubble
    """Набор полей текстового ответа."""


class ASRHintsEOUPhraseMatch(BaseModel):
    """
    # Описание модели ASRHints.

    Меняет настройку системы распознавания конца фразы (End of Utterance --- eou).

    Данный хинт позволяет не прерывать речь пользователя, пока он говорит ожидаемую от него фразу,
    а также быстро закончить распознавание после окончания фразы пользователя
    """

    regex: str
    """Регулярное выражение"""


class ASRHints(BaseModel):
    """
    # Описание модели ASRHints.
    """

    words: List[str] = Field(default_factory=list)
    """
    Позволяет использовать список слов или фраз, распознавание которых мы хотим усилить.
    Здесь можно перечислить слова, которые с высокой вероятностью будет произносить пользователь,
    отвечая ассистенту в приложении.
    """
    enable_letters: Optional[bool] = Field(default=None)
    """Позволяет включить модель коротких фраз, тем самым улучшить распознавание отдельных букв и коротких слов"""
    nospeechtimeout: Optional[int] = Field(default=None)
    """
    Меняет интервал ожидания речи пользователя. Возможные значения от 2 до 20 секунд. По умолчанию стоит 7 секунд
    """
    eou_timeout: Optional[int] = Field(default=None)
    """
    Меняет настройку системы распознавания конца фразы (End of Utterance --- eou).
    Система закончит распознавать речь, как только от конца фразы, определенного ею, пройдет столько секунд,
    сколько установлено в этом параметре. Возможные значения от 0.5 до 5 секунд.
    По умолчанию распознавание конца фразы срабатывает после 1 секунды.
    """
    eou_phrase_match: Optional[ASRHintsEOUPhraseMatch] = Field(default=None)
    """
    Использует регулярные выражения при распознавании конца фразы.
    Данный хинт позволяет не прерывать речь пользователя, пока он говорит ожидаемую от него фразу,
    а также быстро закончить распознавание после окончания фразы пользователя
    """


class Button(BaseModel):
    """
    # Описание модели Button.
    """

    title: str
    """Название кнопки, которое отображается в интерфейсе ассистента"""


class AssistantResponsePayload(BaseModel):
    """
    # Описание модели AssistantResponsePayload.

    Модель для описания payload ответа от ассистента.
    """

    pronounceText: Optional[str] = Field(default=None)
    """
    Текст, который ассистент озвучит пользователю.

    В тексте можно использовать SSML-разметку, если в поле pronounceTextType указать значение application/ssml.

    Используйте разметку синтеза речи (тег `audio`), чтобы добавлять звуки в смартап.
    """
    pronounceTextType: Optional[str] = Field(default=None)
    """
    Указывает, что в тексте, который необходимо озвучить (поле pronounceText).
    есть разметка `application/text` или `application/ssml`.

    Поддерживаемые разметки;

    * `application/text`;
    * `application/ssml`.
    """
    emotion: Optional[Emotion] = Field(default=None)
    """Эмоция ассистента, которую он показывает с помощью лавашара"""
    auto_listening: bool = Field(default=False)
    """Указывает, что ассистент должен слушать пользователя после выполнения действия, по умолчанию false"""
    items: Optional[List[Union[CanvasAppItem, Bubble]]] = Field(default_factory=list)
    """Список команд и элементов интерфейса смартапа"""
    intent: Optional[str] = Field(default=None)
    """Интент, который смартап получит в следующем ответе ассистента"""
    finished: Optional[bool] = Field(default=None)
    """
    Сообщает ассистенту о завершении работы смартапа.

    Ассистент интерпретирует отсутствие поля как `false`.
    Возможные значения:

    * `true` --- диалог завершён, следующее сообщение пользователя поступит в другое приложение;
    * `false` --- диалог продолжается, сообщения пользователя передаются в приложение.

    В приложениях типа Canvas App необходимо самостоятельно закрывать окно приложения после завершения работы смартапа.
    Для этого требуется передать ассистенту команду close_app с помощью метода `assistant.close()`
    или `window.AssistantHost.close()`, если вы не используете Assistant Client.
    """
    asr_hints: Optional[ASRHints] = Field(default=None)
    """Подсказки для сервиса синтеза и распознавания речи."""
    suggestions: Optional[List[Button]] = Field(default_factory=list)
    """
    Предложения, которые смартап может сделать пользователю в зависимости от контекста диалога.
    Предложения могут быть представлены в виде кнопок и карточек.

    Важно! Предложения носят **информационный характер.** Оформляйте их в виде подсказок, а не кнопок.
    """
    activate_app_info: Optional[bool] = Field(default=None)
    """Флаг, по которому фронт открывает навык или считает что навык открывать не нужно, по умолчанию считается true"""


class AssistantResponse(Response):
    """
    # Описание модели AssistantResponse.

    Модель ответа от ассистента.
    """

    messageName: str = ResponseMessageName.ANSWER_TO_USER
    """Message Name ответа"""
    payload: AssistantResponsePayload = Field(default_factory=AssistantResponsePayload)
    """Payload ответа"""
