# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetFeatureSkuResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_id': 'str',
        'feature_name': 'str',
        'is_eligible': 'bool',
        'ineligible_reasons': 'List[str]',
        'sku_info': 'FeatureSku',
    }

    attribute_map = {
        'marketplace_id': 'marketplaceId',
        'feature_name': 'featureName',
        'is_eligible': 'isEligible',
        'ineligible_reasons': 'ineligibleReasons',
        'sku_info': 'skuInfo',
    }

    def __init__(self, marketplace_id=None, feature_name=None, is_eligible=None, ineligible_reasons=None, sku_info=None, _configuration=None):  # noqa: E501
        """GetFeatureSkuResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._marketplace_id = None
        self._feature_name = None
        self._is_eligible = None
        self._ineligible_reasons = None
        self._sku_info = None
        self.discriminator = None

        self.marketplace_id = marketplace_id
        self.feature_name = feature_name
        self.is_eligible = is_eligible
        if ineligible_reasons is not None:
            self.ineligible_reasons = ineligible_reasons
        if sku_info is not None:
            self.sku_info = sku_info

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this GetFeatureSkuResult.  # noqa: E501

        The requested marketplace.  # noqa: E501

        :return: The marketplace_id of this GetFeatureSkuResult.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this GetFeatureSkuResult.

        The requested marketplace.  # noqa: E501

        :param marketplace_id: The marketplace_id of this GetFeatureSkuResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def feature_name(self):
        """Gets the feature_name of this GetFeatureSkuResult.  # noqa: E501

        The name of the feature.  # noqa: E501

        :return: The feature_name of this GetFeatureSkuResult.  # noqa: E501
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this GetFeatureSkuResult.

        The name of the feature.  # noqa: E501

        :param feature_name: The feature_name of this GetFeatureSkuResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and feature_name is None:
            raise ValueError("Invalid value for `feature_name`, must not be `None`")  # noqa: E501

        self._feature_name = feature_name

    @property
    def is_eligible(self):
        """Gets the is_eligible of this GetFeatureSkuResult.  # noqa: E501

        When true, the seller SKU is eligible for the requested feature.  # noqa: E501

        :return: The is_eligible of this GetFeatureSkuResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_eligible

    @is_eligible.setter
    def is_eligible(self, is_eligible):
        """Sets the is_eligible of this GetFeatureSkuResult.

        When true, the seller SKU is eligible for the requested feature.  # noqa: E501

        :param is_eligible: The is_eligible of this GetFeatureSkuResult.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_eligible is None:
            raise ValueError("Invalid value for `is_eligible`, must not be `None`")  # noqa: E501

        self._is_eligible = is_eligible

    @property
    def ineligible_reasons(self):
        """Gets the ineligible_reasons of this GetFeatureSkuResult.  # noqa: E501

        A list of one or more reasons that the seller SKU is ineligible for the feature.  Possible values: * `MERCHANT_NOT_ENROLLED`: The merchant isn't enrolled for the feature. * `SKU_NOT_ELIGIBLE`: The SKU doesn't reside in a warehouse that supports the feature. * `INVALID_SKU`: There is an issue with the SKU provided.  # noqa: E501

        :return: The ineligible_reasons of this GetFeatureSkuResult.  # noqa: E501
        :rtype: List[str]
        """
        return self._ineligible_reasons

    @ineligible_reasons.setter
    def ineligible_reasons(self, ineligible_reasons):
        """Sets the ineligible_reasons of this GetFeatureSkuResult.

        A list of one or more reasons that the seller SKU is ineligible for the feature.  Possible values: * `MERCHANT_NOT_ENROLLED`: The merchant isn't enrolled for the feature. * `SKU_NOT_ELIGIBLE`: The SKU doesn't reside in a warehouse that supports the feature. * `INVALID_SKU`: There is an issue with the SKU provided.  # noqa: E501

        :param ineligible_reasons: The ineligible_reasons of this GetFeatureSkuResult.  # noqa: E501
        :type: List[str]
        """

        self._ineligible_reasons = ineligible_reasons

    @property
    def sku_info(self):
        """Gets the sku_info of this GetFeatureSkuResult.  # noqa: E501


        :return: The sku_info of this GetFeatureSkuResult.  # noqa: E501
        :rtype: FeatureSku
        """
        return self._sku_info

    @sku_info.setter
    def sku_info(self, sku_info):
        """Sets the sku_info of this GetFeatureSkuResult.


        :param sku_info: The sku_info of this GetFeatureSkuResult.  # noqa: E501
        :type: FeatureSku
        """

        self._sku_info = sku_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFeatureSkuResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFeatureSkuResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetFeatureSkuResult):
            return True

        return self.to_dict() != other.to_dict()
