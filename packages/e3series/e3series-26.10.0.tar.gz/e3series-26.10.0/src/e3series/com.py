# Library for using the COM-Interface of Zuken E3.series with python
# Important differences to common E3 COM functionality:
# 	-The first, empty element of lists is removed
# 	-As python does not support call-by-reference there are additional returns for [out] parameters
# This file was created for E3.series 26.10 (TLB version 26.01)
# 
# mypy: ignore-errors

import typing
from win32com.client import VARIANT
from win32com.client import CDispatch
import pythoncom
from .tools import _get_default_dbe, _get_default_app, _raw_connect_dbe, _raw_connect_app, _variant_to_dict, _dict_to_variant

DLLDEFAULTVALUE = "-353353"

# -------------------- IBundleInterface--------------------
class Bundle:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Bundle. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current bundle item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current bundle item identifier |
		| 0 | No bundle item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a bundle as the current item.

		:param id: Unique value identifying a bundle item. Since v2011-1010 conductor identifiers are also valid. The conductor's parent bundle will be set as the current item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current bundle item identifier |
		| 0 | No current bundle item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the bundle item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Bundle item name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the bundle item.

		:param name: Internal name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the bundle item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the bundle item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the bundle item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the bundle item's specified attribute value.

		:param name: Internal name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the bundle item.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the bundle item's specified attributes.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def GetPinCount(self) -> int:
		"""
		Gets the number of conductors contained in the current bundle item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors |
		| 0 | No conductors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinCount()

	def GetPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors contained in the current bundle item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors in ids |
		| 0 | No conductors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSymbolCount(self) -> int:
		"""
		Gets the number of symbols representing the current bundle item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cables, conductors and bundle items |
		| 0 | No cables, conductors and bundle items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolCount()

	def GetSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbols representing the current bundle item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbols passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbols in ids |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsShield(self) -> int:
		"""
		Indicates if the bundle item is a shield.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Bundle item is a shield |
		| 0 | Bundle item is not a shield or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsShield()

	def GetBundleCount(self) -> int:
		"""
		Gets the number of bundle items contained in the current bundle item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of bundle items |
		| 0 | No bundle items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBundleCount()

	def GetBundleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the bundle items contained in the current bundle item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of bundle items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of bundle items in ids |
		| 0 | No bundle items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetBundleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetParentBundleId(self) -> int:
		"""
		Gets the  parent bundle item of the current bundle item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Parent bundle item identifier |
		| 0 | Bundle item has no parent bundle or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetParentBundleId()

	def GetRootBundleId(self, bndid:int) -> int:
		"""
		Gets the root  bundle item of a cable, conductor or bundle item.

		:param bndid: Cable, conductor or bundle item identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Root bundle item identifier |
		| 0 | bndid is the identifier of the root bundle item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetRootBundleId(bndid)

	def Create(self, aroundids:list[int]) -> int:
		"""
		Creates a new shield.

		:param aroundids: Array of cable, conductor and bundle identifiers to be contained in the new bundle passed into the function. If successful, an array of cable, conductor and bundle identifiers contained in the new bundle is passed out of the function. This parameter can also hold a single integer value
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new shield |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.Create(aroundids)
		return ret[0]

	def CreateIn(self, cableid:int) -> int:
		"""
		Creates an empty shield in an overbraid cable.

		:param cableid: Cable identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new shield |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateIn(cableid)

	def Capture(self, cabwirids:list[int]) -> int:
		"""
		Moves cables, conductors and bundle items from their current structural position to the current bundle item.

		:param cabwirids: Array of cable, conductor and bundle item identifiers passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current bundle item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.Capture(cabwirids)
		return ret[0]

	def Delete(self) -> int:
		"""
		Deletes the bundle item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def SetName(self, name:str) -> int:
		"""
		Sets the bundle item's name.

		:param name: New bundle item name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | New bundle item name |
		| "&lt;Empty&gt; | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def IsTwisted(self) -> int:
		"""
		Indicates if the bundle item is a twisted pair.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Bundle item is a twisted pair |
		| 0 | Bundle item is not a twisted pair or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsTwisted()

	def IsBundle(self) -> int:
		"""
		Indicates if  the bundle item is a bundle.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Bundle item is a bundle |
		| 0 | Bundle item is not a bundle or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsBundle()

	def CreateShield(self, aroundids:list[int]) -> int:
		"""
		Creates a new shield.

		:param aroundids: Array of cable, conductor and bundle identifiers to be contained in the new bundle passed into the function. If successful, an array of cable, conductor and bundle identifiers contained in the new bundle is passed out of the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new shield |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.CreateShield(aroundids)
		return ret[0]

	def CreateTwist(self, aroundids:list[int]) -> int:
		"""
		Creates a new twisted pair.

		:param aroundids: Array of cable, conductor and bundle identifiers to be contained in the new bundle passed into the function. If successful, an array of cable, conductor and bundle identifiers contained in the new bundle is passed out of the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new twisted pair |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.CreateTwist(aroundids)
		return ret[0]

	def CreateBundle(self, aroundids:list[int]) -> int:
		"""
		Creates a new bundle.

		:param aroundids: Array of cable, conductor and bundle identifiers to be contained in the new bundle passed into the function. If successful, an array of cable, conductor and bundle identifiers contained in the new bundle is passed out of the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new bundle |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.CreateBundle(aroundids)
		return ret[0]

	def CreateShieldIn(self, cableid:int) -> int:
		"""
		Creates an empty shield in an overbraid cable.

		:param cableid: Cable identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new shield |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateShieldIn(cableid)

	def CreateTwistIn(self, cableid:int) -> int:
		"""
		Creates an empty twisted pair in an overbraid cable.

		:param cableid: Cable identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new twisted pair |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateTwistIn(cableid)

	def CreateBundleIn(self, cableid:int) -> int:
		"""
		Creates an empty bundle in an overbraid cable.

		:param cableid: Cable identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new bundle |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateBundleIn(cableid)

	def PlaceAll(self) -> int:
		"""
		Automatically places the bundle item's symbols.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of placed symbols |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PlaceAll()

	def GetCableCount(self) -> int:
		"""
		Gets the number of cables contained in the current bundle item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cables |
		| 0 | No cables or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCableCount()

	def GetCableIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the cables contained in the current bundle item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of cables passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cables in ids |
		| 0 | No cables or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCableIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAnyCount(self) -> int:
		"""
		Gets the number of cables, conductors and bundle items contained in the current bundle item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cables, conductors and bundle items |
		| 0 | No cables, conductors and bundle items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAnyCount()

	def GetAnyIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the cables, conductors and bundle items contained in the current bundle item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of cables, conductors and bundle items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cables, conductors and bundle items in ids |
		| 0 | No cables, conductors and bundle items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAnyIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCoreCount(self) -> int:
		"""
		Gets the number of conductors contained in the current bundle item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors |
		| 0 | No conductors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCoreCount()

	def GetCoreIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors contained in the current bundle item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors in ids |
		| 0 | No conductors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCoreIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ReleaseIDs(self, ids:list[int]) -> int:
		"""
		Moves cables, conductors and bundle items from the current bundle item.

		:param ids: Array of cable, conductor and bundle item identifiers passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | All cable, conductor and bundle item were moved out of the current bundle item |
		| 0 | Not all cable, conductor and bundle item were moved out of the current bundle item or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		ret = self._obj.ReleaseIDs(ids)
		return ret[0]

	def GetOverbraidIdEx(self) -> int:
		"""
		Gets the identifier of the bundle item's overbraid cable.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the overbraid cable |
		| -1 | No project open or bundle item set |
		| -2 | Bundle item is not an overbraid cable element |
		| -3 | Bundle item is an invalid type |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.GetOverbraidIdEx()

	def GetRootOverbraidId(self) -> int:
		"""
		Gets the identifier of the bundle item's root overbraid cable.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the root overbraid cable |
		| -1 | No project open or bundle item set |
		| -2 | Bundle item is not in an overbraid cable element |
		| -3 | Bundle item is an invalid type |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.GetRootOverbraidId()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the bundle item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the bundle item |
		| "&lt;Empty&gt;" | No bundle item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a bundle as the current item.

		:param gid: Global identifier value of a bundle item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current bundle item |
		| "&lt;Empty&gt;" | No current bundle item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current bundle item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current bundle item |
		| "&lt;Empty&gt;" | No bundle item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a bundle as the current item.

		:param guid: Globally unique identifier value of a bundle item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current bundle item |
		| "&lt;Empty&gt;" | No current bundle item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- IAttributeInterface--------------------
class Attribute:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Attribute. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current attribute item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current attribute item identifier |
		| 0 | No attribute item or an error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets an attribute as the current item.

		:param id: Unique value identifying an attribute item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current attribute item identifier |
		| 0 | No current attribute item or an error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the attribute item's display name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's display name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.GetName()

	def GetInternalName(self) -> str:
		"""
		Gets the attribute item's user-defined internal name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's user-defined internal name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.GetInternalName()

	def GetValue(self) -> str:
		"""
		Gets the attribute item's value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's value |
		| "&lt;Empty&gt;" | Attribute item has no value or an error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.GetValue()

	def GetInternalValue(self) -> str:
		"""
		Gets the attribute item's internal value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's internal value |
		| "&lt;Empty&gt;" | Attribute item has no internal value or an error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.GetInternalValue()

	def SetValue(self, value:str) -> int:
		"""
		Sets the attribute item's value.

		:param value: Value to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;0 | Identifier value of the attribute item, Value is applied |
		| 0 | Value could not be set |
		| -1 | value exceeds 252 characters in length, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.SetValue(value)

	def Delete(self) -> int:
		"""
		Deletes the current attribute from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.Delete()

	def GetTextIds(self, txttyp:int=0, search_string:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the text items displaying the attribute value.

		:param txttyp: Text type filter. Only text identifiers with this Text Type will be supplied. All text identifiers are supplied if txttyp is 0. The default value 0, defaults to 0
		:type int: int
		:param search_string: Text value filter, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text identifiers displaying the attribute value passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No text identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		dummy=0
		ret, ids = self._obj.GetTextIds(dummy, txttyp, search_string)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTextCount(self) -> int:
		"""


		:return:
		Type: int

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.GetTextCount()

	def DisplayAttribute(self, id:int=0) -> int:
		"""
		Creates a text item to display the current attribute item's value.

		:param id: Identifier of the symbol or sheet to bind the text item to., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the created text item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.DisplayAttribute(id)

	def GetOwnerId(self) -> int:
		"""
		Gets a unique value identifying the attribute item's owner.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current attribute item's owner identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.GetOwnerId()

	def GetFormattedValue(self) -> str:
		"""
		Gets the  attribute item's formatted value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's formatted value |
		| "&lt;Empty&gt;" | Attribute item has no formatted value or an error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.GetFormattedValue()

	def DisplayValueAt(self, sheetid:int, x:float, y:float, bindid:int=0) -> int:
		"""
		Creates a text item to display the current attribute item's value.

		:param sheetid: Identifier of the sheet to display the text item on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param bindid: Identifier of the placed symbol item to bind the text item to., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the text item created |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 7.20
		"""
		return self._obj.DisplayValueAt(sheetid, x, y, bindid)

	def IsLockChangeable(self) -> bool:
		"""
		Indicates whether the attribute item's lock status can be changed.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Attribute lock status can be changed |
		| 0 | Attribute lock status cannot be changed or an error occurred |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.IsLockChangeable()

	def GetLockChangeable(self) -> bool:
		"""
		Indicates whether the attribute item's value can be changed.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Attribute value can be changed |
		| 0 | Attribute value cannot be changed or an error occurred |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.GetLockChangeable()

	def SetLockChangeable(self, lockchangeable:bool) -> int:
		"""
		Sets the attribute item's lock status.

		:param lockchangeable: Attribute's lock status value. If 1, sets the attribute lock status to locked. If 0, sets the attribute lock status to unlocked
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Attribute lock status changed |
		| 1 | No project open or no attribute item set |
		| 2 | Lock status can only be changed for locked attributes |
		| 4 | Invalid attribute owner |
		| 5 | Lock status cannot be changed due to the attribute definition or properties defined |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.SetLockChangeable(lockchangeable)

	def FormatValue(self, name:str, value:str) -> str:
		"""
		Converts a value to the formatted value if it is assigned to the attribute.

		:param name: Attribute display or internal name
		:type str: str
		:param value: Attribute value
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value as it is displayed in E³.series |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 14.11
		"""
		return self._obj.FormatValue(name, value)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current attribute item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current attribute item |
		| "&lt;Empty&gt;" | No attribute item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets an attribute as the current item.

		:param gid: Global identifier value of an attribute item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current attribute item |
		| "&lt;Empty&gt;" | No current attribute item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- IClipboardInterface--------------------
class Clipboard:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Clipboard. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current clipboard item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current clipboard item identifier |
		| 0 | No clipboard item or an error occurred |

		Available since E3.series TLB-Versions: 18.30
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a clipboard item as the current item.

		:param id: Unique value identifying a clipboard item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current clipboard item identifier |
		| 0 | No current clipboard item or an error occurred |

		Available since E3.series TLB-Versions: 18.30
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the clipboard item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Clipboard item name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 18.30
		"""
		return self._obj.GetName()

	def GetAnyIds(self, flags:int) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the item contained in the clipboard item.

		:param flags: Options for filtering the identifiers in. ids
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of item identifiers in ids |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 18.30
		"""
		dummy=0
		ret, ids = self._obj.GetAnyIds(flags, dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CommitToProject(self, flags:int, viewnumber:int=0) -> int:
		"""
		Commits the content of the clipboard item to the project.

		:param flags: Merge options for committing the clipboard item to the project
		:type int: int
		:param viewnumber: Device view number., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Content of the clipboard item committed to the project |
		| -1 | No project open or no clipboard item set |
		| -4 | flags is invalid |
		| -5 | flags contains invalid value combinations |
		| -6 | viewnumber is invalid |

		Available since E3.series TLB-Versions: 18.30
		"""
		return self._obj.CommitToProject(flags, viewnumber)

	def GetCollidingIds(self, flags:int) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the colliding items contained in the clipboard item.

		:param flags: Options for filtering the identifiers in. ids
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of item identifiers in ids |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 18.30
		"""
		dummy=0
		ret, ids = self._obj.GetCollidingIds(flags, dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Delete(self) -> int:
		"""
		Deletes the clipboard item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Clipboard item was deleted from the project |
		| -1 | No project open or no clipboard item set |
		| -2 | Clipboard item may not be deleted |
		| -3 | Error occurred |

		Available since E3.series TLB-Versions: 18.30
		"""
		return self._obj.Delete()

	def DeleteForced(self) -> int:
		"""
		Deletes the clipboard item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Clipboard item was deleted from the project |
		| -1 | No project open or no clipboard item set |
		| -2 | Clipboard item may not be deleted |
		| -3 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.DeleteForced()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current clipboard item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the clipboard item |
		| "&lt;Empty&gt;" | No clipboard item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a clipboard item as the current item.

		:param gid: Global identifier value of a clipboard item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current clipboard item |
		| "&lt;Empty&gt;" | No current clipboard item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current clipboard item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current clipboard item |
		| "&lt;Empty&gt;" | No clipboard item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a clipboard item as the current item.

		:param guid: Globally unique identifier value of a clipboard item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current clipboard item |
		| "&lt;Empty&gt;" | No current clipboard item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- IComponentInterface--------------------
class Component:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Component. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current component item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current component item identifier |
		| 0 | No component item or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a component as the current item.

		:param id: Unique value identifying a component item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current component item identifier |
		| 0 | No current component item or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the component item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Component's name value is supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.GetName()

	def GetVersion(self) -> str:
		"""
		Gets the component item's version.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Component's version value is supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.GetVersion()

	def GetSupplyPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the component item's pins belonging to a supply circuit.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of supply circuit pin identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No supply circuit pin identifiers are supplied or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		dummy=0
		ret, ids = self._obj.GetSupplyPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the component item.

		:param name: Internal name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the component item's  attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the component item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the component item's specified attribute value.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the component item's specified attribute value.

		:param name: Internal name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the component item.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the component item's specified attributes.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.HasAttribute(name)

	def Search(self, name:str, version:str) -> int:
		"""
		Searches for a component item matching the name and version in the project.

		:param name: Name of the component
		:type str: str
		:param version: Version of the component
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Found component identifier |
		| 0 | No component was found or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.Search(name, version)

	def GetModelName(self) -> str:
		"""
		Gets the component item's model name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Model's name value is supplied |
		| "&lt;Empty&gt;" | Component has no model or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.GetModelName()

	def GetValidModelCharacteristics(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the component item's model characteristics.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | characteristics | tuple[str,...] | Array of model characteristics passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in characteristics |
		| 0 | Component item has no model, no characteristics or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		dummy=0
		ret, characteristics = self._obj.GetValidModelCharacteristics(dummy)
		characteristics = characteristics[1:] if type(characteristics) == tuple and len(characteristics) > 0 else tuple()
		return ret, characteristics

	def GetFormboardSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of Formboard symbols belonging to the component item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of Formboard symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No Formboard symbol identifiers are supplied or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		dummy=0
		ret, ids = self._obj.GetFormboardSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Rename(self, name:str, version:str) -> int:
		"""
		Sets the component item's name and version.

		:param name: New name of the component
		:type str: str
		:param version: New version of the component
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component is renamed |
		| 0 | Error has occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.Rename(name, version)

	def GetViewDefinitions(self) -> tuple[int, tuple[tuple[int,int],...]]:
		"""
		Gets the component item's symbol identifiers and their view numbers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | viewDefinitions | tuple[tuple[int,int],...] | Array of symbol identifiers and the symbol's user-defined view number passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in viewDefinitions |
		| 0 | Component has no symbols or an error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		dummy=0
		return self._obj.GetViewDefinitions(dummy)

	def GetPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the component item's pins.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of pin identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No pin identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 17.10
		"""
		dummy=0
		ret, ids = self._obj.GetPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSubType(self) -> int:
		"""
		Gets the component item's subtype.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Subtype of the component |
		| -1 | No project open |
		| -2 | No component item set |
		| -3 | Component is not a standard device or block type |
		| -4 | Component item does not refer to a component, For example, it could refer to a cable |
		| -5 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetSubType()

	def GetComponentType(self) -> int:
		"""
		Gets the component item's type.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type of the component |
		| -1 | No project open |
		| -2 | No component item set |
		| -3 | Component type is undefined |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.GetComponentType()

	def GetStateIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the component item's defined states.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of component state identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No state identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 22.10
		"""
		dummy=0
		ret, ids = self._obj.GetStateIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current component item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current component item |
		| "&lt;Empty&gt;" | No component item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a component as the current item.

		:param gid: Global identifier value of a component item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current component item |
		| "&lt;Empty&gt;" | No current component item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- IConnectionInterface--------------------
class Connection:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Connection. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current connection item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current connection item identifier |
		| 0 | No connection item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a connection item as the current item.

		:param id: Unique value identifying a connection item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current connection item identifier |
		| 0 | No current connection item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the connection item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Connection item's name value is supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the connection item.

		:param name: Internal name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the connection item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the connection item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the connection item's specified attribute value.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the connection item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the connection item.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the connection item's specified attributes.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def DisplayAttributeValue(self, name:str) -> int:
		"""
		Displays an attribute value from the connection item.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text item identifier displaying the attribute value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DisplayAttributeValue(name)

	def DisplayAttributeValueAt(self, name:str, sheetid:int, x:float, y:float) -> int:
		"""
		Displays an attribute value from the connection item at a specific position.

		:param name: Name of the attribute
		:type str: str
		:param sheetid: Sheet identifier to display the attribute value on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text item identifier displaying the attribute value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DisplayAttributeValueAt(name, sheetid, x, y)

	def SetAttributeVisibility(self, name:str, onoff:int) -> int:
		"""
		Sets the visibility status of all text items representing the connection item's specified attribute value.

		:param name: Internal name of the attribute
		:type str: str
		:param onoff: Indicates whether the text items' visibility status should be shown or hidden. If > 0, the text items are shown. If 0, the text items are hidden
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items changed |
		| 0 | No text items found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeVisibility(name, onoff)

	def IsValid(self) -> int:
		"""
		Indicates if  the connection item is valid.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connection item is valid |
		| 0 | Connection item is invalid or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsValid()

	def GetPinCount(self) -> int:
		"""
		Gets the number of pins associated with the connection item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pins |
		| 0 | No pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinCount()

	def GetPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the pins associated with the connection item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of pin identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pins in ids |
		| 0 | No pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCoreCount(self) -> int:
		"""
		Gets the number of conductors associated with the connection item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors |
		| 0 | No conductors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCoreCount()

	def GetCoreIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors associated with the connection item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors in ids |
		| 0 | No conductors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCoreIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetReferenceSymbolCount(self) -> int:
		"""
		Gets the number of reference symbols associated with the connection item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of reference symbols |
		| 0 | No reference symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetReferenceSymbolCount()

	def GetReferenceSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""


		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] |  |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetReferenceSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSignalName(self) -> str:
		"""
		Gets the connection item's signal name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Connection item's signal name value is supplied |
		| "&lt;Empty&gt;" | No signal name value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSignalName()

	def SetSignalName(self, name:str) -> int:
		"""
		Sets the connection item's signal name value.

		:param name: Signal name value to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signal name applied |
		| 0 | Error occurred |
		| -1 | Signal name applied, Connection item deleted due to the changed connection logic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetSignalName(name)

	def Highlight(self) -> int:
		"""
		Highlights the connection item on the sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connection item elements highlighted |
		| 0 | No connection items found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Highlight()

	def GetNetId(self) -> int:
		"""
		Gets the identifier of the net item in which the item is located.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Net item identifier |
		| 0 | Error occurred |
		| -1 | Conductor is placed on the original connection item and on some of the view connection items |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetNetId()

	def GetNetSegmentCount(self) -> int:
		"""
		Gets the number of net segments associated with the connection item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segments |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetNetSegmentCount()

	def GetNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the net segments associated with the connection item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of net segments passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segments in ids |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetPinGroupsCount(self) -> int:
		"""
		Gets the number of pin groups associated with the connection item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pin groups |
		| 0 | No pin groups or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinGroupsCount()

	def GetPinGroupsIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the pin groups associated with the connection item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pin groups passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pin groups in ids |
		| 0 | No pin groups or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPinGroupsIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetPinGroupCount(self, num:int) -> int:
		"""
		Gets the number of pins in a pin group associated with the connection item.

		:param num: Index of the pin group
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pins |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinGroupCount(num)

	def GetPinGroupIds(self, num:int) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the pins of a pin group associated with the connection item.

		:param num: Index of the pin group
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of pin identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pins in ids |
		| 0 | No pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPinGroupIds(num, dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsView(self) -> int:
		"""
		Indicates if the connection item is a view.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connection item is a view |
		| 0 | Connection item is not a view or an error occurred |
		| -1 | Conductor is placed on the original connection item and on some of the view connection items |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsView()

	def GetViewNumber(self) -> int:
		"""
		Gets the connection item's view number.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Connection item's view number |
		| 0 | Connection item is not a view or an error occurred |
		| -1 | Conductor is placed on the original connection item and on some of the view connection items |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetViewNumber()

	def Create(self, shti:int, pnts:int, x:list[float], y:list[float], PointTypArr:list[int]=pythoncom.Empty) -> int:
		"""
		Creates a new connection path on a sheet.

		:param shti: Identifier of the schematic sheet
		:type int: int
		:param pnts: Number of placement positions
		:type int: int
		:param x: Array of positions on the x-axis
		:type list[float]: list[float]
		:param y: Array of positions on the y-axis
		:type list[float]: list[float]
		:param PointTypArr: Array of position types. If no array is provided, all position types are lines, defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the last net segment created |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		x = [0.] + x
		y = [0.] + y
		if PointTypArr != pythoncom.Empty:
			PointTypArr = [0] + PointTypArr
		return self._obj.Create(shti, pnts, x, y, PointTypArr)

	def CreateOnFormboard(self, shti:int, pnts:int, x:list[float], y:list[float], PointTypArr:list[int]=pythoncom.Empty) -> typing.Union[tuple[int,...],int]:
		"""
		Creates a new connection path on a Formboard sheet.

		:param shti: Identifier of the Formboard sheet
		:type int: int
		:param pnts: Number of placement positions
		:type int: int
		:param x: Array of positions on the x-axis
		:type list[float]: list[float]
		:param y: Array of positions on the y-axis
		:type list[float]: list[float]
		:param PointTypArr: Array of position types. If no array is provided, all position types are straight lines, defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:
		Type: typing.Union[tuple[int,...],int]

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the last net segment created |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		x = [0.] + x
		y = [0.] + y
		if PointTypArr != pythoncom.Empty:
			PointTypArr = [0] + PointTypArr
		ret = self._obj.CreateOnFormboard(shti, pnts, x, y, PointTypArr)
		if type(ret) is tuple:
			ret = ret[1:] if type(ret) == tuple and len(ret) > 0 else tuple()
		return ret

	def GetTranslatedSignalName(self) -> str:
		"""
		Gets the connection item's translated signal name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Connection item's translated signal name value is supplied |
		| "&lt;Empty&gt;" | No translated signal name value or an error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.GetTranslatedSignalName()

	def CreateConnectionBetweenPoints(self, shti:int, x1:float, y1:float, x2:float, y2:float, flags:int=0) -> int:
		"""
		Creates a new connection path between 2 points on a sheet.

		:param shti: Identifier of the schematic sheet
		:type int: int
		:param x1: First position on the x-axis
		:type float: float
		:param y1: First position on the y-axis
		:type float: float
		:param x2: Second position on the x-axis
		:type float: float
		:param y2: Second position on the y-axis
		:type float: float
		:param flags: Not used, defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the last net segment created |
		| -1 | No project open |
		| -2 | shti is invalid |
		| -3 | Sheet is read-only |
		| -4 | Sheet is locked |
		| -5 | Item at first position is locked |
		| -6 | No valid item found at first position |
		| -7 | Item at second position is locked |
		| -8 | Items at the first and second positions cannot be connected due to a signal collision |
		| -9 | No valid item found at second position |
		| -10 | No route could be found between the items at the first and second positions |
		| -11 | The busbar item cannot be connected to a non-busbar item, Available since v2022-23.00 |
		| -12 | The busbar items cannot be connected to each other, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.CreateConnectionBetweenPoints(shti, x1, y1, x2, y2, flags)

	def CreateConnection(self, flags:int, shti:int, pnts:int, x:list[float], y:list[float], PointTypArr:list[int]=pythoncom.Empty) -> tuple[int, tuple[int,...]]:
		"""
		Creates a new connection path on a sheet.

		:param flags: Connection creation options
		:type int: int
		:param shti: Identifier of the schematic sheet
		:type int: int
		:param pnts: Number of placement positions
		:type int: int
		:param x: Array of positions on the x-axis
		:type list[float]: list[float]
		:param y: Array of positions on the y-axis
		:type list[float]: list[float]
		:param PointTypArr: Array of position types. If no array is provided, all position types are straight lines, defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | connections | tuple[int,...] | Array of identifiers of the created net segments passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of created connections |
		| -1 | No project open |
		| -2 | flags is invalid |
		| -3 | E³.logic module is not running |
		| -4 | shti is invalid |
		| -5 | Sheet is locked or read-only |
		| -6 | No license available for E³.formboard |
		| -7 | No license available for E³.funtionaldesign |
		| -8 | No license available for E³.topology |
		| -9 | pnts value is greater than the number of points |
		| -10 | PointTypArr array size is smaller than the pnts value |
		| -11 | Connection could not be created |

		Available since E3.series TLB-Versions: 23.00
		"""
		dummy=0
		x = [0.] + x
		y = [0.] + y
		ret, connections = self._obj.CreateConnection(flags, shti, pnts, x, y, dummy, PointTypArr)
		connections = connections[1:] if type(connections) == tuple and len(connections) > 0 else tuple()
		return ret, connections

# -------------------- IExternalDocumentInterface--------------------
class ExternalDocument:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize ExternalDocument. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current external document item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current external document item identifier |
		| 0 | No external document item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets an external document as the current item.

		:param id: Unique value identifying an external document item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current external document item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the external document item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | External document name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def SetName(self, newname:str) -> str:
		"""
		Sets the external document item's name.

		:param newname: New external document name
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | New external document name |
		| "&lt;Empty&gt; | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(newname)

	def Display(self) -> int:
		"""
		Opens the external document item using the system's designated application.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | External document is opened in another application |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Display()

	def Remove(self) -> int:
		"""
		Stops displaying the external document item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | External document item display closed |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Remove()

	def Visible(self) -> int:
		"""
		Indicates whether the external document item is displayed.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | External document item is displayed |
		| 0 | External document item is not displayed or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Visible()

	def Delete(self) -> int:
		"""
		Deletes the current external document from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | External document item was deleted or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def Create(self, modi:int, name:str, file:str) -> int:
		"""
		Creates a new external document item.

		:param modi: Not used
		:type int: int
		:param name: Name of the external document
		:type str: str
		:param file: Path and name of the external file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new external document item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(modi, name, file)

	def Search(self, modi:int, name:str) -> int:
		"""
		Searches for an item and sets it as the current external document item.

		:param modi: Not used
		:type int: int
		:param name: Name of the external document item to be search for
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the found external document item |
		| 0 | No external document item was found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Search(modi, name)

	def Save(self) -> int:
		"""
		Saves the external document item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | External document item is saved |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Save()

	def InsertFile(self, modi:int, name:str, file:str) -> int:
		"""
		Creates a new external document item.

		:param modi: Indicates how the external file should be handled. If 1, a reference to the file is used. If any other value, the file is embedded within the project
		:type int: int
		:param name: Name of the external document
		:type str: str
		:param file: Path and name of the external file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new external document item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.InsertFile(modi, name, file)

	def GetFile(self) -> str:
		"""
		Gets the path and file name of the external document item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File Name&gt;" | Path and file name of the external document |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFile()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the external document.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the external document item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the external document item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the external document item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the external document item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the external document item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the external document item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def GetAssignment(self) -> str:
		"""
		Gets the external document item's higher level assignment value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Higher level assignment value supplied |
		| "&lt;Empty&gt;" | No higher level assignment value supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAssignment()

	def SetAssignment(self, newass:str) -> int:
		"""
		Sets the external document item's higher level assignment value.

		:param newass: New higher level assignment value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Higher level assignment value applied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAssignment(newass)

	def GetLocation(self) -> str:
		"""
		Gets the external document item's location value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Location value supplied |
		| "&lt;Empty&gt;" | No location value supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLocation()

	def SetLocation(self, newloc:str) -> int:
		"""
		Sets the external document item's location value.

		:param newloc: New location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Location value applied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLocation(newloc)

	def SetCompleteName(self, newnam:str, newass:str, newloc:str) -> int:
		"""
		Sets all elements of the external document item's item designation.

		:param newnam: New external document name value
		:type str: str
		:param newass: New assignment value
		:type str: str
		:param newloc: New location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Item designation values applied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCompleteName(newnam, newass, newloc)

	def MoveTo(self, position:int, before:int=0) -> int:
		"""
		Moves the external document item to a position in the project tree.

		:param position: Identifier of the item to use as the insertion position of the external document item in the project tree
		:type int: int
		:param before: Indicates whether to insert the external document item before or after. position. If 0, the external document is inserted below position. If 1, the external document is inserted above position., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | External document item moved |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.MoveTo(position, before)

	def CheckOut(self, lock:bool=True) -> int:
		"""
		Checks out the external document item from the multi-user server.

		:param lock: Indicates if the external document is read/write-able or read-only. If 1, the external document is checked out read-only. If 0, the external document is checked out read/write-able., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | Internal error occurred during check out |
		| 1 | Internal error occurred during data update |
		| 0 | External document was checked out or an error occurred |
		| -1 | External document could not be checked out |
		| -2 | External document could not be checked out |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CheckOut(lock)

	def CheckIn(self, unlock:bool=True) -> int:
		"""
		Checks in the external document item to the multi-user server.

		:param unlock: Indicates if the external document is read/write-able or read-only. If 1, the external document is checked in read/write-able. If 0, the external document is checked in read-only., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | Internal error occurred during check in |
		| 1 | Internal error occurred during data update |
		| 0 | External document was checked in or an error occurred |
		| -1 | External document could not be checked in |
		| -2 | External document could not be checked in |
		| -3 | External document was checked in however it was closed without saving any changes, Available since v2018-19.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CheckIn(unlock)

	def IsReadOnly(self) -> bool:
		"""
		Indicates the external document item's read-only status.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | External document item is read-only |
		| 0 | External document item is read/write-able or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsReadOnly()

	def GetOwner(self) -> str:
		"""
		Gets the external document item's owner.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Owner value supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOwner()

	def SetVisible(self, visible:int=1) -> int:
		"""
		Sets the external document item's visibility within the project.

		:param visible: Visibility status to apply. If 0, the external document is hidden. If 1, the external document is shown. ., defaults to 1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous visibility status was shown |
		| 0 | Previous visibility status was hidden or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetVisible(visible)

	def IsVisible(self) -> bool:
		"""
		Indicates whether the external document item is shown or hidden in the project.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | External document item is shown in the project |
		| 0 | External document item is hidden in the project or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsVisible()

	def SetCompleteNameEx(self, newnam:str, newass:str, newloc:str, onlygiven:bool) -> int:
		"""
		Sets all elements of the external document item's item designation.

		:param newnam: New external document name value
		:type str: str
		:param newass: New assignment value
		:type str: str
		:param newloc: New location value
		:type str: str
		:param onlygiven: Indicates whether empty values in. newnam. ,. newass. and. newloc. should be ignored. If 1, empty values are ignored. If 0, empty values are set
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Item designation values applied or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.SetCompleteNameEx(newnam, newass, newloc, onlygiven)

	def GetInternalName(self) -> str:
		"""
		Gets the path and name of the external document item's original file.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File Name&gt;" | Original path and file name of the external document |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 16.05
		"""
		return self._obj.GetInternalName()

	def DisplayEx(self, flags:int=0) -> int:
		"""
		Opens the external document item using the system's designated application.

		:param flags: Indicates if the external document is  opened read/write-able or read-only. If 0, the external document is opened read/write-able. If 1, the external document is checked out read-only., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | External document is opened in another application and is read-only |
		| -1 | Error occurred |
		| -2 | External document is opened in another application but is not read-only |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.DisplayEx(flags)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the external document item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the external document item |
		| "&lt;Empty&gt;" | No external document item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets an external document as the current item.

		:param gid: Global identifier value of an external document item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current external document item |
		| "&lt;Empty&gt;" | No external document item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current external document item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current external document item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets an external document as the current item.

		:param guid: Globally unique identifier value of an external document item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current external document item |
		| "&lt;Empty&gt;" | No external document item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- IFieldInterface--------------------
class Field:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Field. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current field item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current field item identifier |
		| 0 | No field item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a field as the current item.

		:param id: Unique value identifying a field item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current field item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def SetName(self, name:str) -> int:
		"""
		Sets the field item's name.

		:param name: New field name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Field name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def GetName(self) -> str:
		"""
		Gets the field item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Field name supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def GetType(self) -> str:
		"""
		Gets the field item's type name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Type name supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetType()

	def GetVersion(self) -> str:
		"""
		Gets the field item's version.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Version supplied |
		| "&lt;Empty&gt;" | Field has no version value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetVersion()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the field item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the field item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the field item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the field item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the field item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the field item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the field item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def GetTextCount(self) -> int:
		"""
		Gets the number of the field's text items.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items |
		| 0 | No text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTextCount()

	def GetTextIds(self, txttyp:int=0, search_string:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of identifiers of the field's text items.

		:param txttyp: Text type filter. Only text identifiers with this Text Type will be supplied. All text identifiers are supplied if txttyp is 0. The default value 0, defaults to 0
		:type int: int
		:param search_string: Text value filter, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTextIds(dummy, txttyp, search_string)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSchemaLocation(self) -> tuple[int, float, float, str, str, str]:
		"""
		Gets the field item's position within the project.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis passed out of the function |
		| 2 | y | float | Placement position on the y-axis passed out of the function |
		| 3 | grid | str | Location in the format ". /&lt;sheet&gt;.&lt;grid&gt;. " passed out of the function |
		| 4 | column_value | str | Sheet placement column of the field item passed out of the function |
		| 5 | row_value | str | Sheet placement row of the field item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the field item's sheet |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetSchemaLocation(dummy, dummy, dummy, dummy, dummy)

	def GetArea(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the field item's placement area on the sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xmin | float | First position on the x-axis passed out of the function |
		| 2 | ymin | float | First position on the y-axis passed out of the function |
		| 3 | xmax | float | Second position on the x-axis passed out of the function |
		| 4 | ymax | float | Second position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Placement area values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetArea(dummy, dummy, dummy, dummy)

	def GetGraphId(self) -> int:
		"""
		Gets an identifier of the graphic item representing the boundary of the field item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Graphic item identifier of the field item's boundary |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphId()

	def Jump(self) -> int:
		"""
		Jumps to the field item's sheet and highlights the field item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Jump()

	def Delete(self) -> int:
		"""
		Deletes the current field from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the field item, Unable to complete delete operation |
		| 0 | Field item was deleted or no project open or no field item set |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def GetSymbolCount(self) -> int:
		"""
		Gets the number of the field item's symbols.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol items |
		| 0 | No symbol items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolCount()

	def GetSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the field item's symbol identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Place(self, shti:int, x1:float, y1:float, x2:float, y2:float, moveall:bool=False) -> int:
		"""
		Creates and places a field item or moves the current field item's position within the project.

		:param shti: Identifier of sheet to place field on
		:type int: int
		:param x1: First placement position on the x-axis
		:type float: float
		:param y1: First placement position on the y-axis
		:type float: float
		:param x2: Second placement position on the x-axis
		:type float: float
		:param y2: Second placement position on the y-axis
		:type float: float
		:param moveall: Indicates whether the items contained within the field should also be moved. If 1, items contained within the field are also moved. If 0, only the field item is moved., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the field item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Place(shti, x1, y1, x2, y2, moveall)

	def GetInsideNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the net segments with routing paths placed within the field item's area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of net segment items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No net segment identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetInsideNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCrossingNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the net segments with routing paths entering the field item's area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of net segment items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No net segment identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCrossingNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetInsideTextIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the text items contained within the field item's area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of text items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No text item identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetInsideTextIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetInsideGraphIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the graphic items contained within the field item's area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of graphic items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No graphic item identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetInsideGraphIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetInsideSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbol items whose origins are contained within the field item's area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbol items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No symbol item identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetInsideSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetParentFieldId(self) -> int:
		"""
		Gets the identifier of the field item's parent field.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the field item's parent field |
		| 0 | Field item has no parent field or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetParentFieldId()

	def GetCrossingFieldIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the fields partially placed within the field item's area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of field items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No field identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCrossingFieldIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetInsideFieldIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the fields placed directly within the field item's area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of field items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No field identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetInsideFieldIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAllInsideFieldIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the fields placed within the field item's area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of field items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No field identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAllInsideFieldIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTypeName(self) -> str:
		"""
		Gets the field item's type name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Type name supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTypeName()

	def GetInsidePanelConnectionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors contained within the field item's area on a panel sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pin items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No pin identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetInsidePanelConnectionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCrossingPanelConnectionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors entering the field item's area on a panel sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductor items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No conductor identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCrossingPanelConnectionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAssignedOptionExpressions(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options) assigned to the field item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressions(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def SetOptionExpressions(self, expressions:list[str]) -> int:
		"""
		Replaces the field item's option expressions.

		:param expressions: Array of strings of all option names, Boolean expressions or alias names of Boolean expressions
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.12
		"""
		return self._obj.SetOptionExpressions(expressions)

	def SetCompleteName(self, newdev:str, newass:str, newloc:str, onlygiven:bool=False) -> int:
		"""
		Sets all elements of the field item's  item designation.

		:param newdev: New device value
		:type str: str
		:param newass: New higher level assignment value
		:type str: str
		:param newloc: New location value
		:type str: str
		:param onlygiven: Indicates whether empty values in. newdev. ,. newass. and. newloc. should be ignored. If 1, empty values are ignored. If 0, empty values are set., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Item designation values applied or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.SetCompleteName(newdev, newass, newloc, onlygiven)

	def SetDeviceAssignment(self, newass:str) -> int:
		"""
		Sets the field item's higher level assignment value.

		:param newass: New higher level assignment value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Higher level assignment value applied or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.SetDeviceAssignment(newass)

	def GetDeviceAssignment(self) -> str:
		"""
		Gets the field item's higher level assignment value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Higher level assignment value supplied |
		| "&lt;Empty&gt;" | No higher level assignment value supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.GetDeviceAssignment()

	def SetDeviceLocation(self, newloc:str) -> int:
		"""
		Sets the field item's location value.

		:param newloc: New location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Location value applied or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.SetDeviceLocation(newloc)

	def GetDeviceLocation(self) -> str:
		"""
		Gets the field item's location value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Location value supplied |
		| "&lt;Empty&gt;" | No location value supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.GetDeviceLocation()

	def SetDeviceName(self, newdev:str) -> int:
		"""
		Sets the field item's device name value.

		:param newdev: New device name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Device name value applied or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.SetDeviceName(newdev)

	def GetDeviceName(self) -> str:
		"""
		Gets the field item's device designation value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Device designation value supplied |
		| "&lt;Empty&gt;" | No device designation value supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.GetDeviceName()

	def GetAssignedOptionExpressionsEx(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options)  including variant instances assigned to the field item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.23
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressionsEx(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def GetInterruptBorder(self) -> bool:
		"""
		Gets a value indicating if the field border is interrupted where connection lines cross the field item's boundary.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Field border is interrupted where connection lines cross the field item's boundary |
		| 0 | Field border is not interrupted where connection lines cross the field item's boundary or an error occurred |

		Available since E3.series TLB-Versions: 10.22
		"""
		return self._obj.GetInterruptBorder()

	def SetInterruptBorder(self, interrupt:bool) -> bool:
		"""
		Sets whether the field border is interrupted where connection lines cross the field item's boundary.

		:param interrupt: New field border interruption flag value. If 1, the field item's border is interrupted where connection lines cross the field item's boundary. If 0, the field item's border is not interrupted where connection lines cross the field item's boundary
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 or 0 | Previous interrupt border value or an error occurred |

		Available since E3.series TLB-Versions: 10.22
		"""
		return self._obj.SetInterruptBorder(interrupt)

	def GetInterruptBorderGap(self) -> float:
		"""
		Gets the size of the gap when the field border is interrupted where connection lines cross the field item's boundary.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Size of the gap when the field border is interrupted where connection lines cross the field item's boundary |
		| 0.0 | Size of the gap when the field border is interrupted where connection lines cross the field item's boundary or an error occurred |

		Available since E3.series TLB-Versions: 10.22
		"""
		return self._obj.GetInterruptBorderGap()

	def SetInterruptBorderGap(self, gap:float) -> float:
		"""
		Sets the size of the gap when the field border is interrupted where connection lines cross the field item's boundary.

		:param gap: New size of the interrupt border gap value
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous interrupt border gap value or an error occurred |

		Available since E3.series TLB-Versions: 10.22
		"""
		return self._obj.SetInterruptBorderGap(gap)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the field item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the field item |
		| "&lt;Empty&gt;" | No field item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a field as the current item.

		:param gid: Global identifier value of a field item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current field item |
		| "&lt;Empty&gt;" | No field item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current field item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current field item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a field as the current item.

		:param guid: Globally unique identifier value of a field item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current field item |
		| "&lt;Empty&gt;" | No field item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- IGraphInterface--------------------
class Graph:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Graph. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current graphic item identifier |
		| 0 | No graphic item |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a graphic as the current item.

		:param id: Unique value identifying a graphic item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current graphic item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetId(id)

	def CreateText(self, shti:int, text:str, x:float, y:float) -> int:
		"""
		Adds a new text graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the text item on
		:type int: int
		:param text: Text value
		:type str: str
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new text item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateText(shti, text, x, y)

	def CreateRotatedText(self, shti:int, text:str, x:float, y:float, rotation:float) -> int:
		"""
		Adds a new text graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the text item on
		:type int: int
		:param text: Text value
		:type str: str
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rotation: Rotation value in degrees
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new text item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateRotatedText(shti, text, x, y, rotation)

	def CreateLine(self, shti:int, x1:float, y1:float, x2:float, y2:float) -> int:
		"""
		Adds a new line graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the graphic item on
		:type int: int
		:param x1: First placement position on the x-axis
		:type float: float
		:param y1: First placement position on the y-axis
		:type float: float
		:param x2: Second placement position on the x-axis
		:type float: float
		:param y2: Second placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateLine(shti, x1, y1, x2, y2)

	def CreateRectangle(self, shti:int, x1:float, y1:float, x2:float, y2:float) -> int:
		"""
		Adds a new rectangle graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the graphic item on
		:type int: int
		:param x1: First placement position on the x-axis
		:type float: float
		:param y1: First placement position on the y-axis
		:type float: float
		:param x2: Second placement position on the x-axis
		:type float: float
		:param y2: Second placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateRectangle(shti, x1, y1, x2, y2)

	def CreateMeasure(self, shti:int, x1:float, y1:float, x2:float, y2:float) -> int:
		"""
		Adds a new dimension line graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the graphic item on
		:type int: int
		:param x1: First placement position on the x-axis
		:type float: float
		:param y1: First placement position on the y-axis
		:type float: float
		:param x2: Second placement position on the x-axis
		:type float: float
		:param y2: Second placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Identifier of the new graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateMeasure(shti, x1, y1, x2, y2)

	def CreatePolygon(self, shti:int, pnts:int, x:list[int], y:list[int]) -> int:
		"""
		Adds a new polygon graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the graphic item on
		:type int: int
		:param pnts: Number of placement positions in. x. and. y
		:type int: int
		:param x: Array of placement positions on the x-axis
		:type list[int]: list[int]
		:param y: Array of placement positions on the y-axis
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreatePolygon(shti, pnts, x, y)

	def CreateCircle(self, shti:int, x:float, y:float, radius:float) -> int:
		"""
		Adds a new circle graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the graphic item on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param radius: Radius of the circle
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateCircle(shti, x, y, radius)

	def CreateArc(self, shti:int, x:float, y:float, radius:float, start:float, end:float) -> int:
		"""
		Adds a new arc graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the graphic item on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param radius: Radius of the circle of the arc
		:type float: float
		:param start: Angle of the circle to begin the arc
		:type float: float
		:param end: Angle of the circle to end the arc
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateArc(shti, x, y, radius, start, end)

	def Place(self, x:float, y:float) -> int:
		"""
		Places or repositions the graphic item.

		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Graphic item placed or repositioned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.Place(x, y)

	def GetType(self) -> int:
		"""
		Gets a value representing the type of the graphic item.

		:return:
		Type: int **Available enum type:** e3series.types.GraphType.

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type value of the graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetType()

	def GetLevel(self) -> int:
		"""
		Gets the graphic item's display level value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Display level value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLevel()

	def SetLevel(self, newlev:int) -> int:
		"""
		Sets the graphic item's display level value.

		:param newlev: Display level value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display level value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLevel(newlev)

	def GetGraphCount(self) -> int:
		"""
		Gets the number of graphic items belonging to the group graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | The number of items in the group graphic |
		| 0 | an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetGraphCount()

	def GetGraphIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of graphic items belonging to the group graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of graphic items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetGraphIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Delete(self) -> int:
		"""
		Deletes the graphic item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the graphic item |
		| 0 | Graphic item was deleted or no graphic item was set |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.Delete()

	def GetColour(self) -> int:
		"""
		Gets the graphic item's color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or the operation has failed |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetColour()

	def SetColour(self, newcol:int) -> int:
		"""
		Sets the graphic item's color.

		:param newcol: Color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Color value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetColour(newcol)

	def GetHatchColour(self) -> int:
		"""
		Gets the graphic item's hatch color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Hatch color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or the operation has failed |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetHatchColour()

	def SetHatchColour(self, newcol:int) -> int:
		"""
		Sets the graphic item's hatch color.

		:param newcol: Hatch color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Hatch color value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetHatchColour(newcol)

	def GetAssignedOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of options assigned to the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of assigned options passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned option identifiers are supplied or an error occurred |
		| -1 | An option contains a Boolean expression or an alias |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetAssignedOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateImage(self, sheetid:int, xpos:float, ypos:float, xsize:float, ysize:float, filename:str, embed:int=1) -> int:
		"""
		Adds a new image graphic item onto a sheet of the project.

		:param sheetid: Identifier of the sheet to place the graphic item on
		:type int: int
		:param xpos: Placement position on the x-axis
		:type float: float
		:param ypos: Placement position on the y-axis
		:type float: float
		:param xsize: Size of the graphic on the x-axis
		:type float: float
		:param ysize: Size of the graphic on the y-axis
		:type float: float
		:param filename: Path and name of the image file to be used
		:type str: str
		:param embed: If set to 0, a reference to the image is stored in the project. If set to 1, the image is stored internally in the project., defaults to 1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic image item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateImage(sheetid, xpos, ypos, xsize, ysize, filename, embed)

	def GetImageInfo(self) -> tuple[int, float, float, float, float, str, int]:
		"""
		Gets the image graphic item's values.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xpos | float | Placement position on the x-axis passed out of the function |
		| 2 | ypos | float | Placement position on the y-axis passed out of the function |
		| 3 | xsize | float | Size of the graphic on the x-axis passed out of the function |
		| 4 | ysize | float | Size of the graphic on the y-axis passed out of the function |
		| 5 | filename | str | Path and name of the image file passed out of the function |
		| 6 | embed | int | Image storage status passed out of the function. If value is 0, a reference to the image stored in the project. If value is 1, the image is stored internally in the project |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Items values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetImageInfo(dummy, dummy, dummy, dummy, dummy, dummy)

	def SetImageInfo(self, xpos:float, ypos:float, xsize:float, ysize:float, filename:str="", embed:int=-1) -> int:
		"""
		Sets the image graphic item's values.

		:param xpos: Placement position on the x-axis
		:type float: float
		:param ypos: Placement position on the y-axis
		:type float: float
		:param xsize: Size of the graphic on the x-axis
		:type float: float
		:param ysize: Size of the graphic on the y-axis
		:type float: float
		:param filename: Path and name of the image file to be used. Default value is "<Empty>", defaults to ""
		:type str: str
		:param embed: If set to 0, a reference to the image is stored in the project. If set to 1, the image is stored internally in the project. If set to -1, the current image storage method will be retained., defaults to -1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New values are applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetImageInfo(xpos, ypos, xsize, ysize, filename, embed)

	def IsRedlined(self) -> int:
		"""
		Gets the graphic's redlined status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | redlined status is on |
		| 0 | redlined status is off |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.IsRedlined()

	def GetLineColour(self) -> int:
		"""
		Gets the graphic item's line color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Line color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or the operation has failed |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLineColour()

	def SetLineColour(self, newcol:int) -> int:
		"""
		Sets the graphic item's line color.

		:param newcol: Line color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Line color value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLineColour(newcol)

	def GetLineWidth(self) -> float:
		"""
		Gets the line width of a graphic item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Line width value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLineWidth()

	def SetLineWidth(self, newwid:float) -> float:
		"""
		Sets the line width of a graphic item.

		:param newwid: Line width value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous line width value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLineWidth(newwid)

	def GetLineStyle(self) -> int:
		"""
		Gets the line style of a graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Line style value, See Line Styles for possible values |
		| 0 or &gt;47 | User defined line style value |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLineStyle()

	def SetLineStyle(self, newstyle:int) -> int:
		"""
		Sets the line style of a graphic item.

		:param newstyle: Line style value. See Line Styles for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Previous line style value |
		| 0 or &gt;47 | Previous user defined line style value |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLineStyle(newstyle)

	def GetHatchLineWidth(self) -> float:
		"""
		Gets the line width of a graphic item's hatch.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Hatch line width value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetHatchLineWidth()

	def SetHatchLineWidth(self, newwid:float) -> float:
		"""
		Sets the line width of a graphic item's hatch.

		:param newwid: Hatch line width value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous hatch line width value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetHatchLineWidth(newwid)

	def GetHatchLineStyle(self) -> int:
		"""
		Gets the line style of a graphic item's hatch.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Hatch line style value, See Line Styles for possible values |
		| 0 or &gt;47 | 0 or &gt;47 |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetHatchLineStyle()

	def SetHatchLineStyle(self, newstyle:int) -> int:
		"""
		Sets the line style of a graphic item's hatch.

		:param newstyle: Hatch line style value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Previous hatch line style value, See Line Styles for possible values |
		| 0 or &gt;47 | Previous hatch line style value |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetHatchLineStyle(newstyle)

	def GetHatchLineDistance(self) -> float:
		"""
		Gets the distance between the lines of a graphic item's hatch.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Hatch line distance value |
		| -1.0 | Graphic item has no hatch or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetHatchLineDistance()

	def SetHatchLineDistance(self, newdist:float) -> float:
		"""
		Sets the distance between the lines of a graphic item's hatch.

		:param newdist: Hatch line distance value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Previous hatch line distance value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetHatchLineDistance(newdist)

	def GetArrows(self) -> int:
		"""
		Gets a value describing how arrows are displayed on the graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Arc data is successfully supplied |
		| 0 | No arrows or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetArrows()

	def SetArrows(self, newarrows:int) -> int:
		"""
		Sets a value specifying how arrows are displayed on the graphic item.

		:param newarrows: Arrows display value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Previous arrows display value |
		| 0 | Previously no arrows displayed or error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetArrows(newarrows)

	def GetHatchPattern(self) -> tuple[int, float, float]:
		"""
		Gets a value representing the used hatch pattern of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | angle1 | float | Angle value in degrees of a hatch line if a line or cross hatch pattern is in use. The value will be 0.0 if neither a line or cross hatch pattern is in use |
		| 2 | angle2 | float | Angle value in degrees of a hatch line if a cross hatch pattern is in use. The value will be 0.0 if a cross hatch pattern is not in use |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No hatch pattern or error occurred |
		| 1 | Solid hatch |
		| 2 | Line hatch |
		| 4 | Cross hatch |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetHatchPattern(dummy, dummy)

	def SetHatchPattern(self, newpat:int, angle1:float, angle2:float) -> int:
		"""
		Sets a value representing the hatch pattern of the graphic item.

		:param newpat: Hatch pattern value to apply
		:type int: int
		:param angle1: Angle value in degrees of a hatch line to apply. Value is only used if newPat is a line or cross hatch pattern value. The value range is from 90.0 (pointing upwards) to 0.0 (pointing rightwards) to -90.0 (pointing downwards)
		:type float: float
		:param angle2: Angle value in degrees of a hatch line to apply. Value is only used if newPat is a cross hatch pattern value. The value range is from 90.0 (pointing upwards) to 0.0 (pointing rightwards) to -90.0 (pointing downwards)
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No previous hatch pattern value set or error occurred |
		| 1, 2 or 4 | Previous hatch pattern value |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetHatchPattern(newpat, angle1, angle2)

	def GetTypeId(self) -> int:
		"""
		Gets a value representing the type of the graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type value of the graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetTypeId()

	def CreateFromSymbol(self, shti:int, x:float, y:float, rot:str, scale:float, maintaintextsize:bool, symnam:str, symver:str) -> int:
		"""
		Adds a new group graphic item, based on a database symbol, onto a sheet of the project.

		:param shti: Identifier of the sheet to place the graphic item on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Rotation value in degrees. See Rotation (String) for possible values
		:type str: str
		:param scale: Rotation value in degrees
		:type float: float
		:param maintaintextsize: scale. is applied to text graphics if. maintaintextsize. is set to 0. scale is ignored by text graphics if maintaintextsize is greater than 0
		:type bool: bool
		:param symnam: Name of database symbol to use to create the graphic
		:type str: str
		:param symver: Version of database symbol to use to create the graphic
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new group graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateFromSymbol(shti, x, y, rot, scale, maintaintextsize, symnam, symver)

	def GetArc(self) -> tuple[int, float, float, float, float, float]:
		"""
		Gets the arc placement data of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xm | float | Position of the arc center on the x-axis  passed out of the function |
		| 2 | ym | float | Position of the arc center on the y-axis  passed out of the function |
		| 3 | rad | float | Radius of the arc  passed out of the function |
		| 4 | startang | float | Start angle of the arc  passed out of the function |
		| 5 | endang | float | End angle of the arc  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Arc data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetArc(dummy, dummy, dummy, dummy, dummy)

	def GetCircle(self) -> tuple[int, float, float, float]:
		"""
		Gets the circle placement position of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xm | float | Position of the circle center on the x-axis passed out of the function |
		| 2 | ym | float | Position of the circle center on the y-axis passed out of the function |
		| 3 | rad | float | Radius of the circle passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Circle data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetCircle(dummy, dummy, dummy)

	def GetLine(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the line placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x1 | float | First placement position on the x-axis passed out of the function |
		| 2 | y1 | float | First placement position on the y-axis passed out of the function |
		| 3 | x2 | float | Second placement position on the x-axis passed out of the function |
		| 4 | y2 | float | Second placement position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Line data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetLine(dummy, dummy, dummy, dummy)

	def GetPolygon(self) -> tuple[int, int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the polygon placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | npnts | int | Number of placement positions passed out of the function |
		| 2 | xarr | tuple[float,...] | Array of placement positions on the x-axis passed out of the function |
		| 3 | yarr | tuple[float,...] | Array of placement positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Polygon data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, npnts, xarr, yarr = self._obj.GetPolygon(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, npnts, xarr, yarr

	def GetRectangle(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the rectangle placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x1 | float | First placement position on the x-axis passed out of the function |
		| 2 | y1 | float | First placement position on the y-axis passed out of the function |
		| 3 | x2 | float | Second placement position on the x-axis passed out of the function |
		| 4 | y2 | float | Second placement position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Rectangle data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetRectangle(dummy, dummy, dummy, dummy)

	def SaveImage(self, filename:str) -> int:
		"""
		Saves the image graphic item's image data to an external file.

		:param filename: Path and name of the image file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Image file saved |
		| 0 | No graphic item set or no project open |
		| -1 | Invalid graphic item |
		| -2 | Graphic item is not an image |
		| -3 | filename is an invalid path |
		| -4 | filename has an invalid file extension |
		| -5 | Original image file is not available |
		| -6 | Image could not be saved |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SaveImage(filename)

	def CreateGroup(self, ids:list[int]) -> int:
		"""
		Combines graphic items into a single graphic item.

		:param ids: Array of graphic item identifiers to include in the group
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic group item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateGroup(ids)

	def UnGroup(self) -> tuple[int, tuple[int,...]]:
		"""
		Breaks a group graphic item into its individual graphic item parts.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of graphic item identifiers that were in the group passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of graphic items in ids |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.UnGroup(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetParentID(self) -> int:
		"""
		Gets the identifier of the parent item of a graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of parent item |
		| 0 | No parent found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetParentID()

	def SetParentID(self, id:int) -> int:
		"""
		Sets the graphic item's parent item.

		:param id: Item identifier of the parent
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Previous line width value |
		| 0 | Parent ungrouped or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetParentID(id)

	def CreateCurve(self, shti:int, pnts:int, x:list[float], y:list[float]) -> int:
		"""
		Adds a new curve graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the graphic item on
		:type int: int
		:param pnts: Number of placement positions in. x. and. y
		:type int: int
		:param x: Array of placement positions on the x-axis
		:type list[float]: list[float]
		:param y: Array of placement positions on the y-axis
		:type list[float]: list[float]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		x = [0.] + x
		y = [0.] + y
		return self._obj.CreateCurve(shti, pnts, x, y)

	def GetCurve(self) -> tuple[int, int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the curve placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | npnts | int | Number of placement positions passed out of the function |
		| 2 | xarr | tuple[float,...] | Array of placement positions on the x-axis passed out of the function |
		| 3 | yarr | tuple[float,...] | Array of placement positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Curve data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, npnts, xarr, yarr = self._obj.GetCurve(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, npnts, xarr, yarr

	def GetAssignedOptionExpressions(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options) assigned to the graphics item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressions(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def SetOptionExpressions(self, expressions:list[str]) -> int:
		"""
		Replaces the graphic item's option expressions.

		:param expressions: Array of strings of all option names, Boolean expressions or alias names of Boolean expressions
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.12
		"""
		return self._obj.SetOptionExpressions(expressions)

	def GetAssignedOptionExpressionsEx(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options) including variant instances assigned to the graphic item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.23
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressionsEx(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the graphic item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the graphic item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.DeleteAttribute(name)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the graphic item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the graphic item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the graphics item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetAttributeValue(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the graphic item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.HasAttribute(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the graphic item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.SetAttributeValue(name, value)

	def CreateCloud(self, shti:int, pnts:int, x:list[float], y:list[float]) -> int:
		"""
		Adds a new cloud graphic item onto a sheet of the project.

		:param shti: Identifier of the sheet to place the graphic item on
		:type int: int
		:param pnts: Number of placement positions in. x. and. y
		:type int: int
		:param x: Array of placement positions on the x-axis
		:type list[float]: list[float]
		:param y: Array of placement positions on the y-axis
		:type list[float]: list[float]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.70
		"""
		x = [0.] + x
		y = [0.] + y
		return self._obj.CreateCloud(shti, pnts, x, y)

	def GetCloud(self) -> tuple[int, int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the cloud placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | npnts | int | Number of placement positions passed out of the function |
		| 2 | xarr | tuple[float,...] | Array of placement positions on the x-axis passed out of the function |
		| 3 | yarr | tuple[float,...] | Array of placement positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Cloud data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.70
		"""
		dummy=0
		ret, npnts, xarr, yarr = self._obj.GetCloud(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, npnts, xarr, yarr

	def SetRedlined(self, onoff:bool) -> int:
		"""
		Sets the graphic's redlined status.

		:param onoff: Redlined status value to apply. If 1, the redlined status is set to on. If 0, the redlined status in set to off., defaults to TRUE
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous redlined status was on |
		| 0 | Previous redlined status was off or an error occurred |

		Available since E3.series TLB-Versions: 17.04
		"""
		return self._obj.SetRedlined(onoff)

	def OptimizeGraphicObjects(self, ids:list[int], mode:int, angle:int) -> tuple[int, list[int]]:
		"""
		Optimizes the graphics objects by reducing the number and modifying them.

		:param ids: Array of graphic identifiers to be optimized passed into the function and passed out optimized
		:type list[int]: list[int]
		:param mode: Type of optimization to apply
		:type int: int
		:param angle: Maximum angle for converting arcs to polygons
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | list[int] | Array of graphic identifiers to be optimized passed into the function and passed out optimized |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Graphic items have been optimized |
		| -1 | No project open |
		| -2 | Invalid mode value |
		| -3 | angle value out of range |

		Available since E3.series TLB-Versions: 22.00, 21.01, 20.22
		"""
		ret, ids = self._obj.OptimizeGraphicObjects(ids, mode, angle)
		ids = ids[1:] if type(ids) == list and len(ids) > 0 else []
		return ret, ids

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current graphic item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current  graphic item |
		| "&lt;Empty&gt;" | No graphic item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a graphic item as the current item.

		:param gid: Global identifier value of a graphic item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current graphic item |
		| "&lt;Empty&gt;" | No graphic item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def SendToForeground(self) -> int:
		"""
		Brings the display of the graphic item to the foreground of the sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Graphic item send to foreground |
		| -1 | No project open |
		| -2 | No graphic item set |
		| -3 | Error accessing graphic item |
		| -4 | Error accessing sheet item |
		| -5 | Graphic item cannot be sent to the foreground |
		| -6 | No license available |
		| -7 | Graphic item is locked |

		Available since E3.series TLB-Versions: 24.22
		"""
		return self._obj.SendToForeground()

	def SendToBackground(self) -> int:
		"""
		Brings the display of the graphic item to the background of the sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Graphic item send to background |
		| -1 | No project open |
		| -2 | No graphic item set |
		| -3 | Error accessing graphic item |
		| -4 | Error accessing sheet item |
		| -5 | Graphic item cannot be sent to the background |
		| -6 | No license available |
		| -7 | Graphic item is locked |

		Available since E3.series TLB-Versions: 24.22
		"""
		return self._obj.SendToBackground()

# -------------------- IModuleInterface--------------------
class Module:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Module. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current module item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current module item identifier |
		| 0 | No module item |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a module as the current item.

		:param id: Unique value identifying a module item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current module item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.SetId(id)

	def GetLevel(self) -> int:
		"""
		Gets the level of the current module item within the module hierarchy.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current module level |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetLevel()

	def GetParentModuleId(self) -> int:
		"""
		Gets the identifier of the parent module of the current module item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Parent module item identifier |
		| 0 | No parent module item or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetParentModuleId()

	def GetName(self) -> str:
		"""
		Gets the name of the current module item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Module item name value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the name of the current module item.

		:param name: Name of the module item
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | name assigned to the module item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.SetName(name)

	def GetFileName(self) -> str:
		"""
		Gets the system path and name of the file from which the module item was created.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File&gt;" | System path and name of the module item's associated file |
		| "&lt;Empty&gt;" | Module item's has no associated or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetFileName()

	def GetTypeName(self) -> str:
		"""
		Gets the type name of the current module item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Type&gt;" | Type name |
		| "&lt;Empty&gt;" | No type name or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetTypeName()

	def IsTypeLoadable(self) -> int:
		"""
		Indicates whether the module item's type exists in the module library.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Module type exists in the module library |
		| 0 | Module type does not exist in the module library or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.IsTypeLoadable()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the module item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the module item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the module item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the module item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the module item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the module item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the module item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.HasAttribute(name)

	def GetPortCount(self) -> int:
		"""
		Gets the number of the module ports belonging to the current module item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of module ports |
		| 0 | No  module ports found or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetPortCount()

	def GetPortIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the current module item's module ports.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of module port identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of module port identifiers in ids |
		| 0 | No module ports or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		dummy=0
		ret, ids = self._obj.GetPortIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Search(self, name:str) -> int:
		"""
		Searches for a module item matching the name.

		:param name: Name of the module
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Found module item identifier |
		| 0 | No module item found or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.Search(name)

	def GetParentSheetId(self) -> int:
		"""
		Gets the current module item's parent sheet identifier.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Parent sheet identifier |
		| 0 | Parent sheet is not visible or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetParentSheetId()

	def GetSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the module item's sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet items in ids |
		| 0 | No sheets or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		dummy=0
		ret, ids = self._obj.GetSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetModuleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the current module item's child modules.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of module identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of module identifiers in ids |
		| 0 | No modules or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		dummy=0
		ret, ids = self._obj.GetModuleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the module item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the module item |
		| "&lt;Empty&gt;" | No module item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a module as the current item.

		:param gid: Global identifier value of a module item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current module item |
		| "&lt;Empty&gt;" | No module item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- IModulePortInterface--------------------
class ModulePort:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize ModulePort. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current module port item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current module port item identifier |
		| 0 | No module port item |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a module port item as the current item.

		:param id: Unique value identifying a module port item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current module port item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the name of the current module port item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Module port item name value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the name of the current module port item.

		:param name: Name of the module port item
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | name assigned to the module port item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.SetName(name)

	def GetSymbolIds(self) -> tuple[int, tuple[int,...], tuple[int,...]]:
		"""
		Gets an array of identifiers of current module port item's symbols placed on the module block and on the module sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | OnBlockId | tuple[int,...] | Identifier of the symbol item placed on the module block passed out of the function |
		| 2 | OnSheetId | tuple[int,...] | Identifier of the symbol item placed on the module sheet passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1..2 | Total number of symbol item identifiers in OnBlockid and OnSheetId |
		| 0 | No symbol item identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		dummy=0
		ret, OnBlockId, OnSheetId = self._obj.GetSymbolIds(dummy, dummy)
		OnBlockId = OnBlockId[1:] if type(OnBlockId) == tuple and len(OnBlockId) > 0 else tuple()
		OnSheetId = OnSheetId[1:] if type(OnSheetId) == tuple and len(OnSheetId) > 0 else tuple()
		return ret, OnBlockId, OnSheetId

	def GetModuleId(self) -> int:
		"""
		Gets the identifier of the module item the current module port belongs to.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Module item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetModuleId()

	def IsBus(self) -> int:
		"""
		Indicates whether the module port item is a bus port.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Module port is a bus port |
		| 0 | Module port is not a bus port or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.IsBus()

	def GetSignalId(self) -> int:
		"""
		Gets the identifier of the signal carried by the current module port item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Signal item identifier |
		| 0 | No signal for an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetSignalId()

	def GetBusName(self) -> str:
		"""
		Gets the bus name of the current module port item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Module port item bus name value |
		| "&lt;Empty&gt;" | Module port is not a bus port or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetBusName()

	def SetBusName(self, name:str) -> int:
		"""
		Sets the bus name of the current module port item.

		:param name: Bus name of the module port item
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | name assigned as the bus name |
		| 0 | Module port is not a bus port or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.SetBusName(name)

	def GetSignalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the signals carried by the current bus module port item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of signals identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of signal items in ids |
		| 0 | No signals or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		dummy=0
		ret, ids = self._obj.GetSignalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the module port item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the module port item |
		| "&lt;Empty&gt;" | No module port item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a module port as the current item.

		:param gid: Global identifier value of a module port item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current module port item |
		| "&lt;Empty&gt;" | No module port item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current module port item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current module port item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a module port as the current item.

		:param guid: Globally unique identifier value of a module port item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current module port item |
		| "&lt;Empty&gt;" | No module port item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- INetSegmentInterface--------------------
class NetSegment:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize NetSegment. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current net segment item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current net segment item identifier |
		| 0 | No net segment item |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a net segment item as the current item.

		:param id: Unique value identifying a net segment item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current net segment item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the net segment item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Pin name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetName()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the net segment item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the net segment item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the net segment item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the connection net item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the net segment item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the net segment item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the net segment item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.HasAttribute(name)

	def DisplayAttributeValue(self, name:str) -> int:
		"""
		Displays an attribute value from the net segment item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text item identifier displaying the attribute value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.DisplayAttributeValue(name)

	def DisplayAttributeValueAt(self, name:str, sheetid:int, x:float, y:float) -> int:
		"""
		Displays an attribute value from the net segment item at a specific position.

		:param name: Name of the attribute
		:type str: str
		:param sheetid: Sheet identifier to display the attribute value on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text item identifier displaying the attribute value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.DisplayAttributeValueAt(name, sheetid, x, y)

	def SetAttributeVisibility(self, name:str, onoff:int) -> int:
		"""
		Sets the visibility status of all text items representing the net segment item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param onoff: Indicates whether the text items' visibility status should be shown or hidden. If > 0, the text items are shown. If 0, the text items are hidden
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items changed |
		| 0 | No text items found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetAttributeVisibility(name, onoff)

	def GetCoreCount(self) -> int:
		"""
		Gets the number of conductors and wires contained within the net segment item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors and wires |
		| 0 | No conductors and wires or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetCoreCount()

	def GetCoreIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors contained in the current net segment item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors in ids |
		| 0 | No conductors or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetCoreIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSignalName(self) -> str:
		"""
		Gets the net segment item's signal name or bus name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Pin item's signal name or bus name value is supplied |
		| "&lt;Empty&gt;" | No signal name or bus name value or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetSignalName()

	def SetSignalName(self, name:str) -> int:
		"""
		Sets the net segment item's signal name or bus name value.

		:param name: New signal name or bus name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signal name or bus name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetSignalName(name)

	def Highlight(self) -> int:
		"""
		Highlights the net segment item on the sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segment item elements highlighted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.Highlight()

	def GetNetId(self) -> int:
		"""
		Gets the identifier of the net item in which the net segment item is located.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Net item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetNetId()

	def GetLength(self) -> float:
		"""
		Gets the length of the net segment item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Net segment length value |
		| 0.0 | Net segment has no length value or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLength()

	def SetLength(self, newlen:float) -> float:
		"""
		Sets the length of the net segment item.

		:param newlen: New length value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | If the net segment is on a panel, the new length value |
		| 0.0 | If the net segment is on a panel, the new length was not applied, If the new segment is not on a panel, the new length might be applied |
		| -1.0 | No project open |
		| -2.0 | No net segment item is set |
		| -3.0 | newlen is a negative value |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLength(newlen)

	def GetLineSegments(self) -> tuple[int, int, tuple[int,...], tuple[int,...], tuple[int,...]]:
		"""
		Gets the net segment's connect lines' location and type within the project.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | shtid | int | Identifier of the sheet passed out of the function |
		| 2 | xarr | tuple[int,...] | Array of connect line positions on the x-axis passed out of the function |
		| 3 | yarr | tuple[int,...] | Array of connect line positions on the y-axis passed out of the function |
		| 4 | PointTypArr | tuple[int,...] | Array of values indicating if the position represents a spline passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of values within the arrays |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, shtid, xarr, yarr, PointTypArr = self._obj.GetLineSegments(dummy, dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		PointTypArr = PointTypArr[1:] if type(PointTypArr) == tuple and len(PointTypArr) > 0 else tuple()
		return ret, shtid, xarr, yarr, PointTypArr

	def SetLineColour(self, newcol:int) -> int:
		"""
		Sets the net segment item's line color.

		:param newcol: Line color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Line color value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLineColour(newcol)

	def SetLineStyle(self, newstl:int) -> int:
		"""
		Sets the line style of a net segment item.

		:param newstl: Line style value. See Line Styles for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Line style value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLineStyle(newstl)

	def SetLineWidth(self, newwid:float) -> int:
		"""
		Gets the  line width of the net segment item.

		:param newwid: New line width value
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Line width value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLineWidth(newwid)

	def SetLineLevel(self, newlev:int) -> int:
		"""
		Sets the value of the net segment's connect line display level.

		:param newlev: New level value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New level value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLineLevel(newlev)

	def GetSymbolCount(self) -> int:
		"""
		Gets the number of symbols contained in the net segment item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbols |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetSymbolCount()

	def GetSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductor indicator symbols placed on the net segment item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbols passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbols in ids |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAssignedOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of options assigned to the net segment item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of assigned options passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned option identifiers are supplied or an error occurred |
		| -1 | An option contains a Boolean expression or an alias |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetAssignedOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Delete(self) -> int:
		"""
		Deletes the net segment item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &lt; 0 | Identifier of the current net segment item |
		| 0 | Net segment item deleted |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.Delete()

	def GetBusName(self) -> str:
		"""
		Gets the net segment item's bus name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Net segment item's bus name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetBusName()

	def SetBusName(self, name:str) -> int:
		"""
		Sets the net segment item's bus name.

		:param name: Name of the new bus
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Bus name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetBusName(name)

	def GetSignalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the bus net segment item's signals.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of signals passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 10 | Number of items in ids |
		| 0 | No signals found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetSignalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsView(self) -> int:
		"""
		Indicates whether the net segment item connects connector view symbols.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Net segment item connects connector view symbols |
		| 0 | Net segment item does not connect connector view symbols or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.IsView()

	def IsBus(self) -> int:
		"""
		Indicates whether the net segment item is part of a bus.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Net segment is part of a bus |
		| 0 | Net segment is not part of a bus |
		| 4711 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.IsBus()

	def IsPanelPath(self) -> int:
		"""
		Indicates whether the net segment item is on a panel sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Net segment is on a panel sheet |
		| 0 | Net segment is not on a panel sheet or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.IsPanelPath()

	def IsOffline(self) -> int:
		"""
		Indicates the net segment item's checked out status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Net segment item is checked out |
		| 0 | Net segment item is not checked out or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.IsOffline()

	def GetLevel(self) -> int:
		"""
		Gets the net segments item's display level value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Display level value supplied |
		| 0 | Error occurred |
		| -1 | Lines of the net segment are placed on different levels |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLevel()

	def SetLevel(self, level:int) -> int:
		"""
		Sets the net segments item's display level value.

		:param level: Display level value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Previous display level value |
		| 0 | Error occurred |
		| -1 | Lines of the net segment are placed on different levels |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLevel(level)

	def GetLineStyle(self) -> int:
		"""
		Gets the line style of a net segment item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Line style value, See Line Styles for possible values |
		| 0 or &gt;47 | 0 or &gt;47 |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLineStyle()

	def GetLineColour(self) -> int:
		"""
		Gets the net segment item's line color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Line color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or the operation has failed |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLineColour()

	def GetLineWidth(self) -> float:
		"""
		Gets the line width of the net segment item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Line width value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLineWidth()

	def GetNodeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the net segment item's nodes.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of nodes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No node identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetNodeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetConnectedSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbols connected to the net segment item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbols passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No symbols are found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetConnectedSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetEffectiveDirection(self) -> tuple[int, int, int]:
		"""
		Gets the source and destination items at either end of the current net segment item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | fromID | int | Identifier of the source item passed out of the function |
		| 2 | toID | int | Identifier of the destination item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Source and destination item identifiers supplied |
		| 0 | Error has occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetEffectiveDirection(dummy, dummy)

	def SetEffectiveDirection(self, toID:int) -> int:
		"""
		Sets the effective direction of the current net segment item.

		:param toID: Identifier of the destination item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Source and destination item identifiers supplied |
		| 0 | Error has occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetEffectiveDirection(toID)

	def GetManufacturingLength(self) -> float:
		"""
		Gets the manufacturing length of the net segment.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Net segment manufacturing length value |
		| 0.0 | Net segment manufacturing length value or anrror occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetManufacturingLength()

	def SetManufacturingLength(self, newval:float) -> float:
		"""
		Sets the manufacturing length of the net segment.

		:param newval: Manufacturing length value
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 0.0 | Manufacturing length is assigned |
		| -1.0 | No project open |
		| -2.0 | No valid net segment item set |
		| -3.0 | newval is a negative value |
		| -10.0 | No Formboard license available, Available since v2018-19.44, v2019-20.24 and v2020-21.10 |
		| -11.0 | Net segment is not on a Formboard sheet, Available since v2018-19.44, v2019-20.24 and v2020-21.10 |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetManufacturingLength(newval)

	def GetSchemaLength(self) -> float:
		"""
		Gets the displayed length of the net segment item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Net segment display length value |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetSchemaLength()

	def AdjustSchemaLength(self) -> int:
		"""
		Sets the manufacturing length to the net segment item's displayed length.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Net segment manufacturing length set to the display length value |
		| 0 | No project open, no net segment item set or net segment is not on a formboard sheet |
		| -1 | Displayed length is the same as the manufacturing length |
		| -2 | Manufacturing length is 0 |
		| -3 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.AdjustSchemaLength()

	def GetRotation(self, anchorid:int) -> float:
		"""
		Gets the net segment item's rotation value.

		:param anchorid: Item identifier representing the start position to get the rotation value from
		:type int: int

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0..&lt; 360.0 | Rotation value in degrees supplied |
		| 0.0 | Rotation value supplied or an error occurred |
		| -1 | anchorid is invalid |
		| -2 | anchorid is not connected to the net segment item |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetRotation(anchorid)

	def SetRotation(self, anchorid:int, newval:float) -> float:
		"""
		Sets the net segment item's rotation value.

		:param anchorid: Item identifier representing the start position to set the rotation value to
		:type int: int
		:param newval: New rotation value
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 0.0..&lt; 360.0 | Previous rotation value in degrees |
		| -1 | No project open, no net segment item set or no E³.formboard license available |
		| -2 | Net segment is not placed on a formboard |
		| -3 | anchorid is invalid |
		| -4 | Rotation is not possible |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetRotation(anchorid, newval)

	def GetOuterDiameter(self) -> float:
		"""
		Gets the outer diameter of wires and cables running through the net segment item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Outer diameter |
		| 0.0 | No outer diameter or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetOuterDiameter()

	def GetAssignedOptionExpressions(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options) assigned to the net segment item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressions(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def SetOptionExpressions(self, expressions:list[str]) -> int:
		"""
		Replaces the net segment item's option expressions.

		:param expressions: Array of strings of all option names, Boolean expressions or alias names of Boolean expressions
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.12
		"""
		return self._obj.SetOptionExpressions(expressions)

	def GetConnectLineIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the connect lines of the net segment item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbols passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No symbols are found or an error occurred |

		Available since E3.series TLB-Versions: 9.22
		"""
		dummy=0
		ret, ids = self._obj.GetConnectLineIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAssignedOptionExpressionsEx(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options)  including variant instances assigned to the net segment item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.23
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressionsEx(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def SetSchemaLength(self, newval:float) -> float:
		"""
		Sets the displayed length of the net segment item.

		:param newval: New displayed length value
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 1.0 | Net segment display length value |
		| 0.0 | One of the following errors occurred:, No project openNo project item setNo E³.formboard license availableNet segment item is not located on a formboard sheet |
		| -1.0 | Displayed length is the same as the manufacturing length |
		| -2.0 | newval is invalid |
		| -3.0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetSchemaLength(newval)

	def GetTranslatedSignalName(self) -> str:
		"""
		Gets the net segment item's translated signal name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Translated name |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetTranslatedSignalName()

	def SetIgnoreForCablingTable(self, set:bool) -> int:
		"""
		Sets whether the net segment item's connection is ignored in the cabling table list.

		:param set: Ignore cabling table list status to apply. If 1, the connection is ignored. If 0, the connection is taken into account
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previously the net segment was ignored |
		| 0 | Previously the net segment was taken into account |
		| -1 | No project open |
		| -2 | No net segment item set |
		| -3 | Net segment is part of a formboard or topology net |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.SetIgnoreForCablingTable(set)

	def GetBundleSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of identifers of the net segment's bundle symbols.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of bundle symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of bundle symbol identifiers in ids |
		| 0 | Net segment has no bundle symbols or an error occurred |

		Available since E3.series TLB-Versions: 20.20
		"""
		dummy=0
		ret, ids = self._obj.GetBundleSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsBusbar(self) -> int:
		"""
		Indicates if the net segment item belongs to a busbar.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Net segment belongs to a busbar |
		| 0 | Net segment does not belong to a busbar |
		| -1 | No project open or no net segment item set |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.IsBusbar()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current net segment item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current net segment item |
		| "&lt;Empty&gt;" | No net segment item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a net segment item as the current item.

		:param gid: Global identifier value
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current net segment item |
		| "&lt;Empty&gt;" | No net segment item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- IOptionInterface--------------------
class Option:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Option. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current option or variant item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current option or variant item identifier |
		| 0 | No option or variant item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets an option or variant item as the current item.

		:param id: Unique value identifying an option or variant item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current option or variant item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the option item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Option name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the option item's name.

		:param name: New option name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Option item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def Create(self, name:str, parent:int=0, position:int=0, before:int=0) -> int:
		"""
		Creates a new option item.

		:param name: Name of the new option item
		:type str: str
		:param parent: Identifier of the parent option item. If 0, the new option item is placed on the top level., defaults to 0
		:type int: int
		:param position: Identifier of an existing option item the new option item should be placed next to. If 0, the new option item is placed at the end., defaults to 0
		:type int: int
		:param before: Indicates which side of the. position. option item the new option item is placed. If 1, the new option item is placed before position option item. If 0, the new option item is placed after position option item., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the created option item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(name, parent, position, before)

	def Delete(self, _del:int) -> int:
		"""
		Deletes the option item from the project.

		:param _del: Indicates whether items the option item is exclusively assigned to are also removed from the project.. If 0, the items are not deleted. If greater than 0, the items are deleted
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred, Current option or variant item identifier |
		| 0 | Option was deleted, no project open or no option item set |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete(_del)

	def Search(self, name:str) -> int:
		"""
		Searches for a option item matching the name.

		:param name: Name of the option
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Found option identifier |
		| 0 | No option was found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Search(name)

	def IsActive(self) -> int:
		"""
		Get the active status of the current option item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option is active |
		| 0 | Option is inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsActive()

	def Activate(self) -> int:
		"""
		Activates the option item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option was activated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Activate()

	def Deactivate(self) -> int:
		"""
		Deactivates the option item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option was activated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Deactivate()

	def Add(self, devi:int) -> int:
		"""
		Adds an item to the current option item.

		:param devi: Identifier of item to add to the option
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item added to the option item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Add(devi)

	def Remove(self, devi:int) -> int:
		"""
		Removes an item from the current option item.

		:param devi: Identifier of item to remove from the option
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item removed from the option item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Remove(devi)

	def GetFullName(self) -> str:
		"""
		Gets the option item's full name and path from the top level of the project tree.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Option name and path |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFullName()

	def GetInternalName(self) -> str:
		"""
		Gets the option item's name without text token translations.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Option name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetInternalName()

	def GetFullInternalName(self) -> str:
		"""
		Gets the option item's full name and path from the top level of the project tree without text token translations.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Option name and path |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFullInternalName()

	def GetDescription(self) -> str:
		"""
		Gets the option item's description.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Option description |
		| "&lt;Empty&gt;" | No description or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDescription()

	def GetInternalDescription(self) -> str:
		"""
		Gets the option item's description without text token translations.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Option description |
		| "&lt;Empty&gt;" | No description or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetInternalDescription()

	def IsAssignable(self) -> int:
		"""
		Indicates whether the current option item can be assigned to other items.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option item can be assigned to other items |
		| 0 | Option item cannot be assigned to other items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsAssignable()

	def IsVariant(self) -> int:
		"""
		Indicates whether the current option item is a variant item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option item is a variant item |
		| 0 | Option item is not a variant item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsVariant()

	def GetOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the child option items belonging to the current option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of option items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of option items in ids |
		| 0 | No child option items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetParentOptionId(self) -> int:
		"""
		Gets the identifier of the parent option item of the current option item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of parent option item |
		| 0 | Current option item is on the top level or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetParentOptionId()

	def GetPropertyFlags(self) -> int:
		"""
		Gets the option item's visibility and activation property values.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Property values |
		| 0 | No property values or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPropertyFlags()

	def SetPropertyFlags(self, newflags:int) -> int:
		"""
		Sets the option item's visibility and activation property values.

		:param newflags: Property value flags
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Property values |
		| =1 | No property values or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPropertyFlags(newflags)

	def GetAllDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the devices assigned to the option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of device identifiers in ids |
		| 0 | No devices assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAllDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the sheets assigned to the option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet items in ids |
		| 0 | No sheets assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbols assigned to the current option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbols passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbols in ids |
		| 0 | No symbols assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the wires and connector pins assigned to the option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of wire and connector pin identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of wires and connector pins in ids |
		| 0 | No wires and connector pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the net segments assigned to the option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of net segments passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segments in ids |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGraphIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the graphics assigned to the option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of graphic identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No graphic items assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetGraphIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTextIds(self, txttyp:int=0, search_string:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the text items assigned to the current option item.

		:param txttyp: Text type filter. Only text item identifiers with this Text Type will be supplied. All text item identifiers are supplied if txttyp is 0. The default value 0, defaults to 0
		:type int: int
		:param search_string: Text value filter, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No text items assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTextIds(dummy, txttyp, search_string)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def MoveTo(self, vari:int, before:int=0) -> int:
		"""
		Moves the option item to another position within the project tree.

		:param vari: Identifier of an existing option item in the project tree indicating the position where the current option item is to be moved. If 0, current option item is placed at the end
		:type int: int
		:param before: Indicates where the option is placed relative to the. vari. option., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option item moved |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.MoveTo(vari, before)

	def Highlight(self) -> bool:
		"""
		Highlights the items assigned to the current option item.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Items assigned to the current option item highlighted |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Highlight()

	def ResetHighlight(self) -> bool:
		"""
		Removed highlights from the items assigned to the current option item.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Highlights removed from items assigned to the current option item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ResetHighlight()

	def IsHighlighted(self) -> bool:
		"""
		Indicates whether the items assigned to the current option item are highlighted.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Items assigned to the current option item are highlighted |
		| 0 | Items assigned to the current option item are not highlighted or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsHighlighted()

	def SetDescription(self, newval:str) -> int:
		"""
		Sets the option item's description.

		:param newval: New option description value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current option item identifier |
		| 0 | New description value applied or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.SetDescription(newval)

	def GetFieldIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the fields assigned to the option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of field item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of field item identifiers in ids |
		| 0 | No field items assigned or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		dummy=0
		ret, ids = self._obj.GetFieldIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsPackage(self) -> int:
		"""
		Indicates whether the current option item is an option package item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option item is an option package item |
		| 0 | Option item is not an option package item or an error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.IsPackage()

	def IsConfiguration(self) -> int:
		"""
		Indicates whether the current option item is a configuration item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option item is a configuration item |
		| 0 | Option item is not a configuration item or an error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.IsConfiguration()

	def CreatePackage(self, name:str, posId:int, before:int) -> int:
		"""
		Creates a new option package item.

		:param name: Name of the new option package item
		:type str: str
		:param posId: Identifier of an existing option item the new option package item should be placed next to
		:type int: int
		:param before: Indicates which side of the. position. option item the new option package item is placed. If 1, the new option package item is placed before position option item. If 0, the new option package item is placed after position option item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the created option package item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.CreatePackage(name, posId, before)

	def CreateConfiguration(self, name:str, posId:int, before:int) -> int:
		"""
		Creates a new configuration item.

		:param name: Name of the new configuration item
		:type str: str
		:param posId: Identifier of an existing option item the new configuration item should be placed next to
		:type int: int
		:param before: Indicates which side of the. position. option item the new configuration item is placed. If 1, the new configuration item is placed before position option item. If 0, the new configuration item is placed after position option item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the created configuration item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.CreateConfiguration(name, posId, before)

	def ActivateAndLockOtherActivations(self) -> int:
		"""
		Activates the current configuration or package item and locks other options.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Configuration or package was activated and other options locked |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.ActivateAndLockOtherActivations()

	def UnLockOtherActivations(self) -> int:
		"""
		Unlocks option items if they were prevented from being activated as a result of the current configuration or package item being activated.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option items are unlocked |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.UnLockOtherActivations()

	def GetInclusiveOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the inclusive option items belonging to the current option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of option items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of option items in ids |
		| 0 | No inclusive option items or an error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		dummy=0
		ret, ids = self._obj.GetInclusiveOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetExclusiveOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the exclusive option items belonging to the current option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of option items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of option items in ids |
		| 0 | No exclusive option items or an error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		dummy=0
		ret, ids = self._obj.GetExclusiveOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AssignToID(self, parentid:int, how:int) -> int:
		"""
		Assigns the current option item to a parent option item.

		:param parentid: Identifier of the parent option item
		:type int: int
		:param how: Indicates the exclusivity of the option item. If 1, the option item is added to the inclusive list of the parent option item. if 2, the option item is added to the exclusive list of the parent option item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Current option item added to the parent option item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.AssignToID(parentid, how)

	def UnassignFromID(self, parentid:int) -> int:
		"""
		Unassigns the current option item from its parent option.

		:param parentid: Identifier of the parent option item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Current option item removed from the parent option item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.UnassignFromID(parentid)

	def SetXMLVariantID(self, name:str) -> int:
		"""
		Sets the GUID to the current option or variant item.

		:param name: Globally unique identifier value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Globally unique identifier applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.SetXMLVariantID(name)

	def GetXMLVariantID(self) -> str:
		"""
		Gets the globally unique identifier of the current option or variant item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current option or variant item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.GetXMLVariantID()

	def IsObjectActive(self, objid:int) -> int:
		"""
		Indicates whether an item is active.

		:param objid: Item identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is active |
		| 0 | Item is inactive or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.IsObjectActive(objid)

	def IsHarnessFamily(self) -> int:
		"""
		Indicates whether the current option item is a cable harness family item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option item is a cable harness family item |
		| 0 | Option item is not a cable harness family item or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.IsHarnessFamily()

	def IsHarnessDerivative(self) -> int:
		"""
		Indicates whether the current option item is a cable harness derivative item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option item is a cable harness derivative item |
		| 0 | Option item is not a cable harness derivative item or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.IsHarnessDerivative()

	def CreateHarnessFamily(self, name:str, posId:int, before:int) -> int:
		"""
		Creates a new cable harness family item.

		:param name: Name of the new cable harness family item
		:type str: str
		:param posId: Identifier of an existing option item the new cable harness family item should be placed next to
		:type int: int
		:param before: Indicates which side of the. position. option item the new cable harness family item is placed. If 1, the new cable harness family item is placed before position option item. If 0, the new cable harness family item is placed after position option item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the created cable harness family item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.CreateHarnessFamily(name, posId, before)

	def CreateHarnessDerivative(self, name:str, posId:int, before:int) -> int:
		"""
		Creates a new cable harness derivative item.

		:param name: Name of the new cable harness derivative item
		:type str: str
		:param posId: Identifier of an existing cable harness derivative item the new cable harness derivative item should be placed next to or a harness family item the new cable harness should be placed within
		:type int: int
		:param before: Indicates which side of the. position. existing cable harness derivative item the new cable harness derivative item is placed. If 1, the new cable harness derivative item is placed before position option item. If 0, the new cable harness derivative item is placed after position option item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the created cable harness derivative item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.CreateHarnessDerivative(name, posId, before)

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the option item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the option item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.DeleteAttribute(name)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the option item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the option item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the option item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.GetAttributeValue(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the option item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.HasAttribute(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the option item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.SetAttributeValue(name, value)

	def Sort(self, sortMode:int=0) -> int:
		"""
		Sorts the identifiers of the child option items of the current option item.

		:param sortMode: Sorting method., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option items sorted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.Sort(sortMode)

	def GetAllDeviantAttributeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes with deviating values of items assigned to the current option item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 17.04
		"""
		dummy=0
		ret, ids = self._obj.GetAllDeviantAttributeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsInUseByObject(self) -> int:
		"""
		Indicates whether any items are assigned to the option item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Items are assigned to the option item |
		| 0 | No items are assigned to the option item or an error occurred |

		Available since E3.series TLB-Versions: 19.15
		"""
		return self._obj.IsInUseByObject()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the option or variant item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the option or variant item |
		| "&lt;Empty&gt;" | No option or variant item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets an option or variant as the current item.

		:param gid: Global identifier value of an option or variant item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current option or variant item |
		| "&lt;Empty&gt;" | No option or variant item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current option or variant item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current option or variant item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets an option or variant as the current item.

		:param guid: Globally unique identifier value of an option or variant item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current option or variant item |
		| "&lt;Empty&gt;" | No option or variant item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- IOutlineInterface--------------------
class Outline:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Outline. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current contour item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current contour item identifier |
		| 0 | No contour item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a contour item as the current item.

		:param id: Unique value identifying an contour item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current contour item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the contour item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Contour name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def GetType(self) -> int:
		"""
		Gets a value representing the type of the contour item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type value of the contour item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetType()

	def GetPosition(self) -> tuple[int, float, float, float]:
		"""
		Gets the position of the contour item in the panel.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Position on the x-axis passed out of the function |
		| 2 | y | float | Position on the y-axis passed out of the function |
		| 3 | z | float | Position on the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Position values are supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetPosition(dummy, dummy, dummy)

	def GetRadius(self) -> float:
		"""
		Gets the radius of the drill hole contour item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Drill hole radius value |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetRadius()

	def GetHeight(self) -> float:
		"""
		Gets the height of the contour item in the panel.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Contour height value |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetHeight()

	def GetSymbolCount(self) -> int:
		"""
		Gets the number of symbols representing the contour item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbols |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolCount()

	def GetSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the symbols representing the contour item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol items in ids |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTypeId(self) -> int:
		"""
		Gets a value representing the type of the contour item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type value of the contour item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTypeId()

	def GetPathEx(self) -> tuple[int, tuple[float,...], tuple[float,...], tuple[float,...]]:
		"""
		Gets a polygon of points representing the path of a restriction or cutout contour.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xarr | tuple[float,...] | Array of positions on the x-axis passed out of the function |
		| 2 | yarr | tuple[float,...] | Array of positions on the y-axis passed out of the function |
		| 3 | zarr | tuple[float,...] | Array of positions on the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of points in xarr, yarr and zarr |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, xarr, yarr, zarr = self._obj.GetPathEx(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		zarr = zarr[1:] if type(zarr) == tuple and len(zarr) > 0 else tuple()
		return ret, xarr, yarr, zarr

	def UseInE3CutOut(self) -> bool:
		"""
		Indicates whether the contour item is used in E³.CutOut.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Contour item is used in E³.CutOut |
		| 0 | Contour item is not used in E³.CutOut or an error occurred |

		Available since E3.series TLB-Versions: 14.11
		"""
		return self._obj.UseInE3CutOut()

	def SetUseInE3CutOut(self, set:bool) -> int:
		"""
		Sets the contour item's usage status value in E³.CutOut.

		:param set: Value to assign to the. <span style="font-style: italic;color: #ff0000;">E³.</span>CutOut. usage. If 1, the contour is used in E³.CutOut. If 0, the contour is not used in E³.CutOut
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | set value is successfully assigned |
		| -1 | No project open |
		| -2 | No item is set |
		| -3 | Item is not a contour |
		| -4 | Contour is not a cutout or drill hole |
		| -5 | Device is locked, Available since v2020-21.01 |
		| -6 | E³.redliner or E³.viewer mode is active, Available since v2025-25.20 and v2023-24.50 |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.SetUseInE3CutOut(set)

	def UseCutOutGraphic(self) -> bool:
		"""
		Indicates whether an alternative graphic is used in E³.CutOut for the contour item.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | Alternative graphic usage is active however E³.CutOut usage is inactive |
		| 1 | Alternative graphic usage and E³.CutOut usage are active |
		| 0 | Alternative graphic usage is inactive |
		| -1 | No project open |
		| -2 | No item is set |
		| -3 | Item is not an contour |
		| -4 | Contour item is not a cutout type or drill hole type |

		Available since E3.series TLB-Versions: 21.10
		"""
		return self._obj.UseCutOutGraphic()

	def SetUseCutOutGraphic(self, set:bool) -> int:
		"""
		Sets the usage status of an alternative graphic being used for the contour item in E³.CutOut.

		:param set: Value to assign to the alternative graphic usage. If 1, the alternative graphic is used in E³.CutOut. If 0, the alternative graphic is not used in E³.CutOut
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | set is successfully assigned |
		| -1 | No project open |
		| -2 | No contour item is set |
		| -3 | Item is not a contour |
		| -4 | Contour is not a cutout or drill hole |
		| -5 | Device is locked |
		| -6 | Contour is dynamic |
		| -7 | E³.redliner or E³.viewer mode is activeAvailable since v2025-25.20 and v2023-24.50 |

		Available since E3.series TLB-Versions: 21.10
		"""
		return self._obj.SetUseCutOutGraphic(set)

	def IsThreadedHole(self) -> int:
		"""
		Indicates if the contour item represents a threaded drill hole.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Drill hole is threaded |
		| 0 | Drill hole is not threaded |
		| -1 | No project open |
		| -2 | No contour item set |
		| -3 | Set item is not a contour |
		| -4 | Contour is not a drill hole |

		Available since E3.series TLB-Versions: 21.31
		"""
		return self._obj.IsThreadedHole()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current contour item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current contour item |
		| "&lt;Empty&gt;" | No contour item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a contour item as the current item.

		:param gid: Global identifier value
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current contour item |
		| "&lt;Empty&gt;" | No contour item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def SetCreatesThreadedHole(self, set:bool, flags:int=0) -> int:
		"""
		Sets whether a drill hole should be threaded on the model's carrier object in  E³.CutOut.

		:param set: Value indicating whether the drill hole is threaded. If 1, the  drill hole is threaded. If 0, the  drill hole is not threaded
		:type bool: bool
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | set is successfully assigned |
		| -1 | No project open |
		| -2 | No contour item is set |
		| -3 | Item is not a contour |
		| -4 | Contour is not a drill hole |
		| -5 | Device is locked |
		| -6 | Drill hole is dynamically created on a mounting rail |
		| -7 | Drill hole defined in the component is read-only |
		| -8 | E³.redliner or E³.viewer mode is active |
		| -9 | flags is invalid |

		Available since E3.series TLB-Versions: 26.00
		"""
		return self._obj.SetCreatesThreadedHole(set, flags)

# -------------------- ISheetInterface--------------------
class Sheet:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Sheet. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetName(self) -> str:
		"""
		Gets the sheet item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Sheet name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> str:
		"""
		Sets the sheet item's name.

		:param name: New name of sheet
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | New sheet name |
		| "&lt;Empty&gt; | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def Remove(self) -> int:
		"""
		Closes the sheet item display window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet item display closed |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Remove()

	def Visible(self) -> int:
		"""
		Indicates if the sheet item is displayed.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet is displayed |
		| 0 | Sheet is not displayed or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Visible()

	def Delete(self) -> int:
		"""
		Deletes the current sheet from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet item was deleted |
		| -1 | Error occurred when checking out the sheet in multi-user |
		| -2 | After trying to check out in multi-user, the sheet is still offline |
		| -3 | Sheet is locked |
		| -4 | Sheet is a region |
		| -5 | Sheet is checked out as read only |
		| -6 | Sheet does not exist, Available since v2015-16.19 |
		| -7 | Sheet is checked out by another multi-user client, Available since v2016-17.33 and v2017-18.13 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def GetDrawingArea(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the coordinate values of the sheet item's drawing area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xmin | float | Lower left position on the x-axis passed out of the function |
		| 2 | ymin | float | Lower left position on the y-axis passed out of the function |
		| 3 | xmax | float | Upper right position on the x-axis passed out of the function |
		| 4 | ymax | float | Upper right position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Drawing area coordinates supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetDrawingArea(dummy, dummy, dummy, dummy)

	def GetTextCount(self) -> int:
		"""
		Gets the number of the sheet's text items.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items |
		| 0 | No text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTextCount()

	def GetTextIds(self, txttyp:int=0, search_string:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's text identifiers.

		:param txttyp: Text type filter. Only text identifiers with this Text Type will be supplied. All text identifiers are supplied if txttyp is 0., defaults to 0
		:type int: int
		:param search_string: Text value filter. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTextIds(dummy, txttyp, search_string)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSymbolCount(self) -> int:
		"""
		Gets the number of the sheet item's symbols.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol items |
		| 0 | No symbol items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolCount()

	def GetSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's symbol identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Create(self, modi:int, name:str, symbol:str, position:int, before:int) -> int:
		"""
		Creates a new schematic sheet item.

		:param modi: Identifier of the hierarchical block or module to which the sheet should be inserted
		:type int: int
		:param name: Name of the sheet
		:type str: str
		:param symbol: Border symbol of the sheet
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new sheet in the project
		:type int: int
		:param before: Indicates whether to insert the sheet before or after. position. If 0, the new sheet is inserted after position or as the last sheet if position is 0. If 1, the new sheet is inserted before position or as the first sheet if position is 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(modi, name, symbol, position, before)

	def CreatePanel(self, modi:int, name:str, symbol:str, position:int, before:int, refx:float, refy:float, refscale:float) -> int:
		"""
		Creates a new panel sheet item.

		:param modi: Value should be 0 since v2018-19.00
		:type int: int
		:param name: Name of the sheet
		:type str: str
		:param symbol: Border symbol of the sheet
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new sheet in the project
		:type int: int
		:param before: Indicates whether to insert the sheet before or after. position. If 0, the new sheet is inserted after position or as the last sheet if position is 0. If 1, the new sheet is inserted before position or as the first sheet if position is 0
		:type int: int
		:param refx: Position on the x-axis of the lower left corner of the sheet region
		:type float: float
		:param refy: Position on the y-axis of the lower left corner of the sheet region
		:type float: float
		:param refscale: Scale factor of the sheet region
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreatePanel(modi, name, symbol, position, before, refx, refy, refscale)

	def GetId(self) -> int:
		"""
		Gets the identifier of the current sheet item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current sheet item identifier |
		| 0 | No sheet item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a sheet as the current item.

		:param id: Unique value identifying a sheet item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current sheet item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def Search(self, modi:int, name:str) -> int:
		"""
		Searches for an item and sets it as the current sheet item.

		:param modi: Identifier of the hierarchical block or module in which to search
		:type int: int
		:param name: Name of the sheet item to search for
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the found sheet item |
		| 0 | No sheet item was found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Search(modi, name)

	def GetGraphCount(self) -> int:
		"""
		Gets the number of the sheet item's graphics.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of graphic items |
		| 0 | No graphics items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphCount()

	def GetGraphIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet item's graphic item identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of graphic identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No graphic items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetGraphIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetModuleCount(self) -> int:
		"""
		Gets the number of the sheet item's modules.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of module items |
		| 0 | No module items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetModuleCount()

	def GetModuleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's module identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of module identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No modules or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetModuleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def PlacePart(self, name:str, version:str, x:float, y:float, rot:float) -> int:
		"""
		Places a subcircuit on the sheet item.

		:param name: Subcircuit name from the database or a path to an e3p file
		:type str: str
		:param version: Subcircuit version number from the database
		:type str: str
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Not used
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 9 | Incompatible subcircuit file verison |
		| 8..4 | Error occurred |
		| 3 | Invalid name or version |
		| 1..2 | Error occurred |
		| 0 | Subcircuit placed on sheet |
		| -1 | Subcircuit consists of several sheets and the project setting Ignore sheet border is set (located in Settings → Placement → Import → Sheets) |
		| -2 | Subcircuit contains sheets and the project setting Ignore sheet border is not set (located in Settings → Placement → Import → Sheets) |
		| -3 | Subcircuit is already placed or other objects are placed at x, y |
		| -4 | Sheet is locked, Available since v2018-19.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PlacePart(name, version, x, y, rot)

	def GetNetSegmentCount(self) -> int:
		"""
		Gets the number of the sheet item's net segments.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segment items |
		| 0 | No net segment items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetNetSegmentCount()

	def GetNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's net segment identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of net segment identifiers |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def PrintOut(self, scale:float) -> int:
		"""
		Prints the sheet on the currently defined printer.

		:param scale: Re-sizes the print output
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet data sent to printer |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PrintOut(scale)

	def Export(self, format:str, version:int, file:str, flags:int=0) -> int:
		"""
		Exports the sheet content to a file.

		:param format: Format of the export file
		:type str: str
		:param version: Version of the export file
		:type int: int
		:param file: Path and name of the file
		:type str: str
		:param flags: Export options for VRML export files., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet is exported |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Export(format, version, file, flags)

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the sheet item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the sheet item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the sheet item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the sheet item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the sheet item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the sheet item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the sheet item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def ImportDXF(self, filename:str, scale:float, x:float, y:float, rot:int, font:str, flags:int=0) -> int:
		"""
		Imports a DXF or DWG format file's contents on a new sheet in the project.

		:param filename: Import file's path and name
		:type str: str
		:param scale: Scale of the contents
		:type float: float
		:param x: Placement of the file contents on the x-axis of the sheet. Ignored if bit value of 0x0010 is not included in flags
		:type float: float
		:param y: Placement of the file contents on the y-axis of the sheet. Ignored if bit value of 0x0010 is not included in flags
		:type float: float
		:param rot: Not used
		:type int: int
		:param font: Font name of texts on the sheet
		:type str: str
		:param flags: Flag bit values specifying how the file contents should be imported. x0000, defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the sheet |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ImportDXF(filename, scale, x, y, rot, font, flags)

	def GetAssignment(self) -> str:
		"""
		Gets the sheet item's higher level assignment value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Higher level assignment value supplied |
		| "&lt;Empty&gt;" | No higher level assignment value supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAssignment()

	def SetAssignment(self, newass:str) -> int:
		"""
		Sets the sheet item's higher level assignment value.

		:param newass: New higher level assignment value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Higher level assignment value applied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAssignment(newass)

	def GetLocation(self) -> str:
		"""
		Gets the sheet item's location value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Location value supplied |
		| "&lt;Empty&gt;" | No location value supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLocation()

	def SetLocation(self, newloc:str) -> int:
		"""
		Sets the sheet item's location value.

		:param newloc: New location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Location value applied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLocation(newloc)

	def SetCompleteName(self, newnam:str, newass:str, newloc:str) -> int:
		"""
		Sets all elements of the sheet item's  item designation.

		:param newnam: New sheet name value
		:type str: str
		:param newass: New assignment value
		:type str: str
		:param newloc: New location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Item designation values applied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCompleteName(newnam, newass, newloc)

	def GetOpenNetsegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's net segment identifiers open at one or both ends.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of net segment identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No open net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOpenNetsegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetEmbeddedSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the identifiers of embedded sheet regions on the sheet item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of embedded sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No embedded sheet items are present or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetEmbeddedSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsEmbedded(self) -> int:
		"""
		Indicates if the sheet item is embedded.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet item is embedded |
		| 0 | Sheet item is not embedded or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsEmbedded()

	def GetParentSheetId(self) -> int:
		"""
		Gets the sheet's parent sheet identifier.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Parent sheet identifier |
		| 0 | No parent sheet or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetParentSheetId()

	def ExportImageArea(self, format:str, version:int, file:str, xl:float, yl:float, xr:float, yr:float, width:int, height:int, clrdepth:int, gray:int, dpiX:int, dpiY:int, compressionmode:int) -> int:
		"""
		Exports an area of the sheet item as an image.

		:param format: Image's format
		:type str: str
		:param version: Not used
		:type int: int
		:param file: Path and file name of the export image
		:type str: str
		:param xl: Position of the left border
		:type float: float
		:param yl: Position of the lower border
		:type float: float
		:param xr: Position of the right border
		:type float: float
		:param yr: Position of the upper border
		:type float: float
		:param width: Image width
		:type int: int
		:param height: Image height
		:type int: int
		:param clrdepth: Color bit depth of the image
		:type int: int
		:param gray: Specifies the color mode. If 1, the image is grayscale. If 0, the image is color
		:type int: int
		:param dpiX: Image resolution on the x-axis
		:type int: int
		:param dpiY: Image resolution on the y-axis
		:type int: int
		:param compressionmode: Compression mode depending on. format
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Image is exported |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportImageArea(format, version, file, xl, yl, xr, yr, width, height, clrdepth, gray, dpiX, dpiY, compressionmode)

	def ExportImage(self, format:str, version:int, file:str, dpi:int=0, compressionmode:int=0) -> int:
		"""
		Exports the sheet item as an image.

		:param format: The image's format
		:type str: str
		:param version: Not used
		:type int: int
		:param file: Path and file name of the export image
		:type str: str
		:param dpi: Image resolution. 6, defaults to 0
		:type int: int
		:param compressionmode: Compression mode depending on. format., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Image is exported |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportImage(format, version, file, dpi, compressionmode)

	def ExportImageSelection(self, format:str, version:int, file:str, percentage:int, width:int, height:int, clrdepth:int, gray:int, dpiX:int, dpiY:int, compressionmode:int) -> int:
		"""
		Exports the selected items on a sheet item as an image.

		:param format: Image's format
		:type str: str
		:param version: Currently not used
		:type int: int
		:param file: Path and file name of the export image
		:type str: str
		:param percentage: Specifies the. width. and. height. units. If 1, the  units are in percent. If 0, the units are in pixels
		:type int: int
		:param width: Image width
		:type int: int
		:param height: Image height
		:type int: int
		:param clrdepth: Color bit depth of the image
		:type int: int
		:param gray: Specifies the color mode. If 1, the image is grayscale. If 0, the image is color
		:type int: int
		:param dpiX: Image resolution on the x-axis
		:type int: int
		:param dpiY: Image resolution on the y-axis
		:type int: int
		:param compressionmode: Compression mode depending on. format
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Image is exported |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportImageSelection(format, version, file, percentage, width, height, clrdepth, gray, dpiX, dpiY, compressionmode)

	def SetFormat(self, sym:str, rot:str="") -> int:
		"""
		Sets the  name of the sheet item's sheet format symbol.

		:param sym: Sheet format symbol name
		:type str: str
		:param rot: Sheet rotation and mirroring value. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &lt;&gt; 0 | Format value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFormat(sym, rot)

	def GetFormat(self) -> str:
		"""
		Gets the  name of the sheet item's sheet format symbol.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Characteristic value supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFormat()

	def GetPanelConnectionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the panel sheet's connection identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connection identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No connections or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPanelConnectionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetRedlinedGraphTextIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's redlined text item identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of redlined text identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No redlined text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetRedlinedGraphTextIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetRedlinedGraphIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's redlined graphic item identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of redlined graphic identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No redlined graphic items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetRedlinedGraphIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's local connection net identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connection net identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No connection nets or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateBoard(self, brdi:int, name:str, symbol:str, position:int, before:int, refx:float, refy:float, refscale:float) -> int:
		"""
		Creates a new board sheet item.

		:param brdi: Identifier of the base sheet on which the board sheet should be inserted
		:type int: int
		:param name: Name of the sheet
		:type str: str
		:param symbol: Border symbol of the sheet
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new sheet in the project
		:type int: int
		:param before: Indicates whether to insert the sheet before or after. position. If 0, the new sheet is inserted after position or as the last sheet if position is 0. If 1, the new sheet is inserted before position or as the first sheet if position is 0
		:type int: int
		:param refx: Position on the x-axis of the lower left corner of the sheet region
		:type float: float
		:param refy: Position on the y-axis of the lower left corner of the sheet region
		:type float: float
		:param refscale: Scale factor of the sheet region
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateBoard(brdi, name, symbol, position, before, refx, refy, refscale)

	def GetInsideSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's embedded sheet region's symbol identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetInsideSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetInsideGraphIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's shared sheet regions' graphic item identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of graphic identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No graphic items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetInsideGraphIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetInsidePanelConnectionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's shared sheet regions' panel connection identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connection identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No connection or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetInsidePanelConnectionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ShareWithID(self, id:int) -> int:
		"""
		Shares the sheet region item with another sheet.

		:param id: Identifier of the sheet item to share with
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the base sheet item the sheet region has been shared with |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ShareWithID(id)

	def IsShared(self) -> int:
		"""
		Indicates if the sheet item is a panel share.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet item is shared |
		| 0 | Sheet item is not shared or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsShared()

	def GetBaseId(self) -> int:
		"""
		Gets the shared panel parent sheet of the current panel share sheet item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Shared panel parent sheet identifier |
		| 0 | No shared panel parent sheet or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBaseId()

	def GetSharedIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of sheet identifiers shared with the sheet item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No sheets are shared or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSharedIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetVisibleArea(self) -> tuple[int, tuple[float,...], tuple[float,...], tuple[float,...], tuple[float,...]]:
		"""
		Gets the sheet item's visible area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xmin | tuple[float,...] | Lower left position on the x-axis passed out of the function |
		| 2 | ymin | tuple[float,...] | Lower left position on the y-axis passed out of the function |
		| 3 | xmax | tuple[float,...] | Upper right position on the x-axis passed out of the function |
		| 4 | ymax | tuple[float,...] | Upper right position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Area values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, xmin, ymin, xmax, ymax = self._obj.GetVisibleArea(dummy, dummy, dummy, dummy)
		xmin = xmin[1:] if type(xmin) == tuple and len(xmin) > 0 else tuple()
		ymin = ymin[1:] if type(ymin) == tuple and len(ymin) > 0 else tuple()
		xmax = xmax[1:] if type(xmax) == tuple and len(xmax) > 0 else tuple()
		ymax = ymax[1:] if type(ymax) == tuple and len(ymax) > 0 else tuple()
		return ret, xmin, ymin, xmax, ymax

	def SetVisibleArea(self, xmin:float, ymin:float, xmax:float, ymax:float) -> int:
		"""
		Sets the sheet item's visible area.

		:param xmin: Lower left position on the x-axis
		:type float: float
		:param ymin: Lower left position on the y-axis
		:type float: float
		:param xmax: Upper right position on the x-axis
		:type float: float
		:param ymax: Upper right position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Area values applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetVisibleArea(xmin, ymin, xmax, ymax)

	def IsReadOnly(self) -> bool:
		"""
		Indicates the sheet item's read-only status.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet item is read-only |
		| 0 | Sheet item is read-writable or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsReadOnly()

	def GetSchematicTypes(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's schematic type values.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | types | tuple[int,...] | Array of schematic type values passed out of the function. See Schematic for possible values |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in types |
		| 0 | All schematic types are assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, types = self._obj.GetSchematicTypes(dummy)
		types = types[1:] if type(types) == tuple and len(types) > 0 else tuple()
		return ret, types

	def GetAssignedOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of options assigned to the sheet item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of assigned options passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned option identifiers are supplied or an error occurred |
		| -1 | An option contains a Boolean expression or an alias |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAssignedOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ToGrid(self, xpos:float, ypos:float) -> tuple[int, float, float]:
		"""
		Adjusts  position values to snap to the sheet item's grid.

		:param xpos: Sheet position value on the x-axis. A tentative value is passed into the function. The snapped grid value is passed out of the function
		:type float: float
		:param ypos: Sheet position value on the y-axis. A tentative value is passed into the function. The snapped grid value is passed out of the function
		:type float: float

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xpos | float | Sheet position value on the x-axis. A tentative value is passed into the function. The snapped grid value is passed out of the function |
		| 2 | ypos | float | Sheet position value on the y-axis. A tentative value is passed into the function. The snapped grid value is passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Grid position values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ToGrid(xpos, ypos)

	def MoveTo(self, position:int, before:int=0) -> int:
		"""
		Moves the sheet item to a position in the project tree.

		:param position: Identifier of the item to use as the insertion position of the new sheet in the project tree
		:type int: int
		:param before: Indicates whether to insert the sheet before or after. position. If 1, the sheet is inserted before position. If 0, the sheet is inserted after position., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet item moved |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.MoveTo(position, before)

	def GetContentModified(self) -> bool:
		"""
		Indicates whether the sheet item's content has been modified.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet content has been modified |
		| 0 | Sheet content not modified or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetContentModified()

	def SetContentModified(self, value:int) -> bool:
		"""
		Sets the sheet item's modification values.

		:param value: Indicates whether the modification values should be reset or updated. If 0, the modification values are reset to indicate the sheet has not been modified. If <> 0, the modification values are updated
		:type int: int

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Modification value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetContentModified(value)

	def GetDimensionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the sheet item's dimension items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of dimension identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No dimension items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetDimensionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetPanelRegion(self, xoff:float, yoff:float, scale:float) -> int:
		"""
		Sets the panel sheet item's panel region offset and scale values.

		:param xoff: Panel region offset on the x-axis
		:type float: float
		:param yoff: Panel region offset on the y-axis
		:type float: float
		:param scale: Panel region scale ratio
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Ambiguous status |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPanelRegion(xoff, yoff, scale)

	def GetPanelRegion(self) -> tuple[int, float, float, float]:
		"""
		Gets the panel sheet item's panel region offset and scale values.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xoff | float | Panel region offset on the x-axis passed out of the function |
		| 2 | yoff | float | Panel region offset on the y-axis passed out of the function |
		| 3 | scale | float | Panel region scale ratio passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Ambiguous status |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetPanelRegion(dummy, dummy, dummy)

	def ImportDGN(self, filename:str, scale:float, x:float, y:float, rot:int, font:str, flags:int) -> int:
		"""
		Imports a DGN format file's contents on a new sheet in the project.

		:param filename: Import file's path and name
		:type str: str
		:param scale: Scale of the contents
		:type float: float
		:param x: Placement of the file contents on the x-axis of the sheet
		:type float: float
		:param y: Placement of the file contents on the y-axis of the sheet
		:type float: float
		:param rot: Not used
		:type int: int
		:param font: Font name of texts on the sheet
		:type str: str
		:param flags: Not used
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the sheet |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ImportDGN(filename, scale, x, y, rot, font, flags)

	def CreateFormboard(self, modi:int, name:str, symbol:str, position:int, before:int, flags:int) -> int:
		"""
		Creates a new formboard sheet item.

		:param modi: Value should be 0 since v2018-19.00
		:type int: int
		:param name: Name of the sheet
		:type str: str
		:param symbol: Border symbol of the sheet
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new sheet in the project
		:type int: int
		:param before: Indicates whether to insert the sheet before or after. position. If 0, the new sheet is inserted after position or as the last sheet if position is 0. If 1, the new sheet is inserted before position or as the first sheet if position is 0
		:type int: int
		:param flags: Not used
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateFormboard(modi, name, symbol, position, before, flags)

	def IsFormboard(self) -> bool:
		"""
		Indicates if the item is a formboard type sheet.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a formboard type sheet |
		| 0 | Item is not a formboard type sheet or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsFormboard()

	def GetOwner(self) -> str:
		"""
		Gets the sheet item's owner.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Owner value supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOwner()

	def IsClipboardPart(self) -> int:
		"""
		Indicates if the sheet item is on the clipboard.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet item is on the clipboard |
		| 0 | Sheet item is not on the clipboard or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsClipboardPart()

	def SetCharacteristic(self, characteristic:str) -> int:
		"""
		Sets the sheet item's characteristic value.

		:param characteristic: New characteristic value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Characteristic value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCharacteristic(characteristic)

	def GetCharacteristic(self) -> str:
		"""
		Gets the sheet item's characteristic value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Characteristic value supplied |
		| "&lt;Empty&gt;" | No characteristic value supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCharacteristic()

	def GetValidCharacteristics(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets an array of the possible characteristics for the sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | characteristics | tuple[str,...] | Array of valid characteristics passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in characteristics |
		| 0 | No valid characteristics or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, characteristics = self._obj.GetValidCharacteristics(dummy)
		characteristics = characteristics[1:] if type(characteristics) == tuple and len(characteristics) > 0 else tuple()
		return ret, characteristics

	def GetHyperlinkTextIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet item's texts with hyperlinks.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No text items with hyperlinks or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetHyperlinkTextIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGroupIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet item's group item identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of group identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No group items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetGroupIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsTerminalPlan(self) -> int:
		"""
		Indicates if the sheet item is a terminal plan.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet item is a terminal plan |
		| 0 | Sheet item is not a terminal plan or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsTerminalPlan()

	def GetWorkingArea(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the coordinate values of the sheet item's working area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xmin | float | Lower left position on the x-axis passed out of the function |
		| 2 | ymin | float | Lower left position on the y-axis passed out of the function |
		| 3 | xmax | float | Upper right position on the x-axis passed out of the function |
		| 4 | ymax | float | Upper right position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Working area coordinates supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetWorkingArea(dummy, dummy, dummy, dummy)

	def SetSchematicTypes(self, types:list[int]) -> int:
		"""
		Sets an array of the sheet's schematic type values.

		:param types: Array of schematic type values
		passed into the function. See Schematic for possible values **Available enum type:** e3series.types.SchematicType.
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of newly assigned schematic types |
		| 0 | All schematic types are assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetSchematicTypes(types)
		return ret[0]

	def GetAssignedOptionExpressions(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options) assigned to the sheet item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressions(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def Is2DView(self) -> int:
		"""
		Indicates if  the sheet item defines a 2D view.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet item defines a 2D view |
		| 0 | Sheet item does not define a 2D view or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.Is2DView()

	def CreateFunctionalDesign(self, modi:int, name:str, symbol:str, position:int, before:int, flags:int) -> int:
		"""
		Creates a new functional design sheet item.

		:param modi: Identifier of the hierarchical block to which the sheet should be inserted
		:type int: int
		:param name: Name of the sheet
		:type str: str
		:param symbol: Border symbol of the sheet
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new sheet in the project
		:type int: int
		:param before: Indicates whether to insert the sheet before or after. position. If 0, the new sheet is inserted after position or as the last sheet if position is 0. If 1, the new sheet is inserted before position or as the first sheet if position is 0
		:type int: int
		:param flags: Not used
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.CreateFunctionalDesign(modi, name, symbol, position, before, flags)

	def IsFunctionalDesign(self) -> bool:
		"""
		Indicates if the item is a functional design type sheet.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a functional design type sheet |
		| 0 | Item is not a functional design type sheet or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.IsFunctionalDesign()

	def GetGetterOptionHandlingMode(self) -> int:
		"""
		Indicates how identifiers and values supplied from e3Sheet object functions are handled according to the active variants/options.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..2 | Option handling mode |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetGetterOptionHandlingMode()

	def SetGetterOptionHandlingMode(self, mode:int) -> int:
		"""
		Sets how identifiers and values supplied from e3Sheet object functions are handled according to the active variants/options.

		:param mode: Option handling mode
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..2 | Previously set option handling mode |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetGetterOptionHandlingMode(mode)

	def SetOptionExpressions(self, expressions:list[str]) -> int:
		"""
		Replaces the sheet item's option expressions.

		:param expressions: Array of strings of all option names, Boolean expressions or alias names of Boolean expressions
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.12
		"""
		return self._obj.SetOptionExpressions(expressions)

	def SetCompleteNameEx(self, newnam:str, newass:str, newloc:str, onlygiven:bool) -> int:
		"""
		Sets all elements of the sheet item's  item designation.

		:param newnam: New sheet name value
		:type str: str
		:param newass: New assignment value
		:type str: str
		:param newloc: New location value
		:type str: str
		:param onlygiven: Indicates whether empty values in. newnam. ,. newass. and. newloc. should be ignored. If 1, empty values are ignored. If 0, empty values are set
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Item designation values applied or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.SetCompleteNameEx(newnam, newass, newloc, onlygiven)

	def GetAssignedOptionExpressionsEx(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options)  including variant instances assigned to the sheet item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.23
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressionsEx(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def GetRegionArea(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the sheet item's region area.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xmin | float | First region position on the x-axis passed out of the function |
		| 2 | ymin | float | First region position on the y-axis passed out of the function |
		| 3 | xmax | float | Second region position on the x-axis passed out of the function |
		| 4 | ymax | float | Second region position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Region area values supplied |
		| 0 | No region area or an error occurred |

		Available since E3.series TLB-Versions: 9.30
		"""
		dummy=0
		return self._obj.GetRegionArea(dummy, dummy, dummy, dummy)

	def CreateTopology(self, modi:int, name:str, symbol:str, position:int, before:int, refscale:float) -> int:
		"""
		Creates a new topology sheet item.

		:param modi: Value should be 0 since v2018-19.00
		:type int: int
		:param name: Name of the sheet
		:type str: str
		:param symbol: Border symbol of the sheet
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new sheet in the project
		:type int: int
		:param before: Indicates whether to insert the sheet before or after. position. If 0, the new sheet is inserted after position or as the last sheet if position is 0. If 1, the new sheet is inserted before position or as the first sheet if position is 0
		:type int: int
		:param refscale: Scale factor of the sheet region
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.CreateTopology(modi, name, symbol, position, before, refscale)

	def IsTopology(self) -> bool:
		"""
		Indicates if  the item is a topology type sheet.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a topology type sheet |
		| 0 | Item is not a topology type sheet or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsTopology()

	def LockObject(self) -> int:
		"""
		Locks the sheet item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet item has been locked |
		| -1 | Error occurred |
		| -2 | Sheet item is already locked |
		| -3 | Error occurred |
		| -1009 | No project open or no sheet item set |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.LockObject()

	def UnlockObject(self, password:str) -> int:
		"""
		Unlocks the sheet item.

		:param password: Password needed to unlock the sheet
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet item has been unlocked |
		| -1 | Error occurred |
		| -2 | Sheet item is already unlocked |
		| -3 | Error occurred |
		| -1009 | No project open or no sheet item set |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.UnlockObject(password)

	def IsLocked(self) -> int:
		"""
		Indicates the sheet item's lock status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet item is locked |
		| 0 | Sheet item is not locked or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsLocked()

	def IsPanel(self) -> int:
		"""
		Indicates if the item is a panel type sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a panel type sheet |
		| 0 | Item is not a panel type sheet or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsPanel()

	def SetTopologyRegion(self, xoff:float, yoff:float, scale:float) -> int:
		"""
		Sets the topology sheet item's topology region offset and scale values.

		:param xoff: Topology region offset on the x-axis
		:type float: float
		:param yoff: Topology region offset on the y-axis
		:type float: float
		:param scale: Topology region scale ratio
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Ambiguous status |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetTopologyRegion(xoff, yoff, scale)

	def GetTopologyRegion(self) -> tuple[int, float, float, float]:
		"""
		Gets the topology sheet item's offset and scale values.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xoff | float | Topology region offset on the x-axis passed out of the function |
		| 2 | yoff | float | Topology region offset on the y-axis passed out of the function |
		| 3 | scale | float | Topology region scale ratio passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Ambiguous status |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		return self._obj.GetTopologyRegion(dummy, dummy, dummy)

	def CreateFormboardEx(self, modi:int, name:str, symbol:str, position:int, before:int, refx:float, refy:float, refscale:float) -> int:
		"""
		Creates a new formboard sheet item.

		:param modi: Value should be 0 since v2018-19.00
		:type int: int
		:param name: Name of the sheet
		:type str: str
		:param symbol: Border symbol of the sheet
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new sheet in the project
		:type int: int
		:param before: Indicates whether to insert the sheet before or after. position. If 0, the new sheet is inserted after position or as the last sheet if position is 0. If 1, the new sheet is inserted before position or as the first sheet if position is 0
		:type int: int
		:param refx: Position on the x-axis of the lower left corner of the sheet region
		:type float: float
		:param refy: Position on the y-axis of the lower left corner of the sheet region
		:type float: float
		:param refscale: Scale factor of the sheet region
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.CreateFormboardEx(modi, name, symbol, position, before, refx, refy, refscale)

	def SetSheetRegion(self, xoff:float, yoff:float, scale:float) -> int:
		"""
		Sets the sheet item's region offset and scale values.

		:param xoff: Sheet region offset on the x-axis
		:type float: float
		:param yoff: Sheet region offset on the y-axis
		:type float: float
		:param scale: Sheet region scale ratio
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet region supplied |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.SetSheetRegion(xoff, yoff, scale)

	def GetSheetRegion(self) -> tuple[int, float, float, float]:
		"""
		Gets the sheet item's region offset and scale values.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xoff | float | Sheet region offset on the x-axis passed out of the function |
		| 2 | yoff | float | Sheet region offset on the y-axis passed out of the function |
		| 3 | scale | float | Sheet region scale ratio passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet region supplied |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		dummy=0
		return self._obj.GetSheetRegion(dummy, dummy, dummy)

	def GetInsideNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's shared sheet regions' net segment identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of net segment identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		dummy=0
		ret, ids = self._obj.GetInsideNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsParentSheet(self, flags:int) -> int:
		"""
		Indicates if the item is a parent sheet containing embedded/region sheets of a specific type.

		:param flags: Indicates type of parent sheet
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet item is a parent sheet of the specified sheet types |
		| 0 | Item is not a formboard type sheet or an error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.IsParentSheet(flags)

	def PlacePartEx(self, name:str, version:str, flags:int, x:float, y:float, rot:float) -> int:
		"""
		Places a subcircuit on the sheet item.

		:param name: Subcircuit name from the database or a path to an e3p file
		:type str: str
		:param version: Subcircuit version number from the database
		:type str: str
		:param flags: Placement option flags
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Not used
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 9 | Incompatible subcircuit file verison |
		| 8..4 | Error occurred |
		| 3 | Invalid name or version |
		| 1..2 | Error occurred |
		| 0 | Subcircuit placed on sheet |
		| -1 | Subcircuit consists of several sheets and the project setting Ignore sheet border is set (located in Settings → Placement → Import → Sheets) |
		| -2 | Subcircuit contains sheets and the project setting Ignore sheet border is not set (located in Settings → Placement → Import → Sheets) |
		| -3 | Subcircuit is already placed or other objects are placed at x , y |
		| -4 | Sheet is locked, Available since v2018-19.00 |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.PlacePartEx(name, version, flags, x, y, rot)

	def CheckoutReadonlyReferencedSheets(self) -> int:
		"""
		Checks out all sheets referenced using the cross-reference of the sheet item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheets are checked out |
		| -1 | No multi-user project |
		| -2 | No sheet item set |
		| -3 | Sheet is not being accessed |
		| -4 | Multi-user project could not be updated |
		| -5 | Transaction could not be started |
		| -12 | No sheets available for check out |
		| -13 | Sheets could not be checked out |

		Available since E3.series TLB-Versions: 11.80
		"""
		return self._obj.CheckoutReadonlyReferencedSheets()

	def GetOwners(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the sheet's owners.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | owners | tuple[int,...] | Array of owners passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in owners |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 17.16
		"""
		dummy=0
		ret, owners = self._obj.GetOwners(dummy)
		owners = owners[1:] if type(owners) == tuple and len(owners) > 0 else tuple()
		return ret, owners

	def AlignObjects(self, reference:int, ids:list[int], mode:int) -> int:
		"""
		Aligns items on the sheet item.

		:param reference: Identifier of the item to align against
		:type int: int
		:param ids: Array of identifiers of items to align
		:type list[int]: list[int]
		:param mode: Alignment mode to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Items were aligned |
		| -1 | No project open |
		| -2 | No sheet item set |
		| -3 | reference is invalid |
		| -4 | ids contains invalid items |
		| -5 | mode is invalid |
		| -6 | Sheet is locked, Available since v2018-19.00 |
		| -7 | Item to align or panel position is locked, Available since v2023-24.30 |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.AlignObjects(reference, ids, mode)

	def DisplayEx(self, flags:int=0) -> int:
		"""
		Opens the current sheet item in a new window.

		:param flags: Display options flags., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet displayed |
		| -1 | Error occurred |
		| -2 | flags is a combination of mutually exclusive values, Available from v2025-25.00 |
		| -3 | Current sheet is not a panel sheet and flags values requires a panel, Available from v2025-25.00 |
		| -4 | Current sheet is not visible due to inactive options, Available from v2025-25.00 |
		| -5 | Current panel sheet is a 3D world, Available from v2025-25.22 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.DisplayEx(flags)

	def IsLockedByAccessControl(self) -> int:
		"""
		Indicates the sheet item's E³PluginAccessControl lock status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 3 | Object is locked and also indirectly by the sheet |
		| 2 | Object is locked indirectly by the sheet |
		| 1 | Object is locked |
		| 0 | Object is unlocked or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.IsLockedByAccessControl()

	def CreateTopologyEx(self, modi:int, name:str, symbol:str, position:int, before:int, refx:float, refy:float, refscale:float, flags:int=0) -> int:
		"""
		Creates a new topology sheet item.

		:param modi: Identifier of the hierarchical block or module to which the sheet should be inserted
		:type int: int
		:param name: Name of the sheet
		:type str: str
		:param symbol: Border symbol of the sheet
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new sheet in the project
		:type int: int
		:param before: Indicates whether to insert the sheet before or after. position. If 0, the new sheet is inserted after position or as the last sheet if position is 0. If 1, the new sheet is inserted before position or as the first sheet if position is 0
		:type int: int
		:param refx: Position on the x-axis of the lower left corner of the sheet region
		:type float: float
		:param refy: Position on the y-axis of the lower left corner of the sheet region
		:type float: float
		:param refscale: Scale factor of the sheet region
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.CreateTopologyEx(modi, name, symbol, position, before, refx, refy, refscale, flags)

	def GetProduct(self) -> str:
		"""
		Gets the sheet item's product name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Product name supplied |
		| "&lt;Empty&gt;" | No product name or an error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.34
		"""
		return self._obj.GetProduct()

	def SetProduct(self, newproduct:str) -> int:
		"""
		Sets the sheet item's product name.

		:param newproduct: New sheet product name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New sheet product name applied |
		| 0 | Error occurred |
		| -1 | No project open, no sheet item is set or no value set |
		| -3 | Sheet locked |
		| -4 | Sheet is a region |
		| -8 | IEC 61346 setting is inactive |
		| -9 | Sheet is a terminal sheet |

		Available since E3.series TLB-Versions: 20.00, 19.34
		"""
		return self._obj.SetProduct(newproduct)

	def GetDXFSize(self, filename:str, font:str) -> tuple[int, float, float, float]:
		"""
		Gets the size and scale for the sheet item based on the file contents and font.

		:param filename: Path and name of the DXF or DWG file. Since v2022-23.53 and v2023-24.22, the path and name of a DGN file is also accepted
		:type str: str
		:param font: Name of font to apply
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | dx | float | Required width passed out of the function |
		| 2 | dy | float | Required height passed out of the function |
		| 3 | scale | float | Maximum possible scale for the sheet and. font. passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Size and maximum scale supplied |
		| 0 | Size and scale could not be determined |
		| -1 | No project open or no sheet item set |
		| -2 | filename is invalid |
		| -3 | font is invalid |
		| -4 | Error reading DXF file, Available since v2022-23.61 and v2023-24.31 |

		Available since E3.series TLB-Versions: 20.00, 19.01
		"""
		dummy=0
		return self._obj.GetDXFSize(filename, font, dummy, dummy, dummy)

	def SelectIds(self, symbolIds:list[int]) -> tuple[int, list[int]]:
		"""
		Selects symbols on the sheet.

		:param symbolIds: Array of symbol items to select
		:type list[int]: list[int]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | selectedIds | list[int] | Array of actually selected symbol items |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbols on the sheet are selected |
		| -1 | No project open |
		| -2 | symbolIds is empty |
		| -3 | Previous selection could not be cleared |
		| -4 | No symbol in symbolIds could be selected or no sheet item set |
		| -5 | Not all symbols in symbolIds could be selected |

		Available since E3.series TLB-Versions: 21.00
		"""
		dummy=0
		ret, selectedIds = self._obj.SelectIds(symbolIds, dummy)
		selectedIds = [] if selectedIds is None else selectedIds
		selectedIds = selectedIds[1:] if type(selectedIds) == list and len(selectedIds) > 0 else []
		return ret, selectedIds

	def IsReadOnlyInProject(self) -> bool:
		"""
		Gets the sheet's project read-only status.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet's project read-only status is on |
		| 0 | Sheet's project read-only status is off or an error occurred |

		Available since E3.series TLB-Versions: 21.00, 20.70, 20.03, 19.31
		"""
		return self._obj.IsReadOnlyInProject()

	def SetReadOnlyInProject(self, readonlyproject:bool) -> int:
		"""
		Sets the sheet's project read-only status.

		:param readonlyproject: Project's read-only status. 1 turns the project read-only status to on. 0 turns the project read-only status to off
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet's project read-only status is changed |
		| -1 | No project open or sheet item set |
		| -2 | Sheet is locked |

		Available since E3.series TLB-Versions: 21.00, 20.70, 20.03, 19.31
		"""
		return self._obj.SetReadOnlyInProject(readonlyproject)

	def GetEmbeddedObjectIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the embedded objects on the sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of embedded objects identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No embedded objects are present or an error occurred |

		Available since E3.series TLB-Versions: 21.00
		"""
		dummy=0
		ret, ids = self._obj.GetEmbeddedObjectIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Get2DViewSheetDisplayOnlyBorder(self) -> int:
		"""
		Gets the 2D view's display only border flag value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display only border value is on |
		| 0 | Display only border value is off |
		| -1 | No project is open |
		| -2 | No sheet item is set |
		| -3 | Sheet is not a 2D view |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.Get2DViewSheetDisplayOnlyBorder()

	def Set2DViewSheetDisplayOnlyBorder(self, display_border:bool) -> int:
		"""
		Sets the 2D view's display only border flag value.

		:param display_border: Value to assign to display only border
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | display_border is successfully assigned |
		| -1 | No project open |
		| -2 | No sheet item is set |
		| -3 | Sheet is not a 2D view |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.Set2DViewSheetDisplayOnlyBorder(display_border)

	def GetSlotIdsFrom2DView(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the 2D view sheet item's slot identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of slot identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No slots or an error occurred |

		Available since E3.series TLB-Versions: 21.12
		"""
		dummy=0
		ret, ids = self._obj.GetSlotIdsFrom2DView(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the sheet item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the sheet item |
		| "&lt;Empty&gt;" | No sheet item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a sheet as the current item.

		:param gid: Global identifier value of a sheet item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current sheet item |
		| "&lt;Empty&gt;" | No sheet item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current sheet item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current sheet item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a sheet as the current item.

		:param guid: Globally unique identifier value of a sheet item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current sheet item |
		| "&lt;Empty&gt;" | No sheet item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

	def GetDisplayModelViewAtPosition(self, flags:int=0) -> tuple[int, float]:
		"""
		Gets the display model view at position values for a 2D view sheet item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | view_distance | float | Position value |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display model view at position is active |
		| 0 | Display model view at position is inactive |
		| -1 | No project open |
		| -2 | No sheet item set |
		| -3 | flags is invalid |
		| -4 | Sheet is not a 2D view |

		Available since E3.series TLB-Versions: 24.00
		"""
		dummy=0
		return self._obj.GetDisplayModelViewAtPosition(dummy, flags)

	def SetDisplayModelViewAtPosition(self, display_model_view_at_position:bool, view_distance:float, flags:int=0) -> int:
		"""
		Sets the display model view at position values for a 2D view sheet item.

		:param display_model_view_at_position: Display model view at position value active status. If 0, the display model view is set to inactive. If not 0, display model view is set to active
		:type bool: bool
		:param view_distance: Position value
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display model view at position values are applied |
		| -1 | No project open |
		| -2 | No sheet item set |
		| -3 | flags is invalid |
		| -4 | Sheet is not a 2D view |
		| -5 | Sheet does not contain any slots |
		| -6 | view_distance is invalid |

		Available since E3.series TLB-Versions: 24.00
		"""
		return self._obj.SetDisplayModelViewAtPosition(display_model_view_at_position, view_distance, flags)

	def Get2DViewDisplayInOriginalOrientation(self) -> int:
		"""
		Gets the 2D view's display in original orientation flag value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display in original orientation value is on |
		| 0 | Display in original orientation value is off |
		| -1 | No project is open |
		| -2 | No sheet item is set |
		| -3 | Sheet is not a 2D view |

		Available since E3.series TLB-Versions: 24.00
		"""
		return self._obj.Get2DViewDisplayInOriginalOrientation()

	def Get2DViewSheetDisplaySlots(self) -> int:
		"""
		Indicates whether slots are displayed on the 2D view sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Slots are displayed |
		| 0 | Slots are not displayed |
		| -1 | No project is open |
		| -2 | No sheet item is set |
		| -3 | Sheet is not a 2D view |

		Available since E3.series TLB-Versions: 25.00
		"""
		return self._obj.Get2DViewSheetDisplaySlots()

	def Set2DViewSheetDisplaySlots(self, display_slots:bool) -> int:
		"""
		Sets whether slots are displayed on the 2D view sheet.

		:param display_slots: Value to assign to display only border
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | display_slots is successfully assigned |
		| -1 | No project open |
		| -2 | No sheet item is set |
		| -3 | Sheet is not a 2D view |

		Available since E3.series TLB-Versions: 25.00
		"""
		return self._obj.Set2DViewSheetDisplaySlots(display_slots)

# -------------------- ISignalInterface--------------------
class Signal:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Signal. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current signal item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current signal item identifier |
		| 0 | No signal item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a signal item as the current item.

		:param id: Unique value identifying a signal item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current signal item identifier |
		| 0 | No signal item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the signal item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Signal name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the signal item's name.

		:param name: New name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signal name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the signal item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the signal item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the signal item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the signal item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the signal item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the signal item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the signal item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def SetAttributeVisibility(self, name:str, onoff:int) -> int:
		"""
		Sets the visibility status of all text items representing the signal item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param onoff: Indicates whether the text items' visibility status should be shown or hidden. If > 0, the text items are shown. If 0, the text items are hidden
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items changed |
		| 0 | No text items found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeVisibility(name, onoff)

	def Search(self, name:str) -> int:
		"""
		Searches for a signal item.

		:param name: Name of the signal item to search for
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the found signal item |
		| 0 | No signal found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Search(name)

	def GetNetSegmentCount(self) -> int:
		"""
		Gets the number of net segments carrying the signal item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segments |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetNetSegmentCount()

	def GetNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the net segments carrying the signal item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of net segments passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segments in ids |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetPinCount(self) -> int:
		"""
		Gets the number of pins carrying the signal item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pins |
		| 0 | No pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinCount()

	def GetPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the pins carrying the signal item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No pin identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Highlight(self) -> int:
		"""
		Highlights the signal item occurrences on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of signal occurrences |
		| 0 | Signal is not placed on a sheet or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Highlight()

	def FindPanelPath(self) -> int:
		"""
		Automatically routes the connections carrying the signal.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signal was automatically routed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.FindPanelPath()

	def DisplayAttributeValueAt(self, name:str, sheetid:int, x:float, y:float) -> int:
		"""
		Displays an attribute value from the signal item at a specific position.

		:param name: Internal name of the attribute
		:type str: str
		:param sheetid: Sheet identifier to display the attribute value on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text item identifier displaying the attribute value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DisplayAttributeValueAt(name, sheetid, x, y)

	def GetDefaultWires(self) -> tuple[int, tuple[str,...], tuple[str,...]]:
		"""
		Gets the default wire types of the signal item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | wiregroups | tuple[str,...] | Array of wire group name values passed out of the function |
		| 2 | wirenames | tuple[str,...] | Array of wire name values passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in wiregroups and wirenames |
		| 0 | No default wires or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, wiregroups, wirenames = self._obj.GetDefaultWires(dummy, dummy)
		wiregroups = wiregroups[1:] if type(wiregroups) == tuple and len(wiregroups) > 0 else tuple()
		wirenames = wirenames[1:] if type(wirenames) == tuple and len(wirenames) > 0 else tuple()
		return ret, wiregroups, wirenames

	def SetDefaultWires(self, wiregroups:list[str], wirenames:list[str]) -> int:
		"""
		Sets the default wire types of the signal item.

		:param wiregroups: Array of wire group name values passed into the function
		:type list[str]: list[str]
		:param wirenames: Array of wire name values passed into the function
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of wire types applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetDefaultWires(wiregroups, wirenames)
		return ret[0]

	def GetCoreCount(self) -> int:
		"""
		Gets the number of conductors and wires carrying the signal item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors and wires |
		| 0 | No conductors and wires or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCoreCount()

	def GetCoreIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors and wires carrying the signal item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors and wires passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors and wires in ids |
		| 0 | No conductors and wires or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCoreIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSignalClassId(self) -> int:
		"""
		Gets the identifier of the signal item's signal class.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the signal class item |
		| 0 | Signal not assigned to a signal class or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetSignalClassId()

	def Create(self, name:str) -> int:
		"""
		Creates a signal item.

		:param name: New signal name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the signal item |
		| 0 | Error occurred |
		| -1 | name is invalid |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.Create(name)

	def GetTranslatedName(self) -> str:
		"""
		Gets the signal item's translated name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Translated name |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetTranslatedName()

	def HighlightCoreLogicLinesOfSignal(self) -> int:
		"""
		Highlights the conductor logic lines of a signal.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Always returned |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.HighlightCoreLogicLinesOfSignal()

	def SetNameFormat(self, name:str) -> int:
		"""
		Sets the signal item's formatted name.

		:param name: New formatted name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Formatted name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.SetNameFormat(name)

	def GetNameFormat(self) -> str:
		"""
		Gets the signal item's formatted name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Formatted name |
		| "&lt;Empty&gt;" | No formatted name or an error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.GetNameFormat()

	def SetRecalcFormattedName(self, recalculate:int) -> int:
		"""
		Sets the status indicating whether the formatted signal name is automatically recalculated.

		:param recalculate: Indicates whether the formatted signal name is automatically recalculated. If 1, the formatted signal name is automatically recalculated. If 0, the formatted signal name is not automatically recalculated
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New automatic recalculation status applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.SetRecalcFormattedName(recalculate)

	def GetRecalcFormattedName(self) -> int:
		"""
		Gets the status indicating whether the formatted signal name is automatically recalculated.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Formatted signal name is automatically recalculated |
		| 0 | Formatted signal name is not automatically recalculated |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.GetRecalcFormattedName()

	def AddDefaultWireEx(self, wiregroup:str, wirename:str) -> int:
		"""
		Adds a wire type to the signal item's list of default wire types.

		:param wiregroup: Wire group name value
		:type str: str
		:param wirename: Wire name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Default wire type added |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.AddDefaultWireEx(wiregroup, wirename)

	def DeleteDefaultWireEx(self, wiregroup:str, wirename:str) -> int:
		"""
		Removes a wire type from the signal item's list of default wire types.

		:param wiregroup: Wire group name value
		:type str: str
		:param wirename: Wire name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Default wire type removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.DeleteDefaultWireEx(wiregroup, wirename)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the signal item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the signal item |
		| "&lt;Empty&gt;" | No signal item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a signal item as the current item.

		:param gid: Global identifier value of a signal item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current signal item |
		| "&lt;Empty&gt;" | No signal item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current signal item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current signal item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a signal item as the current item.

		:param guid: Globally unique identifier value of a signal item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current signal item |
		| "&lt;Empty&gt;" | No signal item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- ICavityPartInterface--------------------
class CavityPart:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize CavityPart. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetCavityPartType(self) -> int:
		"""
		Gets a value representing the cavity part item's type.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..3 | Cavity part type |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.GetCavityPartType()

	def GetId(self) -> int:
		"""
		Gets the identifier of the current cavity part item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current cavity part identifier |
		| 0 | No cavity part item or an error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a cavity part as the current item.

		:param id: Unique value identifying a cavity part item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current cavity part item identifier |
		| 0 | No current cavity part item or an error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.SetId(id)

	def GetValue(self) -> str:
		"""
		Gets the cavity part item's value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Value&gt;" | Cavity part value |
		| "&lt;Empty&gt;" | No cavity part value or an error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.GetValue()

	def SetValue(self, value:str) -> int:
		"""
		Sets the cavity part item's value.

		:param value: New cavity part value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | New cavity part value assigned |
		| -1 | No project open or no cavity part item set |
		| -2 | Automatic selection is enabled |
		| -3 | Cavity part item's owner is locked |
		| -4 | Cavity part item cannot be changed |
		| -5 | Model pin outer diameter or cross-section data of the cavity part does not match the conductor data |
		| -6 | Pin is prevented from making physical changes to conductors, Available since v2022-23.00 |
		| -7 | value is too long, Available since v2023-24.50 and v2025-25.20 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.SetValue(value)

	def GetOwner(self) -> int:
		"""
		Gets the identifier of the pin the cavity part item belongs to.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Pin identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.GetOwner()

	def GetCabwirInfos(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the current cavity part item's cable wire items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | cabWirs | tuple[int,...] | Array of identifiers of cable wire items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of cable wire items in cabWirs |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		dummy=0
		ret, cabWirs = self._obj.GetCabwirInfos(dummy)
		cabWirs = cabWirs[1:] if type(cabWirs) == tuple and len(cabWirs) > 0 else tuple()
		return ret, cabWirs

	def SetDisableAutomaticSelection(self, DisableAutomaticSelection:bool) -> int:
		"""
		Sets the cavity part item's automatic selection status.

		:param DisableAutomaticSelection: Automatic selection status value. If 1, automatic selection is set to inactive. If 0, automatic selection is set to active
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Automatic selection status value is applied |
		| -1 | No project open or no cavity part item set |
		| -2 | Project settings do not allow changes |
		| -3 | Cavity part item's owner is locked |
		| -4 | Cavity part item cannot be changed |
		| -5 | Pin is prevented from making physical changes to conductors, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.SetDisableAutomaticSelection(DisableAutomaticSelection)

	def GetDisableAutomaticSelection(self) -> int:
		"""
		Gets the cavity part item's automatic selection status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Automatic selection is inactive |
		| 0 | Automatic selection is active |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.GetDisableAutomaticSelection()

	def Create(self, pinid:int, name:str, _type:int) -> int:
		"""
		Creates a cavity part item.

		:param pinid: Identifier of the new cavity part's pin
		:type int: int
		:param name: Value of the new cavity part
		:type str: str
		:param _type: Type of the new cavity part
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new cavity part item |
		| 0 | Error occurred |
		| -1 | No project open |
		| -2 | Invalid pinid value |
		| -3 | Invalid type value |
		| -4 | Pin is locked |
		| -5 | Pin already has a cavity part with the type value |
		| -6 | Pin is prevented from making physical changes to conductors, Available since v2022-23.00 |
		| -7 | pinid represents a busbar pin, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.Create(pinid, name, _type)

	def GetAttributeValue(self, name:str) -> str:
		"""
		Function not implemented yet.

		:param name: Not used
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Empty&gt;" | Always returned |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.GetAttributeValue(name)

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Function not implemented yet.

		:param name: Not used
		:type str: str
		:param value: Not used
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Always returned |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Function not implemented yet.

		:param name: Not used
		:type str: str
		:param value: Not used
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Always returned |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Function not implemented yet.

		:param name: Not used
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Always returned |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.DeleteAttribute(name)

	def IsActive(self) -> int:
		"""
		Indicates the cavity part item's active status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Cavity part is active |
		| 0 | Cavity part is inactive |
		| -1 | No project open or no cavity part item set |
		| -2 | Cavity part item cannot be changed |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.IsActive()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current cavity part item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current cavity part item |
		| "&lt;Empty&gt;" | No cavity part item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a cavity part as the current item.

		:param gid: Global identifier value of a cavity part item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current cavity part item |
		| "&lt;Empty&gt;" | No current cavity part item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- ISymbolInterface--------------------
class Symbol:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Symbol. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current symbol item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current symbol item identifier |
		| 0 | No symbol item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a symbol item as the current item.

		:param id: Unique value identifying a symbol item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current symbol item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def SetName(self, name:str) -> int:
		"""
		Sets the symbol item's name.

		:param name: Symbol name value to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol name |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def GetName(self) -> str:
		"""
		Gets the symbol item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Symbol name |
		| "&lt;Empty&gt;" | Symbol has no name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def GetVersion(self) -> str:
		"""
		Gets the symbol item's version as it appears in the database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Symbol item's version |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetVersion()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the symbol item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the symbol item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the symbol item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the symbol item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the symbol item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the symbol item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def GetPinCount(self) -> int:
		"""
		Gets the number of the symbol item's connection nodes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connection nodes |
		| 0 | No connection nodes found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinCount()

	def GetPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbol item's connection nodes.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No pin identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTextCount(self) -> int:
		"""
		Gets the number of text items belonging to the symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items |
		| 0 | No text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTextCount()

	def GetTextIds(self, txttyp:int=0, search_string:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbol's text items.

		:param txttyp: Text type filter. Only text identifiers with this Text Type will be supplied. All text identifiers are supplied if txttyp is 0. The default value 0, defaults to 0
		:type int: int
		:param search_string: Text value filter, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No text items are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTextIds(dummy, txttyp, search_string)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsShield(self) -> int:
		"""
		Indicates if the symbol item is a shield symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a shield symbol |
		| 0 | Item is not a shield symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsShield()

	def IsDynamic(self) -> int:
		"""
		Indicates if the symbol item is a dynamic symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a dynamic symbol |
		| 0 | Item is not a dynamic symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsDynamic()

	def GetSchemaLocation(self) -> tuple[int, float, float, str, str, str]:
		"""
		Gets the symbol item's position within the project.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis passed out of the function |
		| 2 | y | float | Placement position on the y-axis passed out of the function |
		| 3 | grid | str | Location in the format ". /&lt;sheet&gt;.&lt;grid&gt;. " passed out of the function |
		| 4 | column_value | str | Sheet placement column of the symbol item passed out of the function |
		| 5 | row_value | str | Sheet placement row of the symbol item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the symbol item's sheet |
		| 0 | Unplaced symbol or a gate or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetSchemaLocation(dummy, dummy, dummy, dummy, dummy)

	def Load(self, name:str, version:str) -> int:
		"""
		Loads a symbol from the database.

		:param name: Name of the database symbol
		:type str: str
		:param version: Version number of the database symbol
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the symbol item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Load(name, version)

	def GetArea(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the symbol item's defined space requirement from the database.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xmin | float | First position on the x-axis passed out of the function |
		| 2 | ymin | float | First position on the y-axis passed out of the function |
		| 3 | xmax | float | Second position on the x-axis passed out of the function |
		| 4 | ymax | float | Second position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Placement area values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetArea(dummy, dummy, dummy, dummy)

	def Place(self, shti:int, x:float, y:float, rot:str="", scale:float=0, maintaintextsize:bool=False) -> int:
		"""
		Creates and places a symbol item or moves the current symbol item's position within the project.

		:param shti: Identifier of the sheet
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Rotation and mirroring value. See Rotation for possible values.. Default is no rotation or mirroring, defaults to ""
		:type str: str
		:param scale: Scale factor value. Default is no scaling, defaults to 0
		:type float: float
		:param maintaintextsize: Indicates whether symbol text items should also be scaled to the. scale. value. If 1, the text items are not scaled. If 0, the text items are scaled., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the placed symbol item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Place(shti, x, y, rot, scale, maintaintextsize)

	def GetMasterCount(self) -> int:
		"""
		Gets the number of the symbol's master symbol items.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of master symbol identifiers |
		| 0 | No master symbol identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMasterCount()

	def GetMasterIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbol item's master symbols.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of master symbols passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No master symbols are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetMasterIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSlaveCount(self) -> int:
		"""
		Gets the number of the symbol's slave symbol items.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of slave symbol identifiers |
		| 0 | No slave symbol identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSlaveCount()

	def GetSlaveIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbol item's slave symbols.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of slave symbols passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No slave symbols are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSlaveIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Jump(self) -> int:
		"""
		Jumps to the symbol item's schema location and highlights the symbol item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Jump()

	def SetDeviceName(self, name:str) -> int:
		"""
		Sets the symbol item's device designation value.

		:param name: New device designation value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device designation value assigned |
		| 0 | Device designation value assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeviceName(name)

	def SetDeviceAssignment(self, name:str) -> int:
		"""
		Sets the symbol item's higher level assignment value.

		:param name: New higher level assignment value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Higher level assignment value assigned |
		| 0 | Higher level assignment value assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeviceAssignment(name)

	def SetDeviceLocation(self, name:str) -> int:
		"""
		Sets the symbol item's location value.

		:param name: New location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Location value assigned |
		| 0 | Location value assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeviceLocation(name)

	def Delete(self) -> int:
		"""
		Removes the symbol item from the sheet if it is placed or deletes the symbol item from the project if it is an unplaced internal gate of a dynamic device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the symbol item: An error occurred |
		| 0 | Symbol item was removed or deleted |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def GetCode(self) -> int:
		"""
		Gets a value representing the internal symbol type code of the symbol item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Internal symbol type value of the symbol item |
		| 0 | Undefined symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCode()

	def GetSymbolCount(self) -> int:
		"""
		Gets the number of symbols placed on the block symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol items |
		| 0 | No symbol items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolCount()

	def GetSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbols placed on the block symbol.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbols passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No symbols are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetRotation(self) -> str:
		"""
		Gets the symbol item's rotation and mirroring value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Rotation and mirroring value, See Rotation String for possible values |
		| "0.000000" | Symbol item is not rotated and not mirrored or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetRotation()

	def GetScaling(self) -> float:
		"""
		Gets the symbol item's scaling factor value.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &lt; 0.0 | Scaling factor value |
		| 1.0 | Scaling factor value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetScaling()

	def GetLevel(self) -> int:
		"""
		Gets the symbol item's display level value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..256 | Display level value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLevel()

	def IsConnectorMaster(self) -> int:
		"""
		Indicates if the connector symbol item is a connector master symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connector symbol is a connector master symbol |
		| 0 | Connector symbol is not a connector master symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsConnectorMaster()

	def GetTypeName(self) -> str:
		"""
		Gets the name of the symbol item's type.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Name of the symbol type |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTypeName()

	def IsConnected(self) -> int:
		"""
		Indicates if the symbol item  has connect lines running from it.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol item  has connect lines running from it |
		| 0 | Symbol item has no connect lines running from it or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsConnected()

	def SetDeviceCompleteName(self, name:str, ass:str, loc:str, onlygiven:bool=True) -> int:
		"""
		Sets all elements of the symbol item's  item designation value.

		:param name: New device designation value
		:type str: str
		:param ass: New higher level assignment value
		:type str: str
		:param loc: New location value
		:type str: str
		:param onlygiven: Indicates whether empty values in. name. ,. ass. and. loc. should be ignored. If 1, empty values are ignored. If 0, empty values are set., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item designation values assigned |
		| 0 | Item designation values assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeviceCompleteName(name, ass, loc, onlygiven)

	def SetType(self, name:str, version:str) -> int:
		"""
		Replaces the symbol item in the project for a symbol of the specified type name and version from the database.

		:param name: Symbol type name from database
		:type str: str
		:param version: Symbol type version from database
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the replacement symbol item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetType(name, version)

	def GetType(self) -> str:
		"""
		Gets the name of the symbol item's type as it appears in the database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Symbol type name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetType()

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the symbol item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def PlacePins(self, pinarray:list[int], symname:str, vers:str, shti:int, x:float, y:float, rot:str, scale:float=0) -> int:
		"""
		Creates and places a pin symbol.

		:param pinarray: Array of pin identifiers passed into the function
		:type list[int]: list[int]
		:param symname: Name of the connector symbol in the database
		:type str: str
		:param vers: Version number of the connector symbol in the database
		:type str: str
		:param shti: Identifier of the sheet
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Rotation and mirroring value. See Rotation for possible values
		:type str: str
		:param scale: Scale factor value. Default is no scaling, defaults to 0
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the placed pin symbol |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.PlacePins(pinarray, symname, vers, shti, x, y, rot, scale)
		return ret[0]

	def PlaceDynamic(self, shti:int, x:float, y:float, height:float, width:float, texttemplate:str="", fitsymbol:int=0) -> int:
		"""
		Creates and places a dynamic symbol.

		:param shti: Identifier of the sheet
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param height: Height of the symbol
		:type float: float
		:param width: Width of the symbol
		:type float: float
		:param texttemplate: Text template symbol to use. If set to "<Empty>", the project defined default text template is used. Default value is "<Empty>", defaults to ""
		:type str: str
		:param fitsymbol: Indicates whether any symbol placed on the dynamic symbol should be scaled to fit the dynamic symbol. If 1, symbols placed on the dynamic symbol shall be scaled to fit the dynamic symbol. If 0, symbols placed on the dynamic symbol shall not be scaled to fit the dynamic symbol, defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the placed dynamic symbol |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PlaceDynamic(shti, x, y, height, width, texttemplate, fitsymbol)

	def HasPassWirePins(self) -> int:
		"""
		Indicates if the symbol contains pins with the pass wire value active.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol item does contain pins with the pass wire value active |
		| 0 | Symbol item does not contain pins with the pass wire value active or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasPassWirePins()

	def SetLevel(self, level:int) -> int:
		"""
		Sets the symbol item's display level value.

		:param level: Display level value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..256 | Previous level value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLevel(level)

	def SetAsMaster(self, on:int) -> int:
		"""
		Sets the symbol item as a master symbol.

		:param on: Value to set the master status to. If 1, the symbol is set as the master symbol. If 0, the symbol is unset as the master symbol
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previously the symbol was set as the master symbol |
		| 0 | Previously the symbol was not set as the master symbol |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAsMaster(on)

	def IsMaster(self) -> int:
		"""
		Indicates if the symbol item is a master symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a master symbol |
		| 0 | Item is not a master symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsMaster()

	def PlaceBlock(self, shti:int, x:float, y:float, width:float, height:float, parent:int=0) -> int:
		"""
		Creates and places a block symbol item or moves and resizes the current block symbol.

		:param shti: Identifier of the sheet
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param width: Width of the block
		:type float: float
		:param height: Height of the block
		:type float: float
		:param parent: Identifier of the parent block symbol., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the block symbol |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PlaceBlock(shti, x, y, width, height, parent)

	def IsTwisted(self) -> int:
		"""
		Indicates if the symbol item is a twisted pair symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a twisted pair symbol |
		| 0 | Item is not a twisted pair symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsTwisted()

	def IsBundle(self) -> int:
		"""
		Indicates if the symbol item is a bundle.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a bundle symbol |
		| 0 | Item is not a bundle symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsBundle()

	def GetTransformationMatrix(self) -> tuple[int, tuple[tuple[float,...],...]]:
		"""


		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | array | tuple[tuple[float,...],...] |  |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetTransformationMatrix(dummy)

	def GetSheetReferenceInfo(self) -> tuple[int, int, int, str, str]:
		"""
		Gets the signal cross reference symbol item's details.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | inout | int | Reference direction value |
		| 2 | _type | int | Reference type value |
		| 3 | refnam | str | Reference name value |
		| 4 | signam | str | Signal name value |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signal cross reference values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetSheetReferenceInfo(dummy, dummy, dummy, dummy)

	def AddToSheetReference(self, symi:int) -> int:
		"""
		Adds the symbol item's sheet reference to a reference symbol.

		:param symi: Identifier of the reference symbol
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the reference symbol |
		| 0 | The reference could not be added due to logical reasons |
		| &lt; 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddToSheetReference(symi)

	def GetSymbolTypeName(self) -> str:
		"""
		Gets the name of the symbol item's type as it appears in the database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Symbol type name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolTypeName()

	def GetSchematicTypes(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the symbol item's schematic type values.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | types | tuple[int,...] | Array of schematic type values passed out of the function. See Schematic for possible values |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in types |
		| 0 | All schematic types are assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, types = self._obj.GetSchematicTypes(dummy)
		types = types[1:] if type(types) == tuple and len(types) > 0 else tuple()
		return ret, types

	def GetAssignedOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the symbol item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned options are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAssignedOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def PlaceInteractively(self) -> int:
		"""
		Allows the interactive placement or movement of a symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the placed symbol |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PlaceInteractively()

	def AssignTo(self, assignto:int, nonodeassignment:int=0) -> int:
		"""
		Assigns the symbol item to a device, gate or pin item.

		:param assignto: Identifier of the device, gate or pin to assign the symbol item to
		:type int: int
		:param nonodeassignment: Indicates whether free pins of. assignto. may be assigned to the symbol item's pins. If 0, pins may be assigned. If 1, pins may not be assigned., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | value of AssignTo |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AssignTo(assignto, nonodeassignment)

	def PlaceAsGraphic(self, shti:int, x:float, y:float, rot:str, scale:float, maintaintextsize:bool, srcid:int) -> int:
		"""
		Creates and places a graphic item.

		:param shti: Identifier of the sheet
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Rotation and mirroring value. See Rotation for possible values.
		:type str: str
		:param scale: Scale factor value
		:type float: float
		:param maintaintextsize: Indicates whether symbol text items should also be scaled to the. scale. value. If 1, the text items are not scaled. If 0, the text items are scaled
		:type bool: bool
		:param srcid: Identifier of the symbol to copy
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the placed symbol item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PlaceAsGraphic(shti, x, y, rot, scale, maintaintextsize, srcid)

	def GetGateId(self) -> int:
		"""
		Gets the gate identifier of the symbol item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current symbol item identifier |
		| 0 | Symbol item has no gate or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGateId()

	def SetGateId(self, symid:int) -> int:
		"""
		Sets a gate as the current symbol item.

		:param symid: Unique value identifying a gate item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current gate item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGateId(symid)

	def SetCharacteristic(self, characteristic:str) -> int:
		"""
		Sets the symbol item's characteristic value.

		:param characteristic: New characteristic value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Characteristic value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCharacteristic(characteristic)

	def GetCharacteristic(self) -> str:
		"""
		Gets the symbol item's characteristic value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Characteristic value supplied |
		| "&lt;Empty&gt;" | No characteristic value supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCharacteristic()

	def GetValidCharacteristics(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets an array of the possible characteristics for the symbol.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | characteristics | tuple[str,...] | Array of valid characteristics passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in characteristics |
		| 0 | No valid characteristics or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, characteristics = self._obj.GetValidCharacteristics(dummy)
		characteristics = characteristics[1:] if type(characteristics) == tuple and len(characteristics) > 0 else tuple()
		return ret, characteristics

	def IsBlock(self) -> int:
		"""
		Indicates if the symbol item is a block.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a block symbol |
		| 0 | Item is not a block symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsBlock()

	def SetBlockOutlineColour(self, value:int) -> int:
		"""
		Sets the symbol item's block outline color.

		:param value: Block outline color value. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Previous block outline color value, See Colors for possible values |
		| -1 | Previous block outline color was automatic or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockOutlineColour(value)

	def GetBlockOutlineColour(self) -> int:
		"""
		Gets the symbol item's block outline color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Block outline color value, See Colors for possible values |
		| -1 | Automatic color or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockOutlineColour()

	def SetBlockOutlineStyle(self, value:int) -> int:
		"""
		Sets the symbol item's block outline line style.

		:param value: Outline block line style value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Previous block outline line style value, See Line Styles for possible values |
		| 0 or &gt;47 | Previous block outline line style value |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockOutlineStyle(value)

	def GetBlockOutlineStyle(self) -> int:
		"""
		Gets the symbol item's block outline style.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Block outline style value, See Line Styles for possible values |
		| 0 or &gt;47 | Single line |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockOutlineStyle()

	def SetBlockOutlineWidth(self, value:float) -> float:
		"""
		Sets the symbol item's block outline line width.

		:param value: Outline line width value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Previous block outline line width value |
		| -1.0 | No block outline line width value assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockOutlineWidth(value)

	def GetBlockOutlineWidth(self) -> float:
		"""
		Gets the symbol item's block outline width.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Block outline width value |
		| -1.0 | No block outline width assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockOutlineWidth()

	def SetBlockHatchPattern(self, value:int, angle1:float, angle2:float) -> int:
		"""
		Sets the symbol item's block hatch pattern.

		:param value: Block hatch pattern to apply
		:type int: int
		:param angle1: Angle value in degrees of a hatch line to apply. Value is only used if value is a line or cross hatch pattern value. The value range is from 90.0 (pointing upwards) to 0.0 (pointing rightwards) to -90.0 (pointing downwards)
		:type float: float
		:param angle2: Angle value in degrees of a hatch line to apply. Value is only used if value is a cross hatch pattern value. The value range is from 90.0 (pointing upwards) to 0.0 (pointing rightwards) to -90.0 (pointing downwards)
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No previous hatch pattern value set or error occurred |
		| 1, 2 or 4 | Previous hatch pattern value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockHatchPattern(value, angle1, angle2)

	def GetBlockHatchPattern(self) -> tuple[int, float, float]:
		"""
		Gets the symbol item's block hatch pattern.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | angle1 | float | Angle value in degrees of a hatch line if a line or cross hatch pattern is in use passed out of the function. The value will be 0.0 if neither a line or cross hatch pattern is in use |
		| 2 | angle2 | float | Angle value in degrees of a hatch line if a cross hatch pattern is in use passed out of the function. The value will be 0.0 if a cross hatch pattern is not in use |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No block hatch pattern or an error occurred |
		| 1 | Solid hatch |
		| 2 | Line hatch |
		| 4 | Cross hatch |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetBlockHatchPattern(dummy, dummy)

	def SetBlockHatchColour(self, value:int) -> int:
		"""
		Sets the symbol item's block hatch color.

		:param value: Block hatch color value. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Previous block hatch color value, See Colors for possible values |
		| -1 | Previous block hatch color was automatic or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockHatchColour(value)

	def GetBlockHatchColour(self) -> int:
		"""
		Gets the symbol item's block hatch color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Block hatch color value, See Colors for possible values |
		| -1 | Automatic color or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockHatchColour()

	def SetBlockHatchStyle(self, value:int) -> int:
		"""
		Sets the symbol item's block hatch line style.

		:param value: Hatch line style value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Previous hatch line style value, See Line Styles for possible values |
		| 0 or &gt;47 | Previous hatch line style value |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockHatchStyle(value)

	def GetBlockHatchStyle(self) -> int:
		"""
		Gets the symbol item's block hatch line style.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Block hatch line style value, See Line Styles for possible values |
		| 0 or &gt;47 | 0 or &gt;47 |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockHatchStyle()

	def SetBlockHatchWidth(self, value:float) -> float:
		"""
		Sets the symbol item's block hatch line width.

		:param value: Hatch line width value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Previous block hatch line width value |
		| -1.0 | No block hatch line width value assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockHatchWidth(value)

	def GetBlockHatchWidth(self) -> float:
		"""
		Gets the symbol item's block hatch line width.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Block hatch line width value |
		| -1.0 | No block hatch line width assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockHatchWidth()

	def SetBlockHatchDistance(self, value:float) -> float:
		"""
		Sets the symbol item's block hatch pattern distance.

		:param value: Block hatch pattern distance value
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Previous block hatch pattern distance value |
		| -1.0 | Previously no block hatch pattern distance value assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockHatchDistance(value)

	def GetBlockHatchDistance(self) -> float:
		"""
		Gets the symbol item's block hatch pattern distance.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Block hatch pattern distance value |
		| -1.0 | No block hatch pattern distance assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockHatchDistance()

	def GetGroupId(self) -> int:
		"""
		Gets the identifier of the group containing the symbol item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the containing group |
		| 0 | No containing group or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGroupId()

	def Ungroup(self) -> int:
		"""
		Removes the symbol item from its group.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Symbol item is removed from its group |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Ungroup()

	def IsFormboard(self) -> bool:
		"""
		Indicates if the symbol item is a formboard symbol.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a formboard symbol |
		| 0 | Item is not a formboard symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsFormboard()

	def PlaceTable(self, fromid:int, x:float, y:float, rot:str="", scale:float=0, maintaintextsize:bool=False) -> int:
		"""
		Creates and places a table symbol on a formboard sheet.

		:param fromid: Identifier of the placed connector symbol
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Rotation and mirroring value. See Rotation for possible values., defaults to ""
		:type str: str
		:param scale: Scale factor value. Default is no scaling, defaults to 0
		:type float: float
		:param maintaintextsize: Indicates whether symbol text items should also be scaled to the. scale. value. If 1, the text items are not scaled. If 0, the text items are scaled., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the placed table symbol |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PlaceTable(fromid, x, y, rot, scale, maintaintextsize)

	def IsPinView(self) -> int:
		"""
		Indicates if the symbol item is a pin view symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a pin view symbol |
		| 0 | Item is not a pin view symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsPinView()

	def PlacePinView(self, pinid:int, shti:int, symname:str, version:str, x:float, y:float, rot:str, scale:float=0, maintaintextsize:bool=False) -> int:
		"""
		Creates and places a pin view symbol.

		:param pinid: Identifier of the connector pin or block connector pin to create a view for
		:type int: int
		:param shti: Identifier of the sheet to place the symbol on
		:type int: int
		:param symname: Name of the symbol in the database
		:type str: str
		:param version: Version number of the symbol in the database
		:type str: str
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Rotation and mirroring value. See Rotation for possible values.
		:type str: str
		:param scale: Scale factor value. Default is no scaling, defaults to 0
		:type float: float
		:param maintaintextsize: Indicates whether symbol text items should also be scaled to the. scale. value. If 1, the text items are not scaled. If 0, the text items are scaled., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the pin view symbol |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PlacePinView(pinid, shti, symname, version, x, y, rot, scale, maintaintextsize)

	def GetDynamicParentId(self) -> int:
		"""
		Gets the identifier of the symbol item's dynamic parent symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the dynamic parent symbol |
		| 0 | No dynamic parent symbol found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDynamicParentId()

	def GetDynamicChildrenIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the subsidiary symbols contained in the dynamic symbol item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No child symbols are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetDynamicChildrenIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsDynamicFixed(self) -> int:
		"""
		Indicates if the symbol item is a fixed dynamic symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a fixed dynamic symbol |
		| 0 | Item is not a fixed dynamic symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsDynamicFixed()

	def SetScaling(self, scale:float) -> float:
		"""
		Sets the symbol item's scaling factor value.

		:param scale: Scaling value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &lt; 0.0 | Previous scaling factor value |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetScaling(scale)

	def SetDBTextSize(self, txtsiz:bool) -> int:
		"""
		Sets a value indicating if the text size factor defined in the database is used for the symbol's text items when scaling.

		:param txtsiz: New text size factor usage value. If 1, the text size factor defined in the database is used for the symbol's text items when scaling. If 0, the text size factor defined in the database is not used for the symbol's text items when scaling
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previously the text size factor defined in the database was used for the symbol's text items when scaling |
		| 0 | Previously the text size factor defined in the database was not used for the symbol's text items when scaling or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDBTextSize(txtsiz)

	def GetDBTextSize(self) -> bool:
		"""
		Gets a value indicating if the text size factor defined in the database is used for the symbol's text items when scaling.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text size factor defined in the database is used for the symbol's text items when scaling |
		| 0 | Text size factor defined in the database is not used for the symbol's text items when scaling or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDBTextSize()

	def GetBoundIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of graphic items that have been graphically grouped to the symbol item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of graphic items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No graphic item identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetBoundIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetHyperlinkTextIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the symbol item's texts with hyperlinks.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No text items with hyperlinks or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetHyperlinkTextIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetDisplayLength(self) -> float:
		"""
		Gets the symbol item's display length.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Symbol display length value |
		| 0.0 | No display length value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayLength()

	def GetDisplayWidth(self) -> float:
		"""
		Gets the symbol item's display width.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Symbol display width value |
		| 0.0 | No display width value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayWidth()

	def SetDisplayLength(self, length:float) -> int:
		"""
		Sets the symbol item's display length.

		:param length: Display length value
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display length value is assigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayLength(length)

	def SetDisplayWidth(self, width:float) -> int:
		"""
		Sets the symbol item's display width.

		:param width: Display width value
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display width value is assigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayWidth(width)

	def GetPlacedArea(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the symbol item's placement area on the sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xmin | float | First position on the x-axis passed out of the function |
		| 2 | ymin | float | First position on the y-axis passed out of the function |
		| 3 | xmax | float | Second position on the x-axis passed out of the function |
		| 4 | ymax | float | Second position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Placement area values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetPlacedArea(dummy, dummy, dummy, dummy)

	def GetAssignedOptionExpressions(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options) assigned to the symbol item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressions(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def HasNoGraphic(self) -> int:
		"""
		Indicates if the symbol contains at least one graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Symbol contains graphic items |
		| 1 | Symbols missing graphical content or an error occurred |
		| 2 | Symbol graphical content was automatically generated |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.HasNoGraphic()

	def GetDevicePinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the device pins contained in the symbol item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No pin identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetDevicePinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSharedPinGroupState(self) -> int:
		"""
		Indicates if the symbol item is a shared pin group.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol item is a shared pin group |
		| 0 | Symbol is not a shared pin group or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetSharedPinGroupState()

	def SetSharedPinGroupState(self, newval:int) -> int:
		"""
		Converts the symbol item between a normal symbol and a shared pin group.

		:param newval: Shared pin group value to apply. If 1, the symbol item is converted from a normal symbol to a shared pin group symbol. If 0, the symbol item is converted from a shared pin group symbol to a normal symbol
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol item is converted to a shared pin group symbol |
		| 0 | Symbol item is converted to a normal symbol or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetSharedPinGroupState(newval)

	def SetOptionExpressions(self, expressions:list[str]) -> int:
		"""
		Replaces the symbol item's option expressions.

		:param expressions: Array of strings of all option names, Boolean expressions or alias names of Boolean expressions
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.12
		"""
		return self._obj.SetOptionExpressions(expressions)

	def IsProtection(self) -> int:
		"""
		Indicates if the symbol item is a cable protection symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a cable protection symbol |
		| 0 | Item is not a cable protection symbol or an error occurred |

		Available since E3.series TLB-Versions: 9.22
		"""
		return self._obj.IsProtection()

	def GetAssignedOptionExpressionsEx(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options)  including variant instances assigned to the symbol item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.23
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressionsEx(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def AssignFunctionalPorts(self, ids:list[int]) -> int:
		"""
		Assigns functional ports defined in an installation space to a dynamic functional unit and assigns the functional unit to the symbol item.

		:param ids: Array of dynamic functional port identifiers from an installation space passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new functional unit |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		ret = self._obj.AssignFunctionalPorts(ids)
		return ret[0]

	def GetTargetObjectId(self) -> int:
		"""
		Gets the identifier of the target item of the attribute text template symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the target item |
		| 0 | No target item found or an error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.GetTargetObjectId()

	def GetReferenceTextExtent(self) -> tuple[int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the placement positions of the symbol item's dynamic signal cross reference texts.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xarr | tuple[float,...] | Array of placement positions on the x-axis passed out of the function |
		| 2 | yarr | tuple[float,...] | Array of placement positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Dynamic signal cross reference text placement position values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.40
		"""
		dummy=0
		ret, xarr, yarr = self._obj.GetReferenceTextExtent(dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, xarr, yarr

	def GetReferenceTextExtentSingleLine(self) -> tuple[int, int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the placement positions of the symbol item's dynamic signal cross reference texts.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | nlines | int | Number of dynamic signal cross reference text lines passed out of the function |
		| 2 | xarr | tuple[float,...] | Array of placement positions for each reference text on the x-axis passed out of the function |
		| 3 | yarr | tuple[float,...] | Array of placement positions for each reference text on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Dynamic signal cross reference text placement position values supplied |
		| 0 | Symbol item has no dynamic signal cross references or an error occurred |

		Available since E3.series TLB-Versions: 10.40
		"""
		dummy=0
		return self._obj.GetReferenceTextExtentSingleLine(dummy, dummy, dummy)

	def GetReferenceText(self) -> str:
		"""
		Gets the symbol item's dynamic signal cross references.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Dynamic signal cross references |
		| "&lt;Empty&gt;" | No dynamic cross references or an error occurred |

		Available since E3.series TLB-Versions: 10.41
		"""
		return self._obj.GetReferenceText()

	def GetReferenceTextSingleLine(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the symbol item's dynamic signal cross references.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | textarr | tuple[str,...] | Array of dynamic signal cross reference values passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of dynamic signal cross references values in textarr |
		| 0 | No dynamic cross references or an error occurred |

		Available since E3.series TLB-Versions: 10.41
		"""
		dummy=0
		ret, textarr = self._obj.GetReferenceTextSingleLine(dummy)
		textarr = textarr[1:] if type(textarr) == tuple and len(textarr) > 0 else tuple()
		return ret, textarr

	def GetSymbolExtend(self) -> tuple[int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the placement area of the symbol item's graphics on the sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xarr | tuple[float,...] | Array of positions on the x-axis passed out of the function |
		| 2 | yarr | tuple[float,...] | Array of positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Area values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.46
		"""
		dummy=0
		ret, xarr, yarr = self._obj.GetSymbolExtend(dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, xarr, yarr

	def GetSchemaLocationShared(self, shtid:int) -> tuple[int, float, float, str, str, str]:
		"""
		Gets the symbol's shared position within the project.

		:param shtid: Identifier of the sheet region
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis passed out of the function |
		| 2 | y | float | Placement position on the y-axis passed out of the function |
		| 3 | grid | str | Location in the format ". /&lt;sheet&gt;.&lt;grid&gt;. " passed out of the function |
		| 4 | column_value | str | Sheet placement column of the symbol item passed out of the function |
		| 5 | row_value | str | Sheet placement row of the symbol item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the model symbol's shared sheet |
		| 0 | No project open or no model symbol item set |
		| -1 | shtid is not a valid sheet identifier |
		| -2 | shtid is not a valid sheet region |
		| -3 | shtid is not a shared sheet |
		| -4 | Symbol is not placed on shtid |

		Available since E3.series TLB-Versions: 11.20
		"""
		dummy=0
		return self._obj.GetSchemaLocationShared(shtid, dummy, dummy, dummy, dummy, dummy)

	def GetPlacedPolygon(self) -> tuple[int, int, tuple[int,...], tuple[int,...]]:
		"""
		Gets the symbol item's placement area on the sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | npnts | int | Number of points making the polygon area passed out of the function |
		| 2 | xarr | tuple[int,...] | Array of positions on the x-axis passed out of the function |
		| 3 | yarr | tuple[int,...] | Array of positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Placement area values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		dummy=0
		ret, npnts, xarr, yarr = self._obj.GetPlacedPolygon(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, npnts, xarr, yarr

	def RemoveFromSheetReference(self) -> int:
		"""
		Removes a reference symbol item's sheet reference.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet reference removed |
		| 0 | Logical error occurred |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 17.33
		"""
		return self._obj.RemoveFromSheetReference()

	def GetSymbolTypeId(self) -> int:
		"""
		Gets the identifier of the symbol item's type in the database.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;1 | Identifier of the symbol type in the database |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 18.23
		"""
		return self._obj.GetSymbolTypeId()

	def GetTableOneRowForEachCore(self) -> int:
		"""
		Indicates if the table symbol item's display one row for each core value is active.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display one row for each core value is active |
		| 0 | Display one row for each core value is inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetTableOneRowForEachCore()

	def SetTableOneRowForEachCore(self, newval:bool) -> int:
		"""
		Sets the table symbol item's display one row for each core value.

		:param newval: Display one row for each core value to apply. If 1, display one row for each core is activated. If 0, display one row for each core is deactivated
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Display one row for each core value was applied |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetTableOneRowForEachCore(newval)

	def GetTablePinsWithoutCores(self) -> int:
		"""
		Indicates if the table symbol item's display pins without cores value is active.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display pins without cores value is active |
		| 0 | Display pins without cores value is inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetTablePinsWithoutCores()

	def SetTablePinsWithoutCores(self, newval:bool) -> int:
		"""
		Sets the table symbol item's display pins without cores status value.

		:param newval: Display pins without cores status value to apply. If 1, display pins without cores is activated. If 0, display pins without cores is deactivated
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Display pins without cores status value was applied |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetTablePinsWithoutCores(newval)

	def GetTableBreakTableAfter(self) -> int:
		"""
		Indicates if the table symbol item's break table after value is active.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Break table after value is active |
		| 0 | Break table after value is inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetTableBreakTableAfter()

	def SetTableBreakTableAfter(self, newval:bool) -> int:
		"""
		Sets the table symbol item's break table after value.

		:param newval: Break table after value to apply. If 1, break table after value is activated. If 0, break table after value is deactivated
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | newval value is applied |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetTableBreakTableAfter(newval)

	def GetTableBreakTableAfterNumberOfRows(self) -> int:
		"""
		Indicates the number of rows displayed on the table symbol item before a table break occurs.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=2 | Number of table rows before a table break |
		| 0 | Table symbol item's break table after value is inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetTableBreakTableAfterNumberOfRows()

	def SetTableBreakTableAfterNumberOfRows(self, newval:int) -> int:
		"""
		Sets the number of rows displayed on the table symbol item before a table break occurs.

		:param newval: Number of rows value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | New number of rows value was applied |
		| -1 | No symbol item set or the item is not a table symbol |
		| -2 | newval value lies outside the permitted range of 2 to 1000 |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetTableBreakTableAfterNumberOfRows(newval)

	def GetSubType(self) -> int:
		"""
		Gets a value representing the subtype of the symbol item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Subtype value of the symbol item |
		| -1 | No project is open |
		| -2 | No symbol item set |
		| -3 | Symbol is not a standard type |
		| -4 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetSubType()

	def SendToForeground(self) -> int:
		"""
		Moves the placed symbol item to the sheet foreground.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Symbol placed in the foreground |
		| -1 | No project open |
		| -2 | No symbol item set |
		| -3 | Symbol is not placed |
		| -4 | Error occurred |
		| -5 | Error occurred |
		| -6 | Symbol is locked, Available since v2023-24.22 |

		Available since E3.series TLB-Versions: 20.00, 19.01, 18.33, 17.43
		"""
		return self._obj.SendToForeground()

	def SendToBackground(self) -> int:
		"""
		Moves the placed symbol item to the sheet background.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Symbol placed in the background |
		| -1 | No project open |
		| -2 | No symbol item set |
		| -3 | Symbol is not placed |
		| -4 | Error occurred |
		| -5 | Error occurred |
		| -6 | Symbol is locked, Available since v2023-24.22 |

		Available since E3.series TLB-Versions: 20.00, 19.01, 18.33, 17.43
		"""
		return self._obj.SendToBackground()

	def GetSymbolType(self) -> int:
		"""
		Gets a value representing the type of the symbol item.

		:return:
		Type: int **Available enum type:** e3series.types.SymbolType.

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Type value of the symbol item |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.01
		"""
		return self._obj.GetSymbolType()

	def AssignToConnector(self, AssignToPinIds:list[int], AssignToPinIds_connected:list[int], flags:list[int]) -> int:
		"""
		Assigns connector and block connector symbols to the component.

		:param AssignToPinIds: Array of connector pins to assign to the symbol. Already assigned pins become unassigned so only the transferred pins are assigned to the symbol
		:type list[int]: list[int]
		:param AssignToPinIds_connected: Array of connector pins to assign to the already connected symbol. The mode set by e3Job.SetGetterOptionHandlingMode() is used to determine the connected symbol in the case of multiple connectors due to variants and options assignments. Assigned pins are connected according to the conditions applied when the connection is done interactively by connecting the symbols. The operation is aborted if this is not possible
		:type list[int]: list[int]
		:param flags: Currently not used
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | One of the following results occurred:, The pins are assigned to the connectorNo pins were assigned because no pins were listed in AssignToPinIds or AssignToPinIds_connected |
		| -1 | No project open |
		| -2 | No symbol item set |
		| -3 | The pins could not be assigned to the symbols |
		| -4 | The existing connector is not unique due to variant and option assignments |
		| -5 | The pins assigned to the connector symbols could not be connected |
		| -6 | Internal error |

		Available since E3.series TLB-Versions: 21.00, 20.01, 19.31
		"""
		return self._obj.AssignToConnector(AssignToPinIds, AssignToPinIds_connected, flags)

	def SetSelected(self, newval:bool) -> int:
		"""
		Selects or deselects the symbol.

		:param newval: Indicates selection status of the symbol. If 1, the symbol will be selected. If 0, the symbol will be deselected
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol is selected or deselected |
		| -1 | No project open |
		| -2 | No symbol item set |
		| -3 | Symbol cannot be selected |
		| -4 | Selection exists on another sheet |
		| -5 | Symbol not displayed due to options/variants |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.SetSelected(newval)

	def ModifyBlockSize(self, border:int, delta:float, flags:int=0) -> int:
		"""
		Resizes a placed block symbol.

		:param border: Block border edge on which the block should be modified
		:type int: int
		:param delta: Value the block size should be resized
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Block symbol is resized |
		| -1 | No project open or no symbol item set |
		| -2 | Symbol item is not a block |
		| -3 | Sheet or block symbol is locked |
		| -4 | border value is invalid |
		| -5 | Symbol is rotated at an oblique angle |
		| -6 | Symbol could not be resized due to a collision |

		Available since E3.series TLB-Versions: 21.12
		"""
		return self._obj.ModifyBlockSize(border, delta, flags)

	def SetStateId(self, id:int) -> int:
		"""
		Sets the symbols item's state.

		:param id: Identifier of the state to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol's state applied |
		| -1 | No project open or no symbol item set |
		| -2 | Invalid symbol type |
		| -3 | id is invalid |
		| -4 | Symbol is placed on a locked sheet |
		| -5 | Symbol is a view |
		| -6 | Symbol is not placed on a schematic sheet |
		| -7 | Placed symbol is in an inactive variant or option |

		Available since E3.series TLB-Versions: 22.10
		"""
		return self._obj.SetStateId(id)

	def GetStateId(self) -> int:
		"""
		Gets the symbol item's state identifier.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the symbol's state |
		| 0 | Symbol has no state or an error occurred |

		Available since E3.series TLB-Versions: 22.10
		"""
		return self._obj.GetStateId()

	def GetStateIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbols item's defined states.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of symbol state identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No state identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 22.10
		"""
		dummy=0
		ret, ids = self._obj.GetStateIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current symbol item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current symbol item |
		| "&lt;Empty&gt;" | No symbol item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a symbol item as the current item.

		:param gid: Global identifier value of a symbol item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current symbol item |
		| "&lt;Empty&gt;" | No symbol item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- ITextInterface--------------------
class Text:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Text. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current text item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current text item identifier |
		| 0 | No text item |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a text as the current item.

		:param id: Unique value identifying a text item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current text item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetId(id)

	def GetType(self) -> int:
		"""
		Gets the text item's text type.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text type supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetType()

	def GetText(self) -> str:
		"""
		Gets the text item's text value including text token translations.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Text value is supplied |
		| "&lt;Empty&gt;" | Text item does not have a value or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetText()

	def SetText(self, newtext:str) -> int:
		"""
		Sets the text item's text value.

		:param newtext: Text value to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text value is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetText(newtext)

	def GetSchemaLocation(self) -> tuple[int, float, float, str, str, str]:
		"""
		Gets the text item's position within the project.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis passed out of the function |
		| 2 | y | float | Placement position on the y-axis passed out of the function |
		| 3 | grid | str | Location in the format ". /&lt;sheet&gt;.&lt;grid&gt;. " passed out of the function |
		| 4 | column_value | str | Sheet placement column of the text passed out of the function |
		| 5 | row_value | str | Sheet placement row of the text passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the text item's sheet |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetSchemaLocation(dummy, dummy, dummy, dummy, dummy)

	def GetLeftJustifiedSchemaLocation(self) -> tuple[int, float, float, str]:
		"""
		Gets the text item's box’s lower right corner position in text reading direction.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Position on the x-axis passed out of the function |
		| 2 | y | float | Position on the y-axis passed out of the function |
		| 3 | grid | str | Location in the format ". /&lt;sheet&gt;.&lt;grid&gt;. " passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Sheet identifier of the text item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetLeftJustifiedSchemaLocation(dummy, dummy, dummy)

	def GetHeight(self) -> float:
		"""
		Gets the text item's font height.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Size of the text's font height |
		| 0.0 | Font height could not be supplied |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetHeight()

	def SetHeight(self, newval:float) -> int:
		"""
		Sets the text item's font height.

		:param newval: Value of font height to apply
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Font height applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetHeight(newval)

	def GetLevel(self) -> int:
		"""
		Gets the text item's display level value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Display level value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLevel()

	def SetLevel(self, newval:int) -> int:
		"""
		Sets the text item's display level value.

		:param newval: Display level value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display level value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLevel(newval)

	def GetMode(self) -> int:
		"""
		Gets the text item's text ratio.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Text ratio value supplied |
		| 0 | Text ratio value could not be supplied |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetMode()

	def SetMode(self, newval:int) -> int:
		"""
		Sets the text item's text ratio.

		:param newval: Text ratio value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text ratio value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetMode(newval)

	def GetStyle(self) -> int:
		"""
		Gets the text item's font style.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..7 | Font style value supplied |
		| 0 | Regular font style value used or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetStyle()

	def SetStyle(self, newval:int) -> int:
		"""
		Sets the text item's font style.

		:param newval: Font style to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Font style value supplied |
		| 0 | No font style value used or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetStyle(newval)

	def GetColour(self) -> int:
		"""
		Gets the text item's text color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or the operation has failed |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetColour()

	def SetColour(self, newval:int) -> int:
		"""
		Sets the text item's text color.

		:param newval: Color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Color value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetColour(newval)

	def GetFontName(self) -> str:
		"""
		Gets the text item's font name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Name of the text's font |
		| "Arial" | Name of the text's font is "Arial" or the font name could not be supplied |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetFontName()

	def SetFontName(self, newname:str) -> int:
		"""
		Sets the text item's font.

		:param newname: Name of font to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Font applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetFontName(newname)

	def GetVisibility(self) -> int:
		"""
		Gets the text item's visibility status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text visibility status is shown |
		| 0 | Text visibility status is hidden or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetVisibility()

	def SetVisibility(self, newval:int) -> int:
		"""
		Sets the text item's visibility status.

		:param newval: Visibility status value. If 1, the text is shown. If 0, the text is hidden
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text visibility status value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetVisibility(newval)

	def GetRotation(self) -> float:
		"""
		Gets the text item's rotation value.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0..&lt; 360.0 | Text rotation value in degrees supplied |
		| 0.0 | Text rotation value supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetRotation()

	def GetLanguageID(self) -> int:
		"""
		Gets the text item's translation identifier value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &lt;TranslationId&gt; | The text item's translation identifier |
		| 0 | Text item has no translation identifier or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLanguageID()

	def SetLanguageID(self, newval:int) -> int:
		"""
		Sets the text item's translation identifier value.

		:param newval: Translation identifier to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No other value is returned |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLanguageID(newval)

	def GetAssignedOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of options assigned to the text item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of assigned options |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned option identifiers are supplied or an error occurred |
		| -1 | An option contains a Boolean expression or an alias |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetAssignedOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAlignment(self) -> int:
		"""
		Gets the text item's current text alignment value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Alignment value could not be supplied |
		| 1 | Left aligned |
		| 2 | Centered |
		| 3 | Right aligned |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetAlignment()

	def SetAlignment(self, newval:int) -> int:
		"""
		Sets the text item's text alignment value.

		:param newval: Alignment value to be set
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Alignment value set |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetAlignment(newval)

	def Delete(self) -> int:
		"""
		Deletes the text item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the text item |
		| 0 | Text item was deleted or no text item was set |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.Delete()

	def GetTypeId(self) -> int:
		"""
		Gets the text item's text type.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text type supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetTypeId()

	def SetSchemaLocation(self, x:float, y:float) -> int:
		"""
		Sets the text item's position.

		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the text item's sheet |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetSchemaLocation(x, y)

	def GetInternalText(self) -> str:
		"""
		Gets the text item's text value without text token translations.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Text value is supplied |
		| "&lt;Empty&gt;" | Text does not have a value or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetInternalText()

	def GetRightJustifiedSchemaLocation(self) -> tuple[int, float, float, str]:
		"""
		Gets the text item's box’s lower right corner position in text reading direction.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Position on the x-axis passed out of the function |
		| 2 | y | float | Position on the y-axis passed out of the function |
		| 3 | grid | str | Location in the format ". /&lt;sheet&gt;.&lt;grid&gt;. " passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Sheet idenifier of the text item |
		| 0 | Error has occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetRightJustifiedSchemaLocation(dummy, dummy, dummy)

	def GetWidth(self) -> float:
		"""
		Gets the text item's box width.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Width of the text supplied |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetWidth()

	def SetBallooning(self, onoff:bool, _type:int) -> int:
		"""
		Sets the text item's ballooning value.

		:param onoff: Indicating if the value should be added or removed. If 1, the value is added. If 0, the value is removed
		:type bool: bool
		:param _type: New ballooning value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Previous ballooning value, See Ballooning for possible values |
		| 0 | Previously no ballooning value set or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetBallooning(onoff, _type)

	def GetBallooning(self) -> int:
		"""
		Gets the text item's ballooning value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Ballooning value applied, See Ballooning for possible values |
		| 0 | Ballooning value could not be supplied or there is no ballooning |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetBallooning()

	def IsRedlined(self) -> int:
		"""
		Gets the text item's redlined status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Redlined status is on |
		| 0 | Redlined status is off |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.IsRedlined()

	def GetAllowedLength(self) -> int:
		"""
		Gets the maximum number of characters allowed for the text item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Maximum text length value |
		| 0 | No maximum text length supplied |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetAllowedLength()

	def SetRotation(self, rotation:float) -> float:
		"""
		Sets the text item's rotation value.

		:param rotation: Rotation value in degrees to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0..&lt; 360.0 | Previous text rotation value in degrees supplied |
		| 0.0 | Previous text rotation value or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetRotation(rotation)

	def GetSingleLine(self) -> int:
		"""
		Gets the text item's flag value determining if multi-line text is displayed on a single line.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text is displayed on a single line |
		| 0 | Text is not displayed on a single line or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetSingleLine()

	def SetSingleLine(self, newval:int) -> int:
		"""
		Sets the text item's flag value determining if multi-line text is displayed on a single line.

		:param newval: Single line value to apply. If 1, mutli-line text is displayed on a single line. If 0, mutli-line text is displayed on a multiple lines
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Single line value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetSingleLine(newval)

	def GetBox(self) -> tuple[int, float, float]:
		"""
		Gets the text item's box width and height.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xsize | float | Width of box passed out of the function |
		| 2 | ysize | float | Height of box passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | xsize and ysize values supplied |
		| 0 | Text is in its original size or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetBox(dummy, dummy)

	def SetBox(self, xsize:float, ysize:float) -> int:
		"""
		Sets the text item's box width and height.

		:param xsize: Width of box
		:type float: float
		:param ysize: Height of box
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Box values applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetBox(xsize, ysize)

	def DeleteBox(self) -> int:
		"""
		Deletes the text item's text box.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text box was deleted |
		| 0 | Delete text box operation failed |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.DeleteBox()

	def GetLocking(self) -> bool:
		"""
		Gets the text item's flag value determining if the text position is locked.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text position is locked |
		| 0 | Text position is unlocked or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetLocking()

	def SetLocking(self, newval:bool) -> bool:
		"""
		Gets the text item's flag value determining if the text position is locked.

		:param newval: Position locking value to apply. 1 will lock the text position. 0 will unlock the text position
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text position locking value is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetLocking(newval)

	def GetHyperlinkAddress(self) -> str:
		"""
		Gets the text item's hyperlink address.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Hyperlink address supplied |
		| "&lt;Empty&gt;" | An error occurred or the text does not have a hyperlink address |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetHyperlinkAddress()

	def SetHyperlinkAddress(self, newtext:str) -> int:
		"""
		Sets the text item's hyperlink address.

		:param newtext: Hyperlink address to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Hyperlink address applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetHyperlinkAddress(newtext)

	def CalculateBoxAt(self, shti:int, text:str, x:float, y:float, rotation:float, height:float, mode:int, style:int, fontname:str, just:int, balloon:int) -> tuple[int, tuple[float,...], tuple[float,...]]:
		"""
		Calculates the placement position of a new text box.

		:param shti: Currently not used
		:type int: int
		:param text: Text of the text field
		:type str: str
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rotation: Rotation of the text field
		:type float: float
		:param height: Size of the text field font
		:type float: float
		:param mode: Ratio of the text field font
		:type int: int
		:param style: Style of the text field font
		:type int: int
		:param fontname: Name of the text field font. "Arial" is set as default if value is empty
		:type str: str
		:param just: Alignment of the text field
		:type int: int
		:param balloon: Balloon style of the text field. See Ballooning for possible values
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | bx | tuple[float,...] | An array of 4 elements representing the corner positions on the x-axis passed out of the function |
		| 2 | by | tuple[float,...] | An array of 4 elements representing the corner positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Calculation was successful |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, bx, by = self._obj.CalculateBoxAt(shti, text, x, y, rotation, height, mode, style, fontname, just, balloon, dummy, dummy)
		bx = bx[1:] if type(bx) == tuple and len(bx) > 0 else tuple()
		by = by[1:] if type(by) == tuple and len(by) > 0 else tuple()
		return ret, bx, by

	def SetOptionExpressions(self, expressions:list[str]) -> int:
		"""
		Replaces the text item's option expressions.

		:param expressions: Array of strings of all option names, Boolean expressions or alias names of Boolean expressions
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.12
		"""
		return self._obj.SetOptionExpressions(expressions)

	def GetAssignedOptionExpressionsEx(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options)  including variant instances assigned to the text item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.23
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressionsEx(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def GetTextExtent(self) -> tuple[int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the dimensions of the text item's text value as a geometric shape.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xarr | tuple[float,...] | Array of dimension values on the x-axis passed out of the function |
		| 2 | yarr | tuple[float,...] | Array of dimension values on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text extent is supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.40
		"""
		dummy=0
		ret, xarr, yarr = self._obj.GetTextExtent(dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, xarr, yarr

	def GetTextExtentSingleLine(self) -> tuple[int, int, tuple[tuple[float,...],...], tuple[tuple[float,...],...]]:
		"""
		Gets the text item's dimension as a geometric shape for each line of text.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | nlines | int | Number of lines passed out of the function |
		| 2 | xarr | tuple[tuple[float,...],...] | Array of lines of dimension values on the x-axis passed out of the function |
		| 3 | yarr | tuple[tuple[float,...],...] | Array of lines of dimension values on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text extent is supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.40
		"""
		dummy=0
		ret, nlines, xarr, yarr = self._obj.GetTextExtentSingleLine(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, nlines, xarr, yarr

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the text item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the text item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.DeleteAttribute(name)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the text item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the text item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the text item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetAttributeValue(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the text item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.HasAttribute(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the text item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.SetAttributeValue(name, value)

	def SetRedlined(self, onoff:bool) -> int:
		"""
		Sets the text item's redlined status.

		:param onoff: Redlined status value to apply. If 1, the redlined status is set to on. If 0, the redlined status in set to off., defaults to TRUE
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous redlined status was on |
		| 0 | Previous redlined status was off or an error occurred |

		Available since E3.series TLB-Versions: 17.04
		"""
		return self._obj.SetRedlined(onoff)

	def GetPictogram(self) -> bool:
		"""
		Gets the text item's flag value determining if the text is displayed in the pictogram language.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text is displayed in the pictogram language |
		| 0 | Text is not displayed in the pictogram language or an error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.GetPictogram()

	def SetPictogram(self, newval:bool) -> bool:
		"""
		Sets the text item's flag value determining if the text is displayed in the pictogram language.

		:param newval: Text pictogram value to apply. 1 allows the text to use pictograms. 0 disallows the text to use pictograms
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text pictogram value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.SetPictogram(newval)

	def GetLinearMeasureWithoutUnit(self) -> bool:
		"""
		Gets the text item's flag value determining if the length measurement unit is displayed along with the value.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Length measurement unit is not shown |
		| 0 | Length measurement unit is shown or an error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.GetLinearMeasureWithoutUnit()

	def SetLinearMeasureWithoutUnit(self, newval:bool) -> bool:
		"""
		Sets the text item's flag value determining if the length measurement unit is displayed along with the value.

		:param newval: Value for the hiding the length measure unit to apply. 1 hides the measurement unit. 0 shows the measurement unit
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Value is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.SetLinearMeasureWithoutUnit(newval)

	def CalculateBoxHeightEx(self, width:float, text:str, fontName:str, fontSize:float, fontMode:int, fontStyle:int) -> tuple[int, float, float, int]:
		"""
		Calculates the text box rectangle required to hold the given text.

		:param width: Width of the text field
		:type float: float
		:param text: Text of the text field
		:type str: str
		:param fontName: Name of the text field font
		:type str: str
		:param fontSize: Size of the text field font
		:type float: float
		:param fontMode: Ratio of the text field font
		:type int: int
		:param fontStyle: Style of the text field font
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | recHeight | float | Calculated height of the box |
		| 2 | recWidth | float | Calculated width of the box |
		| 3 | lines | int | Number of lines of text in the box |

		| Return Value | Description |
		|:-----:|:-----|
		| 3 | No calculation was performed |
		| 1 | Calculation was performed but an alternative default value was used, For example in the case fontName value was not found |
		| 0 | Calculation was successful |
		| -1 | Error occurred due to invalid width |
		| -2 | Internal error |

		Available since E3.series TLB-Versions: 18.12, 17.33
		"""
		dummy=0
		return self._obj.CalculateBoxHeightEx(width, text, fontName, fontSize, fontMode, fontStyle, dummy, dummy, dummy)

	def SendToForeground(self) -> int:
		"""
		Moves the text item to the foreground.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Text item moved to the foreground |
		| -1 | No project open |
		| -2 | No text item set |
		| -3 | Text item not placed |
		| -4 | Error occurred |
		| -5 | Error occurred |
		| -6 | Text item is locked, Available since v2023-24.22 |

		Available since E3.series TLB-Versions: 21.12
		"""
		return self._obj.SendToForeground()

	def SendToBackground(self) -> int:
		"""
		Moves the text item to the background.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Text item moved to the background |
		| -1 | No project open |
		| -2 | No text item set |
		| -3 | Text item not placed |
		| -4 | Error occurred |
		| -5 | Error occurred |
		| -6 | Text item is locked, Available since v2023-24.22 |

		Available since E3.series TLB-Versions: 21.12
		"""
		return self._obj.SendToBackground()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current text item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current text item |
		| "&lt;Empty&gt;" | No text item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a text item as the current item.

		:param gid: Global identifier value of a text item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current text item |
		| "&lt;Empty&gt;" | No text item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- IVariantInterface--------------------
class Variant:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Variant. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current variant item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current variant item identifier |
		| 0 | No variant item |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a variant as the current item.

		:param id: Unique value identifying a variant item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current variant item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the variant item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Variant name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the variant item's name.

		:param name: New variant name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Variant item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.SetName(name)

	def Create(self, name:str) -> int:
		"""
		Creates a new variant item.

		:param name: Path and name of the variant
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the created variant |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.Create(name)

	def Delete(self, _del:int) -> int:
		"""
		Deletes the variant item from the project.

		:param _del: Indicates whether items the variant is exclusively assigned to are also removed from the project.. If 0, the items are not deleted. If greater than 0, the items are deleted
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current variant item identifier |
		| 0 | Variant item was deleted or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.Delete(_del)

	def Search(self, name:str) -> int:
		"""
		Searches for a variant item matching the name.

		:param name: Name of the variant
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Found variant identifier |
		| 0 | No variant was found or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.Search(name)

	def IsActive(self) -> int:
		"""
		Get the active status of the current variant item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Variant is active |
		| 0 | Variant is inactive or an error occurred |

		Available since E3.series TLB-Versions: 3.00
		"""
		return self._obj.IsActive()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the variant item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the variant item |
		| "&lt;Empty&gt;" | No variant item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a variant as the current item.

		:param gid: Global identifier value of a variant item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current variant item |
		| "&lt;Empty&gt;" | No variant item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current variant item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current variant item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a variant as the current item.

		:param guid: Globally unique identifier value of a variant item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current variant item |
		| "&lt;Empty&gt;" | No variant item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- ISlotInterface--------------------
class Slot:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Slot. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current slot item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current slot item identifier |
		| 0 | No slot item |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a slot as the current item.

		:param id: Unique value identifying a slot item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current slot item identifier |
		| 0 | No slot item |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.SetId(id)

	def GetMountType(self) -> str:
		"""
		Gets the mount type description of the slot item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Slot item mount type description |
		| "&lt;Empty&gt;" | Mount type does not have a description or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.GetMountType()

	def GetFixType(self) -> int:
		"""
		Gets a value representing the fix type of the slot item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Error occurred |
		| 1..4 | Fix type value |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.GetFixType()

	def GetName(self) -> str:
		"""
		Gets the name of the slot item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Slot item name value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.GetName()

	def GetPosition(self, point:int) -> tuple[int, float, float, float]:
		"""
		Gets the position of the slot item.

		:param point: Indicates which position to supply. If 2, the second position is supplied. If any other value, the first position is supplied
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Position value of the x-axis passed out of the function |
		| 2 | y | float | Position value of the y-axis passed out of the function |
		| 3 | z | float | Position value of the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Position values are supplied |
		| 0 | Error occurred |
		| -4 | Slot area is not rectangular, Available since v2023-24.21 |

		Available since E3.series TLB-Versions: 9.00
		"""
		dummy=0
		return self._obj.GetPosition(point, dummy, dummy, dummy)

	def GetMountedDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the devices mounted on the slot item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of devices passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No mounted devices are found or an error occurred |

		Available since E3.series TLB-Versions: 19.22
		"""
		dummy=0
		ret, ids = self._obj.GetMountedDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetDirection(self) -> tuple[int, float, float, float]:
		"""
		Gets the direction of the slot.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Direction value of the x-axis |
		| 2 | y | float | Direction value of the y-axis |
		| 3 | z | float | Direction value of the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Direction values are provided |
		| -1 | No project open or slot item set |
		| -2 | Error accessing slot data |

		Available since E3.series TLB-Versions: 21.00
		"""
		dummy=0
		return self._obj.GetDirection(dummy, dummy, dummy)

	def GetRotation(self) -> tuple[int, float]:
		"""
		Gets the rotation of the slot item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | angle | float | Rotation value in degrees |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Rotation value is supplied |
		| -1 | No project open or slot item set |
		| -2 | Error accessing slot data |
		| -3 | Area slots have no rotation value |
		| -4 | Error determining the slot rotation |

		Available since E3.series TLB-Versions: 21.00
		"""
		dummy=0
		return self._obj.GetRotation(dummy)

	def GetDefinedDirection(self) -> tuple[int, float, float, float]:
		"""
		Gets the database defined direction of the slot.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Direction value of the x-axis |
		| 2 | y | float | Direction value of the y-axis |
		| 3 | z | float | Direction value of the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Direction values are provided |
		| -1 | No project open or slot item set |

		Available since E3.series TLB-Versions: 21.12
		"""
		dummy=0
		return self._obj.GetDefinedDirection(dummy, dummy, dummy)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current slot item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current slot item |
		| "&lt;Empty&gt;" | No slot item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a slot as the current item.

		:param gid: Global identifier value of a slot item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current slot item |
		| "&lt;Empty&gt;" | No slot item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetSlotName(self, flags:int=0) -> str:
		"""
		Gets the display name of the slot item.

		:param flags: Flag bit values specifying how the display name is supplied., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Slot item display name value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.GetSlotName(flags)

	def GetAreaPolygon(self, flags:int=0) -> tuple[int, float, float, float]:
		"""
		Gets the polygon positions of the slot's area.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xarr | float | Array of position values on the x-axis passed out of the function |
		| 2 | yarr | float | Array of positions values on the y-axis passed out of the function |
		| 3 | zarr | float | Array of positions values on the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Position values are supplied |
		| -1 | No project open or slot item set |
		| -2 | Error accessing slot data |
		| -3 | Slot is not an area type slot |
		| -4 | flags is invalid |

		Available since E3.series TLB-Versions: 24.30
		"""
		dummy=0
		return self._obj.GetAreaPolygon(dummy, dummy, dummy, flags)

	def SetMountType(self, newval:str, flags:int=0) -> int:
		"""
		Sets the mount type description of the slot item.

		:param newval: New mount type description
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Mount type description changed |
		| -1 | No project open or slot item set |
		| -2 | flags value is invalid |
		| -3 | Slot item is invalid |
		| -4 | Device is locked |
		| -5 | For line and point slots, newval is "&lt;Empty&gt;", Area slots do not have a mount type description |
		| -6 | newval is invalid |

		Available since E3.series TLB-Versions: 26.00
		"""
		return self._obj.SetMountType(newval, flags)

	def GetDefinedRotation(self, flags:int=0) -> tuple[int, float]:
		"""
		Gets the database defined rotation of the slot item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | angle | float | Rotation value in degrees |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Rotation value is supplied |
		| -1 | No project open or slot item set |
		| -2 | Error occurred |
		| -3 | Area slots have no rotation value |
		| -4 | Error occurred |
		| -5 | flags value is invalid |

		Available since E3.series TLB-Versions: 26.01
		"""
		dummy=0
		return self._obj.GetDefinedRotation(dummy, flags)

# -------------------- INetInterface--------------------
class Net:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Net. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current net item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current net item identifier |
		| 0 | No net item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a connection net as the current item.

		:param id: Unique value identifying a connection net item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current connection net item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the connection net item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the connection net item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the connection net item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the connection net item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the connection net item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the connection net item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the connection net item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def SetAttributeVisibility(self, name:str, onoff:int) -> int:
		"""
		Sets the visibility status of all text items representing the connection net item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param onoff: Indicates whether the text items' visibility status should be shown or hidden. If > 0, the text items are shown. If 0, the text items are hidden
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items changed |
		| 0 | No text items found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeVisibility(name, onoff)

	def DisplayAttributeValueAt(self, name:str, sheetid:int, x:float, y:float) -> int:
		"""
		Displays an attribute value from the connection net item at a specific position.

		:param name: Internal name of the attribute
		:type str: str
		:param sheetid: Sheet identifier to display the attribute value on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text item identifier displaying the attribute value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DisplayAttributeValueAt(name, sheetid, x, y)

	def GetName(self) -> str:
		"""
		Gets the connection net item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Connection net name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def GetParentId(self) -> int:
		"""
		Gets the identifier of the global master connection net of the current local sheet connection net item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the global master connection net item |
		| 0 | No global master connection net found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetParentId()

	def GetNetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the connection net's local connection net identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of net identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No nets or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the net segments of the connection net.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of net segments passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segments in ids |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsSignalTransferred(self) -> int:
		"""
		Indicates whether signals are transferred to connections for the current connection net item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signals are transferred to connections |
		| 0 | Signals are not transferred to connections or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsSignalTransferred()

	def SetTransferSignal(self, value:int) -> int:
		"""
		Sets the net item's net transfer signal status value.

		:param value: Net transfer signal status value to apply. If 1, the net transfer signal is activated. If 0, the net transfer signal is deactivated
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..0 | Current net transfer signal status value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTransferSignal(value)

	def GetPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the connection net item's pins.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No pin identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCoreIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors contained in the current connection net item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors in ids |
		| 0 | No conductors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCoreIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetHarnessId(self) -> int:
		"""
		Gets the identifier of the net connection item's harness.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the harness |
		| 0 | No harness or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetHarnessId()

	def SplitHarness(self) -> int:
		"""
		Removes the current connection net item from the harness.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new harness for the connection net |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SplitHarness()

	def GetSignalName(self) -> str:
		"""
		Gets the connection net item's signal name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Signal name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 15.10
		"""
		return self._obj.GetSignalName()

	def GetTranslatedSignalName(self) -> str:
		"""
		Gets the connection net item's translated signal name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Connection net item's translated signal name value is supplied |
		| "&lt;Empty&gt;" | No signal translated name value or an error occurred |

		Available since E3.series TLB-Versions: 15.10
		"""
		return self._obj.GetTranslatedSignalName()

	def SetSignalName(self, name:str) -> int:
		"""
		Sets the connection net item's signal name.

		:param name: New signal name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signal name |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.10
		"""
		return self._obj.SetSignalName(name)

	def SetSignalNameOnLocalNet(self, name:str) -> int:
		"""
		Sets the connection net item's signal name.

		:param name: New signal name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Signal name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 15.10
		"""
		return self._obj.SetSignalNameOnLocalNet(name)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the connection net item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the connection net item |
		| "&lt;Empty&gt;" | No connection net item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a connection net as the current item.

		:param gid: Global identifier value of a connection net item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current connection net item |
		| "&lt;Empty&gt;" | No connection net item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current connection net item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current connection net item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a connection net as the current item.

		:param guid: Globally unique identifier value of a connection net item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current connection net item |
		| "&lt;Empty&gt;" | No connection net item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- IUserMenuItemInterface--------------------
class UserMenuItem:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize UserMenuItem. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current menu item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current menu item identifier |
		| 0 | No menu item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a menu item as the current item.

		:param id: Unique value identifying a menu item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current menu item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def Create(self, id:int, text:str, command:str, parameters:str, folder:str, image:str, shortcut:str, visible:int, wait:int, flags:int=1) -> int:
		"""
		Creates a new user menu item.

		:param id: Identifier of the user menu item
		:type int: int
		:param text: Display text and menu position. See Menu Item Text for possible values
		:type str: str
		:param command: Path and name of the user tool
		:type str: str
		:param parameters: Argument values to be passed into the user tool
		:type str: str
		:param folder: Path of the working folder of the user tool
		:type str: str
		:param image: Path and name of a Windows Bitmap (.bmp) file for the display icon
		:type str: str
		:param shortcut: Short cut key combination. See Short Cut for possible values
		:type str: str
		:param visible: Executable window status when run in console execution mode. If 0, the executable window is hidden. If 1, the executable window is shown. If 2, the executable window is minimized. If 3, the executable window is maximized
		:type int: int
		:param wait: Indicates whether the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. process should pause until the user tool execution is finished. Since v2011-10.00 this functionality is no longer available
		:type int: int
		:param flags: User menu item option flags., defaults to 1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new user menu item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(id, text, command, parameters, folder, image, shortcut, visible, wait, flags)

	def Delete(self) -> int:
		"""
		Deletes the current menu item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Menu item was deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def GetText(self) -> str:
		"""
		Gets the menu item's display text.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Display text |
		| "&lt;Empty&gt;" | No display text or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetText()

	def SetText(self, newval:str) -> int:
		"""
		Sets the menu item's display text.

		:param newval: Display text
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display text applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetText(newval)

	def GetCommand(self) -> str:
		"""
		Gets the path and name of the menu item's user tool.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;User Tool&gt;" | Path and name of the menu item's user tool |
		| "&lt;Empty&gt;" | No user tool path and name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCommand()

	def SetCommand(self, newval:str) -> int:
		"""
		Sets the path and name of the menu item's user tool.

		:param newval: Path and name of the user tool
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Path and name of the user tool applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCommand(newval)

	def GetParameters(self) -> str:
		"""
		Gets the menu item's argument values to be passed into the user tool.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Parameters&gt;" | Argument values |
		| "&lt;Empty&gt;" | No argument values or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetParameters()

	def SetParameters(self, newval:str) -> int:
		"""
		Sets the menu item's argument values to be passed into the user tool.

		:param newval: Argument values to be passed into the user tool
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Argument values applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetParameters(newval)

	def GetFolder(self) -> str:
		"""
		Gets the menu item user tool's working folder.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Path of the user tool's working folder |
		| "&lt;Empty&gt;" | No working folder or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFolder()

	def SetFolder(self, newval:str) -> int:
		"""
		Sets the menu item user tool's working folder

		:param newval: Working folder of the user tool to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Working folder value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFolder(newval)

	def GetImage(self) -> str:
		"""
		Gets the menu item's icon path and file name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File Path&gt;" | Path and file name of the icon image |
		| "&lt;Empty&gt;" | No icon image path and file name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetImage()

	def SetImage(self, newval:str) -> int:
		"""
		Sets the menu item's icon path and file name.

		:param newval: Path and name of a Windows Bitmap (.bmp) file for the  display icon
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Icon image file is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetImage(newval)

	def GetShortCut(self) -> str:
		"""
		Gets the menu item's short cut key combination.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Short Cut&gt;" | Short cut key combination |
		| "&lt;Empty&gt;" | No short cut key combination or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetShortCut()

	def SetShortCut(self, newval:str) -> int:
		"""
		Sets the menu item's short cut key combination.

		:param newval: Short cut key combination
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Short cut key combination value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetShortCut(newval)

	def GetVisible(self) -> int:
		"""
		Gets the executable window state of the menu item's user tool when run in console execution mode.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 3 | Window state is maximized |
		| 2 | Window state is minimized |
		| 1 | Window state is shown |
		| 0 | Window state is hidden or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetVisible()

	def SetVisible(self, newval:int) -> int:
		"""
		Sets the executable window state of the menu item's user tool when run in console execution mode.

		:param newval: User tool window state
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | User tool window state value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetVisible(newval)

	def GetEnable(self) -> int:
		"""
		Gets the menu item active status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Menu item is active |
		| 0 | Menu item is inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetEnable()

	def SetEnable(self, newval:int) -> int:
		"""
		Sets the menu item active status.

		:param newval: Indicates the active status to apply. If 0, the menu item is inactive. If 1, the menu item is active
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Active status is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetEnable(newval)

	def GetWaitForEndOfCommand(self) -> int:
		"""
		Indicates whether the E³.series process is paused during the execution life time of the user tool.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | E³.series process is paused during the execution life time of the user tool |
		| 0 | E³.series process runs during the execution life time of the user tool, the functionality is no longer supported or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetWaitForEndOfCommand()

	def SetWaitForEndOfCommand(self, newval:int) -> int:
		"""
		Sets whether the E³.series process is paused during the execution life time of the user tool.

		:param newval: Value indicating whether the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. process is paused during the execution life time of the user tool. If 1, the E³.series process is paused during the execution life time of the user tool. If 0, the E³.series process runs during the execution life time of the user tool
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Value applied |
		| 0 | Functionality is no longer supported or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetWaitForEndOfCommand(newval)

	def CreateSeparator(self, text:str) -> int:
		"""
		Creates a new separator menu item.

		:param text: Display text and menu position. See Menu Item Text for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &lt; 0 | Identifier of the new separator menu item or an error occurred |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateSeparator(text)

	def CreateUserTool(self, text:str, command:str) -> int:
		"""
		Creates a new user tool menu item.

		:param text: Display text and menu position. See Menu Item Text for possible values
		:type str: str
		:param command: Path and name of the user tool
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new user tool menu item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateUserTool(text, command)

	def UpdateUserInterface(self) -> int:
		"""
		Updates the E³.series menus and short cuts.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | E³.series menus and short cuts updated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateUserInterface()

	def CreateContextUserTool(self, text:str, command:str) -> int:
		"""
		Creates a new user tool menu item for the context menu.

		:param text: Display text and context menu position. See Menu Item Text for possible values
		:type str: str
		:param command: Path and name of the user tool
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new user tool context menu item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateContextUserTool(text, command)

	def CreateContextSeparator(self, text:str) -> int:
		"""
		Creates a new separator menu item for the context menu.

		:param text: Display text and menu position. See Menu Item Text for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &lt; 0 | Identifier of the new separator context menu item or an error occurred |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateContextSeparator(text)

	def DeleteContext(self) -> int:
		"""
		Deletes the current context menu item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Context menu item was deleted or an error occurred |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteContext()

	def IsDeleted(self) -> int:
		"""
		Indicates if the system menu item has been deleted.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | System menu item has been deleted |
		| 0 | System menu item has not been deleted |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsDeleted()

	def UnDelete(self) -> int:
		"""
		Restores the deleted menu item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value has been returned since v2011-10.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UnDelete()

	def GetType(self) -> int:
		"""
		Gets a value representing the type of the menu item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type value of the menu item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetType()

	def GetDescription(self) -> str:
		"""
		Gets the description of the menu item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;User Tool&gt;" | Menu item description |
		| "&lt;Empty&gt;" | No menu item description or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDescription()

	def SetDescription(self, newval:str) -> int:
		"""
		Sets the description of the menu item.

		:param newval: Description of the menu item
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Description applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDescription(newval)

	def DeleteUserTool(self) -> int:
		"""
		Deletes the current menu item and associated user tool.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Menu item and user tool were deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.DeleteUserTool()

# -------------------- IStructureNodeInterface--------------------
class StructureNode:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize StructureNode. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current structure node item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current structure node item identifier |
		| 0 | No structure node item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a structure node as the current item.

		:param id: Unique value identifying a structure node item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current structure node item identifier |
		| 0 | No structure node item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetParentId(self) -> int:
		"""
		Gets the identifier of the parent structure node of the current structure node item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the parent structure node |
		| 0 | No parent structure node or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetParentId()

	def GetTypeName(self) -> str:
		"""
		Gets the type of the structure node.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Type&gt;" | Structure node type |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTypeName()

	def GetName(self) -> str:
		"""
		Gets the structure node item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Structure node item's name |
		| "&lt;Empty&gt;" | Unable to supply the name |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the structure node item's name.

		:param name: New name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Structure node item's name |
		| 0 | Error occurred |
		| -3 | Structure node is locked, Available since v2017-18.00 |
		| -4 | Project structure is locked, Available since v2018-19.12 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def Create(self, name:str, typname:str, parentid:int, afterid:int) -> int:
		"""
		Creates a new structure node item.

		:param name: Name of the new structure node item
		:type str: str
		:param typname: Type of the new structure node item
		:type str: str
		:param parentid: Identifier of the parent structure node of the new structure node item
		:type int: int
		:param afterid: Identifier of an existing structure node the new structure node item should be placed after
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new structure node item |
		| 0 | Error occurred |
		| -3 | Structure node is locked, Available since v2017-18.00 |
		| -4 | Project structure is locked, Available since v2018-19.12 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(name, typname, parentid, afterid)

	def Delete(self) -> int:
		"""
		Deletes the current structure node item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Old structure node item identifier |
		| 0 | Error occurred |
		| -1 | Invalid structure node item |
		| -2 | Structure node cannot be deleted |
		| -3 | Structure node is locked, Available since v2017-18.00 |
		| -4 | Project structure is locked, Available since v2018-19.12 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def GetStructureNodeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the current structure node item's child structure nodes.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of structure nodes identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | Current structure node item contains no child structure nodes or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetStructureNodeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the structure node item's sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | Structure node item contains no sheets or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetExternalDocumentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the structure node item's external documents.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of external document identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of external document identifiers in ids |
		| 0 | No external documents or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetExternalDocumentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAllDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the structure node item's devices.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of device identifiers in ids |
		| 0 | No devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAllDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the structure node item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the structure node item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the structure node item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the structure node item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the structure node item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the structure node item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def MoveTo(self, parentId:int, afterId:int=0) -> int:
		"""
		Moves the structure node item's position.

		:param parentId: Identifier of the destination structure node to place the current structure node within
		:type int: int
		:param afterId: Identifier of the destination structure node after which to place the current structure node. If 0, the current structure node is placed at the end of the parentId node's content. Available since v2020-21.31 and v2021-22.12:. If 1, the current structure node is placed at the beginning of the parentId node's content., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Structure node item has been moved |
		| -1 | Error occurred |
		| -3 | Structure node item is locked, Available since v2017-18.00 |
		| -4 | Project structure is locked, Available since v2018-19.12 |
		| -5 | parentId or afterId is invalid, Available since v2020-21.31 and v2021-22.12 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.MoveTo(parentId, afterId)

	def SetStructureNodeIds(self, ids:list[int]) -> int:
		"""
		Orders the child structure nodes of the structure node item.

		:param ids: Array of all child structure node identifiers contained in the current structure node in the new order
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Child structure nodes  are reordered in  the structure node |
		| -1 | Error occurred |
		| -3 | Structure node is locked, Available since v2017-18.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetStructureNodeIds(ids)
		return ret[0]

	def SetSheetIds(self, ids:list[int]) -> int:
		"""
		Orders the sheets of the structure node item.

		:param ids: Array of all sheet identifiers contained in the current structure node listed in the new order
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheets are reordered in  the structure node |
		| -1 | Error occurred |
		| -3 | Structure node is locked, Available since v2017-18.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetSheetIds(ids)
		return ret[0]

	def SetExternalDocumentIds(self, ids:list[int]) -> int:
		"""
		Orders the external documents of the structure node item.

		:param ids: Array of all external document identifiers contained in the current structure node in the new order
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | External documents are reordered in  the structure node |
		| -1 | Error occurred |
		| -3 | Structure node is locked, Available since v2017-18.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetExternalDocumentIds(ids)
		return ret[0]

	def IsObjectTypeAllowed(self, sheets:bool, devices:bool) -> int:
		"""
		Indicates whether sheets and devices are allowed under the structure node item.

		:param sheets: Indicates whether to query for sheet. If 1, sheets are queried. If 0, sheets are not queried
		:type bool: bool
		:param devices: Indicates whether to query for devices. If 1, devices are queried. If 0, devices are not queried
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Queried item types are allowed under the structure node item |
		| 0 | Queried item types are not allowed under the structure node item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsObjectTypeAllowed(sheets, devices)

	def GetInternalName(self) -> str:
		"""
		Gets	the structure node item's internal name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Structure node item's internal name |
		| "&lt;Empty&gt;" | Error occurred  or the structure node has no internal name |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetInternalName()

	def GetAllSignalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the structure node item's signals.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of signal identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of signal identifiers in ids |
		| 0 | No signals or an error occurred |

		Available since E3.series TLB-Versions: 10.20
		"""
		dummy=0
		ret, ids = self._obj.GetAllSignalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Highlight(self, colour:int, width:float) -> int:
		"""
		Highlights the items assigned to the current structure node item.

		:param colour: Color value to apply. See Colors for possible values
		:type int: int
		:param width: Highlight line width
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Items assigned to the current structure node item are highlighted or an error occurred |
		| -1 | Root level structure node items cannot be highlighted |

		Available since E3.series TLB-Versions: 11.70
		"""
		return self._obj.Highlight(colour, width)

	def ResetHighlight(self) -> int:
		"""
		Resets all highlighted items of the current structure node to their normal display mode.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Highlighting reset for items assigned to the current structure node item or an error occurred |
		| -1 | Root level structure node items cannot be highlighted |

		Available since E3.series TLB-Versions: 11.70
		"""
		return self._obj.ResetHighlight()

	def IsLocked(self) -> int:
		"""
		Indicates the structure node item's locked status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Structure node is unlocked or an error occurred |
		| 1 | Structure node is locked |
		| 2 | Structure node is indirect locked by a sheet |
		| 3 | Structure node is locked and indirect locked by a sheet |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.IsLocked()

	def LockObject(self) -> int:
		"""
		Locks the structure node item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Structure node locked |
		| -1 | Error occurred |
		| -2 | Structure node item is already locked |
		| -3 | Error occurred |
		| -1009 | No project open or no structure node item set |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.LockObject()

	def UnlockObject(self, password:str) -> int:
		"""
		Unlocks the structure node item.

		:param password: Password needed to unlock the structure node
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Structure node item has been unlocked |
		| -1 | Error occurred |
		| -2 | Structure node item is already unlocked |
		| -3 | Error occurred |
		| -1009 | No project open or no structure node item set |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.UnlockObject(password)

	def DeleteForced(self) -> int:
		"""
		Deletes the current structure node item and its content from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Old structure node item identifier |
		| 0 | Error occurred |
		| -1 | Invalid structure node item |
		| -2 | Structure node cannot be deleted |
		| -3 | Structure node is locked |
		| -4 | Project structure is locked, Available since v2018-19.12 |

		Available since E3.series TLB-Versions: 18.70
		"""
		return self._obj.DeleteForced()

	def IsLockedByAccessControl(self) -> int:
		"""
		Indicates the structure node item's E³PluginAccessControl lock status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 3 | Structure node is locked and also indirectly by the sheet |
		| 2 | Structure node is locked indirectly by the sheet |
		| 1 | Structure node is locked |
		| 0 | Structure node is unlocked or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.IsLockedByAccessControl()

	def GetSheetAndExternalDocumentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the structure node item's sheet and external documents.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet and external document identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet and external document identifiers in ids |
		| 0 | No sheets and external documents or an error occurred |

		Available since E3.series TLB-Versions: 19.22
		"""
		dummy=0
		ret, ids = self._obj.GetSheetAndExternalDocumentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the structure node item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the structure node item |
		| "&lt;Empty&gt;" | No structure node item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a structure node as the current item.

		:param gid: Global identifier value of a structure node item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current structure node item |
		| "&lt;Empty&gt;" | No structure node item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current structure node item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current structure node item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a structure node as the current item.

		:param guid: Globally unique identifier value of a structure node item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current structure node item |
		| "&lt;Empty&gt;" | No structure node item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- ITreeInterface--------------------
class Tree:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Tree. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current tree item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current tree item identifier |
		| 0 | No tree item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, treeid:int) -> int:
		"""
		Sets a tree item as the current item.

		:param treeid: Unique value identifying a tree item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current tree item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(treeid)

	def GetName(self) -> str:
		"""
		Gets the tree item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Tree item's name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the tree item's name.

		:param name: New tree item name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New tree item name |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def GetVisibleObjectTypes(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the project tree item's visible object types and the settings about their displayed information.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | type_array | tuple[int,...] | Array containing the object type information passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of object types in type_array |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, type_array = self._obj.GetVisibleObjectTypes(dummy)
		type_array = type_array[1:] if type(type_array) == tuple and len(type_array) > 0 else tuple()
		return ret, type_array

	def SetVisibleObjectTypes(self, type_array:list[int]) -> int:
		"""
		Sets the project tree item's visible object types and the settings about their displayed information.

		:param type_array: Array containing the object type information passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Tree item's visible object types and their display information are applied |
		| 0 | Error occurred |
		| -1 | Tree not found |
		| -4 | type_array is invalid |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetVisibleObjectTypes(type_array)
		return ret[0]

	def GetSortingMethod(self) -> tuple[int, int, tuple[tuple[str,int,str,str,int],...], tuple[tuple[str,str,int],...]]:
		"""
		Gets sorting method of elements in the tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | flags | int | Global setting values relevant to the sorting method passed out of the function |
		| 2 | structure | tuple[tuple[str,int,str,str,int],...] | Array describing the levels structure used for sorting passed out of the function |
		| 3 | freetab | tuple[tuple[str,str,int],...] | Array describing the defined keys used for sorting passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sorting method supplied |
		| ≠1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, flags, structure, freetab = self._obj.GetSortingMethod(dummy, dummy, dummy)
		structure = structure[1:] if type(structure) == tuple and len(structure) > 0 else tuple()
		freetab = freetab[1:] if type(freetab) == tuple and len(freetab) > 0 else tuple()
		return ret, flags, structure, freetab

	def SetSortingMethod(self, flags:int, structure:list[tuple[str,int,str,str,int]], freetab:list[tuple[str,str,int]]) -> int:
		"""
		Sets sorting method of elements in the project tree.

		:param flags: Global settings values relevant to the sorting method
		:type int: int
		:param structure: Array describing the levels structure used for sorting passed into the function
		:type list[tuple[str,int,str,str,int]]: list[tuple[str,int,str,str,int]]
		:param freetab: Array describing the defined keys used for sorting passed into the function
		:type list[tuple[str,str,int]]: list[tuple[str,str,int]]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sorting method is applied |
		| ≠1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		structure = [("",0,"","",0)] + structure
		freetab = [("","",0)] + freetab
		ret = self._obj.SetSortingMethod(flags, structure, freetab)
		return ret[0]

	def SetIcon(self, filename:str, index:int=0) -> int:
		"""
		Sets the tree item's display icon.

		:param filename: Path and name of an icon file
		:type str: str
		:param index: Index of an icon within. filename. if it is a file containing icon resources., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New icon is applied |
		| 0 | Tree item cannot be set with a new icon |
		| -1 | No tree item set |
		| -2 | filename is invalid |
		| -3 | Icon cannot be loaded |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetIcon(filename, index)

	def GetSelectedSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of sheets selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of sheets selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No sheets are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of devices selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of devices selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No devices are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedCableIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of cables selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of cables selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No cables or cable sub-elements are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedCableIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedTerminalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of terminals selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of terminals selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No terminals are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedTerminalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedConnectorIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of connectors selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of connectors selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No connectors are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedConnectorIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedBlockIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of blocks selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of blocks selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No blocks are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedBlockIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedAllDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of devices of all types selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of devices selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No devices are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedAllDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of symbols and gates selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbols and gates selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No symbols or gates are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedBundleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of bundles selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of bundles selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No bundles are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedBundleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of pins selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pins selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No pins are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedStructureNodeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of structure nodes selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of structure nodes selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No structure nodes are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedStructureNodeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsVisible(self) -> int:
		"""
		Indicates whether the tree item is displayed.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Tree item is displayed |
		| 0 | Tree item is not displayed or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsVisible()

	def IsActive(self) -> int:
		"""
		Indicates whether the tree item is the currently active tree.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Tree item is active |
		| 0 | Tree item in inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsActive()

	def Create(self, name:str, position:int=0, before:int=0) -> int:
		"""
		Creates a new tree item and places it in the project tree structure.

		:param name: Name of the tree item
		:type str: str
		:param position: Identifier of an existing tree item to use as the insertion position of the new tree item in the project tree structure., defaults to 0
		:type int: int
		:param before: Indicates whether to insert the tree item before or after. position. If 1, the tree item is inserted before position. If 0, the tree item is inserted after position., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new tree item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(name, position, before)

	def Delete(self) -> int:
		"""
		Deletes the current tree item from the project tree structure.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Tree item was deleted or an error occurred |
		| -1 | Tree item not found |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def GetSelectedExternalDocumentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of external document items selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of external document items selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No external document items are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedExternalDocumentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNames(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the tree item's names in all languages.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | names | tuple[str,...] | Array of tree item names by language passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of name elements in names |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		dummy=0
		ret, names = self._obj.GetNames(dummy)
		names = names[1:] if type(names) == tuple and len(names) > 0 else tuple()
		return ret, names

	def SetNames(self, names:list[str]) -> int:
		"""
		Sets the tree item's names in all languages.

		:param names: Array of tree item names by language passed into the function
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Number of name elements in names |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		ret = self._obj.SetNames(names)
		return ret[0]

	def GetSelectedSheetIdsByFolder(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of sheets in selected folders in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of sheets in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No folders containing sheets are selected or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedSheetIdsByFolder(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedExternalDocumentIdsByFolder(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of external documents in selected folders in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of external documents in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No folders containing external documents are selected or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedExternalDocumentIdsByFolder(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedAllDeviceIdsByFolder(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of devices in selected folders in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of devices in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No folders containing devices are selected or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedAllDeviceIdsByFolder(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ViewSignalTree(self, bShowTree:bool) -> int:
		"""
		Gets a unique value identifying the signal tree item and shows or hides it.

		:param bShowTree: Indicates if the signal tree should be displayed. If 1, the signal tree is shown. If 0, the signal tree is hidden
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Signal tree identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.20
		"""
		return self._obj.ViewSignalTree(bShowTree)

	def GetVisibleInfoTypesEx(self) -> tuple[int, tuple[int,...], tuple[int,...], tuple[int,...]]:
		"""
		Gets arrays of views, schematic types and formboard sheets displayed in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | views | tuple[int,...] | Array of displayed view numbers passed out of the function |
		| 2 | schematicTypes | tuple[int,...] | Array of displayed schematic types passed out of the function. See Schematic for possible values |
		| 3 | formboardSheetIds | tuple[int,...] | Array of identifiers of formboard sheets passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Views, schematic type and formboard display information is supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.70
		"""
		dummy=0
		ret, views, schematicTypes, formboardSheetIds = self._obj.GetVisibleInfoTypesEx(dummy, dummy, dummy)
		views = views[1:] if type(views) == tuple and len(views) > 0 else tuple()
		schematicTypes = schematicTypes[1:] if type(schematicTypes) == tuple and len(schematicTypes) > 0 else tuple()
		formboardSheetIds = formboardSheetIds[1:] if type(formboardSheetIds) == tuple and len(formboardSheetIds) > 0 else tuple()
		return ret, views, schematicTypes, formboardSheetIds

	def SetVisibleInfoTypesEx(self, views:list[int], schematicTypes:list[int], formboardSheetIds:list[int]) -> int:
		"""
		Sets the views, schematic types and formboard sheets displayed in the project tree item.

		:param views: Array of displayed view numbers
		:type list[int]: list[int]
		:param schematicTypes: Array of displayed schematic types. See Schematic for possible values
		:type list[int]: list[int]
		:param formboardSheetIds: Array of identifiers of formboard sheets
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Views, schematic type and formboard display information is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 16.70
		"""
		return self._obj.SetVisibleInfoTypesEx(views, schematicTypes, formboardSheetIds)

	def GetTreeType(self) -> int:
		"""
		Gets a value representing the tree item's subtype.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| -1 | Error occurred |
		| 0..2 | Tree item's subtype |

		Available since E3.series TLB-Versions: 17.03
		"""
		return self._obj.GetTreeType()

	def GetSelectedBusbarIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of busbars selected in the project tree item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of busbars selected in the project tree item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No busbars or busbar sub-elements are selected or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedBusbarIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

# -------------------- IDimensionInterface--------------------
class Dimension:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Dimension. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def SetId(self, id:int) -> int:
		"""
		Sets a dimension as the current item.

		:param id: Unique value identifying a dimension item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current dimension item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetId(self) -> int:
		"""
		Gets the identifier of the current dimension item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current dimension item identifier |
		| 0 | No dimension item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def Delete(self) -> int:
		"""
		Deletes the dimension item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the dimension item |
		| 0 | No dimension item was set |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def Create(self, shtid:int, x1:float, y1:float, x2:float, y2:float, flags:int, distance:float, text:str, tx:float, ty:float) -> int:
		"""
		Adds a new dimension item onto a sheet of the project.

		:param shtid: Identifier of the sheet to place the dimension item on
		:type int: int
		:param x1: First placement position on the x-axis
		:type float: float
		:param y1: First placement position on the y-axis
		:type float: float
		:param x2: Second placement position on the x-axis
		:type float: float
		:param y2: Second placement position on the y-axis
		:type float: float
		:param flags: Flags bit values specifying how the dimension item should be created
		:type int: int
		:param distance: Distance of the dimension line from the placement positions, from the reference point or the radius of the dimension item
		:type float: float
		:param text: Defines the text to be displayed
		:type str: str
		:param tx: Placement position of the displayed text on the x-axis
		:type float: float
		:param ty: Placement position of the displayed text on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new dimension item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(shtid, x1, y1, x2, y2, flags, distance, text, tx, ty)

	def GetParameters(self) -> tuple[int, float, float, float, float, float, int, str, float, float]:
		"""
		Gets the properties of the dimension line.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x1 | float | Dimension first point x-axis value |
		| 2 | y1 | float | Dimension first point y-axis value |
		| 3 | x2 | float | Dimension second point x-axis value |
		| 4 | y2 | float | Dimension second point  y-axis value |
		| 5 | distance | float | Dimension line distance |
		| 6 | flags | int | See. Create(). for flag value descriptions. Bit 5 (0x0020) is not returned |
		| 7 | text | str | Dimension display text |
		| 8 | tx | float | Display text position's x-axis value |
		| 9 | ty | float | Display text position's y-axis value |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Sheet identifier of the dimension |
		| 0 | For example no dimension item is set |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetParameters(dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy)

	def SetArrowMode(self, value:int) -> int:
		"""
		Sets the dimension's current arrow style value.

		:param value: Arrow style value. See Arrow Style for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 or 2 | Previous assigned arrow style value, See Arrow Style for possible values |
		| 0 | Previous assigned arrow style value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetArrowMode(value)

	def GetArrowMode(self) -> int:
		"""
		Gets the dimension's current arrow style value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Filled arrow style or an error occurred |
		| 1..5 | Current arrow style, See Arrow Style for possible values |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetArrowMode()

	def SetExtension(self, value:float) -> float:
		"""
		Sets the distance of the dimension item's extension lines beyond the arrows.

		:param value: Distance of the extension lines beyond the arrows to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous assigned extension line distance value beyond the arrows |
		| 0.0 | Previous assigned  line distance beyond the arrows or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetExtension(value)

	def GetExtension(self) -> float:
		"""
		Gets the distance of the dimension item's extension lines beyond the arrows.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Extension line distance value beyond the arrows |
		| 0.0 | No extension line distance beyond the arrows or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetExtension()

	def SetLineWidth(self, value:float) -> float:
		"""
		Sets the line width of a dimension item.

		:param value: Line width value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Previous assigned line width value |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLineWidth(value)

	def GetLineWidth(self) -> float:
		"""
		Gets the line width of a dimension item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Line width value |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLineWidth()

	def SetPrecision(self, value:int) -> int:
		"""
		Sets the number of decimal places for displaying generated measurements on the dimension item's text.

		:param value: Number of decimal places to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..4 | Previous number of decimal places assigned |
		| 0 | No decimal places were previously assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPrecision(value)

	def GetPrecision(self) -> int:
		"""
		Gets the number of decimal places when displaying generated measurements on the dimension item's text.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of decimal places |
		| 0 | No decimal places or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPrecision()

	def SetOffset(self, value:float) -> float:
		"""
		Sets the distance between the dimension item's text and dimension line.

		:param value: Distance between the dimension item's text and dimension line to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &lt; 0.0 or &gt; 0.0 | Previous assigned distance between the text and dimension line |
		| 0.0 | Previous assigned distance between the text and dimension line or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetOffset(value)

	def GetOffset(self) -> float:
		"""
		Gets the distance between the dimension item's text and dimension line.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &lt; 0.0 or &gt; 0.0 | Distance between the  text and dimension line |
		| 0.0 | No distance between the  text and dimension line or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOffset()

	def SetPrefix(self, value:str) -> str:
		"""
		Sets the dimension item's text prefix.

		:param value: Text prefix value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Previous assigned text prefix |
		| "&lt;Empty&gt;" | No previous assigned text prefix or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPrefix(value)

	def GetPrefix(self) -> str:
		"""
		Gets the dimension item's text prefix.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Dimension text prefix |
		| "&lt;Empty&gt;" | No dimension text prefix or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPrefix()

	def SetSuffix(self, value:str) -> str:
		"""
		Sets the dimension item's text suffix.

		:param value: Text suffix value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Previous assigned text suffix value |
		| "&lt;Empty&gt;" | Previous assigned text suffix value  or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetSuffix(value)

	def GetSuffix(self) -> str:
		"""
		Gets the dimension item's text suffix.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Dimension text suffix |
		| "&lt;Empty&gt;" | No dimension text suffix or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSuffix()

	def SetText(self, text:str, fixed:int) -> int:
		"""
		Sets the dimension item's text value.

		:param text: Text value to apply
		:type str: str
		:param fixed: Indicates whether the text value or the dimension measurement is displayed. If 0, the dimension measurement is displayed. If 1, the text value is displayed
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text value is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetText(text, fixed)

	def GetText(self) -> tuple[int, str, int]:
		"""
		Gets the dimension item's text value.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | text | str | Text value |
		| 2 | fixed | int | Indicates whether the text value or the dimension measurement is displayed. If 0, the dimension measurement is displayed. If 1, the text value is displayed |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text value is supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetText(dummy, dummy)

	def SetLevel(self, value:int) -> int:
		"""
		Sets the dimension item's display level value.

		:param value: Display level value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Previous display level value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLevel(value)

	def GetLevel(self) -> int:
		"""
		Gets the dimension item's display level value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Display level value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLevel()

	def SetColour(self, value:int) -> int:
		"""
		Sets the dimension item's color.

		:param value: Color value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous assigned color value, See Colors for possible values |
		| 0 | Previous assigned color was black (RGB: 0, 0, 0 ) or an error occurred |
		| -1 | Previous assigned color was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetColour(value)

	def GetColour(self) -> int:
		"""
		Gets the dimension item's color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or the operation has failed |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetColour()

	def SetTextFontName(self, text:str) -> str:
		"""
		Sets the dimension item's text font name.

		:param text: Text font name to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Font&gt;" | Previous assigned name of the dimension item's text font |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTextFontName(text)

	def GetTextFontName(self) -> str:
		"""
		Gets the dimension item's text font name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Name of the dimension item's text font |
		| "Arial" | Name of the dimension item's text font is Arial or the font name could not be supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTextFontName()

	def SetTextStyle(self, value:int) -> int:
		"""
		Sets the dimension item's text font style.

		:param value: Text style to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..31 | Previous assigned text style value |
		| 0 | Previously regular font style value was assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTextStyle(value)

	def GetTextStyle(self) -> int:
		"""
		Gets the dimension item's text font style.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..31 | Font style value supplied |
		| 0 | Regular font style value used or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTextStyle()

	def SetTextHeight(self, value:float) -> float:
		"""
		Sets the dimension item's text font height.

		:param value: Text height to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous assigned text height |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTextHeight(value)

	def GetTextHeight(self) -> float:
		"""
		Gets the dimension item's text font height.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Size of the text font height |
		| 0.0 | Font height could not be supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTextHeight()

	def SetTextColour(self, value:int) -> int:
		"""
		Sets the dimension item's text color.

		:param value: Color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous assigned color value, See Colors for possible values |
		| 0 | Previous assigned color was black (RGB: 0, 0, 0 ) or an error occurred |
		| -1 | Previous assigned color was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTextColour(value)

	def GetTextColour(self) -> int:
		"""
		Gets the dimension item's text color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or the operation has failed |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTextColour()

	def GetDimensionedIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the items bound to the dimension item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | anyids | tuple[int,...] | Array of item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in anyids |
		| 0 | No items bound to the dimension or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, anyids = self._obj.GetDimensionedIds(dummy)
		anyids = anyids[1:] if type(anyids) == tuple and len(anyids) > 0 else tuple()
		return ret, anyids

	def IsAlongPath(self) -> int:
		"""
		Indicates if the dimension item runs along a path.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Dimension item is along a path |
		| 0 | Dimension item is not along a path or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.IsAlongPath()

	def SetHideLongerPart(self, value:bool) -> int:
		"""
		Sets whether the dimension item's start point arrow, start point extension line and dimension line are hidden.

		:param value: Indicates whether the dimension item's start point arrow, start point extension line and dimension line are hidden. If 1, they are hidden. If 0, they are displayed
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous start point arrow, start point extension line and dimension line were hidden |
		| 0 | Previous start point arrow, start point extension line and dimension line were displayed or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetHideLongerPart(value)

	def GetHideLongerPart(self) -> int:
		"""
		Indicates whether the dimension item's start point arrow, start point extension line and dimension line are hidden.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Start point arrow, start point extension line and dimension line are hidden |
		| 0 | Start point arrow, start point extension line and dimension line are displayed or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetHideLongerPart()

	def SetSuffixSizeFactor(self, value:float) -> float:
		"""
		Sets the dimension item's text suffix size factor.

		:param value: Text suffix size factor to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous assigned dimension text suffix size factor |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetSuffixSizeFactor(value)

	def GetSuffixSizeFactor(self) -> float:
		"""
		Gets the dimension item's text suffix size factor.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Dimension text suffix size factor |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetSuffixSizeFactor()

	def SetDisplayAttribute(self, attnam:str) -> int:
		"""
		Sets the user-defined name of the dimension item's display attribute.

		:param attnam: Attribute name to display
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Attribute name assigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetDisplayAttribute(attnam)

	def GetDisplayAttribute(self) -> str:
		"""
		Gets the user-defined name of the dimension item's display attribute.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Display attribute's user-defined name |
		| "&lt;Empty&gt;" | No attribute is assigned or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetDisplayAttribute()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the dimension item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the dimension item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.DeleteAttribute(name)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the dimension item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the dimension item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the dimension item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetAttributeValue(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the dimension item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.HasAttribute(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the dimension item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.SetAttributeValue(name, value)

	def SetExtensionLineOffset(self, value:float) -> float:
		"""
		Sets the distance between the dimension item's extension lines and the start and end points.

		:param value: Distance between the dimension item's extension lines and the start and end points to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous distance between the dimension item's extension lines and the start and end points |
		| 0.0 | Previous distance between the dimension item's extension lines and the start and end points or an error occurred |

		Available since E3.series TLB-Versions: 11.80
		"""
		return self._obj.SetExtensionLineOffset(value)

	def GetExtensionLineOffset(self) -> float:
		"""
		Gets the distance between the dimension item's extension lines and the start and end points.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Distance between the extension lines and the points |
		| 0.0 | No distance between the extension lines and the points or an error occurred |

		Available since E3.series TLB-Versions: 11.80
		"""
		return self._obj.GetExtensionLineOffset()

	def CreateEx(self, dimtyp:int, sheet:int, x:list[float], y:list[float], flags:int=0) -> int:
		"""
		Adds a new running dimension item onto a formboard or panel sheet of the project.

		:param dimtyp: Type of dimension
		:type int: int
		:param sheet: Identifier of the sheet to place the dimension item on
		:type int: int
		:param x: Placement positions on the x-axis
		:type list[float]: list[float]
		:param y: Placement positions on the y-axis
		:type list[float]: list[float]
		:param flags: Not used, defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new dimension item |
		| 0 | Error occurred |
		| -1 | dimtyp is invalid |
		| -2 | sheet is invalid |
		| -3 | Invalid start point |
		| -4 | Invalid placement position |
		| -5 | Sheet is locked                        Available since v2020-21.42, v2021-22.30 and v2022-23.11 |
		| -6 | E³.series is running under a E³.view or E³.viewPlus license                       Available since v2020-21.42, v2021-22.30 and v2022-23.11 |

		Available since E3.series TLB-Versions: 15.82
		"""
		x = [0.] + x
		y = [0.] + y
		return self._obj.CreateEx(dimtyp, sheet, x, y, flags)

	def IsRunningDimension(self) -> int:
		"""
		Indicates if the dimension item is a running dimension.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Dimension item is a running dimension |
		| 0 | Dimension item is not a running dimension or an error occurred |

		Available since E3.series TLB-Versions: 15.82
		"""
		return self._obj.IsRunningDimension()

	def IsPartOfDimension(self) -> int:
		"""
		Indicates if the dimension item is part of a running dimension.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Dimension item is part of a running dimension |
		| 0 | Dimension item is not part of a running dimension or an error occurred |

		Available since E3.series TLB-Versions: 15.82
		"""
		return self._obj.IsPartOfDimension()

	def GetPartIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the part dimensions of the dimension item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of dimension item identifiers |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No dimension part items or an error occurred |

		Available since E3.series TLB-Versions: 15.82
		"""
		dummy=0
		ret, ids = self._obj.GetPartIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetRunningDimTextRotation(self, value:int) -> int:
		"""
		Sets the dimension item's text rotation status.

		:param value: Text rotation status value to apply. If 1, text is rotated. If 0, text is not rotated
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Text rotation status is assigned or an error occurred |
		| -1 | Invalid dimension type |

		Available since E3.series TLB-Versions: 15.82
		"""
		return self._obj.SetRunningDimTextRotation(value)

	def GetRunningDimTextRotation(self) -> int:
		"""
		Indicates whether the dimension item's text is rotated.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Dimension text is rotated |
		| 0 | Dimension text is not rotated |
		| -1 | Invalid dimension type |

		Available since E3.series TLB-Versions: 15.82
		"""
		return self._obj.GetRunningDimTextRotation()

	def IsRedlined(self) -> int:
		"""
		Gets the dimension item's redlined status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Redlined status is on |
		| 0 | Redlined status is off |

		Available since E3.series TLB-Versions: 17.04
		"""
		return self._obj.IsRedlined()

	def SetRedlined(self, onoff:bool) -> int:
		"""
		Sets the dimension item's redlined status.

		:param onoff: Redlined status value to apply. If 1, the redlined status is set to on. If 0, the redlined status in set to off., defaults to TRUE
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous assigned redlined status was on |
		| 0 | Previous assigned redlined status was off or an error occurred |

		Available since E3.series TLB-Versions: 17.04
		"""
		return self._obj.SetRedlined(onoff)

	def GetCenterTextPosition(self) -> int:
		"""
		Gets the value indicating whether the dimension's text position is centered.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text position is centered |
		| 0 | Text position is not centered or an error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetCenterTextPosition()

	def SetCenterTextPosition(self, value:int) -> int:
		"""
		Sets the value indicating whether the dimension's text position is centered.

		:param value: Center text position value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Center text position value assigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.SetCenterTextPosition(value)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current dimension item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current  dimension item |
		| "&lt;Empty&gt;" | No dimension item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a dimension as the current item.

		:param gid: Global identifier value of a dimension item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current dimension item |
		| "&lt;Empty&gt;" | No dimension item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- IDllInterface--------------------
class Dll:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Dll. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def Load(self, name:str) -> int:
		"""


		:param name: 
		:type str: str

		:return:
		Type: int

		Available since E3.series TLB-Versions: 6.00
		"""
		return self._obj.Load(name)

	def Call(self, method:str, item1:str=DLLDEFAULTVALUE, item2:str=DLLDEFAULTVALUE, item3:str=DLLDEFAULTVALUE, item4:str=DLLDEFAULTVALUE, item5:str=DLLDEFAULTVALUE) -> int:
		"""


		:param method: 
		:type str: str
		:param item1: , defaults to DLLDEFAULTVALUE
		:type str: str
		:param item2: , defaults to DLLDEFAULTVALUE
		:type str: str
		:param item3: , defaults to DLLDEFAULTVALUE
		:type str: str
		:param item4: , defaults to DLLDEFAULTVALUE
		:type str: str
		:param item5: , defaults to DLLDEFAULTVALUE
		:type str: str

		:return:
		Type: int

		Available since E3.series TLB-Versions: 6.00
		"""
		return self._obj.Call(method, item1, item2, item3, item4, item5)

	def Unload(self) -> int:
		"""


		:return:
		Type: int

		Available since E3.series TLB-Versions: 6.00
		"""
		return self._obj.Unload()

# -------------------- IGroupInterface--------------------
class Group:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Group. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current group item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current group item identifier |
		| 0 | No group item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a group item as the current item.

		:param id: Unique value identifying a group item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current group item identifier |
		| 0 | No group item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def Create(self, ids:list[int], name:str="") -> int:
		"""
		Creates a new group on a sheet of the project.

		:param ids: Identifiers of the items to form the contents of the group passed into the function
		:type list[int]: list[int]
		:param name: Name of the group. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new group item |
		| 0 | Error occurred |
		| -1 | An item in ids is offline |
		| -2 | Sheet is read-only |
		| -3 | An item in ids is already in a group |
		| -4 | Items in ids are located on different sheets |
		| -5 | Items in ids include sheet items and non-sheet items |
		| -6 | ids contains a mix of items on and off a grouped sheet |
		| -10 | name value exceeds maximum length, Available since v2018-19.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.Create(ids, name)
		return ret[0]

	def Delete(self) -> tuple[int, tuple[int,...]]:
		"""
		Deletes the group item from the project.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of Identifiers of the items that formed the contents of the group passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.Delete(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetItems(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the items contained in the group item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of contained items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of item identifiers in ids |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetItems(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddItems(self, ids:list[int]) -> int:
		"""
		Adds items to the contents of the group item.

		:param ids: Array of identifiers of items to add passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Items are added to the group item's contents |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.AddItems(ids)
		return ret[0]

	def RemoveItems(self, ids:list[int]) -> int:
		"""
		Removes items from the group item.

		:param ids: Array of identifiers of items to remove passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Items are removed from the group item's content |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.RemoveItems(ids)
		return ret[0]

	def GetGroupId(self, id:int) -> int:
		"""
		Gets the identifier of a group item containing the specified item.

		:param id: Identifier of an item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Group item identifier |
		| 0 | Item is not part of a group's content or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGroupId(id)

	def GetLocation(self) -> tuple[int, float, float, float, str, str, str]:
		"""
		Gets the location within the project of the placed group item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis passed out of the function |
		| 2 | y | float | Placement position on the y-axis passed out of the function |
		| 3 | z | float | Not used and passed out of the function |
		| 4 | grid | str | Reference description of the sheet and grid location passed out of the function |
		| 5 | column_value | str | Grid column value passed out of the function |
		| 6 | row_value | str | Grid row value passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the sheet containing the group |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetLocation(dummy, dummy, dummy, dummy, dummy, dummy)

	def Place(self, shtid:int, x:float, y:float, z:float, rotation:float) -> int:
		"""
		Places or moves a group item on a sheet.

		:param shtid: Identifier of the sheet to place the group item on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param z: Not used
		:type float: float
		:param rotation: Rotation value in degrees to apply
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;7 | Identifier of the group item |
		| 1 | Invalid group item |
		| 2 | Group item could not be moved |
		| 3 | Sheet groups could not be moved |
		| 4 | Sheet is hidden |
		| 5 | Unplaced group item could not be placed |
		| 6 | Required group could not be checked out by MU server |
		| 7 | Sheet group could not be placed |
		| -990120 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Place(shtid, x, y, z, rotation)

	def DeleteContents(self) -> int:
		"""
		Deletes the group item and its contents from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Group item and its contents were deleted or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteContents()

	def GetName(self) -> str:
		"""
		Gets the name of the group item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Group item name value |
		| "&lt;Empty&gt;" | Group item has no name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the name of the group item.

		:param name: Name of the group item
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | name was assigned to the group item |
		| -1 | Group item was offline |
		| -2 | Sheet is read-only |
		| -3 | Group item is unplaced |
		| -4 | Group subcircuit does not exist |
		| -5 | No group item set |
		| -10 | name value exceeds maximum lengthAvailable since v2018-19.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the group item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeIds(self, name:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the group item.

		:param name: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, name)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the group item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the group item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the group item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def GetPartName(self) -> str:
		"""
		Gets the file name of the group item's subcircuit.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Group item's subcircuit file name |
		| "&lt;Empty&gt;" | Group item has no subcircuit or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.GetPartName()

	def SetPartName(self, name:str) -> int:
		"""
		Sets the group item's subcircuit.

		:param name: File name of the group item's subcircuit
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | name was assigned as the group item's subcircuit |
		| -1 | Group item was offline |
		| -2 | Sheet is read-only |
		| -3 | Group item is unplaced |
		| -4 | Group subcircuit does not exist |
		| -5 | No group item set |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.SetPartName(name)

	def IsPart(self) -> int:
		"""
		Indicates if the group item defines a subcircuit file.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Group item defines a subcircuit file |
		| 0 | Group item does not define a subcircuit file or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.IsPart()

	def IsSubCircuit(self) -> int:
		"""
		Indicates if the group item defines a database subcircuit.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Group item defines a database subcircuit |
		| 0 | Group item does not define a database subcircuit or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.IsSubCircuit()

	def UpdatePart(self) -> int:
		"""
		Updates the group item with the assigned subcircuit.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | Group item is updated however duplicate part identifier values exist, Available since v2018-19.46, v2019-20.28 and v2020-21.12 |
		| 1 | Group item is updated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.UpdatePart()

	def Unplace(self) -> int:
		"""
		Removes the group item from its sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Group was unplaced |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		return self._obj.Unplace()

	def DeleteUnplaced(self) -> int:
		"""
		Deletes the unplaced group item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Group item deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		return self._obj.DeleteUnplaced()

	def IsUnplaced(self) -> int:
		"""
		Indicates if the group item is unplaced.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Group item is unplaced |
		| 0 | Group item is placed or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		return self._obj.IsUnplaced()

	def PlaceInteractively(self) -> int:
		"""
		Attaches the group item to the mouse cursor so it can be placed manually.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Group item is attached to the mouse cursor for placement |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		return self._obj.PlaceInteractively()

	def UpdateDrawingForProjectGeneration(self, flags:int, substitutes:list[tuple[str,str]], allowedTexttypes:list[str]=pythoncom.Empty, allowedAttributenames:list[str]=pythoncom.Empty, resultArray:tuple[typing.Any,...]=0) -> int:
		"""
		Replaces the group item's contents name, text and attribute values.

		:param flags: Replacement criteria
		:type int: int
		:param substitutes: Array of placeholder strings and their replacement strings
		:type list[tuple[str,str]]: list[tuple[str,str]]
		:param allowedTexttypes: Array of. Text Types. for which the replacement is permitted.  (No String Array passed into the function), defaults to pythoncom.Empty
		:type list[str]: list[str]
		:param allowedAttributenames: Array of. Attributes. for which the replacement is permitted.  (No String Array passed into the function), defaults to pythoncom.Empty
		:type list[str]: list[str]
		:param resultArray: Array of errors resulting from the update, defaults to 0
		:type tuple[typing.Any,...]: tuple[typing.Any,...]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 6 | Drawing updated however it contains duplicate part identifier values, Available since v2019-20.28 and v2020-21.12 |
		| 5 | Drawing updated however the XML project structure is missing or differs and not everything could be replaced, resultArray holds the unreplaced items |
		| 4 | Drawing updated however the XML project structure is missing or differs |
		| 2 | Drawing updated but not everything could be replaced, resultArray holds the unreplaced items |
		| 1 | Drawing updated |
		| -1 | No project open, no file found or incorrect version of subcircuit |
		| -2 | Invalid text types defined in allowTexttypesresultArray holds the invalid text types |
		| -3 | Invalid attribute names defined in allowedAttributenamesresultArray holds the invalid attribute names |
		| -4 | substitutes array is invalid |
		| -5 | substitutes contains invalid strings |
		| -6 | Error occurred |
		| -7 | Group cannot be updated |
		| -8 | Group is already defined as a subcircuit in the database |

		Available since E3.series TLB-Versions: 20.00
		"""
		substitutes = [("","")] + substitutes
		return self._obj.UpdateDrawingForProjectGeneration(flags, substitutes, allowedTexttypes, allowedAttributenames, resultArray)

	def GetGroupType(self) -> int:
		"""
		Gets a value representing the type of the group  item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type value of the group item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 22.41, 23.50
		"""
		return self._obj.GetGroupType()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current group item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current group item |
		| "&lt;Empty&gt;" | No group item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a group item as the current item.

		:param gid: Global identifier value of a group item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current group item |
		| "&lt;Empty&gt;" | No group item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetAnyIds(self, flags:int) -> tuple[int, dict[int,tuple[int,...]]]:
		"""
		Gets identifiers of the items contained in the group item.

		:param flags: Item type filter options
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | anyIds | dict[int,tuple[int,...]] | Dictionary of [. Integer. ]. key. /[. Integer Array. ]. value. pairs representing items in the group. key is the item type. value is the array of item identifiers |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of item types in anyIds |
		| 0 | No items found in the group |
		| -1 | No project open |
		| -2 | No group item set |

		Available since E3.series TLB-Versions: 23.00
		"""
		dummy=0
		ret, anyIds = self._obj.GetAnyIds(flags, dummy)
		anyIds = _variant_to_dict(anyIds)
		for i0 in anyIds.keys():
			anyIds[i0] = anyIds[i0][1:] if type(anyIds[i0]) == tuple and len(anyIds[i0]) > 0 else tuple()
		return ret, anyIds

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current group item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current group item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 26.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a group item as the current item.

		:param guid: Globally unique identifier value of a group item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current group item |
		| "&lt;Empty&gt;" | No group item |

		Available since E3.series TLB-Versions: 26.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- IFunctionalUnitInterface--------------------
class FunctionalUnit:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize FunctionalUnit. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current functional unit item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current functional unit item identifier |
		| 0 | No functional unit item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a functional unit as the current item.

		:param id: Unique value identifying a functional unit item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current functional unit item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def Create(self, fdbID:int, name:str, symnam:str, symver:str) -> int:
		"""
		Creates a new functional unit.

		:param fdbID: Identifier of a functional block item
		:type int: int
		:param name: Name of the functional unit
		:type str: str
		:param symnam: Functional unit symbol name
		:type str: str
		:param symver: Functional unit symbol version
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new functional unit item |
		| 0 | No project open |
		| -1 | No E³.topology or E³.functionaldesign license available |
		| -2 | fdbId is not a valid block item identifier |
		| -3 | fdbId is not a valid functional block item identifier |
		| -4 | Dynamic functional unit is already available for the fdbId functional block item |
		| -5 | Symbol does not have a functional unit |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(fdbID, name, symnam, symver)

	def Delete(self) -> int:
		"""
		Deletes the functional unit item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Functional unit deleted or an error occurred |
		| -1 | No E³.topology or E³.functionaldesign license available |
		| -2 | Functional unit is not dynamic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def GetFunctionalPortIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the functional unit item's functional ports.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of functional port identifiers  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of functional port identifiers in ids |
		| 0 | No functional ports or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetFunctionalPortIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsDynamic(self) -> int:
		"""
		Indicates if the functional unit item is dynamic.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Functional unit is dynamic |
		| 0 | Functional unit is not dynamic or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsDynamic()

	def GetName(self) -> str:
		"""
		Gets the name of the functional unit item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Functional unit item name value |
		| "&lt;Empty&gt;" | Functional unit item has no name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the functional unit item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the functional unit item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the functional unit item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the functional unit item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the functional unit item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the functional unit item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.HasAttribute(name)

	def SetName(self, name:str) -> int:
		"""
		Sets the functional unit item's name.

		:param name: New functional unit name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New functional unit name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetName(name)

	def GetDeviceId(self) -> int:
		"""
		Gets the identifier of the device the functional unit is assigned to.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Device identifier |
		| 0 | No device assignment or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetDeviceId()

	def GetSchemaSymbolId(self) -> int:
		"""
		Gets the identifier of the symbol the functional unit is assigned to if no device is assigned.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Symbol identifier |
		| 0 | No schema symbol assigned or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetSchemaSymbolId()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current functional unit item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current functional unit item |
		| "&lt;Empty&gt;" | No functional unit item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a functional unit as the current item.

		:param gid: Global identifier value of a functional unit item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current functional unit item |
		| "&lt;Empty&gt;" | No functional unit item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- IFunctionalPortInterface--------------------
class FunctionalPort:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize FunctionalPort. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current functional port item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current functional port item identifier |
		| 0 | No functional port item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a functional port as the current item.

		:param id: Unique value identifying a functional port item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current functional port item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def Create(self, fuId:int, name:str) -> int:
		"""
		Creates a new functional port and adds it to a functional unit.

		:param fuId: Identifier of a functional unit item
		:type int: int
		:param name: Name of the functional port
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new functional unit item |
		| 0 | No project open |
		| -1 | No E³.topology or E³.functionaldesign license available |
		| -2 | fuId is not a valid functional unit item identifier |
		| -3 | fdbId is not a dynamic functional unit item identifier |
		| -4 | Port could not be added to the functional unit |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(fuId, name)

	def Delete(self) -> int:
		"""
		Deletes the functional port item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Functional port deleted or an error occurred |
		| -1 | No E³.topology or E³.functionaldesign license available |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def SetSignalName(self, name:str) -> int:
		"""
		Sets the functional port item's signal name value.

		:param name: New functional port signal name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Functional port item's signal name value is supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetSignalName(name)

	def GetSignalName(self) -> str:
		"""
		Gets the functional port item's signal name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Functional port item's signal name value is supplied |
		| "&lt;Empty&gt;" | No signal name value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSignalName()

	def SetConnectorName(self, name:str) -> str:
		"""
		Sets the connector name of the functional port item.

		:param name: New functional port item connector name value
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Previous functional port item connector name value |
		| "&lt;Empty&gt;" | No previous functional port item connector or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetConnectorName(name)

	def GetConnectorName(self) -> str:
		"""
		Gets the connector name of the functional port item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Functional port item connector name value |
		| "&lt;Empty&gt;" | Function port has no connector or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectorName()

	def SetPinName(self, name:str) -> str:
		"""
		Sets the pin name of the functional port item.

		:param name: New functional port item pin name value
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Previous functional port item pin name value |
		| "&lt;Empty&gt;" | No previous functional port item pin name value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPinName(name)

	def GetPinName(self) -> str:
		"""
		Gets the pin name of the functional port item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Functional port item pin name value |
		| "&lt;Empty&gt;" | No pin name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinName()

	def SetConnectorPinID(self, id:int) -> int:
		"""
		Sets the connector pin of the functional port's block pin symbol.

		:param id: Connector pin identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connector pin value applied |
		| -1 | No E³.topology or E³.functionaldesign license available |
		| -2 | id is invalid |
		| -3 | Another functional port is already assigned to the functional block |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetConnectorPinID(id)

	def GetConnectorPinID(self) -> int:
		"""
		Gets the identifier of the connector pin of the functional port's block pin symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Connector pin identifier |
		| 0 | No connector pin item found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectorPinID()

	def GetName(self) -> str:
		"""
		Gets the name of the functional port item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Functional port item name value |
		| "&lt;Empty&gt;" | Functional port item has no name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def GetNodeID(self) -> int:
		"""
		Gets the identifier of the node of the functional port's block pin symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Node identifier |
		| 0 | No node item found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetNodeID()

	def SetNodeID(self, id:int) -> int:
		"""
		Assigns the functional port to a block pin symbol.

		:param id: Node identifier of a block pin symbol
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | functional port assigned to the block pin symbol |
		| -1 | No E³.topology or E³.functionaldesign license available |
		| -2 | id is invalid |
		| -3 | Block pin symbol node does not belong to the functional block assigned to the functional port |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetNodeID(id)

	def GetFunctionalUnitId(self) -> int:
		"""
		Gets the identifier of the functional unit the current functional port item belongs to.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Functional unit identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetFunctionalUnitId()

	def SetPinID(self, id:int) -> int:
		"""


		:param id: 
		:type int: int

		:return:
		Type: int

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetPinID(id)

	def GetPinID(self) -> int:
		"""


		:return:
		Type: int

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetPinID()

	def SetName(self, name:str) -> int:
		"""
		Sets the functional port item's name.

		:param name: New functional port name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | New functional port name applied |
		| -1 | No project open or no functional port item set |
		| -2 | No E³.topology or E³.functionaldesign license available |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetName(name)

	def SetPortType(self, _type:int) -> int:
		"""
		Sets the port type of the current functional port item.

		:param _type: Port type value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Port type value applied |
		| -1 | No project open or no functional port item set |
		| -2 | No E³.topology or E³.functionaldesign license available |
		| -3 | type is invalid |
		| -4 | Port belongs to the pin of a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetPortType(_type)

	def GetPortType(self) -> int:
		"""
		Gets the port type of the current functional port item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Port type value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetPortType()

	def SetSignalEquiv(self, signalequiv:int) -> int:
		"""
		Sets the signal equivalence of the functional port.

		:param signalequiv: New signal equivalence value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Signal equivalence value applied |
		| -1 | No project open or no functional port item set |
		| -2 | No E³.topology or E³.functionaldesign license available |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetSignalEquiv(signalequiv)

	def GetSignalEquiv(self) -> int:
		"""
		Gets the signal equivalence of the functional port.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Signal equivalence value |
		| 0 | No signal equivalence or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetSignalEquiv()

	def SetUserDefined(self, _type:int=1) -> int:
		"""
		Sets the user defined status of the current functional port item.

		:param _type: User defined status value to apply. If 1, the port is set to user defined. If 0, the port is set to not user defined., defaults to 1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | User defined status value applied |
		| -1 | No project open or no functional port item set |
		| -2 | No E³.functionaldesign license available |
		| -3 | Port belongs to the pin of a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetUserDefined(_type)

	def GetUserDefined(self) -> int:
		"""
		Indicates if the functional port item is user defined.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Functional port item is user defined |
		| 0 | Functional port item is not user defined or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetUserDefined()

	def GetConnectedPorts(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the functional ports connected to the current functional port item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of functional port identifiers  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of functional port identifiers in ids |
		| 0 | No connected functional ports or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.GetConnectedPorts(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSignalEqvPorts(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the functional ports with the signal equivalence of the current functional port item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of functional port identifiers  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of functional port identifiers in ids |
		| 0 | No signal equivalence functional ports or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.GetSignalEqvPorts(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTranslatedSignalName(self) -> str:
		"""
		Gets the functional port item's translated signal name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Functional port item's translated signal name value is supplied |
		| "&lt;Empty&gt;" | No signal name value or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetTranslatedSignalName()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current functional port item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current  functional port item |
		| "&lt;Empty&gt;" | No functional port item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a functional port as the current item.

		:param gid: Global identifier value of a functional port item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current functional port item |
		| "&lt;Empty&gt;" | No functional port item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- IConnectLineInterface--------------------
class ConnectLine:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize ConnectLine. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current connect line item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current connect line item identifier |
		| 0 | No connect line item or an error occurred |

		Available since E3.series TLB-Versions: 9.22
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a connect line as the current item.

		:param id: Unique value identifying a connect line item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current connect line item identifier |
		| 0 | No current connect line item or an error occurred |

		Available since E3.series TLB-Versions: 9.22
		"""
		return self._obj.SetId(id)

	def GetCoordinates(self) -> tuple[int, tuple[float,...], tuple[float,...], tuple[float,...], tuple[int,...]]:
		"""
		Gets the coordinates of the connect lines.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xarr | tuple[float,...] | Array of connect line positions on the x-axis  passed out of the function |
		| 2 | yarr | tuple[float,...] | Array of connect line positions on the y-axis  passed out of the function |
		| 3 | zarr | tuple[float,...] | Not used. Array of 0.0 values passed out of the function |
		| 4 | PointTypArr | tuple[int,...] | Array of values indicating if the position represents a spline passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of values within the arrays |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.22
		"""
		dummy=0
		ret, xarr, yarr, zarr, PointTypArr = self._obj.GetCoordinates(dummy, dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		zarr = zarr[1:] if type(zarr) == tuple and len(zarr) > 0 else tuple()
		PointTypArr = PointTypArr[1:] if type(PointTypArr) == tuple and len(PointTypArr) > 0 else tuple()
		return ret, xarr, yarr, zarr, PointTypArr

	def GetProtectionSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the cable protection symbols assigned to the connection item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of cable protection symbol identifiers  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No cable protection symbol identifiers or an error occurred |

		Available since E3.series TLB-Versions: 9.22
		"""
		dummy=0
		ret, ids = self._obj.GetProtectionSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddProtectionSymbolId(self, id:int) -> int:
		"""
		Adds a cable protection symbol to the connect line item.

		:param id: Device or cable protection symbol identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Cable protection symbol is placed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.22
		"""
		return self._obj.AddProtectionSymbolId(id)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current connect line item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current connect line item |
		| "&lt;Empty&gt;" | No connect line item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a connect line as the current item.

		:param gid: Global identifier value of a connect line item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current connect line item |
		| "&lt;Empty&gt;" | No current component item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- ISignalClassInterface--------------------
class SignalClass:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize SignalClass. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current signal class item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current signal class item identifier |
		| 0 | No signal class item |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a signal class item as the current item.

		:param id: Unique value identifying a signal class item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current signal class item identifier |
		| 0 | No signal class item |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetId(id)

	def Create(self, name:str) -> int:
		"""
		Creates a signal class item.

		:param name: New signal class name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the signal class item |
		| 0 | Error occurred |
		| -1 | name is invalid |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Create(name)

	def Delete(self) -> int:
		"""
		Deletes the current signal class from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred, Available since v2016-17.42 and v2017-18.31 |
		| 0 | Signal class item was deleted |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Delete()

	def AddSignalId(self, id:int) -> int:
		"""
		Adds a signal to the current signal class item.

		:param id: Signal identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Signal added to signal class |
		| -1..-3 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.AddSignalId(id)

	def RemoveSignalId(self, id:int) -> int:
		"""
		Removes a signal from the current signal class item.

		:param id: Signal identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred, Available since v2016-17.42 and v2017-18.31 |
		| 0 | Signal removed from signal class |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.RemoveSignalId(id)

	def GetSignalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the signals within the signal class item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of signals passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No signal identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.GetSignalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetName(self) -> str:
		"""
		Gets the signal class item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Signal class name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the signal class item's name.

		:param name: New name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signal class name applied |
		| 0 | Signal class name applied or an error occurred |
		| -1 | name is invalid |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetName(name)

	def Search(self, name:str) -> int:
		"""
		Searches for a signal class item.

		:param name: Name of the signal class item to search for
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the found signal class item |
		| 0 | No signal class found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Search(name)

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the signal class item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the signal class item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the signal class item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the signal class item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the signal class item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the signal class item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the signal class item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.HasAttribute(name)

	def DisplayaAttributeValueAt(self, name:str, sheetid:int, x:float, y:float) -> int:
		"""
		Displays an attribute value from the signal class item at a specific position.

		:param name: Name of the attribute
		:type str: str
		:param sheetid: Sheet identifier to display the attribute value on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text item identifier displaying the attribute value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.DisplayaAttributeValueAt(name, sheetid, x, y)

	def SetAttributeVisibility(self, name:str, onoff:int) -> int:
		"""
		Sets the visibility status of all text items representing the signal class item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param onoff: Indicates whether the text items' visibility status should be shown or hidden. If > 0, the text items are shown. If 0, the text items are hidden
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items changed |
		| 0 | No text items found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetAttributeVisibility(name, onoff)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the signal class item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the signal class item |
		| "&lt;Empty&gt;" | No signal class item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a signal class item as the current item.

		:param gid: Global identifier value of a signal class item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current signal class item |
		| "&lt;Empty&gt;" | No signal class item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current signal class item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current signal class item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a signal class item as the current item.

		:param guid: Globally unique identifier value of a signal class item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current signal class item |
		| "&lt;Empty&gt;" | No signal class item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

# -------------------- IAttributeDefinitionInterface--------------------
class AttributeDefinition:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize AttributeDefinition. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current attribute definition item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current attribute definition item identifier |
		| 0 | No attribute definition item or an error occurred |

		Available since E3.series TLB-Versions: 15.31
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets an attribute definition as the current item.

		:param id: Unique value identifying an attribute definition item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current attribute definition item identifier |
		| 0 | No current attribute item or an error occurred |

		Available since E3.series TLB-Versions: 15.31
		"""
		return self._obj.SetId(id)

	def Search(self, name:str) -> int:
		"""
		Gets the identifier of the attribute definition.

		:param name: Attribute definition name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the found attribute definition |
		| 0 | No attribute definition found or an error occurred |

		Available since E3.series TLB-Versions: 15.31
		"""
		return self._obj.Search(name)

	def Get(self) -> tuple[int, tuple[tuple[str,str],...]]:
		"""
		Gets the properties of the attribute definition.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | attributeDefinition | tuple[tuple[str,str],...] | Array of attribute properties |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of elements in attributeDefinition |
		| -1 | No project open |
		| -2 | No attribute definition item set |

		Available since E3.series TLB-Versions: 15.31
		"""
		dummy=0
		ret, attributeDefinition = self._obj.Get(dummy)
		attributeDefinition = attributeDefinition[1:] if type(attributeDefinition) == tuple and len(attributeDefinition) > 0 else tuple()
		attributeDefinition = tuple( i0[1:] if type(i0) == tuple and len(i0) > 0 else tuple() for i0 in attributeDefinition)
		return ret, attributeDefinition

	def Set(self, attributeDefinition:list[tuple[str,str]]) -> int:
		"""
		Sets the properties of the attribute definition.

		:param attributeDefinition: Array of attribute properties **Available enum types:** e3series.types.AD_Direction, AD_Owner, AD_Ratio, AD_Type, AD_UniqueValue.
		:type list[tuple[str,str]]: list[tuple[str,str]]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Attribute properties assigned |
		| -1 | No project open |
		| -2 | No attribute definition item set |
		| -3 | Internal error |
		| -101 | Invalid value for "Owner" property |
		| -102 | Invalid value for "Type" property |
		| -103 | Invalid value for "Single instance" property |
		| -104 | Invalid value for "Unique value" property |
		| -105 | Invalid value for "Format" property |
		| -106 | Invalid value for "Size" property |
		| -107 | Invalid value for "Pos x" property |
		| -108 | Invalid value for "Pos y" property |
		| -109 | Invalid value for "Colour" property |
		| -110 | Invalid value for "Ratio" property |
		| -111 | Invalid value for "Direction" property |
		| -112 | Invalid value for "Level" property |
		| -113 | Invalid value for "Visible" property |
		| -114 | Invalid value for "Must exist" property |
		| -115 | Invalid value for "Changeable by script only" property |
		| -116 | Invalid value for "Default value" property |
		| -117 | Invalid value for "List of values" property |
		| -118 | Invalid value for "Changeable when owner is locked" property |
		| -119 | Invalid value for "Allow change of lock behavior" property |
		| -202 | "Type" property exists multiple times |
		| -203 | "Single instance" property exists multiple times |
		| -204 | "Unique value" property exists multiple times |
		| -205 | "Format" property exists multiple times |
		| -206 | "Size" property exists multiple times |
		| -207 | "Pos x" property exists multiple times |
		| -208 | "Pos y" property exists multiple times |
		| -209 | "Colour" property exists multiple times |
		| -210 | "Ratio" property exists multiple times |
		| -211 | "Direction" property exists multiple times |
		| -212 | "Level" property exists multiple times |
		| -213 | "Visible" property exists multiple times |
		| -214 | "Must exist" property exists multiple times |
		| -215 | "Changeable by script only" property exists multiple times |
		| -216 | "Default value" property exists multiple times |
		| -217 | "List of values" property exists multiple times |
		| -218 | "Changeable when owner is locked" property exists multiple times |
		| -219 | "Allow change of lock behavior" property exists multiple times |

		Available since E3.series TLB-Versions: 15.31
		"""
		attributeDefinition = [("","")] + attributeDefinition
		attributeDefinition = [tuple((None,) + i0) for i0 in attributeDefinition]
		return self._obj.Set(attributeDefinition)

	def GetFromDatabase(self) -> tuple[int, dict[str,tuple[tuple[str,str],...]]]:
		"""
		Gets the attribute definitions with all properties from the defined database.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | attributeDefinitions | dict[str,tuple[tuple[str,str],...]] | Dictionary of attribute definitions |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of elements in attributeDefinitions |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 15.31
		"""
		dummy=0
		ret, attributeDefinitions = self._obj.GetFromDatabase(dummy)
		attributeDefinitions = _variant_to_dict(attributeDefinitions)
		for i0 in attributeDefinitions.keys():
			attributeDefinitions[i0] = attributeDefinitions[i0][1:] if type(attributeDefinitions[i0]) == tuple and len(attributeDefinitions[i0]) > 0 else tuple()
			attributeDefinitions[i0] = tuple( i1[1:] if type(i1) == tuple and len(i1) > 0 else tuple() for i1 in attributeDefinitions[i0])
		return ret, attributeDefinitions

	def GetInternalName(self) -> str:
		"""
		Gets the attribute definition's internal name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Attribute definition's internal name |
		| "&lt;Empty&gt;" | Unable to supply the internal name |

		Available since E3.series TLB-Versions: 15.31
		"""
		return self._obj.GetInternalName()

	def GetName(self, languageId:int=0) -> str:
		"""
		Gets the attribute definition's language dependent name.

		:param languageId: Identifier value of the language, defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Attribute definition's translated name |
		| "&lt;Empty&gt;" | Unable to supply the name |

		Available since E3.series TLB-Versions: 15.31
		"""
		return self._obj.GetName(languageId)

	def SetName(self, languageId:int, newName:str) -> int:
		"""
		Sets the attribute definition's language dependent name.

		:param languageId: Id value of the language
		:type int: int
		:param newName: Attribute definition's new name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Name successfully changed |
		| -1 | Internal error |
		| -2 | languageId value is invalid |
		| -3 | newName value exceeds the maximum length |
		| -4 | newName value already exists within the language of another attribute definition |

		Available since E3.series TLB-Versions: 15.31
		"""
		return self._obj.SetName(languageId, newName)

	def Delete(self) -> int:
		"""
		Deletes the attribute definition from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Attribute definition deleted |
		| -1 | No project open |
		| -2 | Attribute definition not set |
		| -3 | Attribute definition in use |
		| -4 | Internal error |

		Available since E3.series TLB-Versions: 15.31
		"""
		return self._obj.Delete()

	def Create(self, name:str, attributeDefinition:list[tuple[str,str]]) -> int:
		"""
		Gets the attribute definition's language dependent name.

		:param name: Attribute name
		:type str: str
		:param attributeDefinition: Array of attribute properties **Available enum types:** e3series.types.AD_Direction, AD_Owner, AD_Ratio, AD_Type, AD_UniqueValue.
		:type list[tuple[str,str]]: list[tuple[str,str]]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute definition |
		| -1 | No project open |
		| -2 | No attribute definition item set |
		| -3 | Internal error |
		| -4 | name contains invalid characters |
		| -5 | name exceeds maximum length |
		| -101 | Invalid value for "Owner" property |
		| -102 | Invalid value for "Type" property |
		| -103 | Invalid value for "Single instance" property |
		| -104 | Invalid value for "Unique value" property |
		| -105 | Invalid value for "Format" property |
		| -106 | Invalid value for "Size" property |
		| -107 | Invalid value for "Pos x" property |
		| -108 | Invalid value for "Pos y" property |
		| -109 | Invalid value for "Colour" property |
		| -110 | Invalid value for "Ratio" property |
		| -111 | Invalid value for "Direction" property |
		| -112 | Invalid value for "Level" property |
		| -113 | Invalid value for "Visible" property |
		| -114 | Invalid value for "Must exist" property |
		| -115 | Invalid value for "Changeable by script only" property |
		| -116 | Invalid value for "Default value" property |
		| -117 | Invalid value for "List of values" property |
		| -118 | Invalid value for "Changeable when owner is locked" property |
		| -119 | Invalid value for "Allow change of lock behavior" property |
		| -202 | "Type" property exists multiple times |
		| -203 | "Single instance" property exists multiple times |
		| -204 | "Unique value" property exists multiple times |
		| -205 | "Format" property exists multiple times |
		| -206 | "Size" property exists multiple times |
		| -207 | "Pos x" property exists multiple times |
		| -208 | "Pos y" property exists multiple times |
		| -209 | "Colour" property exists multiple times |
		| -210 | "Ratio" property exists multiple times |
		| -211 | "Direction" property exists multiple times |
		| -212 | "Level" property exists multiple times |
		| -213 | "Visible" property exists multiple times |
		| -214 | "Must exist" property exists multiple times |
		| -215 | "Changeable by script only" property exists multiple times |
		| -216 | "Default value" property exists multiple times |
		| -217 | "List of values" property exists multiple times |
		| -218 | "Changeable when owner is locked" property exists multiple times |
		| -219 | "Allow change of lock behavior" property exists multiple times |

		Available since E3.series TLB-Versions: 15.31
		"""
		attributeDefinition = [("","")] + attributeDefinition
		attributeDefinition = [tuple((None,) + i0) for i0 in attributeDefinition]
		return self._obj.Create(name, attributeDefinition)

	def Update(self, flags:int) -> int:
		"""
		Updates the attribute definition in the project from the database.

		:param flags: Not used
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Identifier of the found attribute definition |
		| -1 | No project open |
		| -2 | Attribute definition not set |
		| -3 | Internal error occurred |

		Available since E3.series TLB-Versions: 15.31
		"""
		return self._obj.Update(flags)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current attribute definition item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current attribute definition item |
		| "&lt;Empty&gt;" | No attribute definition item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets an attribute definition as the current item.

		:param gid: Global identifier value of an attribute definition item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current attribute definition item |
		| "&lt;Empty&gt;" | No current attribute definition item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetValueListName(self, flags:int=0) -> str:
		"""
		Gets the attribute definition's value list name of possible values.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Attribute definition's value list name of possible values |
		| "&lt;Empty&gt;" | No value list is associated with the attribute definition or an error occurred |

		Available since E3.series TLB-Versions: 26.01, 25.34
		"""
		return self._obj.GetValueListName(flags)

	def GetAttributeListValues(self, attributelistname:str, flags:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets the values from an attribute definition value list.

		:param attributelistname: Name of the attribute definition value list
		:type str: str
		:param flags: Translation option flags., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | values | tuple[str,...] | Array of values contained in the attribute definition value list |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;0 | Number of values in values |
		| 0 | No value list is associated with the attributelistname value |
		| -1 | No project open |
		| -2 | flags is invalid |

		Available since E3.series TLB-Versions: 26.01, 25.34
		"""
		dummy=0
		ret, values = self._obj.GetAttributeListValues(attributelistname, dummy, flags)
		values = values[1:] if type(values) == tuple and len(values) > 0 else tuple()
		return ret, values

# -------------------- IEmbeddedObjectInterface--------------------
class EmbeddedObject:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize EmbeddedObject. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current embedded object item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current embedded object item identifier |
		| 0 | No embedded object item |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets an embedded object as the current item.

		:param id: Unique value identifying an embedded object item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current embedded object item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.SetId(id)

	def Create(self, filename:str, shti:int, x:float, y:float) -> int:
		"""
		Embeds a file's contents onto a sheet of the project.

		:param filename: Path and name of the file to be embedded in the project
		:type str: str
		:param shti: Identifier of the sheet to place the embedded object on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Object is embedded |
		| -2 | No project open |
		| -3 | Transaction pending |
		| -8 | OLE client creation failed |
		| -9 | Open file failed |
		| -12 | shti is invalid |
		| -13 | Sheet is read-only |
		| -14 | Invalid insert position |
		| -15 | No data available |
		| -16 | No image available |
		| -20 | Invalid file type |
		| -21 | 3D view is active |
		| -990120 | Internal error |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.Create(filename, shti, x, y)

	def Delete(self) -> int:
		"""
		Deletes the embedded object item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Embedded object item deleted |
		| -1 | No embedded object item set |
		| -2 | No project open |
		| -5 | Delete operation failed |
		| -11 | Part of read-only sheet |
		| -18 | Process in progress |
		| -990120 | Internal error |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.Delete()

	def Move(self, shti:int, x:float, y:float) -> int:
		"""
		Moves the embedded object item to a new position or sheet.

		:param shti: Sheet to place the embedded object on
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Embedded object is moved |
		| -1 | No embedded object item set |
		| -3 | Transaction pending |
		| -7 | Move operation failed |
		| -11 | Part of read-only sheet |
		| -12 | shti is invalid |
		| -13 | Sheet is read-only |
		| -14 | Invalid insert position |
		| -19 | Not possible to move to another sheet |
		| -990120 | Internal error |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.Move(shti, x, y)

	def Resize(self, width:float, height:float) -> int:
		"""
		Resizes the embedded object item.

		:param width: New width value
		:type float: float
		:param height: New height value
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Embedded object is resized |
		| -1 | No embedded object item set |
		| -3 | Transaction pending |
		| -6 | Resize operation failed |
		| -11 | Part of read-only sheet |
		| -990120 | Internal error |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.Resize(width, height)

	def Open(self) -> int:
		"""
		Opens the embedded object item with external third party software.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Embedded object item is opened externally |
		| -1 | No embedded object item set |
		| -2 | No project open |
		| -3 | Transaction pending |
		| -4 | Open operation failed |
		| -10 | Part of closed sheet |
		| -11 | Part of read-only sheet |
		| -17 | Already open |
		| -990120 | Internal error |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.Open()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current embedded object item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current embedded object item |
		| "&lt;Empty&gt;" | No embedded object item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets an embedded object as the current item.

		:param gid: Global identifier value of an embedded object item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current embedded object item |
		| "&lt;Empty&gt;" | No embedded object item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

# -------------------- IStateInterface--------------------
class State:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize State. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current state item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current state item identifier |
		| 0 | No state item |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a state as the current item.

		:param id: Unique value identifying a state item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current state item identifier |
		| 0 | No state item |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.SetId(id)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current state item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current state item |
		| "0-0-0-0" | No state item |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> int:
		"""
		Sets a state as the current item.

		:param gid: Global identifier value of a state item
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current state item identifier |
		| 0 | No state item |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current state item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current state item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> int:
		"""
		Sets a state as the current item.

		:param guid: Globally unique identifier value of a state item
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current state item |
		| "&lt;Empty&gt;" | No state item |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.SetGUID(guid)

	def GetName(self) -> str:
		"""
		Gets the state item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | State name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetName()

	def GetAttributeIds(self, name:str) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the state item.

		:param name: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, name)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the state item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetAttributeValue(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the state item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.HasAttribute(name)

	def GetOwnerId(self) -> int:
		"""
		Gets the identifier of the state item's owner.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Item identifier of the owner |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetOwnerId()

	def GetOwnerType(self) -> int:
		"""
		Gets a value representing the type of the state item's owner.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type value of the owner |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetOwnerType()

	def GetStateType(self) -> int:
		"""
		Gets a value representing the state item's type.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Type value of the state item |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetStateType()

	def GetOwnerIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the state item's owners.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of owner items |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		dummy=0
		ret, ids = self._obj.GetOwnerIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

# -------------------- IProjectConfiguratorInterface--------------------
class ProjectConfigurator:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize ProjectConfigurator. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def Delete(self, targetId:int, flags:int=0) -> tuple[int, tuple[int, int, str]]:
		"""
		Deletes items from a field item.

		:param targetId: Field item identifier
		:type int: int
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | errorMessages | tuple[int, int, str] | List of items that could not be deleted and the associated error information |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Items are deleted |
		| -1 | No E³.ProjectConfigurator license found |
		| -2 | No E³.series project open |
		| -3 | targetId contains an invalid item identifier value |
		| -4 | targetId contains the identifier of an invalid type of item |
		| -100 | Error occurred |
		| -102 | Field item's sheet is locked |
		| -103 | Field item belongs to an inactive variant or option |

		Available since E3.series TLB-Versions: 26.00
		"""
		dummy=0
		return self._obj.Delete(dummy, targetId, flags)

	def DeleteSheet(self, sheetId:int, flags:int=0) -> tuple[int, tuple[int, int, str]]:
		"""
		Deletes a sheet from the  project.

		:param sheetId: Identifier of sheet item
		:type int: int
		:param flags: Delete option flags., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | errorMessages | tuple[int, int, str] | List of items that could not be deleted and the associated error information |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheet or sheet content is deleted |
		| -1 | No E³.ProjectConfigurator license found |
		| -2 | No E³.series project open |
		| -3 | sheetId contains an invalid identifier value |
		| -4 | sheetId is not a sheet item identifier |
		| -5 | sheetId identifier is an embedded sheet item |
		| -100 | Error occurred |
		| -102 | Sheet is locked |
		| -103 | Sheet belongs to an inactive variant or option |

		Available since E3.series TLB-Versions: 26.00
		"""
		dummy=0
		return self._obj.DeleteSheet(dummy, sheetId, flags)

	def DeleteDevice(self, devId:int, forced:bool, flags:int=0) -> tuple[int, tuple[int, int, str]]:
		"""
		Deletes a device from the project.

		:param devId: Identifier of device item
		:type int: int
		:param forced: If 1, device is deleted even if placed. If 0, device is nor deleted if it is placed.
		:type bool: bool
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | errorMessages | tuple[int, int, str] | List of items that could not be deleted and the associated error information |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device is deleted |
		| -1 | No E³.ProjectConfigurator license found |
		| -2 | No E³.series project open |
		| -3 | devId contains an invalid identifier value |
		| -4 | devId is not a device item identifier |
		| -100 | Error occurred |
		| -103 | Device belongs to an inactive variant or option |
		| -104 | Device is locked |
		| -105 | Device has placed symbols on a sheet |
		| -106 | Wires in cable are in use |
		| -107 | Device is part of a group |
		| -108 | Cable inside the overbraid device is locked |
		| -109 | Device belonging to the block device is locked |
		| -110 | Terminal block of the terminal block device is locked |
		| -111 | Device belonging to the assembly device is locked |

		Available since E3.series TLB-Versions: 26.00
		"""
		dummy=0
		return self._obj.DeleteDevice(dummy, devId, forced, flags)

	def AddAttribute(self, targetId:int, attributeName:str, value:str, objectType1:int, objectType2:int, name:str="", flags:int=0) -> tuple[int, tuple[int, int, str]]:
		"""
		Adds an attribute to an item and items within  if it is a container.

		:param targetId: Identifier of the target item. Target item, and items within the target if it is a container, have the attribute added
		:type int: int
		:param attributeName: Internal name of attribute to add
		:type str: str
		:param value: Value of the attribute to add
		:type str: str
		:param objectType1: Flags values defining item types to add the attribute to. Since v2026-26.10, the flag values only apply if targetId is a field item
		:type int: int
		:param objectType2: Flags values defining item types to add the attribute to. Since v2026-26.10, the flag values only apply if targetId is a field item
		:type int: int
		:param name: Conductor or wire name. Default value is "<Empty>", defaults to ""
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | errorMessages | tuple[int, int, str] | List of items the attribute could not be added to and the associated error information |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Attribute added to items |
		| -1 | No E³.ProjectConfigurator license found |
		| -2 | No project open |
		| -3 | targetId contains an invalid item identifier value |
		| -4 | targetId contains the identifier of an invalid item type |
		| -102 | Sheet is locked |
		| -103 | Items belong to an inactive variant or option |
		| -112 | Attribute could not be added to all items |
		| -134 | attributeName value is too long, Available since v2026-26.10 |
		| -135 | value value is too long for its text type, Available since v2026-26.10 |
		| -136 | Item being assigned the attribute is locked, Available since v2026-26.10 |

		Available since E3.series TLB-Versions: 26.00
		"""
		dummy=0
		return self._obj.AddAttribute(dummy, targetId, attributeName, value, objectType1, objectType2, name, flags)

	def DeleteAttribute(self, targetId:int, attributeName:str, value:str, objectType1:int, objectType2:int, name:str="", flags:int=0) -> tuple[int, tuple[int, int, str]]:
		"""
		Deletes an attribute from an item and items within  if it is a container.

		:param targetId: Identifier of the target item. Target item, and items within the target if it is a container, have the attribute deleted
		:type int: int
		:param attributeName: Internal name of attribute to delete
		:type str: str
		:param value: Value of the attribute to delete
		:type str: str
		:param objectType1: Flags values defining item types to delete the attribute from. Since v2026-26.10, the flag values only apply if targetId is a field item
		:type int: int
		:param objectType2: Flags values defining item types to delete the attribute from. Since v2026-26.10, the flag values only apply if targetId is a field item
		:type int: int
		:param name: Conductor or wire name. Default value is "<Empty>", defaults to ""
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | errorMessages | tuple[int, int, str] | List of items the attribute could not be deleted from and the associated error information |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Attribute deleted from items |
		| -1 | No E³.ProjectConfigurator license found |
		| -2 | No project open |
		| -3 | targetId contains an invalid identifier value |
		| -4 | targetId contains the identifier of an invalid item type |
		| -102 | Sheet is locked |
		| -103 | Items belong to an inactive variant or option |
		| -113 | Attribute could not be deleted from all items |

		Available since E3.series TLB-Versions: 26.00
		"""
		dummy=0
		return self._obj.DeleteAttribute(dummy, targetId, attributeName, value, objectType1, objectType2, name, flags)

	def DeleteAndReconnect(self, targetId:int, flags:int=0) -> tuple[int, tuple[int, int, str]]:
		"""
		Deletes items from a field and restores connections passing out of it.

		:param targetId: Field item identifier
		:type int: int
		:param flags: Restore connection option flags., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | errorMessages | tuple[int, int, str] | List of items that could not be deleted and the associated error information |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Items are deleted and connections restored if possible |
		| -1 | No E³.ProjectConfigurator license found |
		| -2 | No E³.series project open |
		| -3 | targetId contains an invalid identifier value |
		| -4 | targetId contains the identifier of an invalid type of item |
		| -100 | Error occurred |
		| -102 | Field item's sheet is locked |
		| -103 | Field item belongs to an inactive variant or option |

		Available since E3.series TLB-Versions: 26.00
		"""
		dummy=0
		return self._obj.DeleteAndReconnect(dummy, targetId, flags)

	def ChangeComponent(self, targetId:int, newComponent:str, oldComponent:str="", newVersion:str="", oldVersion:str="", flags:int=0) -> tuple[int, list[tuple[int, int, str]]]:
		"""
		Replaces, adds or removes a component to an item or items within a field.

		:param targetId: Identifier of the target item
		:type int: int
		:param newComponent: Name of the replacement component
		:type str: str
		:param oldComponent: Name of the  component to be replaced. Default value is "<Empty>", defaults to ""
		:type str: str
		:param newVersion: Version of the replacement component. Default value is "<Empty>", defaults to ""
		:type str: str
		:param oldVersion: Version of the component to be replaced. Default value is "<Empty>", defaults to ""
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | errorMessages | list[tuple[int, int, str]] | List of items for which the component could not be changed to and the associated error information |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component changed on items |
		| -1 | No E³.ProjectConfigurator license found |
		| -2 | No project open |
		| -3 | targetId contains an invalid item identifier value |
		| -4 | targetId contains the identifier of an invalid item type |
		| -104 | Device is locked |
		| -114 | Component does not match the device |
		| -115 | Component type is not supported in the device |
		| -116 | Target device could not be found |
		| -117 | Target device is a terminal strip |
		| -118 | Target device is a connector with inserts |
		| -119 | Target device is a feed-through connector without a component possibility |
		| -120 | Target device is a busbar without a component possibility |
		| -121 | Target device is a part of an assembly or an overbraid |
		| -122 | Target device is a cable duct inlet\outlet |
		| -123 | Target is an unassigned symbol on a block device |
		| -124 | Target device's component cannot be removed because it already has no component |
		| -125 | Target device's component cannot be removed because it is part of a variant |
		| -126 | Error occurred |
		| -127 | Error occurred |

		Available since E3.series TLB-Versions: 26.00
		"""
		dummy=0
		return self._obj.ChangeComponent(dummy, targetId, newComponent, oldComponent, newVersion, oldVersion, flags)

	def SwapSymbol(self, targetId:int, newPin:str, newSymbol:str="", flags:int=0) -> tuple[int, tuple[int, int, str]]:
		"""
		Swaps the pins or gates contained in a field item.

		:param targetId: Field item identifier
		:type int: int
		:param newPin: Name of the pin to be swapped in. For a normal device, a gate with the corresponding pin name is searched for
		:type str: str
		:param newSymbol: Name of the gate on the normal device to be swapped in. Default value is "<Empty>", defaults to ""
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | errorMessages | tuple[int, int, str] | List of items that could not be deleted and the associated error information |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbols are swapped |
		| -1 | No E³.ProjectConfigurator license found |
		| -2 | No E³.series project open |
		| -3 | targetId contains an invalid identifier value |
		| -4 | targetId is not a field item identifier |
		| -102 | Sheet is locked |
		| -103 | Device belongs to an inactive variant or option |
		| -104 | Device is locked |
		| -128 | Both newPin and newSymbol have no value |
		| -129 | Connector does not have a pin name matching the newPin value |
		| -130 | Device does not have a gate matching the newSymbol value |
		| -131 | Device does not have a gate matching the newSymbol value or the gate does not have a pin matching the newPin value |
		| -132 | Device does not have a gate with a pin matching the newPin value |

		Available since E3.series TLB-Versions: 26.01
		"""
		dummy=0
		return self._obj.SwapSymbol(dummy, targetId, newPin, newSymbol, flags)

	def ChangeSignal(self, targetId:int, oldSignalName:str, newSignalName:str, flags:int=0) -> tuple[int, tuple[int, int, str]]:
		"""
		Replaces, adds or removes  signals of pin items within a field.

		:param targetId: Identifier of the target field item
		:type int: int
		:param oldSignalName: Name of the  signal to be replaced
		:type str: str
		:param newSignalName: Name of the replacement signal
		:type str: str
		:param flags: Change signal option flags., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | errorMessages | tuple[int, int, str] | List of items for which the component could not be changed to and the associated error information |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signal changed on items |
		| -1 | No E³.ProjectConfigurator license found |
		| -2 | No project open |
		| -3 | targetId contains an invalid item identifier value |
		| -4 | targetId contains the identifier of an invalid item type |
		| -100 | Error occurred |
		| -102 | Field item's sheet is locked |
		| -103 | Field item belongs to an inactive variant or option |
		| -127 | Error occurred |
		| -137 | oldSignal or newSignal value is too long |
		| -138 | oldSignal or newSignal contains invalid characters |

		Available since E3.series TLB-Versions: 26.01
		"""
		dummy=0
		return self._obj.ChangeSignal(dummy, targetId, oldSignalName, newSignalName, flags)

# -------------------- IDbeComponentInterface--------------------
class DbeComponent:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeComponent. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current component item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current component item identifier |
		| 0 | No component item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a component as the current item.

		:param id: Unique value identifying a component item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current component item identifier |
		| 0 | No current component item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetId(id)

	def Save(self) -> int:
		"""
		Saves the component to the database.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component is saved to the database |
		| -1 | No E³.DatabaseEditor project open or no component item set |
		| -2 | Database is read-only |
		| -3 | Component could not be saved |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.Save()

	def Remove(self, save_changes:bool=False) -> int:
		"""
		Removes the component from the E³.DatabaseEditor project.

		:param save_changes: Indicates whether the component should be saved to the database before being removed from the project. If 1, the component is saved to the database. If 0, the component is not saved to the database., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component is removed from the E³.DatabaseEditor project |
		| -1 | No E³.DatabaseEditor project open or no component item set |
		| -2 | Database is read-only |
		| -3 | Component could not be removed |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.Remove(save_changes)

	def GetAttributeIds(self, end:int=0, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the component item.

		:param end: Attribute location filter., defaults to 0
		:type int: int
		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute identifiers are supplied if attnam is "<Empty>". The default string value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No attributes are found |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, end, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddAttributeValue(self, name:str, value:str, end:int=0) -> int:
		"""
		Adds an attribute to the component item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str
		:param end: Where to apply the attribute., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| -1 | No E³.DatabaseEditor project open or no component item set |
		| -2 | Attribute value could not be added |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.AddAttributeValue(name, value, end)

	def GetName(self) -> str:
		"""
		Gets the name of the component item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Component item name value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetName()

	def GetVersion(self) -> str:
		"""
		Gets the version of the component item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Component item version value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetVersion()

	def GetSubType(self) -> int:
		"""
		Gets the component item's subtype.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Subtype of the component |
		| -1 | No project open or no component item set |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetSubType()

	def SetSubType(self, subtype:int) -> int:
		"""
		Sets the component item's subtype.

		:param subtype: Subtype value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Previous subtype value |
		| -1 | No project open or no component item set |
		| -2 | subtype is invalid |
		| -3 | Component is invalid |
		| -4 | subtype is invalid for standard device or block device component, Available since v2019-20.00 |
		| -5 | subtype is invalid for block devices, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetSubType(subtype)

	def GetComponentType(self) -> int:
		"""
		Gets the component item's type.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type of the component |
		| -1 | No project open |
		| -2 | No component item set |
		| -3 | Undefined component type |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.GetComponentType()

	def SetModelName(self, modelName:str, flags:int=0) -> int:
		"""
		Sets the model of the component item.

		:param modelName: Name of model
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Model assigned to component item |
		| -1 | No open project |
		| -2 | No component item set |
		| -3 | modelName value is invalid |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.SetModelName(modelName, flags)

	def GetModelName(self, flags:int=0) -> str:
		"""
		Gets the name of the component item's model name.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Model name |
		| "&lt;Empty&gt;" | Component item has no model or an error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.GetModelName(flags)

# -------------------- IDbeAttributeInterface--------------------
class DbeAttribute:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeAttribute. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current attribute item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current attribute item identifier |
		| 0 | No attribute item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets an attribute as the current item.

		:param id: Unique value identifying an attribute item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current attribute item identifier |
		| 0 | No current attribute item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetId(id)

	def SetValue(self, value:str) -> int:
		"""
		Sets the attribute item's value.

		:param value: Value to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Value is applied |
		| -1 | No E³.DatabaseEditor project open or no attribute item set |
		| -2 | Value could not be set |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetValue(value)

	def Delete(self) -> int:
		"""
		Deletes the attribute item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Attribute item was deleted |
		| -1 | No E³.DatabaseEditor project open or no attribute item set |
		| -3 | Attribute value could not be deleted |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.Delete()

	def GetName(self) -> str:
		"""
		Gets the attribute item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.GetName()

	def GetInternalName(self) -> str:
		"""
		Gets the attribute item's user-defined internal name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's user-defined internal name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.GetInternalName()

	def GetInternalValue(self) -> str:
		"""
		Gets the  attribute item's internal value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's internal value |
		| "&lt;Empty&gt;" | Attribute item has no internal value or an error occurred |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.GetInternalValue()

	def GetFormattedValue(self) -> str:
		"""
		Gets the attribute item's formatted value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's formatted value |
		| "&lt;Empty&gt;" | Attribute item has no formatted value or an error occurred |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.GetFormattedValue()

	def GetValue(self) -> str:
		"""
		Gets the attribute item's value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute item's value |
		| "&lt;Empty&gt;" | Attribute item has no value or an error occurred |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.GetValue()

# -------------------- IDbeSymbolInterface--------------------
class DbeSymbol:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeSymbol. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current symbol item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current symbol item identifier |
		| 0 | No symbol item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a symbol as the current item.

		:param id: Unique value identifying a symbol item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current symbol item identifier |
		| 0 | No current symbol item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetId(id)

	def Save(self) -> int:
		"""
		Saves the symbol to the database.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol is saved to the database |
		| -1 | No E³.DatabaseEditor project open or no symbol item set |
		| -2 | Database is read-only |
		| -3 | Symbol could not be saved |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.Save()

	def Remove(self, save_changes:bool=False) -> int:
		"""
		Removes the symbol from the E³.DatabaseEditor project.

		:param save_changes: Indicates whether the symbol should be saved to the database before being removed from the project. If 1, the symbol is saved to the database. If 0, the symbol is not saved to the database., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol is removed from the E³.DatabaseEditor project |
		| -1 | No E³.DatabaseEditor project open or no symbol item set |
		| -2 | Database is read-only |
		| -3 | Symbol could not be removed |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.Remove(save_changes)

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the symbol item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute identifier are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of items in ids |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGraphicIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the graphics on the symbol sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of graphic item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of graphic item identifiers in ids |
		| -1 | No E³.DatabaseEditor project open or no symbol item set |
		| -2 | No valid symbol sheet view, Available from v2019-20.22 and v2020-21.01 |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		ret, ids = self._obj.GetGraphicIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTextIds(self, texttype:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the text items assigned to the symbol item.

		:param texttype: Text type filter. Only text identifiers with this Text Type value will be supplied. All text identifiers are supplied if texttype is set to 0. The default string value is 0, defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of text items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of items in ids |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		ret, ids = self._obj.GetTextIds(dummy, texttype)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the symbol item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| -1 | No E³.DatabaseEditor project open or no symbol item set |
		| -2 | Attribute value could not be added |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetName(self) -> str:
		"""
		Gets the name of the symbol item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Symbol item name value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetName()

	def GetVersion(self) -> str:
		"""
		Gets the version of the symbol item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Symbol item version value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetVersion()

	def GetCharacteristic(self) -> str:
		"""
		Gets the characteristic of the symbol item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Symbol item characteristic value |
		| "&lt;Empty&gt;" | Symbol item has no characteristic or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetCharacteristic()

	def GetSubType(self) -> int:
		"""
		Gets the symbol item's subtype.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Subtype of the symbol |
		| -1 | No project open or no symbol item set |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetSubType()

	def SetSubType(self, subtype:int) -> int:
		"""
		Sets the symbol item's subtype.

		:param subtype: Subtype value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Previous subtype value |
		| -1 | No project open or no symbol item set |
		| -2 | subtype is invalid |
		| -3 | Symbol is invalid |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetSubType(subtype)

	def FitSpaceRequirement(self) -> int:
		"""
		Resizes the surrounding rectangle graphic item to fit around the graphic content of the symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Fitting operation was executed |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.FitSpaceRequirement()

	def GetSymbolType(self) -> int:
		"""
		Gets the symbol item's type.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Type of the symbol |
		| -1 | No project open or no symbol item set |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.GetSymbolType()

	def ImportDXF(self, filename:str, scale:float, x:float, y:float, rot:int, font:str, flags:int=0) -> int:
		"""
		Imports a DXF or DWG format file's content on to the symbol item sheet.

		:param filename: Path and name of the import file
		:type str: str
		:param scale: Resize scale to apply to the import file contents
		:type float: float
		:param x: Placement of the file contents on the x-axis of the symbol sheet. Ignored if bit value of 16 is not included in flags
		:type float: float
		:param y: Placement of the file contents on the y-axis of the symbol sheet. Ignored if bit value of 16 is not included in flags
		:type float: float
		:param rot: Not used
		:type int: int
		:param font: Font name of texts on the symbol sheet
		:type str: str
		:param flags: Flags bit values specifying how the file contents should be imported, defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet item |
		| -1 | No E³.DatabaseEditor project open or no symbol item set |
		| -2 | filename import file does not exist |
		| -3 | rot value is invalid |
		| -4 | font value is invalid |
		| -5 | Import file content exceeds the sheet size |
		| -7 | Error reading DXF file, Available since v2022-23.61 and v2023-24.31 |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.ImportDXF(filename, scale, x, y, rot, font, flags)

	def GetDXFSize(self, filename:str, font:str) -> tuple[int, float, float, float]:
		"""
		Gets the size and scale for the symbol sheet based on the file contents and font.

		:param filename: Path and name of the DXF or DWG file. Since v2022-23.53 and v2023-24.22, the path and name of a DGN file is also accepted
		:type str: str
		:param font: Name of font to apply
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | dx | float | Required width passed out of the function |
		| 2 | dy | float | Required height passed out of the function |
		| 3 | scale | float | Maximum possible scale for the sheet and. font. passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Size and maximum scale supplied |
		| 0 | Size and scale could not be determined |
		| -1 | No E³.DatabaseEditor project open or no symbol item set |
		| -2 | filename is invalid |
		| -3 | font is invalid |
		| -4 | Error reading DXF file, Available since v2022-23.61 and v2023-24.31 |

		Available since E3.series TLB-Versions: 19.01
		"""
		dummy=0
		return self._obj.GetDXFSize(filename, font, dummy, dummy, dummy)

	def PlaceSymbol(self, symname:str, version:str, x:float, y:float, rot:str, flags:int=0) -> int:
		"""
		Places a symbol on to the symbol item's sheet.

		:param symname: Name of the symbol to place
		:type str: str
		:param version: Version of the symbol to place. If version is invalid, the current version is assumed
		:type str: str
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Rotation value in a counterclockwise direction
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol is placed |
		| -1 | No E³.DatabaseEditor project open or no symbol item set |
		| -3 | Invalid symbol type |
		| -4 | Symbol not found in the database |
		| -5 | Insertion point lies outside of the sheet |
		| -6 | Symbol could not be placed |
		| -7 | Invalid rotation value |

		Available since E3.series TLB-Versions: 19.41
		"""
		return self._obj.PlaceSymbol(symname, version, x, y, rot, flags)

	def GetNodeIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the nodes on the symbol sheet.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of node item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of node item identifiers in ids |
		| -1 | No E³.DatabaseEditor project open or no symbol item set |
		| -2 | &gt;flags value is invalid |

		Available since E3.series TLB-Versions: 21.21
		"""
		dummy=0
		ret, ids = self._obj.GetNodeIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

# -------------------- IDbeTextInterface--------------------
class DbeText:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeText. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current text item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current text item identifier |
		| 0 | No text item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a text as the current item.

		:param id: Unique value identifying a text item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current text item identifier |
		| 0 | No current text item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetId(id)

	def Create(self, id:int, texttype:int, x:float, y:float, textvalue:str="") -> int:
		"""
		Adds a new text item onto a symbol or model of the E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the text item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param texttype: Text type. See Text Types for possible values
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param textvalue: Text value, defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new text item |
		| -1 | No open project or id is invalid |
		| -2 | texttype is invalid |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.Create(id, texttype, x, y, textvalue)

	def Delete(self) -> int:
		"""
		Deletes the text from the E³.DatabaseEditor project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text item is deleted |
		| -1 | No project open or no text item was set |
		| -3 | Text could not be deleted |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.Delete()

	def GetColour(self) -> int:
		"""
		Gets the text item's text color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or an error occurred |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetColour()

	def SetColour(self, value:int) -> int:
		"""
		Sets the text item's text color.

		:param value: Color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Color value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetColour(value)

	def GetAlignment(self) -> int:
		"""
		Gets the text's current alignment value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Alignment value could not be supplied |
		| 1 | Left aligned |
		| 2 | Centered |
		| 3 | Right aligned |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetAlignment()

	def SetAlignment(self, newval:int) -> int:
		"""
		Sets the text's alignment value.

		:param newval: Alignment value to be set
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Alignment value set |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetAlignment(newval)

	def GetBallooning(self) -> int:
		"""
		Gets the text's ballooning value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Ballooning value applied, See Ballooning for possible values |
		| 0 | Ballooning value could not be supplied or there is no ballooning |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetBallooning()

	def SetBallooning(self, onoff:bool, _type:int) -> int:
		"""
		Sets the text's ballooning value.

		:param onoff: Indicating if the value should be added or removed. If 1, the value is added. If 0, the value is removed
		:type bool: bool
		:param _type: New ballooning value. See Ballooning for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Previous ballooning value, See Ballooning for possible values |
		| 0 | Previously no ballooning value set or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetBallooning(onoff, _type)

	def GetFontName(self) -> str:
		"""
		Gets the text item's font name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Font&gt;" | Name of the text's font |
		| "Arial" | Name of the text's font is Arial or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetFontName()

	def SetFontName(self, newname:str) -> int:
		"""
		Sets the text item's font name.

		:param newname: Name of font to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Font applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetFontName(newname)

	def GetHeight(self) -> float:
		"""
		Gets the text item's font height.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Size of the text's font height |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetHeight()

	def SetHeight(self, newval:float) -> int:
		"""
		Sets the text item's font height.

		:param newval: Value of font height to apply
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Font height applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetHeight(newval)

	def GetLevel(self) -> int:
		"""
		Gets the text item's display level value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Display level value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetLevel()

	def SetLevel(self, newval:int) -> int:
		"""
		Sets the text item's display level value.

		:param newval: Display level value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display level value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetLevel(newval)

	def GetLocking(self) -> bool:
		"""
		Gets the text item's flag value determining if the text position is locked.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text position is locked |
		| 0 | Text position is unlocked or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetLocking()

	def SetLocking(self, newval:bool) -> bool:
		"""
		Sets the text item's flag value determining if the text position is locked.

		:param newval: Position locking value to apply. 1 will lock the text position. 0 will unlock the text position
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text position locking value is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetLocking(newval)

	def GetMode(self) -> int:
		"""
		Gets the text item's text ratio.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Text ratio value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetMode()

	def SetMode(self, newval:int) -> int:
		"""
		Sets the text item's text ratio.

		:param newval: Text ratio value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text ratio value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetMode(newval)

	def GetRotation(self) -> float:
		"""
		Gets the text item's rotation value.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0..&lt; 360.0 | Text rotation value in degrees |
		| 0.0 | Text rotation value  or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetRotation()

	def SetRotation(self, rotation:float) -> float:
		"""
		Sets the text item's rotation value.

		:param rotation: Rotation value in degrees to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0..&lt; 360.0 | Previous text rotation value in degrees supplied |
		| 0.0 | Previous text rotation value or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetRotation(rotation)

	def GetSingleLine(self) -> int:
		"""
		Gets the text item's status determining if multi-line text is displayed on a single line.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text is displayed on a single line |
		| 0 | Text is not displayed on a single line or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetSingleLine()

	def SetSingleLine(self, newval:int) -> int:
		"""
		Sets the text item's status determining if multi-line text is displayed on a single line.

		:param newval: Single line value to apply. If 1, mutli-line text is displayed on a single line. If 0, mutli-line text is displayed on multiple lines
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Single line value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetSingleLine(newval)

	def GetStyle(self) -> int:
		"""
		Gets the text item's font style.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..7 | Font style value supplied |
		| 0 | Regular font style value used or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetStyle()

	def SetStyle(self, newval:int) -> int:
		"""
		Sets the text item's font style.

		:param newval: Font style to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Font style value supplied |
		| 0 | No font style value used or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetStyle(newval)

	def GetText(self) -> str:
		"""
		Gets the text item's text value including text token translations.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Text value is supplied |
		| "&lt;Empty&gt;" | Text item does not have a value or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetText()

	def SetText(self, newtext:str) -> int:
		"""
		Sets the text item's text value.

		:param newtext: Text value to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text value is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetText(newtext)

	def GetType(self) -> int:
		"""
		Gets the text item's text type.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Text type supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetType()

	def SetType(self, texttype:int) -> int:
		"""
		Sets the text item's text type.

		:param texttype: Text type to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text type value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetType(texttype)

	def GetVisibility(self) -> int:
		"""
		Gets the text item's visibility status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text visibility status is shown |
		| 0 | Text visibility status is hidden or an error occurred |

		Available since E3.series TLB-Versions: 21.11
		"""
		return self._obj.GetVisibility()

	def SetVisibility(self, newval:int) -> int:
		"""
		Sets the text item's visibility status.

		:param newval: Visibility status value. If 1, the text is shown. If 0, the text is hidden
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Text visibility status value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 21.11
		"""
		return self._obj.SetVisibility(newval)

	def GetPosition(self) -> tuple[int, float, float]:
		"""
		Gets the text item's position.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Position on the x-axis passed out of the function |
		| 2 | y | float | Position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Position values are supplied |
		| -1 | No project open |
		| -2 | No text item set |

		Available since E3.series TLB-Versions: 21.21
		"""
		dummy=0
		return self._obj.GetPosition(dummy, dummy)

# -------------------- IDbeGraphInterface--------------------
class DbeGraph:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeGraph. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current graphic item identifier |
		| 0 | No graphic item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a graphic as the current item.

		:param id: Unique value identifying a graphic item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current graphic item identifier |
		| 0 | No current graphic item or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetId(id)

	def GetColour(self) -> int:
		"""
		Gets the graphic item's color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or an error occurred |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetColour()

	def SetColour(self, newcol:int) -> int:
		"""
		Sets the graphic item's color.

		:param newcol: Color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Color value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetColour(newcol)

	def GetLevel(self) -> int:
		"""
		Gets the graphic item's display level value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Display level value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetLevel()

	def SetLevel(self, newlev:int) -> int:
		"""
		Sets the graphic item's display level value.

		:param newlev: Display level value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display level value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetLevel(newlev)

	def SetBlobInfo(self, filename:str) -> int:
		"""
		Sets the blob graphic item's data.

		:param filename: Path and name of the file containing the new blob data
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | New data is applied |
		| -1 | No valid graphic item set or no project open |
		| -2 | filename not found |
		| -3 | filename could not be opened |
		| -4 | filename is empty |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetBlobInfo(filename)

	def CreateArc(self, id:int, x:float, y:float, radius:float, start:float, end:float) -> int:
		"""
		Adds a new arc graphic item on a symbol or model of the E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the graphic item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param radius: Radius of the circle of the arc
		:type float: float
		:param start: Angle of the circle to begin the arc
		:type float: float
		:param end: Angle of the circle to end the arc
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new arc graphic item |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.CreateArc(id, x, y, radius, start, end)

	def CreateCircle(self, id:int, x:float, y:float, radius:float) -> int:
		"""
		Adds a new circle graphic item onto a symbol or model of the E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the graphic item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param radius: Radius of the circle
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new circle graphic item |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.CreateCircle(id, x, y, radius)

	def CreatePolygon(self, id:int, pnts:int, x:list[int], y:list[int]) -> int:
		"""
		Adds a new polygon graphic item onto a symbol or model of the E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the graphic item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param pnts: Number of placement positions in. x. and. y
		:type int: int
		:param x: Array of placement positions on the x-axis
		:type list[int]: list[int]
		:param y: Array of placement positions on the y-axis
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| -1 | No open project or id is invalid |
		| -2 | x or y is an invalid array |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.CreatePolygon(id, pnts, x, y)

	def CreateRectangle(self, id:int, x1:float, y1:float, x2:float, y2:float) -> int:
		"""
		Adds a new rectangle graphic item onto a symbol or model of the E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the graphic item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param x1: First placement position on the x-axis
		:type float: float
		:param y1: First placement position on the y-axis
		:type float: float
		:param x2: Second placement position on the x-axis
		:type float: float
		:param y2: Second placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.CreateRectangle(id, x1, y1, x2, y2)

	def CreateLine(self, id:int, x1:float, y1:float, x2:float, y2:float) -> int:
		"""
		Adds a new line graphic item onto a symbol or model of the E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the graphic item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param x1: First placement position on the x-axis
		:type float: float
		:param y1: First placement position on the y-axis
		:type float: float
		:param x2: Second placement position on the x-axis
		:type float: float
		:param y2: Second placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.CreateLine(id, x1, y1, x2, y2)

	def CreateImage(self, id:int, xpos:float, ypos:float, xsize:float, ysize:float, filename:str, embed:int=1) -> int:
		"""
		Adds a new image graphic item onto a symbol or model of the E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the graphic item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param xpos: Placement position on the x-axis
		:type float: float
		:param ypos: Placement position on the y-axis
		:type float: float
		:param xsize: Size of the graphic on the x-axis
		:type float: float
		:param ysize: Size of the graphic on the y-axis
		:type float: float
		:param filename: Path and name of the image file to be used
		:type str: str
		:param embed: If set to 0, a reference to the image is stored in the project. If set to 1, the image is stored internally in the project., defaults to 1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new image graphic item |
		| 0 | Error occurred |
		| -1 | No open project or id is an invalid symbol or model identifier |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.CreateImage(id, xpos, ypos, xsize, ysize, filename, embed)

	def CreateCurve(self, id:int, pnts:int, x:list[float], y:list[float]) -> int:
		"""
		Adds a new curve graphic item onto a symbol or model of the E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the graphic item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param pnts: Number of placement positions in. x. and. y
		:type int: int
		:param x: Array of placement positions on the x-axis
		:type list[float]: list[float]
		:param y: Array of placement positions on the y-axis
		:type list[float]: list[float]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new graphic item |
		| -1 | No open project or id is an invalid symbol or model identifier |
		| -2 | x or y is an invalid array |

		Available since E3.series TLB-Versions: 19.00
		"""
		x = [0.] + x
		y = [0.] + y
		return self._obj.CreateCurve(id, pnts, x, y)

	def CreateCloud(self, id:int, pnts:int, x:list[float], y:list[float]) -> int:
		"""
		Adds a new cloud graphic item onto  a symbol or model of the E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the graphic item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param pnts: Number of placement positions in. x. and. y
		:type int: int
		:param x: Array of placement positions on the x-axis
		:type list[float]: list[float]
		:param y: Array of placement positions on the y-axis
		:type list[float]: list[float]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new cloud graphic item |
		| 0 | Error creating cloud graphic item |
		| -1 | No open project or id is an invalid symbol or model identifier |
		| -2 | x or y is an invalid array |

		Available since E3.series TLB-Versions: 19.00
		"""
		x = [0.] + x
		y = [0.] + y
		return self._obj.CreateCloud(id, pnts, x, y)

	def CreateBlob(self, id:int, filename:str) -> int:
		"""
		Creates a new blob graphic item owned by the symbol or model in a E³.DatabaseEditor project.

		:param id: Identifier of the symbol or model to place the graphic item on. Previous to v2022-23.54 and v2023-24.22, only symbol identifiers are valid
		:type int: int
		:param filename: Path and name of the file containing the blob data
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new blob graphic item |
		| -1 | No open project or id is an invalid symbol or model identifier |
		| -2 | filename not found |
		| -3 | filename could not be opened |
		| -4 | filename is empty |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.CreateBlob(id, filename)

	def SaveBlob(self, filename:str) -> int:
		"""
		Saves a blob graphic item's blob data to an external file.

		:param filename: Path and name of the blob file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Blob saved to external file |
		| -1 | No valid graphic item set or no project open |
		| -2 | File already exists |
		| -3 | File has no blob or is empty |
		| -4 | File could not be saved |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SaveBlob(filename)

	def Place(self, x:float, y:float) -> int:
		"""
		Places or repositions the graphic item.

		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Graphic item placed or repositioned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.Place(x, y)

	def Delete(self) -> int:
		"""
		Deletes the graphic item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Graphic item was deleted |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.Delete()

	def GetTypeId(self) -> int:
		"""
		Gets a value representing the type of the graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type value of the graphic item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetTypeId()

	def GetArc(self) -> tuple[int, float, float, float, float, float]:
		"""
		Gets the arc placement data of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xm | float | Position of the arc center on the x-axis passed out of the function |
		| 2 | ym | float | Position of the arc center on the y-axis passed out of the function |
		| 3 | rad | float | Radius of the arc passed out of the function |
		| 4 | startang | float | Start angle of the arc passed out of the function |
		| 5 | endang | float | End angle of the arc passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Arc data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		return self._obj.GetArc(dummy, dummy, dummy, dummy, dummy)

	def GetCircle(self) -> tuple[int, float, float, float]:
		"""
		Gets the circle placement position of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xm | float | Position of the circle center on the x-axis passed out of the function |
		| 2 | ym | float | Position of the circle center on the y-axis passed out of the function |
		| 3 | rad | float | Radius of the circle passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Circle data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		return self._obj.GetCircle(dummy, dummy, dummy)

	def GetLine(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the line placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x1 | float | First placement position on the x-axis passed out of the function |
		| 2 | y1 | float | First placement position on the y-axis passed out of the function |
		| 3 | x2 | float | Second placement position on the x-axis passed out of the function |
		| 4 | y2 | float | Second placement position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Line data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		return self._obj.GetLine(dummy, dummy, dummy, dummy)

	def GetPolygon(self) -> tuple[int, int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the polygon placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | npnts | int | Number of placement positions passed out of the function |
		| 2 | xarr | tuple[float,...] | Array of placement positions on the x-axis passed out of the function |
		| 3 | yarr | tuple[float,...] | Array of placement positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Polygon data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		ret, npnts, xarr, yarr = self._obj.GetPolygon(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, npnts, xarr, yarr

	def GetRectangle(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the rectangle placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x1 | float | First placement position on the x-axis passed out of the function |
		| 2 | y1 | float | First placement position on the y-axis passed out of the function |
		| 3 | x2 | float | Second placement position on the x-axis passed out of the function |
		| 4 | y2 | float | Second placement position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Rectangle data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		return self._obj.GetRectangle(dummy, dummy, dummy, dummy)

	def GetCurve(self) -> tuple[int, int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the curve placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | npnts | int | Number of placement positions passed out of the function |
		| 2 | xarr | tuple[float,...] | Array of placement positions on the x-axis passed out of the function |
		| 3 | yarr | tuple[float,...] | Array of placement positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Curve data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		ret, npnts, xarr, yarr = self._obj.GetCurve(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, npnts, xarr, yarr

	def GetCloud(self) -> tuple[int, int, tuple[float,...], tuple[float,...]]:
		"""
		Gets the cloud placement positions of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | npnts | int | Number of placement positions passed out of the function |
		| 2 | xarr | tuple[float,...] | Array of placement positions on the x-axis passed out of the function |
		| 3 | yarr | tuple[float,...] | Array of placement positions on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Cloud data is successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		ret, npnts, xarr, yarr = self._obj.GetCloud(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		return ret, npnts, xarr, yarr

	def GetLineColour(self) -> int:
		"""
		Gets the graphic item's line color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Line color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or an error occurred |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetLineColour()

	def SetLineColour(self, newcol:int) -> int:
		"""
		Sets the graphic item's line color.

		:param newcol: Line color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Line color value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetLineColour(newcol)

	def GetLineWidth(self) -> float:
		"""
		Gets the line width of a graphic item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Line width value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetLineWidth()

	def SetLineWidth(self, newwid:float) -> float:
		"""
		Sets the line width of a graphic item.

		:param newwid: Line width value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous line width value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetLineWidth(newwid)

	def GetLineStyle(self) -> int:
		"""
		Gets the line style of a graphic item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Line style value, See Line Styles for possible values |
		| 0 or &gt;47 | 0 or &gt;47 |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetLineStyle()

	def SetLineStyle(self, newstyle:int) -> int:
		"""
		Sets the line style of a graphic item.

		:param newstyle: Line style value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Previous line style value, See Line Styles for possible values |
		| 0 or &gt;47 | Previous line style value |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetLineStyle(newstyle)

	def SetHatchColour(self, newcol:int) -> int:
		"""
		Sets the graphic item's hatch color.

		:param newcol: Hatch color value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Hatch color value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetHatchColour(newcol)

	def GetHatchColour(self) -> int:
		"""
		Gets the graphic item's hatch color.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Hatch color value, See Colors for possible values |
		| 0 | Black (RGB: 0, 0, 0 ) or an error occurred |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetHatchColour()

	def GetHatchLineWidth(self) -> float:
		"""
		Gets the line width of a graphic item's hatch.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Hatch line width value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetHatchLineWidth()

	def SetHatchLineWidth(self, newwid:float) -> float:
		"""
		Sets the line width of a graphic item's hatch.

		:param newwid: Hatch line width value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous hatch line width value |
		| 0.0 | Error occurred |
		| -1.0 | newwid value is invalid |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetHatchLineWidth(newwid)

	def GetHatchLineStyle(self) -> int:
		"""
		Gets the line style of a graphic item's hatch.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Hatch line style value, See Line Styles for possible values |
		| 0 or &gt;47 | 0 or &gt;47 |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetHatchLineStyle()

	def SetHatchLineStyle(self, newstyle:int) -> int:
		"""
		Sets the line style of a graphic item's hatch.

		:param newstyle: Hatch line style value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..47 | Previous hatch line style value, See Line Styles for possible values |
		| 0 or &gt;47 | Previous hatch line style value |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetHatchLineStyle(newstyle)

	def GetHatchLineDistance(self) -> float:
		"""
		Gets the distance between the lines of a graphic item's hatch.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Hatch line distance value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.GetHatchLineDistance()

	def SetHatchLineDistance(self, newdist:float) -> float:
		"""
		Sets the distance between the lines of a graphic item's hatch.

		:param newdist: Hatch line distance value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Previous hatch line distance value |
		| 0.0 | Error occurred |
		| -1.0 | newdist value is invalid |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetHatchLineDistance(newdist)

	def GetHatchPattern(self) -> tuple[int, float, float]:
		"""
		Gets a value representing the used hatch pattern of the graphic item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | angle1 | float | Angle value in degrees of a hatch line if a line or cross hatch pattern is in use. The value will be 0.0 if neither a line or cross hatch pattern is in use |
		| 2 | angle2 | float | Angle value in degrees of a hatch line if a cross hatch pattern is in use. The value will be 0.0 if a cross hatch pattern is not in use |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No hatch pattern or error occurred |
		| 1 | Solid hatch |
		| 2 | Line hatch |
		| 4 | Cross hatch |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		return self._obj.GetHatchPattern(dummy, dummy)

	def SetHatchPattern(self, newpat:int, angle1:float, angle2:float) -> int:
		"""
		Sets a value representing the hatch pattern of the graphic item.

		:param newpat: Hatch pattern value to apply
		:type int: int
		:param angle1: Angle value in degrees of a hatch line to apply. Value is only used if newPat is a line or cross hatch pattern value. The value range is from 90.0 (pointing upwards) to 0.0 (pointing rightwards) to -90.0 (pointing downwards)
		:type float: float
		:param angle2: Angle value in degrees of a hatch line  to apply. Value is only used if newPat is a cross hatch pattern value. The value range is from 90.0 (pointing upwards) to 0.0 (pointing rightwards) to -90.0 (pointing downwards)
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No previous hatch pattern value set or error occurred |
		| 1, 2 or 4 | Previous hatch pattern value |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetHatchPattern(newpat, angle1, angle2)

	def GetImageInfo(self) -> tuple[int, float, float, float, float, str, int]:
		"""
		Gets the image graphic item's values.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xpos | float | Placement position on the x-axis passed out of the function |
		| 2 | ypos | float | Placement position on the y-axis passed out of the function |
		| 3 | xsize | float | Size of the graphic on the x-axis passed out of the function |
		| 4 | ysize | float | Size of the graphic on the y-axis passed out of the function |
		| 5 | filename | str | Path and name of the image file passed out of the function |
		| 6 | embed | int | Image storage status passed out of the function. If value is 0, a reference to the image stored in the project. If value is 1, the image is stored internally in the project |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item's values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		return self._obj.GetImageInfo(dummy, dummy, dummy, dummy, dummy, dummy)

	def SetImageInfo(self, xpos:float, ypos:float, xsize:float, ysize:float, filename:str="", embed:int=-1) -> int:
		"""
		Sets the image graphic item's values.

		:param xpos: Placement position on the x-axis
		:type float: float
		:param ypos: Placement position on the y-axis
		:type float: float
		:param xsize: Size of the graphic on the x-axis
		:type float: float
		:param ysize: Size of the graphic on the y-axis
		:type float: float
		:param filename: Path and name of the image file to be used, defaults to ""
		:type str: str
		:param embed: If set to 0, a reference to the image is stored in the project. If set to 1, the image is stored internally in the project. If set to -1, the current image storage method will be retained., defaults to -1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New values are applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.SetImageInfo(xpos, ypos, xsize, ysize, filename, embed)

	def OptimizeGraphicObjects(self, ids:list[int], mode:int, angle:int) -> tuple[int, list[int]]:
		"""
		Optimizes the graphics objects by reducing the number and modifying them.

		:param ids: Array of graphic identifiers to be optimized passed into the function and passed out optimized
		:type list[int]: list[int]
		:param mode: Type of optimization to apply
		:type int: int
		:param angle: Maximum angle for converting arcs to polygons
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | list[int] | Array of graphic identifiers to be optimized passed into the function and passed out optimized |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Graphic items have been optimized |
		| -1 | No project open |
		| -2 | Invalid mode value |
		| -3 | angle value out of range |

		Available since E3.series TLB-Versions: 22.00, 22.00, 21.01, 20.22
		"""
		ret, ids = self._obj.OptimizeGraphicObjects(ids, mode, angle)
		ids = ids[1:] if type(ids) == list and len(ids) > 0 else []
		return ret, ids

	def GetInsideGraphIds(self, flags:int= 0 ) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the graphic items placed within the current graphic item.

		:param flags: Not used., defaults to  0 
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of graphic item identifiers |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Number of graphic item identifiers in ids |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No graphic item set |
		| -3 | flags value is invalid |
		| -4 | Graphic item does not exist |
		| -5 | Graphic item is placed on an invalid sheet |
		| -6 | Graphic item is not closed or an invalid graphic type |
		| -7 | Error occurred |

		Available since E3.series TLB-Versions: 22.01
		"""
		dummy=0
		ret, ids = self._obj.GetInsideGraphIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SendToForeground(self) -> int:
		"""
		Brings the display of the graphic item to the foreground of the sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Graphic item send to foreground |
		| -1 | No project open |
		| -2 | No graphic item set |
		| -3 | Error accessing graphic item |
		| -4 | Error accessing sheet item |
		| -5 | Graphic item cannot be sent to the foreground |
		| -6 | No license available |
		| -7 | Graphic item is locked |

		Available since E3.series TLB-Versions: 24.22
		"""
		return self._obj.SendToForeground()

	def SendToBackground(self) -> int:
		"""
		Brings the display of the graphic item to the background of the sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Graphic item send to background |
		| -1 | No project open |
		| -2 | No graphic item set |
		| -3 | Error accessing graphic item |
		| -4 | Error accessing sheet item |
		| -5 | Graphic item cannot be sent to the background |
		| -6 | No license available |
		| -7 | Graphic item is locked |

		Available since E3.series TLB-Versions: 24.22
		"""
		return self._obj.SendToBackground()

# -------------------- IDbeModelInterface--------------------
class DbeModel:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeModel. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current model item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current model item identifier |
		| 0 | No model item or an error occurred |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a model as the current item.

		:param id: Unique value identifying a model item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current model item identifier |
		| 0 | No current model item or an error occurred |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the name of the model item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Model item name value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.GetName()

	def GetCharacteristic(self) -> str:
		"""
		Gets the characteristic of the model item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Model item characteristic value |
		| "&lt;Empty&gt;" | Model item has no characteristic or an error occurred |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.GetCharacteristic()

	def ImportDXF(self, filename:str, scale:float, x:float, y:float, rot:int, font:str, flags:int=0) -> int:
		"""
		Imports a DXF or DWG format file's content on to the model item sheet.

		:param filename: Path and name of the import file
		:type str: str
		:param scale: Resize scale to apply to the import file contents
		:type float: float
		:param x: Placement of the file contents on the x-axis of the model sheet
		:type float: float
		:param y: Placement of the file contents on the y-axis of the model sheet
		:type float: float
		:param rot: Not used
		:type int: int
		:param font: Font name of texts on the model sheet
		:type str: str
		:param flags: Flags bit values specifying how the file contents should be imported, defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new sheet |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -2 | filename import file does not exist |
		| -3 | rot value is invalid |
		| -4 | font value is invalid |
		| -5 | Import file content exceeds the sheet size |
		| -6 | Some manufacturing information specified by flag values could not be imported, Available since v2023-24.11 |
		| -7 | Error reading DXF file, Available since v2022-23.61 and v2023-24.31 |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.ImportDXF(filename, scale, x, y, rot, font, flags)

	def FitSpaceRequirement(self) -> int:
		"""
		Resizes the surrounding rectangle graphic item to fit around the content of each model view.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Fitting operation was executed |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.FitSpaceRequirement()

	def GetDXFSize(self, filename:str, font:str) -> tuple[int, float, float, float]:
		"""
		Gets the size and scale for the model sheet based on the file contents and font.

		:param filename: Path and name of the DXF or DWG file. Since v2022-23.53 and v2023-24.22, the path and name of a DGN file is also accepted
		:type str: str
		:param font: Name of font to apply
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | dx | float | Required width passed out of the function |
		| 2 | dy | float | Required height passed out of the function |
		| 3 | scale | float | Maximum possible scale for the sheet and. font. passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Size and maximum scale supplied |
		| 0 | Size and scale could not be determined |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -2 | filename is invalid |
		| -3 | font is invalid |
		| -4 | Error reading DXF file, Available since v2022-23.61 and v2023-24.31 |

		Available since E3.series TLB-Versions: 19.12
		"""
		dummy=0
		return self._obj.GetDXFSize(filename, font, dummy, dummy, dummy)

	def Save(self) -> int:
		"""
		Saves the model to the database.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model is saved to the database |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -2 | Database is read-only |
		| -3 | Model could not be saved |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.Save()

	def Remove(self, save_changes:bool=False) -> int:
		"""
		Removes the model from the E³.DatabaseEditor project.

		:param save_changes: Indicates whether the model should be saved to the database before being removed from the project. If 1, the model is saved to the database. If 0, the model is not saved to the database., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model is removed from the E³.DatabaseEditor project |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -2 | Database is read-only |
		| -3 | Model could not be removed |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.Remove(save_changes)

	def ActivateModelView(self, modelview:int) -> int:
		"""
		Creates or sets a model view to active.

		:param modelview: Model view to create or set to active
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model view was created or set to active |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.12
		"""
		return self._obj.ActivateModelView(modelview)

	def GetPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the pins belonging to the model item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of items in ids |
		| -1 | No model item set |
		| -4 | No E³.DatabaseEditor project open |

		Available since E3.series TLB-Versions: 20.00
		"""
		dummy=0
		ret, ids = self._obj.GetPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def PlaceSymbol(self, symname:str, version:str, x:float, y:float, rot:str, flags:int=0) -> int:
		"""
		Places a symbol on the model item sheet.

		:param symname: Name of the symbol to place
		:type str: str
		:param version: Version of the symbol to place. If version is invalid, the current version is assumed
		:type str: str
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rot: Rotation value in a counterclockwise direction
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol is placed |
		| -1 | No project open or no model item set |
		| -3 | Invalid symbol type |
		| -4 | Symbol not found in the database |
		| -5 | Insertion point lies outside of the sheet |
		| -6 | Symbol could not be placed |
		| -7 | Invalid rotation value |

		Available since E3.series TLB-Versions: 21.00, 20.11, 19.41
		"""
		return self._obj.PlaceSymbol(symname, version, x, y, rot, flags)

	def GetGraphicIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the graphics on the model sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of graphic item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of graphic item identifiers in ids |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -2 | No valid model sheet view |

		Available since E3.series TLB-Versions: 22.00, 21.01, 20.21
		"""
		dummy=0
		ret, ids = self._obj.GetGraphicIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ImportStep(self, filename:str, flags:int=0) -> int:
		"""
		Imports a step file's content into the model item.

		:param filename: Path and name of the import file
		:type str: str
		:param flags: Specifies import process options., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | The file is imported |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -2 | filename STEP file does not exist |
		| -3 | flags value is invalid |
		| -4 | Model item's sheet is invalid |
		| -5 | No license for STEP Import available, No longer supported since v2021-22.12 |
		| -6 | 3D-STEP models cannot be imported |
		| -7 | 2D views could not be generated |
		| -9 | Import process aborted by user, Available since v2026-26.00 |
		| -10 | Import process aborted due to timing out, Available since v2026-26.00 |
		| -11 | Steps of the import process skipped by user, Available since v2026-26.00 |
		| -12 | Steps of the import process skipped due to timing out, Available since v2026-26.00 |
		| -13 | STEP Import functionality is disabled through the /noimportstep start-up parameter, Available since v2026-26.10, v2025-25.34 and v2023-24.53 |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.ImportStep(filename, flags)

	def DisplayOverviewOfExistingViews(self, flags:int=0) -> int:
		"""
		Displays existing 2D views of a model  sheet.

		:param flags: View display flags., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Existing 2D views are displayed |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -2 | No valid view exists |
		| -3 | flags value is invalid |
		| -4 | Sheet is not a 2D view |
		| -5 | Error switching to 3D view, Available since v2023-24.20 |
		| -6 | Error switching to 2D view, Available since v2023-24.20 |
		| -7 | Error occurred, Available since v2023-24.20 |

		Available since E3.series TLB-Versions: 24.00
		"""
		return self._obj.DisplayOverviewOfExistingViews(flags)

	def ExportImage(self, format:str, version:int, file:str, dpi:int=0, compressionmode:int=0, clrdepth:int=24, flags:int=1) -> int:
		"""


		:param format: 
		:type str: str
		:param version: 
		:type int: int
		:param file: 
		:type str: str
		:param dpi: , defaults to 0
		:type int: int
		:param compressionmode: , defaults to 0
		:type int: int
		:param clrdepth: , defaults to 24
		:type int: int
		:param flags: , defaults to 1
		:type int: int

		:return:
		Type: int

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.ExportImage(format, version, file, dpi, compressionmode, clrdepth, flags)

	def GetDrawingArea(self, flags:int=1) -> tuple[int, float, float, float, float]:
		"""
		Gets the coordinate values of the model item's drawing area.

		:param flags: Area option flags., defaults to 1
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xmin | float | Lower left position on the x-axis passed out of the function |
		| 2 | ymin | float | Lower left position on the y-axis passed out of the function |
		| 3 | xmax | float | Upper right position on the x-axis passed out of the function |
		| 4 | ymax | float | Upper right position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Drawing area coordinates supplied |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -3 | flags value is invalid |
		| -4 | model sheet is invalid |
		| -12 | Image dimensions including borders could not be calculated |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		return self._obj.GetDrawingArea(dummy, dummy, dummy, dummy, flags)

	def ExportImageArea(self, format:str, version:int, file:str, xl:float, yl:float, xr:float, yr:float, width:int, height:int, clrdepth:int, gray:int, dpiX:int, dpiY:int, compressionmode:int, flags:int=0) -> int:
		"""
		Exports an area of the model sheet as an image.

		:param format: Image's format
		:type str: str
		:param version: Not used
		:type int: int
		:param file: Path and file name of the export image
		:type str: str
		:param xl: Position of the left border
		:type float: float
		:param yl: Position of the lower border
		:type float: float
		:param xr: Position of the right border
		:type float: float
		:param yr: Position of the upper border
		:type float: float
		:param width: Image width
		:type int: int
		:param height: Image height
		:type int: int
		:param clrdepth: Color bit depth of the image
		:type int: int
		:param gray: Specifies the color mode. If 1, the image is grayscale. If 0, the image is color
		:type int: int
		:param dpiX: Image resolution on the x-axis
		:type int: int
		:param dpiY: Image resolution on the y-axis
		:type int: int
		:param compressionmode: Compression mode depending on. format
		:type int: int
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Image is exported |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -3 | flags value is invalid |
		| -4 | model sheet is invalid |
		| -7 | Error occurred |
		| -8 | Image format is invalid |
		| -9 | Image could not be exported |
		| -10 | xl, yl, xr or yr contains an invalid value |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.ExportImageArea(format, version, file, xl, yl, xr, yr, width, height, clrdepth, gray, dpiX, dpiY, compressionmode, flags)

	def GetAttributeIds(self, attnam:str="", flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the model item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute identifiers are supplied if attnam is "<Empty>". The default string value is "<Empty>", defaults to ""
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of items in ids |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -3 | flags is invalid |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddAttributeValue(self, name:str, value:str, flags:int=0) -> int:
		"""
		Adds an attribute to the model item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| -1 | No E³.DatabaseEditor project open or no model item set |
		| -2 | Attribute value could not be added |
		| -3 | flags is invalid |
		| -4 | value value is too long |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.AddAttributeValue(name, value, flags)

	def GetSlotIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the slots belonging to the model item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of slots passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of items in ids |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags is invalid |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		ret, ids = self._obj.GetSlotIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def DeleteModelView(self, flags:int) -> int:
		"""
		Deletes model views from the model item.

		:param flags: Flags bit values specifying which model views to delete
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model view is deleted or model view does not exist |
		| -1 | No project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |
		| -4 | No views selected for deletion |
		| -5 | A view could not be deleted |
		| -6 | Front view cannot be deleted |

		Available since E3.series TLB-Versions: 24.31
		"""
		return self._obj.DeleteModelView(flags)

	def DeleteStepModel(self, flags:int=0) -> int:
		"""
		Deletes the model item's STEP model.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | STEP&#160;Model is deleted from model item |
		| -1 | No project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |
		| -4 | Model item has no STEP model |
		| -5 | STEP model cannot be deleted |

		Available since E3.series TLB-Versions: 24.31
		"""
		return self._obj.DeleteStepModel(flags)

	def GetMountingDescriptions(self, flags:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets the mounting descriptions of the model item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | mountingdescriptions | tuple[str,...] | Array of mounting descriptions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of  mounting descriptions in mountingdescriptions |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |

		Available since E3.series TLB-Versions: 25.23
		"""
		dummy=0
		ret, mountingdescriptions = self._obj.GetMountingDescriptions(dummy, flags)
		mountingdescriptions = mountingdescriptions[1:] if type(mountingdescriptions) == tuple and len(mountingdescriptions) > 0 else tuple()
		return ret, mountingdescriptions

	def SetMountingDescriptions(self, mountingdescriptions:list[str], flags:int=0) -> int:
		"""
		Sets the mounting descriptions of the model item.

		:param mountingdescriptions: Array of mounting descriptions passed into the function
		:type list[str]: list[str]
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New mounting descriptions are applied |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |

		Available since E3.series TLB-Versions: 25.23
		"""
		ret = self._obj.SetMountingDescriptions(mountingdescriptions, flags)
		return ret[0]

	def GetJustificationPoint(self, flags:int=0) -> tuple[int, float, float, float]:
		"""
		Gets the justification for slot points on the model item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Justification value of the x-axis |
		| 2 | y | float | Justification value of the y-axis |
		| 3 | z | float | Justification value of the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Justification values are provided |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |

		Available since E3.series TLB-Versions: 25.23
		"""
		dummy=0
		return self._obj.GetJustificationPoint(dummy, dummy, dummy, flags)

	def GetJustificationLine(self, flags:int=0) -> tuple[int, float, float]:
		"""
		Gets the justification for slot lines on the model item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | y | float | Justification value of the y-axis |
		| 2 | z | float | Justification value of the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Justification values are provided |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |

		Available since E3.series TLB-Versions: 25.23
		"""
		dummy=0
		return self._obj.GetJustificationLine(dummy, dummy, flags)

	def GetJustificationArea(self, flags:int=0) -> tuple[int, float]:
		"""
		Gets the justification for slot areas on the model item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | z | float | Justification value of the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Justification value is provided |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |

		Available since E3.series TLB-Versions: 25.23
		"""
		dummy=0
		return self._obj.GetJustificationArea(dummy, flags)

	def SetJustificationPoint(self, x:float, y:float, z:float, flags:int=0) -> int:
		"""
		Sets the justification for point slots on the model item.

		:param x: Justification value of the x-axis
		:type float: float
		:param y: Justification value of the y-axis
		:type float: float
		:param z: Justification value of the z-axis
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New justification value is applied |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |
		| -4 | x, y or z value not in range |

		Available since E3.series TLB-Versions: 25.23
		"""
		return self._obj.SetJustificationPoint(x, y, z, flags)

	def SetJustificationLine(self, y:float, z:float, flags:int=0) -> int:
		"""
		Sets the justification for slot lines on the model item.

		:param y: Justification value of the y-axis
		:type float: float
		:param z: Justification value of the z-axis
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New justification value is applied |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |
		| -4 | y or z value not in range |

		Available since E3.series TLB-Versions: 25.23
		"""
		return self._obj.SetJustificationLine(y, z, flags)

	def SetJustificationArea(self, z:float, flags:int=0) -> int:
		"""
		Sets the justification for slot areas on the model item.

		:param z: Justification value of the z-axis
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New justification value is applied |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags value is invalid |
		| -4 | z value not in range |

		Available since E3.series TLB-Versions: 25.23
		"""
		return self._obj.SetJustificationArea(z, flags)

	def GetStepTransformation(self, flags:int=0) -> tuple[int, tuple[float,...]]:
		"""
		Gets the transformation matrix from the  model item's STEP model.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | matrix | tuple[float,...] | Array of STEP model transformation matrix values |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Transformation matrix supplied |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No model item set |
		| -3 | flags is invalid |
		| -4 | Model item has no STEP model |

		Available since E3.series TLB-Versions: 25.31
		"""
		dummy=0
		ret, matrix = self._obj.GetStepTransformation(dummy, flags)
		matrix = matrix[1:] if type(matrix) == tuple and len(matrix) > 0 else tuple()
		return ret, matrix

# -------------------- IDbeModelPinInterface--------------------
class DbeModelPin:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeModelPin. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current model pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current model pin item identifier |
		| 0 | No model pin item or an error occurred |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a model pin as the current item.

		:param id: Unique value identifying a model pin item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current model pin item identifier |
		| 0 | No current model pin item or an error occurred |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.SetId(id)

	def GetCrimpingRules(self) -> tuple[int, memoryview]:
		"""
		Gets the model pin item's crimping rules.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | rules | memoryview | Array of crimping rules passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of items in rules |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 20.00
		"""
		dummy=0
		return self._obj.GetCrimpingRules(dummy)

	def SetCrimpingRules(self, rules:memoryview) -> int:
		"""
		Sets the model pin item's crimping rules.

		:param rules: Array of crimping rules passed into the function
		:type memoryview: memoryview

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Alignment value set |
		| -1 | No physical pin set |
		| -2 | Invalid Granular Design object! |
		| -3 | Invalid rules array |

		Available since E3.series TLB-Versions: 20.00
		"""
		ret = self._obj.SetCrimpingRules(rules)
		return ret[0]

	def GetRoutingOffset(self, flags:int=0) -> tuple[int, float, float, float]:
		"""
		Gets the current routing offset values of the model pin.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Routing offset on the x-axis passed out of the function |
		| 2 | y | float | Routing offset on the y-axis passed out of the function |
		| 3 | z | float | Routing offset on the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Routing offset values supplied |
		| -1 | No project open or no pin item set |
		| -2 | flags is invalid |

		Available since E3.series TLB-Versions: 25.00
		"""
		dummy=0
		return self._obj.GetRoutingOffset(dummy, dummy, dummy, flags)

	def SetRoutingOffset(self, x:float, y:float, z:float, flags:int=0) -> int:
		"""
		Sets the current routing offset values of the model pin.

		:param x: Routing offset on the x-axis
		:type float: float
		:param y: Routing offset on the y-axis
		:type float: float
		:param z: Routing offset on the z-axis
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Routing offset values applied |
		| -1 | No project open or no pin item set |
		| -2 | flags is invalid |

		Available since E3.series TLB-Versions: 25.00
		"""
		return self._obj.SetRoutingOffset(x, y, z, flags)

	def GetPinProperties(self, keyList:str="", flags:int=0) -> str:
		"""
		Gets the model pin properties and their values.

		:param keyList: Comma delimited list of properties to retrieve. If "<Empty>", all properties are retrieved. Default value is "<Empty>", defaults to ""
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Properties supplied in a JSON object containing key-value pairs of pin properties and property values |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 25.31
		"""
		return self._obj.GetPinProperties(keyList, flags)

	def SetPinProperties(self, jsonInput:str, flags:int=0) -> int:
		"""
		Sets the model pin property values.

		:param jsonInput: JSON object containing key-value pairs of pin properties and property values to be changed
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model pin properties and values applied |
		| -1 | No pin item set |
		| -2 | No project open |
		| -3 | flags is invalid |
		| -4 | jsonInput is invalid |
		| -5 | jsonInput contains invalid keys |
		| -6 | jsonInput contains invalid values |
		| -7 | Error occurred |

		Available since E3.series TLB-Versions: 25.31
		"""
		return self._obj.SetPinProperties(jsonInput, flags)

# -------------------- IDbeNodeInterface--------------------
class DbeNode:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeNode. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current node item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current node item identifier |
		| 0 | No node item or an error occurred |

		Available since E3.series TLB-Versions: 21.21
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a node as the current item.

		:param id: Unique value identifying a node item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current node item identifier |
		| 0 | No current node item or an error occurred |

		Available since E3.series TLB-Versions: 21.21
		"""
		return self._obj.SetId(id)

	def GetDirection(self, flags:int= 0 ) -> int:
		"""
		Gets the direction of the node item.

		:param flags: Not used., defaults to  0 
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Node direction |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No node item set |
		| -3 | flags value is invalid |

		Available since E3.series TLB-Versions: 21.21
		"""
		return self._obj.GetDirection(flags)

	def IsBusPin(self) -> int:
		"""
		Indicates whether the node item is a bus pin.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Node is a bus pin |
		| 0 | Node is not a bus pin |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No node item set |

		Available since E3.series TLB-Versions: 21.21
		"""
		return self._obj.IsBusPin()

	def HasPassWires(self) -> int:
		"""
		Indicates whether the node item has pass wires.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Node has pass wires |
		| 0 | Node does not have pass wires |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No node item set |

		Available since E3.series TLB-Versions: 21.21
		"""
		return self._obj.HasPassWires()

	def GetTextIds(self, texttype:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the text items assigned to the node item.

		:param texttype: Text type filter. Only text identifiers with this Text Type value will be supplied. All text identifiers are supplied if texttype is set to 0. The default string value is  0, defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of text items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of items in ids |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No node item set |

		Available since E3.series TLB-Versions: 21.21
		"""
		dummy=0
		ret, ids = self._obj.GetTextIds(dummy, texttype)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetPosition(self) -> tuple[int, float, float]:
		"""
		Gets the node item's position.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Position on the x-axis passed out of the function |
		| 2 | y | float | Position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Position values are supplied |
		| -1 | No project open |
		| -2 | No node item set |

		Available since E3.series TLB-Versions: 21.21
		"""
		dummy=0
		return self._obj.GetPosition(dummy, dummy)

	def IsBusbarPin(self) -> int:
		"""
		Indicates whether the node item is a busbar pin.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Node is a busbar pin |
		| 0 | Node is not a busbar pin |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | No node item set |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.IsBusbarPin()

# -------------------- IDbeSlotInterface--------------------
class DbeSlot:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeSlot. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current slot item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current slot item identifier |
		| 0 | No slot item or an error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a slot as the current item.

		:param id: Unique value identifying a slot item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current slot item identifier |
		| 0 | No current slot item or an error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.SetId(id)

	def GetDirection(self) -> tuple[int, float, float, float]:
		"""
		Gets the direction of the slot item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Direction value of the x-axis |
		| 2 | y | float | Direction value of the y-axis |
		| 3 | z | float | Direction value of the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Direction values are provided |
		| -1 | No project open or slot item set |
		| -2 | Error accessing slot data |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		return self._obj.GetDirection(dummy, dummy, dummy)

	def GetFixType(self) -> int:
		"""
		Gets a value representing the fix type of the slot item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Error occurred |
		| 1..4 | Fix type value |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.GetFixType()

	def GetMountType(self) -> str:
		"""
		Gets the description of the slot item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Slot item description value |
		| "&lt;Empty&gt;" | Slot item has no description or an error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.GetMountType()

	def GetPosition(self, point:int) -> tuple[int, float, float, float]:
		"""
		Gets the position of the slot item.

		:param point: Indicates which position to supply. If 1, the first position is supplied. If 2, the second position is supplied
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Position value of the x-axis passed out of the function |
		| 2 | y | float | Position value of the y-axis passed out of the function |
		| 3 | z | float | Position value of the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Position values are supplied |
		| -1 | No project open or slot item set |
		| -2 | Error accessing slot data |
		| -3 | point is invalid |
		| -4 | Slot area is not rectangular, Available since v2023-24.21 |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		return self._obj.GetPosition(point, dummy, dummy, dummy)

	def GetRotation(self) -> tuple[int, float]:
		"""
		Gets the rotation to be adopted by the device being mounted on the slot item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | angle | float | Rotation value in degrees |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Rotation value is supplied |
		| -1 | No project open or slot item set |
		| -2 | Error accessing slot data |
		| -3 | Area slots have no rotation value |
		| -4 | Error determining the slot rotation |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		return self._obj.GetRotation(dummy)

	def GetSlotName(self, flags:int=0) -> str:
		"""
		Gets the display name of the slot item.

		:param flags: Flag bit values specifying how the display name is supplied., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Slot item display name value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.GetSlotName(flags)

	def SetSlotName(self, name:str, flags:int=0) -> int:
		"""
		Sets the display name of the slot item.

		:param name: New slot display name
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display name value applied |
		| -1 | No project open or slot item set |
		| -2 | Error accessing slot data |
		| -3 | name is invalid |
		| -4 | flags is invalid |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.SetSlotName(name, flags)

	def GetAreaPolygon(self, flags:int=0) -> tuple[int, tuple[float,...], tuple[float,...], tuple[float,...]]:
		"""
		Gets the polygon positions of the slot's area.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xarr | tuple[float,...] | Array of position values on the x-axis passed out of the function |
		| 2 | yarr | tuple[float,...] | Array of position values on the y-axis passed out of the function |
		| 3 | zarr | tuple[float,...] | Array of position values on the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Position values are supplied |
		| -1 | No project open or slot item set |
		| -2 | Error accessing slot data |
		| -3 | Slot is not an area type slot |
		| -4 | flags is invalid |

		Available since E3.series TLB-Versions: 24.21
		"""
		dummy=0
		ret, xarr, yarr, zarr = self._obj.GetAreaPolygon(dummy, dummy, dummy, flags)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		zarr = zarr[1:] if type(zarr) == tuple and len(zarr) > 0 else tuple()
		return ret, xarr, yarr, zarr

	def CreatePoint(self, modelid:int, xpos:float, ypos:float, zpos:float, xdir:float, ydir:float, zdir:float, rotation:float, description:str, name:str, flags:int=0) -> int:
		"""
		Creates a point slot on a model.

		:param modelid: Identifier of the new slot item
		:type int: int
		:param xpos: Position value on the x-axis
		:type float: float
		:param ypos: Position value on the y-axis
		:type float: float
		:param zpos: Position value on the z-axis
		:type float: float
		:param xdir: Slot direction on the x-axis
		:type float: float
		:param ydir: Slot direction on the y-axis
		:type float: float
		:param zdir: Slot direction on the z-axis
		:type float: float
		:param rotation: Rotation of the slot in degrees
		:type float: float
		:param description: Description of the slot
		:type str: str
		:param name: Name of the slot
		:type str: str
		:param flags: Flags for creating the new slot., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new slot item |
		| -1 | modelid is invalid |
		| -2 | flags is invalid |
		| -3 | Direction defined by xdir, ydir and zdir is invalid |
		| -4 | description is an empty string |
		| -7 | Error creating slot |

		Available since E3.series TLB-Versions: 25.12
		"""
		return self._obj.CreatePoint(modelid, xpos, ypos, zpos, xdir, ydir, zdir, rotation, description, name, flags)

	def CreateLine(self, modelid:int, xpos:float, ypos:float, zpos:float, xdir:float, ydir:float, zdir:float, length:float, width:float, rotation:float, description:str, name:str, flags:int=0) -> int:
		"""
		Creates a line slot on a model.

		:param modelid: Item identifier of the model
		:type int: int
		:param xpos: Position value on the x-axis
		:type float: float
		:param ypos: Position value on the y-axis
		:type float: float
		:param zpos: Position value on the z-axis
		:type float: float
		:param xdir: Slot direction on the x-axis
		:type float: float
		:param ydir: Slot direction on the y-axis
		:type float: float
		:param zdir: Slot direction on the z-axis
		:type float: float
		:param length: Length of the slot
		:type float: float
		:param width: Width of the slot
		:type float: float
		:param rotation: Rotation of the slot in degrees
		:type float: float
		:param description: Description of the slot
		:type str: str
		:param name: Name of the slot
		:type str: str
		:param flags: Flags for creating the new slot., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;0 | Identifier of the new slot item |
		| -1 | modelid is invalid |
		| -2 | flags is invalid |
		| -3 | Direction defined by xdir, ydir and zdir is invalid |
		| -4 | description is an empty string |
		| -5 | length is invalid |
		| -7 | Error creating slot |

		Available since E3.series TLB-Versions: 25.12
		"""
		return self._obj.CreateLine(modelid, xpos, ypos, zpos, xdir, ydir, zdir, length, width, rotation, description, name, flags)

	def CreateAreaRectangle(self, modelid:int, xpos:float, ypos:float, zpos:float, xdir:float, ydir:float, zdir:float, length:float, width:float, description:str, name:str, flags:int=0) -> int:
		"""
		Creates a rectangle shaped area slot on a model.

		:param modelid: Item identifier of the model
		:type int: int
		:param xpos: Position value on the x-axis
		:type float: float
		:param ypos: Position value on the y-axis
		:type float: float
		:param zpos: Position value on the z-axis
		:type float: float
		:param xdir: Slot direction on the x-axis
		:type float: float
		:param ydir: Slot direction on the y-axis
		:type float: float
		:param zdir: Slot direction on the z-axis
		:type float: float
		:param length: Length of the slot
		:type float: float
		:param width: Width of the slot
		:type float: float
		:param description: Description of the slot
		:type str: str
		:param name: Name of the slot
		:type str: str
		:param flags: Flags for creating the new slot., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new slot item |
		| -1 | modelid is invalid |
		| -2 | flags is invalid |
		| -3 | Direction defined by xdir, ydir and zdir is invalid |
		| -4 | description is an empty string |
		| -5 | length is invalid |
		| -6 | width is invalid |
		| -7 | Error creating slot |

		Available since E3.series TLB-Versions: 25.12
		"""
		return self._obj.CreateAreaRectangle(modelid, xpos, ypos, zpos, xdir, ydir, zdir, length, width, description, name, flags)

	def CreateAreaPolygon(self, modelid:int, xarr:list[float], yarr:list[float], zarr:list[float], xdir:float, ydir:float, zdir:float, description:str, name:str, flags:int=0) -> int:
		"""
		Creates a polygon shaped area slot on a model.

		:param modelid: Item identifier of the model
		:type int: int
		:param xarr: Array of position values on the x-axis
		:type list[float]: list[float]
		:param yarr: Array of position values on the y-axis
		:type list[float]: list[float]
		:param zarr: Array of position values on the z-axis
		:type list[float]: list[float]
		:param xdir: Slot direction on the x-axis
		:type float: float
		:param ydir: Slot direction on the y-axis
		:type float: float
		:param zdir: Slot direction on the z-axis
		:type float: float
		:param description: Description of the slot
		:type str: str
		:param name: Name of the slot
		:type str: str
		:param flags: Flags for creating the new slot., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new slot item |
		| -1 | modelid is invalid |
		| -2 | flags is invalid |
		| -3 | Direction defined by xdir, ydir and zdir is invalid |
		| -4 | xarr, yarr and zarr arrays are different sizes |
		| -5 | xarr, yarr and zarr arrays are too small |
		| -6 | Polygon defined in xarr, yarr and zarr is not closed |
		| -7 | Polygon shaped defined in xarr, yarr and zarr is non-planar |
		| -8 | Polygon shape defined in xarr, yarr and zarr is invalid |
		| -9 | Error creating slot |

		Available since E3.series TLB-Versions: 25.12
		"""
		xarr = [0.] + xarr
		yarr = [0.] + yarr
		zarr = [0.] + zarr
		return self._obj.CreateAreaPolygon(modelid, xarr, yarr, zarr, xdir, ydir, zdir, description, name, flags)

	def Delete(self, flags:int=0) -> int:
		"""
		Deletes the slot item from the model.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Slot was deleted |
		| -1 | No slot item set |
		| -2 | flags is invalid |
		| -3 | model is a mounting rail or cable duct |
		| -4 | Error occurred |

		Available since E3.series TLB-Versions: 25.12
		"""
		return self._obj.Delete(flags)

	def SetRotation(self, rotation:float, flags:int=0) -> int:
		"""
		Sets the rotation to be adopted by the device being mounted on the slot item.

		:param rotation: Rotation value in degrees
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Rotation value is applied |
		| -1 | No project open or slot item set |
		| -2 | flags value is invalid |
		| -3 | Area slots have no rotation value |
		| -4 | Line slots can only have rotation values of 0.0, +180.0 or -180.0 relative to the current rotation |
		| -5 | Error occurred |

		Available since E3.series TLB-Versions: 26.00
		"""
		return self._obj.SetRotation(rotation, flags)

	def GetDirectionRotation(self, flags:int=0) -> tuple[int, float, float, float]:
		"""
		Gets the direction rotation values of the slot item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xAxisRotation | float | Direction rotation value around the x-axis in degrees |
		| 2 | yAxisRotation | float | Direction rotation value around the y-axis  in degrees |
		| 3 | zAxisRotation | float | Direction rotation value around the z-axis  in degrees |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Direction rotation values are supplied |
		| -1 | No project open or slot item set |
		| -2 | flags value is invalid |

		Available since E3.series TLB-Versions: 26.00
		"""
		dummy=0
		return self._obj.GetDirectionRotation(dummy, dummy, dummy, flags)

	def SetDirectionRotation(self, xAxisRotation:float, yAxisRotation:float, zAxisRotation:float, flags:int=0) -> int:
		"""
		Sets the direction rotation values of the slot item.

		:param xAxisRotation: Direction rotation value around the x-axis in degrees
		:type float: float
		:param yAxisRotation: Direction rotation value around the y-axis  in degrees
		:type float: float
		:param zAxisRotation: Direction rotation value around the z-axis  in degrees
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Direction rotation values are applied |
		| -1 | No project open or slot item set |
		| -2 | flags value is invalid |
		| -3 | zAxisRotation must be 0.0 for front and back slot directions |
		| -4 | xAxisRotation must be 0.0 for left and right slot directions |
		| -5 | yAxisRotation must be 0.0 for top and bottom slot directions |
		| -6 | Slot direction cannot be changed |
		| -7 | Error occurred |

		Available since E3.series TLB-Versions: 26.00
		"""
		return self._obj.SetDirectionRotation(xAxisRotation, yAxisRotation, zAxisRotation, flags)

	def GetLength(self, flags:int= 0 ) -> tuple[int, float]:
		"""
		Gets the length of the slot item.

		:param flags: Not used., defaults to  0 
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | length | float | Length value in the measurement unit of the model |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Length value is supplied |
		| -1 | No project open or slot item set |
		| -2 | flags value is invalid |
		| -3 | Error accessing slot data |
		| -4 | Model has an invalid unit measurement |
		| -5 | Slot item is a point slot |
		| -6 | Error occurred in conversion between internal and model measurement units |

		Available since E3.series TLB-Versions: 26.01
		"""
		dummy=0
		return self._obj.GetLength(dummy, flags)

	def SetLength(self, length:float, flags:int= 0 ) -> int:
		"""
		Sets the length of the slot item.

		:param length: Length value in the measurement unit of the model
		:type float: float
		:param flags: Not used., defaults to  0 
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Length value is applied |
		| -1 | No project open or slot item set |
		| -2 | flags value is invalid |
		| -3 | Error accessing slot data |
		| -4 | Model has an invalid unit measurement |
		| -5 | Slot item is a point slot |
		| -6 | Memory allocation error occurred |
		| -7 | Error occurred in conversion between internal and model measurement units |

		Available since E3.series TLB-Versions: 26.01
		"""
		return self._obj.SetLength(length, flags)

	def GetWidth(self, flags:int= 0 ) -> tuple[int, float]:
		"""
		Gets the width of the slot item.

		:param flags: Not used., defaults to  0 
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | width | float | Width value in the measurement unit of the model |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Width value is supplied |
		| -1 | No project open or slot item set |
		| -2 | flags value is invalid |
		| -3 | Error accessing slot data |
		| -4 | Model has an invalid unit measurement |
		| -5 | Slot item is a point slot |
		| -6 | Error occurred in conversion between internal and model measurement units |

		Available since E3.series TLB-Versions: 26.01
		"""
		dummy=0
		return self._obj.GetWidth(dummy, flags)

	def SetWidth(self, width:float, flags:int= 0 ) -> int:
		"""
		Sets the width of the slot item.

		:param width: Sets the width of the slot item
		:type float: float
		:param flags: Not used., defaults to  0 
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Width value is applied |
		| -1 | No project open or slot item set |
		| -2 | flags value is invalid |
		| -3 | Error accessing slot data |
		| -4 | Model has an invalid unit measurement |
		| -5 | Slot item is a point slot |
		| -6 | Memory allocation error occurred |
		| -7 | Error occurred in conversion between internal and model measurement units |

		Available since E3.series TLB-Versions: 26.01
		"""
		return self._obj.SetWidth(width, flags)

	def GetDirectionEx(self, flags:int=0) -> tuple[int, float, float, float, int]:
		"""
		Gets the direction and facing side of the slot item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Direction value of the x-axis |
		| 2 | y | float | Direction value of the y-axis |
		| 3 | z | float | Direction value of the z-axis |
		| 4 | side | int | Side from where the slot faces |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Direction values are provided |
		| -1 | No project open or slot item set |
		| -2 | flags value is invalid |

		Available since E3.series TLB-Versions: 26.01
		"""
		dummy=0
		return self._obj.GetDirectionEx(dummy, dummy, dummy, dummy, flags)

# -------------------- IDbeJobInterface--------------------
class DbeJob:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize DbeJob. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def CreateDbeComponentObject(self) -> DbeComponent:
		"""
		Creates  an e3DbeComponent object.

		:return:
		Type: DbeComponent

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeComponent(self._obj.CreateDbeComponentObject())

	def CreateDbeAttributeObject(self) -> DbeAttribute:
		"""
		Creates  an e3DbeAttribute object.

		:return:
		Type: DbeAttribute

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeAttribute(self._obj.CreateDbeAttributeObject())

	def CreateDbeSymbolObject(self) -> DbeSymbol:
		"""
		Creates  an e3DbeSymbol object.

		:return:
		Type: DbeSymbol

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeSymbol(self._obj.CreateDbeSymbolObject())

	def CreateDbeTextObject(self) -> DbeText:
		"""
		Creates  an e3DbeText object.

		:return:
		Type: DbeText

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeText(self._obj.CreateDbeTextObject())

	def CreateDbeGraphObject(self) -> DbeGraph:
		"""
		The Object supplied allows access to the functionality of the e3DbeGraph object.

		:return:
		Type: DbeGraph

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeGraph(self._obj.CreateDbeGraphObject())

	def CreateDbeModelObject(self) -> DbeModel:
		"""
		Creates  an e3DbeModel object.

		:return:
		Type: DbeModel

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeModel(self._obj.CreateDbeModelObject())

	def CreateDbeModelPinObject(self) -> DbeModelPin:
		"""
		Creates  an e3DbeModelPin object.

		:return:
		Type: DbeModelPin

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeModelPin(self._obj.CreateDbeModelPinObject())

	def CreateDbeNodeObject(self) -> DbeNode:
		"""
		Creates  an e3DbeNode object.

		:return:
		Type: DbeNode

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeNode(self._obj.CreateDbeNodeObject())

	def CreateDbeSlotObject(self) -> DbeSlot:
		"""
		Creates  an e3DbeSlot object.

		:return:
		Type: DbeSlot

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeSlot(self._obj.CreateDbeSlotObject())

	def GetId(self) -> int:
		"""
		Gets the identifier of the current project item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current project item identifier |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a unique value as the current project item.

		:param id: 
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current project item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.SetId(id)

	def Save(self, flags:int=0) -> int:
		"""
		Saves the E³.DatabaseEditor project to the current path and file name.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project is saved |
		| -1 | No project open |
		| -2 | flags value is invalid |
		| -3 | Project is read-only |
		| -4 | Error occurred |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.Save(flags)

	def SaveAs(self, name:str, compressed:bool=False, flags:int=0) -> int:
		"""
		Saves the E³.DatabaseEditor project with a new path and file name.

		:param name: File path and name of project
		:type str: str
		:param compressed: Indicates whether the project is compressed. If 1, the project is saved as a compressed file. If 0, the project is saved as an uncompressed file., defaults to False
		:type bool: bool
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project is saved |
		| -1 | No project open |
		| -2 | flags value is invalid |
		| -3 | Symbol, model or component is open in edit mode |
		| -4 | Error occurred |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.SaveAs(name, compressed, flags)

	def NewModel(self, name:str, baseName:str, flags:int=0) -> int:
		"""
		Creates a model in the E³.DatabaseEditor.

		:param name: Name of the new model. Characteristic information can also be assigned using the format "<ModelName>¶<ModelCharacteristic>"
		:type str: str
		:param baseName: Name of the model to be used as a template. If baseName value is empty, no template is used
		:type str: str
		:param flags: Flags for creating the new model., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New model is created in the E³.DatabaseEditor |
		| -1 | flags is invalid |
		| -2 | baseName model not found |
		| -3 | Model is locked |
		| -4 | Model with name already exists |
		| -7 | name exceeds maximum length |
		| -8 | name contains invalid characters |
		| -9 | No open project |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.NewModel(name, baseName, flags)

	def EditModel(self, name:str, flags:int=0) -> int:
		"""
		Opens the model for editing in the E³.DatabaseEditor.

		:param name: Name of the model to edit
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Opens the model for editing in the E³.DatabaseEditor |
		| -1 | No open project |
		| -2 | Model not found |
		| -3 | Model is locked |
		| -4 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.EditModel(name, flags)

	def DeleteModel(self, name:str, flags:int=0) -> int:
		"""
		Deletes the model from the database.

		:param name: Name of the model to delete
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model is deleted from the database |
		| -1 | Error occurred |
		| -2 | Model not found |
		| -3 | Model is locked |
		| -5 | Model cannot be deleted |
		| -6 | No project open |
		| -7 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.DeleteModel(name, flags)

	def GetModelIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the E³.DatabaseEditor project models.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of models in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No models are found |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		dummy=0
		ret, ids = self._obj.GetModelIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetActiveModelId(self) -> int:
		"""
		Gets the model identifier of the current open sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current model identifier |
		| -1 | No E³.DatabaseEditor project open or sheet open |
		| -2 | Active sheet is not a model |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.GetActiveModelId()

	def NewSymbol(self, name:str, version:str, baseName:str, baseVersion:str, flags:int=0) -> int:
		"""
		Creates a symbol in the E³.DatabaseEditor.

		:param name: Name of the new symbol. Characteristic information can also be assigned using the format "<SymbolName>¶<SymbolCharacteristic>"
		:type str: str
		:param version: Version of the new symbol. If version value is empty, the version is set to 1
		:type str: str
		:param baseName: Name of the symbol to be used as a template. If baseName value is empty, no template is used
		:type str: str
		:param baseVersion: Version of the symbol to be used as a template. If baseVersion value is empty, the version is set to 1
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New symbol is created in the E³.DatabaseEditor |
		| -1 | No open project |
		| -2 | baseName symbol not found |
		| -3 | Symbol is locked |
		| -4 | Symbol with name and version already exists |
		| -5 | version is invalid |
		| -6 | baseVersion is invalid |
		| -7 | name exceeds maximum length |
		| -8 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.NewSymbol(name, version, baseName, baseVersion, flags)

	def EditSymbol(self, name:str, version:str, flags:int=0) -> int:
		"""
		Opens the symbol for editing in the E³.DatabaseEditor.

		:param name: Name of the symbol to edit
		:type str: str
		:param version: Version of the symbol to edit
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Opens the symbol for editing in the E³.DatabaseEditor |
		| -1 | No open project |
		| -2 | Symbol not found |
		| -3 | Symbol is locked |
		| -5 | version is too long |
		| -6 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.EditSymbol(name, version, flags)

	def DeleteSymbol(self, name:str, version:str, flags:int=0) -> int:
		"""
		Deletes the symbol from the database.

		:param name: Name of the symbol to delete
		:type str: str
		:param version: Version of the symbol to delete
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol is deleted from the database |
		| -1 | Error occurred |
		| -2 | Symbol not found |
		| -3 | Symbol is locked |
		| -4 | Symbol cannot be deleted |
		| -5 | version is invalid |
		| -6 | No project open |
		| -7 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.DeleteSymbol(name, version, flags)

	def GetSymbolIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the E³.DatabaseEditor project symbols.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbols in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No symbols are found |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetActiveSymbolId(self) -> int:
		"""
		Gets the symbol identifier of the current open sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current symbol identifier |
		| -1 | No E³.DatabaseEditor project open or sheet open |
		| -2 | Active sheet is not a symbol |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.GetActiveSymbolId()

	def NewComponent(self, name:str, version:str, baseName:str, baseVersion:str, flags:int=0) -> int:
		"""
		Adds a component to the database and starts the Component Wizard in the E³.DatabaseEditor.

		:param name: Name of the new component
		:type str: str
		:param version: Version of the new component. If version value is empty, the version is set to "1   "
		:type str: str
		:param baseName: Name of the component to be used as a template. If baseName value is empty, no template is used
		:type str: str
		:param baseVersion: Version of the component to be used as a template. If baseVersion value is empty, the version is set to "1   "
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Starts Component Wizard in the E³.DatabaseEditor |
		| -1 | No open project |
		| -2 | baseName component not found |
		| -3 | Component is locked |
		| -4 | Component with name and version already exists |
		| -5 | version is invalid |
		| -6 | baseVersion is invalid |
		| -7 | name exceeds maximum length |
		| -8 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.NewComponent(name, version, baseName, baseVersion, flags)

	def EditComponent(self, name:str, version:str, flags:int=0) -> int:
		"""
		Opens the component for editing in the E³.DatabaseEditor.

		:param name: Name of the component to edit
		:type str: str
		:param version: Version of the component to edit
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Opens Component Properties dialog in the E³.DatabaseEditor |
		| -1 | No open project |
		| -2 | Component not found |
		| -3 | Component is locked |
		| -5 | version is too long |
		| -6 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.EditComponent(name, version, flags)

	def DeleteComponent(self, name:str, version:str, flags:int=0) -> int:
		"""
		Deletes the component from the database.

		:param name: Name of the component to delete
		:type str: str
		:param version: Version of the component to delete
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component is deleted from the database |
		| -1 | Error occurred |
		| -2 | Component not found |
		| -3 | Component is locked |
		| -5 | version is invalid |
		| -6 | No open project |
		| -7 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.DeleteComponent(name, version, flags)

	def GetComponentIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the E³.DatabaseEditor project components.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of components in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No components are found or an error occurred |
		| -1 | No E³.DatabaseEditor project open |
		| -2 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		dummy=0
		ret, ids = self._obj.GetComponentIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetActiveComponentId(self) -> int:
		"""
		Gets the component identifier of the current open sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current component identifier |
		| -1 | No E³.DatabaseEditor project open or sheet open |
		| -2 | Active sheet is not a component |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.GetActiveComponentId()

	def Close(self, flags:int=0) -> int:
		"""
		Closes the E³.DatabaseEditor project.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 1 | Error occurred |
		| 1 | Project is closed or no project was open |
		| -1 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.Close(flags)

	def New(self, name:str, flags:int=0) -> int:
		"""
		Creates a new E³.DatabaseEditor project.

		:param name: Path and  name of the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project file
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.DatabaseEditor project was created |
		| 0 | Error occurred |
		| -1 | flags value is invalid |
		| -2 | Project already open |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.New(name, flags)

	def Create(self, name:str, flags:int=0) -> int:
		"""
		Creates a new E³.DatabaseEditor project.

		:param name: Path and name of the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project file
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.DatabaseEditor project was created |
		| 0 | Error occurred |
		| -1 | flags value is invalid |
		| -2 | A project is already open |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.Create(name, flags)

	def Open(self, name:str, flags:int=0) -> int:
		"""
		Opens an E³.DatabaseEditor project or connects to an already open E³.DatabaseEditor project.

		:param name: Path and file name of an. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project
		:type str: str
		:param flags: , defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.DatabaseEditor project was opened |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.Open(name, flags)

	def GetPath(self) -> str:
		"""
		Gets the system path of the project.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Project system path |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.GetPath()

	def GetName(self) -> str:
		"""
		Gets the name of the E³.DatabaseEditor project.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Project name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.GetName()

	def GetType(self) -> str:
		"""
		Gets the project's file name extension.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| ".&lt;File Extension&gt;" | Project file name extension |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.GetType()

	def GetSettingValue(self, name:str) -> typing.Union[str,int]:
		"""
		Gets a setting value.

		:param name: Unique name identifying the setting value to retrieve. See Setting Value Names for possible values
		:type str: str

		:return:
		Type: typing.Union[str,int]

		| Return Value | Description |
		|:-----:|:-----|
		| empty | Error occurred |
		| != empty | Setting value supplied |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.GetSettingValue(name)

	def SetSettingValue(self, name:str, value:typing.Union[str,int]) -> typing.Union[str,int]:
		"""
		Sets a setting value.

		:param name: Unique name identifying the setting value to modify. See Setting Value Names for possible values
		:type str: str
		:param value: Setting value to apply
		:type typing.Union[str,int]: typing.Union[str,int]

		:return:
		Type: typing.Union[str,int]

		| Return Value | Description |
		|:-----:|:-----|
		| empty | Error occurred |
		| != empty | Previous setting value |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.SetSettingValue(name, value)

	def GetOutbarText(self, index:int) -> tuple[int, tuple[str,...]]:
		"""
		Gets the lines of text displayed in the E³.DatabaseEditor Messages window.

		:param index: Start position of text lines to retrieve
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | lst | tuple[str,...] | Array of displayed text lines passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of displayed text lines |
		| 0 | No displayed text lines or an error occurred |

		Available since E3.series TLB-Versions: 25.32
		"""
		dummy=0
		ret, lst = self._obj.GetOutbarText(index, dummy)
		lst = lst[1:] if type(lst) == tuple and len(lst) > 0 else tuple()
		return ret, lst

	def GetResultText(self, index:int) -> tuple[int, tuple[str,...]]:
		"""
		Gets the lines of text displayed in the E³.DatabaseEditor Results window.

		:param index: Start position of text lines to retrieve
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | lst | tuple[str,...] | Array of displayed text lines passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of displayed text lines |
		| 0 | No displayed text lines or an error occurred |

		Available since E3.series TLB-Versions: 25.32
		"""
		dummy=0
		ret, lst = self._obj.GetResultText(index, dummy)
		lst = lst[1:] if type(lst) == tuple and len(lst) > 0 else tuple()
		return ret, lst

# -------------------- IDbeApplicationInterface--------------------
class DbeApplication:
	def __init__(self, pid: typing.Optional[int]=None) -> None:
		if pid is None:
			pid = _get_default_dbe()
		if pid is None:
			raise RuntimeError('No instance of E3.DatabaseEditor is currently running')
		self._obj = _raw_connect_dbe(pid)

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetName(self) -> str:
		"""
		Gets the current name of E³.DatabaseEditor.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Build&gt;" | Name of E³.DatabaseEditor |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetName()

	def GetVersion(self) -> str:
		"""
		Gets the current version of E³.DatabaseEditor.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Version&gt;" | Version of E³.DatabaseEditor |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetVersion()

	def GetFullName(self) -> str:
		"""
		Gets the current path and name of E³.DatabaseEditor.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Build&gt;" | Path and name of E³.DatabaseEditor |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetFullName()

	def GetId(self) -> int:
		"""
		Gets the identifier of the current E³.DatabaseEditor item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current E³.DatabaseEditor item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetId()

	def Quit(self) -> int:
		"""
		Stops the script execution.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Script will immediately stop |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Quit()

	def Sleep(self, msec:int) -> int:
		"""
		Temporarily stops the script execution.

		:param msec: Number of milliseconds to sleep
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Script execution temporarily stops |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Sleep(msec)

	def Minimize(self) -> int:
		"""
		Minimizes the E³.DatabaseEditor application window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.DatabaseEditor application window is minimized |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Minimize()

	def Maximize(self) -> int:
		"""
		Maximizes the E³.DatabaseEditor application window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.DatabaseEditor application window is maximized |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Maximize()

	def Display(self) -> int:
		"""
		Displays the E³.DatabaseEditor application window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.DatabaseEditor application window is displayed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Display()

	def ShowNormal(self) -> int:
		"""
		Displays the E³.DatabaseEditor application window in its normal window state.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.DatabaseEditor application window is displayed in its normal window state |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ShowNormal()

	def PutMessage(self, text:str, item:int=0) -> int:
		"""
		Outputs text to the E³.DatabaseEditor Messages window.

		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.PutMessage(text, item)

	def PutInfo(self, ok:int, text:str, item:int=0) -> int:
		"""
		Outputs information text to the E³.DatabaseEditor Messages window.

		:param ok: Indicates whether an additional information dialog should appear. If set to 0, no additional information dialog appears. If set to 1, an additional information dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.PutInfo(ok, text, item)

	def PutWarning(self, ok:int, text:str, item:int=0) -> int:
		"""
		Outputs warning text to the E³.DatabaseEditor Messages window.

		:param ok: Indicates whether an additional warning dialog should appear. If set to 0, no additional warning dialog appears. If set to 1, an additional warning dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.PutWarning(ok, text, item)

	def PutError(self, ok:int, text:str, item:int=0) -> int:
		"""
		Outputs error text to the E³.DatabaseEditor Messages window.

		:param ok: Indicates whether an additional error dialog should appear. If set to 0, no additional error dialog appears. If set to 1, an additional error dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.PutError(ok, text, item)

	def GetTestMark(self, num:int) -> int:
		"""


		:param num: 
		:type int: int

		:return:
		Type: int

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetTestMark(num)

	def SetTestMark(self, num:int, value:int) -> int:
		"""


		:param num: 
		:type int: int
		:param value: 
		:type int: int

		:return:
		Type: int

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetTestMark(num, value)

	def SetPrinterLinewidth(self, linewidth:float) -> float:
		"""
		Sets the  printer line width setting value.

		:param linewidth: Indicates how line widths will be printed. If 0.0, line width on sheets is used but print function scaling parameters are ignored. If -1.0, line width as defined on sheets is used according to print function scaling parameters
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 0.0 or -1.0 | Previous print line width setting value |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetPrinterLinewidth(linewidth)

	def GetInstallationPath(self) -> str:
		"""
		Gets the installation path of E³.DatabaseEditor.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Installation path of the E³.DatabaseEditor |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetInstallationPath()

	def GetInstallationLanguage(self) -> int:
		"""
		Gets the installation language of the E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current language identifier |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetInstallationLanguage()

	def EnableLogfile(self, en:int) -> int:
		"""
		Sets whether message data is to be written to the log files.

		:param en: Indicates whether data is written to the log files. If 1, data is written to the log files. If 0, data is not written to the log files
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Enabling of data to be written set. |
		| &lt; 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.EnableLogfile(en)

	def GetComponentDatabase(self) -> str:
		"""
		Gets the connection string of the currently active component database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Connection&gt;" | Connection string of the currently active component database |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetComponentDatabase()

	def GetConfigurationDatabase(self) -> str:
		"""
		Gets the connection string of the currently active configuration database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Connection&gt;" | Connection string of the currently active configuration database |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetConfigurationDatabase()

	def GetSymbolDatabase(self) -> str:
		"""
		Gets the connection string of the currently active symbol database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Database&gt;" | Connection string of the symbol database |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetSymbolDatabase()

	def GetLicense(self, feature:str) -> int:
		"""
		Includes a module or feature license to be adopted by the current instance of E³.DatabaseEditor.

		:param feature: Licensed feature to be used. See Module and Feature License Names for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Error occurred |
		| 1 | Licensed feature included |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetLicense(feature)

	def FreeLicense(self, feature:str) -> int:
		"""
		Releases a module or feature license adopted by the current instance of E³.DatabaseEditor.

		:param feature: Licensed feature to free up. See Module and Feature License Names for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Licensed feature could not be found |
		| 1 | Licensed feature freed up |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.FreeLicense(feature)

	def GetInfoCount(self) -> int:
		"""
		Gets the number of information messages already displayed in E³.DatabaseEditor Messages window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Number of information messages already displayed in E³.DatabaseEditor Messages window |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetInfoCount()

	def GetWarningCount(self) -> int:
		"""
		Gets the number of warning messages already displayed in E³.DatabaseEditor Messages window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Number of warning messages already displayed in  E³.DatabaseEditor Messages window |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetWarningCount()

	def GetErrorCount(self) -> int:
		"""
		Gets the number of error messages already displayed in E³.DatabaseEditor Messages window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Number of error messages already displayed in E³.DatabaseEditor Messages window |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetErrorCount()

	def GetScriptArguments(self) -> tuple[str,...]:
		"""
		Gets the arguments passed into the script.

		:return:
		Type: tuple[str,...]

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetScriptArguments()

	def SortArrayByIndex(self, array:list[typing.Any], rows:int, columns:int, sortindex1:int, sortindex2:int) -> tuple[int, list[typing.Any]]:
		"""
		Sorts the contents of a 1 or 2 dimensional array.

		:param array: Array to sort passed in to the function unsorted and passed out sorted
		:type list[typing.Any]: list[typing.Any]
		:param rows: Number of rows in. array
		:type int: int
		:param columns: Number of columns in. array
		:type int: int
		:param sortindex1: Primary element in. array. to sort by
		:type int: int
		:param sortindex2: Secondary element in. array. to sort by
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | array | list[typing.Any] | Array to sort passed in to the function unsorted and passed out sorted |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Array successfully sorted |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SortArrayByIndex(array, rows, columns, sortindex1, sortindex2)

	def FullName(self) -> str:
		"""
		Gets the current path and name of E³.DatabaseEditor.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| &lt;"Full Name"&gt; | Path and name of E³.DatabaseEditor |
		| &lt;"Empty"&gt; | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.FullName()

	def ScriptArguments(self) -> tuple[str,...]:
		"""
		Gets the arguments passed into the script.

		:return:
		Type: tuple[str,...]

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ScriptArguments()

	def IsCable(self) -> int:
		"""
		Gets the usage status of the Cable module for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Cable module is in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsCable()

	def IsSchema(self) -> int:
		"""
		Gets the usage status of the Schema module for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Schema module is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsSchema()

	def IsMultiuser(self) -> int:
		"""
		Gets the usage status of the multi-user functionality for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Multi-user functionality is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsMultiuser()

	def IsPanel(self) -> int:
		"""
		Gets the usage status of the Panel module for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Panel module is in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsPanel()

	def IsWire(self) -> int:
		"""
		Gets the usage status of the Wire functionality for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Wire functionality is in use |
		| 0 | Wire functionality is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsWire()

	def IsSmallBusiness(self) -> int:
		"""
		Gets the usage status of the E³.SmallProject version for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | E³.SmallProject version is in use |
		| 0 | E³.SmallProject version is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsSmallBusiness()

	def IsDemo(self) -> int:
		"""
		Gets the usage status of the demonstration version for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Demonstration version is in use |
		| 0 | Demonstration version is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsDemo()

	def IsViewer(self) -> int:
		"""
		Gets the usage status of the Viewer version for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Viewer version is in use |
		| 0 | Viewer version is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsViewer()

	def IsViewPlus(self) -> int:
		"""
		Gets the usage status of the ViewPlus version for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | ViewPlus version is in use |
		| 0 | ViewPlus version is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsViewPlus()

	def IsStudent(self) -> int:
		"""
		Gets the usage status of the Student version for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Student version is in use |
		| 0 | Student version is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsStudent()

	def IsCaddyDemo(self) -> int:
		"""
		Gets the  usage status of the Caddy Demonstration version for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Caddy Demonstration version is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsCaddyDemo()

	def GetBuild(self) -> str:
		"""
		Gets the current build version of E³.DatabaseEditor.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Build&gt;" | Build version of E³.DatabaseEditor |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetBuild()

	def SortArrayByIndexEx(self, array:list[typing.Any], options:list[typing.Any]) -> tuple[int, list[typing.Any]]:
		"""
		Sorts the contents of a 1 or 2 dimensional array.

		:param array: Array to sort passed in to the function unsorted and passed out sorted
		:type list[typing.Any]: list[typing.Any]
		:param options: Array of sorting criteria
		:type list[typing.Any]: list[typing.Any]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | array | list[typing.Any] | Array to sort passed in to the function unsorted and passed out sorted |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Array successfully sorted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SortArrayByIndexEx(array, options)

	def GetRegistryVersion(self) -> str:
		"""
		Gets the internal major version of E³.DatabaseEditor.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Version&gt;" | Internal version of E³.DatabaseEditor |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetRegistryVersion()

	def GetLanguageDatabase(self) -> str:
		"""
		Gets the connection string of the currently active language database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Connection&gt;" | Connection string of the currently active language database |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetLanguageDatabase()

	def IsRedliner(self) -> int:
		"""
		Gets the usage status of the Redliner version for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Redliner version is in use |
		| 0 | Redliner version is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsRedliner()

	def ClearOutputWindow(self) -> None:
		"""
		Clears the content of the E³.DatabaseEditor Messages window.

		:return:
		No return value.

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ClearOutputWindow()

	def AvoidAutomaticClosing(self, avoid:bool=True) -> bool:
		"""
		Sets the ability for E³.DatabaseEditor to remain open following the script process ending.

		:param avoid: Indicates whether. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. should remain open. If 1, E³.DatabaseEditor remains open. If 0, E³.DatabaseEditor may close., defaults to True
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous status was for E³.DatabaseEditor to remains open |
		| 0 | Previous status was for E³.DatabaseEditor to maybe close |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.AvoidAutomaticClosing(avoid)

	def ScriptFullName(self) -> str:
		"""
		Gets the name and path of the script running internally.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Name and path of the script running internally |
		| "&lt;Empty&gt;" | Script is being run externally |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ScriptFullName()

	def ScriptName(self) -> str:
		"""
		Gets the name of the script running internally.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Name of the script running internally |
		| "&lt;Empty&gt;" | Script is being run externally |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ScriptName()

	def GetPluginObject(self, Plugin:typing.Any) -> typing.Any:
		"""
		Gets or creates an instance of a plugin object.

		:param Plugin: Name of the plugin
		:type typing.Any: typing.Any

		:return:
		Type: typing.Any

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetPluginObject(Plugin)

	def Include(self, text:str) -> int:
		"""
		Executes a script and includes its defined functions for use within the current script.

		:param text: Path and name of the script file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 5 | Recursive call occurred, Available since v2021 - 22.52, v2022 - 23.50 and v2023-24.10 |
		| 4 | Error occurred |
		| 3 | Error in script code |
		| 2 | Error occurred |
		| 1 | text script file not found or is empty |
		| 0 | Script is executed |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Include(text)

	def GetLogfileName(self, index:int=0) -> str:
		"""
		Gets the current path and file name of the log file.

		:param index: Indicates which log file path is required. If 0, the log file of the messages is returned. If 1, the log file of the results is returned., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File Path&gt;" | Log file of E³.DatabaseEditor |
		| "&lt;Empty&gt;" | No log file assigned or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetLogfileName(index)

	def SetLogfileName(self, logfile:str, index:int=0) -> int:
		"""
		Sets the current path and file name of the log file.

		:param logfile: Path and name of the new log file
		:type str: str
		:param index: Indicates which log file path is to be set. If 0, the messages log file path is set. If 1, the results log file path is set., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Log file path is set |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetLogfileName(logfile, index)

	def GetWorkspaceName(self) -> str:
		"""
		Gets the current workspace configuration name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Workspace&gt;" | Name of the current workspace configuration |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetWorkspaceName()

	def GetActualDatabase(self) -> str:
		"""
		Gets the current database configuration.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Database&gt;" | Name of the current database configuration |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetActualDatabase()

	def SetActualDatabase(self, dbname:str) -> int:
		"""
		Sets the current database configuration.

		:param dbname: Name of the database configuration
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Current database configuration applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetActualDatabase(dbname)

	def GetDefinedDatabases(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the configuration names of the defined databases available.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | dbnames | tuple[str,...] | Array of database configuration names |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in dbnames |
		| 0 | No database configurations or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, dbnames = self._obj.GetDefinedDatabases(dummy)
		dbnames = dbnames[1:] if type(dbnames) == tuple and len(dbnames) > 0 else tuple()
		return ret, dbnames

	def GetDefinedDatabaseConnectionStrings(self, dbname:str) -> tuple[int, str, str, str]:
		"""
		Gets the connection strings for a database configuration.

		:param dbname: Name of the database configuration
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | cmp_cs | str | Component database connection string |
		| 2 | sym_cs | str | Symbol database connection string |
		| 3 | cnf_cs | str | Configuration database connection string |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connection strings successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		return self._obj.GetDefinedDatabaseConnectionStrings(dbname, dummy, dummy, dummy)

	def SetDefinedDatabaseConnectionStrings(self, dbname:str, cmp_cs:str, sym_cs:str, cnf_cs:str) -> int:
		"""
		Creates or modifies a database configuration.

		:param dbname: Name of the database configuration
		:type str: str
		:param cmp_cs: Component database connection string
		:type str: str
		:param sym_cs: Symbol database connection string
		:type str: str
		:param cnf_cs: Configuration database connection string
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connection strings successfully applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetDefinedDatabaseConnectionStrings(dbname, cmp_cs, sym_cs, cnf_cs)

	def SetLanguageDatabase(self, dbname:str) -> int:
		"""
		Sets the currently active language database.

		:param dbname: Connection string for a language database
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Database successfully assigned as the language database |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetLanguageDatabase(dbname)

	def SetTemplateFileDBE(self, templatefilename:str) -> int:
		"""
		Sets the project settings template file.

		:param templatefilename: Path and name of a template file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Template file settings assigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetTemplateFileDBE(templatefilename)

	def GetTemplateFileDBE(self) -> str:
		"""
		Gets the project settings template file.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File&gt;" | Path and name of the template file |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetTemplateFileDBE()

	def IsScriptRunning(self) -> bool:
		"""
		Indicates if instances of E³ API interfaces currently exist.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Instances of E³ API interfaces exist |
		| 0 | Instances of E³ API interfaces do not exist |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsScriptRunning()

	def SetTriggerReturn(self, value:int) -> int:
		"""
		Sets the current trigger script return value.

		:param value: Trigger return value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..7 | Previous trigger return value |
		| 0 | No trigger is active |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetTriggerReturn(value)

	def GetTriggerReturn(self) -> int:
		"""
		Gets the current trigger script return value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No trigger is active |
		| 1..7 | Trigger script return value |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetTriggerReturn()

	def GetComponentDatabaseTableSchema(self) -> str:
		"""
		Gets the table schema of the currently active component database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Schema&gt;" | Table schema of the currently active component database |
		| "&lt;Empty&gt;" | No table schema or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetComponentDatabaseTableSchema()

	def GetConfigurationDatabaseTableSchema(self) -> str:
		"""
		Gets the table schema of the currently active configuration database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Schema&gt;" | Table schema of the currently active configuration database |
		| "&lt;Empty&gt;" | No table schema or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetConfigurationDatabaseTableSchema()

	def GetSymbolDatabaseTableSchema(self) -> str:
		"""
		Gets the table schema of the currently active symbol database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Schema&gt;" | Table schema of the currently active symbol database |
		| "&lt;Empty&gt;" | No table schema or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetSymbolDatabaseTableSchema()

	def GetLanguageDatabaseTableSchema(self) -> str:
		"""
		Gets the table schema of the currently active language database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Schema&gt;" | Table schema of the currently active language database |
		| "&lt;Empty&gt;" | No table schema or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetLanguageDatabaseTableSchema()

	def GetProcessProperty(self, what:str) -> str:
		"""
		Gets the value of a property of the E³.DatabaseEditor's process.

		:param what: Process property
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Value&gt;" | Select pages setting value |
		| "&lt;Empty&gt;" | Process property has no value or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetProcessProperty(what)

	def IsFluid(self) -> int:
		"""
		Gets the usage status of the Fluid module for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Fluid module is in use |
		| 0 | Fluid module is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsFluid()

	def IsFormboard(self) -> int:
		"""
		Gets the usage status of the Formboard module for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Formboard module is in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsFormboard()

	def GetTrigger(self, name:str) -> tuple[int, str]:
		"""
		Gets a trigger's status and designated script file.

		:param name: Trigger name
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | filename | str | Path of designated script file to be triggered passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Trigger is active |
		| 0 | Trigger is inactive |
		| -2 | name is invalid |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		return self._obj.GetTrigger(name, dummy)

	def SetTrigger(self, name:str, filename:str, active:int) -> int:
		"""
		Sets a trigger's status and designated script file.

		:param name: Trigger name
		:type str: str
		:param filename: Path of designated script file to be triggered
		:type str: str
		:param active: Trigger status
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous trigger status was active |
		| 0 | Previous trigger status was inactive |
		| -1 | filename is invalid |
		| -2 | name is invalid |
		| -3 | Trigger registry key is missing or set to 0 |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetTrigger(name, filename, active)

	def IsEconomy(self) -> int:
		"""
		Gets the usage status of the economy version for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Economy version is in use |
		| 0 | Economy version is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsEconomy()

	def GetAvailableLanguages(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the available language names.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | languages | tuple[str,...] | Array of available language names passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in languages |
		| 0 | No available language names are found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, languages = self._obj.GetAvailableLanguages(dummy)
		languages = languages[1:] if type(languages) == tuple and len(languages) > 0 else tuple()
		return ret, languages

	def GetTranslatedText(self, text:str, language:str) -> str:
		"""
		Gets the text value with all text tokens translated.

		:param text: Text to translate
		:type str: str
		:param language: Translation language
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Translated text or text |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetTranslatedText(text, language)

	def Run(self, filename:str, arguments:list[str]) -> int:
		"""
		Immediately executes a script internally.

		:param filename: Path and name of script file
		:type str: str
		:param arguments: Array of script arguments
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| Any | Return value from the executed script |
		| -1 | Return value from the executed script or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.Run(filename, arguments)

	def SetScriptReturn(self, value:int) -> int:
		"""
		Sets the current script return value.

		:param value: Script return value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| Any | Previous script return value |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetScriptReturn(value)

	def GetScriptReturn(self) -> int:
		"""
		Gets the current script return value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| Any | Script return value |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetScriptReturn()

	def GetEnableInteractiveDialogs(self) -> int:
		"""
		Gets the setting value enabling interactive dialogs to appear.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Interactive dialogs are set to appear |
		| 0 | Interactive dialogs are not set to appear |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetEnableInteractiveDialogs()

	def SetEnableInteractiveDialogs(self, value:bool) -> int:
		"""
		Sets the setting value enabling interactive dialogs to appear.

		:param value: New enabling interactive dialogs value. If 1, interactive dialogs are enabled. If 0, interactive dialogs are disabled
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous value for enabling interactive dialogs enabling interactive dialogs was 1 |
		| 0 | Previous value for enabling interactive dialogs enabling interactive dialogs was 0 |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetEnableInteractiveDialogs(value)

	def IsWireWorks(self) -> int:
		"""
		Gets the usage status of the WireWorks functionality for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | WireWorks functionality is in use |
		| 0 | WireWorks functionality is not in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsWireWorks()

	def SetModalWindow(self, hWnd:int) -> int:
		"""
		Sets the window handle of the modal window in front of the E³.DatabaseEditor.

		:param hWnd: Handle of the window
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Modal window value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetModalWindow(hWnd)

	def GetModalWindow(self) -> int:
		"""
		Gets the window handle of the modal window in front of the E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Handle of the modal window in front of E³.DatabaseEditor |
		| 0 | No modal window is in front of E³.DatabaseEditor or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetModalWindow()

	def BeginForeignTask(self) -> int:
		"""
		Changes the status of E³.DatabaseEditor to inactive.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Previous status of E³.DatabaseEditor was active |
		| 1 | Previous status of E³.DatabaseEditor was inactive |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.BeginForeignTask()

	def EndForeignTask(self) -> int:
		"""
		Changes the status of E³.DatabaseEditor to active.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Previous status of E³.DatabaseEditor was active |
		| 1 | Previous status of E³.DatabaseEditor was inactive |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.EndForeignTask()

	def IsFunctionalDesign(self) -> int:
		"""
		Gets the usage status of the Functional Design module for E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Functional Design module is in use |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsFunctionalDesign()

	def GetProjectInformation(self, filename:str) -> tuple[int, str, int, int]:
		"""
		Gets a .e3s project's information.

		:param filename: File name of the project. If no project is open, a project file name can be passed into the function. If a project is open, the project file name is passed out of the function
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | filename | str | File name of the project. If no project is open, a project file name can be passed into the function. If a project is open, the project file name is passed out of the function |
		| 2 | _type | int | Type of project passed out of the function |
		| 3 | is_dbe | int | Value passed out of the function indicating if the project is an. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project. If 1, the project is an E³.DatabaseEditor project. If 0, the project is an E³.series project |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Project information provided |
		| 1 | filename was not found |
		| 2 | File information could not be read |
		| 3 | File is already open |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		return self._obj.GetProjectInformation(filename, dummy, dummy)

	def ResetInfoCount(self) -> int:
		"""
		Resets the information count of E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Information count value before it was reset |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ResetInfoCount()

	def ResetWarningCount(self) -> int:
		"""
		Resets the warning count of E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Warning count value before it was reset |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ResetWarningCount()

	def ResetErrorCount(self) -> int:
		"""
		Resets the error count of E³.DatabaseEditor.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Error count value before it was reset |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ResetErrorCount()

	def GetLicensePermanent(self, feature:str) -> int:
		"""
		Includes a module or feature license to be adopted by all E³.series processes.

		:param feature: Licensed feature to be used. See Module and Feature License Names for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Error occurred |
		| 1 | Licensed feature included |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetLicensePermanent(feature)

	def FreeLicensePermanent(self, feature:str) -> int:
		"""
		Releases a module or feature license adopted by E³.series on a permanent basis.

		:param feature: Licensed feature to be used. See Module and Feature License Names for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Licensed feature could not be found |
		| 1 | Licensed feature freed up |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.FreeLicensePermanent(feature)

	def GetProvider(self, dbname:str) -> str:
		"""
		Gets the database provider.

		:param dbname: Database configuration name
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Provider&gt;" | Name of the database provider |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetProvider(dbname)

	def GetPrintCropMarks(self) -> int:
		"""
		Gets the status of the print crop marks.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Print crop marks usage is on |
		| 0 | Print crop marks usage is off |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.GetPrintCropMarks()

	def GetPrintPageNumbers(self) -> int:
		"""
		Gets the print page number setting value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Page numbers will be printed |
		| 0 | Page numbers will not be printed |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.GetPrintPageNumbers()

	def SetPrintPageNumbers(self, set:bool) -> int:
		"""
		Sets the print page number setting value.

		:param set: Indicates the print page number setting value. If 1, the page numbers are printed. If 0, the page numbers are not printed
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..1 | Previous value of the print page number |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.SetPrintPageNumbers(set)

	def SetPrintSheetOrder(self, set:int) -> int:
		"""
		Sets the print page order setting value.

		:param set: Indicates the print page order setting
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..1 | Previous value of the print page order setting |

		Available since E3.series TLB-Versions: 10.20
		"""
		return self._obj.SetPrintSheetOrder(set)

	def SelectComponentFromTable(self) -> tuple[int, str, str]:
		"""
		Gets the interactively selected component name and version from the E³.DatabaseEditor Component Table dialog.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ComponentName | str | Selected component name passed out of the function |
		| 2 | ComponentVersion | str | Selected component version passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component was selected |
		| 0 | No component was selected |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		return self._obj.SelectComponentFromTable(dummy, dummy)

	def GetDatabaseTableSelectedComponents(self) -> tuple[int, tuple[str,...], tuple[str,...]]:
		"""
		Gets the names and versions of the components selected in the E³.DatabaseEditor's Component Table.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ComponentArray | tuple[str,...] | Array of component names |
		| 2 | VersionArray | tuple[str,...] | Array of component versions |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ComponentArray and VersionArray |
		| 0 | No components are selected or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		ret, ComponentArray, VersionArray = self._obj.GetDatabaseTableSelectedComponents(dummy, dummy)
		ComponentArray = ComponentArray[1:] if type(ComponentArray) == tuple and len(ComponentArray) > 0 else tuple()
		VersionArray = VersionArray[1:] if type(VersionArray) == tuple and len(VersionArray) > 0 else tuple()
		return ret, ComponentArray, VersionArray

	def GetDatabaseTreeSelectedComponents(self) -> tuple[int, tuple[str,...], tuple[str,...]]:
		"""
		Gets the names and versions of the components selected in the E³.DatabaseEditor Component database tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ComponentName | tuple[str,...] | Array of component names |
		| 2 | Version | tuple[str,...] | Array of component versions |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ComponentArray and VersionArray |
		| 0 | No components are selected or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		ret, ComponentName, Version = self._obj.GetDatabaseTreeSelectedComponents(dummy, dummy)
		ComponentName = ComponentName[1:] if type(ComponentName) == tuple and len(ComponentName) > 0 else tuple()
		Version = Version[1:] if type(Version) == tuple and len(Version) > 0 else tuple()
		return ret, ComponentName, Version

	def GetDatabaseTreeSelectedSymbols(self) -> tuple[int, tuple[str,...], tuple[str,...]]:
		"""
		Gets the names and versions of the symbols selected in the E³.DatabaseEditor Symbol database tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | SymbolName | tuple[str,...] | Array of symbol names |
		| 2 | Version | tuple[str,...] | Array of symbol versions |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in SymbolArray and VersionArray |
		| 0 | No symbols are selected or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		ret, SymbolName, Version = self._obj.GetDatabaseTreeSelectedSymbols(dummy, dummy)
		SymbolName = SymbolName[1:] if type(SymbolName) == tuple and len(SymbolName) > 0 else tuple()
		Version = Version[1:] if type(Version) == tuple and len(Version) > 0 else tuple()
		return ret, SymbolName, Version

	def GetDatabaseTreeSelectedModels(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the names of the models selected in the E³.DatabaseEditor's Model tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ModelName | tuple[str,...] | Array of model names |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ModelArray |
		| 0 | No models are selected or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		ret, ModelName = self._obj.GetDatabaseTreeSelectedModels(dummy)
		ModelName = ModelName[1:] if type(ModelName) == tuple and len(ModelName) > 0 else tuple()
		return ret, ModelName

	def ClearResultWindow(self) -> None:
		"""
		Clears the content of the E³.DatabaseEditor Results window.

		:return:
		No return value.

		Available since E3.series TLB-Versions: 11.80
		"""
		return self._obj.ClearResultWindow()

	def BringToForeground(self) -> int:
		"""
		Brings the E³.DatabaseEditor application to the foreground of the monitor display.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | E³.DatabaseEditor brought to the foreground |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.90
		"""
		return self._obj.BringToForeground()

	def PutErrorEx(self, flags:int, text:str, item:int, red:int, green:int, blue:int) -> int:
		"""
		Outputs error text to the E³.DatabaseEditor Messages window.

		:param flags: Indicates whether an additional error dialog should appear. If set to 0, no additional error dialog appear. If set to 1, an additional error dialog appear
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project
		:type int: int
		:param red: RGB colorspace's red value for the text color
		:type int: int
		:param green: RGB colorspace's green value for the text color
		:type int: int
		:param blue: RGB colorspace's blue value for the text color
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 11.90
		"""
		return self._obj.PutErrorEx(flags, text, item, red, green, blue)

	def PutWarningEx(self, flags:int, text:str, item:int, red:int, green:int, blue:int) -> int:
		"""
		Outputs warning text to the E³.DatabaseEditor Messages window.

		:param flags: Indicates whether an additional warning dialog should appear. If set to 0, no additional warning dialog appears. If set to 1, an additional warning dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project
		:type int: int
		:param red: RGB colorspace's red value for the text color
		:type int: int
		:param green: RGB colorspace's green value for the text color
		:type int: int
		:param blue: RGB colorspace's blue value for the text color
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 11.90
		"""
		return self._obj.PutWarningEx(flags, text, item, red, green, blue)

	def PutInfoEx(self, flags:int, text:str, item:int, red:int, green:int, blue:int) -> int:
		"""
		Outputs information text to the E³.DatabaseEditor Messages window.

		:param flags: Indicates whether an additional information dialog should appear. If set to 0, no additional information dialog appears. If set to 1, an additional information dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project
		:type int: int
		:param red: RGB colorspace's red value for the text color
		:type int: int
		:param green: RGB colorspace's green value for the text color
		:type int: int
		:param blue: RGB colorspace's blue value for the text color
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 11.90
		"""
		return self._obj.PutInfoEx(flags, text, item, red, green, blue)

	def PutMessageEx(self, flags:int, text:str, item:int, red:int, green:int, blue:int) -> int:
		"""
		Outputs text to the E³.DatabaseEditor Messages window.

		:param flags: Not used
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project
		:type int: int
		:param red: RGB colorspace's red value for the text color
		:type int: int
		:param green: RGB colorspace's green value for the text color
		:type int: int
		:param blue: RGB colorspace's blue value for the text color
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 11.90
		"""
		return self._obj.PutMessageEx(flags, text, item, red, green, blue)

	def ActivateOutputWindow(self, windowId:int) -> int:
		"""
		Displays an output window in the E³.DatabaseEditor.

		:param windowId: Identifier of the output window to display
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the previously displayed output window |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.90
		"""
		return self._obj.ActivateOutputWindow(windowId)

	def SetChildWindowState(self, state:int) -> int:
		"""
		Sets the child windows' state.

		:param state: Child window state
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Child window state is changed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.SetChildWindowState(state)

	def ShowPluginWindow(self, bShowPluginWindow:bool, guid:str) -> int:
		"""
		Displays or hides an E³.DatabaseEditor plugin window.

		:param bShowPluginWindow: Indicates whether the plugin window is displayed. If 1, the plugin window is displayed. If 0, the plugin window is not displayed
		:type bool: bool
		:param guid: GUID of the plugin window
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value is always returned |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.ShowPluginWindow(bShowPluginWindow, guid)

	def ShowWindow(self, windowId:int, show:bool) -> int:
		"""
		Displays or hides an E³.DatabaseEditor window.

		:param windowId: Identifier of the window
		:type int: int
		:param show: Indicates whether the window is displayed. If 1, the window is displayed. If 0, the window is not displayed
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Window display status is changed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.ShowWindow(windowId, show)

	def SaveWorkspaceConfiguration(self, name:str="") -> int:
		"""
		Creates or overwrites a workspace configuration.

		:param name: Name of the workspace configuration, defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Work configuration is saved |
		| -1 | No E³.DatabaseEditor window |
		| -2 | No active workspace configuration |
		| -3 | Workspace configuration cannot be set to active |
		| -4 | Workspace configuration could not be saved |
		| -12 | E³.DatabaseEditor is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.SaveWorkspaceConfiguration(name)

	def DeleteWorkspaceConfiguration(self, name:str="") -> int:
		"""
		Deletes a workspace configuration.

		:param name: Name of the workspace configuration, defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Work configuration is saved |
		| -1 | No E³.DatabaseEditor window |
		| -2 | No active workspace configuration |
		| -3 | Workspace configuration cannot be set to active |
		| -4 | Workspace configuration could not be saved |
		| -5 | Default workspace configuration cannot be deleted |
		| -10 | Workspace configuration is not contained in the XML file |
		| -12 | E³.DatabaseEditor is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.DeleteWorkspaceConfiguration(name)

	def RestoreWorkspaceConfiguration(self, name:str="") -> int:
		"""
		Restores the workspace configuration.

		:param name: Name of the workspace configuration, defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Name of the current workspace |
		| -1 | No E³.DatabaseEditor window |
		| -2 | No active workspace configuration |
		| -3 | Workspace configuration cannot be set to active |
		| -4 | Workspace configuration could not be changed |
		| -6 | Reference XML file could not be loaded |
		| -10 | Workspace configuration is not contained in the XML file |
		| -12 | E³.DatabaseEditor is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.RestoreWorkspaceConfiguration(name)

	def GetWorkspaceConfigurations(self, path:str="") -> tuple[int, tuple[str,...]]:
		"""
		Gets an array of workspace configuration names.

		:param path: XML file to extract workspace configuration names from. Default value is <"Empty">, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | names | tuple[str,...] | Array of workspace configuration names passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| -6 | path file could not be loaded |
		| -7 | path file cannot be found |
		| -8 | XML file in %APPDATA% could not be loaded |
		| -12 | E³.DatabaseEditor is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		dummy=0
		ret, names = self._obj.GetWorkspaceConfigurations(dummy, path)
		names = names[1:] if type(names) == tuple and len(names) > 0 else tuple()
		return ret, names

	def LoadWorkspaceConfigurationFromFile(self, name:str, path:str) -> int:
		"""
		Loads a workspace configuration from an XML file and adopts the configuration into the E³.DatabaseEditor instance.

		:param name: Name of the workspace configuration
		:type str: str
		:param path: Name of the configuration file with complete path specification
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Current workspace configuration overwritten from file |
		| -1 | No E³.DatabaseEditor window |
		| -6 | path file could not be loaded |
		| -7 | path file could not be found |
		| -8 | XML file in %APPDATA% could not be loaded |
		| -9 | Workspace configuration could not be set as current workspace configuration |
		| -10 | Workspace configuration is not contained in the XML file |
		| -12 | E³.DatabaseEditor is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.LoadWorkspaceConfigurationFromFile(name, path)

	def GetCurrentWorkspaceConfiguration(self) -> str:
		"""
		Gets the current workspace configuration name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Workspace&gt;" | Name of the current workspace configuration |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.GetCurrentWorkspaceConfiguration()

	def NewComponentWithPreconditions(self, name:str, version:str, baseName:str, baseVersion:str, preconditions:dict[str,str], flags:int=0) -> int:
		"""
		Adds a component to the database and starts the Component Wizard in the E³.DatabaseEditor.

		:param name: Name of the new component
		:type str: str
		:param version: Version of the new component. If version value is empty, the version is set to "1   "
		:type str: str
		:param baseName: Name of the component to be used as a template. If baseName value is empty, no template is used
		:type str: str
		:param baseVersion: Version of the component to be used as a template. If baseVersion value is empty, the version is set to "1   "
		:type str: str
		:param preconditions: Dictionary of [. String. ]. key. /[. String. ]. value. pairs representing preconditions. key is the access value and should be set to "SubCircuitFileName". value is a path to a part file (.e3p) containing subcircuits
		:type dict[str,str]: dict[str,str]
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Starts Component Wizard in the E³.DatabaseEditor |
		| -2 | baseName component not found |
		| -3 | Component is locked |
		| -4 | Component with name and version already exists |
		| -5 | version is invalid |
		| -6 | baseVersion is invalid |
		| -7 | name exceeds maximum length |
		| -8 | preconditions is empty |
		| -9 | preconditions contains no known preconditions |
		| -10 | preconditions contains invalid preconditions |

		Available since E3.series TLB-Versions: 20.12, 19.42
		"""
		preconditions = _dict_to_variant(preconditions)
		return self._obj.NewComponentWithPreconditions(name, version, baseName, baseVersion, preconditions, flags)

	def EditComponentWithPreconditions(self, name:str, version:str, preconditions:dict[str,str], flags:int=0) -> int:
		"""
		Opens the component for editing in the E³.DatabaseEditor.

		:param name: Name of the component to edit
		:type str: str
		:param version: Version of the component to edit. If version value is empty, the version is set to "1   "
		:type str: str
		:param preconditions: Dictionary of [. String. ]. key. /[. String. ]. value. pairs representing preconditions. key is the access value and should be set to "SubCircuitFileName". value is a path to a part file (.e3p) containing subcircuits
		:type dict[str,str]: dict[str,str]
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Opens Component Properties dialog in the E³.DatabaseEditor |
		| -2 | Component not found |
		| -3 | Component is locked |
		| -5 | version is too long |
		| -8 | preconditions is empty |
		| -9 | preconditions contains no known preconditions |
		| -10 | preconditions contains invalid precondition |

		Available since E3.series TLB-Versions: 20.12, 19.42
		"""
		preconditions = _dict_to_variant(preconditions)
		return self._obj.EditComponentWithPreconditions(name, version, preconditions, flags)

	def CreateDXFfromSTEP(self, stepFile:str, outputDirectory:str, dxfVersion:int, views:int=1, color:int=-1, flags:int=0) -> int:
		"""
		Creates AutoCad DXF files from a step file model.

		:param stepFile: Path and name of the STEP file
		:type str: str
		:param outputDirectory: Target system folder to save the DXF files to
		:type str: str
		:param dxfVersion: DXF format version
		:type int: int
		:param views: Model views to be created., defaults to 1
		:type int: int
		:param color: Graphics color in the DXF file. See Colors for possible values., defaults to -1
		:type int: int
		:param flags: Specifies import process options., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | DXF files are created |
		| -1 | stepFile file does not exist |
		| -2 | outputDirectory folder does not exist |
		| -3 | views is invalid |
		| -4 | color is invalid |
		| -5 | flags is invalid |
		| -6 | Error occurred importing the STEP file or exporting DXF files |
		| -7 | dxfVersion is invalid |
		| -8 | Import process aborted by user, Available since v2026-26.00 |
		| -9 | Import process aborted due to timing out, Available since v2026-26.00 |
		| -10 | Steps of the import process skipped by user, Available since v2026-26.00 |
		| -11 | Steps of the import process skipped due to timing out, Available since v2026-26.00 |

		Available since E3.series TLB-Versions: 22.41
		"""
		return self._obj.CreateDXFfromSTEP(stepFile, outputDirectory, dxfVersion, views, color, flags)

	def SuppressMessages(self, suppress:bool, flags:int=0) -> int:
		"""
		Suppresses messages appearing in the E³.DatabaseEditor Messages window.

		:param suppress: Indicates if messages are suppressed. If 1, the messages  are suppressed. If 0, the messages are not suppressed
		:type bool: bool
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Value always returned |

		Available since E3.series TLB-Versions: 23.21
		"""
		return self._obj.SuppressMessages(suppress, flags)

	def SetConfigFile(self, processType:int, filepath:str, flags:int=0) -> str:
		"""
		Sets the current path and file name of the configuration file for importing or exporting files.

		:param processType: Type of the import or export file described in the configuration file **Available enum type:** e3series.types.ConfigFileType.
		:type int: int
		:param filepath: Path and name of the configuration file
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File Path&gt;" | Previous path and name of the configuration file |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.SetConfigFile(processType, filepath, flags)

	def GetConfigFile(self, processType:int, flags:int=0) -> str:
		"""
		Gets the current path and file name of the configuration file for importing or exporting files.

		:param processType: Type of the import or export files described in the configuration file **Available enum type:** e3series.types.ConfigFileType.
		:type int: int
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File Path&gt;" | Path and name of the configuration file |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.GetConfigFile(processType, flags)

	def GetComponentList(self, additionalAttributes:list[str,...]=pythoncom.Empty, flags:int=0) -> tuple[int, tuple[tuple[typing.Union[str,int],...],...]]:
		"""
		Gets a list of components and component information from the component database.

		:param additionalAttributes: Array of database data column names of the. ComponentData. database table and attribute values to be supplied in. list, defaults to pythoncom.Empty
		:type list[str,...]: list[str,...]
		:param flags: Flags bit values specifying how the list of components is filtered., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | result | tuple[tuple[typing.Union[str,int],...],...] | List of components and component information from the component database passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of components in list |
		| 0 | No components are found or an error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		return self._obj.GetComponentList(dummy, additionalAttributes, flags)

	def GetModelList(self, additionalAttributes:tuple[str,...]=0, flags:int=0) -> tuple[int, tuple[tuple[typing.Union[str,int],...],...]]:
		"""
		Gets a list of models and model information from the component database.

		:param additionalAttributes: Array of database data values and attributes to be supplied in. list. Array of database data column names of the ModelData database table and attribute values to be supplied in list, defaults to 0
		:type tuple[str,...]: tuple[str,...]
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | result | tuple[tuple[typing.Union[str,int],...],...] | List of models and model information from the component database passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of models in list |
		| 0 | No models are found or an error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		return self._obj.GetModelList(dummy, additionalAttributes, flags)

	def RemoveUndoInformation(self, flags:int=0) -> int:
		"""
		Removes all E³.DatabaseEditor undo information for the project.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Undo information removed |
		| -1 | No project open |
		| -2 | flags value is invalid |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.RemoveUndoInformation(flags)

	def CreateDbeJobObject(self) -> DbeJob:
		"""
		Creates an e3DbeJob object.

		:return:
		Type: DbeJob

		Available since E3.series TLB-Versions: 24.41
		"""
		return DbeJob(self._obj.CreateDbeJobObject())

	def GetJobCount(self) -> int:
		"""
		Indicates if a project is open.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | A project is open |
		| 0 | No project is open |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.GetJobCount()

	def GetJobIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifier of the project.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array containing the identifier of the open project passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | A project is open |
		| 0 | No project is open |

		Available since E3.series TLB-Versions: 24.41
		"""
		dummy=0
		ret, ids = self._obj.GetJobIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

# -------------------- IDeviceInterface--------------------
class Device:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Device. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current device item identifier |
		| 0 | No bundle item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a device as the current item.

		:param id: Unique value identifying a device item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current device item identifier |
		| 0 | No current device item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the device item's device designation.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Device designation |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the device item's device designation.

		:param name: Device designation value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device designation applied or an error occurred |
		| 0 | Device locked |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def GetAssignment(self) -> str:
		"""
		Gets the device item's higher level assignment value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Higher level assignment value supplied |
		| "&lt;Empty&gt;" | No higher level assignment value supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAssignment()

	def SetAssignment(self, name:str) -> int:
		"""
		Sets the device item's higher level assignment value.

		:param name: New higher level assignment value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Higher level assignment value applied or an error occurred |
		| 0 | Device locked |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAssignment(name)

	def GetLocation(self) -> str:
		"""
		Gets the device item's location value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Location value supplied |
		| "&lt;Empty&gt;" | No location value supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLocation()

	def SetLocation(self, name:str) -> int:
		"""
		Sets the device item's location value.

		:param name: New location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Location value supplied or an error occurred |
		| 0 | Device locked |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLocation(name)

	def GetFileName(self) -> str:
		"""
		Gets the system path and name of the block device item's linked file.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File&gt;" | System path and name of the block device's associated file |
		| "&lt;Empty&gt;" | Block device's has no associated file or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFileName()

	def SetFileName(self, name:str) -> int:
		"""
		Sets the system path and name of the block device item's file.

		:param name: New file path and name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New file name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFileName(name)

	def GetComponentName(self) -> str:
		"""
		Gets the name of the device item's component.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Component name |
		| "&lt;Empty&gt;" | No component or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetComponentName()

	def GetComponentVersion(self) -> str:
		"""
		Gets the version of the device item's component.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Version&gt;" | Component version |
		| "&lt;Empty&gt;" | No component or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetComponentVersion()

	def SetComponentName(self, name:str, version:str) -> int:
		"""
		Sets the device item's component type.

		:param name: New component name
		:type str: str
		:param version: New component version
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New component name and version applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetComponentName(name, version)

	def GetCounterpartComponentName(self) -> str:
		"""
		Gets the name of the device item's mating connector component name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Mating connector component name |
		| "&lt;Empty&gt;" | No mating connector component or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCounterpartComponentName()

	def GetCounterpartComponentVersion(self) -> str:
		"""
		Gets the name of the device item's mating connector component version.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Mating connector component version |
		| "&lt;Empty&gt;" | No mating connector component or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCounterpartComponentVersion()

	def AddAttibuteValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the device item.

		:param name: Internal name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttibuteValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the device item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the device item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the device item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the device item's specified attribute value.

		:param name: Internal name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the device item.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the device item's specified attributes.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def GetComponentAttributeValue(self, name:str) -> str:
		"""
		Gets the specified attribute value of the device item's component.

		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetComponentAttributeValue(name)

	def GetViewCount(self) -> int:
		"""
		Gets the number of view connectors of the current block, connector or normal device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of views |
		| 0 | No views or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetViewCount()

	def GetViewIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the view devices of the current connector, block or normal device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of view device items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No view device identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetViewIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsView(self) -> int:
		"""
		Indicates if the device item represents a view of an original device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device item is the original device or an error occurred |
		| 1 | Device item is a view |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsView()

	def GetViewNumber(self) -> int:
		"""
		Gets the view number of the current view device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | View number of the view device |
		| 0 | Device has no view number or an error occurred |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetViewNumber()

	def GetOriginalId(self) -> int:
		"""
		Gets the identifier of the original device of the view device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the original device |
		| 0 | No original device or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOriginalId()

	def GetPinCount(self) -> int:
		"""
		Gets the number of pins or wires contained in the current device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pins or wires |
		| 0 | No pins and wires or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinCount()

	def GetPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the device item's pins or wires.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pins or wires  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No pin identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAllPinCount(self) -> int:
		"""
		Gets the number of pins belonging to the device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pins |
		| 0 | No pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAllPinCount()

	def GetAllPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the supply pins anywhere within the device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pins  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No pin identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAllPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSupplyPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the device item's supply pins.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of supply pins  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No supply pin identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSupplyPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNoconnPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of identifiers of the device item's pins with the "Not Connected" (**NC**) signal.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of pin identifiers  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pin items in ids |
		| 0 | No pins with the "Not Connected" (**NC**) signal or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNoconnPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetEndAttributeCount(self, which:int) -> int:
		"""
		Gets the number of attributes assigned to a part of the cable item.

		:param which: Cable part
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetEndAttributeCount(which)

	def GetEndAttributeIds(self, which:int, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to a part of the cable item.

		:param which: Cable part
		:type int: int
		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetEndAttributeIds(which, dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetEndAttributeValue(self, which:int, name:str) -> str:
		"""
		Gets a cable item part's specified attribute value.

		:param which: Cable part
		:type int: int
		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetEndAttributeValue(which, name)

	def SetEndAttributeValue(self, which:int, name:str, value:str) -> int:
		"""
		Sets the cable item part's specified attribute value.

		:param which: Cable part
		:type int: int
		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetEndAttributeValue(which, name, value)

	def DeleteEndAttribute(self, which:int, name:str) -> int:
		"""
		Removes an attribute from a part of the cable item.

		:param which: Cable part
		:type int: int
		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteEndAttribute(which, name)

	def HasEndAttribute(self, which:int, name:str) -> int:
		"""
		Gets the number of the cable item part's specified attributes.

		:param which: Cable part
		:type int: int
		:param name: Internal name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasEndAttribute(which, name)

	def IsTerminal(self) -> int:
		"""
		Indicates if the device item is a terminal or a terminal strip.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a terminal item or an error occurred |
		| 1 | Device is a terminal |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsTerminal()

	def IsTerminalBlock(self) -> int:
		"""
		Indicates if the device item is a terminal strip.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a terminal strip or an error occurred |
		| 1 | Device is a terminal strip |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsTerminalBlock()

	def GetTerminalBlockId(self) -> int:
		"""
		Gets the identifier of the current device item's parent terminal strip device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the parent terminal strip device |
		| 0 | No parent terminal strip device or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTerminalBlockId()

	def SetTerminalSequence(self, ids:list[int]) -> int:
		"""
		Sets the terminal sequence in a terminal strip.

		:param ids: Array of device identifiers representing the terminal sequence passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Terminal sequence was applied |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetTerminalSequence(ids)
		return ret[0]

	def GetSymbolCount(self, get_mode:int=0) -> int:
		"""
		Gets the number of symbols contained in the device item.

		:param get_mode: , defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbols |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolCount(get_mode)

	def GetSymbolIds(self, get_mode:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of identifiers of symbol items of the device item.

		:param get_mode: Symbol items type filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbol items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol item identifiers in ids |
		| 0 | No symbol item identifiers found with respect to the get_mode filter or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy, get_mode)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetBundleCount(self) -> int:
		"""
		Gets the number of bundles contained in the cable device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of bundles |
		| 0 | No bundles or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBundleCount()

	def GetBundleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the bundles of the cable device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of bundle items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No bundle identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetBundleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Create(self, name:str, assignment:str, location:str, comp:str, vers:str, after:int) -> int:
		"""
		Creates a new device item.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param comp: Component name in the database
		:type str: str
		:param vers: Version in the database
		:type str: str
		:param after: Identifier of an existing terminal device. Only relevant for creating a terminal device
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(name, assignment, location, comp, vers, after)

	def CreateView(self, _from:int, level:int, blockid:int=0, databaseDeviceView:str="") -> int:
		"""
		Creates a view for the current device item.

		:param _from: Identifier of a device item from which the view is created
		:type int: int
		:param level: View number
		:type int: int
		:param blockid: Identifier of a block device item on which the connector view is to be placed., defaults to 0
		:type int: int
		:param databaseDeviceView: Database device view number. Default value is "<Empty>" and in this case a connector pin view is created for normal devices, defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new view |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateView(_from, level, blockid, databaseDeviceView)

	def IsDevice(self) -> int:
		"""
		Indicates if the device item is a normal device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a normal device or an error occurred |
		| 1 | Device is a normal device |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsDevice()

	def CreateCable(self, name:str, assignment:str, location:str) -> int:
		"""
		Creates a new cable device item.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new cable device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateCable(name, assignment, location)

	def IsCable(self) -> int:
		"""
		Indicates if the device item is a cable or overbraid.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a cable or overbraid or an error occurred |
		| 1 | Device is a cable or overbraid |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsCable()

	def IsWireGroup(self) -> int:
		"""
		Indicates if the device item is a wire group.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a wire group or an error occurred |
		| 1 | Device is a wire group |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsWireGroup()

	def CreateConnector(self, name:str, assignment:str, location:str) -> int:
		"""
		Creates a new connector device item.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new connector device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateConnector(name, assignment, location)

	def IsConnector(self) -> int:
		"""
		Indicates if the device item is a connector.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a connector or an error occurred |
		| 1 | Device is a connector |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsConnector()

	def IsBlock(self) -> int:
		"""
		Indicates if the device item is a block.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a block or an error occurred |
		| 1 | Device is a block |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsBlock()

	def Delete(self) -> int:
		"""
		Deletes the device item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device was deleted from the project |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def GetMasterPinName(self) -> str:
		"""
		Gets the terminal device item's master pin name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Master pin name |
		| "&lt;Empty&gt;" | No master pin name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMasterPinName()

	def SetMasterPinName(self, name:str) -> int:
		"""
		Sets the terminal device item's master pin name value.

		:param name: New master pin name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Master pin name |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetMasterPinName(name)

	def Jump(self) -> int:
		"""
		Jumps to the device item's location on the panel sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Jump()

	def Search(self, name:str, assignment:str, location:str) -> int:
		"""
		Searches for a device item in the project and sets it as the current item.

		:param name: Device designation of device to search for
		:type str: str
		:param assignment: Higher level assignment of device to search for
		:type str: str
		:param location: Location of device to search for
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Device found |
		| 0 | No device was found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Search(name, assignment, location)

	def GetConnectorCount(self) -> int:
		"""
		Gets the number of connectors contained in the block device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connectors |
		| 0 | No connectors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectorCount()

	def GetConnectorIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the connector device items within the block device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of connector device items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No connector device identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetConnectorIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetBlockId(self) -> int:
		"""
		Gets the identifier of the current device item's parent block device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the parent block device |
		| 0 | No parent block device or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockId()

	def GetPanelLocation(self) -> tuple[int, float, float, float, float, float]:
		"""
		Gets the device item's model position on the panel.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Panel placement position on the x-axis |
		| 2 | y | float | Panel placement position on the y-axis |
		| 3 | z | float | Panel placement position on the z-axis |
		| 4 | rot | float | Rotation value |
		| 5 | pivot | float | Tilt value  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model's placement values are supplied |
		| 0 | Model is placed not axis parallel (using Euler Angles rotation ) or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetPanelLocation(dummy, dummy, dummy, dummy, dummy)

	def IsMount(self) -> int:
		"""
		Indicates if the device item is a mounting rail.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a mounting rail or an error occurred |
		| 1 | Device is a mounting rail |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsMount()

	def IsCableDuct(self) -> int:
		"""
		Indicates if the device item is a cable duct.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a cable duct or an error occurred |
		| 1 | Device is a cable duct |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsCableDuct()

	def GetMountedCount(self) -> int:
		"""
		Gets the number of devices mounted on the current  device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of devices |
		| 0 | No devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMountedCount()

	def GetMountedIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the devices mounted on the current device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of mounted device items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No mounted device identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetMountedIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCarrierId(self) -> int:
		"""
		Gets the identifier of the device that the device item is mounted on in a panel sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the carrier device |
		| 0 | No carrier device or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCarrierId()

	def GetOutlineCount(self) -> int:
		"""
		Gets the number of contours contained in the connector, terminal or normal device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of contours |
		| 0 | No contours or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOutlineCount()

	def GetOutlineIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of identifiers of the device item's contours.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of contour identifiers  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No contours or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOutlineIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetValidComponentCodes(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets an array of names of components in the database with the same structure as the device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | names | tuple[str,...] | Array of component names  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of component names in names |
		| 0 | No matching component names found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, names = self._obj.GetValidComponentCodes(dummy)
		names = names[1:] if type(names) == tuple and len(names) > 0 else tuple()
		return ret, names

	def IsAssembly(self) -> int:
		"""
		Indicates if the device item is an assembly.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not an assembly or an error occurred |
		| 1 | Device is an assembly |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsAssembly()

	def IsAssemblyPart(self) -> int:
		"""
		Indicates if the device item is part of an assembly.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not part of an assembly or an error occurred |
		| 1 | Device is part of an assembly |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsAssemblyPart()

	def GetAssemblyId(self) -> int:
		"""
		Gets the identifier of the current device item's parent assembly device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the parent assembly device |
		| 0 | No parent assembly device or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAssemblyId()

	def GetDeviceCount(self) -> int:
		"""
		Gets the number of devices contained within the current terminal strip or assembly master device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of devices |
		| 0 | No devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDeviceCount()

	def GetDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the device items within the terminal strip or assembly device item structure.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of device items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No device identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAssignedOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of options assigned to the device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of assigned options  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned option identifiers are supplied or an error occurred |
		| -1 | An option contains a Boolean expression or an alias |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAssignedOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSupplyId(self) -> int:
		"""
		Gets the identifier of the current device item's supply item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the supply item |
		| 0 | No supply item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSupplyId()

	def SetSupplyId(self, id:int) -> int:
		"""
		Sets the current device item's supply item.

		:param id: Identifier of new supply item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetSupplyId(id)

	def HasNoconn(self) -> int:
		"""
		Indicates if the device item has pins with the "Not Connected" (**NC**) signal.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device item has pins with the "Not Connected" (**NC**) signal |
		| 0 | Device item has no pins with the "Not Connected" (**NC**) signal or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasNoconn()

	def SetCompleteName(self, name:str, assignment:str, location:str, onlygiven:bool=False) -> int:
		"""
		Sets all elements of the device item's item designation.

		:param name: New device designation value
		:type str: str
		:param assignment: New higher level assignment value
		:type str: str
		:param location: New location value
		:type str: str
		:param onlygiven: Indicates whether empty values in. name. ,. assignment. and. location. should be ignored. If 1, empty values are ignored. If 0, empty values are set., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item designation values applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCompleteName(name, assignment, location, onlygiven)

	def CreateAssembly(self, ids:list[int]) -> int:
		"""
		Creates a new assembly device item.

		:param ids: Identifiers of the devices to include in the new assembly passed into the function. Can also hold a single integer value.
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new assembly device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.CreateAssembly(ids)
		return ret[0]

	def AddToAssembly(self, ids:list[int], position:int=0, before:bool=False) -> int:
		"""
		Adds devices to the assembly device item.

		:param ids: Array of identifiers of devices to be added to the assembly passed into the function.
		:type list[int]: list[int]
		:param position: Identifier of an existing device in the assembly indicating the position where the new devices are added. If 0, the new devices are placed at the end., defaults to 0
		:type int: int
		:param before: Indicates whether the devices are placed before or after the. position. device. If 1, the new devices are placed before position. If 0, the new devices are placed after position., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the assembly device |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.AddToAssembly(ids, position, before)
		return ret[0]

	def RemoveFromAssembly(self, ids:list[int]) -> int:
		"""
		Removes devices from the current assembly device item.

		:param ids: Array of identifiers of devices to be removed from the assembly passed into the function.
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the assembly device |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.RemoveFromAssembly(ids)
		return ret[0]

	def CreateConnectorOnBlock(self, blkid:int, name:str, assignment:str, location:str) -> int:
		"""
		Creates a new connector device item on a block.

		:param blkid: Block identifier to add connector to
		:type int: int
		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new connector device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateConnectorOnBlock(blkid, name, assignment, location)

	def HasPassWirePins(self) -> int:
		"""
		Indicates if the device item has pins with the pass wire property.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device item has pins with the pass wire property |
		| 0 | Device item has no pins with the pass wire property or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasPassWirePins()

	def SetPanelLocation(self, flags:int, shti:int, x:float, y:float, z:float, rot:str, use_start_z:bool=False, place_combined:bool=False, pivot:int=0) -> int:
		"""
		Sets the device item's model position on the panel.

		:param flags: Panel placement options
		:type int: int
		:param shti: Identifier of the panel sheet
		:type int: int
		:param x: Panel placement position on the x-axis
		:type float: float
		:param y: Panel placement position on the y-axis
		:type float: float
		:param z: Panel placement position on the z-axis
		:type float: float
		:param rot: Rotation value
		:type str: str
		:param use_start_z: Indicates if. z. should be used as a starting value dependent on the sheet justification. If 1, z is used as a starting value. If 0, z is not used as a starting value., defaults to False
		:type bool: bool
		:param place_combined: Indicates how the device models are placed. If 1, the device's models are placed as a plugged assembly. If 0, the device's model is placed as a normal model., defaults to False
		:type bool: bool
		:param pivot: Tilt value., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model is placed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPanelLocation(flags, shti, x, y, z, rot, use_start_z, place_combined, pivot)

	def CreateCableDuct(self, name:str, assignment:str, location:str, xlen:float, ywid:float, zhgt:float, templ:str) -> int:
		"""
		Creates a new cable duct device item.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param xlen: Length of the cable duct
		:type float: float
		:param ywid: Width of the cable duct
		:type float: float
		:param zhgt: Height of the cable duct
		:type float: float
		:param templ: Text template symbol name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new cable duct device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateCableDuct(name, assignment, location, xlen, ywid, zhgt, templ)

	def CreateMount(self, name:str, assignment:str, location:str, xlen:float, ywid:float, zhgt:float, slotdes:str, templ:str) -> int:
		"""
		Creates a new mounting rail device item.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param xlen: Length of the mounting rail
		:type float: float
		:param ywid: Width of the mounting rail
		:type float: float
		:param zhgt: Height of the mounting rail
		:type float: float
		:param slotdes: Mounting rail type name
		:type str: str
		:param templ: Text template symbol name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new mounting rail device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateMount(name, assignment, location, xlen, ywid, zhgt, slotdes, templ)

	def UnplacePanel(self) -> int:
		"""
		Removes the model from the panel it has been placed on.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model is removed |
		| 0 | Internal error occurred |
		| -1 | No project open or valid device item set |
		| -2 | Device does not have a placed model |
		| -3 | Model is locked |
		| -4 | Device is locked |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UnplacePanel()

	def FindPanelPath(self) -> int:
		"""
		Automatically routes all connections running to the pins of the device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device item was automatically routed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.FindPanelPath()

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the device item.

		:param name: Internal name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetSlotIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the device item's slots.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of slots  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No slot identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSlotIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetMountTypes(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets identifiers of the device item's mounting rail types.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | types | tuple[str,...] | Array of identifiers of mounting rail type values  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in types |
		| 0 | No device mounting rail types are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, types = self._obj.GetMountTypes(dummy)
		types = types[1:] if type(types) == tuple and len(types) > 0 else tuple()
		return ret, types

	def GetCableDuctLength(self) -> float:
		"""
		Gets the cable duct device item's length.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Cable duct length |
		| 0.0 | No cable duct length or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCableDuctLength()

	def CreateBlock(self, name:str="", assignment:str="", location:str="", cmpname:str="", version:str="", filename:str="") -> int:
		"""
		Creates a new block device item.

		:param name: Device designation value. Default value is "<Empty>", defaults to ""
		:type str: str
		:param assignment: Higher level assignment value. Default value is "<Empty>", defaults to ""
		:type str: str
		:param location: Location value. Default value is "<Empty>", defaults to ""
		:type str: str
		:param cmpname: Component name in the database. Default value is "<Empty>", defaults to ""
		:type str: str
		:param version: Version in the database. Default value is "<Empty>", defaults to ""
		:type str: str
		:param filename: File assigned to block. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new block device item |
		| 0 | Error occurred |
		| -1 | filename unavailable, Block device item is created |
		| -2 | filename is invalid, Block device item is created |
		| -3 | filename could not be loaded into the block, Block device item is created |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateBlock(name, assignment, location, cmpname, version, filename)

	def SetLockPurgeUnused(self, id:bool) -> int:
		"""
		Sets the device item's status for locked against being deleted when unused objects are purged.

		:param id: New status for locked against being deleted when unused objects are purged. If 1, device is locked against being deleted when unused objects are purged. If 0, device is not locked against being deleted when unused objects are purged
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLockPurgeUnused(id)

	def IsLockPurgeUnused(self) -> int:
		"""
		Indicates if the device item is locked against being deleted when unused objects are purged.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not locked against being purged or an error occurred |
		| 1 | Device is locked against being purged |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsLockPurgeUnused()

	def SetViewNumber(self, id:int) -> int:
		"""
		Sets the view number of the current view device item.

		:param id: New view number value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetViewNumber(id)

	def SetInheritName(self, onoff:int) -> int:
		"""
		Sets whether the device item inherits its complete name from the parent assembly.

		:param onoff: Parent assembly name inheritance value. If 1, the parent assembly name is inherited. If 0, the parent assembly name is not inherited
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Parent assembly name inheritance value set |
		| 0 | onoff value is already the currently set value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetInheritName(onoff)

	def GetInheritName(self) -> int:
		"""
		Indicates if the device item inherits its complete name from the parent assembly.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Complete name is inherited |
		| 0 | Complete name is not inherited or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetInheritName()

	def GetRootAssemblyId(self) -> int:
		"""
		Gets the identifier of the current device item's highest level parent assembly device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the highest level parent assembly device |
		| 0 | No parent assembly device or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetRootAssemblyId()

	def InsertTerminalPlan(self, parameters:dict[str,str]) -> int:
		"""
		Inserts a terminal plan for the device into the project.

		:param parameters: Dictionary of [. String. ]. key. /[. String. ]. value. pairs representing terminal plan settings. key is the terminal plan setting name. value is the terminal plan setting value
		:type dict[str,str]: dict[str,str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Terminal plan inserted into project |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		parameters = _dict_to_variant(parameters)
		return self._obj.InsertTerminalPlan(parameters)

	def GetSchematicTypes(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of values representing the schematic types assigned to the cable device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | types | tuple[int,...] | Array of values representing the schematic types, passed out of the function. See Schematic for possible values |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in types |
		| 0 | All schematic types are assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, types = self._obj.GetSchematicTypes(dummy)
		types = types[1:] if type(types) == tuple and len(types) > 0 else tuple()
		return ret, types

	def GetTerminalPlanSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of identifiers of sheet items of the device item's terminal plan.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ShtIds | tuple[int,...] | Array of identifiers of terminal plan sheet items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of terminal plan sheet item identifiers in ShtIds |
		| 0 | No terminal plan sheet identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ShtIds = self._obj.GetTerminalPlanSheetIds(dummy)
		ShtIds = ShtIds[1:] if type(ShtIds) == tuple and len(ShtIds) > 0 else tuple()
		return ret, ShtIds

	def SetModelCharacteristic(self, characteristic:str) -> int:
		"""
		Sets the device item's model characteristic value.

		:param characteristic: New model characteristic value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model characteristic value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetModelCharacteristic(characteristic)

	def GetModelName(self) -> str:
		"""
		Gets the device item's model name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Model name value |
		| "&lt;Empty&gt;" | No model name value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetModelName()

	def GetModelCharacteristic(self) -> str:
		"""
		Gets the device item's model characteristic value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Model characteristic value supplied |
		| "&lt;Empty&gt;" | No model characteristic value supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetModelCharacteristic()

	def GetValidModelCharacteristics(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets an array of valid characteristics for the device item's model.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | characteristics | tuple[str,...] | Array of valid model characteristics  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of model characteristics in characteristics |
		| 0 | No valid model characteristics found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, characteristics = self._obj.GetValidModelCharacteristics(dummy)
		characteristics = characteristics[1:] if type(characteristics) == tuple and len(characteristics) > 0 else tuple()
		return ret, characteristics

	def GetTerminalPlanSettings(self, parameters:dict[str,str]=pythoncom.Empty) -> tuple[int, dict[str,str]]:
		"""
		Gets a dictionary of settings for the device item's terminal plan.

		:param parameters: Dictionary of [. String. ]. key. /[. String. ]. value. pairs representing terminal plan settings. Dictionary keys with no values can be passed into the function and the dictionary with the setting values are passed out of the function. key is the terminal plan setting name. value is the terminal plan setting value, defaults to pythoncom.Empty
		:type dict[str,str]: dict[str,str]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | parameters | dict[str,str] | Dictionary of [. String. ]. key. /[. String. ]. value. pairs representing terminal plan settings. Dictionary keys with no values can be passed into the function and the dictionary with the setting values are passed out of the function. key is the terminal plan setting name. value is the terminal plan setting value |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of terminal plan settings in parameters |
		| 0 | No terminal plan settings found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		parameters = _dict_to_variant(parameters)
		ret, parameters = self._obj.GetTerminalPlanSettings(parameters)
		parameters = _variant_to_dict(parameters)
		return ret, parameters

	def SetTerminalPlanSettings(self, parameters:dict[str,str]) -> int:
		"""
		Sets values for the device item's terminal plan settings.

		:param parameters: Dictionary of [. String. ]. key. /[. String. ]. value. pairs representing terminal plan settings passed into the function. key is the terminal plan setting name. value is the terminal plan setting value
		:type dict[str,str]: dict[str,str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of terminal plan settings in parameters successfully applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		parameters = _dict_to_variant(parameters)
		ret = self._obj.SetTerminalPlanSettings(parameters)
		return ret[0]

	def IsHose(self) -> int:
		"""
		Indicates if the device item is a hose.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a hose or an error occurred |
		| 1 | Device is a hose |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsHose()

	def IsTube(self) -> int:
		"""
		Indicates if the device item is a tube.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a tube or an error occurred |
		| 1 | Device is a tube |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsTube()

	def CreateFormboard(self, _from:int, shtid:int, blockid:int=0, databaseDeviceView:str="") -> int:
		"""
		Creates a formboard view device item.

		:param _from: Identifier of a device item from which the view is created
		:type int: int
		:param shtid: Identifier of a formboard sheet
		:type int: int
		:param blockid: Identifier of a block device item on which the connector view is to be placed., defaults to 0
		:type int: int
		:param databaseDeviceView: Database device view number. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new formboard view |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateFormboard(_from, shtid, blockid, databaseDeviceView)

	def IsFormboard(self) -> bool:
		"""
		Indicates if the device item is directly placed on a formboard sheet.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device item is not placed on a formboard sheet or an error occurred |
		| 1 | Device item is placed on a formboard sheet |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsFormboard()

	def GetFormboardSheetId(self) -> int:
		"""
		Gets the identifier of the formboard view device item's sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the formboard sheet |
		| 0 | No formboard sheet or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFormboardSheetId()

	def GetFormboardIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the device item's formboard views.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of formboard views  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No formboard views are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetFormboardIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTableSymbolId(self) -> int:
		"""
		Gets the identifier of the device item's table symbol.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the table symbol |
		| 0 | No table symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTableSymbolId()

	def IsClipboardPart(self) -> int:
		"""
		Indicates if the device item is contained in the clipboard.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a clipboard part or an error occurred |
		| &gt; 0 | Clipboard item identifier |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsClipboardPart()

	def GetVariantObjectProperties(self, iObjectType:int, sAttributeName:str) -> tuple[int, tuple[typing.Union[tuple[str,int,str],tuple[str,int,str,int]],...]]:
		"""
		Gets an array of the device item's variants and their object properties.

		:param iObjectType: Value defining the information contained in. arr
		:type int: int
		:param sAttributeName: Internal attribute name. If iObjectType is 3, arr only contains values of the specified attribute. If iObjectType is 3 and the attribute name value is "<Empty>", arr contains values of all the attributes. If iObjectType is not 3, the attribute name value should be "<Empty>"
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | arr | tuple[typing.Union[tuple[str,int,str],tuple[str,int,str,int]],...] | Array of variant object properties  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of variants in arr |
		| 0 | No variant object properties found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, arr = self._obj.GetVariantObjectProperties(iObjectType, sAttributeName, dummy)
		arr = arr[1:] if type(arr) == tuple and len(arr) > 0 else tuple()
		return ret, arr

	def SetAssignedOptionIds(self, ids:list[int]) -> int:
		"""
		Sets the options assigned to the device item.

		:param ids: Array of identifiers of options to assign
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No options are applied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAssignedOptionIds(ids)

	def DeleteInstance(self) -> int:
		"""
		Deletes an instance of a device in an option or variant.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device instance was deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteInstance()

	def CreateInstance(self, vari:int) -> int:
		"""
		Creates an instance of a device in an option or variant.

		:param vari: Identifier of an option or variant
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device instance was created |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateInstance(vari)

	def Create2DView(self, modi:int, name:str, symbol:str, position:int, before:int) -> int:
		"""
		Creates a 2D front view sheet of a device item's placed model.

		:param modi: 2D view option flags
		:type int: int
		:param name: 2D view sheet name
		:type str: str
		:param symbol: Sheet format symbol name
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new 2D view in the project
		:type int: int
		:param before: Indicates whether to insert the 2D view before or after. position. If 1, the 2D view sheet is placed above position in the project tree. If 1 and position is 0, the 2D view sheet is placed at the top of the project tree. If 0, the 2D view sheet is place below position in the project tree. If 0 and position is 0, the 2D view sheet is place at the end of the project tree
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new view sheet item |
		| 0 | Error occurred |
		| -1 | 2D view cannot be created for the device item's model |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create2DView(modi, name, symbol, position, before)

	def Has2DView(self) -> int:
		"""
		Gets the sheet identifier of the device item's 2D view.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the 2D view sheet item |
		| 0 | Device has no 2D view or an error occurred |
		| -1 | Device has no placed models |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Has2DView()

	def GetAssignedOptionExpressions(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options) assigned to the device item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressions(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def CreateOverbraid(self, name:str, assignment:str, location:str, cmpname:str, version:str) -> int:
		"""
		Creates a new overbraid device item.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param cmpname: Component name in the database
		:type str: str
		:param version: Version in the database
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new overbraid device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateOverbraid(name, assignment, location, cmpname, version)

	def IsOverbraid(self) -> int:
		"""
		Indicates if the device item is an overbraid.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not an overbraid or an error occurred |
		| 1 | Device is an overbraid |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsOverbraid()

	def IsOverbraidPart(self) -> int:
		"""
		Indicates if the device item is part of an overbraid.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not part of an overbraid or an error occurred |
		| 1 | Device is part of an overbraid |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsOverbraidPart()

	def GetOverbraidId(self) -> int:
		"""
		Gets the identifier of the current overbraid or cable device item's parent overbraid device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the parent overbraid device |
		| 0 | No parent overbraid device or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOverbraidId()

	def GetCableCount(self) -> int:
		"""
		Gets the number of cables contained in the overbraid device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cables |
		| 0 | No cables or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCableCount()

	def GetCableIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the cable items within the cable or overbraid device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of cable items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No cable identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCableIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAnyCount(self) -> int:
		"""
		Gets the number of  items contained in the device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of  items |
		| 0 | No  items found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAnyCount()

	def GetAnyIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the items of the device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of item in the device item |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No items found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAnyIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddToOverbraid(self, ids:list[int]=pythoncom.Empty, position:int=0, before:bool=False) -> int:
		"""
		Adds cable items to the overbraid device item.

		:param ids: Array of identifiers of cables to be added to the overbraid passed into the function., defaults to pythoncom.Empty
		:type list[int]: list[int]
		:param position: Identifier of an existing cable in the overbraid indicating the position where the new cables are added. If 0, the new cables are placed at the end., defaults to 0
		:type int: int
		:param before: Indicates whether the cables are placed before or after the. position. cable. If 1, the new cables are placed before position. If 0, the new cables are placed after position., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the overbraid device |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.AddToOverbraid(ids, position, before)
		return ret[0]

	def RemoveFromOverbraid(self, ids:list[int]=pythoncom.Empty) -> int:
		"""
		Removes cable items from the overbraid device item.

		:param ids: Array of identifiers of cables to be removed from the overbraid passed into the function., defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the overbraid device |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.RemoveFromOverbraid(ids)
		return ret[0]

	def GetCoreCount(self) -> int:
		"""
		Gets the number of conductors and wires contained directly within a cable or overbraid device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors and wires |
		| 0 | No conductors and wires or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCoreCount()

	def GetCoreIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors and wires placed directly within the cable or overbraid device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors and wires  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No conductors or wire identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCoreIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAllCoreCount(self) -> int:
		"""
		Gets the number of conductors and wires contained anywhere in the cable or overbraid device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors and wires |
		| 0 | No conductors and wires or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAllCoreCount()

	def GetAllCoreIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors and wires placed anywhere within the cable or overbraid device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors and wires  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No conductors or wire identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAllCoreIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetPanelPositionLock(self, onoff:int) -> int:
		"""
		Sets the device item's model position lock status.

		:param onoff: New model position lock status. If 1, device model position is locked. If 0, device model position is unlocked
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device model position current status is locked |
		| 0 | Device model position current status is unlocked or an error occurred |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.SetPanelPositionLock(onoff)

	def GetPanelPositionLock(self) -> int:
		"""
		Gets the device item's model position lock status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device model position is locked |
		| 0 | Device model position is unlocked or an error occurred |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.GetPanelPositionLock()

	def DeleteInstanceForced(self) -> int:
		"""
		Deletes an instance of a device in an option or variant.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device instance was deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.DeleteInstanceForced()

	def Sort(self, sort:int=0) -> int:
		"""
		Sorts the device item's displayed content in the project tree.

		:param sort: Indicates the sorting order. If 1, devices are sorted in ascending order. If 0, devices are sorted in descending order., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device's content is sorted in the project tree |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.Sort(sort)

	def SetPanelLevel(self, nLevel:int, bChangeMounted:bool) -> int:
		"""
		Sets the display level of the device item's panel symbols.

		:param nLevel: New display level
		:type int: int
		:param bChangeMounted: Level display option. If 1, the display level is only changed on the current device item and all plugged models. If 0, the display level is only changed on the current device item
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Panel display level value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.SetPanelLevel(nLevel, bChangeMounted)

	def GetPanelLevel(self) -> int:
		"""
		Gets the display level of the device item's panel symbols.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Panel display level value supplied |
		| 0 | Error occurred |
		| -1 | Panel symbols have different display levels, Available since v2015-16.00 |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.GetPanelLevel()

	def IsHierarchicalBlock(self) -> int:
		"""
		Indicates if the device item is a hierarchical block.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a hierarchical block or an error occurred |
		| 1 | Device is a hierarchical block |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.IsHierarchicalBlock()

	def IsFunctionalBlock(self) -> int:
		"""
		Indicates if the device item is a functional block.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a functional block or an error occurred |
		| 1 | Device is a functional block |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.IsFunctionalBlock()

	def IsModule(self) -> int:
		"""
		Indicates if the device item is a hierarchical block.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a hierarchical block or an error occurred |
		| 1 | Device is a hierarchical block |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.IsModule()

	def SetModule(self, newval:int) -> int:
		"""
		Sets the block device item's block type.

		:param newval: New block type value. If 1, the block is set to hierarchical. If 0, the block is set to normal
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previously the block device was a hierarchical device |
		| 0 | Previously the block device was a normal device or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.SetModule(newval)

	def DeleteForced(self) -> int:
		"""
		Deletes the device item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device was deleted from the project |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.DeleteForced()

	def IsFunctionalDesignBlock(self) -> int:
		"""


		:return:
		Type: int

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.IsFunctionalDesignBlock()

	def GetFunctionalUnitIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the functional units assigned to the device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of functional unit items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No functional unit identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetFunctionalUnitIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateFunctionalDesignBlock(self, name:str, assignment:str, location:str, cmpname:str, version:str) -> int:
		"""
		Creates a new functional design block device item.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param cmpname: Not used
		:type str: str
		:param version: Not used
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new functional design block device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.CreateFunctionalDesignBlock(name, assignment, location, cmpname, version)

	def GetDisconnecting(self) -> int:
		"""
		Indicates whether the functional block device item is a disconnecting point.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Functional block device item is a disconnecting point |
		| 0 | Functional block device item is not a disconnecting point or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetDisconnecting()

	def SetDisconnecting(self, onOff:bool) -> int:
		"""
		Sets whether the functional block device item is a disconnecting point.

		:param onOff: Disconnecting point value. If 1, the functional block device is a disconnecting point. If 0, the functional block device is not a disconnecting point
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previously functional block was a disconnecting point |
		| 0 | Previously functional block was not a disconnecting point or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetDisconnecting(onOff)

	def GetFunctionalBlockSymbolIDs(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the functional block device item's pin symbols.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pin symbols  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No pin symbols are found or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetFunctionalBlockSymbolIDs(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AssignAsVariantInstance(self, devid:int, expression:str) -> int:
		"""
		Assigns a device item as the variant instance of the current device item.

		:param devid: Identifier of device to become the variant instance
		:type int: int
		:param expression: Variant name or variant combination
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device item successfully assigned as the variant instance of the current device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.AssignAsVariantInstance(devid, expression)

	def GetOuterDiameter(self) -> float:
		"""
		Gets the outer diameter of the cable or hose device item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Outer diameter |
		| 0.0 | No outer diameter or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetOuterDiameter()

	def SetOuterDiameter(self, newval:float) -> float:
		"""
		Sets the outer diameter of the cable device item.

		:param newval: New outer diameter value
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Outer diameter value is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetOuterDiameter(newval)

	def IsDynamicModel(self) -> int:
		"""
		Indicates if the device item is a dynamic model.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a dynamic model or an error occurred |
		| 1 | Device is a dynamic model |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.IsDynamicModel()

	def GetDynamicModelSize(self) -> tuple[int, float, float, float]:
		"""
		Gets the current dimensions of the dynamic model device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Model size value on the x-axis |
		| 2 | y | float | Model size value on the y-axis |
		| 3 | z | float | Model size value on the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Dimensions are successfully supplied |
		| 0 | Device item is not a dynamic model or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		return self._obj.GetDynamicModelSize(dummy, dummy, dummy)

	def SetDynamicModelSize(self, x:float, y:float, z:float) -> int:
		"""
		Sets the dimensions of the dynamic model device item.

		:param x: New model size value on the x-axis  passed into the function
		:type float: float
		:param y: New model size value on the y-axis passed into the function
		:type float: float
		:param z: New model size value on the z-axis passed into the function
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Dimensions are successfully applied |
		| 0 | Device item is not a dynamic model or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		ret = self._obj.SetDynamicModelSize(x, y, z)
		return ret[0]

	def SetOptionExpressions(self, expressions:list[str]) -> int:
		"""
		Replaces the device item's option expressions.

		:param expressions: Array of strings of all option names, Boolean expressions or alias names of Boolean expressions
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.12
		"""
		return self._obj.SetOptionExpressions(expressions)

	def LoadAndPlaceComponent(self, name:str, assignment:str, location:str, comp:str, vers:str, wirename:str, after:int, options:int) -> int:
		"""
		Creates a new device item by loading a component and allowing the symbol to be interactively placed on a sheet.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param comp: Component name in the database
		:type str: str
		:param vers: Component version in the database
		:type str: str
		:param wirename: Conductor/wire designation of the component. Only relevant for creating a cable or wire group device
		:type str: str
		:param after: Identifier of an existing terminal device. Only relevant for creating a terminal device
		:type int: int
		:param options: Placement options. If 0, the symbol is placed. If 1, the pin symbols are placed. Only relevant for creating a connector device
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new device item |
		| 0 | Interactive placement was canceled or an error occurred |

		Available since E3.series TLB-Versions: 9.20
		"""
		return self._obj.LoadAndPlaceComponent(name, assignment, location, comp, vers, wirename, after, options)

	def GetAssignedOptionExpressionsEx(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options) including variant instances assigned to the device item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.23
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressionsEx(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def SetAttributeValueVariant(self, name:str, value:str, copy:int, VariantExpression:str) -> int:
		"""
		Sets the device item's specified attribute value for a variant.

		:param name: Internal name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str
		:param copy: Attribute number
		:type int: int
		:param VariantExpression: Variant or Boolean expression
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |
		| -1 | value exceeds 252 characters, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 9.30
		"""
		return self._obj.SetAttributeValueVariant(name, value, copy, VariantExpression)

	def SearchAll(self, name:str, assignment:str, location:str) -> tuple[int, tuple[int,...]]:
		"""
		Searches for device items in the project.

		:param name: Device designation of device to search for
		:type str: str
		:param assignment: Higher level assignment of device to search for
		:type str: str
		:param location: Location of device to search for
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of found devices  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No devices were found or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.SearchAll(name, assignment, location, dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def LockObject(self) -> int:
		"""
		Locks the device item's object.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device item's object is locked |
		| -1 | Error occurred |
		| -2 | Device item's object is already locked |
		| -3 | Error occurred |
		| -1009 | No project open or no device item set |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.LockObject()

	def UnlockObject(self, password:str) -> int:
		"""
		Unlocks the device item's object.

		:param password: Password needed to unlock the device
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device item's object has been unlocked |
		| -1 | Error occurred |
		| -2 | Device item's object is already unlocked |
		| -3 | Error occurred |
		| -1009 | No project open or no device item set |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.UnlockObject(password)

	def IsLocked(self) -> int:
		"""
		Indicates the device item lock status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is unlocked or an error occurred |
		| 1 | Device is locked |
		| 2 | Device is indirectly locked by a sheet |
		| 3 | Device is locked and indirectly locked by a sheet |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsLocked()

	def SetInterruptSignalFlow(self, sigflow:int=1) -> int:
		"""
		Sets the device's interrupt signal flow active status.

		:param sigflow: Signal flow interrupt value. If 1, signal flows are interrupted. If 0, signal flows are not interrupted., defaults to 1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previously the device's signal flows were interrupted |
		| 0 | Previously the device's signal flows were not interrupted or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetInterruptSignalFlow(sigflow)

	def GetInterruptSignalFlow(self) -> bool:
		"""
		Indicates if all the device's signal flows are interrupted.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | All the device's signal flows are interrupted |
		| 0 | Not all the device's signal flows are interrupted or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetInterruptSignalFlow()

	def IsHarness(self) -> int:
		"""
		Indicates if the device item is a harness.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a harness or an error occurred |
		| 1 | Device is a harness |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsHarness()

	def MergeHarnesses(self, ids:list[int]=pythoncom.Empty) -> int:
		"""
		Merges harness items into the current harness device item.

		:param ids: Array of identifiers of harness devices to be merged
		passed into the function., defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Harnesses are merged |
		| -1 | No project open or no device item set |
		| -2 | E³.topology not used |
		| -3 | Device is not a harness |
		| -4 | No items in ids |
		| -5 | Device item in ids is not a harness |
		| -6 | Harnesses cannot be merged |

		Available since E3.series TLB-Versions: 10.00
		"""
		ret = self._obj.MergeHarnesses(ids)
		return ret[0]

	def GetNetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of the harness device item's net identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of net identifiers  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No nets or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.GetNetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SortHarness(self, ids:list[int], postion:int, options:int) -> int:
		"""
		Sorts conductors and wires in the wiring harness device item.

		:param ids: Array of identifiers of conductors and wires to be sorted passed out of the function
		:type list[int]: list[int]
		:param postion: Position in the harness from which the conductor and wire items are to be sorted
		:type int: int
		:param options: Sorting order. If 1, conductors and wires are sorted in ascending order. If 2, conductors and wires are sorted in descending order. If any other value, all items are in the order found in ids
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Harness sorted |
		| -1 | No project open or no device item set |
		| -2 | E³.topology license unavailable |
		| -3 | Device is not a wiring harness |

		Available since E3.series TLB-Versions: 10.00
		"""
		ret = self._obj.SortHarness(ids, postion, options)
		return ret[0]

	def UpdateDisconnecting(self, options:int) -> tuple[int, tuple[int,...]]:
		"""
		Updates disconnecting points device items.

		:param options: Update options. 0 - Only update the current disconnecting point. 1 - Update the current disconnecting point and all connected disconnecting points
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of disconnected points that could not be updated passed out of the function. Not used from v2019-18.00 onwards |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in idsFrom v2019-18.00 this value is not returned |
		| 0 | Disconnecting points updated |
		| -1 | No project open or no device item set |
		| -2 | No license available |
		| -3 | Device is not a disconnecting point |
		| -4 | options is invalid |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.UpdateDisconnecting(options, dummy)
		ids = () if ids is None else ids
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsInstallationSpace(self) -> int:
		"""
		Indicates if the device item is an installation space.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not an installation space or an error occurred |
		| 1 | Device is an installation space |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsInstallationSpace()

	def AddToInstallationSpace(self, ids:list[int]=pythoncom.Empty) -> int:
		"""
		Places devices and functional units into the installation space device item.

		:param ids: Array of identifiers of devices to be placed into the installation space passed into the function., defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Devices and functional units are placed in the installation space |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		ret = self._obj.AddToInstallationSpace(ids)
		return ret[0]

	def RemoveFromInstallationSpace(self, ids:list[int]=pythoncom.Empty) -> int:
		"""
		Removes devices and functional units from the installation space device item.

		:param ids: Array of identifiers of devices to remove from the installation space
		passed into the function., defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Devices and functional units are removed from the installation space |
		| -1 | Error occurred |
		| -2 | Installation space is locked, Available since v2017-18.00 |
		| -3 | Functional unit is locked, Available since v2018-19.00 |

		Available since E3.series TLB-Versions: 10.00
		"""
		ret = self._obj.RemoveFromInstallationSpace(ids)
		return ret[0]

	def GetInstallationSpace(self) -> int:
		"""
		Gets the current device item's installation space.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the installation space device |
		| 0 | No installation space device or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetInstallationSpace()

	def AssignFunctionalUnits(self, ids:list[int]) -> int:
		"""
		Assigns functional units to the block item.

		:param ids: Array of identifiers of functional units to be assigned  passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Functional units assigned |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		ret = self._obj.AssignFunctionalUnits(ids)
		return ret[0]

	def AssignFunctionalUnitsDynamic(self, name:str, assignment:str, location:str, _type:int, ids:list[int]=pythoncom.Empty) -> int:
		"""
		Creates a dynamic connector or dynamic block connector device item.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param _type: Connector type. If 0, a dynamic block connector device item is created. If 1, a dynamic connector device item is created
		:type int: int
		:param ids: Array of identifiers of functional units to be assigned  passed into the function, defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		ret = self._obj.AssignFunctionalUnitsDynamic(name, assignment, location, _type, ids)
		return ret[0]

	def GetConnWithInsertsId(self) -> int:
		"""
		Gets the identifier of the current device item's parent connector with inserts device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the connector with inserts device |
		| 0 | No connector with inserts device or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetConnWithInsertsId()

	def IsConnWithInsertsPart(self) -> int:
		"""
		Indicates if the device item is part of a connector with inserts.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not part of a connector with inserts or an error occurred |
		| 1 | Device is part of a connector with inserts |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsConnWithInsertsPart()

	def IsConnWithInserts(self) -> int:
		"""
		Indicates if the device item is a connector with inserts.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a connector with inserts or an error occurred |
		| 1 | Device is a connector with inserts |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsConnWithInserts()

	def SetPanelFreePlacement(self, freeplacement:int=1) -> int:
		"""
		Sets the device item's status for the option to place the device on a free position on a panel sheet.

		:param freeplacement: New value for option to place the device on a free position on a panel sheet status. If 1, option to place the device on a free position on a panel sheet is active. If 0, option to place the device on a free position on a panel sheet is inactive., defaults to 1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option to place the device on a free position on a panel sheet is active |
		| 0 | Option to place the device on a free position on a panel sheet is inactive or an error occurred |
		| -1 | Device's model is already placed |

		Available since E3.series TLB-Versions: 11.80
		"""
		return self._obj.SetPanelFreePlacement(freeplacement)

	def GetPanelFreePlacement(self) -> bool:
		"""
		Gets the device item's status for the option to place the device on a free position on a panel sheet.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option to place the device on a free position on a panel sheet is active |
		| 0 | Option to place the device on a free position on a panel sheet is inactive or an error occurred |

		Available since E3.series TLB-Versions: 11.80
		"""
		return self._obj.GetPanelFreePlacement()

	def IsAssignmentLockChangeable(self) -> bool:
		"""
		Indicates if the device item's higher level assignment lock status can be changed.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Higher level assignment lock status can be changed |
		| 0 | Higher level assignment lock status cannot be changed or an error occurred |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.IsAssignmentLockChangeable()

	def GetAssignmentLockChangeable(self) -> bool:
		"""
		Gets the unlock status of the device item's higher level assignment value.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Higher level assignment value can be changed |
		| 0 | Higher level assignment value cannot be changed or an error occurred |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.GetAssignmentLockChangeable()

	def SetAssignmentLockChangeable(self, lockchangeable:bool) -> int:
		"""
		Sets the unlock status of the device item's higher level assignment value.

		:param lockchangeable: New unlock status value. If 1, higher level assignment is unlocked. If 0, higher level assignment is locked
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Higher level assignment unlock status applied |
		| 1 | No project open or no device item set |
		| 2 | Device is unlocked |
		| 3 | Invalid device type |
		| 5 | Lock state of parts of the device cannot be changed |
		| 6 | Device is locked by E³PluginAccessControl |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.SetAssignmentLockChangeable(lockchangeable)

	def IsLocationLockChangeable(self) -> bool:
		"""
		Indicates if the device item's location lock status can be changed.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Location lock status can be changed |
		| 0 | Location lock status cannot be changed or an error occurred |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.IsLocationLockChangeable()

	def GetLocationLockChangeable(self) -> bool:
		"""
		Indicates if the device item's location value can be changed.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Location value can be changed |
		| 0 | Location value cannot be changed or an error occurred |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.GetLocationLockChangeable()

	def SetLocationLockChangeable(self, lockchangeable:bool) -> int:
		"""
		Sets the unlock status of the device item's location value.

		:param lockchangeable: New unlock status value. If 1, location is unlocked. If 0, location is locked
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Location unlock status applied |
		| 1 | No project open or no device item set |
		| 2 | Device is unlocked |
		| 3 | Invalid device type |
		| 5 | Lock state of parts of the device cannot be changed |
		| 6 | Device is locked by E³PluginAccessControl |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.SetLocationLockChangeable(lockchangeable)

	def IsNameLockChangeable(self) -> bool:
		"""
		Indicates if the device item's device designation lock status can be changed.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device designation lock status can be changed |
		| 0 | Device designation lock status cannot be changed or an error occurred |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.IsNameLockChangeable()

	def GetNameLockChangeable(self) -> bool:
		"""
		Indicates if the device item's device designation value can be changed.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device designation value can be changed |
		| 0 | Device designation value cannot be changed or an error occurred |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.GetNameLockChangeable()

	def SetNameLockChangeable(self, lockchangeable:bool) -> int:
		"""
		Sets the unlock status of the device item's device designation value.

		:param lockchangeable: New unlock status value. If 1, device designation is unlocked. If 0, device designation is locked
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device designation unlock status applied |
		| 1 | No project open or no device item set |
		| 2 | Device is unlocked |
		| 3 | Invalid device type |
		| 5 | Lock state of parts of the device cannot be changed |
		| 6 | Device is locked by E³PluginAccessControl |

		Available since E3.series TLB-Versions: 14.00
		"""
		return self._obj.SetNameLockChangeable(lockchangeable)

	def SetPanelLocationEx(self, flags:int, shti:int, x:float, y:float, z:float, rot:str, use_start_z:bool=False, place_combined:bool=False, pivot:int=0, shift_key:bool=False) -> int:
		"""
		Sets the device item's model position on the panel.

		:param flags: Panel placement options
		:type int: int
		:param shti: Identifier of the panel sheet
		:type int: int
		:param x: Panel placement position on the x-axis
		:type float: float
		:param y: Panel placement position on the y-axis
		:type float: float
		:param z: Panel placement position on the z-axis
		:type float: float
		:param rot: Rotation value
		:type str: str
		:param use_start_z: Indicates if. z. should be used as a starting value dependent on the sheet justification. If 1, z is used as a starting value. If 0, z is not used as a starting value., defaults to False
		:type bool: bool
		:param place_combined: Indicates how the device models are placed. If 1, the device's models are placed as a plugged assembly. If 0, the device's model is placed as a normal model., defaults to False
		:type bool: bool
		:param pivot: Tilt value., defaults to 0
		:type int: int
		:param shift_key: Disables autorotate when placing models. If 1, autorotation is disabled. If 0, autorotation is enabled., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model is placed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 14.12
		"""
		return self._obj.SetPanelLocationEx(flags, shti, x, y, z, rot, use_start_z, place_combined, pivot, shift_key)

	def IsCableDuctInletOutlet(self) -> bool:
		"""
		Indicates if the device item is a cable duct inlet/outlet.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a cable duct inlet/outlet or an error occurred |
		| 1 | Device is a cable duct inlet/outlet |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.IsCableDuctInletOutlet()

	def IsCableDuctInletOutletPart(self) -> bool:
		"""
		Indicates if the device item is a cable duct inlet/outlet part.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a cable duct inlet/outlet part or an error occurred |
		| 1 | Device is a cable duct inlet/outlet part |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.IsCableDuctInletOutletPart()

	def GetCableDuctInletOutletId(self) -> int:
		"""
		Gets the identifier of the cable duct inlet/outlet item of the device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Cable duct inlet/outlet item identifier |
		| 0 | No cable duct inlet/outlet item found or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.GetCableDuctInletOutletId()

	def GetCableDuctInletOutlet(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the cable duct inlet and cable duct outlet items of the device item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of the cable duct inlet and cable duct outlet items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No cable duct inlet and cable duct outlet items found or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		dummy=0
		ret, ids = self._obj.GetCableDuctInletOutlet(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetCableDuctLength(self, newlen:float) -> int:
		"""
		Sets the cable duct device item's length.

		:param newlen: Cable duct length value to apply
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the device's cable duct length attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.SetCableDuctLength(newlen)

	def CreateCableDuctEx(self, name:str, assignment:str, location:str, xlen:float, ywid:float, zhgt:float, templ:str, flags:int, combwidth:float) -> int:
		"""
		Creates a new cable duct device item.

		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param xlen: Length of the cable duct
		:type float: float
		:param ywid: Width of the cable duct
		:type float: float
		:param zhgt: Height of the cable duct
		:type float: float
		:param templ: Text template
		:type str: str
		:param flags: Cable duct options
		:type int: int
		:param combwidth: Width of the comb
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new cable duct device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.CreateCableDuctEx(name, assignment, location, xlen, ywid, zhgt, templ, flags, combwidth)

	def Get3DTransparency(self) -> int:
		"""
		Gets the 3-dimensional transparency status of the device item's model.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | 3D transparency status of the model |
		| 0 | No model placed or an error occurred |

		Available since E3.series TLB-Versions: 15.81
		"""
		return self._obj.Get3DTransparency()

	def Set3DTransparency(self, mode:int) -> int:
		"""
		Sets the 3-dimensional transparency status of the device item's model.

		:param mode: New 3D transparency state
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | 3D transparency status of the model applied |
		| &gt; 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.81
		"""
		return self._obj.Set3DTransparency(mode)

	def IsPinTerminalSymbolsUsed(self) -> bool:
		"""
		Indicates if pin terminal symbols are used for a device view.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin terminal symbols are used |
		| 0 | Pin terminal symbols are not used or an error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.IsPinTerminalSymbolsUsed()

	def SetPinTerminalSymbolsUsed(self, use:int) -> int:
		"""
		Sets whether pin terminal symbols are used for a connector view item.

		:param use: Indicates whether pin terminal symbols are used. If 1, pin terminal symbols are used. If 0, pin terminal symbols are not used
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Pin terminal symbols used status is applied |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 16.00
		"""
		return self._obj.SetPinTerminalSymbolsUsed(use)

	def GetReferenceType(self) -> int:
		"""
		Gets the device item's referencing method.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Value representing the reference type |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 16.01
		"""
		return self._obj.GetReferenceType()

	def SetReferenceType(self, _type:int) -> int:
		"""
		Sets the device item's referencing method.

		:param _type: New reference type value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | New reference type value applied |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 16.01
		"""
		return self._obj.SetReferenceType(_type)

	def Create2DViewEx(self, modi:int, name:str, symbol:str, position:int=0, before:int=0, shtId:int=0, xMin:float=0, yMin:float=0, xMax:float=0, yMax:float=0, scale:float=0) -> int:
		"""
		Creates a 2D front view sheet of a device item's placed model or adds a front view to an existing 2D view sheet.

		:param modi: 2D view option flags
		:type int: int
		:param name: 2D view sheet name
		:type str: str
		:param symbol: Sheet format symbol name
		:type str: str
		:param position: Identifier of the sheet to use as the insertion position of the new 2D view in the project., defaults to 0
		:type int: int
		:param before: Indicates whether to insert the 2D view before or after. position. If 1, the 2D view sheet is placed above position in the project tree. If 1 and position is 0, the 2D view sheet is placed at the top of the project tree. If 0, the 2D view sheet is place below position in the project tree. If 0 and position is 0, the 2D view sheet is place at the end of the project tree., defaults to 0
		:type int: int
		:param shtId: Identifier of the sheet to add the 2D view to., defaults to 0
		:type int: int
		:param xMin: Defines the lower left x-axis placement area value. .0, defaults to 0
		:type float: float
		:param yMin: Defines the lower left y-axis placement area value. .0, defaults to 0
		:type float: float
		:param xMax: Defines the upper right x-axis placement area value. .0, defaults to 0
		:type float: float
		:param yMax: Defines the upper right y-axis placement area value. .0, defaults to 0
		:type float: float
		:param scale: Scale factor of the 2D view area. .0, defaults to 0
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new device item |
		| 0 | Error occurred |
		| -1 | 2D view cannot be created for the device item's model |
		| -2 | name is invalid |
		| -3 | symbol is invalid |
		| -4 | position value is invalid |
		| -5 | shtid value is invalid |
		| -6 | xMin, yMin, xMax or yMax value is invalid |
		| -7 | scale value is invalid |

		Available since E3.series TLB-Versions: 16.01
		"""
		return self._obj.Create2DViewEx(modi, name, symbol, position, before, shtId, xMin, yMin, xMax, yMax, scale)

	def GetAssignedOptionExpressionsWithFlags(self, Term:int=0) -> tuple[int, tuple[tuple[str,int],...]]:
		"""
		Gets option names and Boolean expressions (combinations of options)  including variant instances assigned to the device item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[tuple[str,int],...] | Array of assigned option expression values  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 17.00
		"""
		var_expressions = VARIANT(pythoncom.VT_TYPEMASK, 0)
		ret, expressions = self._obj.GetAssignedOptionExpressionsWithFlags(var_expressions, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def SetOptionExpressionsWithFlags(self, expressions:list[tuple[str,int]]) -> int:
		"""
		Replaces the device item's option expressions.

		:param expressions: Array of assigned option expressions and status values
		:type list[tuple[str,int]]: list[tuple[str,int]]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 17.00
		"""
		expressions = [("",0)] + expressions
		return self._obj.SetOptionExpressionsWithFlags(expressions)

	def GetBlockDeviceIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the devices contained within the block device item.

		:param flags: Device filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of device items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No device identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 17.00
		"""
		dummy=0
		ret, ids = self._obj.GetBlockDeviceIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateDeviceOnBlock(self, blkid:int, name:str, assignment:str, location:str, comp:str, vers:str, after:int) -> int:
		"""
		Creates a new device item on a block.

		:param blkid: Block identifier
		:type int: int
		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param comp: Component name in the database
		:type str: str
		:param vers: Version in the database
		:type str: str
		:param after: Identifier of an existing terminal device. Only relevant for creating a terminal device
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new device item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 17.00
		"""
		return self._obj.CreateDeviceOnBlock(blkid, name, assignment, location, comp, vers, after)

	def GetMountLength(self) -> float:
		"""
		Gets the mounting rail device item's length.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Mounting rail length |
		| 0.0 | No mounting rail length or an error occurred |

		Available since E3.series TLB-Versions: 17.00, 16.12, 15.28
		"""
		return self._obj.GetMountLength()

	def GetTerminalType(self) -> int:
		"""
		Gets a value representing the device item's terminal type.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Value representing the terminal type |
		| 0 | Device is not a terminal or an error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.GetTerminalType()

	def AutosolveTerminalstrip(self) -> int:
		"""
		Automatically organizes the terminal strip device item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Terminal strip device item is organized |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.AutosolveTerminalstrip()

	def MergeTerminals(self, ids:list[int], compname:str, mergeterminalscontinuously:bool=False) -> int:
		"""
		Merges terminal items into a multi-level terminal within the current terminal strip device item.

		:param ids: Array of identifiers of terminal and terminal strip devices to be merged
		:type list[int]: list[int]
		:param compname: Component name of the multi-level terminal
		:type str: str
		:param mergeterminalscontinuously: Indicates how terminals should be merged. If 1, terminals are merged consecutively. If 0, terminals are merged on the first level., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Terminals are merged |
		| 0 | No project open or no device item set |
		| -1 | ids contains Invalid values |
		| -2 | compname is invalid |
		| -3 | Error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.MergeTerminals(ids, compname, mergeterminalscontinuously)

	def BridgeTerminals(self, ids:list[int]) -> int:
		"""
		Creates jumpers between terminals or terminal strips.

		:param ids: Array of identifiers of terminal or terminal strip items
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Terminal or terminal strip items bridged |
		| 0 | No project open |
		| -1 | ids contains invalid identifiers |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.BridgeTerminals(ids)

	def GetSealedState(self) -> int:
		"""
		Gets the device item's wire sealed status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Wire sealed status is active |
		| 0 | Wire sealed status is inactive |
		| -1 | No project open or no device item set |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.GetSealedState()

	def SetSealedState(self, _type:int) -> int:
		"""
		Sets the device item's wire sealed state.

		:param _type: New wire sealed state value. If 1, wire sealed state set to active. If 0, wire sealed state set to inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Wire sealed state value applied |
		| -1 | No project open or no device item set |
		| -2 | Invalid type value |
		| -3 | Device type cannot be sealed or device is locked |
		| -4 | Error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.SetSealedState(_type)

	def GetNameEx(self, flags:int) -> str:
		"""
		Gets the device item's device designation.

		:param flags: Indicates if the device designation suffix should be included. If 1, the suffix is not included in the return value. If 0, the suffix is included in the return value
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Device designation |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 18.02, 17.31
		"""
		return self._obj.GetNameEx(flags)

	def GetAssignmentEx(self, flags:int) -> str:
		"""
		Gets the device item's higher level assignment value.

		:param flags: Indicates if the higher level assignment suffix should be included. If 1, the suffix is not included in the return value. If 0, the suffix is included in the return value
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Higher level assignment value supplied |
		| "&lt;Empty&gt;" | No higher level assignment value supplied or an error occurred |

		Available since E3.series TLB-Versions: 18.02, 17.31
		"""
		return self._obj.GetAssignmentEx(flags)

	def GetLocationEx(self, flags:int) -> str:
		"""
		Gets the device item's location value.

		:param flags: Indicates if the location suffix should be included. If 1, the suffix is not included in the return value. If 0, the suffix is included in the return value
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Location value supplied |
		| "&lt;Empty&gt;" | No location value supplied or an error occurred |

		Available since E3.series TLB-Versions: 18.02, 17.31
		"""
		return self._obj.GetLocationEx(flags)

	def GetSpaceRequirementOnCarrier(self, carrierid:int=0) -> tuple[int, tuple[int,...], tuple[int,...], tuple[int,...]]:
		"""
		Gets the device item's space requirements on a carrier.

		:param carrierid: Identifier of the carrier device., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | lowerleft | tuple[int,...] | Array of coordinates for the device's lower left point |
		| 2 | upperright | tuple[int,...] | Array of coordinates for the device's upper right point |
		| 3 | origin | tuple[int,...] | Array of coordinates for the device's origin point |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Space requirement values are supplied |
		| -1 | No project open or device item set |
		| -2 | Device does not have a main outline |
		| -3 | carrierid is an invalid carrier device identifier |

		Available since E3.series TLB-Versions: 18.12
		"""
		dummy=0
		ret, lowerleft, upperright, origin = self._obj.GetSpaceRequirementOnCarrier(dummy, dummy, dummy, carrierid)
		lowerleft = lowerleft[1:] if type(lowerleft) == tuple and len(lowerleft) > 0 else tuple()
		upperright = upperright[1:] if type(upperright) == tuple and len(upperright) > 0 else tuple()
		origin = origin[1:] if type(origin) == tuple and len(origin) > 0 else tuple()
		return ret, lowerleft, upperright, origin

	def GetValidComponentCodesEx(self, flags:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets an array of names of components in the database with the same structure as the device item.

		:param flags: Component filter flags., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | names | tuple[str,...] | Array of component names  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of component names in names |
		| 0 | No matching component names found or an error occurred |

		Available since E3.series TLB-Versions: 18.80
		"""
		dummy=0
		ret, names = self._obj.GetValidComponentCodesEx(dummy, flags)
		names = names[1:] if type(names) == tuple and len(names) > 0 else tuple()
		return ret, names

	def IsLockedByAccessControl(self) -> int:
		"""
		Indicates the device item's E³PluginAccessControl lock status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 3 | Device is locked and also indirectly by the sheet |
		| 2 | Device is locked indirectly by the sheet |
		| 1 | Device is locked |
		| 0 | Device is unlocked or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.IsLockedByAccessControl()

	def IsFeedThroughConnector(self) -> int:
		"""
		Indicates if the device item is a feed-through connector.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device is not a feed-through connector or an error occurred |
		| 1 | Device is a feed-through connector |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.IsFeedThroughConnector()

	def PlugWithMatingPins(self) -> tuple[int, tuple[int,...]]:
		"""
		Plugs the device item with its mating devices.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | deviceIds | tuple[int,...] | Array of identifiers of the plugged mating devices  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of mating device identifiers in deviceIds |
		| -1 | No project open, no device item set or E³.series is running in viewer mode, Previous to v2026-26.00, E³.logic module is running is also a possibility |
		| -2 | Device does not have a mating connector device |
		| -3 | Device has different signals to its mating devices |
		| -4 | Device item or its mating devices are locked |
		| -5 | Device item pins are already connected |
		| -6 | Device item is unsuitable for plugging |
		| -7 | Device item has no pins available for plugging |
		| -8 | Device item is a view |
		| -9 | Error occurred |
		| -15 | Busbar pins cannot be plugged, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 20.00
		"""
		dummy=0
		ret, deviceIds = self._obj.PlugWithMatingPins(dummy)
		deviceIds = deviceIds[1:] if type(deviceIds) == tuple and len(deviceIds) > 0 else tuple()
		return ret, deviceIds

	def UnplugFromMatingPins(self) -> tuple[int, tuple[int,...]]:
		"""
		Unplugs the device item from its mating devices.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | deviceIds | tuple[int,...] | Identifiers of the unplugged mating devices passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of unplugged device identifiers in deviceIds |
		| -1 | No project open, no device item set or E³.series is running in viewer mode, Previous to v2026-26.00, E³.logic module is running is also a possibility |
		| -2 | Device not connected |
		| -3 | Device cannot be unplugged |
		| -4 | Device item or its mating devices are locked |
		| -5 | No device item pins are found |
		| -6 | Device item is unsuitable for unplugging |
		| -7 | Error occurred |

		Available since E3.series TLB-Versions: 20.00
		"""
		dummy=0
		ret, deviceIds = self._obj.UnplugFromMatingPins(dummy)
		deviceIds = deviceIds[1:] if type(deviceIds) == tuple and len(deviceIds) > 0 else tuple()
		return ret, deviceIds

	def PlugWith(self, id:int) -> int:
		"""
		Plugs the device item with another device.

		:param id: Identifier of the device to plug with
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Device item and the id device are successfully plugged |
		| -1 | No project open or device item set |
		| -2 | id is invalid |
		| -3 | Device item or the id device is locked |
		| -4 | Device item or the id device has no pins |
		| -5 | Device item or the id device is unsuitable for plugging |
		| -6 | Device item and the id device assigned signals are incompatible with one another |
		| -7 | Plug not allowed |
		| -8 | Conductor on the device item or the id device is already connected |
		| -9 | Device item or the id device has no pins available for plugging |
		| -10 | Error occurred |
		| -11 | id device is inactive |
		| -12 | No valid mating connector found, Available since v2019-20.30 and v2020-21.13 |
		| -13 | Device pin gender is incompatible, Available since v2019-20.30 and v2020-21.13 |
		| -14 | Pin with signal "**NC**" already connected, Available since v2019-20.30 and v2020-21.13 |
		| -15 | Device with busbar pins cannot be plugged, Available since v2022-23.00 |
		| -16 | Pins with different names cannot be plugged, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.PlugWith(id)

	def CreateConnectorOnBlockEx(self, blkid:int, name:str, assignment:str, location:str, cmpname:str, version:str) -> int:
		"""
		Creates a new connector device item on a block.

		:param blkid: Block identifier to add connector to
		:type int: int
		:param name: Device designation value
		:type str: str
		:param assignment: Higher level assignment value
		:type str: str
		:param location: Location value
		:type str: str
		:param cmpname: Component name in the database
		:type str: str
		:param version: Version in the database
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | New connector device item created |
		| -1 | Error occurred |
		| -2 | cmpname is invalid |
		| -3 | No valid pins found |
		| -4 | Supply could not be assigned to the component |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.CreateConnectorOnBlockEx(blkid, name, assignment, location, cmpname, version)

	def PlaceOnPointSlot(self, slotid:int, rotation:float=0, pivot:int=0, combined:int=0) -> tuple[int, tuple[tuple[int,int],...]]:
		"""
		Places the current device item's model on a point slot.

		:param slotid: Identifier of the placement slot
		:type int: int
		:param rotation: Rotation relative to the slot. .0, defaults to 0
		:type float: float
		:param pivot: Pivot relative to the slot., defaults to 0
		:type int: int
		:param combined: Also place if the device is a plugged assembly., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | collisionids | tuple[tuple[int,int],...] | Array of collision items and causes passed out of the function. |

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | Model was placed on the slot however collisions occurred |
		| 1 | Model was placed on the slot |
		| -1 | No project open or no device item set |
		| -2 | slotid is invalid |
		| -3 | Invalid slot type |
		| -4 | Slot is not placed |
		| -5 | Device item's model is already placed |
		| -6 | Device item has no model |
		| -7 | x and y values are outside of the slot area |
		| -8 | Device item's model could not be placed due to collisions |
		| -9 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.11
		"""
		var_collisionids = VARIANT(pythoncom.VT_TYPEMASK, 0)
		ret, collisionids = self._obj.PlaceOnPointSlot(slotid, rotation, pivot, combined, var_collisionids)
		collisionids = () if collisionids is None else collisionids
		return ret, collisionids

	def PlaceOnLineSlot(self, slotid:int, x:float, rotation:float=0, combined:int=0) -> tuple[int, tuple[tuple[int,int],...]]:
		"""
		Places the current device item's model on a line slot.

		:param slotid: Identifier of the placement slot
		:type int: int
		:param x: Placement position on the area slot's x-axis relative to the origin
		:type float: float
		:param rotation: Rotation relative to the slot. .0, defaults to 0
		:type float: float
		:param combined: Also place if the device is a plugged assembly., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | collisionids | tuple[tuple[int,int],...] | Array of collision items and causes passed out of the function. |

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | Model was placed on the slot however collisions occurred |
		| 1 | Model was placed on the slot |
		| -1 | No project open or no device item set |
		| -2 | slotid is invalid |
		| -3 | Invalid slot type |
		| -4 | Slot is not placed |
		| -5 | Device item's model is already placed |
		| -6 | Device item has no model |
		| -7 | x and y values are outside of the slot area |
		| -8 | Device item's model could not be placed due to collisions |
		| -9 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.11
		"""
		var_collisionids = VARIANT(pythoncom.VT_TYPEMASK, 0)
		ret, collisionids = self._obj.PlaceOnLineSlot(slotid, x, rotation, combined, var_collisionids)
		collisionids = () if collisionids is None else collisionids
		return ret, collisionids

	def PlaceOnAreaSlot(self, slotid:int, x:float, y:float, rotation:float=0, pivot:int=0, combined:int=0) -> tuple[int, tuple[tuple[int,int],...]]:
		"""
		Places the current device item's model on an area slot.

		:param slotid: Identifier of the placement slot
		:type int: int
		:param x: Placement position on the area slot's x-axis relative to the origin of the area slot. Previous to v2020-21.42, v2021-22.50 and v2022-23.50 the placement position is relative to the parent panel sheet's origin
		:type float: float
		:param y: Placement position on the area slot's y-axis relative to the origin  of the area slot. Previous to v2020-21.42, v2021-22.50 and v2022-23.50 the placement position is relative to the parent panel sheet's origin
		:type float: float
		:param rotation: Rotation relative to the slot. .0, defaults to 0
		:type float: float
		:param pivot: Pivot relative to the slot., defaults to 0
		:type int: int
		:param combined: Also place if the device is a plugged assembly., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | collisionids | tuple[tuple[int,int],...] | Array of collision items and causes passed out of the function. |

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | Model was placed on the slot however collisions occurred |
		| 1 | Model was placed on the slot |
		| -1 | No project open or no device item set |
		| -2 | slotid is invalid |
		| -3 | Invalid slot type |
		| -4 | Slot is not placed |
		| -5 | Device item's model is already placed |
		| -6 | Device item has no model |
		| -7 | x and y values are outside of the slot area |
		| -8 | Device item's model could not be placed due to collisions |
		| -9 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.11
		"""
		var_collisionids = VARIANT(pythoncom.VT_TYPEMASK, 0)
		ret, collisionids = self._obj.PlaceOnAreaSlot(slotid, x, y, rotation, pivot, combined, var_collisionids)
		collisionids = () if collisionids is None else collisionids
		return ret, collisionids

	def SortTerminals(self, method:int, sub_method:int=0, sort_file:str="") -> int:
		"""
		Sorts the terminal placement order of the terminal strip device item.

		:param method: Value representing the sort method
		:type int: int
		:param sub_method: Value representing the sort method's sorting option., defaults to 0
		:type int: int
		:param sort_file: Path and name of the sorting file. Only required if the sort method is sort by file. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Terminals are sorted |
		| -1 | No project open, no device item set or device item is not a terminal strip |
		| -2 | Terminal strip locked from being moved |
		| -3 | Terminal strip is placed on the panel and cannot be optimized further |
		| -4 | Single terminals are placed and grouped in the panel |
		| -5 | method is invalid |
		| -6 | sub_method is invalid |
		| -7 | sort_file file does not exist or cannot be opened |
		| -8 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.11
		"""
		return self._obj.SortTerminals(method, sub_method, sort_file)

	def GetDefinedOuterDiameter(self) -> float:
		"""
		Gets the defined outer diameter of the cable device item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Defined outer diameter |
		| 0.0 | No defined outer diameter or an error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.12, 18.42
		"""
		return self._obj.GetDefinedOuterDiameter()

	def GetMountedSlotIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the device item's mounted slots.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of mounted slot items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of items in ids |
		| -1 | No project open or no device item set |
		| -2 | Device item has no slots |

		Available since E3.series TLB-Versions: 20.00, 19.22
		"""
		dummy=0
		ret, ids = self._obj.GetMountedSlotIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetOverbraidIdEx(self) -> int:
		"""
		Gets the identifier of the current overbraid or cable device item's parent overbraid device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the parent overbraid |
		| -1 | No project open or no device item set |
		| -2 | Device is not a part of an overbraid |
		| -3 | Device is an invalid device type to be contained in an overbraid |
		| -4 | Device is a root overbraid |

		Available since E3.series TLB-Versions: 20.01, 19.24
		"""
		return self._obj.GetOverbraidIdEx()

	def GetRootOverbraidId(self) -> int:
		"""
		Gets the identifier of the device item's root overbraid.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the root overbraid |
		| -1 | No project open or device item set |
		| -2 | Device item is not an overbraid element |
		| -3 | Device item is an invalid type |
		| -4 | Device item is the root overbraid |

		Available since E3.series TLB-Versions: 20.01, 19.24
		"""
		return self._obj.GetRootOverbraidId()

	def GetJustificationPoint(self) -> tuple[int, float, float, float]:
		"""
		Gets the justification for slot points on the model.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Justification value of the x-axis |
		| 2 | y | float | Justification value of the y-axis |
		| 3 | z | float | Justification value of the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Justification values are provided |
		| -1 | No project open or device item set |
		| -2 | Device does not have a model |
		| -3 | Justification cannot be determined |

		Available since E3.series TLB-Versions: 20.05, 19.33
		"""
		dummy=0
		return self._obj.GetJustificationPoint(dummy, dummy, dummy)

	def GetJustificationLine(self) -> tuple[int, float, float]:
		"""
		Gets the justification for slot lines on the model.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | y | float | Justification value of the y-axis |
		| 2 | z | float | Justification value of the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Justification values are provided |
		| -1 | No project open or device item set |
		| -2 | Device does not have a model |
		| -3 | Justification cannot be determined |

		Available since E3.series TLB-Versions: 20.05, 19.33
		"""
		dummy=0
		return self._obj.GetJustificationLine(dummy, dummy)

	def GetJustificationArea(self) -> tuple[int, float]:
		"""
		Gets the justification for slot areas on the model.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | z | float | Justification value of the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Justification values are provided |
		| -1 | No project open or device item set |
		| -2 | Device does not have a model |
		| -3 | Justification cannot be determined |

		Available since E3.series TLB-Versions: 20.05, 19.33
		"""
		dummy=0
		return self._obj.GetJustificationArea(dummy)

	def Create2DViewOfSlots(self, modi:int, name:str, symbol:str, slotslist:list[int], position:int=0, before:int=0, shtId:int=0, xMin:float=0, yMin:float=0, xMax:float=0, yMax:float=0, scale:float=0) -> int:
		"""
		Creates a 2D view of slots.

		:param modi: Display flags for the 2D view
		:type int: int
		:param name: Name of the 2D view
		:type str: str
		:param symbol: Symbol name of the sheet format for the 2D view
		:type str: str
		:param slotslist: Array of identifiers of slots to be displayed
		:type list[int]: list[int]
		:param position: Existing sheet identifier of the insertion point for the 2D view sheet in the project tree., defaults to 0
		:type int: int
		:param before: Indicates whether to insert the 2D view before or after. position. If 1, the 2D view sheet is placed above position in the project tree. If 1 and position is 0, the 2D view sheet is placed at the top of the project tree. If 0, the 2D view sheet is place below position in the project tree. If 0 and position is 0, the 2D view sheet is place at the end of the project tree., defaults to 0
		:type int: int
		:param shtId: Identifier of the sheet to place the 2D view on. If shtId is 0, a new 2D view sheet is added., defaults to 0
		:type int: int
		:param xMin: Defines the lower left x-axis placement area value. .0, defaults to 0
		:type float: float
		:param yMin: Defines the lower left y-axis placement area value. .0, defaults to 0
		:type float: float
		:param xMax: Defines the upper right x-axis placement area value. .0, defaults to 0
		:type float: float
		:param yMax: Defines the upper right y-axis placement area value. .0, defaults to 0
		:type float: float
		:param scale: The scale of the 2D view. If scale is 0.0, the scaling is done automatically. .0, defaults to 0
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Sheet item identifier of the 2D view |
		| 0 | 2D view could not be added |
		| -1 | Model does not fulfill criteria for a 2D view |
		| -2 | name is invalid |
		| -3 | symbol is invalid |
		| -4 | position is an invalid sheet |
		| -5 | shtId does not fulfill criteria for a 2D view |
		| -6 | Invalid area defined by xMin, yMin, xMax and yMax |
		| -7 | scale is invalid |
		| -8 | No slots specified in slotslist |
		| -9 | Device does not have any slots |
		| -10 | One or more slots specified in slotslist are not slots |
		| -11 | One or more slots specified in slotslist do not belong to the device |
		| -12 | One or more slots specified in slotslist already have a 2D view |
		| -13 | One or more slots specified in slotslist are located on different views |
		| -14 | No model view exists on the panel base sheet |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.Create2DViewOfSlots(modi, name, symbol, slotslist, position, before, shtId, xMin, yMin, xMax, yMax, scale)

	def GetSpaceRequirement(self, flags:int) -> tuple[int, tuple[float,...], tuple[float,...], tuple[float,...]]:
		"""
		Gets the device item's space requirements.

		:param flags: Indicates which space requirements should be supplied. If set to 0, the space requirements of the device as defined in the database are supplied. If set to 1, the space requirements of the device's placed position including rotation, mirroring and pivoting are supplied
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | lowerleft | tuple[float,...] | Array of coordinates for the device's lower left point |
		| 2 | upperright | tuple[float,...] | Array of coordinates for the device's upper right point |
		| 3 | origin | tuple[float,...] | Array of coordinates for the device's origin point |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Space requirement values are supplied |
		| -1 | No project open or device item set |
		| -2 | Device does not have a main contour |

		Available since E3.series TLB-Versions: 21.12
		"""
		dummy=0
		ret, lowerleft, upperright, origin = self._obj.GetSpaceRequirement(flags, dummy, dummy, dummy)
		lowerleft = lowerleft[1:] if type(lowerleft) == tuple and len(lowerleft) > 0 else tuple()
		upperright = upperright[1:] if type(upperright) == tuple and len(upperright) > 0 else tuple()
		origin = origin[1:] if type(origin) == tuple and len(origin) > 0 else tuple()
		return ret, lowerleft, upperright, origin

	def GetCableDuctFillLimit(self) -> int:
		"""
		Gets the device item's cable duct fill limit value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=1 | Cable duct fill limit value |
		| -1 | No project open or no device item set |
		| -2 | No suitable slot is defined on the device |
		| -3 | Several cable ducts with different capacities are valid through variant positions and variants |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetCableDuctFillLimit()

	def SetCableDuctFillLimit(self, percentage:int) -> int:
		"""
		Sets the device item's cable duct fill limit value.

		:param percentage: Cable duct fill limit value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Cable duct fill limit value |
		| -1 | No project open or no device item set |
		| -2 | No suitable slot is defined on the device |
		| -3 | Device is locked |
		| -4 | percentage value is invalid |
		| -5 | No license available |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.SetCableDuctFillLimit(percentage)

	def GetCableDuctWarningLimit(self) -> int:
		"""
		Gets the device item's cable duct fill limit warning value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=1 | Cable duct fill limit warning value |
		| -1 | No project open or no device item set |
		| -2 | No suitable slot is defined on the device |
		| -3 | Several cable ducts with different capacity warning limits are valid through variant positions and variants |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetCableDuctWarningLimit()

	def SetCableDuctWarningLimit(self, percentage:int) -> int:
		"""
		Sets the device item's cable duct fill limit warning value.

		:param percentage: Cable duct fill limit warning value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Cable duct fill capacity warning value applied |
		| -1 | No project open or no device item set |
		| -2 | No suitable slot is defined on the device |
		| -3 | Device is locked |
		| -4 | percentage value is invalid |
		| -5 | No license available |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.SetCableDuctWarningLimit(percentage)

	def SetStateId(self, id:int) -> int:
		"""
		Sets the device item's state.

		:param id: Identifier of the state to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device's current state applied |
		| -1 | No project open or no device item set |
		| -2 | Device has no component assigned |
		| -3 | id is invalid |
		| -4 | Device symbols are placed on a locked sheet |
		| -5 | Device is a view |

		Available since E3.series TLB-Versions: 22.10
		"""
		return self._obj.SetStateId(id)

	def GetStateId(self) -> int:
		"""
		Gets the device item's state identifier.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the device's state |
		| 0 | Device has no state or an error occurred |

		Available since E3.series TLB-Versions: 22.10
		"""
		return self._obj.GetStateId()

	def IsPreventedAgainstPhysicalChangesOfCores(self) -> int:
		"""
		Indicates if the physical conductors within the assembly item are blocked from being changed.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Assembly is prevented from physical changes to its conductors |
		| 0 | Assembly is not prevented from physical changes to its conductors |
		| -1 | No project open or device item set |
		| -2 | Invalid component end type for the database conductor connection |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.IsPreventedAgainstPhysicalChangesOfCores()

	def IsBusbar(self) -> int:
		"""
		Indicates if the device item is a busbar.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device is a busbar |
		| 0 | Device is not a busbar |
		| -1 | No project open or no device item set |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.IsBusbar()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the device item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the device item |
		| "&lt;Empty&gt;" | No device item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a device as the current item.

		:param gid: Global identifier value of a device item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current device item |
		| "&lt;Empty&gt;" | No current device item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current device item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current device item |
		| "&lt;Empty&gt;" | No bundle item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a device as the current item.

		:param guid: Globally unique identifier value of a device item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current device item |
		| "&lt;Empty&gt;" | No current device item or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

	def GetPhysicalLength(self) -> float:
		"""
		Gets the length of the busbar, cable duct or mounting rail device item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Device length |
		| 0.0 | No device length or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetPhysicalLength()

	def GetAssignedBusbarPins(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the assigned busbar pins.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of pin items  passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No busbar pins assigned |
		| -1 | No project open or device item set |
		| -2 | Device is not a busbar |

		Available since E3.series TLB-Versions: 23.00
		"""
		dummy=0
		ret, ids = self._obj.GetAssignedBusbarPins(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsPlacedInPanel(self) -> int:
		"""
		Indicates if the device item's model is placed on the panel.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device is placed on the panel |
		| 0 | Device is not placed on the panel |
		| -1 | No project open or device item set |

		Available since E3.series TLB-Versions: 24.00
		"""
		return self._obj.IsPlacedInPanel()

	def GetPanelLocationXYZEulerAngles(self) -> tuple[int, tuple[int,...], tuple[int,...], tuple[int,...], tuple[int,...], tuple[int,...], tuple[int,...]]:
		"""
		Gets the device item's model position and rotation values on the panel.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | tuple[int,...] | Panel placement position on the x-axis |
		| 2 | y | tuple[int,...] | Panel placement position on the y-axis |
		| 3 | z | tuple[int,...] | Panel placement position on the z-axis |
		| 4 | xrot | tuple[int,...] | Euler angle rotation value  on the x-axis |
		| 5 | yrot | tuple[int,...] | Euler angle rotation value on the y-axis |
		| 6 | zrot | tuple[int,...] | Euler angle rotation value on the z-axis |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model's placement values are supplied |
		| 0 | Model is not placed |
		| -1 | No project open or device item set |

		Available since E3.series TLB-Versions: 24.00
		"""
		dummy=0
		ret, x, y, z, xrot, yrot, zrot = self._obj.GetPanelLocationXYZEulerAngles(dummy, dummy, dummy, dummy, dummy, dummy)
		x = x[1:] if type(x) == tuple and len(x) > 0 else tuple()
		y = y[1:] if type(y) == tuple and len(y) > 0 else tuple()
		z = z[1:] if type(z) == tuple and len(z) > 0 else tuple()
		xrot = xrot[1:] if type(xrot) == tuple and len(xrot) > 0 else tuple()
		yrot = yrot[1:] if type(yrot) == tuple and len(yrot) > 0 else tuple()
		zrot = zrot[1:] if type(zrot) == tuple and len(zrot) > 0 else tuple()
		return ret, x, y, z, xrot, yrot, zrot

	def SetPanelLocationXYZEulerAngles(self, flags:int, shti:int, x:float, y:float, z:float, xrot:float, yrot:float, zrot:float, use_start_z:bool=False, place_combined:bool=False, shift_key:bool=False) -> int:
		"""
		Sets the device item's model position and rotation values on the panel.

		:param flags: Panel placement options
		:type int: int
		:param shti: Identifier of the panel sheet
		:type int: int
		:param x: Panel placement position on the x-axis
		:type float: float
		:param y: Panel placement position on the y-axis
		:type float: float
		:param z: Panel placement position on the z-axis
		:type float: float
		:param xrot: Euler angle rotation value  on the x-axis
		:type float: float
		:param yrot: Euler angle rotation value  on the y-axis
		:type float: float
		:param zrot: Euler angle rotation value  on the z-axis
		:type float: float
		:param use_start_z: Indicates if. z. should be used as a starting value dependent on the sheet justification. If 1, z is used as a starting value. If 0, z is not used as a starting value., defaults to False
		:type bool: bool
		:param place_combined: Indicates how the device models are placed. If 1, the device's models are placed as a plugged assembly. If 0, the device's model is placed as a normal model., defaults to False
		:type bool: bool
		:param shift_key: Disables autorotate when placing models. If 1, autorotation is disabled. If 0, autorotation is enabled., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Model is moved |
		| 0 | Model is placed |
		| -1 | No project open or device item set |
		| -2 | Sheet or device is locked |
		| -3 | All variants are currently being displayed |
		| -4 | shti is invalid |
		| -5 | No region on the sheet |
		| -6 | Normal vector of the sheet does not correspond to the z-axis |
		| -7 | Error occurred |

		Available since E3.series TLB-Versions: 24.00
		"""
		return self._obj.SetPanelLocationXYZEulerAngles(flags, shti, x, y, z, xrot, yrot, zrot, use_start_z, place_combined, shift_key)

	def ChangeAssignedOptionExpression(self, oldval:str, newval:str, oldflags:int=0, newflags:int=0) -> int:
		"""
		Modifies a device item's existing Boolean expression without unplacing existing instances.

		:param oldval: Option name, Boolean expression or alias name of a Boolean expression currently assigned to the device
		:type str: str
		:param newval: Replacement option name, Boolean expression or alias name of a Boolean expression to assign to the device
		:type str: str
		:param oldflags: Flag values representing the current status of the 'Does not exist' and 'Only exists' flags of the option name, Boolean expression or alias name of a Boolean expression currently assigned to the device., defaults to 0
		:type int: int
		:param newflags: Flag values representing the current status of the 'Does not exist' and 'Only exists' flags of the option name, Boolean expression or alias name of a Boolean expression to assign to the device., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Device item's Boolean expression is changed |
		| -1 | No project open or device item set |
		| -2 | E³.series is running in viewer mode, Previous to v2026-26.00 no license available for E³.logic is also a possibility |
		| -3 | oldval or newval parameter value is invalid |
		| -4 | Device item is invalid for the operation |
		| -5 | Device item is a view |
		| -6 | oldval expression not found |
		| -7 | oldval expression is a variant instance |
		| -8 | newval expression is syntactically incorrect or contains incorrect arguments |
		| -9 | newvalexpression is a variant instance |
		| -10 | oldflags or newflags parameter value is invalid |
		| -11 | Device item is locked against changes |

		Available since E3.series TLB-Versions: 24.01, 23.31
		"""
		return self._obj.ChangeAssignedOptionExpression(oldval, newval, oldflags, newflags)

	def PlaceModelViewAsGraphic(self, sheetId:int, x:float, y:float, rotation:str, modelView:int, flags:int=0) -> int:
		"""
		Places a model view of the current device item as a graphic.

		:param sheetId: Identifier of the sheet
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float
		:param rotation: Rotation and mirroring value. See Rotation for possible values.
		:type str: str
		:param modelView: Model view to place
		:type int: int
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;0 | Identifier of the placed graphic item |
		| -1 | No project open or no device item set |
		| -2 | sheetId is invalid |
		| -3 | Sheet is locked |
		| -4 | flags is invalid |
		| -5 | modelView is invalid |
		| -6 | No main outline |
		| -7 | No symbol found |
		| -8 | Model view does not exist for device |
		| -9 | Error occurred |

		Available since E3.series TLB-Versions: 24.22
		"""
		return self._obj.PlaceModelViewAsGraphic(sheetId, x, y, rotation, modelView, flags)

	def SetJustificationPoint(self, x:float, y:float, z:float, flags:int=0) -> int:
		"""
		Sets the justification for slot points on the model.

		:param x: Justification value of the x-axis
		:type float: float
		:param y: Justification value of the y-axis
		:type float: float
		:param z: Justification value of the z-axis
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Justification values are provided |
		| -1 | No project open or device item set |
		| -2 | Device does not have a model |
		| -3 | E³.view is running or device is locked |
		| -4 | Model is locked |
		| -5 | All Variants are active and the model is placed on a variant or has variant positions |
		| -6 | x, y or z is invalid |
		| -7 | Error occurred |
		| -8 | A device mounted on the current device is locked |

		Available since E3.series TLB-Versions: 26.00, 25.23
		"""
		return self._obj.SetJustificationPoint(x, y, z, flags)

	def SetJustificationLine(self, y:float, z:float, flags:int=0) -> int:
		"""
		Sets the justification for slot lines on the model.

		:param y: Justification value of the y-axis
		:type float: float
		:param z: Justification value of the z-axis
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Justification values are provided |
		| -1 | No project open or device item set |
		| -2 | Device does not have a model |
		| -3 | E³.view is running or device is locked |
		| -4 | Model is locked |
		| -5 | All Variants are active and the model is placed on a variant or has variant positions |
		| -6 | y or z is invalid |
		| -7 | Error occurred |
		| -8 | A device mounted on the current device is locked |

		Available since E3.series TLB-Versions: 26.00, 25.23
		"""
		return self._obj.SetJustificationLine(y, z, flags)

	def SetJustificationArea(self, z:float, flags:int=0) -> int:
		"""
		Sets the justification for slot areas on the model.

		:param z: Justification value of the z-axis
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Justification value is applied |
		| -1 | No project open or device item set |
		| -2 | Device does not have a model |
		| -3 | E³.view is running or device is locked |
		| -4 | Model is locked |
		| -5 | All variants are active and the model is placed on a variant or has variant positions |
		| -6 | z is invalid |
		| -7 | Error occurred |
		| -8 | A device mounted on the current device is locked |

		Available since E3.series TLB-Versions: 26.00, 25.23
		"""
		return self._obj.SetJustificationArea(z, flags)

	def GetCableDuctWireAndCoreIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors and wires of a cable duct device item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | coreIds | tuple[int,...] | Array of identifiers of conductors and wires items |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in coreIds |
		| 0 | No conductors and wires are found |
		| -1 | No project open |
		| -2 | No device item set |
		| -3 | Device is not a cable duct |
		| -4 | Cable duct device is not placed |
		| -5 | Error occurred |

		Available since E3.series TLB-Versions: 26.00
		"""
		dummy=0
		ret, coreIds = self._obj.GetCableDuctWireAndCoreIds(dummy, flags)
		coreIds = coreIds[1:] if type(coreIds) == tuple and len(coreIds) > 0 else tuple()
		return ret, coreIds

	def GetConnectedCableDuctIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the cable ducts connected to the current cable duct device item.

		:param flags: Flags bit values specifying how. connectedCableDuctIds. is filtered, defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | connectedCableDuctIds | tuple[int,...] | Array of identifiers of cable duct device items |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in connectedCableDuctIds |
		| 0 | No cable ducts are connected |
		| -1 | No project open |
		| -2 | No device item set |
		| -3 | Device is not a cable duct |
		| -4 | Cable duct device is not placed |
		| -5 | Invalid flags value |
		| -6 | Error occurred |

		Available since E3.series TLB-Versions: 26.00, 25.11
		"""
		dummy=0
		ret, connectedCableDuctIds = self._obj.GetConnectedCableDuctIds(dummy, flags)
		connectedCableDuctIds = connectedCableDuctIds[1:] if type(connectedCableDuctIds) == tuple and len(connectedCableDuctIds) > 0 else tuple()
		return ret, connectedCableDuctIds

# -------------------- IInfoApplicationInterface--------------------
class InfoApplication:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize InfoApplication. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetWindowPos(self, x:float, y:float, text:str) -> str:
		"""


		:param x: 
		:type float: float
		:param y: 
		:type float: float
		:param text: 
		:type str: str

		:return:
		Type: str

		Available since E3.series TLB-Versions: 13.00
		"""
		return self._obj.GetWindowPos(x, y, text)

# -------------------- IPinInterface--------------------
class Pin:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Pin. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current pin item identifier |
		| 0 | No pin item |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def SetId(self, id:int) -> int:
		"""
		Sets a pin as the current item.

		:param id: Unique value identifying a pin item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current pin item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetId(id)

	def GetName(self) -> str:
		"""
		Gets the pin item's name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Pin name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def SetName(self, name:str) -> int:
		"""
		Sets the terminal pin item's physical name.

		:param name: New name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetName(name)

	def SetNameSymbol(self, name:str) -> int:
		"""
		Sets the current connector or terminal pin item's symbol name text.

		:param name: New pin symbol name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin symbol name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetNameSymbol(name)

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the pin item.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the pin item's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the pin item.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the pin item's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the pin item's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the pin item.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def DeleteEndAttribute(self, which:int, name:str) -> int:
		"""
		Removes an attribute from an end of the conductor or wire item.

		:param which: Indicates which end of the conductor or wire to remove the attribute value from. If 1, the attribute value to remove from End 1 of the conductor or wire. If 2, the attribute value to remove from End 2 of the conductor or wire
		:type int: int
		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteEndAttribute(which, name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the pin item's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def HasEndAttribute(self, which:int, name:str) -> int:
		"""
		Gets the number of specified attributes assigned to an end of the conductor or wire item.

		:param which: Indicates which end of the conductor or wire to retrieve the number of specified attributes from. If 1, the number of specified attributes is retrieved from End 1 of the conductor or wire. If 2, the number of specified attributes is retrieved from End 2 of the conductor or wire
		:type int: int
		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasEndAttribute(which, name)

	def GetComponentAttributeValue(self, name:str) -> str:
		"""
		Gets the specified attribute value of the pin item's component.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetComponentAttributeValue(name)

	def GetEndAttributeCount(self, which:int) -> int:
		"""
		Gets the number of attributes assigned to an end of the conductor or wire item.

		:param which: Indicates which end of the conductor or wire to retrieve the attribute count from. If 1, the attribute value is added to End 1 of the conductor or wire. If 2, the attribute value is added to End 2 of the conductor or wire
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetEndAttributeCount(which)

	def GetEndAttributeIds(self, which:int, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to an end of the conductor or wire item.

		:param which: Indicates which end of the conductor or wire to add the attribute value to. If 1, the attribute value is added to End 1 of the conductor or wire. If 2, the attribute value is added to End 2 of the conductor or wire
		:type int: int
		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetEndAttributeIds(which, dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetEndAttributeValue(self, which:int, name:str) -> str:
		"""
		Gets the identifiers of the attributes assigned to an end of the conductor or wire item.

		:param which: Indicates which end of the conductor or wire to retrieve the attribute identifiers from. If 1, the attribute value is retrieved from End 1 of the conductor or wire. If 2, the attribute value is retrieved from End 2 of the conductor or wire
		:type int: int
		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetEndAttributeValue(which, name)

	def SetEndAttributeValue(self, which:int, name:str, value:str) -> int:
		"""
		Sets the conductor or wire end's specified attribute value.

		:param which: Indicates which end of the conductor or wire to retrieve the attribute identifiers from. If 1, the attribute value of End 1 of the conductor or wire is modified. If 2, the attribute value of End 2 of the conductor or wire is modified
		:type int: int
		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetEndAttributeValue(which, name, value)

	def GetEndPinId(self, which:int, flags:int=0) -> int:
		"""
		Gets the identifier of the pin connected to one end of the current conductor or wire item.

		:param which: Indicates which end of the conductor or wire to get the pin for. If 1, the pin connected to End 1 of the conductor or wire is retrieved. If 2, the pin connected to End 2 of the conductor or wire is retrieved
		:type int: int
		:param flags: Indicates whether nodes on an open line end or on a sheet reference are retrieved. If 0 or 0x00, nodes on an open line end or on a sheet reference are ignored. If 1 or 0x01, nodes on an open line end or on a sheet reference are retrieved., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the connected pin |
		| 0 | No pin is connected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetEndPinId(which, flags)

	def SetEndPinId(self, which:int, pini:int) -> int:
		"""
		Sets the pin connected to one end of the current conductor or wire item.

		:param which: Indicates which end of the conductor or wire to set the pin for. If 1, the pin connected to End 1 of the conductor or wire is modified. If 2, the pin connected to End 2 of the conductor or wire is modified
		:type int: int
		:param pini: Identifier of the pin to connect to the conductor or wire end
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Identifier of the connected pin |
		| -1 | No project open or no pin item set, Available since v2012-11.21 |
		| -2 | Conductor or wire is locked, Available since v2012-11.21 |
		| -3 | Current pin item is not a conductor or wire, Available since v2012-11.21 |
		| -4 | Conductor or wire connectivity is locked, Available since v2012-11.21 |
		| -5 | Invalid cable, hose or tube, Available since v2012-11.21 |
		| -6 | Wire is outside of the defined diameter range, Available since v2012-11.21 |
		| -7 | which is an invalid value, Available since v2015-16.18 and v2016-17.15 |
		| -8 | pini value invalid for connecting with the conductor or wire, Available since v2015-16.18 and v2016-17.15 |
		| -9 | Conductor or wire end is locked, Available since v2022-23.00 |
		| -10 | Pin is prevented from making physical changes to conductors, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetEndPinId(which, pini)

	def GetConnectedPinId(self) -> int:
		"""
		Gets the identifier of the pin connected directly to the current pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the connected pin |
		| 0 | No connected pin or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectedPinId()

	def GetFitting(self) -> str:
		"""
		Gets the component name of the connector pin terminal for the current pin item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Component name of the connector pin terminal |
		| "&lt;Empty&gt;" | No component name for connector pin terminal or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFitting()

	def SetFitting(self, name:str) -> int:
		"""
		Sets the component name of the connector pin terminal for the current pin item.

		:param name: Connector pin terminal component name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component name applied |
		| 0 | Error occurred |
		| -1 | Pin item is a busbar pin, Available since v2022-23.00 |
		| -2 | name is too longAvailable since v2023-24.50 and v2025-25.20 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFitting(name)

	def GetValidFittings(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the possible valid component names of the connector pin terminal for the current pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | strings | tuple[str,...] | Array of possible component names of the connector pin terminal passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of component names in strings |
		| 0 | No possible component names or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, strings = self._obj.GetValidFittings(dummy)
		strings = strings[1:] if type(strings) == tuple and len(strings) > 0 else tuple()
		return ret, strings

	def GetSchemaLocation(self) -> tuple[int, float, float, str, str, str]:
		"""
		Gets the pin item's position within the schematic sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis passed out of the function |
		| 2 | y | float | Placement position on the y-axis passed out of the function |
		| 3 | grid | str | Location in the format ". /&lt;sheet&gt;.&lt;grid&gt;. " passed out of the function |
		| 4 | column_value | str | Sheet placement column of the pin item passed out of the function |
		| 5 | row_value | str | Sheet placement row of the pin item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the pin item's sheet |
		| 0 | Pin item is not placed on a schematic sheet or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetSchemaLocation(dummy, dummy, dummy, dummy, dummy)

	def GetPanelLocation(self) -> tuple[int, float, float, float]:
		"""
		Gets the pin item's position within the panel sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis passed out of the function |
		| 2 | y | float | Placement position on the y-axis passed out of the function |
		| 3 | z | float | Placement position on the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin location on the panel supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetPanelLocation(dummy, dummy, dummy)

	def GetSequenceNumber(self) -> int:
		"""
		Gets the sequence number of the current pin item within the device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Sequence number |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSequenceNumber()

	def GetCoreCount(self) -> int:
		"""
		Gets the number of the conductors connected to the pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors found |
		| 0 | No conductor found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCoreCount()

	def GetCoreIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors and wires connected to the pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors and wires passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors and wires in ids |
		| 0 | No conductors and wires or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCoreIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNetSegmentCount(self) -> int:
		"""
		Gets the number of net segments carrying the conductor or wire on schema sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segments found |
		| 0 | No net segment found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetNetSegmentCount()

	def GetNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the net segments carrying the conductor or wire on schema sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of net segments passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segments in ids |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetDestinationCount(self) -> int:
		"""
		Gets the number of destination pins on the other side of all unique connections of the current pin.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of destination pins |
		| 0 | No destination pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDestinationCount()

	def GetDestinationIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the destination pins on the other side of all unique connections of the current pin.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of destination pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of destination pins in ids |
		| 0 | No destination pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetDestinationIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSignalName(self) -> str:
		"""
		Gets the pin item's signal name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Pin item's signal name value is supplied |
		| "&lt;Empty&gt;" | No signal name value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSignalName()

	def SetSignalName(self, name:str) -> int:
		"""
		Sets the pin item's signal name value.

		:param name: New signal name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item's signal name value is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetSignalName(name)

	def Create(self, name:str, devi:int, pini:int, before:int) -> int:
		"""
		Creates a conductor, wire or pin item.

		:param name: New pin name
		:type str: str
		:param devi: Identifier of device to assign the pin to
		:type int: int
		:param pini: Identifier of pin to place the new pin beside
		:type int: int
		:param before: Indicates which side of. pini. the new pin is placed. If 1, the new pin is placed after pini. If 0, the new pin is placed before pini
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new pin item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(name, devi, pini, before)

	def Search(self, name:str, devi:int) -> int:
		"""
		Searches for a pin within a device item.

		:param name: Name of the pin item to be search for
		:type str: str
		:param devi: Identifier of the device in which to search
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the found pin item |
		| 0 | No pin found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Search(name, devi)

	def IsRouted(self) -> int:
		"""
		Indicates whether the wire item is routed in the panel.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Wire is routed in the panel |
		| 0 | Wire is not routed in the panel or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsRouted()

	def GetLength(self) -> float:
		"""
		Gets the length of the conductor or wire item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Conductor or wire length value |
		| 0.0 | Conductor or wire has no length value, no project open or no pin item set |
		| -1.0 | Conductor or wire has varying length values |
		| -2.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLength()

	def GetCrossSection(self) -> float:
		"""
		Gets the cross section of the conductor or wire item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Conductor or wire weight value |
		| 0.0 | No cross section value or current item is a fluid item |
		| -1.0 | Conductor or wire has varying cross section values |
		| -2.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCrossSection()

	def GetCrossSectionDescription(self) -> str:
		"""
		Gets the cross section description of the conductor or wire item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Description&gt;" | Cross section description |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCrossSectionDescription()

	def GetColour(self) -> int:
		"""
		Gets a value indicating the color of the current wire, hose or tube item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Index code of the wire, hose or tube color |
		| 0 | Index code of the wire, hose or tube color or an error occurred |
		| -1 | Wire, hose or tube has varying colors in different options |
		| -2 | Wire, hose or tube does not have a color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetColour()

	def GetColourDescription(self) -> str:
		"""
		Gets the color description of the current wire, hose or tube item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Description&gt;" | Color description of the wire, hose or tube |
		| "MULTIPLE_VALUES" | Wire, hose or tube has varying colors in different options |
		| "&lt;Empty&gt;" | Wire, hose or tube does not have a color or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetColourDescription()

	def GetConnectionType(self) -> int:
		"""
		Gets the connection type of the pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Connection type value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectionType()

	def GetConnectionTypeDescription(self) -> str:
		"""
		Gets the connection type description of the pin item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Description&gt;" | Connection type description value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectionTypeDescription()

	def GetWireType(self) -> tuple[int, str, str]:
		"""
		Gets the wire item's wire type identifier, wire group name and wire name in the database.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | comp | str | Wire group name in the database passed out of the function |
		| 2 | name | str | Wire name in the database passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Wire type identifier |
		| 0 | Error occurred |
		| -1 | Wire has varying wire types in different options |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetWireType(dummy, dummy)

	def SetWireType(self, comp:str, name:str) -> int:
		"""
		Sets the wire item's wire group name and wire name from the database.

		:param comp: Wire group name in the database
		:type str: str
		:param name: Wire name in the database
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Wire type assigned |
		| 0 | Error occurred |
		| -1 | name is invalid, Available since v2020-21.42, v2021-22.30 and v2022-23.11 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetWireType(comp, name)

	def GetPanelPath(self) -> tuple[int, tuple[float,...], tuple[float,...], tuple[float,...]]:
		"""
		Gets the wire path start, end or turn positions of a wire item in the panel.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xarr | tuple[float,...] | Array of positions on the x-axis passed out of the function |
		| 2 | yarr | tuple[float,...] | Array of positions on the y-axis passed out of the function |
		| 3 | zarr | tuple[float,...] | Array of positions on the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of wire turn positions |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, xarr, yarr, zarr = self._obj.GetPanelPath(dummy, dummy, dummy)
		xarr = xarr[1:] if type(xarr) == tuple and len(xarr) > 0 else tuple()
		yarr = yarr[1:] if type(yarr) == tuple and len(yarr) > 0 else tuple()
		zarr = zarr[1:] if type(zarr) == tuple and len(zarr) > 0 else tuple()
		return ret, xarr, yarr, zarr

	def SetLength(self, length:float) -> int:
		"""
		Sets the length the conductor or wire item.

		:param length: New length value
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Length value assigned |
		| -1 | No pin item set |
		| -2 | No project open |
		| -3 | length is invalid |
		| -4 | Pin item belongs to a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLength(length)

	def SetCrossSection(self, crossec:float) -> int:
		"""
		Sets the cross section of the conductor or wire item.

		:param crossec: New cross section value
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Cross section value applied |
		| -1 | Cross section does not exist, Available since Build 2018 19.00 |
		| -2 | No pin item set, Available since v2014-14.32, v2014A.15.23 and v2015-16.01 |
		| -3 | Wire already has a cross section value, Available since v2014-14.32, v2014A.15.23 and v2015-16.01 |
		| -4 | crossec is invalid, Available since v2014-14.32, v2014A.15.23 and v2015-16.01 |
		| -5 | Pin item belongs to a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCrossSection(crossec)

	def SetColour(self, color:int) -> int:
		"""
		Sets a value indicating the color of the current wire, hose or tube item.

		:param color: Index code of the wire, hose or tube color value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Wire, hose or tube color value applied |
		| -1 | color is invalid, Available since v2014-14.32, v2014A-15.23 and v2015-16.01 |
		| -2 | Pin item is invalid, Available since v2014-14.32, v2014A-15.23 and v2015-16.01 |
		| -3 | Component wire, hose or tube color cannot be changed, Available since v2014-14.32, v2014A-15.23 and v2015-16.01 |
		| -4 | Pin item belongs to a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetColour(color)

	def SetColourDescription(self, color:str) -> int:
		"""
		Sets the color description of the current wire, hose or tube item.

		:param color: Name of the wire, hose or tube color or  text token
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Wire, hose or tube color value applied |
		| -1 | color is invalid, Available since v2014-14.32, v2014A-15.23 and v2015-16.01 |
		| -2 | Pin item is invalid, Available since v2014-14.32, v2014A-15.23 and v2015-16.01 |
		| -3 | Component wire, hose or tube color cannot be changed, Available since v2014-14.32, v2014A-15.23 and v2015-16.01 |
		| -4 | Pin item belongs to a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetColourDescription(color)

	def SetCrossSectionByDescription(self, description:str) -> int:
		"""
		Sets the cross section description of the conductor or wire item.

		:param description: Cross section description
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Cross section value applied |
		| -1 | Cross section does not exist, Available since v2014-14.32, v2014A.15.23 and v2015-16.01 |
		| -2 | no pin item set, Available since v2014-14.32, v2014A.15.23 and v2015-16.01 |
		| -3 | Wire already has a cross section value, Available since v2014-14.32, v2014A.15.23 and v2015-16.01 |
		| -4 | description is invalid, Available since v2014-14.32, v2014A.15.23 and v2015-16.01 |
		| -5 | Pin item belongs to a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCrossSectionByDescription(description)

	def GetViewCount(self) -> int:
		"""
		Gets the number of pin views of the current pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pin views found |
		| 0 | No pin views found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetViewCount()

	def GetViewIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the view pins of the current pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of view pin items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of view identifiers in ids |
		| 0 | No view identifiers found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetViewIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsView(self) -> int:
		"""
		Indicates whether the pin item is a view.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item is a view |
		| 0 | Pin item is not a view or an error occurred |
		| -1 | Pin item might be a view |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsView()

	def GetOriginalId(self) -> int:
		"""
		Gets the identifier of the original pin of the pin view item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the original pin |
		| 0 | No original pin or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOriginalId()

	def GetLogicalEquivalenceID(self) -> int:
		"""
		Gets the signal equivalence value of the current pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Signal equivalence value |
		| 0 | No signal equivalence value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLogicalEquivalenceID()

	def GetNameEquivalenceID(self) -> int:
		"""
		Gets the name equivalence value of the current pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Name equivalence value |
		| 0 | No name equivalence value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetNameEquivalenceID()

	def GetExchangeableID(self) -> int:
		"""
		Gets the exchange-ability value of the current pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Exchange-ability value |
		| 0 | No exchange-ability value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetExchangeableID()

	def GetPhysicalID(self) -> int:
		"""
		Gets the identifier of the current pin item's physical pin.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Physical pin identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPhysicalID()

	def GetAssignedOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of options assigned to the wire item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of assigned options passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned option identifiers are supplied or an error occurred |
		| -1 | An option contains a Boolean expression or an alias |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAssignedOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSupplyInfo(self) -> tuple[int, int, int, str]:
		"""
		Gets the supply information of the current supply pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | supid | int | Identifier of the supply description passed out of the function |
		| 2 | signum | int | Signal number in the supply description passed out of the function |
		| 3 | signam | str | Signal name assigned to the pin passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the supply description |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetSupplyInfo(dummy, dummy, dummy)

	def GetCCT(self) -> int:
		"""
		Gets the index value of the current pin item's gate within the device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Gate's index value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCCT()

	def GetExternSignalName(self) -> str:
		"""
		Gets the external signal name of the block connector pin item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | External signal name |
		| "&lt;Empty&gt;" | External signal name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetExternSignalName()

	def IsSupply(self) -> int:
		"""
		Indicates whether the pin item is a supply pin.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item is a supply pin |
		| 0 | Pin item is not a supply pin or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsSupply()

	def IsNoconn(self) -> int:
		"""
		Indicates if the pin item has the "Not Connected" (**NC**) signal.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item has the "Not Connected" (**NC**) signal |
		| 0 | Pin item does not have the "Not Connected" (**NC**) signal or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsNoconn()

	def GetNodeType(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the symbol node connectivity types.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | _type | tuple[int,...] | Array of symbol node connectivity types passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current pin item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, _type = self._obj.GetNodeType(dummy)
		_type = _type[1:] if type(_type) == tuple and len(_type) > 0 else tuple()
		return ret, _type

	def HasDevice(self) -> int:
		"""
		Indicates whether the pin item belongs to a device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item's symbol is placed and it belongs to a device |
		| 0 | Pin item's symbol is not placed, pin item does not belong to a device or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasDevice()

	def CreateWire(self, name:str, cabtyp:str, wirnam:str, devi:int, pini:int, before:int) -> int:
		"""
		Creates a wire for a cable.

		:param name: Wire name. If value is "<Empty>", a name is automatically generated
		:type str: str
		:param cabtyp: Wire group name
		:type str: str
		:param wirnam: Wire name in the database
		:type str: str
		:param devi: Identifier of a cable device. Cable device must not have a cable type
		:type int: int
		:param pini: Identifier of wire to place the new wire beside
		:type int: int
		:param before: Indicates which side of. pini. the new wire is placed. If 1, the new wire is placed after pini. If 0, the new wire is placed before pini
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Identifier of the new wire |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.CreateWire(name, cabtyp, wirnam, devi, pini, before)

	def SetColourByDescription(self, color:str) -> int:
		"""
		Sets the color of the current wire, hose or tube item.

		:param color: Name of the wire, hose or tube color value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Wire, hose or tube color value applied |
		| -1 | color is invalid, Available since v2014-14.32, v2014A-15.23 and v2015-16.01 |
		| -2 | Pin item is invalid, Available since v2014-14.32, v2014A-15.23 and v2015-16.01 |
		| -3 | Component wire, hose or tube color cannot be changed, Available since v2014-14.32, v2014A-15.23 and v2015-16.01 |
		| -4 | Pin item belongs to a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetColourByDescription(color)

	def GetFunc(self) -> int:
		"""
		Gets a value representing the function of the component pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Function value of the component pin item |
		| 0 | Function value of the component pin item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFunc()

	def GetTextCount(self) -> int:
		"""
		Gets the number of text items belonging to the pin or symbol node.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items found |
		| 0 | No text items found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTextCount()

	def GetTextIds(self, txttyp:int=0, search_string:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets an array of identifiers of the pin's text items.

		:param txttyp: Text type filter. Only text identifiers with this Text Type will be supplied. All text identifiers are supplied if txttyp is 0. The default value 0, defaults to 0
		:type int: int
		:param search_string: Text value filter, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTextIds(dummy, txttyp, search_string)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def Highlight(self) -> int:
		"""
		Highlights the conductor or wire item on panel sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Highlight()

	def FindPanelPath(self) -> int:
		"""
		Automatically routes the connections running to the pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item was automatically routed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.FindPanelPath()

	def SetPanelPath(self, pnts:list[float], x:list[float], y:list[float], z:list[float], use_exact_coords:bool=False) -> int:
		"""
		Sets the wire path start, end and turn positions of a wire item in the panel.

		:param pnts: Array of positions on the x-axis
		:type list[float]: list[float]
		:param x: Array of positions on the x-axis
		:type list[float]: list[float]
		:param y: Array of positions on the y-axis
		:type list[float]: list[float]
		:param z: Array of positions on the z-axis
		:type list[float]: list[float]
		:param use_exact_coords: Indicates whether the position values are directly used.. If 1, the path is not included in the cable ducts. If 0, and the path is inside a cable duct, the current duct fill level is increased., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Path in the panel is applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		pnts = [0.] + pnts
		x = [0.] + x
		y = [0.] + y
		z = [0.] + z
		return self._obj.SetPanelPath(pnts, x, y, z, use_exact_coords)

	def DeletePanelPath(self) -> int:
		"""
		Removes the path of a wire item in the panel.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Wire panel path is removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeletePanelPath()

	def GetPassPins(self) -> tuple[int, tuple[int,...], int, int]:
		"""
		Gets identifiers of the splice pins of the cable wire item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of splice pins passed out of the function |
		| 2 | ends | int | Identifier of the start pin of the wire passed out of the function |
		| 3 | ende | int | Identifier of the end pin of the wire passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of splice pins in ids |
		| 0 | No splice pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids, ends, ende = self._obj.GetPassPins(dummy, dummy, dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids, ends, ende

	def GetNetSegmentPath(self, pin1i:int, pin2i:int) -> tuple[int, tuple[int,...]]:
		"""
		Gets a list of net segment identifiers between the specified pins in order of sequence.

		:param pin1i: Identifier of the start pin of the net segment path
		:type int: int
		:param pin2i: Identifier of the end pin of the net segment path
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of net segments identifiers in order of sequence passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segment identifiers in ids |
		| 0 | Error occurred or no net segment path lies between the pin1i and pin2i |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetSegmentPath(dummy, pin1i, pin2i)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetPassWires(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the conductors and wires placed through the pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of conductors and wires |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of conductors and wires in ids |
		| 0 | No conductors and wires or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPassWires(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsPassWire(self) -> int:
		"""
		Indicates whether the pin or node item has the pass wire property.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin has the pass wire property |
		| 0 | Pin does not have the pass wire property or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsPassWire()

	def GetCableDuctIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the cable ducts the current wire item runs through.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of cable ducts passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cable ducts in ids |
		| 0 | No cable ducts or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCableDuctIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNodeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the symbol pin nodes on schema sheets representing the current physical pin.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of symbol pin nodes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol pin nodes in ids |
		| 0 | No symbol pin nodes or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNodeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetNodeId(self, id:int) -> int:
		"""
		Sets a node item as the current item.

		:param id: Unique value identifying a node item
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current node item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetNodeId(id)

	def SetDeviceId(self, devid:int, pinid:int, before:int) -> int:
		"""
		Moves the current conductor or wire item.

		:param devid: Identifier of the target cable to move the wire to
		:type int: int
		:param pinid: Identifier of a conductor or wire item to place the current conductor or wire item beside
		:type int: int
		:param before: Indicates which side of. pinid. the new pin is placed. If 1, the new pin is placed before pinid. If 0, the new pin is placed after pinid
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Conductor or wire item moved |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeviceId(devid, pinid, before)

	def Delete(self) -> int:
		"""
		Deletes the pin item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Delete()

	def GetValidCounterparts(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets a list of valid mating connector component names for the current pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | strings | tuple[int,...] | Array of possible mating connector component names of the pin item passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of mating connector component names in strings |
		| 0 | No possible mating connectors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, strings = self._obj.GetValidCounterparts(dummy)
		strings = strings[1:] if type(strings) == tuple and len(strings) > 0 else tuple()
		return ret, strings

	def GetCounterpart(self) -> str:
		"""
		Gets the current valid mating connector component name for the current pin item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Mating connector component name of the pin item |
		| "&lt;Empty&gt;" | No mating connector component name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCounterpart()

	def SetCounterpart(self, name:str) -> int:
		"""
		Sets the current valid mating connector component name for the current pin item.

		:param name: New mating connector component name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Mating connector component name applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCounterpart(name)

	def GetPhysicalMaxConnections(self) -> int:
		"""
		Gets the maximum number of possible connections for the current pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..999 | Maximum number of connections |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPhysicalMaxConnections()

	def GetPhysicalMinCrossSection(self) -> float:
		"""
		Gets the minimum conductor cross section area possible for the pin item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Minimum conductor cross section area |
		| 0.0 | Minimum conductor cross section area or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPhysicalMinCrossSection()

	def GetPhysicalMaxCrossSection(self) -> float:
		"""
		Gets the maximum conductor cross section area possible for the pin item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Maximum conductor cross section area |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPhysicalMaxCrossSection()

	def GetPhysicalTotalMaxCrossSection(self) -> float:
		"""
		Gets the maximum cross section area of all conductors possible for the pin item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Total maximum conductor cross section area |
		| 0.0 | No total maximum conductor cross section area or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPhysicalTotalMaxCrossSection()

	def GetPhysicalConnectionType(self) -> int:
		"""
		Gets a value representing the connection type of the model pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| -32..26 | Connection type value, See Connection Types for possible values |
		| 0 | Unknown connection type or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPhysicalConnectionType()

	def GetPhysicalConnectionTypeDescription(self) -> str:
		"""
		Gets the connection type name of the model pin item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Type&gt;" | Connection type value, See Connection Types for possible descriptions |
		| "&lt;Empty&gt;" | Unknown connection type or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPhysicalConnectionTypeDescription()

	def GetPhysicalPosition(self) -> tuple[int, float, float, float]:
		"""
		Gets the position of the model pin item on the panel.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis passed out of the function |
		| 2 | y | float | Placement position on the y-axis passed out of the function |
		| 3 | z | float | Placement position on the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Placement position supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetPhysicalPosition(dummy, dummy, dummy)

	def GetPhysicalConnectionDirection(self) -> int:
		"""
		Gets a value representing the connection direction of the model pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Connection direction value |
		| 0 | Connectable from any direction or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPhysicalConnectionDirection()

	def GetPanelNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the net segments carrying the conductor or wire on panel sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of net segments passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segments in ids |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetPanelNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateNewConnectorForPins(self, pinidarray:list[int], name:str, assignment:str, location:str) -> int:
		"""
		Creates a connector from connector pins or assigns connector pins to an existing connector.

		:param pinidarray: Array of connector pin identifiers or a single connector pin identifier passed into the function
		:type list[int]: list[int]
		:param name: Device designation value of the connector
		:type str: str
		:param assignment: Higher level assignment value of the connector
		:type str: str
		:param location: Location value of the connector
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connector created or connector pins assigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.CreateNewConnectorForPins(pinidarray, name, assignment, location)
		return ret[0]

	def AddPinsToConnector(self, pinidarray:list[int], name:str, assignment:str, location:str) -> int:
		"""
		Creates a new connector from connector pins or assigns connector pins to an existing connector.

		:param pinidarray: Identifier of a connector pin or an array of connector pin identifiers passed into the function
		:type list[int]: list[int]
		:param name: Designation name of the connector
		:type str: str
		:param assignment: Higher level assignment of the connector
		:type str: str
		:param location: Location of the connector
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connector pins assigned to connector |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.AddPinsToConnector(pinidarray, name, assignment, location)
		return ret[0]

	def SetPhysicalConnectionDirection(self, conndir:int) -> int:
		"""
		Sets a value representing the connection direction of the model pin item.

		:param conndir: New connection direction value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Previous connection direction value |
		| 0 | Previous connection direction was connectable from any direction or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPhysicalConnectionDirection(conndir)

	def GetPortName(self) -> str:
		"""
		Gets the pin item's port name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Port name |
		| "&lt;Empty&gt;" | No port name or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPortName()

	def IsBackShell(self) -> int:
		"""
		Indicates whether the pin item is a backshell pin.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item is a backshell pin |
		| 0 | Pin item is not a backshell pin or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsBackShell()

	def GetDefaultWires(self) -> tuple[int, tuple[str,...], tuple[str,...]]:
		"""
		Gets the default wire types of the jumper pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | wiregroups | tuple[str,...] | Array of wire group name values passed out of the function |
		| 2 | wirenames | tuple[str,...] | Array of wire name values passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in wiregroups and wirenames |
		| 0 | No default wires or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, wiregroups, wirenames = self._obj.GetDefaultWires(dummy, dummy)
		wiregroups = wiregroups[1:] if type(wiregroups) == tuple and len(wiregroups) > 0 else tuple()
		wirenames = wirenames[1:] if type(wirenames) == tuple and len(wirenames) > 0 else tuple()
		return ret, wiregroups, wirenames

	def SetDefaultWires(self, wiregroups:list[str], wirenames:list[str]) -> int:
		"""
		Sets the default wire types of the jumper pin item.

		:param wiregroups: Array of wire group name values passed into the function
		:type list[str]: list[str]
		:param wirenames: Array of wire name values passed into the function
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of wire types applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetDefaultWires(wiregroups, wirenames)
		return ret[0]

	def LockCoreEnd(self, which:int, lock:int) -> int:
		"""
		Sets the lock status of one end of the current conductor or wire item.

		:param which: Indicates which end's lock status to modify. If 1, the lock status of End 1 is modified. If 2, the lock status of End 2 is modified
		:type int: int
		:param lock: New lock status
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous lock status was locked |
		| 0 | Previous lock status was unlocked |
		| -1 | Error occurred |
		| -2 | Wire core is already permanently locked, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.LockCoreEnd(which, lock)

	def IsCoreEndLocked(self, which:int) -> int:
		"""
		Gets the lock status of the current conductor or wire item ends.

		:param which: Indicates which end of the conductor or wire to get the lock status for. If 0, the lock status of both ends of the conductor or wire is retrieved. If 1, the lock status of End 1 of the conductor or wire is retrieved. If 2, the lock status of End 2 of the conductor or wire is retrieved
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Lock status is locked |
		| 0 | Lock status is unlocked |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsCoreEndLocked(which)

	def LockPanelPath(self, lock:int) -> int:
		"""
		Changes the lock state of the route of a wire item in the panel.

		:param lock: New lock value. If 1, the panel path is locked. If 0, the panel path is unlocked
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous panel path was locked |
		| 0 | Previous panel path was unlocked |
		| -1 | Error occurred |
		| -2 | Wire item is a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.LockPanelPath(lock)

	def IsPanelPathLocked(self) -> int:
		"""
		Indicates the lock status of the route of a wire item in the panel.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Panel path is locked |
		| 0 | Panel path is unlocked |
		| -1 | Error occurred |
		| -2 | Wire item is a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsPanelPathLocked()

	def GetDiameter(self) -> float:
		"""
		Gets the diameter of the hose or tube pin item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Hose or tube diameter value |
		| 0.0 | Pin item not a hose or tube |
		| -1.0 | Hose or tube has varying diameter values |
		| -2.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDiameter()

	def GetDiameterDescription(self) -> str:
		"""
		Gets the diameter description of the hose or tube pin item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Description&gt;" | Cross section description |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDiameterDescription()

	def GetMaterial(self) -> int:
		"""
		Gets a value indicating the material the current hose or tube item is made from.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Index code of the material |
		| 0 | Error occurred |
		| -1 | Hose or tube has varying materials in different options |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMaterial()

	def GetMaterialDescription(self) -> str:
		"""
		Gets the description of the material the current hose or tube item is made from.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Description&gt;" | Index code of the hose or tube material |
		| "MULTIPLE_VALUES" | Hose or tube has varying materials in different options |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMaterialDescription()

	def GetTemplateSymbolId(self) -> int:
		"""
		Gets the identifier of the attribute text template symbol placed on the current node item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute template symbol identifier |
		| 0 | No attribute template symbol or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTemplateSymbolId()

	def GetLocking(self) -> int:
		"""
		Gets a value indicating the lock status of a net node item on a formboard sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Net node item is locked |
		| 0 | Net node item is unlocked or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLocking()

	def SetLocking(self, bSet:bool) -> int:
		"""
		Sets a value indicating the lock status of a net node item on a formboard sheet.

		:param bSet: New lock status. If 1, the net node is locked. If 0, the net node is unlocked
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous net node lock status was locked |
		| 0 | Previous net node lock status was unlocked or an error occurred |
		| -1..-3 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLocking(bSet)

	def PlaceNode(self, shtid:int, x:float, y:float) -> int:
		"""
		Places a new node item on a formboard sheet or moves an existing node on a sheet.

		:param shtid: Identifier of the formboard sheet
		:type int: int
		:param x: Placement position on the x-axis
		:type float: float
		:param y: Placement position on the y-axis
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Node identifier |
		| 0 | Error occurred |
		| -1 | Pin item is an invalid type |
		| -2 | shtid is invalid |
		| -3 | shtid is not the identifier of a formboard sheet |
		| -4 | Node is not a net node |
		| -5 | No connect line is available for placement at the target position |
		| -6 | Node could not be added |
		| -7 | Node could not be moved between sheets |
		| -8 | Node could not be moved to the target position |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PlaceNode(shtid, x, y)

	def GetTypeId(self) -> int:
		"""
		Gets a value representing the type of the pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Type value of the pin item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTypeId()

	def IsPinView(self) -> int:
		"""
		Indicates whether the pin item is a pin view.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item is a pin view |
		| 0 | Item is not a pin view or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsPinView()

	def GetSchematicEndPinId(self, which:int) -> int:
		"""
		Gets the end identifier of the current conductor or wire item from the schematic sheet.

		:param which: Indicates which end of the conductor or wire to get the identifier from. If 1, the identifier of End 1 is retrieved. If 2, the identifier of End 2 is retrieved
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the conductor or wire end |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSchematicEndPinId(which)

	def SetAsInternal(self, onoff:int) -> int:
		"""
		Sets whether the current model pin item's connection target is exclusively an internal connection.

		:param onoff: Value indicating if the connection target should be set to exclusively an internal connection. If 1, the connection target is exclusively an internal connection. If 0, the connection target is not exclusively an internal connection
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Exclusive internal connection status applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAsInternal(onoff)

	def SetAsExternal(self, onoff:int) -> int:
		"""
		Sets whether the current model pin item's connection target is exclusively an external connection.

		:param onoff: Value indicating if the connection target should be set to exclusively an external connection. If 1, the connection target is exclusively an external connection. If 0, the connection target is not exclusively an external connection
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Exclusive external connection status applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAsExternal(onoff)

	def IsInternal(self) -> int:
		"""
		Indicates whether the current model pin item's connection target is exclusively an internal connection.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin is exclusively an internal connection |
		| 0 | Pin is not exclusively an internal connection or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsInternal()

	def IsExternal(self) -> int:
		"""
		Indicates whether the current model pin item's connection target is exclusively an external connection.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin is exclusively an external connection |
		| 0 | Pin is not exclusively an external connection or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsExternal()

	def AssignTo(self, pinids:list[int]) -> int:
		"""
		Assigns the current symbol node item to physical pin items.

		:param pinids: The following possible values are valid:. <li>Physical pin item identifier</li><li>Array of physical pin item identifiers</li><li>Connector identifier</li><li>Pin group identifier</li>
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbol node assigned |
		| 0 | pinids is invalid |
		| -3 | pinids contains at least one pin from an invalid device |
		| -4 | pinids contains at least one pin already assigned |
		| -5 | pinids contains at least one pin with a placed pin view |
		| -6 | Pin is plugged |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AssignTo(pinids)

	def SetPhysicalConnectionType(self, conntyp:int) -> int:
		"""
		Sets a value representing the connection type of the model pin item.

		:param conntyp: New connection type value. See Connection Types for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| -32..26 | Previous connection type value, See Connection Types for possible values |
		| 0 | Previous connection type is unknown or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPhysicalConnectionType(conntyp)

	def GetAssignedOptionExpressions(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options) assigned to the wire item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressions(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def SetNetSegmentPathIds(self, netsegids:list[int]) -> int:
		"""
		Defines or recalculates a new routing path for an already routed conductor or wire item.

		:param netsegids: Array of identifiers of net segments or a single net segment passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New routing path created |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetNetSegmentPathIds(netsegids)
		return ret[0]

	def GetDevicePinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the device pins contained in the symbol pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of device pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of device pins in ids |
		| 0 | No device pins or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetDevicePinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetOverbraidId(self) -> int:
		"""
		Gets the identifier of the current conductor or wire item's parent overbraid device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the parent overbraid device |
		| 0 | No parent overbraid device or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOverbraidId()

	def GetRelativePermittivity(self) -> tuple[int, float]:
		"""
		Gets the relative permittivity value of the conductor or wire item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | relativepermittivity | float | Relative permittivity value passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Relative permittivity value supplied |
		| 0 | No relative permittivity value available or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		dummy=0
		return self._obj.GetRelativePermittivity(dummy)

	def GetLossAngle(self) -> tuple[int, float]:
		"""
		Gets the loss angle value of the conductor or wire item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | lossangle | float | Loss angle value passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Loss angle value supplied |
		| 0 | No loss angle value available or an error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		dummy=0
		return self._obj.GetLossAngle(dummy)

	def UnassignFrom(self, id:int) -> int:
		"""
		Deassigns the current connector pin item from a symbol.

		:param id: Identifier of symbol to deassigned the pin item from
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item is deassigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.UnassignFrom(id)

	def ResetLength(self) -> int:
		"""
		Resets the length of the conductor or wire item so it is calculated.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Error occurred |
		| 0.0 | Length value assigned |
		| -1.0 | No pin item set |
		| -2.0 | No project open |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.ResetLength()

	def DeleteForced(self) -> int:
		"""
		Deletes the pin item from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.DeleteForced()

	def GetOuterDiameter(self) -> float:
		"""
		Gets the outer diameter of the conductor, wire or hose item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Conductor, wire or hose outer diameter value |
		| 0.0 | No project open, no pin item set or pin item has no diameter value assigned |
		| -1.0 | Conductor, wire or hose has varying outer diameter values |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.GetOuterDiameter()

	def GetFunctionalPortID(self) -> int:
		"""
		Gets the identifier of the functional port of the current block connector pin.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the functional port |
		| 0 | No functional port or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetFunctionalPortID()

	def GetBlockConnectionNumber(self) -> int:
		"""
		Gets the functional block connection point node number of the current functional block node item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Functional block connection point node number |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetBlockConnectionNumber()

	def SetOuterDiameter(self, newval:float) -> float:
		"""
		Sets the outer diameter of a conductor or wire item for a dynamic cable.

		:param newval: New outer diameter value
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 1.0 | Outer diameter value assigned |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetOuterDiameter(newval)

	def SetOptionExpressions(self, expressions:list[str]) -> int:
		"""
		Replaces the wire's option expressions.

		:param expressions: Array of strings of all option names, Boolean expressions or alias names of Boolean expressions
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.12
		"""
		return self._obj.SetOptionExpressions(expressions)

	def GetAssignedOptionExpressionsEx(self, Term:int=0) -> tuple[int, tuple[str,...]]:
		"""
		Gets option names and Boolean expressions (combinations of options)  including variant instances assigned to the wire item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[str,...] | Array of strings of all option names, Boolean expressions or alias names of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 9.23
		"""
		dummy=0
		ret, expressions = self._obj.GetAssignedOptionExpressionsEx(dummy, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def GetDefinedOuterDiameter(self) -> float:
		"""
		Gets the defined outer diameter of the conductor, wire or hose item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Defined conductor, wire or hose outer diameter value |
		| 0.0 | Conductor, wire or hose item has no defined outer diameter value or an error occurred |
		| -1.0 | Conductor, wire or hose has varying defined outer diameter values |

		Available since E3.series TLB-Versions: 9.30
		"""
		return self._obj.GetDefinedOuterDiameter()

	def LockObject(self) -> int:
		"""
		Locks the conductor or wire item's object.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Pin item's object is locked |
		| -1 | Error occurred |
		| -2 | Pin item's object is already locked |
		| -3 | Error occurred |
		| -1009 | No project open, no pin item set or pin item is not a conductor or wire type |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.LockObject()

	def UnlockObject(self, password:str) -> int:
		"""
		Unlocks the pin item's object.

		:param password: Password needed to unlock the object
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Object has been unlocked |
		| -1 | Error occurred |
		| -2 | Pin item's object is already unlocked |
		| -3 | Error occurred |
		| -1009 | No project open or no pin item set |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.UnlockObject(password)

	def IsLocked(self) -> int:
		"""
		Indicates the conductor or wire item's locked status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Pin is unlocked, pin is not a conductor or wire type or an error occurred |
		| 1 | Pin is locked |
		| 2 | Pin is indirect locked by a sheet |
		| 3 | Pin is locked and indirect locked by a sheet |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.IsLocked()

	def SetInterruptSignalFlow(self, sigflow:int=1) -> int:
		"""
		Sets whether the signal flow has been interrupted on the pin item.

		:param sigflow: New interrupt signal flow value. If 1, the signal flow is interrupted. If 0, the signal flow is not interrupted., defaults to 1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous value of the pin's signal flow was interrupted |
		| 0 | Previous value of the pin's signal flow was not interrupted or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetInterruptSignalFlow(sigflow)

	def GetInterruptSignalFlow(self) -> bool:
		"""
		Indicates whether the signal flow has been interrupted on the pin item.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin's signal flow is interrupted |
		| 0 | Pin's signal flow is not interrupted or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetInterruptSignalFlow()

	def GetCoreManufacturingLength(self) -> float:
		"""
		Gets the manufacturing length of the conductor or wire item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Conductor or wire length value |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetCoreManufacturingLength()

	def GetNumberOfWindings(self) -> int:
		"""
		Gets the number of windings per meter of the conductor or wire item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of windings per meter supplied |
		| 0 | No windings or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetNumberOfWindings()

	def GetHarnessId(self) -> int:
		"""
		Gets the identifier of the pins item's harness.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the harness |
		| 0 | No harness or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetHarnessId()

	def GetCoreWeight(self) -> float:
		"""
		Gets the weight of the conductor or wire item.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Conductor or wire weight value |
		| 0.0 | Conductor or wire weight could not be calculated or an error occurred |
		| -1.0 | Conductor or wire has varying weight values |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetCoreWeight()

	def GetCoreCost(self) -> str:
		"""
		Gets the cost of the conductor or wire item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Cost&gt;" | Conductor or wire cost value |
		| "Empty&gt;" | Conductor or wire has no cost value or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetCoreCost()

	def SetCoreCost(self, value:str) -> int:
		"""
		Sets the cost of the conductor or wire item.

		:param value: New cost value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;3 | .COST attribute identifier |
		| 0..2 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetCoreCost(value)

	def GetWireKindId(self) -> int:
		"""
		Gets a value representing the kind of wire the wire item consists of.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Wire kind identifier |
		| 0 | Wire has no kind or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetWireKindId()

	def GetMergeSegment(self) -> int:
		"""
		Gets the current node item's line segment merging status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Node is a line segment merging node |
		| 0 | Node is a line segment cutting node or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetMergeSegment()

	def SetMergeSegment(self, bSet:bool) -> int:
		"""
		Sets the current node item's line segment merging status.

		:param bSet: Line segment merging status value. If 1, line segment merging node value. If 0, line segment cutting node value
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previously node was a line segment merging node |
		| 0 | Previously node was a line segment cutting node or an error occurred |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetMergeSegment(bSet)

	def GetConnectedPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the pins connected directly to the current pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of connected pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connected pin identifiers in ids |
		| 0 | No connected pins found or an error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		dummy=0
		ret, ids = self._obj.GetConnectedPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GenerateNewWireNames(self, ids:list[int]) -> int:
		"""
		Updates wire names.

		:param ids: Array of identifiers of wires and items containing wires such as bundles and cables.
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 10.20
		"""
		return self._obj.GenerateNewWireNames(ids)

	def GetConnectedNodeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the nodes connected to the current node.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of connected nodes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connected nodes identifiers in ids |
		| 0 | No connected nodes found or an error occurred |

		Available since E3.series TLB-Versions: 10.20
		"""
		dummy=0
		ret, ids = self._obj.GetConnectedNodeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CalculateFittingForWires(self, wirids:list[int]) -> tuple[int, tuple[int,...]]:
		"""
		Calculates the connector pin terminal for specified wires for the pin item.

		:param wirids: Array of identifiers of conductor, wire and hose items
		:type list[int]: list[int]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | fittinglst | tuple[int,...] | Connector pin terminal names passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of possible connector pin terminals |
		| 0 | No connector pin terminals found |
		| &lt; 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.23
		"""
		dummy=0
		ret, fittinglst = self._obj.CalculateFittingForWires(wirids, dummy)
		fittinglst = fittinglst[1:] if type(fittinglst) == tuple and len(fittinglst) > 0 else tuple()
		return ret, fittinglst

	def GetTranslatedSignalName(self) -> str:
		"""
		Gets the pin item's translated signal name value.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Pin item's translated signal name value is supplied |
		| "&lt;Empty&gt;" | No signal translated name value or an error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetTranslatedSignalName()

	def GetVariantObjectProperties(self, iObjectType:int, sAttributeName:str) -> tuple[int, tuple[typing.Union[tuple[str,int,str],tuple[str,int,str,int]],...]]:
		"""
		Gets an array of the pin item's variants and their object properties.

		:param iObjectType: Value defining the information contained in. arr
		:type int: int
		:param sAttributeName: Attribute name. If iObjectType is 3, arr only contains values of the specified attribute. If iObjectType is 3 and the attribute name value is "<Empty>", arr contains values of all the attributes. If iObjectType is not 3, the attribute name value should be "<Empty>"
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | arr | tuple[typing.Union[tuple[str,int,str],tuple[str,int,str,int]],...] | Array of variant object properties passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of variants in arr |
		| 0 | No variant object properties found or an error occurred |

		Available since E3.series TLB-Versions: 11.11, 10.46
		"""
		dummy=0
		ret, arr = self._obj.GetVariantObjectProperties(iObjectType, sAttributeName, dummy)
		arr = arr[1:] if type(arr) == tuple and len(arr) > 0 else tuple()
		return ret, arr

	def GetTemplateSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the attribute text template symbols placed on the current node item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attribute text template symbols passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attribute text template symbols in ids |
		| 0 | No attribute text template symbols or an error occurred |

		Available since E3.series TLB-Versions: 11.21, 14.00, 11.30
		"""
		dummy=0
		ret, ids = self._obj.GetTemplateSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddEndAttributeValue(self, which:int, name:str, value:str) -> int:
		"""
		Adds an attribute to an end of the conductor or wire item.

		:param which: Indicates which end of the conductor or wire to add the attribute value to. If 1, the attribute value to add to End 1 of the conductor or wire. If 2, the attribute value to add to End 2 of the conductor or wire
		:type int: int
		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | Error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 11.30
		"""
		return self._obj.AddEndAttributeValue(which, name, value)

	def GetCoreChangeIds(self, optids:list[int]=pythoncom.Empty) -> tuple[int, tuple[int,...]]:
		"""
		Gets wire difference items of the conductor or wire item.

		:param optids: Array of options, harness families and harness derivatives for filtering the identifiers in. ids, defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of wire difference items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of wire difference items in ids |
		| 0 | No wire difference items |
		| -1 | No pin item set or pin item is not a conductor or wire |
		| -2 | No project open |

		Available since E3.series TLB-Versions: 15.00
		"""
		dummy=0
		ret, ids = self._obj.GetCoreChangeIds(dummy, optids)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetCoreChangeId(self, id:int) -> int:
		"""
		Sets the wire difference item of a conductor or wire item.

		:param id: Wire difference item identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Pin item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.SetCoreChangeId(id)

	def GetFittingIds(self, optids:list[int]=pythoncom.Empty) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the connector pin terminals for the current pin item.

		:param optids: Identifier of an option item., defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of connector pin terminals passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connector pin terminals identifiers in ids |
		| 0 | No connector pin terminals or an error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		dummy=0
		ret, ids = self._obj.GetFittingIds(dummy, optids)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetFittingId(self, id:int) -> int:
		"""
		Sets the connector pin terminal item to be evaluated.

		:param id: Connector pin terminal identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Connector pin terminal identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 15.00
		"""
		return self._obj.SetFittingId(id)

	def SetPhysicalMaxConnections(self, conncount:int) -> int:
		"""
		Sets the maximum number of possible connections for the current pin item.

		:param conncount: New maximum number of connections
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Maximum number of connections assigned |
		| -1 | No pin item set |
		| -2 | No project open |
		| -3 | Pin item is invalid |
		| -4 | conncount is invalid |

		Available since E3.series TLB-Versions: 15.20
		"""
		return self._obj.SetPhysicalMaxConnections(conncount)

	def GetAssignedOptionExpressionsWithFlags(self, Term:int=0) -> tuple[int, tuple[tuple[str,int],...]]:
		"""
		Gets option names and Boolean expressions (combinations of options)  including variant instances assigned to the wire item.

		:param Term: Indicates whether aliases should be resolved. If the value is 1, alias names are resolved and the resulting expressions with option names are included in expressions., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | expressions | tuple[tuple[str,int],...] | Array of assigned option expression values passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are supplied or an error occurred |

		Available since E3.series TLB-Versions: 17.00
		"""
		var_expressions = VARIANT(pythoncom.VT_TYPEMASK, 0)
		ret, expressions = self._obj.GetAssignedOptionExpressionsWithFlags(var_expressions, Term)
		expressions = expressions[1:] if type(expressions) == tuple and len(expressions) > 0 else tuple()
		return ret, expressions

	def SetOptionExpressionsWithFlags(self, expressions:list[tuple[str,int]]) -> int:
		"""
		Replaces the wire's option expressions.

		:param expressions: Array of assigned option expressions and status values
		:type list[tuple[str,int]]: list[tuple[str,int]]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in expressions assigned |
		| 0 | No assigned option expressions are assigned or an error occurred |

		Available since E3.series TLB-Versions: 17.00
		"""
		expressions = [("",0)] + expressions
		return self._obj.SetOptionExpressionsWithFlags(expressions)

	def GetPinIndex(self) -> int:
		"""
		Gets the index of the pin item in the pin assignment table.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Pin's pin assignment table index |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 17.01, 16.13
		"""
		return self._obj.GetPinIndex()

	def SetDisableAutomaticFittingSelection(self, onoff:bool) -> int:
		"""
		Sets the status for connector pin terminals and wire seals being automatically selected for the pin item.

		:param onoff: Indicates whether connector pin terminals and wire seals are automatically selected for the pin. If 1, connector pin terminals and wire seals are not automatically selected. If 0, connector pin terminals and wire seals are automatically selected
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Status for connector pin terminals and wire seals being automatically selected is deactivated |
		| 0 | Status for connector pin terminals and wire seals being automatically selected  is activated |
		| -1 | Error occurred |
		| -2 | Pin item is a busbar pin, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 17.13, 16.19
		"""
		return self._obj.SetDisableAutomaticFittingSelection(onoff)

	def GetDisableAutomaticFittingSelection(self) -> int:
		"""
		Indicates whether connector pin terminals and wire seals are automatically selected for the pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connector pin terminals and wire seals are not automatically selected |
		| 0 | Connector pin terminals and wire seals are automatically selected |
		| -1 | Error occurred |
		| -2 | Pin item is a busbar pin, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 17.13, 16.19
		"""
		return self._obj.GetDisableAutomaticFittingSelection()

	def GetAllNetSegmentIds(self, flags:int) -> tuple[int, tuple[int,...], tuple[int,...], tuple[int,...], tuple[tuple[int,...],...]]:
		"""
		Gets identifiers of the net segments carrying the conductor or wire item.

		:param flags: Not used
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | views | tuple[int,...] | Array of view numbers of views containing the net segments |
		| 2 | types | tuple[int,...] | Array of conductor or wire connection types |
		| 3 | viewcounts | tuple[int,...] | Array of number of net segments in each conductor or wire representation in. ids |
		| 4 | ids | tuple[tuple[int,...],...] | Array of identifiers wire representations and their net segments in source to target connection order |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of elements in ids |
		| 0 | No net segments or an error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		dummy=0
		ret, views, types, viewcounts, ids = self._obj.GetAllNetSegmentIds(flags, dummy, dummy, dummy, dummy)
		views = views[1:] if type(views) == tuple and len(views) > 0 else tuple()
		types = types[1:] if type(types) == tuple and len(types) > 0 else tuple()
		viewcounts = viewcounts[1:] if type(viewcounts) == tuple and len(viewcounts) > 0 else tuple()
		return ret, views, types, viewcounts, ids

	def GetCavityPartIds(self, _type:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the pin item's cavity parts.

		:param _type: Cavity part type filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of cavity parts |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cavity part identifiers in ids |
		| 0 | No cavity parts found |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		dummy=0
		ret, ids = self._obj.GetCavityPartIds(dummy, _type)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetOneTerminalPerCore(self, onoff:bool) -> int:
		"""
		Sets the status indicating whether the current pin item is restricted to one conductor per connector pin terminal.

		:param onoff: Status value to apply. If 1, pin is restricted to one conductor per connector pin terminal. If 0, pin is not restricted to one conductor per connector pin terminal
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | One conductor per connector pin terminal status applied |
		| -1 | No project open or no pin item set |
		| -2 | Project settings inactive:, Electric Settings → Connection → Conductors / Wires → Conductor Assignment Procedure → Use physical data of cavity part models instead of device modelElectric Settings → Connection → Conductors / Wires → Conductor Assignment Procedure → Use physical data of conductor to select connector pin terminal and wire seal |
		| -3 | Pin item is a component pin |
		| -4 | Pin item's device is sealed |
		| -5 | Pin item is a busbar pin, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.SetOneTerminalPerCore(onoff)

	def GetOneTerminalPerCore(self) -> int:
		"""
		Gets the status indicating whether the current pin item is restricted to one conductor per connector pin terminal.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin is restricted to one conductor per connector pin terminal |
		| 0 | Pin is not restricted to one conductor per connector pin terminal |
		| -1 | Error occurred |
		| -2 | Pin item is a busbar pin, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.GetOneTerminalPerCore()

	def SetAllowMultipleWireCrimps(self, onoff:bool) -> int:
		"""
		Sets the status indicating whether multiple wire crimps are allowed for the current pin item.

		:param onoff: Status value to apply. If 1,  multiple conductors and wires can be connected. If 0,  multiple conductors and wires cannot be connected
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Setting for multiple wire crimps are allowed value assigned |
		| -1 | No project open or no pin item set |
		| -2 | Project settings inactive:, Electric Settings → Connection → Conductors / Wires → Conductor Assignment Procedure → Use physical data of cavity part models instead of device modelElectric Settings &gt; Connection → Conductors / Wires → Conductor Assignment Procedure → Use physical data of conductor to select connector pin terminal and wire seal |
		| -3 | One pin terminal per conductor value is inactive, One pin terminal per conductor value is located in Device Properties (dialog) → Connector Pin Terminals → Options → One pin terminal per conductor (check box). |
		| -4 | Pin item is a component pin |
		| -5 | Pin item's device is sealed |
		| -6 | Pin item is a busbar pin, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.SetAllowMultipleWireCrimps(onoff)

	def GetAllowMultipleWireCrimps(self) -> int:
		"""
		Gets the status indicating whether multiple wire crimps are allowed for the current pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Multiple conductor and wire are allowed to be connected |
		| 0 | Multiple conductor and wire are not allowed to be connected |
		| -1 | Error occurred |
		| -2 | Pin item is a busbar pin, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.GetAllowMultipleWireCrimps()

	def GetValidWireSeals(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the possible valid wire seal names for the current pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | validWireSeals | tuple[str,...] | Array of possible wire seal names |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of possible valid wire seal names |
		| 0 | No valid wire seals found |
		| &lt; 0 | Error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		dummy=0
		ret, validWireSeals = self._obj.GetValidWireSeals(dummy)
		validWireSeals = validWireSeals[1:] if type(validWireSeals) == tuple and len(validWireSeals) > 0 else tuple()
		return ret, validWireSeals

	def SetOuterDiameterByDescription(self, description:str) -> int:
		"""
		Sets the outer diameter of a conductor or wire item for a dynamic cable.

		:param description: New outer diameter value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Outer diameter value assigned |
		| -1 | No open project, no pin item set or invalid pin type |
		| -2 | No wire or cable available |
		| -3 | No outer diameter with description found in the database |
		| -4 | Failed cross section check |
		| -5 | Cable has a component type |
		| -6 | Pin item belongs to a busbar, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 18.00
		"""
		return self._obj.SetOuterDiameterByDescription(description)

	def CalculateCavityPartsForWires(self, wirids:list[int]) -> tuple[int, tuple[str,...], tuple[str,...]]:
		"""
		Calculates the cavity parts for specified wires for the pin item.

		:param wirids: Array of identifiers of conductor, wire and hose items
		:type list[int]: list[int]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | fittinglst | tuple[str,...] | Connector pin terminal names passed out of the function |
		| 2 | wireseallst | tuple[str,...] | Array of wire seal cavity parts passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of possible connector pin terminals |
		| 0 | No connector pin terminals found |
		| &lt; 0 | Error occurred |

		Available since E3.series TLB-Versions: 18.00
		"""
		dummy=0
		ret, fittinglst, wireseallst = self._obj.CalculateCavityPartsForWires(wirids, dummy, dummy)
		fittinglst = fittinglst[1:] if type(fittinglst) == tuple and len(fittinglst) > 0 else tuple()
		wireseallst = wireseallst[1:] if type(wireseallst) == tuple and len(wireseallst) > 0 else tuple()
		return ret, fittinglst, wireseallst

	def GetCavityPartsFromPinByCore(self, coreid:int, _type:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the pin item's cavity parts.

		:param coreid: Identifiers of conductor or wire
		:type int: int
		:param _type: Cavity part type filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | cavityParts | tuple[int,...] | Array of identifiers of cavity parts |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cavity part identifiers in ids |
		| 0 | No cavity parts found |
		| -1 | Current pin item is an invalid type |
		| -2 | no pin item set |
		| -3 | coreid is invalid |
		| -4 | Pin item is a busbar pin, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 18.00
		"""
		dummy=0
		ret, cavityParts = self._obj.GetCavityPartsFromPinByCore(coreid, dummy, _type)
		cavityParts = cavityParts[1:] if type(cavityParts) == tuple and len(cavityParts) > 0 else tuple()
		return ret, cavityParts

	def IsLockedByAccessControl(self) -> int:
		"""
		Indicates the pin item's E³PluginAccessControl lock status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 3 | Pin is locked and also indirectly by the sheet |
		| 2 | Pin is locked indirectly by the sheet |
		| 1 | Pin is locked |
		| 0 | Pin is unlocked or an error occurred |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.IsLockedByAccessControl()

	def GetEndCavityPartIds(self, which:int, _type:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the end cavity parts of the current conductor or wire item.

		:param which: Indicates which end of the conductor or wire to get the cavity parts for
		:type int: int
		:param _type: Cavity part type filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | cavities | tuple[int,...] | Array of identifiers of cavity parts passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of end cavity parts in cavities |
		| 0 | No end cavity parts |
		| -1 | No project open or no pin item set |
		| -2 | Current pin item is not a conductor or wire |
		| -3 | Pin item belongs to a busbar and has no cavity parts, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 19.00
		"""
		dummy=0
		ret, cavities = self._obj.GetEndCavityPartIds(which, dummy, _type)
		cavities = cavities[1:] if type(cavities) == tuple and len(cavities) > 0 else tuple()
		return ret, cavities

	def SetMultipleWireCrimps(self, conncount:int) -> int:
		"""
		Sets the maximum number of conductors and wires connectable to the pin item.

		:param conncount: New maximum number of conductors and wires value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Maximum number of conductors and wires value applied |
		| -1 | Invalid pin item type |
		| -2 | Pin item is locked |
		| -3 | Pin item is a pin view |
		| -4 | Pin data is unavailable |
		| -5 | Conductor redistribution not possible with conncount value |
		| -6 | E³.DatabaseEditor is running |
		| -7 | Multiple wire crimps are not allowed |
		| -8 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.01
		"""
		return self._obj.SetMultipleWireCrimps(conncount)

	def GetMultipleWireCrimps(self) -> int:
		"""
		Gets the maximum number of conductors and wires connectable to the pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..999 | Maximum number of conductors and wires connectable to the pin item |
		| 0 | No conductors and wires connectable to the pin item |
		| -1 | Invalid pin item type |
		| -2 | Pin item is locked |
		| -3 | Pin item is a pin view |
		| -4 | Pin data is unavailable |
		| -6 | E³.DatabaseEditor is running |
		| -7 | Multiple wire crimps are not allowed |
		| -8 | Error occurred |
		| -9 | Pin item is a busbar pin, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 20.00, 19.01
		"""
		return self._obj.GetMultipleWireCrimps()

	def AddDefaultWireEx(self, wiregroup:str, wirename:str) -> int:
		"""
		Adds a wire type to the jumper pin item's list of default wire types.

		:param wiregroup: Wire group name value
		:type str: str
		:param wirename: Wire name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Default wire type added |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.12
		"""
		return self._obj.AddDefaultWireEx(wiregroup, wirename)

	def DeleteDefaultWireEx(self, wiregroup:str, wirename:str) -> int:
		"""
		Removes a wire type from the jumper pin item's list of default wire types.

		:param wiregroup: Wire group name value
		:type str: str
		:param wirename: Wire name value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Default wire type removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.12
		"""
		return self._obj.DeleteDefaultWireEx(wiregroup, wirename)

	def GetWireKindDescription(self) -> str:
		"""
		Gets a description of the kind of wire the wire item consists of.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Description&gt;" | Wire kind description |
		| "&lt;Empty&gt;" | Wire has no kind or an error occurred |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.GetWireKindDescription()

	def PlugWithMatingPin(self) -> int:
		"""
		Creates and plugs the counter part to the current pin item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the counter part pin item |
		| -1 | One of the following error occurred:, No project openNo pin item setPrevious to v2026-26.00 E³.logic is in useE³.series is running in viewer mode |
		| -2 | No mating connector defined |
		| -3 | Signals of all pins and mating pins differ |
		| -4 | Pins belong to a dynamic symbol |
		| -5 | Device or mating device is locked |
		| -6 | Pin is already connected |
		| -7 | Device is not a valid type |
		| -8 | Device view cannot be plugged with a connector |
		| -9 | Error occurred |
		| -10 | Busbar pins cannot be plugged, Available since v2022-23.00 |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.PlugWithMatingPin()

	def UnplugFromMatingPin(self) -> tuple[int, tuple[int,...]]:
		"""
		Disconnects the counter part pin from the current pin item.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | pinIds | tuple[int,...] | Array of identifiers of disconnected pins passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of disconnected counter part pins |
		| -1 | One of the following error occurred:, No project openNo pin item setPrevious to v2026-26.00 E³.logic is in useE³.series is running in viewer mode |
		| -2 | Pin not connected |
		| -3 | Device cannot be unplugged, For example it is graphically connected |
		| -4 | Device or mating device is locked |
		| -5 | Device is not a valid type |
		| -6 | Error occurred |
		| -7 | Partially successful, Some but not all pins are disconnected |

		Available since E3.series TLB-Versions: 20.00
		"""
		dummy=0
		ret, pinIds = self._obj.UnplugFromMatingPin(dummy)
		pinIds = pinIds[1:] if type(pinIds) == tuple and len(pinIds) > 0 else tuple()
		return ret, pinIds

	def GetPlugStatus(self) -> int:
		"""
		Gets the pin item's plug status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Type value of the pin item |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.GetPlugStatus()

	def GetOverbraidIdEx(self) -> int:
		"""
		Gets the identifier of the current conductor or wire item's parent overbraid device.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the parent overbraid |
		| -1 | No project open or no pin item set |
		| -2 | Conductor or wire is not a part of an overbraid |
		| -3 | Pin is an invalid pin type to be contained in an overbraid |

		Available since E3.series TLB-Versions: 20.70, 20.01, 19.24
		"""
		return self._obj.GetOverbraidIdEx()

	def GetRootOverbraidId(self) -> int:
		"""
		Gets the identifier of the pin item's root overbraid.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the root overbraid |
		| -1 | No project open or pin item set |
		| -2 | Pin item is not an overbraid element |
		| -3 | Pin item is an invalid type |

		Available since E3.series TLB-Versions: 20.70, 20.01, 19.24
		"""
		return self._obj.GetRootOverbraidId()

	def SetLogicalEquivalenceID(self, equivalenceId:int, flags:int=0) -> int:
		"""
		Sets the pin's equivalence identifier.

		:param equivalenceId: Equivalence value to set
		:type int: int
		:param flags: Currently not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | logical equivalence is applied |
		| -1 | No project open or pin item set |
		| -2 | Invalid pin type |
		| -3 | Invalid equivalenceId |
		| -4 | Pin is linked to a supply |
		| -5 | Change would cause an invalid core/wire mounting |

		Available since E3.series TLB-Versions: 20.71, 20.13
		"""
		return self._obj.SetLogicalEquivalenceID(equivalenceId, flags)

	def DeleteEx(self, list:list[int], forced:bool=False) -> int:
		"""
		Deletes specified pins and conductors.

		:param list: Array of identifiers of items to delete passed into the function
		:type list[int]: list[int]
		:param forced: Indicates whether placed pins and conductors may be deleted. If 1, placed pins and conductors may be deleted. If 0, placed pins and conductors may not be deleted., defaults to False
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Items in list deleted |
		| 0 | Error occurred |
		| -1 | Pin or conductor in list could not be deleted |

		Available since E3.series TLB-Versions: 21.01, 20.22, 19.20
		"""
		ret = self._obj.DeleteEx(list, forced)
		return ret[0]

	def GetSymbolName(self) -> str:
		"""
		Gets the name of the symbol associated with a placed pin.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Name of symbol used for placement |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 21.01, 20.22
		"""
		return self._obj.GetSymbolName()

	def ResetHighlightPanelPath(self) -> int:
		"""
		Removes the highlighting from the conductor or wire item on project trees and panel sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Name of symbol used for placement |
		| -1 | No project open or no pin item set |
		| -2 | Pin item is not a conductor or wire |
		| -4 | Error occurred |

		Available since E3.series TLB-Versions: 21.11
		"""
		return self._obj.ResetHighlightPanelPath()

	def HighlightPanelPath(self, colour:int, width:float, flags:int) -> int:
		"""
		Highlights the conductor or wire item on project trees and panel sheets.

		:param colour: Highlight color value. See Colors for possible values
		:type int: int
		:param width: Highlight line width
		:type float: float
		:param flags: Flags indicating the highlighting behavior
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Conductor or wire highlighted |
		| -1 | No project open or no pin item set |
		| -2 | Pin item is not a conductor or wire |
		| -3 | flags value is invalid |
		| -4 | Error occurred |
		| -5 | Conductor or wire is inactive in options and variants |
		| -6 | Conductor or wire is not placed on a panel sheet |

		Available since E3.series TLB-Versions: 21.11
		"""
		return self._obj.HighlightPanelPath(colour, width, flags)

	def GetPinGender(self) -> int:
		"""
		Gets the pin item's gender.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..2 | Pin gender value is supplied |
		| -1 | No project open or no pin item set |
		| -3 | Invalid pin or item type |
		| -4 | Invalid pin gender |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.GetPinGender()

	def SetPinGender(self, gender:int) -> int:
		"""
		Sets the pin item's gender.

		:param gender: Pin gender value to set
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..2 | New gender value applied |
		| -1 | No project open or no pin item set |
		| -2 | Pin is locked |
		| -3 | Invalid pin or item type |
		| -4 | Invalid gender value |
		| -5 | Pin gender cannot be changed |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.SetPinGender(gender)

	def GetWireHoseTubeStyle(self, flags:int=0) -> tuple[int, int, int, str, int, int, int, int, int]:
		"""
		Gets color or material information about the current wire, hose or tube item.

		:param flags: Allows extra possible values for. colour. If 1, extra values for colour are possible. If 0, extra values for colour are not possible., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | colour_code | int | Unique code value |
		| 2 | descr_type | int | Information type. If 1, color information. If 2, material information |
		| 3 | descr | str | Color description |
		| 4 | colour | int | Color value |
		| 5 | line_type | int | Line style value. See Line Styles for possible values |
		| 6 | Rvalue | int | RGB colorspace's red value |
		| 7 | Gvalue | int | RGB colorspace's green value |
		| 8 | Bvalue | int | RGB colorspace's blue value |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Color or material information supplied |
		| -1 | No project open, pin item set |
		| -2 | Pin item is not a wire, hose or tube |
		| -3 | Invalid flags value |
		| -4 | Error occurred |

		Available since E3.series TLB-Versions: 22.01, 21.30
		"""
		dummy=0
		return self._obj.GetWireHoseTubeStyle(dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy, flags)

	def IsCoreEndLockedPermanent(self) -> int:
		"""
		Indicates whether the current assembly component wire item's ends are hardwired through the assembly.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 3 | Both ends are hardwired |
		| 2 | End 2 is hardwired |
		| 1 | End 1 is hardwired |
		| 0 | Neither end of the wire is hardwired |
		| -1 | No project open |
		| -2 | No pin item set |
		| -3 | Current pin item is not a wire |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.IsCoreEndLockedPermanent()

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the pin item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the pin item |
		| "&lt;Empty&gt;" | No pin item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def SetGID(self, gid:str) -> str:
		"""
		Sets a pin as the current item.

		:param gid: Global identifier value of a pin item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current pin item |
		| "&lt;Empty&gt;" | No pin item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGID(gid)

	def GetGUID(self) -> str:
		"""
		Gets the globally unique identifier of the current pin item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current pin item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGUID()

	def SetGUID(self, guid:str) -> str:
		"""
		Sets a pin as the current item.

		:param guid: Globally unique identifier value of a pin item
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the current pin item |
		| "&lt;Empty&gt;" | No pin item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetGUID(guid)

	def AssignBusbar(self, ids:list[int], flags:int=0) -> int:
		"""
		Assigns the current busbar conductor to a net.

		:param ids: Array containing an identifier of an item used in a net
		:type list[int]: list[int]
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Busbar conductor assigned to net |
		| -1 | No project open or no pin item set |
		| -2 | Pin item is not a busbar conductor |
		| -3 | Busbar is locked |
		| -4 | ids element is invalid |
		| -5 | ids element is locked |
		| -6 | ids element cannot be mounted to the busbar |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.AssignBusbar(ids, flags)

	def DeAssignBusbar(self, flags:int=0) -> int:
		"""
		Deassigns the current busbar conductor from its net.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Busbar conductor deassigned from net |
		| 0 | Busbar conductor not assigned to net |
		| -1 | No project open or no pin item set |
		| -2 | Pin item is not a busbar conductor |
		| -3 | Busbar is locked |
		| -4 | Busbar is placed and connected in a panel |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.DeAssignBusbar(flags)

	def IsBusbar(self) -> int:
		"""
		Indicates if the pin item belongs to a busbar or the conductor item is a busbar.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Pin item belongs to a busbar or the conductor item is a busbar |
		| 0 | Pin item does not belong to a busbar or the conductor item is a busbar |
		| -1 | No project open or no pin item set |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.IsBusbar()

	def GetInternalColourDescription(self) -> str:
		"""
		Gets the color description of the current wire, hose or tube item without text token translations.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Description&gt;" | Color description of the wire, hose or tube item |
		| "MULTIPLE_VALUES" | Wire has varying colors in different options |
		| "&lt;Empty&gt;" | Wire does not have a color or an error occurred |

		Available since E3.series TLB-Versions: 24.00
		"""
		return self._obj.GetInternalColourDescription()

	def ChangeAssignedOptionExpression(self, oldval:str, newval:str, oldflags:int=0, newflags:int=0) -> int:
		"""
		Modifies a conductor or wire item's existing Boolean expression without unplacing existing instances.

		:param oldval: Option name, Boolean expression or alias name of a Boolean expression currently assigned to the conductor or wire
		:type str: str
		:param newval: Replacement option name, Boolean expression or alias name of a Boolean expression to assign to the conductor or wire
		:type str: str
		:param oldflags: Flag values representing the current status of the 'Does not exist' and 'Only exists' flags of the option name, Boolean expression or alias name of a Boolean expression currently assigned to the conductor or wire., defaults to 0
		:type int: int
		:param newflags: Flag values representing the current status of the 'Does not exist' and 'Only exists' flags of the option name, Boolean expression or alias name of a Boolean expression to assign to the conductor or wire., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Conductor or wire item's Boolean expression is changed |
		| -1 | No project open or no conductor or wire item set |
		| -2 | E³.series is running in viewer mode Previous to v2026-26.00 no license available for E³.logic is also a possibility |
		| -3 | oldval or newval parameter value is invalid |
		| -4 | Conductor or wire item is invalid for the operation |
		| -5 | Conductor or wire item is a view |
		| -6 | oldval expression not found |
		| -7 | oldval expression is a variant instance |
		| -8 | newval expression is syntactically incorrect or contains incorrect arguments |
		| -9 | newvalexpression is a variant instance |
		| -10 | oldflags or newflags parameter value is invalid |
		| -11 | Conductor or wire item is locked against changes |

		Available since E3.series TLB-Versions: 24.01, 23.31
		"""
		return self._obj.ChangeAssignedOptionExpression(oldval, newval, oldflags, newflags)

	def GetRoutingOffset(self, flags:int=0) -> tuple[int, float, float, float]:
		"""
		Gets the current routing offset values of the pin item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Routing offset on the x-axis passed out of the function |
		| 2 | y | float | Routing offset on the y-axis passed out of the function |
		| 3 | z | float | Routing offset on the z-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Routing offset values supplied |
		| -1 | No project open or no pin item set |
		| -2 | Pin item is invalid |
		| -3 | Pin item has no panel description |
		| -4 | flags is invalid |

		Available since E3.series TLB-Versions: 25.00
		"""
		dummy=0
		return self._obj.GetRoutingOffset(dummy, dummy, dummy, flags)

	def SetRoutingOffset(self, x:float, y:float, z:float, flags:int=0) -> int:
		"""
		Sets the current routing offset values of the pin item.

		:param x: Routing offset on the x-axis
		:type float: float
		:param y: Routing offset on the y-axis
		:type float: float
		:param z: Routing offset on the z-axis
		:type float: float
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Routing offset values applied |
		| -1 | No project open or no pin item set |
		| -2 | Pin item is invalid |
		| -3 | Pin item has no panel description |
		| -4 | flags is invalid |
		| -5 | Pin item is locked |
		| -6 | Error occurred |

		Available since E3.series TLB-Versions: 25.00
		"""
		return self._obj.SetRoutingOffset(x, y, z, flags)

	def GetWiringDirection(self, pin_item:int, carrierid:int=0, flags:int=0) -> tuple[int, float, float]:
		"""
		Gets the angles of the bends in the wire item's direction from a connected pin.

		:param pin_item: Identifier of the pin connected to one end of the wire
		:type int: int
		:param carrierid: Identifier of a slot the pin is mounted to., defaults to 0
		:type int: int
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | angle_1 | float | Angle in degrees of the first bend in the wire from the pin or the second bend if a routing offset is used |
		| 2 | angle_2 | float | Angle in degrees of the third bend in the wire from the pin or the fourth bend if a routing offset is used |

		| Return Value | Description |
		|:-----:|:-----|
		| 3 | angle_1 value in degrees supplied, angle_2 value can not be supplied because the relevant bend in the wire curves on the z-axis, leaving x-axis and y-axis values unchanged |
		| 2 | angle_1 value in degrees supplied, Wire does not have enough bends to provide a angle_2 value |
		| 1 | angle_1 and angle_2 values in degrees supplied |
		| -1 | No project open or no pin item set |
		| -2 | Pin item is not a wire |
		| -3 | pin_item is invalid |
		| -4 | flags is invalid |
		| -5 | Wire is inactive |
		| -6 | Pin referenced by pin_item is inactive |
		| -7 | carrierid is invalid |
		| -8 | Slot referenced by carrierid is inactive |
		| -9 | Wire is not connected |
		| -10 | Wire is not connected to the pin referenced by pin_item |
		| -11 | Error occurred |

		Available since E3.series TLB-Versions: 25.00, 24.31, 23.51
		"""
		dummy=0
		return self._obj.GetWiringDirection(pin_item, dummy, dummy, carrierid, flags)

	def GetColourDescriptionByInstallationLanguage(self, installationLanguage:int, flags:int=0) -> str:
		"""
		Gets the color description of the current wire, hose or tube item in a specified language.

		:param installationLanguage: Installation language value
		:type int: int
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Description&gt;" | Color description of the wire, hose or tube |
		| "MULTIPLE_VALUES" | Wire, hose or tube has varying colors in different options |
		| "&lt;Empty&gt;" | Wire, hose or tube does not have a color or an error occurred |

		Available since E3.series TLB-Versions: 25.00
		"""
		return self._obj.GetColourDescriptionByInstallationLanguage(installationLanguage, flags)

	def GetOriginalCoreName(self, flags:int=0) -> str:
		"""
		Gets the original name of a conductor or wire of a database cable.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Conductor or wire name defined in the database |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 25.12, 24.43
		"""
		return self._obj.GetOriginalCoreName(flags)

	def IsUnmeasured(self, flags:int=0) -> int:
		"""
		Indicates if the conductor, wire, hose or tube has a measured length defined by the user or determined by E³.series.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Item's length is unmeasured |
		| 0 | Item's length is measured by E³.series |
		| -1 | No project open or no pin item set |
		| -2 | flags value is invalid |
		| -3 | Item is not a valid conductor, wire, hose or tube |
		| -4 | Item has a mix of both measured and unmeasured lengths |

		Available since E3.series TLB-Versions: 25.12, 24.45
		"""
		return self._obj.IsUnmeasured(flags)

	def GetComponentPinId(self, flags:int=0) -> int:
		"""
		Gets the identifier of the component pin of the current pin item.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the component pin |
		| 0 | Current pin item has no component pin |
		| -1 | No project open or no pin item set |
		| -2 | flags value is invalid |
		| -3 | Current pin item is an invalid type |

		Available since E3.series TLB-Versions: 25.23
		"""
		return self._obj.GetComponentPinId(flags)

# -------------------- IJobInterface--------------------
class Job:
	def __init__(self, obj: typing.Any) -> None:
		try:
			obj
		except AttributeError:
			raise OSError("Cannot initialize Job. Use Create-methods of other objects to create an instance.")
		self._obj = obj

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetId(self) -> int:
		"""
		Gets the identifier of the current project item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current project item identifier |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def DumpItem(self, id:int) -> int:
		"""
		Internal function for debugging purposes.

		:param id: Item identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DumpItem(id)

	def GetItemType(self, id:int) -> int:
		"""
		Gets the item type of an item identifier.

		:param id: Item identifier
		:type int: int

		:return:
		Type: int **Available enum type:** e3series.types.ItemType.

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Item type value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetItemType(id)

	def New(self, name:str) -> int:
		"""
		Creates a new E³.series project.

		:param name: Path and  name of the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.series project was created |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.New(name)

	def Open(self, name:str) -> int:
		"""
		Opens an E³.series project or connects to an already open E³.series project.

		:param name: Path and file name of an. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.series project was opened |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Open(name)

	def ExportDrawing(self, name:str, shtids:list[int], options:int) -> int:
		"""
		Exports items to a drawing file.

		:param name: Path and name of the export drawing file
		:type str: str
		:param shtids: An array of identifiers of items to be exported passed into the function
		:type list[int]: list[int]
		:param options: Export option flags
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | Items are exported to a drawing file however it contains duplicate part identifier values, Available since v2018-19.46, v2019-20.28 and v2020-21.12 |
		| 1 | Items are exported to a drawing file |
		| 0 | Error has occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.ExportDrawing(name, shtids, options)
		return ret[0]

	def ImportDrawing(self, name:str, unique:int, posx:float=-950309, posy:float=-950309) -> int:
		"""
		Imports a drawing file into the project.

		:param name: Path and file name of the import file
		:type str: str
		:param unique: Indicates whether new sheets will be renumbered with unique names. If the value is 0, new sheets will not be renumbered with unique names. If the value is greater than 0, new sheets will be renumbered with unique names if necessary
		:type int: int
		:param posx: Placement reference point of the file contents on the x-axis of the sheet. 50309, defaults to -950309
		:type float: float
		:param posy: Placement reference point of the file contents on the y-axis of the sheet. 50309, defaults to -950309
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 5 | Drawing imported however it contains duplicate part identifier values, Available since v2018-19.46, v2019-20.28 and v2020-21.12 |
		| 4 | Drawing imported however the XML project structure is missing or differs from the project structure |
		| 0 | Drawing imported into the project or no license available |
		| -1 | No project open, part file could not be read or the part file does not include a sheet border |
		| -2 | Error occurred |
		| -3 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ImportDrawing(name, unique, posx, posy)

	def LoadPart(self, name:str, version:str, unique:int) -> int:
		"""
		Loads a subcircuit from the database into the project.

		:param name: Name of the database subcircuit component
		:type str: str
		:param version: Version of the database subcircuit component. If version value is empty, the version is set to 1
		:type str: str
		:param unique: Indicates whether new sheets will be renumbered with unique names. If the value is 0, new sheets will not be renumbered with unique names. If the value is greater than 0, new sheets will be renumbered with unique names if necessary
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 5 | Subcircuit loaded however it contains duplicate part identifier values, Available since v2018-19.46, v2019-20.28 and v2020-21.12 |
		| 4 | Subcircuit loaded however the XML project structure is missing or differs |
		| 2 | Subcircuit not found in database |
		| 1 | Subcircuit file not found |
		| 0 | Subcircuit loaded into the project or no license available |
		| -1 | No project open or subcircuit file could not be read |
		| -2 | Error occurred |
		| -3 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.LoadPart(name, version, unique)

	def GetName(self) -> str:
		"""
		Gets the name of the project.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Project name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def GetPath(self) -> str:
		"""
		Gets the system path of the project.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Project system path |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPath()

	def GetType(self) -> str:
		"""
		Gets the project's file name extension.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| ".&lt;File Extension&gt;" | Project file name extension |
		| "&lt;Empty&gt;" | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetType()

	def Save(self) -> int:
		"""
		Saves the E³.series project to the current path and file name.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Project saved or E³.redliner is in use  or no project open |
		| 1 | Error saving multi-user project |
		| 2 | Project is read-only |
		| 3 | External document has been closed without saving its data, Available since v2018-19.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Save()

	def SaveAs(self, name:str, compressed:bool=True) -> int:
		"""
		Saves the E³.series project with a new path and file name.

		:param name: Path and name of the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project file
		:type str: str
		:param compressed: Indicates whether the project file should be compressed. If 1, the project will be compressed. If 0, the project will not be compressed., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | E³.series project was opened |
		| -1 | No project open |
		| -2 | Project could not be saved |
		| -3 | E³.redliner in use and name does not have an extension of "e3n", Available since v2016-17.00 |
		| -4 | External document closed without saving the data, Available since v2018-19.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SaveAs(name, compressed)

	def Close(self) -> int:
		"""
		Closes the E³.series project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Error occurred |
		| 0 | Project is closed or no project was open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Close()

	def IsChanged(self) -> int:
		"""
		Gets the number of changes in the project since it was last saved.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of changes in the project |
		| 0 | No changes in the project or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsChanged()

	def CreateSheetObject(self) -> Sheet:
		"""
		Creates an e3Sheet object.

		:return:
		Type: Sheet

		Available since E3.series TLB-Versions: 8.50
		"""
		return Sheet(self._obj.CreateSheetObject())

	def GetSheetCount(self) -> int:
		"""
		Gets the number of project sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheets |
		| 0 | No sheets or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSheetCount()

	def GetSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet items in ids |
		| 0 | No sheets or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateDeviceObject(self) -> Device:
		"""
		Creates an e3Device object.

		:return:
		Type: Device

		Available since E3.series TLB-Versions: 8.50
		"""
		return Device(self._obj.CreateDeviceObject())

	def GetAllDeviceCount(self) -> int:
		"""
		Gets the number of the project's devices.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of devices |
		| 0 | No devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAllDeviceCount()

	def GetAllDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's devices.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of device identifiers in ids |
		| 0 | No devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAllDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetDeviceCount(self) -> int:
		"""
		Gets the number of the project's devices.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of devices |
		| 0 | No devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDeviceCount()

	def GetDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's normal devices.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of device identifiers in ids |
		| 0 | No devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCableCount(self) -> int:
		"""
		Gets the number of the project's cables.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cables |
		| 0 | No cables or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCableCount()

	def GetCableIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's cables.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of cable identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cable identifiers in ids |
		| 0 | No cables or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCableIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetBlockCount(self) -> int:
		"""
		Gets the number of the project's blocks.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of blocks |
		| 0 | No blocks or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockCount()

	def GetBlockIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's blocks.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of block identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of block identifiers in ids |
		| 0 | No block or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetBlockIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetConnectorCount(self) -> int:
		"""
		Gets the number of the project's connectors.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connectors |
		| 0 | No connectors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectorCount()

	def GetConnectorIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's connectors.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connector identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connector identifiers in ids |
		| 0 | No connector or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetConnectorIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTerminalCount(self) -> int:
		"""
		Gets the number of the project's terminals.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of terminals |
		| 0 | No terminals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTerminalCount()

	def GetTerminalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's terminals.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of terminals identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of terminal items in ids |
		| 0 | No terminals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTerminalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateComponentObject(self) -> Component:
		"""
		Creates an e3Component object.

		:return:
		Type: Component

		Available since E3.series TLB-Versions: 8.50
		"""
		return Component(self._obj.CreateComponentObject())

	def GetAllComponentCount(self) -> int:
		"""
		Gets the number of the project's normal and cable components.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of normal and cable components |
		| 0 | No normal and cable components or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAllComponentCount()

	def GetAllComponentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's normal components and cable types.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of component and cable type identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of components and cable type identifiers in ids |
		| 0 | No component and cable type items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAllComponentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetComponentCount(self) -> int:
		"""
		Gets the number of the project's components.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of components |
		| 0 | No components or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetComponentCount()

	def GetComponentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's components.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of component identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of component identifiers in ids |
		| 0 | No components or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetComponentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCableTypeCount(self) -> int:
		"""
		Gets the number of the project's normal components and cable types.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of normal components and cable types |
		| 0 | No normal components and cable types or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCableTypeCount()

	def GetCableTypeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's cable types.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of cable type identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cable type identifiers in ids |
		| 0 | No cable type items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetCableTypeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreatePinObject(self) -> Pin:
		"""
		Creates an e3Pin object.

		:return:
		Type: Pin

		Available since E3.series TLB-Versions: 8.50
		"""
		return Pin(self._obj.CreatePinObject())

	def CreateGraphObject(self) -> Graph:
		"""
		Creates an e3Graph object.

		:return:
		Type: Graph

		Available since E3.series TLB-Versions: 8.50
		"""
		return Graph(self._obj.CreateGraphObject())

	def CreateSymbolObject(self) -> Symbol:
		"""
		Creates an e3Symbol object.

		:return:
		Type: Symbol

		Available since E3.series TLB-Versions: 8.50
		"""
		return Symbol(self._obj.CreateSymbolObject())

	def GetSymbolCount(self) -> int:
		"""


		:return:
		Type: int

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolCount()

	def GetSymbolIds(self, symnam:str="", level:int=-1, view:int=-1) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's symbols.

		:param symnam: Database symbol name filter. Default value is "<Empty>", defaults to ""
		:type str: str
		:param level: Placed symbol level filter., defaults to -1
		:type int: int
		:param view: Placed symbol view number filter., defaults to -1
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol items in ids |
		| 0 | No symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolIds(dummy, symnam, level, view)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateFieldObject(self) -> Field:
		"""
		Creates an e3Field object.

		:return:
		Type: Field

		Available since E3.series TLB-Versions: 8.50
		"""
		return Field(self._obj.CreateFieldObject())

	def GetFieldCount(self) -> int:
		"""
		Gets the number of the project's fields.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of fields |
		| 0 | No fields or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFieldCount()

	def GetFieldIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's field items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of field item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of field item identifiers in ids |
		| 0 | No field items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetFieldIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetFieldTextTemplate(self) -> str:
		"""
		Gets the value of the field text template symbol setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Template&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFieldTextTemplate()

	def SetFieldTextTemplate(self, newname:str) -> str:
		"""
		Sets the value of the field text template symbol setting.

		:param newname: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Template&gt;" | Previous setting value |
		| "&lt;Empty&gt;" | Previous setting had no value or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFieldTextTemplate(newname)

	def CreateBundleObject(self) -> Bundle:
		"""
		Creates an e3Bundle object.

		:return:
		Type: Bundle

		Available since E3.series TLB-Versions: 8.50
		"""
		return Bundle(self._obj.CreateBundleObject())

	def GetBundleCount(self) -> int:
		"""
		Gets the number of the project's bundles.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of bundles |
		| 0 | No bundles or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBundleCount()

	def GetBundleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's bundles.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of bundle identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of bundle identifiers in ids |
		| 0 | No bundles or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetBundleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateTextObject(self) -> Text:
		"""
		Creates an e3Text object.

		:return:
		Type: Text

		Available since E3.series TLB-Versions: 8.50
		"""
		return Text(self._obj.CreateTextObject())

	def CreateAttributeObject(self) -> Attribute:
		"""
		Creates an e3Attribute object.

		:return:
		Type: Attribute

		Available since E3.series TLB-Versions: 8.50
		"""
		return Attribute(self._obj.CreateAttributeObject())

	def GetAttributeCount(self) -> int:
		"""
		Gets the number of the project's attributes.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attribute found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeCount()

	def GetAttributeIds(self, attnam:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes assigned to the project.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied. All attribute names are supplied if attnam is an empty string. The default string value is empty, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeIds(dummy, attnam)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def AddAttributeValue(self, name:str, value:str) -> int:
		"""
		Adds an attribute to the project.

		:param name: Name of the new attribute
		:type str: str
		:param value: Value of the new attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new attribute |
		| 0 | No project open or an error occurred |
		| -1 | value string too long, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddAttributeValue(name, value)

	def GetAttributeValue(self, name:str) -> str:
		"""
		Gets the project's specified attribute value.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Attribute value supplied |
		| "&lt;Empty&gt;" | Attribute value could not be found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeValue(name)

	def SetAttributeValue(self, name:str, value:str) -> int:
		"""
		Sets the project's specified attribute value.

		:param name: Name of the attribute
		:type str: str
		:param value: Value of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of attribute |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeValue(name, value)

	def DeleteAttribute(self, name:str) -> int:
		"""
		Removes an attribute from the project.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Attribute was removed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttribute(name)

	def HasAttribute(self, name:str) -> int:
		"""
		Gets the number of the project's specified attributes.

		:param name: Name of the attribute
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of attributes found |
		| 0 | No attributes found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.HasAttribute(name)

	def CreateConnectionObject(self) -> Connection:
		"""
		Creates an e3Connection object.

		:return:
		Type: Connection

		Available since E3.series TLB-Versions: 8.50
		"""
		return Connection(self._obj.CreateConnectionObject())

	def GetConnectionCount(self) -> int:
		"""
		Gets the number of the project's connections.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connections |
		| 0 | No connections or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectionCount()

	def GetConnectionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's connections.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connection identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connection identifiers in ids |
		| 0 | No connections or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetConnectionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAllConnectionCount(self, flags:int=0) -> int:
		"""
		Gets the number of the project's connections and connection views.

		:param flags: Connection filter., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connections |
		| 0 | No connections or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAllConnectionCount(flags)

	def GetAllConnectionIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's connections.

		:param flags: Connection filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connection identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connection identifiers in ids |
		| 0 | No connections or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAllConnectionIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateNetSegmentObject(self) -> NetSegment:
		"""
		Creates an e3NetSegment object.

		:return:
		Type: NetSegment

		Available since E3.series TLB-Versions: 8.50
		"""
		return NetSegment(self._obj.CreateNetSegmentObject())

	def CreateSignalObject(self) -> Signal:
		"""
		Creates an e3Signal object.

		:return:
		Type: Signal

		Available since E3.series TLB-Versions: 8.50
		"""
		return Signal(self._obj.CreateSignalObject())

	def GetSignalCount(self) -> int:
		"""
		Gets the number of the project's signals.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of signals |
		| 0 | No signals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSignalCount()

	def GetSignalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's signals.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of signals identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of signal items in ids |
		| 0 | No signals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSignalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateModuleObject(self) -> Module:
		"""
		Creates an e3Module object.

		:return:
		Type: Module

		Available since E3.series TLB-Versions: 8.50
		"""
		return Module(self._obj.CreateModuleObject())

	def GetRootModuleId(self) -> int:
		"""
		Gets the root module item identifier.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Root module item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetRootModuleId()

	def GetModuleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's modules.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of module identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of module identifiers in ids |
		| 0 | No modules or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetModuleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateModulePortObject(self) -> ModulePort:
		"""
		Creates an e3Module port object.

		:return:
		Type: ModulePort

		Available since E3.series TLB-Versions: 8.50
		"""
		return ModulePort(self._obj.CreateModulePortObject())

	def ExportForeign(self, format:str, file:str) -> int:
		"""
		Exports items into file formats not being directly supported by E³.series.

		:param format: Format of the export file
		:type str: str
		:param file: Path and name of the export file or connection string to the database
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | file value is "&lt;Empty&gt;" |
		| 1 | file is invalid |
		| 0 | Items are exported, no project is open or format is invalid |
		| &lt; 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportForeign(format, file)

	def GetTextCount(self) -> int:
		"""
		Gets the number of the project's text items.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text items |
		| 0 | No text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTextCount()

	def GetTextIds(self, txttyp:int=0, search_string:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's text items.

		:param txttyp: Text type filter. Only text identifiers with this Text Type will be supplied. All text identifiers are supplied if txttyp is 0. The default value 0, defaults to 0
		:type int: int
		:param search_string: Text value filter. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text identifiers in ids |
		| 0 | No text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTextIds(dummy, txttyp, search_string)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGraphTextCount(self) -> int:
		"""
		Gets the number of the project's graphic texts.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of graphic texts |
		| 0 | No graphic texts or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphTextCount()

	def CreateExternalDocumentObject(self) -> ExternalDocument:
		"""
		Creates an e3ExternalDocument object.

		:return:
		Type: ExternalDocument

		Available since E3.series TLB-Versions: 8.50
		"""
		return ExternalDocument(self._obj.CreateExternalDocumentObject())

	def GetExternalDocumentCount(self) -> int:
		"""
		Gets the number of the project's external documents.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of external documents |
		| 0 | No external documents or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetExternalDocumentCount()

	def GetExternalDocumentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's external documents.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of external document identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of external document identifiers in ids |
		| 0 | No external documents or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetExternalDocumentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGraphLevel(self) -> int:
		"""
		Gets the value of the graphic level setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..256 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphLevel()

	def SetGraphLevel(self, value:int) -> int:
		"""
		Sets the value of the graphic level setting.

		:param value: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..256 | Previous setting value |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphLevel(value)

	def GetGraphColour(self) -> int:
		"""
		Gets the value of the graphic color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Color value, See Colors for possible values |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphColour()

	def SetGraphColour(self, value:int) -> int:
		"""
		Sets the value of the graphic color setting.

		:param value: Setting value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or an error occurred |
		| -1 | Previous color value was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphColour(value)

	def GetGraphWidth(self) -> float:
		"""
		Gets the value of the graphic line width setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphWidth()

	def SetGraphWidth(self, value:float) -> float:
		"""
		Sets the value of the graphic line width setting.

		:param value: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value was 0.0 or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphWidth(value)

	def GetGraphArrows(self) -> int:
		"""
		Gets the value of the graphic arrow setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..3 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphArrows()

	def SetGraphArrows(self, value:int) -> int:
		"""
		Sets the value of the graphic arrow setting.

		:param value: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Previous setting value |
		| 0 | Previous setting value was no arrows or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphArrows(value)

	def GetGraphStyle(self) -> int:
		"""
		Gets the value of the graphic line style setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Style value, See Line Style for possible values |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphStyle()

	def SetGraphStyle(self, value:int) -> int:
		"""
		Sets the value of the graphic line style setting.

		:param value: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous setting value, See Line Style for possible values |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphStyle(value)

	def GetGraphTextFontName(self) -> str:
		"""
		Gets the value of the graphic text font name setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;FontName&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphTextFontName()

	def SetGraphTextFontName(self, newname:str) -> str:
		"""
		Sets the value of the graphic text font name setting.

		:param newname: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;FontName&gt;" | Previous setting value |
		| "&lt;Empty&gt;" | No previous setting value or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphTextFontName(newname)

	def GetGraphTextStyle(self) -> int:
		"""
		Gets the value of the graphic text font style setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Setting value supplied or no project open |
		| 1..7 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphTextStyle()

	def SetGraphTextStyle(self, value:int) -> int:
		"""
		Sets the value of the graphic text font style setting.

		:param value: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..7 | Previous setting value |
		| 0 | Previous setting value or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphTextStyle(value)

	def GetGraphTextMode(self) -> int:
		"""
		Gets the value of the graphic text ratio setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Setting value supplied |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphTextMode()

	def SetGraphTextMode(self, value:int) -> int:
		"""
		Sets the value of the graphic text ratio setting.

		:param value: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Setting value supplied |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphTextMode(value)

	def GetGraphTextSize(self) -> float:
		"""
		Gets the value of the graphic text size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphTextSize()

	def SetGraphTextSize(self, value:float) -> float:
		"""
		Sets the value of the graphic text size setting.

		:param value: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphTextSize(value)

	def GetGraphTextColour(self) -> int:
		"""
		Gets the value of the graphic text color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Color value, See Colors for possible values |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphTextColour()

	def SetGraphTextColour(self, value:int) -> int:
		"""
		Sets the value of the graphic text color setting.

		:param value: Setting value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or no project open |
		| -1 | Previous color value was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphTextColour(value)

	def GetGraphTextLevel(self) -> int:
		"""
		Gets the value of the graphic text level setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..256 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphTextLevel()

	def SetGraphTextLevel(self, value:int) -> int:
		"""
		Sets the value of the graphic text level setting.

		:param value: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..256 | Previous setting value |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphTextLevel(value)

	def GetGraphHatchPattern(self) -> tuple[int, float, float]:
		"""
		Gets the value of the graphic hatch pattern setting.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | angle1 | float | Angle setting value in degrees of a hatch line if a line or cross hatch pattern is in use passed out of the function |
		| 2 | angle2 | float | Angle setting value in degrees of a hatch line if a cross hatch pattern is in use passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 0, 1, 2 or 4 | Pattern setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetGraphHatchPattern(dummy, dummy)

	def SetGraphHatchPattern(self, value:int, angle1:float, angle2:float) -> int:
		"""
		Sets the value of the graphic hatch pattern setting.

		:param value: Hatch pattern setting value to apply
		:type int: int
		:param angle1: Angle setting value in degrees of a hatch line if a line or cross hatch pattern is in use to apply
		:type float: float
		:param angle2: Angle setting value in degrees of a hatch line if a cross hatch pattern is in use to apply
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1, 2 or 4 | Previous hatch pattern setting value |
		| 0 | Previous hatch pattern setting value was no hatch pattern or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphHatchPattern(value, angle1, angle2)

	def GetGraphHatchStyle(self) -> int:
		"""
		Gets the value of the graphic hatch line style setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Style value, See Line Style for possible values |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphHatchStyle()

	def SetGraphHatchStyle(self, value:int) -> int:
		"""
		Sets the value of the graphic hatch line style setting.

		:param value: Setting value to apply. See Line Style for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous setting value, See Line Style for possible values |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphHatchStyle(value)

	def GetGraphHatchWidth(self) -> float:
		"""
		Gets the value of the graphic hatch line width setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphHatchWidth()

	def SetGraphHatchWidth(self, value:float) -> float:
		"""
		Sets the value of the graphic hatch line width setting.

		:param value: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value was 0.0 or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphHatchWidth(value)

	def GetGraphHatchDistance(self) -> float:
		"""
		Gets the value of the graphic hatch distance setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.1 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphHatchDistance()

	def SetGraphHatchDistance(self, value:float) -> float:
		"""
		Sets the value of the graphic hatch distance setting.

		:param value: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &lt;= 0.1 | Previous setting value |
		| 0.0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphHatchDistance(value)

	def GetGraphHatchColour(self) -> int:
		"""
		Gets the value of the graphic hatch color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Color value, See Colors for possible values |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphHatchColour()

	def SetGraphHatchColour(self, value:int) -> int:
		"""
		Sets the value of the graphic hatch color setting.

		:param value: Setting value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or an error occurred |
		| -1 | Previous color value was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphHatchColour(value)

	def GetMeasure(self) -> str:
		"""
		Gets the value of measurement setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| &lt;"Measure"&gt; | Setting value supplied |
		| "&lt;Empty&gt;" | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMeasure()

	def SetMeasure(self, measure:str) -> int:
		"""
		Sets the value of measurement setting.

		:param measure: Setting value to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetMeasure(measure)

	def GetSelectedSheetCount(self) -> int:
		"""
		Gets the number of the sheets selected.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected sheets |
		| 0 | No selected sheets or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedSheetCount()

	def GetSelectedSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the sheets with selected contents.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet items in ids |
		| 0 | No sheets with selected contents or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedDeviceCount(self) -> int:
		"""
		Gets the number of the devices selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of devices |
		| 0 | No devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedDeviceCount()

	def GetSelectedDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the normal devices selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of normal device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of normal device identifiers in ids |
		| 0 | No selected normal devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedCableCount(self) -> int:
		"""
		Gets the number of the cables selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected cables |
		| 0 | No selected cables or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedCableCount()

	def GetSelectedCableIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the cables selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of cable identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cable identifiers in ids |
		| 0 | No selected cables or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedCableIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedTerminalCount(self) -> int:
		"""
		Gets the number of the terminals selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected terminals |
		| 0 | No selected terminals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedTerminalCount()

	def GetSelectedTerminalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the terminals selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of terminal identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of terminal identifiers in ids |
		| 0 | No selected terminals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedTerminalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedConnectorCount(self) -> int:
		"""
		Gets the number of the connectors selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected connectors |
		| 0 | No selected connectors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedConnectorCount()

	def GetSelectedConnectorIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the connectors selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connector identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connector identifiers in ids |
		| 0 | No selected connectors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedConnectorIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedBlockCount(self) -> int:
		"""
		Gets the number of the blocks selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected blocks |
		| 0 | No selected blocks or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedBlockCount()

	def GetSelectedBlockIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the blocks selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of block identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of block identifiers in ids |
		| 0 | No selected blocks or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedBlockIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedAllDeviceCount(self) -> int:
		"""
		Gets the number of the devices selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected devices |
		| 0 | No selected devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedAllDeviceCount()

	def GetSelectedAllDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the devices selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of device identifiers in ids |
		| 0 | No selected devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedAllDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedGraphCount(self) -> int:
		"""
		Gets the number of the graphics selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected graphics |
		| 0 | No selected graphics or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedGraphCount()

	def GetSelectedGraphIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the graphic items selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of graphic item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of graphic item identifiers in ids |
		| 0 | No selected graphic items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedGraphIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedTextCount(self) -> int:
		"""
		Gets the number of the texts selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected texts |
		| 0 | No selected texts or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedTextCount()

	def GetSelectedTextIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the text items selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text identifiers in ids |
		| 0 | No selected text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedTextIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedSymbolCount(self) -> int:
		"""
		Gets the number of the symbols selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected symbols |
		| 0 | No selected symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedSymbolCount()

	def GetSelectedSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the symbols selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol identifiers in ids |
		| 0 | No selected symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedBundleCount(self) -> int:
		"""
		Gets the number of the bundles selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected bundles |
		| 0 | No selected bundles or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedBundleCount()

	def GetSelectedBundleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the bundles selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of bundle identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of bundle identifiers in ids |
		| 0 | No selected bundles or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedBundleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedConnectionCount(self, flags:int=0) -> int:
		"""
		Gets the number of the connections selected on sheets.

		:param flags: , defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected connections |
		| 0 | No selected connections or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedConnectionCount(flags)

	def GetSelectedConnectionIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the connections selected on sheets.

		:param flags: Connection filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connection identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cable identifiers in ids |
		| 0 | No selected cables or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedConnectionIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedNetSegmentCount(self) -> int:
		"""
		Gets the number of the net segments selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected net segments |
		| 0 | No selected net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedNetSegmentCount()

	def GetSelectedNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the net segments selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of net segment item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net segment item identifiers in ids |
		| 0 | No selected net segment items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedSignalCount(self) -> int:
		"""
		Gets the number of the signals selected on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of selected signals |
		| 0 | No selected signals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSelectedSignalCount()

	def GetSelectedSignalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the signals selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of signal identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of signal identifiers in ids |
		| 0 | No selected signals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedSignalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetDeviceNameSeparator(self) -> str:
		"""
		Gets the value of the device designation name separator setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Separator&gt;" | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDeviceNameSeparator()

	def SetDeviceNameSeparator(self, newsep:str) -> str:
		"""
		Sets the value of the device designation name separator setting.

		:param newsep: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Separator&gt;" | Previous setting value |
		| "&lt;Empty&gt;" | No previous setting value was assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeviceNameSeparator(newsep)

	def GetLocationSeparator(self) -> str:
		"""
		Gets the value of the location separator setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Separator&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLocationSeparator()

	def SetLocationSeparator(self, newsep:str) -> str:
		"""
		Sets the value of the location separator setting.

		:param newsep: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Separator&gt;" | Previous setting value |
		| "&lt;Empty&gt;" | Previous setting has no value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLocationSeparator(newsep)

	def GetAssignmentSeparator(self) -> str:
		"""
		Gets the value of the higher level assignment separator setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Separator&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAssignmentSeparator()

	def SetAssignmentSeparator(self, newsep:str) -> str:
		"""
		Sets the value of the higher level assignment separator setting.

		:param newsep: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Separator&gt;" | Previous setting value |
		| "&lt;Empty&gt;" | Previous setting has no value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAssignmentSeparator(newsep)

	def GetLanguages(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the values of the language name settings.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | languages | tuple[int,...] | Array of language name settings passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Number of elements in languages |
		| 0 | No languages set or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, languages = self._obj.GetLanguages(dummy)
		languages = languages[1:] if type(languages) == tuple and len(languages) > 0 else tuple()
		return ret, languages

	def SetLanguages(self, languages:list[int]) -> int:
		"""
		Sets the values of the language name settings.

		:param languages: Array of language name settings to apply passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Settings applied or an error occurred |
		| &lt; 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetLanguages(languages)
		return ret[0]

	def GetDisplayConnectionMode(self) -> int:
		"""
		Gets the project's connection display mode status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connection display mode status is  edit |
		| 0 | Connection display mode status is normal or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayConnectionMode()

	def SetDisplayConnectionMode(self, value:int) -> int:
		"""
		Sets the project's connection display mode status.

		:param value: Display mode value. If 1, display mode status is edit. If 0, display mode status is normal
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous connection display mode status was edit |
		| 0 | Previous connection display mode status was normal or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayConnectionMode(value)

	def CreateVariantObject(self) -> Variant:
		"""
		Creates an e3Variant object.

		:return:
		Type: Variant

		Available since E3.series TLB-Versions: 8.50
		"""
		return Variant(self._obj.CreateVariantObject())

	def GetVariantCount(self) -> int:
		"""
		Gets the number of the project's variants.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of variants |
		| 0 | No variants or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetVariantCount()

	def GetVariantIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's variants.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of variant item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of variant items in ids |
		| 0 | No variants or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetVariantIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetActiveVariantId(self) -> int:
		"""
		Gets the identifier of the project's currently active variant.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No project open |
		| 1 | No variant is active or an error occurred |
		| 2 | All variants are active |
		| 3 | More than one variant is active |
		| &gt;3 | Active variant identifier if one variant is active |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetActiveVariantId()

	def SetActiveVariantId(self, vari:int) -> int:
		"""
		Sets the project's active variant.

		:param vari: Variant item identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Active variant applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetActiveVariantId(vari)

	def CreateOptionObject(self) -> Option:
		"""
		Creates an e3Option object.

		:return:
		Type: Option

		Available since E3.series TLB-Versions: 8.50
		"""
		return Option(self._obj.CreateOptionObject())

	def GetOptionCount(self) -> int:
		"""
		Gets the number of the project's options.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of options |
		| 0 | No options or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOptionCount()

	def GetOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's options.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of option item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of option items in ids |
		| 0 | No options or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetActiveOptionCount(self) -> int:
		"""
		Gets the number of the project's active variants and options.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of active variants and options |
		| 0 | No active variants and options or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetActiveOptionCount()

	def GetActiveOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's currently active options.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of active option item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of active option items in ids |
		| 0 | No options are active or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetActiveOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetActiveOptionIds(self, ids:list[int]) -> int:
		"""
		Sets the project's currently active options.

		:param ids: Array of option and variant item identifiers passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Option and variant items set to active |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetActiveOptionIds(ids)
		return ret[0]

	def ActivateOptionIds(self, ids:list[int]) -> int:
		"""
		Sets a subset of the project's options to active.

		:param ids: Array of option item identifiers passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Options activated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.ActivateOptionIds(ids)
		return ret[0]

	def DeactivateOptionIds(self, ids:list[int]) -> int:
		"""
		Sets a subset of the project's options to inactive.

		:param ids: Array of option item identifiers passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Options deactivated |
		| 0 | Error occurred or not all options could be deactivated |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.DeactivateOptionIds(ids)
		return ret[0]

	def CreateOutlineObject(self) -> Outline:
		"""
		Creates an e3Outline object.

		:return:
		Type: Outline

		Available since E3.series TLB-Versions: 8.50
		"""
		return Outline(self._obj.CreateOutlineObject())

	def PrintOut(self, scale:float, shtids:list[int]) -> int:
		"""
		Prints project sheets on the current printer.

		:param scale: Scale factor of the project sheets
		:type float: float
		:param shtids: Array of identifiers of sheets to be printed passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Print job sent to printer |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.PrintOut(scale, shtids)
		return ret[0]

	def GetCurrentUserNames(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the names of all users currently connected to the multi-user server.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | names | tuple[str,...] | Array of multi-user user names passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of multi-user user names in names |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, names = self._obj.GetCurrentUserNames(dummy)
		names = names[1:] if type(names) == tuple and len(names) > 0 else tuple()
		return ret, names

	def NewMultiuser(self, name:str, description:str, filename:str, checkin:int, unlock:int=0) -> int:
		"""
		Creates a multi-user project.

		:param name: Project name
		:type str: str
		:param description: Project description
		:type str: str
		:param filename: Project file path and name
		:type str: str
		:param checkin: Indicates the checked status of project sheets. If 1, All sheets are checked in. If 0, All sheets are checked out
		:type int: int
		:param unlock: Indicates whether the project can be immediately opened by other users. If 1, the project can be immediately opened by other users. If 0. the project cannot be opened by other users until it is closed., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | New multi-user project identifier |
		| 0 | Error occurred |
		| -1 | No multi-user license, Available since v2019-20.00 |
		| -2 | No multi-user service is available, Available since v2019-20.00 |
		| -3 | A project is already opened, Available since v2019-20.00 |
		| -4 | Project is locked, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.NewMultiuser(name, description, filename, checkin, unlock)

	def OpenMultiuser(self, name:str) -> int:
		"""
		Opens a multi-user project.

		:param name: Multi-user project name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Multi-user project identifier |
		| 0 | Error occurred |
		| -1 | No multi-user license, Available since v2019-20.00 |
		| -2 | No multi-user service is available, Available since v2019-20.00 |
		| -3 | name is invalid, Available since v2019-20.00 |
		| -4 | Project is in exclusive mode, project is locked following creation or no user permissions are                       grantedAvailable since v2019-20.00 |
		| -5 | A project is already open, Available since v2019-20.00 |
		| -6 | Project is locked, Available since v2019-20.00 |
		| -7 | No project conversion possible in E³.series Viewer version, Available since v2019-20.00 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.OpenMultiuser(name)

	def ResetHighlight(self) -> int:
		"""
		Resets all highlighted items to their normal display mode.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ResetHighlight()

	def GetLineColour(self) -> int:
		"""
		Gets the value of the connect line color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Color value, See Colors for possible values |
		| -1 | Automatic color or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLineColour()

	def SetLineColour(self, newcol:int) -> int:
		"""
		Sets the value of the connect line color setting.

		:param newcol: Setting value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or an error occurred |
		| -1 | Previous color value was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLineColour(newcol)

	def GetLineStyle(self) -> int:
		"""
		Gets the value of the connect line style setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connect line style value, or no open projectSee Line Style for the value |
		| 2..255 | Connect line style value, See Line Style for possible values |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLineStyle()

	def SetLineStyle(self, newstl:int) -> int:
		"""
		Sets the value of the connect line style setting.

		:param newstl: Setting value to apply. See Line Style for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLineStyle(newstl)

	def SetLineWidth(self, newwid:float) -> int:
		"""
		Sets the value of the connect line width setting.

		:param newwid: Setting value to apply
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLineWidth(newwid)

	def GetLineLevel(self) -> int:
		"""
		Gets the value of the connect line level setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value supplied or no project open |
		| 2..256 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLineLevel()

	def SetLineLevel(self, newlev:int) -> int:
		"""
		Sets the value of the connect line level setting.

		:param newlev: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..256 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLineLevel(newlev)

	def SetBusLineColour(self, newcol:int) -> int:
		"""
		Sets the value of the connect bus line color setting.

		:param newcol: Setting value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or an error occurred |
		| -1 | Previous color value was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBusLineColour(newcol)

	def SetBusLineStyle(self, newstl:int) -> int:
		"""
		Sets the value of the connect bus line style setting.

		:param newstl: Setting value to apply. See Line Style for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBusLineStyle(newstl)

	def SetBusLineWidth(self, newwid:float) -> int:
		"""
		Sets the value of the connect bus line width setting.

		:param newwid: Setting value to apply
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBusLineWidth(newwid)

	def SetBusLineLevel(self, newlev:int) -> int:
		"""
		Sets the value of the connect bus line level setting.

		:param newlev: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBusLineLevel(newlev)

	def GetPartExtension(self, part:str, vers:str) -> tuple[int, float, float, float, float, int, float, float, int]:
		"""
		Gets subcircuit component placement information.

		:param part: Name of a subcircuit in the database or a path and name of the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. part file (.e3p)
		:type str: str
		:param vers: Version of a subcircuit in the database
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xl | float | Lower left position of the maximum rotation on the x-axis passed out of the function |
		| 2 | yl | float | Lower left position of the maximum rotation on the y-axis passed out of the function |
		| 3 | xh | float | Upper right position of the maximum rotation on the x-axis passed out of the function |
		| 4 | yh | float | Upper right position of the maximum rotation on the y-axis passed out of the function |
		| 5 | shtcnt | int | Number of sheets contained in the subcircuit passed out of the function |
		| 6 | xp | float | Placement position relative to the lower left corner of the subcircuit on the x-axis passed out of the function |
		| 7 | yp | float | Placement position relative to the lower left corner of the subcircuit on the y-axis passed out of the function |
		| 8 | subcircuitType | int | Sheet type the subcircuit can be placed on passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Subcircuit information supplied |
		| 1 | Transaction pending |
		| 2 | part file is invalid |
		| 3 | part subcircuit database name is invalid |
		| 4 | Subcircuit version is invalid |
		| 5..9 | Error occurred |
		| 10 | Subcircuit version is invalid |
		| 11 | Subcircuit license is invalid |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetPartExtension(part, vers, dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy)

	def GetGridSize(self) -> float:
		"""
		Gets the value of the grid size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0004 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGridSize()

	def SetGridSize(self, newsize:float) -> float:
		"""
		Sets the value of the graphic size setting.

		:param newsize: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0004 | Previous setting value |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGridSize(newsize)

	def GetTrapSize(self) -> float:
		"""
		Gets the value of the working grid snap size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTrapSize()

	def SetTrapSize(self, newsize:float) -> float:
		"""
		Sets the value of the working grid snap size setting.

		:param newsize: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous setting value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTrapSize(newsize)

	def EnablePointGridDisplay(self) -> int:
		"""
		Displays point grids on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous point grids display status was on |
		| 0 | Previous point grids display status was off or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.EnablePointGridDisplay()

	def DisablePointGridDisplay(self) -> int:
		"""
		Stops displaying point grids on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Point grids no longer displayed |
		| 0 | Displaying point grids is already deactivated or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DisablePointGridDisplay()

	def GetPointGridSize(self) -> float:
		"""
		Gets the value of the grid view points setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPointGridSize()

	def SetPointGridSize(self, newsize:float) -> float:
		"""
		Sets the value of the grid view points setting.

		:param newsize: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous setting value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPointGridSize(newsize)

	def EnableRulerGridDisplay(self) -> int:
		"""
		Displays rulers on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous ruler display status was on |
		| 0 | Previous ruler display status was off or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.EnableRulerGridDisplay()

	def DisableRulerGridDisplay(self) -> int:
		"""
		Stops displaying rulers on sheets.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Rulers no longer displayed |
		| 0 | Displaying rulers is already deactivated or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DisableRulerGridDisplay()

	def GetRulerGridSize(self) -> float:
		"""
		Gets the value of the grid view rules size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetRulerGridSize()

	def SetRulerGridSize(self, newsize:float) -> float:
		"""
		Sets the value of the grid view rules size setting.

		:param newsize: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous setting value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetRulerGridSize(newsize)

	def ExportPDF(self, file:str, shtids:list[int], options:int, password:str="") -> int:
		"""
		Exports sheets as an Adobe Acrobat© PDF file.

		:param file: Path and file name of the export file
		:type str: str
		:param shtids: Array of sheet item identifiers to be exported passed into the function
		:type list[int]: list[int]
		:param options: Export option flags
		:type int: int
		:param password: A password is required if. options. includes values for printing, modifying or copying not allowed, defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheets exported to PDF file, Previous to v2022-23.61 and v2023-24.31, this value is always returned |
		| 0 | Error occurred, Available since v2022-23.61 and v2023-24.31 |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.ExportPDF(file, shtids, options, password)
		return ret[0]

	def ImportDDSC(self, file:str, options:int, level:int=0) -> int:
		"""
		Imports a project file exported from DDS-C design file into E³.series.

		:param file: Path and file name of the export file
		:type str: str
		:param options: Import option flags
		:type int: int
		:param level: Indicates the level BCON texts are imported to as free texts., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | DDS-C design file is imported and a project created |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ImportDDSC(file, options, level)

	def GetGraphTextHeight(self) -> float:
		"""
		Gets the value of the graphic text size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGraphTextHeight()

	def SetGraphTextHeight(self, value:float) -> float:
		"""
		Sets the value of the graphic text size setting.

		:param value: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGraphTextHeight(value)

	def GetFileVersion(self, filename:str) -> int:
		"""
		Gets the version number of a project file.

		:param filename: System path and name of the project file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Version number of the project file |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFileVersion(filename)

	def RepairCheckExtended(self, mode:int) -> int:
		"""
		Internal function for support purposes.

		:param mode: Repair mode to check
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.RepairCheckExtended(mode)

	def GetOutbarText(self, index:int) -> tuple[int, tuple[str,...]]:
		"""
		Gets the lines of text displayed in the E³.series Messages window.

		:param index: Start position of text lines to retrieve
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | lst | tuple[str,...] | Array of displayed text lines passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of displayed text lines |
		| 0 | No displayed text lines or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, lst = self._obj.GetOutbarText(index, dummy)
		lst = lst[1:] if type(lst) == tuple and len(lst) > 0 else tuple()
		return ret, lst

	def GetHighlightColour(self) -> int:
		"""
		Gets the value of the highlight color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Color value, See Colors for possible values |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetHighlightColour()

	def SetHighlightColour(self, colour:int) -> int:
		"""
		Sets the value of the highlight color setting.

		:param colour: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or the setting is already the colour value |
		| -1 | Previous color value was automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetHighlightColour(colour)

	def GetHighlightLineWidth(self) -> float:
		"""
		Gets the value of the highlight line width setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetHighlightLineWidth()

	def SetHighlightLineWidth(self, width:float) -> float:
		"""
		Sets the value of the highlight line width setting.

		:param width: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetHighlightLineWidth(width)

	def GetHighlightKeep(self) -> int:
		"""
		Gets the value of the keep existing highlights when jumping setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetHighlightKeep()

	def SetHighlightKeep(self, keep:int) -> int:
		"""
		Sets the value of the keep existing highlights when jumping setting.

		:param keep: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or the setting is already the keep value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetHighlightKeep(keep)

	def ExportImageItems(self, format:str, version:int, file:str, items:list[int], percentage:int, width:int, height:int, clrdepth:int, gray:int, dpiX:int, dpiY:int, compressionmode:int) -> int:
		"""
		Exports items as an image.

		:param format: Image's format
		:type str: str
		:param version: Not used
		:type int: int
		:param file: Path and file name of the export image
		:type str: str
		:param items: Array of item identifiers to be exported passed into the function. items should always be placed on the same sheet. Area defined by the items will be exported as an image. If only sheets are defined in items, the sheets are exported
		:type list[int]: list[int]
		:param percentage: Specifies the image scaling units for. width. and. height. Percentage values are used if percentage is 1. Pixels values are used if percentage is 0
		:type int: int
		:param width: Width of the image in pixels or percent as defined by. percentage. Value range is between 1 and 500 for percentage and 1 and 50000 for pixels
		:type int: int
		:param height: Height of the image in pixels or percent as defined by. percentage. Value range is between 1 and 500 for percentage and 1 and 50000 for pixels
		:type int: int
		:param clrdepth: Color bit depth of the image
		:type int: int
		:param gray: Specifies the color mode. Image is gray scale if the value is 1. Image is color if the value is 0
		:type int: int
		:param dpiX: Image resolution on the x-axis
		:type int: int
		:param dpiY: Image resolution on the y-axis
		:type int: int
		:param compressionmode: Compression mode depending on. format
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Image is exported |
		| 0 | No project open or an error has occurred |
		| -1 | File extension not defined in file, Introduced in v2018-19.43, v2019-20.20 and v2020-21.01 |
		| -2 | File extension and file format mismatch in file, Introduced in v2018-19.43, v2019-20.20 and v2020-21.01 |
		| -3 | Directory does not exist or is invalid in file, Introduced in v2018-19.43, v2019-20.20 and v2020-21.01 |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.ExportImageItems(format, version, file, items, percentage, width, height, clrdepth, gray, dpiX, dpiY, compressionmode)
		return ret[0]

	def SaveLevelConfiguration(self, file:str) -> int:
		"""
		Saves the project level settings to a visibility settings file.

		:param file: Path and file name to save to
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Level settings saved to file, no open project or file contains an invalid file extension |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SaveLevelConfiguration(file)

	def LoadLevelConfiguration(self, file:str) -> int:
		"""
		Loads the project level settings from a visibility settings file.

		:param file: Path and file name to load from
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Level settings loaded into the project |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.LoadLevelConfiguration(file)

	def GetLevels(self) -> tuple[int, tuple[int,...], tuple[int,...], tuple[int,...], tuple[int,...], tuple[int,...], tuple[int,...], tuple[int,...], tuple[str,...]]:
		"""
		Gets the display levels' values and names.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | symarr | tuple[int,...] | Array of circuit diagram symbol display level values passed out of the function |
		| 2 | sgraarr | tuple[int,...] | Array of symbol graphic display level values passed out of the function |
		| 3 | stxtarr | tuple[int,...] | Array of symbol text display level values passed out of the function |
		| 4 | semtarr | tuple[int,...] | Array of empty symbol text display level values passed out of the function |
		| 5 | graarr | tuple[int,...] | Array of graphic display level values passed out of the function |
		| 6 | txtarr | tuple[int,...] | Array of comment text display level values passed out of the function |
		| 7 | cxarr | tuple[int,...] | Array of connection line display level values passed out of the function |
		| 8 | names | tuple[str,...] | Array of display level names passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Level values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, symarr, sgraarr, stxtarr, semtarr, graarr, txtarr, cxarr, names = self._obj.GetLevels(dummy, dummy, dummy, dummy, dummy, dummy, dummy, dummy)
		symarr = symarr[1:] if type(symarr) == tuple and len(symarr) > 0 else tuple()
		sgraarr = sgraarr[1:] if type(sgraarr) == tuple and len(sgraarr) > 0 else tuple()
		stxtarr = stxtarr[1:] if type(stxtarr) == tuple and len(stxtarr) > 0 else tuple()
		semtarr = semtarr[1:] if type(semtarr) == tuple and len(semtarr) > 0 else tuple()
		graarr = graarr[1:] if type(graarr) == tuple and len(graarr) > 0 else tuple()
		txtarr = txtarr[1:] if type(txtarr) == tuple and len(txtarr) > 0 else tuple()
		cxarr = cxarr[1:] if type(cxarr) == tuple and len(cxarr) > 0 else tuple()
		names = names[1:] if type(names) == tuple and len(names) > 0 else tuple()
		return ret, symarr, sgraarr, stxtarr, semtarr, graarr, txtarr, cxarr, names

	def SetLevels(self, symarr:list[int], sgraarr:list[int], stxtarr:list[int], semtarr:list[int], graarr:list[int], txtarr:list[int], cxarr:list[int], names:list[str]) -> int:
		"""
		Sets the display levels' values and names.

		:param symarr: Array of circuit diagram symbol display level values passed into the function
		:type list[int]: list[int]
		:param sgraarr: Array of symbol graphic display level values passed into the function
		:type list[int]: list[int]
		:param stxtarr: Array of symbol text display level values passed into the function
		:type list[int]: list[int]
		:param semtarr: Array of empty symbol text display level values passed into the function
		:type list[int]: list[int]
		:param graarr: Array of graphic display level values passed into the function
		:type list[int]: list[int]
		:param txtarr: Array of comment text display level values passed into the function
		:type list[int]: list[int]
		:param cxarr: Array of connection line display level values passed into the function
		:type list[int]: list[int]
		:param names: Array of display level names passed into the function
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Level values applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.SetLevels(symarr, sgraarr, stxtarr, semtarr, graarr, txtarr, cxarr, names)
		return ret[0]

	def SetLevel(self, lev:int, onoff:bool) -> int:
		"""
		Sets the display level's active status.

		:param lev: Display level to modify
		:type int: int
		:param onoff: Active status to apply. If 1, the level is displayed. If 0, the level is not displayed
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLevel(lev, onoff)

	def GetDisplayConnectionType(self) -> int:
		"""
		Gets the display connection type status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Display connection type is active |
		| 0 | Display connection type is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayConnectionType()

	def SetDisplayConnectionType(self, newval:int) -> int:
		"""
		Sets the display connection type status.

		:param newval: New display connection type status value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous status was active |
		| 0 | Previous status was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayConnectionType(newval)

	def DeleteMultiuser(self, name:str) -> int:
		"""
		Deletes an existing multi-user project.

		:param name: Name of the multi-user project
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Multi-user project is deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteMultiuser(name)

	def ExportMultiuser(self, file:str, fileformat:int, name:str) -> int:
		"""
		Exports a multi-user project to a file.

		:param file: Path and name of the export file
		:type str: str
		:param fileformat: Indicates whether the export file should be a binary or text file. If 1, the export file is text. If 0, the export file is binary
		:type int: int
		:param name: Name of the multi-user project
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Multi-user project settings exported to file |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportMultiuser(file, fileformat, name)

	def ImportMultiuser(self, file:str, name:str) -> int:
		"""
		Imports a multi-user project from a file.

		:param file: Path and name of the import file
		:type str: str
		:param name: Name of the multi-user project
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Multi-user project settings imported from file |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ImportMultiuser(file, name)

	def DisableSuffixSuppression(self) -> None:
		"""
		Sets the suffix modification setting value to inactive.

		:return:
		No return value.

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DisableSuffixSuppression()

	def EnableSuffixSuppression(self) -> None:
		"""
		Sets the suffix modification setting value to active.

		:return:
		No return value.

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.EnableSuffixSuppression()

	def SetDeviceNameSuffixSeparator(self, newsep:str) -> None:
		"""
		Sets the value of the device designation suffix separator setting.

		:param newsep: Setting value to apply
		:type str: str

		:return:
		No return value.

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeviceNameSuffixSeparator(newsep)

	def GetDeviceNameSuffixSeparator(self) -> str:
		"""
		Gets the value of the device designation suffix separator setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Suffix&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDeviceNameSuffixSeparator()

	def SetLocationSuffixSeparator(self, newsep:str) -> None:
		"""
		Sets the value of the location suffix separator setting.

		:param newsep: Setting value to apply
		:type str: str

		:return:
		No return value.

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLocationSuffixSeparator(newsep)

	def GetLocationSuffixSeparator(self) -> str:
		"""
		Gets the value of the location suffix separator setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Suffix&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value, or no open project |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLocationSuffixSeparator()

	def SetAssignmentSuffixSeparator(self, newsep:str) -> None:
		"""
		Sets the value of the higher level assignment suffix separator setting.

		:param newsep: Setting value to apply
		:type str: str

		:return:
		No return value.

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAssignmentSuffixSeparator(newsep)

	def GetAssignmentSuffixSeparator(self) -> str:
		"""
		Gets the value of the higher level assignment suffix separator setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Suffix&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAssignmentSuffixSeparator()

	def Create(self, name:str) -> int:
		"""
		Creates a new E³.series project.

		:param name: Path and name of the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.series project was created |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Create(name)

	def RecalcWireLength(self, bundlesequence_attribute:str, length_attribute:str) -> int:
		"""
		Determines the project's wire lengths using a routing order.

		:param bundlesequence_attribute: Existing attribute name
		:type str: str
		:param length_attribute: Existing linear measure type attribute name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 or 0 | Wire lengths recalculated or an error occurred |
		| 2..13 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.RecalcWireLength(bundlesequence_attribute, length_attribute)

	def Verify(self, mode:int, logfile:str="") -> int:
		"""
		Identifies possible inconsistencies in the E³.series project.

		:param mode: Verification category
		:type int: int
		:param logfile: System path and name for a log text file. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of possible inconsistencies found |
		| 0 | No possible inconsistencies found or an error occurred |
		| -1 | Error writing to logfile |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Verify(mode, logfile)

	def FindPanelPath(self) -> int:
		"""
		Automatically routes all signals in the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project signals were automatically routed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.FindPanelPath()

	def SetDefaultWire(self, wiregroup:str, wirename:str) -> int:
		"""
		Sets the values of the default wire settings.

		:param wiregroup: Wire group name value setting to apply
		:type str: str
		:param wirename: Wire type name value setting to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Setting values applied |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDefaultWire(wiregroup, wirename)

	def GetDefaultWire(self) -> tuple[int, str, str]:
		"""
		Gets the values of the default wire settings.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | wiregroup | str | Wire group name value setting |
		| 2 | wirename | str | Wire type name value setting |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | 0 is always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetDefaultWire(dummy, dummy)

	def GetItemSheetIds(self, item:int) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of sheets an item is placed on.

		:param item: Item identifier
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers associated with. item |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet identifiers in ids |
		| 0 | No sheets associated with item or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetItemSheetIds(item, dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def IsMultiuserProject(self) -> int:
		"""
		Indicates whether the project is a multi-user project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project is a multi-user project |
		| 0 | Project is not a multi-user project or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsMultiuserProject()

	def ShowPartPreview(self, name:str) -> int:
		"""
		Displays a subcircuit in the E³.series Preview window.

		:param name: Path and name of a part file (.e3p)
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| -1 | No project open |
		| 0 | Subcircuit displayed |
		| 1..6 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ShowPartPreview(name)

	def CreateSlotObject(self) -> Slot:
		"""
		Creates an e3Slot object.

		:return:
		Type: Slot

		Available since E3.series TLB-Versions: 8.50
		"""
		return Slot(self._obj.CreateSlotObject())

	def UpdateConfiguration(self) -> int:
		"""
		Updates the project from a database configuration.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project is updated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateConfiguration()

	def UpdateComponent(self, cmpnam:str, withSymbol:bool=True) -> int:
		"""
		Updates a component of the project from the database.

		:param cmpnam: Component name
		:type str: str
		:param withSymbol: Indicates whether symbols are also updated if the number of pins or nodes differ. If 1, symbols are updated. If 0, symbols are not updated., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component is updated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateComponent(cmpnam, withSymbol)

	def UpdateSymbol(self, symnam:str) -> int:
		"""
		Updates symbols of the project from a symbol of the database.

		:param symnam: Name of a symbol in the database
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Symbols in the project are updated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateSymbol(symnam)

	def UpdateAllComponents(self, withSymbol:bool=True) -> int:
		"""
		Updates the project's components from the database.

		:param withSymbol: Indicates whether symbols are also updated if the number of pins or nodes differ. If 1, symbols are updated. If 0, symbols are not updated., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of updated components |
		| 0 | No components were updated or no open project |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateAllComponents(withSymbol)

	def UpdateAllSymbols(self) -> int:
		"""
		Updates the project's symbols from the database.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of updated symbols |
		| 0 | No symbols were updated or no open project |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateAllSymbols()

	def PurgeUnused(self) -> int:
		"""
		Removes unused items from the E³.series project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Project purged or no project open |
		| -1 | Error purging multi-user project |
		| -2 or -3 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PurgeUnused()

	def GetPurgeUnusedBeforeSave(self) -> int:
		"""
		Gets the value of the purge unused objects from project before saving setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPurgeUnusedBeforeSave()

	def SetPurgeUnusedBeforeSave(self, purge:bool) -> int:
		"""
		Sets the value of the purge unused objects from project before saving setting.

		:param purge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous value was active |
		| 0 | Previous value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPurgeUnusedBeforeSave(purge)

	def GetReloadAttributesOnUpdate(self) -> int:
		"""
		Gets the value of the overwrite attribute values for devices and symbols on update setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetReloadAttributesOnUpdate()

	def SetReloadAttributesOnUpdate(self, reload:bool) -> int:
		"""
		Sets the value of the overwrite attribute values for devices and symbols on update setting.

		:param reload: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting was active |
		| 0 | Previous setting was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetReloadAttributesOnUpdate(reload)

	def GetKeepSymbolTextVisibilityOnUpdate(self) -> int:
		"""
		Gets the value of the keep text visibility for symbols on update setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetKeepSymbolTextVisibilityOnUpdate()

	def SetKeepSymbolTextVisibilityOnUpdate(self, keep:bool) -> int:
		"""
		Sets the value of the keep text visibility for symbols on update setting.

		:param keep: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetKeepSymbolTextVisibilityOnUpdate(keep)

	def GetKeepModelTextVisibilityOnUpdate(self) -> int:
		"""
		Gets the value of the keep text visibility for models on update setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetKeepModelTextVisibilityOnUpdate()

	def SetKeepModelTextVisibilityOnUpdate(self, keep:bool) -> int:
		"""
		Sets the value of the keep text visibility for models on update setting.

		:param keep: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetKeepModelTextVisibilityOnUpdate(keep)

	def GetKeepSymbolTextParametersOnUpdate(self) -> int:
		"""
		Gets the value of the keep other text parameters for symbols on update setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetKeepSymbolTextParametersOnUpdate()

	def SetKeepSymbolTextParametersOnUpdate(self, keep:bool) -> int:
		"""
		Sets the value of the keep other text parameters for symbols on update setting.

		:param keep: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetKeepSymbolTextParametersOnUpdate(keep)

	def GetKeepModelTextParametersOnUpdate(self) -> int:
		"""
		Gets the value of the keep other text parameters for models on update setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetKeepModelTextParametersOnUpdate()

	def SetKeepModelTextParametersOnUpdate(self, keep:bool) -> int:
		"""
		Sets the value of the keep other text parameters for models on update setting.

		:param keep: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetKeepModelTextParametersOnUpdate(keep)

	def GetRestoreChangedPinNamesOnUpdate(self) -> int:
		"""
		Gets the value of the restore changed pin names on update setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetRestoreChangedPinNamesOnUpdate()

	def SetRestoreChangedPinNamesOnUpdate(self, restore:bool) -> int:
		"""
		Sets the value of the restore changed pin names on update setting.

		:param restore: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetRestoreChangedPinNamesOnUpdate(restore)

	def GetKeepConnectorSymbolsOnUpdate(self) -> int:
		"""
		Gets the value of the keep connector symbols on update setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetKeepConnectorSymbolsOnUpdate()

	def SetKeepConnectorSymbolsOnUpdate(self, keep:bool) -> int:
		"""
		Sets the value of the keep connector symbols on update setting.

		:param keep: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetKeepConnectorSymbolsOnUpdate(keep)

	def GetKeepActiveCounterpartOnUpdate(self) -> int:
		"""
		Gets the value of the keep active mating connectors and cavity parts setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetKeepActiveCounterpartOnUpdate()

	def SetKeepActiveCounterpartOnUpdate(self, keep:bool) -> int:
		"""
		Sets the value of the keep active mating connectors and cavity parts setting.

		:param keep: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetKeepActiveCounterpartOnUpdate(keep)

	def GetKeepActiveFittingOnUpdate(self) -> int:
		"""
		Gets the value of the keep active mating and fitting parts on update setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetKeepActiveFittingOnUpdate()

	def SetKeepActiveFittingOnUpdate(self, keep:bool) -> int:
		"""
		Sets the value of the keep active mating and fitting parts on update setting.

		:param keep: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetKeepActiveFittingOnUpdate(keep)

	def GetNewSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new sheet items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new sheet identifiers in ids |
		| 0 | No new sheets or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewAllDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new device items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new device identifiers in ids |
		| 0 | No new devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewAllDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new symbol items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new symbol identifiers in ids |
		| 0 | No new symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new normal device items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new normal device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new normal device identifiers in ids |
		| 0 | No new normal devices or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewCableIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new cable items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new cable identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new cable identifiers in ids |
		| 0 | No new cables or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewCableIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewTerminalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new terminal items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new terminal identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new terminal identifiers in ids |
		| 0 | No new terminals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewTerminalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewConnectorIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new connector items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new connector identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new connector identifiers in ids |
		| 0 | No new connectors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewConnectorIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewBlockIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new block items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new block identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new block identifiers in ids |
		| 0 | No new blocks or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewBlockIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewGraphIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new graphic items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new graphic identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new graphic identifiers in ids |
		| 0 | No new graphic items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewGraphIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewTextIds(self, txttyp:int=0, search_string:str="") -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new text items.

		:param txttyp: Text type filter. Only text identifiers with this Text Type will be supplied. All text identifiers are supplied if txttyp is 0. The default value 0, defaults to 0
		:type int: int
		:param search_string: Text value filter. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new text item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new text identifiers in ids |
		| 0 | No new text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewTextIds(dummy, txttyp, search_string)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewBundleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new bundle items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new bundle identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new bundle identifiers in ids |
		| 0 | No new bundles or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewBundleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewNetSegmentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new net segment items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new net segment identifiers passed out of the function passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new net segment identifiers in ids |
		| 0 | No new net segments or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewNetSegmentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewSignalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new signal items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new signal identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new signal identifiers in ids |
		| 0 | No new signals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewSignalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewConnectionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new connection items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new connection identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new connection identifiers in ids |
		| 0 | No new connections or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewConnectionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetNewCoreIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's new conductor items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of new conductor identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of new conductor identifiers in ids |
		| 0 | No new conductors or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewCoreIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetRedlinedGraphTextIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's E³.redliner text items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of text item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text item identifiers in ids |
		| 0 | No text items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetRedlinedGraphTextIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetRedlinedGraphIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's E³.redliner graphic items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of graphic item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of graphic item identifiers in ids |
		| 0 | No graphic items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetRedlinedGraphIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ConvertMultiByteToWideChar(self, code_page:int) -> int:
		"""
		Converts texts in the project using a Windows code page.

		:param code_page: Windows code page
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ConvertMultiByteToWideChar(code_page)

	def GetDisplayDuctFillSize(self) -> int:
		"""
		Gets the value of the display cable duct fill size setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayDuctFillSize()

	def SetDisplayDuctFillSize(self, newval:bool) -> int:
		"""
		Sets the value of the display cable duct fill size setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayDuctFillSize(newval)

	def GetDisplayDuctDockingPoints(self) -> int:
		"""
		Gets the value of the display cable duct docking point setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayDuctDockingPoints()

	def SetDisplayDuctDockingPoints(self, newval:bool) -> int:
		"""
		Sets the value of the display cable duct docking point setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayDuctDockingPoints(newval)

	def GetDisplayIntExtRepresentation(self) -> int:
		"""
		Gets the value of the display internal / external / jumper / seal representation for nodes setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayIntExtRepresentation()

	def SetDisplayIntExtRepresentation(self, newval:bool) -> int:
		"""
		Sets the value of the display internal / external / jumper / seal representation for nodes setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayIntExtRepresentation(newval)

	def GetDisplayConnectPoints(self) -> int:
		"""
		Gets the value of the mark connect points in connection nets setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..127 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayConnectPoints()

	def SetDisplayConnectPoints(self, newval:int) -> int:
		"""
		Sets the value of the mark connect points in connection nets setting.

		:param newval: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..127 | Previous setting value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayConnectPoints(newval)

	def GetDisplayUnconnectedNodes(self) -> int:
		"""
		Gets the value of the mark unconnected nodes setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayUnconnectedNodes()

	def SetDisplayUnconnectedNodes(self, newval:bool) -> int:
		"""
		Sets the value of the mark unconnected nodes setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayUnconnectedNodes(newval)

	def GetDisplayViewNumbers(self) -> int:
		"""
		Gets the value of the number of view as an extension to the device's device designation setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayViewNumbers()

	def SetDisplayViewNumbers(self, newval:bool) -> int:
		"""
		Sets the value of the number of view as an extension to the device's device designation setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayViewNumbers(newval)

	def GetDisplayRotatedTextAccStandard(self) -> int:
		"""
		Gets the value of the display rotated texts according to standard setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayRotatedTextAccStandard()

	def SetDisplayRotatedTextAccStandard(self, newval:bool) -> int:
		"""
		Sets the value of the display rotated texts according to standard setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayRotatedTextAccStandard(newval)

	def GetDisplayAltCompCode(self) -> str:
		"""
		Gets the value of the alternative text as component code setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text &gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayAltCompCode()

	def SetDisplayAltCompCode(self, newval:str) -> str:
		"""
		Sets the value of the alternative text as component code setting.

		:param newval: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text &gt;" | Previous setting value |
		| "&lt;Empty&gt;" | Previous setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayAltCompCode(newval)

	def GetLastModifiedItems(self, _type:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the last modified items.

		:param _type: Item type filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of item identifiers in ids |
		| 0 | No items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetLastModifiedItems(dummy, _type)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetLastAddedItems(self, _type:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the last added items.

		:param _type: Item type filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of item identifiers in ids |
		| 0 | No items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetLastAddedItems(dummy, _type)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def RemoveUndoInformation(self) -> int:
		"""
		Removes all E³.series undo information for the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Undo information removed |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.RemoveUndoInformation()

	def CreateNetObject(self) -> Net:
		"""
		Creates an e3Net object.

		:return:
		Type: Net

		Available since E3.series TLB-Versions: 8.50
		"""
		return Net(self._obj.CreateNetObject())

	def GetNetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's net items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of net identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of net identifiers in ids |
		| 0 | No nets or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetActiveSheetId(self) -> int:
		"""
		Gets the identifier of the currently active open sheet.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Active sheet identifier |
		| 0 | No sheet is active or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetActiveSheetId()

	def GetAnyAttributeIds(self, attnam:str) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes used within the project.

		:param attnam: Attribute name filter. Only attribute identifiers with this attribute name will be supplied
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attributes passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No assigned attribute identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAnyAttributeIds(attnam, dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def DeleteAttributeDefinition(self, attnam:str) -> int:
		"""
		Deletes a attribute definition from the project.

		:param attnam: Internal name of the attribute definition
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Attribute definition deleted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteAttributeDefinition(attnam)

	def UpdateCompleteProject(self) -> int:
		"""
		Updates all text values in the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateCompleteProject()

	def UpdateTextsInProject(self) -> int:
		"""
		Updates all the free text values in the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateTextsInProject()

	def UpdateAutoShtrefs(self) -> int:
		"""
		Updates all the automatic sheet references' text values in the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateAutoShtrefs()

	def UpdateCores(self) -> int:
		"""
		Updates all the wire and conductors' text values in the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateCores()

	def UpdateConnectionTargets(self) -> int:
		"""
		Updates all the connection targets' text values in the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateConnectionTargets()

	def GetDisplayOptionsColoured(self) -> int:
		"""
		Gets the value of the display elements with variants/options in another color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayOptionsColoured()

	def SetDisplayOptionsColoured(self, newval:int) -> int:
		"""
		Sets the value of the display elements with variants/options in another color setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayOptionsColoured(newval)

	def GetGidOfId(self, id:int) -> str:
		"""
		Gets the global identifier from the identifier of an E³.series item.

		:param id: Item identifier
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the E³.series item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGidOfId(id)

	def GetIdOfGid(self, gid:str) -> int:
		"""
		Gets the identifier from the global identifier of an E³.series item.

		:param gid: Global item identifier
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the E³.series item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetIdOfGid(gid)

	def SetNetSegmentLengthSplittingRule(self, newval:int) -> int:
		"""
		Sets the value of the net segment length splitting rule setting.

		:param newval: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 or 2 | Previous setting value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetNetSegmentLengthSplittingRule(newval)

	def SetNetSegmentAttributeSplittingRule(self, newval:int) -> int:
		"""
		Sets the value of the net segment attribute splitting rule setting.

		:param newval: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 or 3 | Previous setting value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetNetSegmentAttributeSplittingRule(newval)

	def CreateStructureNodeObject(self) -> StructureNode:
		"""
		Creates an e3StructureNode object.

		:return:
		Type: StructureNode

		Available since E3.series TLB-Versions: 8.50
		"""
		return StructureNode(self._obj.CreateStructureNodeObject())

	def GetStructureNodeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's structure nodes.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of structure node identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of structure node items in ids |
		| 0 | No structure nodes or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetStructureNodeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def UpdateLanguageDatabase(self) -> int:
		"""
		Updates the project from a language database.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project is updated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateLanguageDatabase()

	def SetChanged(self, newval:int) -> int:
		"""
		Sets the project's changed status.

		:param newval: New changed state. If 1, the project is set to be in a changed status. If 0, the project is set to be in an unchanged status
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous statuswas changed |
		| 0 | Previous statuswas unchanged or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetChanged(newval)

	def GetActiveSheetTreeID(self) -> int:
		"""
		Gets the identifier of the currently selected project tree with sheet items.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Active project tree identifier |
		| -1 | No project tree with sheets is active |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetActiveSheetTreeID()

	def SetActiveSheetTreeID(self, treeid:int) -> int:
		"""
		Sets the currently selected project tree with sheet items.

		:param treeid: Project tree identifier
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Previous active project tree identifier |
		| 0 | No project tree was active or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetActiveSheetTreeID(treeid)

	def LoadStructureTemplate(self, structure_file:str) -> int:
		"""
		Loads a structure template XML file changing the project tree configuration.

		:param structure_file: Path and file name of an XML file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project tree configuration changed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.LoadStructureTemplate(structure_file)

	def CreateTreeObject(self) -> Tree:
		"""
		Creates an e3Tree object.

		:return:
		Type: Tree

		Available since E3.series TLB-Versions: 8.50
		"""
		return Tree(self._obj.CreateTreeObject())

	def GetTreeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's project tree items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of project tree item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of project tree identifiers in ids |
		| 0 | No project tree items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def UpdateMultiuser(self) -> int:
		"""
		Synchronizes the multi-user project data between the multi-user client and the multi-user server.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Multi-user project data synchronized |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateMultiuser()

	def GetMergeUsingExactCoreConnectionOnImport(self) -> int:
		"""
		Gets the value of the merge using exact conductor connection for import setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMergeUsingExactCoreConnectionOnImport()

	def SetMergeUsingExactCoreConnectionOnImport(self, newval:bool) -> int:
		"""
		Sets the value of the merge using exact conductor connection for import setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetMergeUsingExactCoreConnectionOnImport(newval)

	def PurgeUnplacedPinViews(self) -> int:
		"""
		Removes unplaced pin views from the E³.series project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Pin views purged or no project open |
		| -1 | Error purging multi-user project of unplaced pin views |
		| -2 or -3 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PurgeUnplacedPinViews()

	def SetPurgeUnplacedPinViewsBeforeSave(self, purge:bool) -> int:
		"""
		Sets the value of the purge unplaced pin views before saving setting.

		:param purge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous value was active |
		| 0 | Previous value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPurgeUnplacedPinViewsBeforeSave(purge)

	def SetDynamicSymbolOriginInUpperLeft(self, bTopLeft:bool) -> int:
		"""
		Sets the value of the place dynamic symbol origin in upper left instead of lower left setting.

		:param bTopLeft: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 or 0 | Setting value applied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDynamicSymbolOriginInUpperLeft(bTopLeft)

	def SetFieldOriginInUpperLeft(self, bTopLeft:bool) -> int:
		"""
		Sets the value of the place field origin in upper left instead of lower left setting.

		:param bTopLeft: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 or 0 | Setting value applied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFieldOriginInUpperLeft(bTopLeft)

	def ResetAttributeHighWaterMark(self, attname:str) -> int:
		"""
		Resets the next highest value of an attribute using incremental values on initialization.

		:param attname: Attribute name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Attribute next highest value reset |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ResetAttributeHighWaterMark(attname)

	def GetWireRange(self) -> tuple[int, int, int]:
		"""
		Gets the values of the wire range settings.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | _from | int | Minimum wire range setting value passed out of the function |
		| 2 | to | int | Maximum wire range setting value passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetWireRange(dummy, dummy)

	def SetWireRange(self, _from:int, to:int) -> int:
		"""
		Sets the values of the wire range settings.

		:param _from: Minimum wire range setting value to apply
		:type int: int
		:param to: Maximum wire range setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetWireRange(_from, to)

	def GetSymbolForConnectorsWithoutCompcode(self) -> str:
		"""
		Gets the value of the symbol for connector symbols without component setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Symbol&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolForConnectorsWithoutCompcode()

	def SetSymbolForConnectorsWithoutCompcode(self, new_sym:str) -> bool:
		"""
		Sets the value of the symbol for connector symbols without component setting.

		:param new_sym: Setting value to apply
		:type str: str

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetSymbolForConnectorsWithoutCompcode(new_sym)

	def GetSymbolForBlockConnectorsWithoutCompcode(self) -> str:
		"""
		Gets the value of the symbol for block connector symbols without component setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Symbol&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolForBlockConnectorsWithoutCompcode()

	def SetSymbolForBlockConnectorsWithoutCompcode(self, new_sym:str) -> bool:
		"""
		Sets the value of the symbol for block connector symbols without component setting.

		:param new_sym: Setting value to apply
		:type str: str

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetSymbolForBlockConnectorsWithoutCompcode(new_sym)

	def GetGapToPlaceSinglePins(self) -> float:
		"""
		Gets the value of the gap when placing several single pins setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| -203.2..203.2 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetGapToPlaceSinglePins()

	def SetGapToPlaceSinglePins(self, new_gap:float) -> float:
		"""
		Sets the value of the gap when placing several single pins setting.

		:param new_gap: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| -203.2..203.2 | Previous setting value |
		| 0.0 | Previous setting value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetGapToPlaceSinglePins(new_gap)

	def GetDetermineConnectorSymbol(self) -> int:
		"""
		Gets the value of the determine symbol of connector without component using placed connector symbols	setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDetermineConnectorSymbol()

	def SetDetermineConnectorSymbol(self, determine:int) -> int:
		"""
		Sets the value of the determine symbol of connector without component using placed connector symbols	setting.

		:param determine: Value setting to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting was active |
		| 0 | Previous setting was inactive or no project open |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDetermineConnectorSymbol(determine)

	def GetPinViewSymbolForDevicePins(self) -> str:
		"""
		Gets the value of the pin view symbols for device pins setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Symbol&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinViewSymbolForDevicePins()

	def SetPinViewSymbolForDevicePins(self, new_sym:str) -> bool:
		"""
		Sets the value of the  pin view symbols for device pins setting.

		:param new_sym: Setting value to apply
		:type str: str

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPinViewSymbolForDevicePins(new_sym)

	def GetPinViewSymbolForConnectorPins(self) -> str:
		"""
		Gets the value of the  pin view symbols for connector pins setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Suffix&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinViewSymbolForConnectorPins()

	def SetPinViewSymbolForConnectorPins(self, new_sym:str) -> bool:
		"""
		Sets the value of the  pin view symbols for connector pins setting.

		:param new_sym: Setting value to apply
		:type str: str

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPinViewSymbolForConnectorPins(new_sym)

	def GetPinViewSymbolForBlockConnectorPins(self) -> str:
		"""
		Gets the value of the  pin view symbols for block connector pins setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Symbol&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPinViewSymbolForBlockConnectorPins()

	def SetPinViewSymbolForBlockConnectorPins(self, new_sym:str) -> bool:
		"""
		Sets the value of the pin view symbols for block connector pins setting.

		:param new_sym: Setting value to apply
		:type str: str

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPinViewSymbolForBlockConnectorPins(new_sym)

	def GetDetermineConnectorViewSymbol(self) -> int:
		"""
		Gets the value of the determine symbol for pin views using placed connector symbols setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDetermineConnectorViewSymbol()

	def SetDetermineConnectorViewSymbol(self, determine:int) -> int:
		"""
		Sets the value of the determine symbol for pin views using placed connector symbols setting.

		:param determine: Value setting to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or no project open |
		| -1 | determine is the same value as the current setting value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDetermineConnectorViewSymbol(determine)

	def RenameMultiuser(self, oldname:str, newname:str, newdesc:str="") -> int:
		"""
		Renames and moves an existing multi-user project.

		:param oldname: Name of the multi-user project
		:type str: str
		:param newname: New name of the multi-user project
		:type str: str
		:param newdesc: New description of the multi-user project. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Multi-user project is renamed and moved |
		| 0 | Error occurred, Only available before v2018-19.45 and v2019-20.25 |
		| -1 | No multi-user license, Available since v2018-19.45 and v2019-20.25 |
		| -2 | No multi-user client or service is available, Available since v2018-19.45 and v2019-20.25 |
		| -6 | oldname or newname exceeds the maximum character length, Available since v2018-19.45 and v2019-20.25 |
		| -7 | newdesc exceeds the maximum character length, Available since v2018-19.45 and v2019-20.25 |
		| -10 | newname contains an invalid path, Available since v2018-19.45 and v2019-20.25 |
		| -11 | oldname contains an invalid project, Available since v2018-19.45 and v2019-20.25 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.RenameMultiuser(oldname, newname, newdesc)

	def GetPanelGridSize(self) -> float:
		"""
		Gets the value of the panel grid size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPanelGridSize()

	def SetPanelGridSize(self, newsize:float) -> float:
		"""
		Sets the value of the panel grid size setting.

		:param newsize: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous setting value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPanelGridSize(newsize)

	def GetPanelTrapSize(self) -> float:
		"""
		Gets the value of the panel working grid snap size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPanelTrapSize()

	def SetPanelTrapSize(self, newsize:float) -> float:
		"""
		Sets the value of the panel working grid snap size setting.

		:param newsize: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous setting value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPanelTrapSize(newsize)

	def GetTypeName(self) -> str:
		"""
		Gets the project's file name extension.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| ".&lt;File Extension&gt;" | Project file name extension |
		| "&lt;Empty&gt;" | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTypeName()

	def ReloadSettings(self, filename:str) -> bool:
		"""
		Imports project settings from a template file.

		:param filename: Path and name of the template file
		:type str: str

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project settings imported from template file |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ReloadSettings(filename)

	def ExportTemplate(self, filename:str) -> bool:
		"""
		Exports project settings to a template file.

		:param filename: Path and name of the template file
		:type str: str

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project settings exported to template file |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportTemplate(filename)

	def SetFieldOutlineWidth(self, width:float) -> float:
		"""
		Sets the value of the field outline width setting.

		:param width: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFieldOutlineWidth(width)

	def GetFieldOutlineWidth(self) -> float:
		"""
		Gets the value of the field outline width setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFieldOutlineWidth()

	def SetFieldOutlineColour(self, newcol:int) -> int:
		"""
		Sets the value of the field outline color setting.

		:param newcol: Setting value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or an error occurred |
		| -1 | Previous color value was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFieldOutlineColour(newcol)

	def GetFieldOutlineColour(self) -> int:
		"""
		Gets the value of the field outline color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Color value, See Colors for possible values |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFieldOutlineColour()

	def SetFieldOutlineStyle(self, newstyle:int) -> int:
		"""
		Sets the value of the field outline line style setting.

		:param newstyle: Setting value to apply. See Line Style for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous line style setting value, See Line Style for possible values |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFieldOutlineStyle(newstyle)

	def GetFieldOutlineStyle(self) -> int:
		"""
		Gets the value of the field outline line style setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Style value, See Line Style for possible values |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFieldOutlineStyle()

	def GetFieldHatchPattern(self) -> int:
		"""
		Gets the value of the field hatch pattern setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..7 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFieldHatchPattern()

	def SetFieldHatchPattern(self, newpat:int) -> int:
		"""
		Sets the value of the field hatch pattern setting.

		:param newpat: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..6 | Previous setting value |
		| 0 | Previous setting value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFieldHatchPattern(newpat)

	def GetFieldHatchLineWidth(self) -> float:
		"""
		Gets the value of the field hatch line width setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFieldHatchLineWidth()

	def SetFieldHatchLineWidth(self, newwid:float) -> float:
		"""
		Sets the value of the field hatch line width setting.

		:param newwid: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFieldHatchLineWidth(newwid)

	def GetFieldHatchColour(self) -> int:
		"""
		Gets the value of the field hatch color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Color value, See Colors for possible values |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFieldHatchColour()

	def SetFieldHatchColour(self, newcol:int) -> int:
		"""
		Sets the value of the field hatch color setting.

		:param newcol: Setting value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or an error occurred |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFieldHatchColour(newcol)

	def GetFieldHatchLineDistance(self) -> float:
		"""
		Gets the value of the field hatch line distance setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0039 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFieldHatchLineDistance()

	def SetFieldHatchLineDistance(self, newdist:float) -> float:
		"""
		Sets the value of the field hatch line distance setting.

		:param newdist: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &lt;= 0.0039 | Previous setting value |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFieldHatchLineDistance(newdist)

	def GetBlockTextFont(self) -> str:
		"""
		Gets the value of the block text font name setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;FontName&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockTextFont()

	def SetBlockTextFont(self, newfont:str) -> str:
		"""
		Sets the value of the block  text font name setting.

		:param newfont: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;FontName&gt;" | Previous setting value |
		| "&lt;Empty&gt;" | Previous setting had no value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockTextFont(newfont)

	def GetBlockTextStyle(self) -> int:
		"""
		Gets the value of the block text font style setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Block text font style setting is regular or an error occurred |
		| 1..3 | Block text font style setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockTextStyle()

	def SetBlockTextStyle(self, newstyle:int) -> int:
		"""
		Sets the value of the block text font style setting.

		:param newstyle: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Previous setting value |
		| 0 | Previous setting value was regular or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockTextStyle(newstyle)

	def GetBlockTextSize(self) -> float:
		"""
		Gets the value of the block text size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockTextSize()

	def SetBlockTextSize(self, newsize:float) -> float:
		"""
		Sets the value of the block text size setting.

		:param newsize: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockTextSize(newsize)

	def GetBlockTextColour(self) -> int:
		"""
		Gets the value of the block text color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Color value, See Colors for possible values |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockTextColour()

	def SetBlockTextColour(self, newcol:int) -> int:
		"""
		Sets the value of the block text color setting.

		:param newcol: Setting value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or an error occurred |
		| -1 | Previous color value was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockTextColour(newcol)

	def GetBlockTextRatio(self) -> int:
		"""
		Gets the value of the block text ratio setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockTextRatio()

	def SetBlockTextRatio(self, newratio:int) -> int:
		"""
		Sets the value of the block text ratio setting.

		:param newratio: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Previous setting value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockTextRatio(newratio)

	def GetBlockTextAlignment(self) -> int:
		"""
		Gets the value of the block reference text alignment setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Block reference text alignment setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockTextAlignment()

	def SetBlockTextAlignment(self, newalign:int) -> int:
		"""
		Sets the value of the block reference text alignment setting.

		:param newalign: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Previous block reference text alignment setting value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockTextAlignment(newalign)

	def GetBlockReferenceType(self) -> int:
		"""
		Gets the value of the block reference type setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Block reference type setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockReferenceType()

	def SetBlockReferenceType(self, newtype:int) -> int:
		"""
		Sets the value of the block reference type setting.

		:param newtype: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Previous block reference type setting value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockReferenceType(newtype)

	def GetBlockReferenceTextGap(self) -> float:
		"""
		Gets the value of the block text gap setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockReferenceTextGap()

	def SetBlockReferenceTextGap(self, newgap:float) -> float:
		"""
		Sets the value of the block text gap setting.

		:param newgap: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockReferenceTextGap(newgap)

	def GetBlockReferenceTextLevel(self) -> int:
		"""
		Gets the value of the block text level setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..256 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockReferenceTextLevel()

	def SetBlockReferenceTextLevel(self, newlev:int) -> int:
		"""
		Sets the value of the block text level setting.

		:param newlev: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..256 | Previous setting value |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockReferenceTextLevel(newlev)

	def GetBlockReferenceTextRotate(self) -> int:
		"""
		Gets the value of the block text rotate setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockReferenceTextRotate()

	def SetBlockReferenceTextRotate(self, rotate:int) -> int:
		"""
		Sets the value of the block text rotate setting.

		:param rotate: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting was active |
		| 0 | Previous setting was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockReferenceTextRotate(rotate)

	def GetBlockReferenceTextDirection(self) -> int:
		"""
		Gets the value of the block text direction setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Direction is up |
		| 0 | Direction is down |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockReferenceTextDirection()

	def SetBlockReferenceTextDirection(self, newdir:int) -> int:
		"""
		Sets the value of the block text direction setting.

		:param newdir: Setting value to apply. If 1, direction is up. If 0, direction is down
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous direction was up |
		| 0 | Previous direction was down |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockReferenceTextDirection(newdir)

	def GetBlockCopyGraphicInSplit(self) -> int:
		"""
		Gets the value of the split block and copy the graphic contents setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBlockCopyGraphicInSplit()

	def SetBlockCopyGraphicInSplit(self, copy:int) -> int:
		"""
		Sets the value of the split the block and copy the graphic contents setting.

		:param copy: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting was active |
		| 0 | Previous setting was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetBlockCopyGraphicInSplit(copy)

	def GetImportUseItemDesignationSuffix(self) -> int:
		"""
		Gets the value of the use item designation suffix for import setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetImportUseItemDesignationSuffix()

	def SetImportUseItemDesignationSuffix(self, use:int) -> int:
		"""
		Sets the value of the use item designation suffix for import setting.

		:param use: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetImportUseItemDesignationSuffix(use)

	def GetImportItemDesignationSuffix(self) -> str:
		"""
		Gets the value of the import item designation suffix setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Suffix&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetImportItemDesignationSuffix()

	def SetImportItemDesignationSuffix(self, newsuffix:str) -> str:
		"""
		Sets the value of the import item designation suffix setting.

		:param newsuffix: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Suffix&gt;" | Previous setting value |
		| "&lt;Empty&gt;" | No previous setting value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetImportItemDesignationSuffix(newsuffix)

	def GetImportMergeExistingDevices(self) -> int:
		"""
		Gets the value of the merge using existing devices for import setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetImportMergeExistingDevices()

	def SetImportMergeExistingDevices(self, merge:int) -> int:
		"""
		Sets the value of the merge using existing devices for import setting.

		:param merge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetImportMergeExistingDevices(merge)

	def GetImportMergeExistingAssemblies(self) -> int:
		"""
		Gets the value of the merge using existing assemblies for import setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetImportMergeExistingAssemblies()

	def SetImportMergeExistingAssemblies(self, merge:int) -> int:
		"""
		Sets the value of the merge using existing assemblies for import setting.

		:param merge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetImportMergeExistingAssemblies(merge)

	def GetImportMergeExistingTerminalStrips(self) -> int:
		"""
		Gets the value of the merge using existing terminal strips for import setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetImportMergeExistingTerminalStrips()

	def SetImportMergeExistingTerminalStrips(self, merge:int) -> int:
		"""
		Sets the value of the merge using existing terminal strips for import setting.

		:param merge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetImportMergeExistingTerminalStrips(merge)

	def GetImportMergeAttributes(self) -> int:
		"""
		Gets the value of the import merge attributes setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetImportMergeAttributes()

	def SetImportMergeAttributes(self, merge:int) -> int:
		"""
		Sets the value of the import merge attributes setting.

		:param merge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetImportMergeAttributes(merge)

	def GetImportMergeConnectLines(self) -> int:
		"""
		Gets the value of the merge connect lines for import and modification setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetImportMergeConnectLines()

	def SetImportMergeConnectLines(self, merge:int) -> int:
		"""
		Sets the value of the merge connect lines for import and modification setting.

		:param merge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetImportMergeConnectLines(merge)

	def GetCreateUniqueSheetNames(self) -> int:
		"""
		Gets the value of the import sheets' create unique sheet names setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCreateUniqueSheetNames()

	def SetCreateUniqueSheetNames(self, uniquenames:int) -> int:
		"""
		Sets the value of the import sheets' create unique sheet names setting.

		:param uniquenames: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetCreateUniqueSheetNames(uniquenames)

	def GetExportWithCablesAndWires(self) -> int:
		"""
		Gets the value of the exporting and copying of cables/wires and hoses/tubes setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetExportWithCablesAndWires()

	def SetExportWithCablesAndWires(self, cablesandwires:int) -> int:
		"""
		Sets the value of the exporting and copying of cables/wires and hoses/tubes setting.

		:param cablesandwires: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetExportWithCablesAndWires(cablesandwires)

	def GetExportWithCablesAndWiresOption(self) -> int:
		"""
		Gets the value of the exporting and copying of cables/wires and hoses/tubes option setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..4 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetExportWithCablesAndWiresOption()

	def SetExportWithCablesAndWiresOption(self, option:int) -> int:
		"""
		Sets the value of the exporting and copying of cables/wires and hoses/tubes option setting.

		:param option: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..4 | Previous setting value |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetExportWithCablesAndWiresOption(option)

	def UpdateAllTerminalPlans(self) -> bool:
		"""
		Updates the project's terminal plans.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Terminal plans updated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.UpdateAllTerminalPlans()

	def GetSchematicTypeDescription(self, _type:int) -> str:
		"""
		Gets the description of a schematic type.

		:param _type: Value representing a schematic type. See Schematic for possible values
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Description&gt;" | Description of a schematic type |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSchematicTypeDescription(_type)

	def JumpToID(self, jumpid:int) -> bool:
		"""
		Jumps to an item and highlights it if possible to do so.

		:param jumpid: Identifier of item to jump to
		:type int: int

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Value returned regardless of whether the jump was successful or not |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.JumpToID(jumpid)

	def ExportSymbolToDB(self, SymbolName:str, SymbolVersion:str, bOverwrite:int) -> int:
		"""
		Exports a symbol of the project to the database.

		:param SymbolName: Name of symbol to export
		:type str: str
		:param SymbolVersion: Version of symbol to export
		:type str: str
		:param bOverwrite: Indicates whether symbol should be overwritten. If 1, the symbol is overwritten if it already exists in the database. If 0, the symbol is not overwritten if it already exists in the database
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportSymbolToDB(SymbolName, SymbolVersion, bOverwrite)

	def ExportAllSymbolsToDB(self, bOverwrite:int) -> int:
		"""
		Exports all symbols of the project to the database.

		:param bOverwrite: Indicates whether symbols should be overwritten. If 1, the symbols are overwritten if they already exist in the database. If 0, the symbols are not overwritten if they already exist in the database
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportAllSymbolsToDB(bOverwrite)

	def ExportComponentToDB(self, CompName:str, CompVersion:str, bOverwrite:int) -> int:
		"""
		Exports a component of the project to the database.

		:param CompName: Name of component to export
		:type str: str
		:param CompVersion: Version of component to export
		:type str: str
		:param bOverwrite: Indicates whether component should be overwritten. If 1, the component is overwritten if it already exists in the database. If 0, the component is not overwritten if it already exists in the database
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportComponentToDB(CompName, CompVersion, bOverwrite)

	def ExportAllComponentsToDB(self, bOverwrite:int) -> int:
		"""
		Exports all components of the project to the database.

		:param bOverwrite: Indicates whether components should be overwritten. If 1, the components are overwritten if they already exist in the database. If 0, the components are not overwritten if they already exist in the database
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportAllComponentsToDB(bOverwrite)

	def ExportToDB(self, bOverwrite:int) -> int:
		"""
		Exports all components, models and symbols of the project to the database.

		:param bOverwrite: Indicates whether components, models and symbols should be overwritten. If 1, the components, models and symbols are overwritten if they already exist in the database. If 0, the components, models and symbols are not overwritten if they already exist in the database
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportToDB(bOverwrite)

	def GetNextWireNumber(self) -> int:
		"""
		Get the next available wire number and reserves it for use.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Wire number |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetNextWireNumber()

	def FreeWireNumber(self, number:int) -> int:
		"""
		Releases a reserved wire number.

		:param number: Wire number to release
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Wire number released |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.FreeWireNumber(number)

	def GetCursorPosition(self) -> tuple[int, tuple[int,...], tuple[int,...]]:
		"""
		Gets the current position of the cursor on the active open sheet.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xpos | tuple[int,...] | Position on the x-axis passed out of the function |
		| 2 | ypos | tuple[int,...] | Position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the active open sheet |
		| 0 | Cursor is not on an active open sheet or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, xpos, ypos = self._obj.GetCursorPosition(dummy, dummy)
		xpos = xpos[1:] if type(xpos) == tuple and len(xpos) > 0 else tuple()
		ypos = ypos[1:] if type(ypos) == tuple and len(ypos) > 0 else tuple()
		return ret, xpos, ypos

	def GetShortcutPosition(self) -> tuple[int, tuple[int,...], tuple[int,...]]:
		"""
		Gets the position of the cursor of the sheet where the right mouse button was last clicked.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xpos | tuple[int,...] | Position on the x-axis passed out of the function |
		| 2 | ypos | tuple[int,...] | Position on the y-axis passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the open sheet where the right mouse button was last clicked |
		| 0 | Sheet where the right mouse button was last clicked has been closed, the right mouse button was last clicked outside of a sheet or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, xpos, ypos = self._obj.GetShortcutPosition(dummy, dummy)
		xpos = xpos[1:] if type(xpos) == tuple and len(xpos) > 0 else tuple()
		ypos = ypos[1:] if type(ypos) == tuple and len(ypos) > 0 else tuple()
		return ret, xpos, ypos

	def GetTreeSelectedDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the normal devices selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of device identifiers in ids |
		| 0 | No devices selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedCableIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the cables selected in the  project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of cable identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cable identifiers in ids |
		| 0 | No cables selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedCableIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedTerminalIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the terminals selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of terminal identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of terminal identifiers in ids |
		| 0 | No selected terminals or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedTerminalIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedConnectorIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the connectors selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connector identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connector identifiers in ids |
		| 0 | No connectors selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedConnectorIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedBlockIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the blocks selected in the  project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of block identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of block identifiers in ids |
		| 0 | No blocks selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedBlockIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedAllDeviceIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the devices selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of device identifiers in ids |
		| 0 | No devices selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedAllDeviceIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedSymbolIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the symbols selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol identifiers in ids |
		| 0 | No selected symbols or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedSymbolIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedBundleIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the bundles selected in the  project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of bundle identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of bundle identifiers in ids |
		| 0 | No bundles selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedBundleIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedPinIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the pins selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of pin identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of pin identifiers in ids |
		| 0 | No pins selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedPinIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedStructureNodeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the structure node items selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of structure node identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of structure node items in ids |
		| 0 | No structure nodes are selected or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedStructureNodeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetActiveTreeID(self) -> int:
		"""
		Gets the identifier of the currently active project tree.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Active project tree identifier |
		| 0 | No project tree is active or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetActiveTreeID()

	def GetTreeSelectedSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the sheets selected in the project tree. Reciprocal link.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet identifiers in ids |
		| 0 | No sheets selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetMergeSheetReferences(self) -> int:
		"""
		Gets the value of the merge sheet references for import setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMergeSheetReferences()

	def SetMergeSheetReferences(self, bMerge:int) -> int:
		"""
		Sets the value of the merge sheet references for import setting.

		:param bMerge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetMergeSheetReferences(bMerge)

	def GetMergeAlphanumericReferences(self) -> int:
		"""
		Gets the value of the merge only if sheet reference names contain letters or special characters for import setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMergeAlphanumericReferences()

	def SetMergeAlphanumericReferences(self, bMerge:int) -> int:
		"""
		Sets the value of the merge only if sheet reference names contain letters or special characters for import setting.

		:param bMerge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetMergeAlphanumericReferences(bMerge)

	def GetAltGridSize(self) -> float:
		"""
		Gets the value of the alternative grid size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAltGridSize()

	def SetAltGridSize(self, newsize:float) -> float:
		"""
		Sets the value of the alternative grid size setting.

		:param newsize: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous setting value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAltGridSize(newsize)

	def GetPanelAltGridSize(self) -> float:
		"""
		Gets the value of the panel alternative grid size setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPanelAltGridSize()

	def SetPanelAltGridSize(self, newsize:float) -> float:
		"""
		Sets the value of the panel alternative grid size setting.

		:param newsize: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Previous setting value |
		| -1.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPanelAltGridSize(newsize)

	def GetAddDeviceDesignationOfConnectionTarget(self) -> int:
		"""
		Gets the value of the add internal device designation to connection target setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAddDeviceDesignationOfConnectionTarget()

	def SetAddDeviceDesignationOfConnectionTarget(self, bMerge:int) -> int:
		"""
		Sets the value of the add internal device designation to connection target setting.

		:param bMerge: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting was previously active |
		| 0 | Setting was previously inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAddDeviceDesignationOfConnectionTarget(bMerge)

	def ExportModelToDB(self, CompName:str, CompVersion:str, bOverwrite:int) -> int:
		"""
		Exports a model of the project to the database.

		:param CompName: Name of model to export
		:type str: str
		:param CompVersion: Version of model to export
		:type str: str
		:param bOverwrite: Indicates whether model should be overwritten. If 1, the model is overwritten if it already exists in the database. If 0, the model is not overwritten if it already exists in the database
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportModelToDB(CompName, CompVersion, bOverwrite)

	def ExportAllModelsToDB(self, bOverwrite:int) -> int:
		"""
		Exports all models of the project to the database.

		:param bOverwrite: Indicates whether models should be overwritten. If 1, the models are overwritten if they already exist in the database. If 0, the models are not overwritten if they already exist in the database
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ExportAllModelsToDB(bOverwrite)

	def GetLastDeletedAttributeValues(self) -> tuple[int, tuple[int,...], tuple[str,...], tuple[str,...]]:
		"""
		Gets the details of the last deleted attribute values.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | owner_ids | tuple[int,...] | Array of item identifiers passed out of the function |
		| 2 | attribute_names | tuple[str,...] | Array of attribute names passed out of the function |
		| 3 | attribute_values | tuple[str,...] | Array of deleted attribute values passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of elements in owner_ids, attribute_names and attribute_values |
		| 0 | No attribute values deleted or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, owner_ids, attribute_names, attribute_values = self._obj.GetLastDeletedAttributeValues(dummy, dummy, dummy)
		owner_ids = owner_ids[1:] if type(owner_ids) == tuple and len(owner_ids) > 0 else tuple()
		attribute_names = attribute_names[1:] if type(attribute_names) == tuple and len(attribute_names) > 0 else tuple()
		attribute_values = attribute_values[1:] if type(attribute_values) == tuple and len(attribute_values) > 0 else tuple()
		return ret, owner_ids, attribute_names, attribute_values

	def GetRGBValue(self, index:int) -> tuple[int, int, int, int]:
		"""
		Gets the red, green, blue color space values of a color.

		:param index: Color value. See Colors for possible predefined values
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | r | int | Red color space value passed out of the function |
		| 2 | g | int | Green color space value passed out of the function |
		| 3 | b | int | Blue color space value passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Red, green, blue color values supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetRGBValue(index, dummy, dummy, dummy)

	def SetRGBValue(self, index:int, r:int, g:int, b:int) -> int:
		"""
		Sets the red, green, blue color space values of a color.

		:param index: Color value. See Colors for possible predefined values
		:type int: int
		:param r: Red color space value
		:type int: int
		:param g: Green color space value
		:type int: int
		:param b: Blue color space value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Red, green, blue color values applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetRGBValue(index, r, g, b)

	def GetSymbolTypeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's placed symbol template types.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of symbol type items in ids |
		| 0 | No symbol types or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSymbolTypeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ExportCGM(self, file:str, shtids:list[int], options:int) -> int:
		"""
		Exports sheets as Computer Graphics Metafile (CGM) files.

		:param file: Path and file name of the export files
		:type str: str
		:param shtids: Array of sheet item identifiers to be exported passed into the function
		:type list[int]: list[int]
		:param options: Export option flags
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheets are exported |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.ExportCGM(file, shtids, options)
		return ret[0]

	def ClearItemCollectors(self) -> bool:
		"""
		Empties E³.series internal lists of items.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | E³.series internal lists are emptied of items |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ClearItemCollectors()

	def SetTerminalPlanSettings(self, settings:dict[str,str]) -> bool:
		"""
		Sets values for the project's terminal plan settings.

		:param settings: Dictionary of [. String. ]. key. /[. String. ]. value. pairs representing terminal plan settings
		passed into the finction. key is the terminal plan setting name. value is the terminal plan setting value
		:type dict[str,str]: dict[str,str]

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of terminal plan settings in parameters successfully applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		settings = _dict_to_variant(settings)
		ret = self._obj.SetTerminalPlanSettings(settings)
		return ret[0]

	def GetTerminalPlanSettings(self, settings:dict[str,str]=pythoncom.Empty) -> tuple[bool, dict[str,str]]:
		"""
		Gets a dictionary of the project's terminal plan settings.

		:param settings: Dictionary of [. String. ]. key. /[. String. ]. value. pairs representing terminal plan settings. Dictionary keys with no values can be passed into the function and the dictionary with the setting values are passed out of the function. key is the terminal plan setting name. value is the terminal plan setting value, defaults to pythoncom.Empty
		:type dict[str,str]: dict[str,str]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | bool | See table return value |
		| 1 | settings | dict[str,str] | Dictionary of [. String. ]. key. /[. String. ]. value. pairs representing terminal plan settings. Dictionary keys with no values can be passed into the function and the dictionary with the setting values are passed out of the function. key is the terminal plan setting name. value is the terminal plan setting value |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in settings |
		| 0 | No terminal plan settings or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		settings = _dict_to_variant(settings)
		ret, settings = self._obj.GetTerminalPlanSettings(settings)
		settings = _variant_to_dict(settings)
		return ret, settings

	def CreateDimensionObject(self) -> Dimension:
		"""
		Creates an e3Dimension object.

		:return:
		Type: Dimension

		Available since E3.series TLB-Versions: 8.50
		"""
		return Dimension(self._obj.CreateDimensionObject())

	def SetDefaultJumper(self, jumpergroup:str, jumpername:str) -> int:
		"""
		Sets the values of the default terminal plan jumper settings.

		:param jumpergroup: Terminal plan jumper group or terminal plan jumper cable type value to apply
		:type str: str
		:param jumpername: Terminal plan jumper type with the jumper property value to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Default jumper setting values applied |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDefaultJumper(jumpergroup, jumpername)

	def GetDefaultJumper(self) -> tuple[int, str, str]:
		"""
		Gets the values of the default terminal plan jumper settings.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | jumpergroup | str | Terminal plan jumper group or terminal plan jumper cable type |
		| 2 | jumpername | str | Terminal plan jumper type with the jumper property |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | 0 is always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetDefaultJumper(dummy, dummy)

	def IsFileReadonly(self) -> int:
		"""
		Indicates the project's write access status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project is read only |
		| 0 | Project is writable or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsFileReadonly()

	def GetConnectorPinTerminalParameterOverwriteModelPin(self) -> int:
		"""
		Gets the value of the use physical data of cavity part models instead of device model setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectorPinTerminalParameterOverwriteModelPin()

	def SetConnectorPinTerminalParameterOverwriteModelPin(self, bValue:int) -> int:
		"""
		Sets the value of the use physical data of cavity part models instead of device model setting.

		:param bValue: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetConnectorPinTerminalParameterOverwriteModelPin(bValue)

	def GetPortNameSeparator(self) -> str:
		"""
		Gets the value of the port name separator setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Separator&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPortNameSeparator()

	def SetPortNameSeparator(self, newsep:str) -> str:
		"""
		Sets the value of the port name separator setting.

		:param newsep: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Separator&gt;" | Previous setting value |
		| "&lt;Empty&gt;" | Previous setting had no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPortNameSeparator(newsep)

	def GetImportMergeOptions(self) -> int:
		"""
		Gets the value of the import device merge options setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetImportMergeOptions()

	def SetImportMergeOptions(self, newval:bool) -> int:
		"""
		Sets the value of the import device merge options setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value is always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetImportMergeOptions(newval)

	def SetIEC61346Setting(self, newval:bool) -> bool:
		"""
		Sets the value of the IEC 81346 setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetIEC61346Setting(newval)

	def GetIEC61346Setting(self) -> bool:
		"""
		Gets the value of the IEC 81346 setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetIEC61346Setting()

	def SetUsePinAttributesOnAssign(self, newval:bool) -> bool:
		"""
		Sets the value of the use symbol pin attributes when assigning to device	setting.

		:param newval: Value setting to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting was active |
		| 0 | Previous setting was inactive or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetUsePinAttributesOnAssign(newval)

	def GetUsePinAttributesOnAssign(self) -> bool:
		"""
		Gets the value of the use symbol pin attributes when assigning to device	setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetUsePinAttributesOnAssign()

	def SetUsePinAttributesOnImport(self, newval:bool) -> bool:
		"""
		Sets the value of the use pin attributes from subcircuit when importing setting.

		:param newval: Value setting to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting was active |
		| 0 | Previous setting was inactive or no project open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetUsePinAttributesOnImport(newval)

	def GetUsePinAttributesOnImport(self) -> bool:
		"""
		Gets the value of the use pin attributes from subcircuit when importing setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetUsePinAttributesOnImport()

	def SetDeletePinAttributesOnUnplace(self, newval:bool) -> bool:
		"""
		Sets the value of the delete pin attributes when symbol is unplaced setting.

		:param newval: Value setting to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeletePinAttributesOnUnplace(newval)

	def GetDeletePinAttributesOnUnplace(self) -> bool:
		"""
		Gets the value of the delete pin attributes when symbol is unplaced setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDeletePinAttributesOnUnplace()

	def SetDefaultHoseTube(self, HoseTube:str) -> int:
		"""
		Sets the value of the default used hose/tube component type setting.

		:param HoseTube: Value of the default used hose/tube component type setting to apply
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Setting value applied |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDefaultHoseTube(HoseTube)

	def GetDefaultHoseTube(self) -> tuple[int, str]:
		"""
		Gets the value of the default used hose/tube component type setting.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | HoseTube | str | Value of the default used hose/tube component type setting |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetDefaultHoseTube(dummy)

	def GetOutdatedAllComponentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's outdated normal components and cable types.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of outdated component and cable type identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of outdated component and cable type identifiers in ids |
		| 0 | No outdated component and cable type items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOutdatedAllComponentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetOutdatedComponentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's outdated normal components.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of outdated component identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of outdated component identifiers in ids |
		| 0 | No outdated component items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOutdatedComponentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetOutdatedCableTypeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's outdated cable types.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of outdated cable type identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of outdated cable type identifiers in ids |
		| 0 | No outdated cable type items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOutdatedCableTypeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetOutdatedSymbolTypeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's outdated symbol types.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of outdated symbol type identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of outdated symbol type identifiers in ids |
		| 0 | No outdated symbol types or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOutdatedSymbolTypeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetViewSymbolForTerminalStrips(self) -> str:
		"""
		Gets the value of the terminal strip view symbol setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Symbol&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetViewSymbolForTerminalStrips()

	def SetViewSymbolForTerminalStrips(self, new_sym:str) -> bool:
		"""
		Sets the value of the terminal strip view symbol setting.

		:param new_sym: Setting value to apply
		:type str: str

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetViewSymbolForTerminalStrips(new_sym)

	def GetMultiuserPath(self) -> str:
		"""
		Gets the folder of the currently open multi-user project.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Multi-user project is renamed and moved |
		| "&lt;Empty&gt;" | Multi-user project is not in a sub-folder or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMultiuserPath()

	def GetDisplayMILStandard(self) -> int:
		"""
		Gets the values of the MIL standard display settings.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..2047 | Setting values supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayMILStandard()

	def SetDisplayMILStandard(self, newval:int) -> int:
		"""
		Sets the values of the MIL standard display settings.

		:param newval: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..2047 | Previous setting values |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayMILStandard(newval)

	def SetMILGraphicLineWidth(self, width:float) -> float:
		"""
		Sets the value of the MIL-Standard graphic line width setting.

		:param width: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Previous setting value |
		| 0.0 | Previous setting value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetMILGraphicLineWidth(width)

	def GetMILGraphicLineWidth(self) -> float:
		"""
		Gets the value of the MIL-Standard graphic line width setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMILGraphicLineWidth()

	def SetMILGraphicLineColour(self, newcol:int) -> int:
		"""
		Sets the value of the MIL-Standard graphic line color setting.

		:param newcol: Setting value to apply. See Colors for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..255 | Previous color value, See Colors for possible values |
		| 0 | Previous color value was black or an error occurred |
		| -1 | Previous color value was automatic |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetMILGraphicLineColour(newcol)

	def GetMILGraphicLineColour(self) -> int:
		"""
		Gets the value of the MIL-Standard graphic line color setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..255 | Color value, supplied                        See Colors for possible values |
		| 0 | Color value supplied or no open project, See Colors for possible value |
		| -1 | Automatic color |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMILGraphicLineColour()

	def SetMILGraphicLineStyle(self, newstyle:int) -> int:
		"""
		Sets the value of the MIL-Standard graphic line style setting.

		:param newstyle: Setting value to apply. See Line Style for possible values
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetMILGraphicLineStyle(newstyle)

	def GetMILGraphicLineStyle(self) -> int:
		"""
		Gets the value of the MIL-Standard graphic line style setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Style value supplied or no project open, See Line Style for possible value |
		| 2..255 | Style value supplied, See Line Style for possible values |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetMILGraphicLineStyle()

	def GetKeepActiveConnectorPinTerminalOnUpdate(self) -> int:
		"""
		Gets the value of the keep active mating connectors and cavity parts setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetKeepActiveConnectorPinTerminalOnUpdate()

	def SetKeepActiveConnectorPinTerminalOnUpdate(self, keep:bool) -> int:
		"""
		Sets the value of the keep active mating connectors and cavity parts setting.

		:param keep: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetKeepActiveConnectorPinTerminalOnUpdate(keep)

	def GetUseBlockDesignation(self) -> int:
		"""
		Gets the value of the generate device designation of mating connector from device designation of block and device setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetUseBlockDesignation()

	def SetUseBlockDesignation(self, newval:bool) -> int:
		"""
		Sets the value of the generate device designation of mating connector from device designation of block and device setting.

		:param newval: Value setting to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetUseBlockDesignation(newval)

	def SetConnectionInclinationAngle(self, angle:float) -> float:
		"""
		Sets the value of the connection angle setting.

		:param angle: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 0.0..89.99 | Setting value applied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetConnectionInclinationAngle(angle)

	def GetConnectionInclinationAngle(self) -> float:
		"""
		Gets the value of the connection angle setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 0.0..89.99 | Setting value applied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectionInclinationAngle()

	def SetConnectionInclinationDistance(self, destination:float) -> float:
		"""
		Sets the value of the connection angle bend distance setting.

		:param destination: Setting value to apply
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Setting value applied |
		| 0.0 | Setting value applied or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetConnectionInclinationDistance(destination)

	def GetConnectionInclinationDistance(self) -> float:
		"""
		Gets the value of the connection angle bend distance setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectionInclinationDistance()

	def SetConnectionMode(self, mode:int) -> int:
		"""
		Sets the value of the connection mode setting.

		:param mode: Setting value to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Setting value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetConnectionMode(mode)

	def GetConnectionMode(self) -> int:
		"""
		Gets the value of the connection mode setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..3 | Setting value is supplied |
		| 0 | Setting value is connect only graphically |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConnectionMode()

	def GetHoseIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the project's hose items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of hose items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No hose identifiers are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetHoseIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTubeIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the project's tube items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of tube items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No tube items are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTubeIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetProjectProperty(self, what:str) -> typing.Union[dict[str,str],str]:
		"""
		Internal function for debugging purposes.

		:param what: Indicates what information to retrieved
		:type str: str

		:return:
		Type: typing.Union[dict[str,str],str]

		Available since E3.series TLB-Versions: 8.50
		"""
		ret = self._obj.GetProjectProperty(what)
		if type(ret) is CDispatch:
			ret = _variant_to_dict(ret)
		return ret

	def SetDeleteSignalOnDelCline(self, newval:bool) -> int:
		"""
		Sets the value of the delete signal with graphical representation setting.

		:param newval: Value setting to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeleteSignalOnDelCline(newval)

	def GetDeleteSignalOnDelCline(self) -> int:
		"""
		Gets the value of the delete signal with graphical representation setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDeleteSignalOnDelCline()

	def SetUnconnectCoresOnDelCline(self, newval:bool) -> int:
		"""
		Sets the value of the delete conductors/wires or hoses/tubes with graphical representation setting.

		:param newval: Value setting to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetUnconnectCoresOnDelCline(newval)

	def GetUnconnectCoresOnDelCline(self) -> int:
		"""
		Gets the value of the delete conductors/wires or hoses/tubes with graphical representation setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetUnconnectCoresOnDelCline()

	def SetDeleteCoresOnDelCline(self, newval:bool) -> int:
		"""
		Sets the value of the delete conductors/wires or hoses/tubes from project with graphical representation setting.

		:param newval: Value setting to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDeleteCoresOnDelCline(newval)

	def GetDeleteCoresOnDelCline(self) -> int:
		"""
		Gets the value of the delete conductors/wires or hoses/tubes from project with graphical representation setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDeleteCoresOnDelCline()

	def CreateGroupObject(self) -> Group:
		"""
		Creates an e3Group object.

		:return:
		Type: Group

		Available since E3.series TLB-Versions: 8.50
		"""
		return Group(self._obj.CreateGroupObject())

	def GetGroupIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's group items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of group item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of group item identifiers in ids |
		| 0 | No group items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetGroupIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAvailableLanguages(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the available languages.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | languages | tuple[str,...] | Array of languages passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of languages |
		| 0 | No languages or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, languages = self._obj.GetAvailableLanguages(dummy)
		languages = languages[1:] if type(languages) == tuple and len(languages) > 0 else tuple()
		return ret, languages

	def GetDisplayFormboardUnconnectedCores(self) -> bool:
		"""
		Gets the value of the display formboard unconnected conductors setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayFormboardUnconnectedCores()

	def SetDisplayFormboardUnconnectedCores(self, newval:bool) -> bool:
		"""
		Sets the value of the display formboard unconnected conductors setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayFormboardUnconnectedCores(newval)

	def GetDisplayAppendFormboardNameToDeviceName(self) -> bool:
		"""
		Gets the value of the formboard name as an extension to device designation setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayAppendFormboardNameToDeviceName()

	def SetDisplayAppendFormboardNameToDeviceName(self, newval:bool) -> bool:
		"""
		Sets the value of the formboard name as an extension to device designation setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayAppendFormboardNameToDeviceName(newval)

	def GetDisplayFormboardTableSubsidiaryLines(self) -> bool:
		"""
		Gets the value of the display formboard table subsidiary lines setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayFormboardTableSubsidiaryLines()

	def SetDisplayFormboardTableSubsidiaryLines(self, newval:bool) -> bool:
		"""
		Sets the value of the display formboard table subsidiary lines setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayFormboardTableSubsidiaryLines(newval)

	def GetDisplayFormboardMarkDifferenLength(self) -> bool:
		"""
		Gets the value of the display formboard mark segments with different manufacturing and displayed lengths setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayFormboardMarkDifferenLength()

	def SetDisplayFormboardMarkDifferenLength(self, newval:bool) -> bool:
		"""
		Sets the value of the display formboard mark segments with different manufacturing and displayed lengths setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayFormboardMarkDifferenLength(newval)

	def GetDisplayFormboardEffectiveDirection(self) -> bool:
		"""
		Gets the value of the display formboard effective direction on selected segments setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayFormboardEffectiveDirection()

	def SetDisplayFormboardEffectiveDirection(self, newval:bool) -> bool:
		"""
		Sets the value of the display formboard effective direction on selected segments setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayFormboardEffectiveDirection(newval)

	def GetDisplayFormboardNodes(self) -> bool:
		"""
		Gets the value of the display formboard connection/segment nodes setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetDisplayFormboardNodes()

	def SetDisplayFormboardNodes(self, newval:bool) -> bool:
		"""
		Sets the value of the display formboard connection/segment nodes setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDisplayFormboardNodes(newval)

	def GetTableSymbol(self) -> str:
		"""
		Gets the value of the formboard table symbol setting.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Symbol&gt;" | Setting value supplied |
		| "&lt;Empty&gt;" | Setting has no value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTableSymbol()

	def SetTableSymbol(self, newval:str) -> str:
		"""
		Sets the value of the formboard table symbol setting.

		:param newval: Setting value to apply
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Symbol&gt;" | Previous setting value or newval is invalid |
		| "&lt;Empty&gt;" | Previous setting has no value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTableSymbol(newval)

	def GetFormboardAutoplaceTableSymbol(self) -> bool:
		"""
		Gets the value of the formboard table symbol autoplace setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFormboardAutoplaceTableSymbol()

	def SetFormboardAutoplaceTableSymbol(self, newval:bool) -> int:
		"""
		Sets the value of the formboard table symbol autoplace setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFormboardAutoplaceTableSymbol(newval)

	def GetFormboardAutorotateConnectorSymbols(self) -> bool:
		"""
		Gets the value of the formboard connector symbols autorotate setting.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFormboardAutorotateConnectorSymbols()

	def SetFormboardAutorotateConnectorSymbols(self, newval:bool) -> bool:
		"""
		Sets the value of the formboard connector symbols autorotate setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFormboardAutorotateConnectorSymbols(newval)

	def GetFormboardBranchAngleStep(self) -> int:
		"""
		Gets the value of the formboard rotate branch angle setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFormboardBranchAngleStep()

	def SetFormboardBranchAngleStep(self, newval:int) -> int:
		"""
		Sets the value of the formboard rotate branch angle setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetFormboardBranchAngleStep(newval)

	def GetSettingValue(self, name:str) -> typing.Union[str,int]:
		"""
		Gets a setting value.

		:param name: Unique name identifying the setting value to retrieve. See Setting Value Names for possible values
		:type str: str

		:return:
		Type: typing.Union[str,int]

		| Return Value | Description |
		|:-----:|:-----|
		| empty | Error occurred |
		| != empty | Setting value supplied |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSettingValue(name)

	def SetSettingValue(self, name:str, value:typing.Union[str,int]) -> typing.Union[str,int]:
		"""
		Sets a setting value.

		:param name: Unique name identifying the setting value to modify. See Setting Value Names for possible values
		:type str: str
		:param value: Setting value to apply
		:type typing.Union[str,int]: typing.Union[str,int]

		:return:
		Type: typing.Union[str,int]

		| Return Value | Description |
		|:-----:|:-----|
		| empty | Error occurred |
		| != empty | Previous setting value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetSettingValue(name, value)

	def GetLevelName(self, level:int) -> str:
		"""
		Gets a display level's name from its number.

		:param level: Number of the display level
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Name&gt;" | Display level name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLevelName(level)

	def GetLevelIndex(self, value:str) -> int:
		"""
		Gets a display level's number from its name.

		:param value: Name of the display level
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Display level number supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLevelIndex(value)

	def GetNewFieldIds(self) -> tuple[int, tuple[int,...]]:
		"""


		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] |  |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetNewFieldIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCadstarCrossProbing(self) -> int:
		"""
		Indicates the project's Cadstar cross probing status.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Cadstar cross probing is active |
		| 0 | Cadstar cross probing is inactive or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetCadstarCrossProbing()

	def GetLastDeletedItems(self, _type:int) -> tuple[int, tuple[int,...]]:
		"""
		Gets the details of the last deleted items.

		:param _type: Item type filter
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | items | tuple[int,...] | Array of item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of item identifiers in ids |
		| 0 | No items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, items = self._obj.GetLastDeletedItems(dummy, _type)
		items = items[1:] if type(items) == tuple and len(items) > 0 else tuple()
		return ret, items

	def GetHyperlinkTextIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the project's hyperlink text items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of hyperlink text items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of hyperlink text items in ids |
		| 0 | No hyperlink text items are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetHyperlinkTextIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAttributeNotInheritable(self, attnam:str) -> int:
		"""
		Indicates whether an attribute is inheritable.

		:param attnam: Attribute name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Attribute is not inheritable |
		| 0 | Attribute is inheritable or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetAttributeNotInheritable(attnam)

	def SetAttributeNotInheritable(self, attnam:str, newval:int) -> int:
		"""
		Sets the inheritable status of an attribute.

		:param attnam: Attribute name
		:type str: str
		:param newval: Inheritable status. If 1, the attribute is not inherited. If 0, the attribute is inherited
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previously attribute was not inheritable |
		| 0 | Previously attribute was inheritable or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetAttributeNotInheritable(attnam, newval)

	def GetTerminalPlanSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's terminal plan sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of terminal plan sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of terminal plan sheet items in ids |
		| 0 | No terminal plan sheets or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTerminalPlanSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def FinalizeTransaction(self) -> int:
		"""
		Commits the changes made in the script so far as a single transaction.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Transaction finalized |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.FinalizeTransaction()

	def GetNextWireNumberFormatted(self) -> str:
		"""
		Get the next available wire number's formatted value and reserves it for use.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;FormattedWireNumber&gt;" | Formatted wire number value |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetNextWireNumberFormatted()

	def GetAllOptionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's variants and options.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of variant and option item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of variant and option items in ids |
		| 0 | No variants and options or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetAllOptionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetOptionAliases(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the names of the project's aliases.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of alias names passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of alias names in ids |
		| 0 | No alias names or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOptionAliases(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetOptionTerms(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the project's Boolean expressions.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of Boolean expressions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of Boolean expressions in ids |
		| 0 | No Boolean expressions or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOptionTerms(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetOptionTermDescription(self, alias:str) -> str:
		"""
		Gets the Boolean expression of an alias.

		:param alias: Alias name
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Expression&gt;" | Boolean expression supplied |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetOptionTermDescription(alias)

	def AddOptionAlias(self, name:str, description:str) -> int:
		"""
		Creates and adds a new alias to the project.

		:param name: Alias name
		:type str: str
		:param description: Alias Boolean expression
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | New alias added to the project |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AddOptionAlias(name, description)

	def DeleteOptionAlias(self, name:str) -> int:
		"""
		Deletes an alias from the project.

		:param name: Alias name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Alias deleted |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.DeleteOptionAlias(name)

	def GetTreeSelectedExternalDocumentIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the external documents selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of external document identifiers |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of external document identifiers in ids |
		| 0 | No external documents selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedExternalDocumentIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetOuterDiameter(self) -> tuple[float, tuple[int,...]]:
		"""
		Gets the outer diameter of wires and conductors.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | float | See table return value |
		| 1 | ids | tuple[int,...] | Array of cables, wires and conductor identifiers passed into the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0.0 | Outer diameter value |
		| 0.0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetOuterDiameter(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetExclusiveMode(self, mode:int) -> int:
		"""
		Sets the exclusive status for the multi-user project.

		:param mode: Exclusive status value. If 1, exclusive status is active. If 0, exclusive status is inactive
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Exclusive mode set for multi-user project |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetExclusiveMode(mode)

	def GetExclusiveMode(self, name:str) -> tuple[int, str]:
		"""
		Gets a multi-user project's exclusive mode and associated user name.

		:param name: Multi-user project name
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | user | str | Last multi-user user name used to open the multi-user project in exclusive mode |

		| Return Value | Description |
		|:-----:|:-----|
		| 2 | Multi-user project is closed in exclusive mode |
		| 1 | Multi-user project is open in exclusive mode |
		| 0 | Multi-user project is not in exclusive mode or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetExclusiveMode(name, dummy)

	def ImportRuplan(self, parameters:list[str]) -> int:
		"""
		Imports a third party project.

		:param parameters: Import parameter values
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.ImportRuplan(parameters)

	def UpdateSubCircuit(self, cmpnam:str) -> int:
		"""
		Updates the project's groups from a subcircuit of the database.

		:param cmpnam: Subcircuit component name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of updated groups |
		| 0 | No groups were updated or no open project |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.UpdateSubCircuit(cmpnam)

	def UpdateAllSubCircuits(self) -> int:
		"""
		Updates the project's groups from the database.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of updated groups |
		| 0 | No groups were updated or no open project |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.UpdateAllSubCircuits()

	def UpdatePart(self, filename:str) -> int:
		"""
		Updates the project's groups from a part file.

		:param filename: External part file (.e3p) path and name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of updated groups |
		| 0 | No groups were updated or no open project |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.UpdatePart(filename)

	def UpdateAllParts(self) -> int:
		"""
		Updates the project's groups from their part files.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of updated groups |
		| 0 | No groups were updated or no open project |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.UpdateAllParts()

	def StoreVariantVisibility(self, filename:str) -> int:
		"""
		Saves variant/option or group/package visibility to a file.

		:param filename: External XML file path and name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Visibility status saved |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.StoreVariantVisibility(filename)

	def RestoreVariantVisibility(self, filename:str) -> int:
		"""
		Sets variant/option or group/package visibility from a file.

		:param filename: External XML file path and name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Visibility status set |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.RestoreVariantVisibility(filename)

	def CreateInlineConnectorsEx(self, flags:int, fromPinIDs:list[int], toPinIDs:list[int], viewNumbers:list[int], fBSheetIDs:list[int], compName:str, compVersion:str) -> tuple[int, tuple[int,...], tuple[int,...], tuple[tuple[int,int,int,int],...]]:
		"""
		Creates new inline connector items on formboard sheets.

		:param flags: Not used
		:type int: int
		:param fromPinIDs: Array of source pin identifiers
		:type list[int]: list[int]
		:param toPinIDs: Array of target pin identifiers
		:type list[int]: list[int]
		:param viewNumbers: Array with view numbers
		:type list[int]: list[int]
		:param fBSheetIDs: Array of sheet identifiers
		:type list[int]: list[int]
		:param compName: Component name defined in the database
		:type str: str
		:param compVersion: Component version defined in the database
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | newCoreIDs | tuple[int,...] | Array of created conductor identifiers |
		| 2 | newDeviceIDs | tuple[int,...] | Array of created device identifiers |
		| 3 | newSymbolIDs | tuple[tuple[int,int,int,int],...] | Array defining the connection information and symbol identifiers |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of new inline connectors |
		| 0 | No project open or no new inline connectors, Successful if newSymbolIDs contains items |
		| -1 | compName and compVersion connector does not have enough pins |
		| -2 | compName and compVersion are invalid |
		| -3 | No mating connector found |
		| -4 | Connector symbol could not be placed |
		| -5 | No graphical connection for placing the default symbol could be determined |
		| -6 | fromPinIDs and toPinIDs have different number of pins |
		| -7 | compName and compVersion define a connector with inserts |
		| -8 | fromPinIDs or toPinIDs contain a pin of a busbar device, Available since in v2022-23.00 |

		Available since E3.series TLB-Versions: 9.00
		"""
		dummy=0
		ret, newCoreIDs, newDeviceIDs, newSymbolIDs = self._obj.CreateInlineConnectorsEx(dummy, dummy, flags, fromPinIDs, toPinIDs, viewNumbers, fBSheetIDs, compName, compVersion, dummy)
		newCoreIDs = newCoreIDs[1:] if type(newCoreIDs) == tuple and len(newCoreIDs) > 0 else tuple()
		newDeviceIDs = newDeviceIDs[1:] if type(newDeviceIDs) == tuple and len(newDeviceIDs) > 0 else tuple()
		newSymbolIDs = newSymbolIDs[1:] if type(newSymbolIDs) == tuple and len(newSymbolIDs) > 0 else tuple()
		return ret, newCoreIDs, newDeviceIDs, newSymbolIDs

	def GetCurrentUserName(self) -> str:
		"""
		Gets the user name used to connect to the multi-user server.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;UserName&gt;" | Multi-user user name |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 9.01, 8.52
		"""
		return self._obj.GetCurrentUserName()

	def GetTreeSelectedSheetIdsByFolder(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the sheets in selected folders in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheets in ids |
		| 0 | No folders containing sheets are selected or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedSheetIdsByFolder(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedExternalDocumentIdsByFolder(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the external documents in selected folders in the  project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of  external document identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of external documents in ids |
		| 0 | No folders containing  external documents are selected or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedExternalDocumentIdsByFolder(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedAllDeviceIdsByFolder(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the devices in selected folders in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of identifiers in ids |
		| 0 | No folders containing devices are selected or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedAllDeviceIdsByFolder(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateFunctionalUnitObject(self) -> FunctionalUnit:
		"""
		Creates an e3FunctionalUnit object.

		:return:
		Type: FunctionalUnit

		Available since E3.series TLB-Versions: 9.10
		"""
		return FunctionalUnit(self._obj.CreateFunctionalUnitObject())

	def CreateFunctionalPortObject(self) -> FunctionalPort:
		"""
		Create an e3FunctionalPort object.

		:return:
		Type: FunctionalPort

		Available since E3.series TLB-Versions: 9.10
		"""
		return FunctionalPort(self._obj.CreateFunctionalPortObject())

	def GetFunctionalUnitIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's functional units.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of functional unit identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of functional unit identifiers in ids |
		| 0 | No functional units or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		dummy=0
		ret, ids = self._obj.GetFunctionalUnitIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGetterOptionHandlingMode(self) -> int:
		"""
		Indicates how identifiers and values supplied from e3Job object functions are handled according to the active variants/options.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..2 | Option handling mode |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.GetGetterOptionHandlingMode()

	def SetGetterOptionHandlingMode(self, mode:int) -> int:
		"""
		Sets how identifiers and values supplied from e3Job object functions are handled according to the active variants/options.

		:param mode: Option handling mode to apply
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..2 | Previous option handling mode value |
		| 0 | Previous option handling mode value or an error occurred |

		Available since E3.series TLB-Versions: 9.10
		"""
		return self._obj.SetGetterOptionHandlingMode(mode)

	def ActivateOptionAlias(self, alias:str) -> int:
		"""
		Sets the project's active alias.

		:param alias: Name of alias to activate
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Alias activated |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 9.13
		"""
		return self._obj.ActivateOptionAlias(alias)

	def CreateConnectLineObject(self) -> ConnectLine:
		"""
		Creates an e3ConnectLine object.

		:return:
		Type: ConnectLine

		Available since E3.series TLB-Versions: 9.22
		"""
		return ConnectLine(self._obj.CreateConnectLineObject())

	def GetAllSheetIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet items in ids |
		| 0 | No sheets or an error occurred |

		Available since E3.series TLB-Versions: 9.30
		"""
		dummy=0
		ret, ids = self._obj.GetAllSheetIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def SetConnectionTargetFormat(self, txttyp:int, flags:int, entire_prefix:str, entire_suffix:str, count:int, prefix:list[str], name:list[str], funct:list[int]) -> int:
		"""
		Sets the values of the connection target format settings.

		:param txttyp: Text type. value defined as a. Connection Target
		:type int: int
		:param flags: Flag setting values
		:type int: int
		:param entire_prefix: Prefix setting value
		:type str: str
		:param entire_suffix: Suffix setting value
		:type str: str
		:param count: Number of items in. prefix. ,. name. and. funct. arrays
		:type int: int
		:param prefix: Array of assigned prefix setting values
		:type list[str]: list[str]
		:param name: Array of assigned attributes and text types setting values
		:type list[str]: list[str]
		:param funct: Assigned setting value flags
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Setting values applied or no project open |
		| 1..2 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetConnectionTargetFormat(txttyp, flags, entire_prefix, entire_suffix, count, prefix, name, funct)

	def GetConnectionTargetFormat(self, txttyp:int) -> tuple[int, int, str, str, int, tuple[str,...], tuple[str,...], tuple[int,...]]:
		"""
		Gets the values of the connection target format settings.

		:param txttyp: Text type. value defined as a. Connection Target
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | flags | int | Flag setting values |
		| 2 | entire_prefix | str | Prefix setting value |
		| 3 | entire_suffix | str | Suffix setting value |
		| 4 | count | int | Number of items in. prefix. ,. name. and. funct. arrays |
		| 5 | prefix | tuple[str,...] | Array of assigned prefix setting values |
		| 6 | name | tuple[str,...] | Array of assigned attributes and text types setting values |
		| 7 | funct | tuple[int,...] | Assigned setting value flags |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Setting values supplied |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, flags, entire_prefix, entire_suffix, count, prefix, name, funct = self._obj.GetConnectionTargetFormat(txttyp, dummy, dummy, dummy, dummy, dummy, dummy, dummy)
		prefix = prefix[1:] if type(prefix) == tuple and len(prefix) > 0 else tuple()
		name = name[1:] if type(name) == tuple and len(name) > 0 else tuple()
		funct = funct[1:] if type(funct) == tuple and len(funct) > 0 else tuple()
		return ret, flags, entire_prefix, entire_suffix, count, prefix, name, funct

	def SetUnlockPassword(self, oldval:str, newval:str) -> int:
		"""
		Sets a new password for changing project items' lock status.

		:param oldval: Current password
		:type str: str
		:param newval: New password
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Password changed |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetUnlockPassword(oldval, newval)

	def SetConnectorSymbolFormat(self, texttypes:list[int], dispflags:list[int]) -> int:
		"""
		Sets the values of the connector symbols' defined text visibility settings.

		:param texttypes: Array of text type items. See Text Types for a list of predefined text type values and descriptions.
		:type list[int]: list[int]
		:param dispflags: Array of display flag setting values
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Number of items in textypes and dispflags |
		| 1 | No project open |
		| 2..3 | Error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.SetConnectorSymbolFormat(texttypes, dispflags)

	def GetConnectorSymbolFormat(self) -> tuple[int, tuple[int,...], tuple[int,...]]:
		"""
		Gets the values of the connector symbols' defined text visibility settings.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | texttypes | tuple[int,...] | Array of text type items. See Text Types for a list of predefined text type values and descriptions. |
		| 2 | dispflags | tuple[int,...] | Array of display flag setting values |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in textypes and dispflags |
		| 0 | textypes and dispflags have no values or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, texttypes, dispflags = self._obj.GetConnectorSymbolFormat(dummy, dummy)
		texttypes = texttypes[1:] if type(texttypes) == tuple and len(texttypes) > 0 else tuple()
		dispflags = dispflags[1:] if type(dispflags) == tuple and len(dispflags) > 0 else tuple()
		return ret, texttypes, dispflags

	def GetHarnessIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's harness items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of harness item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of harness item identifiers in ids |
		| 0 | No harness items or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.GetHarnessIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateSignalClassObject(self) -> SignalClass:
		"""
		Creates an e3SignalClass object.

		:return:
		Type: SignalClass

		Available since E3.series TLB-Versions: 10.00
		"""
		return SignalClass(self._obj.CreateSignalClassObject())

	def GetSignalClassIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's signal classes.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of signal class identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of signal class items in ids |
		| 0 | No signal classes or an error occurred |

		Available since E3.series TLB-Versions: 10.00
		"""
		dummy=0
		ret, ids = self._obj.GetSignalClassIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def StoreOptionVisibility(self, filename:str) -> int:
		"""
		Saves variant/option or group/package visibility to a file.

		:param filename: External XML file path and name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Visibility status saved |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.StoreOptionVisibility(filename)

	def RestoreOptionVisibility(self, filename:str) -> int:
		"""
		Sets variant/option or group/package visibility from a file.

		:param filename: External XML file path and name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Visibility status set |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.RestoreOptionVisibility(filename)

	def GetOptionLockID(self) -> int:
		"""
		Gets the active and locked variant and option configuration identifier.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Active and locked variant and option configuration identifier |
		| 0 | No active and locked variant and option configuration or an error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.GetOptionLockID()

	def LoadOptionStructure(self, filename:str) -> int:
		"""
		Loads the project variants/options and groups/packages from an XML file.

		:param filename: Path and file name to load from
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Variants/options and groups/packages loaded from file |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.LoadOptionStructure(filename)

	def SaveOptionStructure(self, filename:str) -> int:
		"""
		Saves the project variants/options and groups/packages to an XML file.

		:param filename: Path and file name to save to
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Variants/options and groups/packages saved to file |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.SaveOptionStructure(filename)

	def SaveSheetsAsSingleUser(self, name:str, shtids:list[int], compressed:bool=True, completeName:str="", completeCompressed:bool=True) -> int:
		"""
		Saves sheets and their content to a single user E³.series project file.

		:param name: Path and name of the file to save the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project sheets to
		:type str: str
		:param shtids: Array of identifiers of sheets to save
		:type list[int]: list[int]
		:param compressed: Indicates whether the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project sheets file should be compressed. If 1, the file is compressed. If 0, the file is not compressed., defaults to True
		:type bool: bool
		:param completeName: Path and name of the file to save the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project to. Default value is "<Empty>", defaults to ""
		:type str: str
		:param completeCompressed: Indicates whether the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project file should be compressed. If 1, the file is compressed. If 0, the file is not compressed., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Sheets saved in a single user project |
		| -2 | name or completeName file has an invalid path or format |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.SaveSheetsAsSingleUser(name, shtids, compressed, completeName, completeCompressed)

	def GetOptionLockIDs(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the active and locked variant and option configuration identifiers.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of variant and option configuration identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of active and locked variant and option configurations |
		| 0 | No active and locked variant and option configurations or an error occurred |

		Available since E3.series TLB-Versions: 10.10
		"""
		dummy=0
		ret, ids = self._obj.GetOptionLockIDs(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def LoadSignalStructure(self, filename:str) -> int:
		"""
		Loads signals from an XML signal structure file.

		:param filename: Path and file name to load from
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Signals loaded into the project |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.20
		"""
		return self._obj.LoadSignalStructure(filename)

	def GetSignalStructureNodeId(self) -> int:
		"""
		Gets the signal structure node item identifier.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Signal structure node item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 10.20
		"""
		return self._obj.GetSignalStructureNodeId()

	def RunUnitTests(self, tests:list[str]) -> tuple[int, int, int, int, tuple[str,...], tuple[str,...]]:
		"""
		Internal function for debugging purposes.

		:param tests: Indicates what information to retrieved
		:type list[str]: list[str]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | fixtures | int | Number of fixtures tested |
		| 2 | testcases | int | Number of test cases tested |
		| 3 | succeeded | int | Number of succeeded unit tests |
		| 4 | failed | tuple[str,...] | List of failed unit tests |
		| 5 | inconclusive | tuple[str,...] | List of inconclusive unit tests |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Unit tests run |

		Available since E3.series TLB-Versions: 10.20
		"""
		dummy=0
		ret, fixtures, testcases, succeeded, failed, inconclusive = self._obj.RunUnitTests(tests, dummy, dummy, dummy, dummy, dummy)
		failed = failed[1:] if type(failed) == tuple and len(failed) > 0 else tuple()
		inconclusive = inconclusive[1:] if type(inconclusive) == tuple and len(inconclusive) > 0 else tuple()
		return ret, fixtures, testcases, succeeded, failed, inconclusive

	def LockVariantStructure(self, password:str) -> int:
		"""
		Locks the project's variant/option structure.

		:param password: Password to change the variant/option structure lock status
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Variant/option structure locked |
		| -2 | password is invalid |
		| -1009 | No project open |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.LockVariantStructure(password)

	def UnlockVariantStructure(self, password:str) -> int:
		"""
		Unlocks the project's variant/option structure.

		:param password: Password to change the variant/option structure lock status
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Variant/option structure unlocked |
		| -2 | password is invalid |
		| -1009 | No project open |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.UnlockVariantStructure(password)

	def SetUnlockVariantStructurePassword(self, oldval:str, newval:str) -> int:
		"""
		Sets a new password for changing the project's variant/option structure lock status.

		:param oldval: Current password
		:type str: str
		:param newval: New password
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Password changed |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.SetUnlockVariantStructurePassword(oldval, newval)

	def GetParentSheetIds(self, flags:int) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's parent sheets.

		:param flags: Sheet filters
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of parent sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet items in ids |
		| 0 | No sheets or an error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		dummy=0
		ret, ids = self._obj.GetParentSheetIds(flags, dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAllParentSheetIds(self, flags:int) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's parent sheets.

		:param flags: Sheet filters
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of parent sheet identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of sheet items in ids |
		| 0 | No sheets or an error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		dummy=0
		ret, ids = self._obj.GetAllParentSheetIds(flags, dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ImportForeignProject(self, parameters:list[str]) -> int:
		"""
		Imports a third party project.

		:param parameters: Import parameter values
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Third party project imported |
		| 1 | No license to import a third party project available |
		| 2 | Error occurred |

		Available since E3.series TLB-Versions: 10.30
		"""
		return self._obj.ImportForeignProject(parameters)

	def PlacePartInteractively(self, name:str, version:str) -> tuple[int, float, float, float]:
		"""
		Places a subcircuit on a sheet interactively.

		:param name: Name of a subcircuit in the database or a path and name of the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. part file (.e3p)
		:type str: str
		:param version: Subcircuit version in the database
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis |
		| 2 | y | float | Placement position on the y-axis |
		| 3 | rot | float | Rotation of the subcircuit in a counterclockwise direction |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;1 | Identifier of the sheet on which the subcircuit was placed |
		| 1 | Subcircuit could not be interactively placed because it contains sheets |
		| 0 | Subcircuit placement is aborted |
		| -1 | No project open |
		| -2 or -3 | name not found in database or is a valid file |
		| -4 or -5 | Invalid file format |
		| -6 or -7 | Placement not possible |
		| -8 | E³.series modal dialog open |
		| -9 | Invalid file version |
		| -10 | Error occurred |

		Available since E3.series TLB-Versions: 11.00
		"""
		dummy=0
		return self._obj.PlacePartInteractively(name, version, dummy, dummy, dummy)

	def ImportDrawingEx(self, name:str, unique:int, flags:int, posx:float=-950309, posy:float=-950309) -> int:
		"""
		Imports a drawing file into the project.

		:param name: Path and file name of the import file
		:type str: str
		:param unique: Indicates whether new sheets will be renumbered with unique names. If the value is 0, new sheets will not be renumbered with unique names. If the value is greater than 0, new sheets will be renumbered with unique names if necessary
		:type int: int
		:param flags: Import option flags. If the value is 0, no import options are applied. If the value is 4, the import file content is paste extended into the clipboard
		:type int: int
		:param posx: Placement reference point of the file content on the x-axis of the sheet. 50309, defaults to -950309
		:type float: float
		:param posy: Placement reference point of the file content on the y-axis of the sheet. 50309, defaults to -950309
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 5 | Drawing imported however it contains duplicate part identifier values, Available since v2018-19.46, v2019-20.28 and v2020-21.12 |
		| 4 | Drawing imported however the XML project structure is missing or differs from the project structure |
		| 0 | Drawing imported into the project or no license available |
		| -1 | No project open, part file could not be read or the part file does not include a sheet border |
		| -2 | Error occurred |
		| -3 | Error occurred |

		Available since E3.series TLB-Versions: 11.00, 10.46
		"""
		return self._obj.ImportDrawingEx(name, unique, flags, posx, posy)

	def GetLineWidthEx(self) -> float:
		"""
		Gets the value of the connect line width setting.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0.0 | Setting value supplied |

		Available since E3.series TLB-Versions: 11.00
		"""
		return self._obj.GetLineWidthEx()

	def PlacePartInteractivelyEx(self, name:str, version:str, flags:int) -> tuple[int, float, float, float]:
		"""
		Places a subcircuit on a sheet interactively.

		:param name: Name of a subcircuit in the database or a path and name of the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. part file (.e3p)
		:type str: str
		:param version: Subcircuit version in the database
		:type str: str
		:param flags: Placement options
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | x | float | Placement position on the x-axis |
		| 2 | y | float | Placement position on the y-axis |
		| 3 | rot | float | Rotation of the subcircuit in a counterclockwise direction |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;1 | Identifier of the sheet on which the subcircuit was placed |
		| 1 | Subcircuit could not be interactively placed because it contains sheets |
		| 0 | Subcircuit placement is aborted |
		| -1 | No project open |
		| -2 or -3 | name not found in database or is a valid file |
		| -4 or -5 | Invalid file format |
		| -6 or -7 | Placement not possible |
		| -8 | E³.series modal dialog open |
		| -9 | Invalid file version |
		| -10 | Error occurred |

		Available since E3.series TLB-Versions: 11.01
		"""
		dummy=0
		return self._obj.PlacePartInteractivelyEx(name, version, flags, dummy, dummy, dummy)

	def GetDisplayOptionsAll(self) -> int:
		"""
		Gets the value of the display all options setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 11.21, 14.00
		"""
		return self._obj.GetDisplayOptionsAll()

	def SetDisplayOptionsAll(self, newval:bool) -> int:
		"""
		Sets the value of the display all options setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 11.21, 14.00
		"""
		return self._obj.SetDisplayOptionsAll(newval)

	def GetDisplayOptionsNone(self) -> int:
		"""
		Gets the value of the display no options setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 11.21, 14.00
		"""
		return self._obj.GetDisplayOptionsNone()

	def SetDisplayOptionsNone(self, newval:bool) -> int:
		"""
		Sets the value of the display no options setting.

		:param newval: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 11.21, 14.00
		"""
		return self._obj.SetDisplayOptionsNone(newval)

	def HighlightAttribute(self, attnam:str, attvalue:str, colour:int, width:float) -> int:
		"""
		Highlights items with the attribute name and value.

		:param attnam: Name of the attribute
		:type str: str
		:param attvalue: Attribute value
		:type str: str
		:param colour: Highlight color
		:type int: int
		:param width: Highlight border width
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Items highlighted or no open project |

		Available since E3.series TLB-Versions: 11.70
		"""
		return self._obj.HighlightAttribute(attnam, attvalue, colour, width)

	def ResetHighlightAttribute(self, attnam:str, attvalue:str) -> int:
		"""
		Resets all items highlighted with the attribute name and value to their normal display mode.

		:param attnam: Attribute name
		:type str: str
		:param attvalue: Attribute value
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Highlighted items reset |

		Available since E3.series TLB-Versions: 11.70
		"""
		return self._obj.ResetHighlightAttribute(attnam, attvalue)

	def GetUnplacedGroupIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's unplaced group items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of unplaced group item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of unplaced group item identifiers in ids |
		| 0 | No unplaced group items or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		ret, ids = self._obj.GetUnplacedGroupIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ExportXVL(self, file:str, ids:list[int]=pythoncom.Empty) -> int:
		"""
		Exports panel data to an XVL file.

		:param file: Path and file name of the export file
		:type str: str
		:param ids: Array of item identifiers to be exported. All panel items are exported if the array is empty. Default value is an empty array, defaults to pythoncom.Empty
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Items are exported |
		| 1 | No project open |
		| 2 | No XVL license available |
		| 3 or 4 | Required sheets could not be checked out |
		| 5 | ids contains only invalid panel items |
		| 6 | Export file could not be written |

		Available since E3.series TLB-Versions: 11.80
		"""
		return self._obj.ExportXVL(file, ids)

	def GetResultText(self, index:int) -> tuple[int, tuple[str,...]]:
		"""
		Gets the lines of text displayed in the E³.series Results window.

		:param index: Start position of text lines to retrieve
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | lst | tuple[str,...] | Array of displayed text lines passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of displayed text lines |
		| 0 | No displayed text lines or an error occurred |

		Available since E3.series TLB-Versions: 11.80
		"""
		dummy=0
		ret, lst = self._obj.GetResultText(index, dummy)
		lst = lst[1:] if type(lst) == tuple and len(lst) > 0 else tuple()
		return ret, lst

	def GetSelectedDimensionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the dimensions selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of dimension identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of dimension identifiers in ids |
		| 0 | No selected dimensions or an error occurred |

		Available since E3.series TLB-Versions: 14.01
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedDimensionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def LoadOptionStructureEx(self, filename:str, flags:int) -> int:
		"""
		Loads the project variants/options and groups/packages from an XML file.

		:param filename: Path and file name to load from
		:type str: str
		:param flags: Loading option structure flags
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Variants/options and groups/packages loaded from file |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 14.12
		"""
		return self._obj.LoadOptionStructureEx(filename, flags)

	def ExportSVGBySheet(self, file:str, shtIds:list[int]) -> int:
		"""
		Exports sheets to scalable vector graphics (SVG) files.

		:param file: Path and file name of the export files
		:type str: str
		:param shtIds: Array of sheet identifiers to export passed into the function
		:type list[int]: list[int]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet area exported to file |
		| -1 | Error occurred |
		| -2 | No project open |
		| -3 | No license available |
		| -4 | file is invalid or file could not be written |
		| -5 | shtid is invalid or contains an invalid sheet identifier |

		Available since E3.series TLB-Versions: 14.70
		"""
		ret = self._obj.ExportSVGBySheet(file, shtIds)
		return ret[0]

	def ExportSVGByArea(self, file:str, shtId:int, xMin:float, yMin:float, xMax:float, yMax:float, originX:float, originY:float, selectionMode:int) -> int:
		"""
		Exports an area of a sheet to a scalable vector graphics (SVG) file.

		:param file: Path and file name of the export file
		:type str: str
		:param shtId: Identifier of sheet with area to export
		:type int: int
		:param xMin: First position of the area on the x-axis
		:type float: float
		:param yMin: First position of the area on the y-axis
		:type float: float
		:param xMax: Second position of the area on the x-axis
		:type float: float
		:param yMax: Second position of the area on the y-axis
		:type float: float
		:param originX: Position of the origin of the area on the x-axis
		:type float: float
		:param originY: Position of the origin of the area on the y-axis
		:type float: float
		:param selectionMode: Indicates how items in the area are selected for export. If 0, all items within the area or touching the area's border are exported. If 1, only items within the area's border are exported
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet area exported to file |
		| -1 | Error occurred |
		| -2 | No project open |
		| -3 | No license available |
		| -4 | file is invalid or file cannot be written |
		| -5 | shtid is invalid |
		| -6 | xMin, yMin, xMax, yMax, originX or originY is invalid |
		| -7 | selectionMode is invalid |

		Available since E3.series TLB-Versions: 14.70
		"""
		return self._obj.ExportSVGByArea(file, shtId, xMin, yMin, xMax, yMax, originX, originY, selectionMode)

	def ExportSVGBySheetEx(self, file:str, options:int) -> tuple[int, list[int]]:
		"""
		Exports sheets to scalable vector graphics (SVG) files.

		:param file: Path and file name of the export files
		:type str: str
		:param options: Export option flags
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | shtIds | list[int] | Array of sheet identifiers to export passed into the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Sheet area exported to file |
		| -1 | Error occurred |
		| -2 | No project open |
		| -3 | No license available |
		| -4 | file is invalid or file could not be written |
		| -5 | shtid is invalid or contains an invalid sheet identifier |

		Available since E3.series TLB-Versions: 15.01
		"""
		dummy=0
		ret, shtIds = self._obj.ExportSVGBySheetEx(file, dummy, options)
		shtIds = shtIds[1:] if type(shtIds) == list and len(shtIds) > 0 else []
		return ret, shtIds

	def ExportPDFEx(self, file:str, shtids:list[int], options:int, itemListType:int, items:list[int], alternativeColour:int, imageBrightness:int, password:str="") -> int:
		"""
		Exports sheets as an Adobe Acrobat© PDF file.

		:param file: Path and file name of the export file
		:type str: str
		:param shtids: Array of sheet item identifiers to be exported passed into the function
		:type list[int]: list[int]
		:param options: Export option flags
		:type int: int
		:param itemListType: Indicates how items should be shown in the export file
		:type int: int
		:param items: Array of item identifiers subject to different display criteria in the export file passed into the function
		:type list[int]: list[int]
		:param alternativeColour: Alternative color for relevant items to use. See Color for possible values
		:type int: int
		:param imageBrightness: Brightness level of images within the export file
		:type int: int
		:param password: A password is required if. options. includes values for printing, modifying or copying not allowed. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Sheets are exported |
		| -1 | Error occurred |
		| -2 | No project open |
		| -3 | No license available |
		| -4 | file is invalid or no access/write permissions |
		| -5 | shtids contains invalid sheet identifiers |
		| -6 | Invalid Acrobat version |
		| -7 | items contains invalid item identifiers |
		| -8 | alternativeColour is invalid |
		| -9 | imageBrightness is invalid |
		| -10 | password is invalid |
		| -11 | Out of date external document, Available since v2018-19.00 |
		| -12 | Invalid link to external document, Available since v2018-19.00 |
		| -13 | Document permissions are not available in PDF/A standard, Available since v2022-23.61 and v2023-24.31 |
		| -14 | External documents are not available in PDF/A standard, Available since v2022-23.61 and v2023-24.31 |
		| -15 | 3D export is not available in PDF/A standard, Available since v2022-23.61 and v2023-24.31 |
		| -16 | 3D export is not available in Acrobat previous to version 9                        Available since v2022-23.61 and v2023-24.31 |
		| -17 | Password is not available previous to Acrobat version, 7                        Available since v2022-23.61 and v2023-24.22 |
		| -18 | No sheets found to export, Available since v2022-23.61 and v2023-24.31 |
		| -19 | Highlight jump targets is not available with the PDF/A standard                        Available since v2026-26.00 |

		Available since E3.series TLB-Versions: 16.00
		"""
		ret = self._obj.ExportPDFEx(file, shtids, options, itemListType, items, alternativeColour, imageBrightness, password)
		return ret[0]

	def SetOptionExpressions(self, itemarray:list[int], expressions:list[str]) -> int:
		"""
		Replaces project items' option expressions.

		:param itemarray: Array of item identifiers
		:type list[int]: list[int]
		:param expressions: Array of strings of all option names, Boolean expressions or alias names of Boolean expressions
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Option expressions are applied to the items |
		| -1 | No project open |
		| -2 | itemarray and expressions are not both arrays |
		| -3 | itemarray and expressions are different sizes |
		| -4 | Locked items have not been assigned new expressions |
		| -5 | itemarray contains no items |

		Available since E3.series TLB-Versions: 16.70
		"""
		return self._obj.SetOptionExpressions(itemarray, expressions)

	def GetBomPartList(self, consumer:str, outputFormatVersion:str, flags:int, keyAttribut:str, quantityAttribut:str, lengthAttribut:str, additionalAttributes:list[str]) -> tuple[int, tuple[tuple[typing.Union[str,int],...],...]]:
		"""
		Gets the bill of material list of parts.

		:param consumer: File format specification and name
		:type str: str
		:param outputFormatVersion: Output format version
		:type str: str
		:param flags: Output option flags
		:type int: int
		:param keyAttribut: Name of the attribute value to be used as the. KeyAttribute. in the output. If "<EMPTY>", "ENTRY" will be used
		:type str: str
		:param quantityAttribut: Name of the attribute value to be used as the. Quantity. in the output. If "<EMPTY>", the value of 1 will be used
		:type str: str
		:param lengthAttribut: Name of the attribute value to be used as the. Length. in the output. If "<EMPTY>", the physical length will be used
		:type str: str
		:param additionalAttributes: Array of internal attribute names to be included in the output
		:type list[str]: list[str]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | result | tuple[tuple[typing.Union[str,int],...],...] | Array containing the output passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of parts found |
		| -1 | consumer is invalid |
		| -2 | CSV file could not be written |
		| -3 | outputFormatVersion is invalid |
		| -4 | No project open, Introduced in v2018-19.43 and v2019-20.20 |

		Available since E3.series TLB-Versions: 17.01, 16.13
		"""
		dummy=0
		return self._obj.GetBomPartList(consumer, outputFormatVersion, flags, keyAttribut, quantityAttribut, lengthAttribut, additionalAttributes, dummy)

	def GetBooleanState(self, expression:str) -> int:
		"""
		Gets the current status of a Boolean expression.

		:param expression: Expression to evaluate
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Expression evaluates as True |
		| 0 | Expression evaluates as False |
		| -1 | expression is invalid, Available since v2018-19.00 |
		| -2 | No project open, Available since v2018-19.00 |

		Available since E3.series TLB-Versions: 17.01, 16.13
		"""
		return self._obj.GetBooleanState(expression)

	def SaveProjectWithoutVariants(self, name:str, compressed:bool=True) -> int:
		"""
		Saves an E³.series project to a file without including any inactive variants.

		:param name: Target project file name and path
		:type str: str
		:param compressed: Indicates if the saved file should be compressed. If 1, the saved file is compressed. If 0, the saved file is not compressed., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Granular Design project was saved to folder |
		| -1 | No E³.series project open or invalid license |
		| -2 | Invalid file extension |
		| -3 | No variants exist in project |
		| -4 | All variants active |
		| -5 | Error deleting variants |
		| -6 | Project failed to be saved |
		| -7 | Invalid Granular container license, Available since v2021-22.00 |

		Available since E3.series TLB-Versions: 17.13
		"""
		return self._obj.SaveProjectWithoutVariants(name, compressed)

	def CreateAttributeDefinitionObject(self) -> AttributeDefinition:
		"""
		Creates an e3AttributeDefinition object.

		:return:
		Type: AttributeDefinition

		Available since E3.series TLB-Versions: 17.13, 16.19, 15.31
		"""
		return AttributeDefinition(self._obj.CreateAttributeDefinitionObject())

	def GetAttributeDefinitionIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the attributes definitions from the project.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of attribute definitions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No attribute definitions are found or an error occurred |

		Available since E3.series TLB-Versions: 17.13, 16.19, 15.31
		"""
		dummy=0
		ret, ids = self._obj.GetAttributeDefinitionIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetGeneratedWireNameFormatEx(self) -> tuple[int, tuple[str,...], tuple[int,...], tuple[str,...]]:
		"""
		Gets the values of the wire name format settings.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | attPrefix | tuple[str,...] | Array of attribute prefixes |
		| 2 | attType | tuple[int,...] | Array of attribute types |
		| 3 | attName | tuple[str,...] | Array of attribute names |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Setting values supplied or no project open |
		| 1 | No wire name format setting values found |
		| 2 | attType has invalid values |

		Available since E3.series TLB-Versions: 17.80
		"""
		dummy=0
		ret, attPrefix, attType, attName = self._obj.GetGeneratedWireNameFormatEx(dummy, dummy, dummy)
		attPrefix = attPrefix[1:] if type(attPrefix) == tuple and len(attPrefix) > 0 else tuple()
		attType = attType[1:] if type(attType) == tuple and len(attType) > 0 else tuple()
		attName = attName[1:] if type(attName) == tuple and len(attName) > 0 else tuple()
		return ret, attPrefix, attType, attName

	def SetGeneratedWireNameFormatEx(self, attPrefix:list[str], attType:list[int], attName:list[str]) -> int:
		"""
		Sets the values of the wire name format settings.

		:param attPrefix: Array of attribute prefixes
		:type list[str]: list[str]
		:param attType: Array of attribute types
		:type list[int]: list[int]
		:param attName: Array of attribute names
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Setting values supplied |
		| 1 | attPrefix, attType and attName are different sizes |
		| 2 | attPrefix, attType and attName contain more than 12 elements |
		| 3 | attPrefix contains elements with invalid characters |
		| 4 | attName contains invalid elements for  wire attributes |
		| 5 | attName contains elements not for wire attributes |
		| 6 | attName contains invalid elements for  counters |
		| 7 | attType contains invalid elements |

		Available since E3.series TLB-Versions: 17.80
		"""
		return self._obj.SetGeneratedWireNameFormatEx(attPrefix, attType, attName)

	def GetCavityPartIds(self, _type:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's cavity parts.

		:param _type: Cavity part type filter., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of cavity part identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of cavity part identifiers in ids |
		| 0 | No cavity parts |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 17.80
		"""
		dummy=0
		ret, ids = self._obj.GetCavityPartIds(dummy, _type)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateCavityPartObject(self) -> CavityPart:
		"""
		Creates an e3CavityPart object.

		:return:
		Type: CavityPart

		Available since E3.series TLB-Versions: 17.80
		"""
		return CavityPart(self._obj.CreateCavityPartObject())

	def SaveTableConfiguration(self, file:str, table:int) -> int:
		"""
		Saves a table configuration to a BDT file.

		:param file: Path and file name of a BDT file (.bdt)
		:type str: str
		:param table: Value representing a table type
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Table is saved to file |
		| -1 | No project open |
		| -2 | Incorrect file extension |
		| -3 | table value is invalid |
		| -4 | Table not found |
		| -5 | Error writing to file |

		Available since E3.series TLB-Versions: 18.80
		"""
		return self._obj.SaveTableConfiguration(file, table)

	def LoadTableConfiguration(self, file:str, table:int) -> int:
		"""
		Loads a table configuration from a BDT file.

		:param file: Path and file name of a BDT file (.bdt)
		:type str: str
		:param table: Value representing a table type
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Table is loaded from file |
		| -1 | No project open |
		| -2 | Incorrect file extension |
		| -3 | table value is invalid |
		| -4 | Table not found |
		| -5 | Error reading file |

		Available since E3.series TLB-Versions: 18.80
		"""
		return self._obj.LoadTableConfiguration(file, table)

	def RemoveAccessControlInformation(self) -> int:
		"""
		Removes E³PluginAccessControl information from the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value always returned |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.RemoveAccessControlInformation()

	def IsVariantStructurePasswordProtected(self) -> int:
		"""
		Indicates whether the locking of variant/option structure is password protected.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Variant/option structure is password protected |
		| 0 | Variant/option structure is not password protected or no project is open |

		Available since E3.series TLB-Versions: 19.00
		"""
		return self._obj.IsVariantStructurePasswordProtected()

	def GetClipboardIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's clipboard items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of clipboard item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of clipboard item identifiers in ids |
		| 0 | No clipboard items |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 19.00, 18.30
		"""
		dummy=0
		ret, ids = self._obj.GetClipboardIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateClipboardObject(self) -> Clipboard:
		"""
		Creates an e3Clipboard object.

		:return:
		Type: Clipboard

		Available since E3.series TLB-Versions: 19.00, 18.30
		"""
		return Clipboard(self._obj.CreateClipboardObject())

	def GetGUIDOfId(self, id:int) -> str:
		"""
		Gets the globally unique identifier from the identifier of an E³.series item.

		:param id: Item identifier
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GUID&gt;" | Globally unique identifier of the E³.series item |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.GetGUIDOfId(id)

	def GetIdOfGUID(self, guid:str) -> int:
		"""
		Gets the identifier from the globally unique identifier of an E³.series item.

		:param guid: Globally unique item identifier
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the E³.series item |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.GetIdOfGUID(guid)

	def SaveAsGranularDesignProject(self, folder:str, options:int) -> int:
		"""
		Saves an E³.series project to a Granular Design project.

		:param folder: Path to target folder. Before v2021-22.00 folder is a path to a Granular e3sx container file
		:type str: str
		:param options: Unused: reserved for future functionality
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Granular Design project was saved to folder |
		| -1 | No E³.series project open |
		| -2 | Invalid license for this functionality |
		| -3 | Saving of Granular Design project failed |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.SaveAsGranularDesignProject(folder, options)

	def OpenGranularDesignProject(self, folder:str, options:int) -> int:
		"""
		Opens a Granular Design project.

		:param folder: Path to a Granular Design project folder
		:type str: str
		:param options: Unused: reserved for future functionality
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Granular Design project was opened |
		| -1 | E³.series project already open |
		| -2 | Invalid license for this functionality |
		| -3 | Opening Granular Design project failed |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.OpenGranularDesignProject(folder, options)

	def ImportDrawingForProjectGeneration(self, name:str, unique:int, flags:int, substitutes:list[tuple[str,str]], allowedTexttypes:list[str]=pythoncom.Empty, allowedAttributenames:list[str]=pythoncom.Empty, posx:float=-950309, posy:float=-950309) -> tuple[int, tuple[typing.Union[str,int],...]]:
		"""
		Replaces the project content's name, text and attribute values.

		:param name: Path and file name of a subcircuit
		:type str: str
		:param unique: Indicates if generated sheets have unique names. If 0, generated sheets do not necessarily have unique names. If not 0, generated sheets always have unique names
		:type int: int
		:param flags: Replacement criteria
		:type int: int
		:param substitutes: Array of placeholder strings and their replacement strings
		:type list[tuple[str,str]]: list[tuple[str,str]]
		:param allowedTexttypes: Array of. Text Types. for which the replacement is permitted.  (No String Array passed into the function), defaults to pythoncom.Empty
		:type list[str]: list[str]
		:param allowedAttributenames: Array of Attributes for which the replacement is permitted.  (No String Array passed into the function), defaults to pythoncom.Empty
		:type list[str]: list[str]
		:param posx: Reference point of the imported regions on the x-axis. 50309, defaults to -950309
		:type float: float
		:param posy: Reference point of the imported regions on the y-axis. 50309, defaults to -950309
		:type float: float

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | resultArray | tuple[typing.Union[str,int],...] | Array of errors resulting from the update passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 6 | Drawing updated however it contains duplicate part identifier values, Available since v2019-20.28 and v2020-21.12 |
		| 5 | Drawing updated however the XML project structure is missing or differs and not everything could be replaced, resultArray holds the unreplaced items |
		| 4 | Drawing updated however the XML project structure is missing or differs |
		| 2 | Drawing updated but not everything could be replaced, resultArray holds the items not replaced |
		| 1 | Drawing updated |
		| -1 | No project open, no file found or incorrect version of subcircuit |
		| -2 | Invalid text types defined in allowTexttypesresultArray holds the invalid text types |
		| -3 | Invalid attribute names defined in allowedAttributenamesresultArray holds the invalid attribute names |
		| -4 | substitutes array is invalid |
		| -5 | substitutes contains invalid strings |
		| -6 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.04
		"""
		dummy=0
		substitutes = [("","")] + substitutes
		substitutes = [tuple((None,) + i0) for i0 in substitutes]
		ret, resultArray = self._obj.ImportDrawingForProjectGeneration(name, unique, flags, substitutes, allowedTexttypes, allowedAttributenames, dummy, posx, posy)
		resultArray = () if resultArray is None else resultArray
		return ret, resultArray

	def GetSelectedConnectLineIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the selected connect lines on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of connect line identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of connect line identifiers in ids |
		| 0 | No selected connect lines |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 20.00, 19.04
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedConnectLineIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetProjectStructureLocking(self) -> int:
		"""
		Gets the lock status of the project structure.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project structure is locked |
		| 0 | Project structure is unlocked |
		| -1 | No project open |

		Available since E3.series TLB-Versions: 20.00, 19.12
		"""
		return self._obj.GetProjectStructureLocking()

	def SetProjectStructureLocking(self, lock:int) -> int:
		"""
		Sets the lock status of the project structure.

		:param lock: New lock status. If 0, unlock project structure. If 1, lock project structure
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous project structure status was locked |
		| 0 | Previous project structure status was unlocked |
		| -1 | No project open |
		| -2 | Error occurred |
		| -3 | lock is invalid |

		Available since E3.series TLB-Versions: 20.00, 19.12
		"""
		return self._obj.SetProjectStructureLocking(lock)

	def GetActiveAlias(self) -> tuple[int, str]:
		"""
		Gets the name of the project's currently active alias.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | name | str | Name of active alias |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Active alias name supplied |
		| -1 | No project open |
		| -2 | No defined aliases |
		| -3 | No active alias |

		Available since E3.series TLB-Versions: 20.00, 19.12
		"""
		dummy=0
		return self._obj.GetActiveAlias(dummy)

	def CreateInlineConnectorsOnConnectionLine(self, flags:int, LineIDs:list[int], compName:str, compVersion:str) -> tuple[int, tuple[int,...], tuple[int,...], tuple[tuple[int,int,int,int],...]]:
		"""
		Creates new inline connectors on connection lines.

		:param flags: Not used
		:type int: int
		:param LineIDs: Array of connection line identifiers
		:type list[int]: list[int]
		:param compName: Component name defined in the database
		:type str: str
		:param compVersion: Component version defined in the database
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | newCoreIDs | tuple[int,...] | Array of created conductor identifiers |
		| 2 | newDeviceIDs | tuple[int,...] | Array of created device identifiers |
		| 3 | newSymbolIDs | tuple[tuple[int,int,int,int],...] | Array defining the connection information and symbol identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Number of new inline connectors |
		| 0 | No new inline connectors, Successful if newSymbolIDs contains items |
		| -1 | LineIDs contains invalid values |
		| -2 | compName and compVersion are invalid |
		| -3 | No mating connector found |
		| -4 | Connector symbol could not be placed |
		| -5 | Graphic connection is a curve |
		| -6 | No graphical connection for placing the default symbol could be determined |
		| -7 | compName and compVersion define a connector with not enough pins |
		| -8 | compName and compVersion define a connector with inserts |
		| -9 | Error occurred |
		| -10 | Connection lines in LineIDs are inactive |
		| -11 | Connection lines, wires or ends are locked |
		| -12 | Inline connectors cannot be placed in a topology net |
		| -13 | Sheet is read-only |
		| -14 | LineIDs connection line is connected to a busbar device, Available since in v2022-23.00 |

		Available since E3.series TLB-Versions: 20.00, 19.12
		"""
		dummy=0
		ret, newCoreIDs, newDeviceIDs, newSymbolIDs = self._obj.CreateInlineConnectorsOnConnectionLine(dummy, dummy, flags, LineIDs, compName, compVersion, dummy)
		newCoreIDs = newCoreIDs[1:] if type(newCoreIDs) == tuple and len(newCoreIDs) > 0 else tuple()
		newDeviceIDs = newDeviceIDs[1:] if type(newDeviceIDs) == tuple and len(newDeviceIDs) > 0 else tuple()
		newSymbolIDs = () if newSymbolIDs is None else newSymbolIDs
		newSymbolIDs = newSymbolIDs[1:] if type(newSymbolIDs) == tuple and len(newSymbolIDs) > 0 else tuple()
		return ret, newCoreIDs, newDeviceIDs, newSymbolIDs

	def UndoAfterExecution(self, newval:bool=True) -> int:
		"""
		Undo changes made in the script.

		:param newval: Indicates whether an undo operation should occur. If 1, undoes all changes executed in the script since the last call to FinalizeTransaction() or UpdateMultiuser(). If 0, does not revert any changes., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous undo status was reversible changes were made |
		| 0 | Previous undo status was  no reversible changes were made |

		Available since E3.series TLB-Versions: 20.00, 19.13
		"""
		return self._obj.UndoAfterExecution(newval)

	def ResetSelection(self) -> int:
		"""
		Deselects all items selected on sheets within the project.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | All items are deselected |
		| -1 | Operation failed, For example if no project is open |

		Available since E3.series TLB-Versions: 21.00
		"""
		return self._obj.ResetSelection()

	def GetSelectedEmbeddedObjectIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the embedded object items selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of embedded objects item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of embedded objects items in ids |
		| 0 | No embedded objects are selected or an error occurred |

		Available since E3.series TLB-Versions: 21.00
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedEmbeddedObjectIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def CreateEmbeddedObject(self) -> EmbeddedObject:
		"""
		Creates an e3EmbeddedObject object.

		:return:
		Type: EmbeddedObject

		Available since E3.series TLB-Versions: 21.00
		"""
		return EmbeddedObject(self._obj.CreateEmbeddedObject())

	def OverwriteMultiuser(self, name:str, filename:str, unlock:int) -> int:
		"""
		Overwrites an existing multi-user project with the contents of a single-user project.

		:param name: Name of the multi-user project
		:type str: str
		:param filename: Path and name of the single-user project
		:type str: str
		:param unlock: Indicates if the multi-user project should be unlocked
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the new multi-user project |
		| 0 | Error occurred |
		| -1 | No multi-user license |
		| -2 | Multi-user service unavailable |
		| -3 | name already open |
		| -4 | name is locked |
		| -5 | Permission is not authorized |
		| -6 | name exceeds maximum length |
		| -8 | filename is an invalid version |
		| -9 | name cannot be overwritten because it is open by another user |

		Available since E3.series TLB-Versions: 22.00, 21.01
		"""
		return self._obj.OverwriteMultiuser(name, filename, unlock)

	def OptimizeMemory(self, flags:int=0) -> int:
		"""
		Optimizes the E³.series internal process memory.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Memory optimization performed |
		| 0 | Memory optimization not performed |

		Available since E3.series TLB-Versions: 22.00, 21.01, 20.25, 19.46, 19.20
		"""
		return self._obj.OptimizeMemory(flags)

	def GetTreeSelectedSlotIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the slot items selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of slot identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No slots are selected or an error occurred |

		Available since E3.series TLB-Versions: 22.00, 21.12
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedSlotIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ExportJT(self, file:str, ids:list[int]=pythoncom.Empty, flags:int=1) -> int:
		"""
		Exports panel data to a JT file.

		:param file: Path and file name of the export file
		:type str: str
		:param ids: Array of item identifiers to be exported. All items are exported if the array is empty. Default value is an empty array, defaults to pythoncom.Empty
		:type list[int]: list[int]
		:param flags: Export option flags., defaults to 1
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Items are exported |
		| -1 | No project open |
		| -2 | No license available or 32-bit E³.series is running |
		| -3 | Error occurred |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.ExportJT(file, ids, flags)

	def CreateStateObject(self) -> State:
		"""
		Creates an e3State object.

		:return:
		Type: State

		Available since E3.series TLB-Versions: 22.10
		"""
		return State(self._obj.CreateStateObject())

	def GetTextTypes(self) -> tuple[int, dict[int,tuple[tuple[str,str],...]]]:
		"""
		Gets the text type definitions from the defined database.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | textTypeDefinitions | dict[int,tuple[tuple[str,str],...]] | Dictionary of text type definitions |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of text type definitions in textTypeDefinitions |
		| 0 | Error occurred |
		| -1 | No project open |

		Available since E3.series TLB-Versions: 22.11
		"""
		dummy=0
		ret, textTypeDefinitions = self._obj.GetTextTypes(dummy)
		textTypeDefinitions = _variant_to_dict(textTypeDefinitions)
		for i0 in textTypeDefinitions.keys():
			textTypeDefinitions[i0] = textTypeDefinitions[i0][1:] if type(textTypeDefinitions[i0]) == tuple and len(textTypeDefinitions[i0]) > 0 else tuple()
			textTypeDefinitions[i0] = tuple( i1[1:] if type(i1) == tuple and len(i1) > 0 else tuple() for i1 in textTypeDefinitions[i0])
		return ret, textTypeDefinitions

	def UpdateComponentVersion(self, name:str, version:str, withSymbol:bool=True) -> int:
		"""
		Updates a component of the project from the database.

		:param name: Component name
		:type str: str
		:param version: Component version. Default value is "1   "
		:type str: str
		:param withSymbol: Indicates whether symbols are also updated if the number of pins or nodes differ. If 1, symbols are updated. If 0, symbols are not updated., defaults to True
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component is updated |
		| 0 | Error occurred |
		| -1 | Component not found in the database |
		| -2 | Component is not used in the project |
		| -3 | Component version is not used in the project |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.UpdateComponentVersion(name, version, withSymbol)

	def GetInvertDisplayColour(self) -> int:
		"""
		Gets the invert display color setting value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Setting is active |
		| 0 | Setting is inactive |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetInvertDisplayColour()

	def SetInvertDisplayColour(self, value:bool) -> int:
		"""
		Sets the invert display color setting value.

		:param value: Setting value to apply. If 1, the setting is active. If 0, the setting is inactive
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous setting value was active |
		| 0 | Previous setting value was inactive or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.SetInvertDisplayColour(value)

	def GetGID(self) -> str:
		"""
		Gets the global identifier of the current project item.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;GID&gt;" | Global identifier of the current project item |
		| "&lt;Empty&gt;" | No project item |

		Available since E3.series TLB-Versions: 23.00
		"""
		return self._obj.GetGID()

	def GetBusbarIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's busbars.

		:param flags: , defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of busbar identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of busbar identifiers in ids |
		| 0 | No busbars in the project |
		| -1 | No project open or no job item set |

		Available since E3.series TLB-Versions: 23.00
		"""
		dummy=0
		ret, ids = self._obj.GetBusbarIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetTreeSelectedBusbarIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the busbars selected in the project tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of busbar identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of busbar identifiers in ids |
		| 0 | No busbars selected in the project tree or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		dummy=0
		ret, ids = self._obj.GetTreeSelectedBusbarIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetSelectedBusbarIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the busbars selected on sheets.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of busbar identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of busbar identifiers in ids |
		| 0 | No selected busbars or an error occurred |

		Available since E3.series TLB-Versions: 23.00
		"""
		dummy=0
		ret, ids = self._obj.GetSelectedBusbarIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetAllBusbarConnectionIds(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the project's busbar net segment, pin, node and device items.

		:param flags: Filter options., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of busbar net segment, pin, node and device identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of busbar net segment, pin, node and device identifiers in ids |
		| 0 | No busbar net segments, pins, nodes or devices |
		| -1 | No project open or no job item set |

		Available since E3.series TLB-Versions: 23.00
		"""
		dummy=0
		ret, ids = self._obj.GetAllBusbarConnectionIds(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetCursorPositionInteractively(self, flags:int=0, boxWidth:float=0, boxHeight:float=0) -> tuple[int, float, float, int, str, str, str]:
		"""
		Gets the current position of the cursor selected interactively on the active open sheet.

		:param flags: Position selection options for the cursor., defaults to 0
		:type int: int
		:param boxWidth: Width of a rectangle to displayed at the cursor location. .0, defaults to 0
		:type float: float
		:param boxHeight: Height of a rectangle to displayed at the cursor location. .0, defaults to 0
		:type float: float

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | xpos | float | Position on the x-axis |
		| 2 | ypos | float | Position on the y-axis |
		| 3 | keysAndMouseButtons | int | Indicates the combinations of mouse and key presses |
		| 4 | grid | str | Location in the format ". /&lt;sheet&gt;.&lt;grid&gt;. " |
		| 5 | gridX | str | Sheet column location of the cursor |
		| 6 | gridY | str | Sheet row location of the cursor |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the item selected at the cursor location |
		| 0 | Operation canceled by user or an error occurred |

		Available since E3.series TLB-Versions: 23.01, 22.21
		"""
		dummy=0
		return self._obj.GetCursorPositionInteractively(dummy, dummy, flags, dummy, dummy, dummy, dummy, boxWidth, boxHeight)

	def UpdateComponentAttributes(self, name:str, version:str="") -> int:
		"""
		Updates the attributes of a component in the project to match the attributes of the component in the database.

		:param name: Component name
		:type str: str
		:param version: Component version. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component attributes are updated |
		| 0 | Error occurred |
		| -1 | Component not found in the database |
		| -2 | Component is not used in the project |
		| -3 | Component version is not used in the project |

		Available since E3.series TLB-Versions: 24.00
		"""
		return self._obj.UpdateComponentAttributes(name, version)

	def SaveSheetsAsSingleUserEx(self, name:str, shtids:list[int], completeName:str="", flags:int=0) -> int:
		"""
		Saves sheets and their content to a single user E³.series project file.

		:param name: Path and name of the file to save the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project sheets to
		:type str: str
		:param shtids: Array of identifiers of sheets to save
		:type list[int]: list[int]
		:param completeName: Path and name of the file to save the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project to. Default value is "<Empty>", defaults to ""
		:type str: str
		:param flags: Save option flags., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Sheets saved in a single user project |
		| -2 | name or completeName file has an invalid path or format |
		| -3 | Error occurred in the background worker |

		Available since E3.series TLB-Versions: 24.00, 23.21, 22.41
		"""
		return self._obj.SaveSheetsAsSingleUserEx(name, shtids, completeName, flags)

	def FocusOnIds(self, focusIds:list[int], focushighlight:bool=False, focushighlightColour:int=-1) -> bool:
		"""
		Sets the focus on the specified items in the project.

		:param focusIds: Array of items to focus on
		:type list[int]: list[int]
		:param focushighlight: If 1, focused items are highlighted. If 0, focused items are not highlighted., defaults to False
		:type bool: bool
		:param focushighlightColour: Highlight color value. See Colors for possible values.  representing the automatic color, defaults to -1
		:type int: int

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Returned whether the items are focused or not |
		| 0 | No project open |

		Available since E3.series TLB-Versions: 24.41
		"""
		return self._obj.FocusOnIds(focusIds, focushighlight, focushighlightColour)

	def CreateProjectConfiguratorObject(self) -> ProjectConfigurator:
		"""
		Creates an e3ProjectConfigurator object.

		:return:
		Type: ProjectConfigurator

		Available since E3.series TLB-Versions: 26.00
		"""
		return ProjectConfigurator(self._obj.CreateProjectConfiguratorObject())

	def UpdateAllComponentsAttributes(self) -> int:
		"""
		Updates the attributes of the components in the project to match the attributes of the components in the database.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;0 | Number of components with updated attributes |
		| 0 | No component attributes are updated or no open project |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 26.00, 25.11
		"""
		return self._obj.UpdateAllComponentsAttributes()

	def HasLockedObjects(self, flags:int=0) -> int:
		"""
		Indicates whether the project contains locked items.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project contains locked items |
		| 0 | Project contains no locked items or an error occurred |
		| -1 | No project open |

		Available since E3.series TLB-Versions: 26.00, 25.23
		"""
		return self._obj.HasLockedObjects(flags)

	def GetLockedObjects(self, flags:int=0) -> tuple[int, tuple[int,...]]:
		"""
		Gets identifiers of the items locked within the project.

		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array of identifiers of locked items passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;0 | Number of locked items in project |
		| 0 | Project contains no locked items |
		| -1 | No project open |

		Available since E3.series TLB-Versions: 26.00, 25.23
		"""
		dummy=0
		ret, ids = self._obj.GetLockedObjects(dummy, flags)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def ImportRedlinerInformation(self, fileName:str, flags:int=0) -> int:
		"""
		Imports E³.redliner information into the project.

		:param fileName: Path and file name of the import file
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | E³.redliner information            imported |
		| -1 | No project open |
		| -2 | flags is invalid |
		| -3 | Not supported by the current module |
		| -4 | Extension of fileName is invalid |
		| -5 | Format of fileName is invalid |
		| -6 | Error reading file |
		| -7 | Error occurred |

		Available since E3.series TLB-Versions: 26.00, 25.22
		"""
		return self._obj.ImportRedlinerInformation(fileName, flags)

	def ExportRedlinerInformation(self, fileName:str, flags:int=0) -> int:
		"""
		Exports  E³.redliner information  to a file.

		:param fileName: Path and name of the export file
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | E³.redliner information is exported |
		| -1 | No project open |
		| -2 | flags is invalid |
		| -3 | E³.redliner is not running |
		| -4 | Extension of fileName is invalid |
		| -5 | Error writing file |
		| -6 | Error occurred |

		Available since E3.series TLB-Versions: 26.00, 25.22
		"""
		return self._obj.ExportRedlinerInformation(fileName, flags)

# -------------------- IApplicationInterface--------------------
class Application:
	def __init__(self, pid: typing.Optional[int]=None) -> None:
		if pid is None:
			pid = _get_default_app()
		if pid is None:
			raise RuntimeError('No instance of E3.series is currently running')
		self._obj = _raw_connect_app(pid)

	def __del__(self) -> None:
		try:
			del self._obj
		except:
			pass	# If there is no object there is no need to delete it

	def GetName(self) -> str:
		"""
		Gets the current name of E³.series.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Build&gt;" | Name of E³.series |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetName()

	def GetVersion(self) -> str:
		"""
		Gets the current version of E³.series.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Version&gt;" | Version of E³.series |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetVersion()

	def GetFullName(self) -> str:
		"""
		Gets the current path and name of E³.series.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Build&gt;" | Path and name of E³.series |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetFullName()

	def GetId(self) -> int:
		"""
		Gets the identifier of the current E³.series item.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current E³.series item identifier |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetId()

	def Quit(self) -> int:
		"""
		Stops the script execution.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Script will immediately stop |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Quit()

	def Sleep(self, msec:int) -> int:
		"""
		Temporarily stops the script execution.

		:param msec: Number of milliseconds to sleep
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Script execution temporarily stops |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Sleep(msec)

	def Minimize(self) -> int:
		"""
		Minimizes the E³.series application window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.series application window is minimized |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Minimize()

	def Maximize(self) -> int:
		"""
		Maximizes the E³.series application window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.series application window is maximized |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Maximize()

	def Display(self) -> int:
		"""
		Displays the E³.series application window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.series application window is displayed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Display()

	def CreateJobObject(self) -> Job:
		"""
		Creates an e3Job object.

		:return:
		Type: Job

		Available since E3.series TLB-Versions: 8.50
		"""
		return Job(self._obj.CreateJobObject())

	def ShowNormal(self) -> int:
		"""
		Displays the E³.series application window in its normal window state.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | E³.series application window is displayed in its normal window state |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ShowNormal()

	def GetJobCount(self) -> int:
		"""
		Indicates if a project is open.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | A project is open |
		| 0 | No project is open |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetJobCount()

	def GetJobIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifier of the project.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array containing the identifier of the open project passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | A project is open |
		| 0 | No project is open |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetJobIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def PutMessage(self, text:str, item:int=0) -> int:
		"""
		Outputs text to the E³.series Messages window.

		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PutMessage(text, item)

	def PutInfo(self, ok:int, text:str, item:int=0) -> int:
		"""
		Outputs information text to the E³.series Messages window.

		:param ok: Indicates whether an additional information dialog should appear. If set to 0, no additional information dialog appears. If set to 1, an additional information dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PutInfo(ok, text, item)

	def PutWarning(self, ok:int, text:str, item:int=0) -> int:
		"""
		Outputs warning text to the E³.series Messages window.

		:param ok: Indicates whether an additional warning dialog should appear. If set to 0, no additional warning dialog appears. If set to 1, an additional warning dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PutWarning(ok, text, item)

	def PutError(self, ok:int, text:str, item:int=0) -> int:
		"""
		Outputs error text to the E³.series Messages window.

		:param ok: Indicates whether an additional error dialog should appear. If set to 0, no additional error dialog appears. If set to 1, an additional error dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.PutError(ok, text, item)

	def GetTestMark(self, num:int) -> int:
		"""


		:param num: 
		:type int: int

		:return:
		Type: int

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTestMark(num)

	def SetTestMark(self, num:int, value:int) -> int:
		"""


		:param num: 
		:type int: int
		:param value: 
		:type int: int

		:return:
		Type: int

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTestMark(num, value)

	def GetPrinterName(self) -> str:
		"""
		Gets the name of the current printer.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Printer&gt;" | Name of the current printer |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPrinterName()

	def SetPrinterName(self, name:str) -> int:
		"""
		Sets the printer as the current printer.

		:param name: Printer name
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Size of name in characters |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPrinterName(name)

	def GetPrinterMargins(self) -> tuple[int, float, float, float, float]:
		"""
		Gets the printer margin setting values.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | top | float | Printer top margin setting value passed out of the function |
		| 2 | bottom | float | Printer bottom margin setting value passed out of the function |
		| 3 | left | float | Printer left margin setting value passed out of the function |
		| 4 | right | float | Printer right margin setting value passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | This value is always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetPrinterMargins(dummy, dummy, dummy, dummy)

	def SetPrinterMargins(self, top:float, bottom:float, left:float, right:float) -> int:
		"""
		Sets the printer margin setting values.

		:param top: Printer top margin setting value
		:type float: float
		:param bottom: Printer bottom margin setting value
		:type float: float
		:param left: Printer left margin setting value
		:type float: float
		:param right: Printer right margin setting value
		:type float: float

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | This value is always returned |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPrinterMargins(top, bottom, left, right)

	def GetPrinterColour(self) -> int:
		"""
		Gets the printer color option setting.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 or -1 | Printer color option |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPrinterColour()

	def SetPrinterColour(self, colour:int) -> int:
		"""
		Sets the printer color option setting.

		:param colour: Indicates the printer color option
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 or -1 | Previous printer color option |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPrinterColour(colour)

	def GetPrinterLinewidth(self) -> float:
		"""
		Gets the  printer line width setting value.

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 0.0 | Use line width on sheets but ignore print function scaling parameters |
		| -1.0 | Use line width as defined on sheets and according to print function scaling parameters |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPrinterLinewidth()

	def SetPrinterLinewidth(self, linewidth:float) -> float:
		"""
		Sets the  printer line width setting value.

		:param linewidth: Indicates how line widths will be printed. If 0.0, line width on sheets is used but print function scaling parameters are ignored. If -1.0, line width as defined on sheets is used according to print function scaling parameters
		:type float: float

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 0.0 or -1.0 | Previous print line width setting value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPrinterLinewidth(linewidth)

	def GetInstallationPath(self) -> str:
		"""
		Gets the installation path of E³.series.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Installation path of the E³.series application |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetInstallationPath()

	def GetInstallationLanguage(self) -> int:
		"""
		Gets the installation language of the E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Current language identifier |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetInstallationLanguage()

	def EnableLogfile(self, en:int) -> int:
		"""
		Sets whether message data is to be written to the log files.

		:param en: Indicates whether data is written to the log files. If 1, data is written to the log files. If 0, data is not written to the log files
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Enabling of data to be written set |
		| &lt; 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.EnableLogfile(en)

	def GetComponentDatabase(self) -> str:
		"""
		Gets the connection string of the currently active component database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Connection&gt;" | Connection string of the currently active component database |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetComponentDatabase()

	def GetConfigurationDatabase(self) -> str:
		"""
		Gets the connection string of the currently active configuration database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Connection&gt;" | Connection string of the currently active configuration database |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConfigurationDatabase()

	def GetSymbolDatabase(self) -> str:
		"""
		Gets the connection string of the currently active symbol database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Database&gt;" | Connection string of the symbol database |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolDatabase()

	def GetLicense(self, feature:str) -> int:
		"""
		Includes a module or feature license to be adopted by the current instance of E³.series.

		:param feature: Licensed feature to be used. See Module and Feature License Names for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Error occurred |
		| 1 | Licensed feature included |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLicense(feature)

	def FreeLicense(self, feature:str) -> int:
		"""
		Releases a module or feature license adopted by the current instance of E³.series.

		:param feature: Licensed feature to free up. See Module and Feature License Names for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Licensed feature could not be found |
		| 1 | Licensed feature freed up |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.FreeLicense(feature)

	def GetServerName(self) -> str:
		"""
		Gets the multi-user server name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Server&gt;" | Multi-user server name |
		| "&lt;Empty&gt;" | No connection to a multi-user server or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetServerName()

	def GetServerPort(self) -> int:
		"""
		Gets the multi-user server port.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Multi-user server port |
		| 0 | No connection to a multi-user server or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetServerPort()

	def GetInfoCount(self) -> int:
		"""
		Gets the number of information messages already displayed in E³.series Messages window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Number of information messages already displayed in E³.series |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetInfoCount()

	def GetWarningCount(self) -> int:
		"""
		Gets the number of warning messages already displayed in E³.series Messages window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Number of warning messages already displayed in E³.series |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetWarningCount()

	def GetErrorCount(self) -> int:
		"""
		Gets the number of error messages already displayed in the E³.series Messages window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Number of error messages already displayed in E³.series |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetErrorCount()

	def SetPrinterCopies(self, copies:int) -> int:
		"""
		Sets the number of copies to print.

		:param copies: Number of print copies
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Value of copies |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPrinterCopies(copies)

	def SetPrinterCollate(self, col:int) -> int:
		"""
		Sets the status of the printer output collation.

		:param col: Indicates if the printed pages should be collated. If 0, the print pages are not collated. If any other value, the print pages are collated
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Value of col |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetPrinterCollate(col)

	def GetScriptArguments(self) -> tuple[str,...]:
		"""
		Gets the arguments passed into the script.

		:return:
		Type: tuple[str,...]

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetScriptArguments()

	def SortArrayByIndex(self, array:list[typing.Any], rows:int, columns:int, sortindex1:int, sortindex2:int) -> tuple[int, list[typing.Any]]:
		"""
		Sorts the contents of a 1 or 2 dimensional array.

		:param array: Array to sort passed in to the function unsorted and passed out sorted
		:type list[typing.Any]: list[typing.Any]
		:param rows: Number of rows in. array
		:type int: int
		:param columns: Number of columns in. array
		:type int: int
		:param sortindex1: Primary element in. array. to sort by
		:type int: int
		:param sortindex2: Secondary element in. array. to sort by
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | array | list[typing.Any] | Array to sort passed in to the function unsorted and passed out sorted |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Error occurred |
		| 0 | Array successfully sorted |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SortArrayByIndex(array, rows, columns, sortindex1, sortindex2)

	def FullName(self) -> str:
		"""
		Gets the current path and name of E³.series.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Full Name&gt;" | Path and name of E³.series |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.FullName()

	def ScriptArguments(self) -> tuple[str,...]:
		"""
		Gets the arguments passed into the script.

		:return:
		Type: tuple[str,...]

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ScriptArguments()

	def IsCable(self) -> int:
		"""
		Gets the usage status of the Cable module for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Cable module is in use |
		| 0 | Cable module is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsCable()

	def IsSchema(self) -> int:
		"""
		Gets the usage status of the Schema module for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Schema module is in use |
		| 0 | Schema module is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsSchema()

	def IsMultiuser(self) -> int:
		"""
		Gets the usage status of the multi-user functionality for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Multi-user functionality is in use |
		| 0 | Multi-user functionality is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsMultiuser()

	def IsPanel(self) -> int:
		"""
		Gets the usage status of the Panel module for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Panel module is in use |
		| 0 | Panel module is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsPanel()

	def IsWire(self) -> int:
		"""
		Gets the usage status of the Wire functionality for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Wire functionality is in use |
		| 0 | Wire functionality is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsWire()

	def IsSmallBusiness(self) -> int:
		"""
		Gets the usage status of the E³.SmallProject version for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | E³.SmallProject version is in use |
		| 0 | E³.SmallProject version is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsSmallBusiness()

	def IsDemo(self) -> int:
		"""
		Gets the usage status of the demonstration version for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Demonstration version is in use |
		| 0 | Demonstration version is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsDemo()

	def IsViewer(self) -> int:
		"""
		Gets the usage status of the Viewer version for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Viewer version is in use |
		| 0 | Viewer version is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsViewer()

	def IsViewPlus(self) -> int:
		"""
		Gets the usage status of the ViewPlus version for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | ViewPlus version is in use |
		| 0 | ViewPlus version is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsViewPlus()

	def IsStudent(self) -> int:
		"""
		Gets the usage status of the Student version for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Student version is in use |
		| 0 | Student version is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsStudent()

	def GetBuild(self) -> str:
		"""
		Gets the current build version of E³.series.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Build&gt;" | Build version of E³.series |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetBuild()

	def SortArrayByIndexEx(self, array:list[typing.Any], options:list[typing.Any]) -> tuple[int, list[typing.Any]]:
		"""
		Sorts the contents of a 1 or 2 dimensional array.

		:param array: Array to sort passed in to the function unsorted and passed out sorted
		:type list[typing.Any]: list[typing.Any]
		:param options: Array of sorting criteria
		:type list[typing.Any]: list[typing.Any]

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | array | list[typing.Any] | Array to sort passed in to the function unsorted and passed out sorted |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Array successfully sorted |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SortArrayByIndexEx(array, options)

	def GetRegistryVersion(self) -> str:
		"""
		Gets the internal major version of E³.series.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Version&gt;" | Internal version of E³.series |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetRegistryVersion()

	def GetLanguageDatabase(self) -> str:
		"""
		Gets the connection string of the currently active language database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Connection&gt;" | Connection string of the currently active language database |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLanguageDatabase()

	def GetMultiuserProjects(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the names of multi-user projects available to the current user.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | name | tuple[str,...] | Array containing the names of multi-user projects passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of multi-user projects names in name |
		| 0 | No projects available or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, name = self._obj.GetMultiuserProjects(dummy)
		name = name[1:] if type(name) == tuple and len(name) > 0 else tuple()
		return ret, name

	def IsRedliner(self) -> int:
		"""
		Gets the usage status of the Redliner version for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Redliner version is in use |
		| 0 | Redliner version is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsRedliner()

	def ClearOutputWindow(self) -> None:
		"""
		Clears the content of the Messages output window in E³.series.

		:return:
		No return value.

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ClearOutputWindow()

	def AvoidAutomaticClosing(self, avoid:bool=True) -> bool:
		"""
		Sets the ability for E³.series to remain open following the script process ending.

		:param avoid: Indicates whether. <span style="font-style: italic;color: #ff0000;">E³.</span>series. should remain open. If 1, E³.series remains open. If 0, E³.series may close., defaults to True
		:type bool: bool

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous status was for E³.series to remains open |
		| 0 | Previous status was for E³.series to maybe close |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.AvoidAutomaticClosing(avoid)

	def ScriptFullName(self) -> str:
		"""
		Gets the name and path of the script running internally.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Name and path of the script running internally |
		| "&lt;Empty&gt;" | Script is being run externally |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ScriptFullName()

	def ScriptName(self) -> str:
		"""
		Gets the name of the script running internally.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Path&gt;" | Name of the script running internally |
		| "&lt;Empty&gt;" | Script is being run externally |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.ScriptName()

	def GetPluginObject(self, Plugin:typing.Any) -> typing.Any:
		"""
		Gets or creates an instance of a plugin object.

		:param Plugin: Name of the plugin
		:type typing.Any: typing.Any

		:return:
		Type: typing.Any

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetPluginObject(Plugin)

	def Include(self, text:str) -> int:
		"""
		Executes a script and includes its defined functions for use within the current script.

		:param text: Path and name of the script file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 5 | Recursive call occurred, Available since v2021 - 22.52, v2022 - 23.50 and v2023-24.10 |
		| 4 | Error occurred |
		| 3 | Error in script code |
		| 2 | Error occurred |
		| 1 | text script file not found or is empty |
		| 0 | Script is executed |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Include(text)

	def CreateMenuItemObject(self) -> UserMenuItem:
		"""
		Creates an e3UserMenuItem object.

		:return:
		Type: UserMenuItem

		Available since E3.series TLB-Versions: 8.50
		"""
		return UserMenuItem(self._obj.CreateMenuItemObject())

	def GetSystemMenuItemIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the system menu items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array containing the system menu item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No system menu items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetSystemMenuItemIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetUserMenuItemIds(self) -> tuple[int, tuple[int,...]]:
		"""
		Gets the identifiers of the user menu items.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ids | tuple[int,...] | Array containing the user menu item identifiers passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| 0 | No user menu items or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, ids = self._obj.GetUserMenuItemIds(dummy)
		ids = ids[1:] if type(ids) == tuple and len(ids) > 0 else tuple()
		return ret, ids

	def GetLogfileName(self, index:int=0) -> str:
		"""
		Gets the current path and file name of the log file.

		:param index: Indicates which log file path is required. If 0, the log file of the messages is returned. If 1, the log file of the results is returned., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File Path&gt;" | Log file of E³.series |
		| "&lt;Empty&gt;" | No log file assigned or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLogfileName(index)

	def SetLogfileName(self, logfile:str, index:int=0) -> int:
		"""
		Sets the current path and file name of the log file.

		:param logfile: Path and name of the new log file
		:type str: str
		:param index: Indicates which log file path is to be set. If 0, the messages log file path is set. If 1, the results log file path is set., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Log file path is set |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLogfileName(logfile, index)

	def GetWorkspaceName(self) -> str:
		"""
		Gets the current workspace configuration name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Workspace&gt;" | Name of the current workspace configuration |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetWorkspaceName()

	def GetActualDatabase(self) -> str:
		"""
		Gets the current database configuration.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Database&gt;" | Name of the current database configuration |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetActualDatabase()

	def SetActualDatabase(self, dbname:str) -> int:
		"""
		Sets the current database configuration.

		:param dbname: Name of the database configuration
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Current database configuration applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetActualDatabase(dbname)

	def GetDefinedDatabases(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the configuration names of the defined databases available.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | dbnames | tuple[str,...] | Array of database configuration names |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in dbnames |
		| 0 | No database configurations or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, dbnames = self._obj.GetDefinedDatabases(dummy)
		dbnames = dbnames[1:] if type(dbnames) == tuple and len(dbnames) > 0 else tuple()
		return ret, dbnames

	def GetDefinedDatabaseConnectionStrings(self, dbname:str) -> tuple[int, str, str, str]:
		"""
		Gets the connection strings for a database configuration.

		:param dbname: Name of the database configuration
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | cmp_cs | str | Component database connection string |
		| 2 | sym_cs | str | Symbol database connection string |
		| 3 | cnf_cs | str | Configuration database connection string |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connection strings successfully supplied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetDefinedDatabaseConnectionStrings(dbname, dummy, dummy, dummy)

	def SetDefinedDatabaseConnectionStrings(self, dbname:str, cmp_cs:str, sym_cs:str, cnf_cs:str) -> int:
		"""
		Creates or modifies a database configuration.

		:param dbname: Name of the database configuration
		:type str: str
		:param cmp_cs: Component database connection string
		:type str: str
		:param sym_cs: Symbol database connection string
		:type str: str
		:param cnf_cs: Configuration database connection string
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Connection strings successfully applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetDefinedDatabaseConnectionStrings(dbname, cmp_cs, sym_cs, cnf_cs)

	def SetLanguageDatabase(self, dbname:str) -> int:
		"""
		Sets the currently active language database.

		:param dbname: Connection string for a language database
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Database successfully assigned as the language database |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetLanguageDatabase(dbname)

	def SetTemplateFile(self, templatefilename:str) -> int:
		"""
		Sets the  project settings template file.

		:param templatefilename: Path and name of a template file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Template file settings assigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTemplateFile(templatefilename)

	def GetTemplateFile(self) -> str:
		"""
		Gets the  project settings template file.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File&gt;" | Path and name of the template file |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTemplateFile()

	def SetTemplateFileDBE(self, templatefilename:str) -> int:
		"""
		Sets the  project settings template file.

		:param templatefilename: Path and name of a template file
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Template file settings assigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTemplateFileDBE(templatefilename)

	def GetTemplateFileDBE(self) -> str:
		"""
		Gets the project settings template file.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File&gt;" | Path and name of the template file |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTemplateFileDBE()

	def GetUseSheetOrientation(self) -> int:
		"""
		Gets the sheet orientation setting value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..1 | Sheet orientation setting value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetUseSheetOrientation()

	def SetUseSheetOrientation(self, set:bool) -> int:
		"""
		Sets the sheet orientation setting value.

		:param set: Indicates the sheet orientation setting value. If 1, the sheet orientation setting is used. If 0, the sheet orientation setting is unused
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..1 | Previous value of the sheet orientation setting |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetUseSheetOrientation(set)

	def GetProjectLifecycle(self, project:str) -> str:
		"""
		Gets the life cycle status of a multi-user project.

		:param project: Name of the multi-user project
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Lifecycle&gt;" | Project information provided |
		| "&lt;Empty&gt;" | No project life cycle or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetProjectLifecycle(project)

	def SetProjectLifecycle(self, project:str, lifecycle:str) -> int:
		"""
		Sets the life cycle status of a multi-user project.

		:param project: Name of the multi-user project
		:type str: str
		:param lifecycle: Life cycle status of the multi-user project
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Project life cycle assigned |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetProjectLifecycle(project, lifecycle)

	def IsScriptRunning(self) -> bool:
		"""
		Indicates if instances of E³ API interfaces currently exist.

		:return:
		Type: bool

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Instances of E³ API interfaces exist |
		| 0 | Instances of E³ API interfaces do not exist |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsScriptRunning()

	def GetMultiuserFolderPath(self) -> tuple[bool, str]:
		"""
		Opens a dialog to select a multi-user folder interactively.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | bool | See table return value |
		| 1 | path | str | Path to the selected multi-user folder |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No folder path selected |
		| &gt; 0 | Identifier of the multi-user folder |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetMultiuserFolderPath(dummy)

	def SetTriggerReturn(self, value:int) -> int:
		"""
		Sets the current trigger script return value.

		:param value: Trigger return value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1..7 | Previous trigger return value |
		| 0 | No trigger is active |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTriggerReturn(value)

	def GetTriggerReturn(self) -> int:
		"""
		Gets the current trigger script return value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | No trigger is active |
		| 1..7 | Trigger script return value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTriggerReturn()

	def GetComponentDatabaseTableSchema(self) -> str:
		"""
		Gets the table schema of the currently active component database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Schema&gt;" | Table schema of the currently active component database |
		| "&lt;Empty&gt;" | No table schema or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetComponentDatabaseTableSchema()

	def GetConfigurationDatabaseTableSchema(self) -> str:
		"""
		Gets the table schema of the currently active configuration database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Schema&gt;" | Table schema of the currently active configuration database |
		| "&lt;Empty&gt;" | No table schema or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetConfigurationDatabaseTableSchema()

	def GetSymbolDatabaseTableSchema(self) -> str:
		"""
		Gets the table schema of the currently active symbol database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Schema&gt;" | Table schema of the currently active symbol database |
		| "&lt;Empty&gt;" | No table schema or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetSymbolDatabaseTableSchema()

	def GetLanguageDatabaseTableSchema(self) -> str:
		"""
		Gets the table schema of the currently active language database.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Schema&gt;" | Table schema of the currently active language database |
		| "&lt;Empty&gt;" | No table schema or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetLanguageDatabaseTableSchema()

	def CreateDllObject(self) -> Dll:
		"""
		Creates a dll object.

		:return:
		Type: Dll

		Available since E3.series TLB-Versions: 8.50
		"""
		return Dll(self._obj.CreateDllObject())

	def GetProcessProperty(self, what:str) -> str:
		"""
		Gets the value of a property of the E³.series application's process.

		:param what: Process property
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Value&gt;" | Process property value |
		| "&lt;Empty&gt;" | Process property has no value or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetProcessProperty(what)

	def IsFluid(self) -> int:
		"""
		Gets the usage status of the Fluid module for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Fluid module is in use |
		| 0 | Fluid module is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsFluid()

	def IsFormboard(self) -> int:
		"""
		Gets the usage status of the Formboard module for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Formboard module is in use |
		| 0 | Formboard module is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsFormboard()

	def GetTrigger(self, name:str) -> tuple[int, str]:
		"""
		Gets a trigger's status and designated script file.

		:param name: Trigger name
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | filename | str | Path of designated script file to be triggered passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Trigger is active |
		| 0 | Trigger is inactive |
		| -2 | name is invalid |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		return self._obj.GetTrigger(name, dummy)

	def SetTrigger(self, name:str, filename:str, active:int) -> int:
		"""
		Sets a trigger's status and designated script file.

		:param name: Trigger name
		:type str: str
		:param filename: Path of designated script file to be triggered
		:type str: str
		:param active: Trigger status
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous trigger status was active |
		| 0 | Previous trigger status was inactive |
		| -1 | filename is invalid |
		| -2 | name is invalid |
		| -3 | Trigger registry key is missing or set to 0 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetTrigger(name, filename, active)

	def IsEconomy(self) -> int:
		"""
		Gets the usage status of the economy version for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Economy version is in use |
		| 0 | Economy version is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsEconomy()

	def GetAvailableLanguages(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the available language names.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | languages | tuple[str,...] | Array of available language names passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in languages |
		| 0 | No available language names are found or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		dummy=0
		ret, languages = self._obj.GetAvailableLanguages(dummy)
		languages = languages[1:] if type(languages) == tuple and len(languages) > 0 else tuple()
		return ret, languages

	def GetTranslatedText(self, text:str, language:str) -> str:
		"""
		Gets the text value with all text tokens translated.

		:param text: Text to translate
		:type str: str
		:param language: Translation language
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Text&gt;" | Translated text or text |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetTranslatedText(text, language)

	def Run(self, filename:str, arguments:list[str]) -> int:
		"""
		Immediately executes a script internally.

		:param filename: Path and name of script file
		:type str: str
		:param arguments: Array of script arguments
		:type list[str]: list[str]

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| Any | Return value from the executed script |
		| -1 | Return value from the executed script or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.Run(filename, arguments)

	def SetScriptReturn(self, value:int) -> int:
		"""
		Sets the current script return value.

		:param value: Script return value
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| Any | Previous script return value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetScriptReturn(value)

	def GetScriptReturn(self) -> int:
		"""
		Gets the current script return value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| Any | Script return value |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetScriptReturn()

	def GetEnableInteractiveDialogs(self) -> int:
		"""
		Gets the setting value enabling interactive dialogs to appear.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Interactive dialogs are set to appear |
		| 0 | Interactive dialogs are not set to appear |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetEnableInteractiveDialogs()

	def SetEnableInteractiveDialogs(self, value:bool) -> int:
		"""
		Sets the setting value enabling interactive dialogs to appear.

		:param value: New enabling interactive dialogs value. If 1, interactive dialogs are enabled. If 0, interactive dialogs are disabled
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous value for enabling interactive dialogs enabling interactive dialogs was 1 |
		| 0 | Previous value for enabling interactive dialogs enabling interactive dialogs was 0 |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetEnableInteractiveDialogs(value)

	def IsWireWorks(self) -> int:
		"""
		Gets the usage status of the WireWorks functionality for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | WireWorks functionality is in use |
		| 0 | WireWorks functionality is not in use |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.IsWireWorks()

	def SetModalWindow(self, hWnd:int) -> int:
		"""
		Sets the window handle of the modal window in front of the E³.series.

		:param hWnd: Handle of the window
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Modal window value applied |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.SetModalWindow(hWnd)

	def GetModalWindow(self) -> int:
		"""
		Gets the window handle of the modal window in front of the E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Handle of the modal window in front of E³.series |
		| 0 | No modal window is in front of E³.series or an error occurred |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.GetModalWindow()

	def BeginForeignTask(self) -> int:
		"""
		Changes the status of E³.series to inactive.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Previous status of E³.series was active |
		| 1 | Previous status of E³.series was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.BeginForeignTask()

	def EndForeignTask(self) -> int:
		"""
		Changes the status of E³.series to active.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Previous status of E³.series was active |
		| 1 | Previous status of E³.series was inactive |

		Available since E3.series TLB-Versions: 8.50
		"""
		return self._obj.EndForeignTask()

	def IsFunctionalDesign(self) -> int:
		"""
		Gets the usage status of the Functional Design module for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Functional Design module is in use |
		| 0 | Functional Design module is not in use |

		Available since E3.series TLB-Versions: 9.00
		"""
		return self._obj.IsFunctionalDesign()

	def GetProjectInformation(self, filename:str) -> tuple[int, str, int, int]:
		"""
		Gets a .e3s project's information.

		:param filename: File name of the project. If no project is open, a project file name can be passed into the function. If a project is open, the project file name is passed out of the function
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | filename | str | File name of the project. If no project is open, a project file name can be passed into the function. If a project is open, the project file name is passed out of the function |
		| 2 | _type | int | Type of project passed out of the function |
		| 3 | is_dbe | int | Indicates if the project is an. <span style="font-style: italic;color: #ff0000;">E³.</span>DatabaseEditor. project passed out of the function. If 1, the project is an E³.DatabaseEditor project. If 0, the project is an E³.series project |

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Project information provided |
		| 1 | filename was not found |
		| 2 | File information could not be read |
		| 3 | File is already open |

		Available since E3.series TLB-Versions: 9.00
		"""
		dummy=0
		return self._obj.GetProjectInformation(filename, dummy, dummy)

	def GetProvider(self, dbname:str) -> str:
		"""
		Gets the database provider.

		:param dbname: Database configuration name
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Provider&gt;" | Name of the database provider |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 9.22
		"""
		return self._obj.GetProvider(dbname)

	def ResetInfoCount(self) -> int:
		"""
		Resets the information count of the E³.series application.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Information count value before it was reset |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ResetInfoCount()

	def ResetWarningCount(self) -> int:
		"""
		Resets the warning count of the E³.series application.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Warning count value before it was reset |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ResetWarningCount()

	def ResetErrorCount(self) -> int:
		"""
		Resets the error count of the E³.series application.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Error count value before it was reset |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.ResetErrorCount()

	def GetLicensePermanent(self, feature:str) -> int:
		"""
		Includes a module or feature license to be adopted by all E³.series processes.

		:param feature: Licensed feature to be used. See Module and Feature License Names for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Error occurred |
		| 1 | Licensed feature included |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.GetLicensePermanent(feature)

	def FreeLicensePermanent(self, feature:str) -> int:
		"""
		Releases a module or feature license adopted by E³.series on a permanent basis.

		:param feature: Licensed feature to be used. See Module and Feature License Names for possible values
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Licensed feature could not be found |
		| 1 | Licensed feature freed up |

		Available since E3.series TLB-Versions: 10.00
		"""
		return self._obj.FreeLicensePermanent(feature)

	def ResetVerifyCount(self) -> int:
		"""
		Resets the verify count of the E³.series application.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Verify count value before it was reset |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.ResetVerifyCount()

	def GetVerifyCount(self) -> int:
		"""
		Gets the number of verification messages already displayed in E³.series Results window.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;=0 | Number of verification messages already displayed in E³.series |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.GetVerifyCount()

	def PutVerify(self, ok:int, text:str, item:int=0) -> int:
		"""
		Outputs verification error text to the E³.series Result window.

		:param ok: Indicates whether an additional information dialog should appear. If set to 0, no additional information dialog appears. If set to 1, an additional information dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.PutVerify(ok, text, item)

	def GetPrintSplitPages(self) -> int:
		"""
		Gets the select pages setting value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..1 | Select pages setting value |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.GetPrintSplitPages()

	def SetPrintSplitPages(self, set:bool) -> int:
		"""
		Sets the select pages setting value.

		:param set: Indicates the select pages setting value. If 1, the select pages setting is used. If 0, select pages setting is unused
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..1 | Previous value of the select pages setting |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.SetPrintSplitPages(set)

	def GetPrintCropMarks(self) -> int:
		"""
		Gets the status of the print crop marks.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Print crop marks usage is on |
		| 0 | Print crop marks usage is off |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.GetPrintCropMarks()

	def SetPrintCropMarks(self, set:bool) -> int:
		"""
		Sets the status of the print crop marks.

		:param set: Indicates if print crop marks are used. If 1, print crop marks usage is on. If 0, print crop marks usage is off
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Previous print crop marks usage was on |
		| 0 | Previous print crop marks usage was off |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.SetPrintCropMarks(set)

	def GetPrintPageNumbers(self) -> int:
		"""
		Gets the print page number setting value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Page numbers will be printed |
		| 0 | Page numbers will not be printed |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.GetPrintPageNumbers()

	def SetPrintPageNumbers(self, set:bool) -> int:
		"""
		Sets the print page number setting value.

		:param set: Indicates the print page number setting value. If 1, the page numbers are printed. If 0, the page numbers are not printed
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..1 | Previous value of the print page number |

		Available since E3.series TLB-Versions: 10.10
		"""
		return self._obj.SetPrintPageNumbers(set)

	def SetPrintSheetOrder(self, set:int) -> int:
		"""
		Sets the print page order setting value.

		:param set: Indicates the print page order setting
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..1 | Previous value of the print page order setting |

		Available since E3.series TLB-Versions: 10.20
		"""
		return self._obj.SetPrintSheetOrder(set)

	def GetPrintSheetOrder(self) -> int:
		"""
		Gets the print page order setting value.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0..8 | Print page order direction |

		Available since E3.series TLB-Versions: 10.20
		"""
		return self._obj.GetPrintSheetOrder()

	def SelectComponentFromTable(self) -> tuple[int, str, str]:
		"""
		Gets the interactively selected component name and version from the E³.series Component Table dialog.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ComponentName | str | Selected component name passed out of the function |
		| 2 | ComponentVersion | str | Selected component version passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Component was selected |
		| 0 | No component was selected |

		Available since E3.series TLB-Versions: 11.00
		"""
		dummy=0
		return self._obj.SelectComponentFromTable(dummy, dummy)

	def GetDatabaseTableSelectedComponents(self) -> tuple[int, tuple[str,...], tuple[str,...]]:
		"""
		Gets the names and versions of the components selected in the E³.series Component Table dialog.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ComponentArray | tuple[str,...] | Array of component names passed out of the function |
		| 2 | VersionArray | tuple[str,...] | Array of component versions passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ComponentArray and VersionArray |
		| 0 | No components are selected or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		ret, ComponentArray, VersionArray = self._obj.GetDatabaseTableSelectedComponents(dummy, dummy)
		ComponentArray = ComponentArray[1:] if type(ComponentArray) == tuple and len(ComponentArray) > 0 else tuple()
		VersionArray = VersionArray[1:] if type(VersionArray) == tuple and len(VersionArray) > 0 else tuple()
		return ret, ComponentArray, VersionArray

	def GetDatabaseTreeSelectedComponents(self) -> tuple[int, tuple[str,...], tuple[str,...]]:
		"""
		Gets the names and versions of the components selected in the E³.series Component database tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ComponentArray | tuple[str,...] | Array of component names |
		| 2 | VersionArray | tuple[str,...] | Array of component versions |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ComponentArray and VersionArray |
		| 0 | No components are selected or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		ret, ComponentArray, VersionArray = self._obj.GetDatabaseTreeSelectedComponents(dummy, dummy)
		ComponentArray = ComponentArray[1:] if type(ComponentArray) == tuple and len(ComponentArray) > 0 else tuple()
		VersionArray = VersionArray[1:] if type(VersionArray) == tuple and len(VersionArray) > 0 else tuple()
		return ret, ComponentArray, VersionArray

	def GetDatabaseTreeSelectedSymbols(self) -> tuple[int, tuple[str,...], tuple[str,...]]:
		"""
		Gets the names and versions of the symbols selected in the E³.series Symbol database tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | SymbolArray | tuple[str,...] | Array of symbol names |
		| 2 | VersionArray | tuple[str,...] | Array of symbol versions |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in SymbolArray and VersionArray |
		| 0 | No symbols are selected or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		ret, SymbolArray, VersionArray = self._obj.GetDatabaseTreeSelectedSymbols(dummy, dummy)
		SymbolArray = SymbolArray[1:] if type(SymbolArray) == tuple and len(SymbolArray) > 0 else tuple()
		VersionArray = VersionArray[1:] if type(VersionArray) == tuple and len(VersionArray) > 0 else tuple()
		return ret, SymbolArray, VersionArray

	def GetDatabaseTreeSelectedModels(self) -> tuple[int, tuple[str,...]]:
		"""
		Gets the names of the models selected in the E³.series Component database tree.

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | ModelArray | tuple[str,...] | Array of model names |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ModelArray |
		| 0 | No models are selected or an error occurred |

		Available since E3.series TLB-Versions: 11.70
		"""
		dummy=0
		ret, ModelArray = self._obj.GetDatabaseTreeSelectedModels(dummy)
		ModelArray = ModelArray[1:] if type(ModelArray) == tuple and len(ModelArray) > 0 else tuple()
		return ret, ModelArray

	def ClearResultWindow(self) -> None:
		"""
		Clears the content of the Results output window in E³.series.

		:return:
		No return value.

		Available since E3.series TLB-Versions: 11.80
		"""
		return self._obj.ClearResultWindow()

	def PutMultiuserLogMessage(self, source:str, text:str) -> int:
		"""
		Writes a message to the multi-user server log file.

		:param source: Client name
		:type str: str
		:param text: Log file message
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Message added to log file |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 11.90
		"""
		return self._obj.PutMultiuserLogMessage(source, text)

	def BringToForeground(self) -> int:
		"""
		Brings the E³.series application to the foreground of the monitor display.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | E³.series brought to the foreground |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 12.00
		"""
		return self._obj.BringToForeground()

	def PutErrorEx(self, flags:int, text:str, item:int, red:int, green:int, blue:int) -> int:
		"""
		Outputs error text to the E³.series Messages window.

		:param flags: Indicates whether an additional error dialog should appear. If set to 0, no additional error dialog appears. If set to 1, an additional error dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project
		:type int: int
		:param red: RGB colorspace's red value for the text color
		:type int: int
		:param green: RGB colorspace's green value for the text color
		:type int: int
		:param blue: RGB colorspace's blue value for the text color
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 12.00
		"""
		return self._obj.PutErrorEx(flags, text, item, red, green, blue)

	def PutWarningEx(self, flags:int, text:str, item:int, red:int, green:int, blue:int) -> int:
		"""
		Outputs warning text to the E³.series Messages window.

		:param flags: Indicates whether an additional warning dialog should appear. If set to 0, no additional warning dialog appears. If set to 1, an additional warning dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project
		:type int: int
		:param red: RGB colorspace's red value for the text color
		:type int: int
		:param green: RGB colorspace's green value for the text color
		:type int: int
		:param blue: RGB colorspace's blue value for the text color
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 12.00
		"""
		return self._obj.PutWarningEx(flags, text, item, red, green, blue)

	def PutInfoEx(self, flags:int, text:str, item:int, red:int, green:int, blue:int) -> int:
		"""
		Outputs information text to the E³.series Messages window.

		:param flags: Indicates whether an additional information dialog should appear. If set to 0, no additional information dialog appears. If set to 1, an additional information dialog appears
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project
		:type int: int
		:param red: RGB colorspace's red value for the text color
		:type int: int
		:param green: RGB colorspace's green value for the text color
		:type int: int
		:param blue: RGB colorspace's blue value for the text color
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 12.00
		"""
		return self._obj.PutInfoEx(flags, text, item, red, green, blue)

	def PutVerifyEx(self, flags:int, text:str, item:int, red:int, green:int, blue:int) -> int:
		"""
		Outputs verification error text to the E³.series Result window.

		:param flags: Not used
		:type int: int
		:param text: Not used
		:type str: str
		:param item: Not used
		:type int: int
		:param red: Not used
		:type int: int
		:param green: Not used
		:type int: int
		:param blue: Not used
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 12.00
		"""
		return self._obj.PutVerifyEx(flags, text, item, red, green, blue)

	def PutMessageEx(self, flags:int, text:str, item:int, red:int, green:int, blue:int) -> int:
		"""
		Outputs text to the E³.series Messages window.

		:param flags: Not used
		:type int: int
		:param text: Text to be displayed
		:type str: str
		:param item: Identifier of an item contained in the. <span style="font-style: italic;color: #ff0000;">E³.</span>series. project
		:type int: int
		:param red: RGB colorspace's red value for the text color
		:type int: int
		:param green: RGB colorspace's green value for the text color
		:type int: int
		:param blue: RGB colorspace's blue value for the text color
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | This value is always returned |

		Available since E3.series TLB-Versions: 12.00
		"""
		return self._obj.PutMessageEx(flags, text, item, red, green, blue)

	def ActivateOutputWindow(self, windowId:int) -> int:
		"""
		Displays an output window in E³.series.

		:param windowId: Identifier of the output window to display
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Identifier of the previously displayed output window |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 12.00
		"""
		return self._obj.ActivateOutputWindow(windowId)

	def SetChildWindowState(self, state:int) -> int:
		"""
		Sets the child windows' state.

		:param state: Child window state
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Child window state is changed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.SetChildWindowState(state)

	def ShowPluginWindow(self, bShowPluginWindow:bool, guid:str) -> int:
		"""
		Displays or hides an E³.series plugin window.

		:param bShowPluginWindow: Indicates whether the plugin window is displayed. If 1, the plugin window is displayed. If 0, the plugin window is not displayed
		:type bool: bool
		:param guid: GUID of the plugin window
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Value is always returned |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.ShowPluginWindow(bShowPluginWindow, guid)

	def ShowWindow(self, windowId:int, show:bool) -> int:
		"""
		Displays or hides an E³.series window.

		:param windowId: Identifier of the window
		:type int: int
		:param show: Indicates whether the window is displayed. If 1, the window is displayed. If 0, the window is not displayed
		:type bool: bool

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Window display status is changed |
		| 0 | Error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.ShowWindow(windowId, show)

	def SetMultiuserServer(self, server:str) -> int:
		"""
		Sets the multi-user server.

		:param server: Host name and port
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | The multi-user server is set |
		| 1 | Error occurred |

		Available since E3.series TLB-Versions: 17.70
		"""
		return self._obj.SetMultiuserServer(server)

	def SetComponentDataView(self, name:str) -> int:
		"""
		Sets the component database view.

		:param name: Name of the component database view
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Connection strings successfully applied |
		| 1 | Component database view does not exist, Component database view set to empty |
		| 2 | Component database view does not have all the columns of the component table, Component database view set to empty |
		| 3 | Component database view nor the empty component database view exist |
		| 4 | Component database view does not exist and the empty component view does not have all the columns of the component table |
		| 5 | Component database view cannot be set when E³.DatabaseEditor is running |

		Available since E3.series TLB-Versions: 18.01
		"""
		return self._obj.SetComponentDataView(name)

	def GetComponentDataView(self) -> str:
		"""
		Gets the current component database view.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Connection&gt;" | Component database view filter |
		| "&lt;Empty&gt;" | No filter applied |

		Available since E3.series TLB-Versions: 18.01
		"""
		return self._obj.GetComponentDataView()

	def SetSymbolDataView(self, name:str) -> int:
		"""
		Sets the symbol database view.

		:param name: Name of the symbol database view
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 0 | Connection strings successfully applied |
		| 1 | Symbol database view does not exist, Symbol database view set to empty |
		| 2 | Symbol database view does not have all the columns of the symbol table, Symbol database view set to empty |
		| 3 | Symbol database view nor the empty symbol database view exist |
		| 4 | Symbol database view does not exist and the empty symbol view does not have all the columns of the symbol table |
		| 5 | Symbol database view cannot be set when E³.DatabaseEditor is running |

		Available since E3.series TLB-Versions: 18.01
		"""
		return self._obj.SetSymbolDataView(name)

	def GetSymbolDataView(self) -> str:
		"""
		Gets the current symbol database view.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Connection&gt;" | Symbol database view filter |
		| "&lt;Empty&gt;" | No filter applied |

		Available since E3.series TLB-Versions: 18.01
		"""
		return self._obj.GetSymbolDataView()

	def SaveWorkspaceConfiguration(self, name:str="") -> int:
		"""
		Creates or overwrites a workspace configuration.

		:param name: Name of the workspace configuration, defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Work configuration is saved |
		| -1 | No E³.series window |
		| -2 | No active workspace configuration |
		| -3 | Workspace configuration cannot be set to active |
		| -4 | Workspace configuration could not be saved |
		| -12 | E³.series is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.SaveWorkspaceConfiguration(name)

	def DeleteWorkspaceConfiguration(self, name:str="") -> int:
		"""
		Deletes a workspace configuration.

		:param name: Name of the workspace configuration, defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Workspace configuration is saved |
		| -1 | No E³.series window |
		| -2 | No active workspace configuration |
		| -3 | Workspace configuration cannot be set to active |
		| -4 | Workspace configuration could not be saved |
		| -5 | Default workspace configuration cannot be deleted |
		| -10 | Workspace configuration is not contained in the XML file |
		| -12 | E³.series is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.DeleteWorkspaceConfiguration(name)

	def RestoreWorkspaceConfiguration(self, name:str="") -> int:
		"""
		Restores the workspace configuration.

		:param name: Name of the workspace configuration, defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Name of the current workspace |
		| -1 | No E³.series window |
		| -2 | No active workspace configuration |
		| -3 | Workspace configuration cannot be set to active |
		| -4 | Workspace configuration could not be changed |
		| -6 | Reference XML file could not be loaded |
		| -10 | Workspace configuration is not contained in the XML file |
		| -12 | E³.series is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.RestoreWorkspaceConfiguration(name)

	def GetWorkspaceConfigurations(self, path:str="") -> tuple[int, tuple[str,...]]:
		"""
		Gets an array of workspace configuration names.

		:param path: XML file to extract workspace configuration names from. Default value is <"Empty">, defaults to ""
		:type str: str

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | names | tuple[str,...] | Array of workspace configuration names passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of items in ids |
		| -6 | path file could not be loaded |
		| -7 | path file cannot be found |
		| -8 | XML file in %APPDATA% could not be loaded |
		| -12 | E³.series is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		dummy=0
		ret, names = self._obj.GetWorkspaceConfigurations(dummy, path)
		names = names[1:] if type(names) == tuple and len(names) > 0 else tuple()
		return ret, names

	def LoadWorkspaceConfigurationFromFile(self, name:str, path:str) -> int:
		"""
		Loads a workspace configuration from an XML file and adopts the configuration into the E³.series instance.

		:param name: Name of the workspace configuration
		:type str: str
		:param path: Name of the configuration file with complete path specification
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Current workspace configuration overwritten from file |
		| -1 | No E³.series application window |
		| -6 | path file could not be loaded |
		| -7 | path file could not be found |
		| -8 | XML file in %APPDATA% could not be loaded |
		| -9 | Workspace configuration could not be set as current workspace configuration |
		| -10 | Workspace configuration is not contained in the XML file |
		| -12 | E³.series is in full screen mode |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.LoadWorkspaceConfigurationFromFile(name, path)

	def GetCurrentWorkspaceConfiguration(self) -> str:
		"""
		Gets the current workspace configuration name.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Workspace&gt;" | Name of the current workspace configuration |

		Available since E3.series TLB-Versions: 18.10
		"""
		return self._obj.GetCurrentWorkspaceConfiguration()

	def GetMultiuserServer(self) -> str:
		"""
		Gets the host name and port of the multi-user server.

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Server&gt;" | Host name and port of the multi-user server |
		| "&lt;Empty&gt;" | No connection to a multi-user server or an error occurred |

		Available since E3.series TLB-Versions: 19.01
		"""
		return self._obj.GetMultiuserServer()

	def CloneWithProject(self, ppid:int, com:str="", data:str="") -> int:
		"""
		Creates or updates a clone E³.series process of the master E³.series process which shares the project data.

		:param ppid: Clone process identifier. If 0, a new clone will be created. If greater than 0, the clone will be updated or ended
		:type int: int
		:param com: Command option for the clone. Default value is "<Empty>", defaults to ""
		:type str: str
		:param data: Path to a Visual Basic script file. Default value is "<Empty>", defaults to ""
		:type str: str

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| &gt;= 0 | Process identifier of the clone |
		| -1 | Clone process is in a transaction state |
		| -2 | Previous call to this function has not yet returned |
		| -3 | Master process is in a transaction state |
		| -4 | Communication with the clone failed, Shared memory could not be created |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.CloneWithProject(ppid, com, data)

	def GetCloningInformation(self, what:str) -> str:
		"""
		Gets clone E³.series process information.

		:param what: Information type
		:type str: str

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;Clone Information&gt;" | Process information requested by what |
		| "0" | Error occurred |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 20.00
		"""
		return self._obj.GetCloningInformation(what)

	def CalculateCircumcircleDiameter(self, dias:list[int]) -> float:
		"""
		Gets the circumcircle diameter of wires.

		:param dias: Array of wire diameters passed into the function
		:type list[int]: list[int]

		:return:
		Type: float

		| Return Value | Description |
		|:-----:|:-----|
		| 0.0 | Calculation failed to produce a result |
		| &gt; 0.0 | Circumcircle diameter value |

		Available since E3.series TLB-Versions: 20.11, 19.20
		"""
		ret = self._obj.CalculateCircumcircleDiameter(dias)
		return ret[0]

	def IsDistDesign(self) -> int:
		"""
		Gets the usage status of the Distributed Design for E³.series.

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Distributed Design is in use |
		| 0 | Distributed Design is not in use |

		Available since E3.series TLB-Versions: 22.00
		"""
		return self._obj.IsDistDesign()

	def SuppressMessages(self, suppress:bool, flags:int=0) -> int:
		"""
		Suppresses messages appearing in the E³.series Messages window.

		:param suppress: Indicates if messages are suppressed. If 1, the messages  are suppressed. If 0, the messages are not suppressed
		:type bool: bool
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: int

		| Return Value | Description |
		|:-----:|:-----|
		| 1 | Window message suppression status is changed |
		| -1 | Error occurred |

		Available since E3.series TLB-Versions: 23.01
		"""
		return self._obj.SuppressMessages(suppress, flags)

	def SetConfigFile(self, processType:int, filepath:str, flags:int=0) -> str:
		"""
		Sets the current path and file name of the configuration file for importing or exporting files.

		:param processType: Type of the import or export files described in the configuration file **Available enum type:** e3series.types.ConfigFileType.
		:type int: int
		:param filepath: Path and name of the configuration file
		:type str: str
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File Path&gt;" | Previous path and name of the configuration file |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.SetConfigFile(processType, filepath, flags)

	def GetConfigFile(self, processType:int, flags:int=0) -> str:
		"""
		Gets the current path and file name of the configuration file for importing or exporting files.

		:param processType: Type of the import or export files described in the configuration file **Available enum type:** e3series.types.ConfigFileType.
		:type int: int
		:param flags: Not used., defaults to 0
		:type int: int

		:return:
		Type: str

		| Return Value | Description |
		|:-----:|:-----|
		| "&lt;File Path&gt;" | Path and name of the configuration file |
		| "&lt;Empty&gt;" | Error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		return self._obj.GetConfigFile(processType, flags)

	def GetComponentList(self, additionalAttributes:list[str]=pythoncom.Empty, flags:int=0) -> tuple[int, tuple[tuple[typing.Union[str,int],...],...]]:
		"""
		Gets a list of components and component information from the component database.

		:param additionalAttributes: Array of database data column names of the. ComponentData. database table and attribute values to be supplied in. list, defaults to pythoncom.Empty
		:type list[str]: list[str]
		:param flags: Flags bit values specifying how the list of components is filtered., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | result | tuple[tuple[typing.Union[str,int],...],...] | List of components and component information from the component  database passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of components in list |
		| 0 | No components are found or an error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		return self._obj.GetComponentList(dummy, additionalAttributes, flags)

	def GetModelList(self, additionalAttributes:list[str]=pythoncom.Empty, flags:int=0) -> tuple[int, tuple[tuple[typing.Union[str,int],...],...]]:
		"""
		Gets a list of models and model information from the component database.

		:param additionalAttributes: Array of database data values and attributes to be supplied in. list. Array of database data column names of the ModelData database table and attribute values to be supplied in list, defaults to pythoncom.Empty
		:type list[str]: list[str]
		:param flags: Not used., defaults to 0
		:type int: int

		:return:

		Type: Tuple
		| Index | Name | Type | Description |
		|:-----:|:-----|:-----|:-----|
		| 0 | ReturnValue | int | See table return value |
		| 1 | result | tuple[tuple[typing.Union[str,int],...],...] | List of models and model information from the component database passed out of the function |

		| Return Value | Description |
		|:-----:|:-----|
		| &gt; 0 | Number of models in list |
		| 0 | No models are found or an error occurred |

		Available since E3.series TLB-Versions: 24.11
		"""
		dummy=0
		return self._obj.GetModelList(dummy, additionalAttributes, flags)

