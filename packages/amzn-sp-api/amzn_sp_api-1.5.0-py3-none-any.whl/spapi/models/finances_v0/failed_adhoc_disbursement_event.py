# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FailedAdhocDisbursementEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'funds_transfers_type': 'str',
        'transfer_id': 'str',
        'disbursement_id': 'str',
        'payment_disbursement_type': 'str',
        'status': 'str',
        'transfer_amount': 'Currency',
        'posted_date': 'datetime',
    }

    attribute_map = {
        'funds_transfers_type': 'FundsTransfersType',
        'transfer_id': 'TransferId',
        'disbursement_id': 'DisbursementId',
        'payment_disbursement_type': 'PaymentDisbursementType',
        'status': 'Status',
        'transfer_amount': 'TransferAmount',
        'posted_date': 'PostedDate',
    }

    def __init__(self, funds_transfers_type=None, transfer_id=None, disbursement_id=None, payment_disbursement_type=None, status=None, transfer_amount=None, posted_date=None, _configuration=None):  # noqa: E501
        """FailedAdhocDisbursementEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._funds_transfers_type = None
        self._transfer_id = None
        self._disbursement_id = None
        self._payment_disbursement_type = None
        self._status = None
        self._transfer_amount = None
        self._posted_date = None
        self.discriminator = None

        if funds_transfers_type is not None:
            self.funds_transfers_type = funds_transfers_type
        if transfer_id is not None:
            self.transfer_id = transfer_id
        if disbursement_id is not None:
            self.disbursement_id = disbursement_id
        if payment_disbursement_type is not None:
            self.payment_disbursement_type = payment_disbursement_type
        if status is not None:
            self.status = status
        if transfer_amount is not None:
            self.transfer_amount = transfer_amount
        if posted_date is not None:
            self.posted_date = posted_date

    @property
    def funds_transfers_type(self):
        """Gets the funds_transfers_type of this FailedAdhocDisbursementEvent.  # noqa: E501

        The type of fund transfer.   Example \"Refund\"  # noqa: E501

        :return: The funds_transfers_type of this FailedAdhocDisbursementEvent.  # noqa: E501
        :rtype: str
        """
        return self._funds_transfers_type

    @funds_transfers_type.setter
    def funds_transfers_type(self, funds_transfers_type):
        """Sets the funds_transfers_type of this FailedAdhocDisbursementEvent.

        The type of fund transfer.   Example \"Refund\"  # noqa: E501

        :param funds_transfers_type: The funds_transfers_type of this FailedAdhocDisbursementEvent.  # noqa: E501
        :type: str
        """

        self._funds_transfers_type = funds_transfers_type

    @property
    def transfer_id(self):
        """Gets the transfer_id of this FailedAdhocDisbursementEvent.  # noqa: E501

        The transfer identifier.  # noqa: E501

        :return: The transfer_id of this FailedAdhocDisbursementEvent.  # noqa: E501
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this FailedAdhocDisbursementEvent.

        The transfer identifier.  # noqa: E501

        :param transfer_id: The transfer_id of this FailedAdhocDisbursementEvent.  # noqa: E501
        :type: str
        """

        self._transfer_id = transfer_id

    @property
    def disbursement_id(self):
        """Gets the disbursement_id of this FailedAdhocDisbursementEvent.  # noqa: E501

        The disbursement identifier.  # noqa: E501

        :return: The disbursement_id of this FailedAdhocDisbursementEvent.  # noqa: E501
        :rtype: str
        """
        return self._disbursement_id

    @disbursement_id.setter
    def disbursement_id(self, disbursement_id):
        """Sets the disbursement_id of this FailedAdhocDisbursementEvent.

        The disbursement identifier.  # noqa: E501

        :param disbursement_id: The disbursement_id of this FailedAdhocDisbursementEvent.  # noqa: E501
        :type: str
        """

        self._disbursement_id = disbursement_id

    @property
    def payment_disbursement_type(self):
        """Gets the payment_disbursement_type of this FailedAdhocDisbursementEvent.  # noqa: E501

        The type of payment for disbursement.   Example `CREDIT_CARD`  # noqa: E501

        :return: The payment_disbursement_type of this FailedAdhocDisbursementEvent.  # noqa: E501
        :rtype: str
        """
        return self._payment_disbursement_type

    @payment_disbursement_type.setter
    def payment_disbursement_type(self, payment_disbursement_type):
        """Sets the payment_disbursement_type of this FailedAdhocDisbursementEvent.

        The type of payment for disbursement.   Example `CREDIT_CARD`  # noqa: E501

        :param payment_disbursement_type: The payment_disbursement_type of this FailedAdhocDisbursementEvent.  # noqa: E501
        :type: str
        """

        self._payment_disbursement_type = payment_disbursement_type

    @property
    def status(self):
        """Gets the status of this FailedAdhocDisbursementEvent.  # noqa: E501

        The status of the failed `AdhocDisbursement`.   Example `HARD_DECLINED`  # noqa: E501

        :return: The status of this FailedAdhocDisbursementEvent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FailedAdhocDisbursementEvent.

        The status of the failed `AdhocDisbursement`.   Example `HARD_DECLINED`  # noqa: E501

        :param status: The status of this FailedAdhocDisbursementEvent.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def transfer_amount(self):
        """Gets the transfer_amount of this FailedAdhocDisbursementEvent.  # noqa: E501


        :return: The transfer_amount of this FailedAdhocDisbursementEvent.  # noqa: E501
        :rtype: Currency
        """
        return self._transfer_amount

    @transfer_amount.setter
    def transfer_amount(self, transfer_amount):
        """Sets the transfer_amount of this FailedAdhocDisbursementEvent.


        :param transfer_amount: The transfer_amount of this FailedAdhocDisbursementEvent.  # noqa: E501
        :type: Currency
        """

        self._transfer_amount = transfer_amount

    @property
    def posted_date(self):
        """Gets the posted_date of this FailedAdhocDisbursementEvent.  # noqa: E501

        Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).  # noqa: E501

        :return: The posted_date of this FailedAdhocDisbursementEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this FailedAdhocDisbursementEvent.

        Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).  # noqa: E501

        :param posted_date: The posted_date of this FailedAdhocDisbursementEvent.  # noqa: E501
        :type: datetime
        """

        self._posted_date = posted_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FailedAdhocDisbursementEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FailedAdhocDisbursementEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FailedAdhocDisbursementEvent):
            return True

        return self.to_dict() != other.to_dict()
