# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class PendingModifiedValues(UniversalBaseModel):
    db_instance_class: typing.Optional[str] = pydantic.Field(alias="dbInstanceClass", default=None)
    allocated_storage: typing.Optional[int] = pydantic.Field(alias="allocatedStorage", default=None)
    master_user_password: typing.Optional[str] = pydantic.Field(alias="masterUserPassword", default=None)
    port: typing.Optional[int] = None
    backup_retention_period: typing.Optional[int] = pydantic.Field(alias="backupRetentionPeriod", default=None)
    multi_az: typing.Optional[bool] = pydantic.Field(alias="multiAZ", default=None)
    engine_version: typing.Optional[str] = pydantic.Field(alias="engineVersion", default=None)
    license_model: typing.Optional[str] = pydantic.Field(alias="licenseModel", default=None)
    iops: typing.Optional[int] = None
    db_instance_identifier: typing.Optional[str] = pydantic.Field(alias="dbInstanceIdentifier", default=None)
    storage_type: typing.Optional[str] = pydantic.Field(alias="storageType", default=None)
    ca_certificate_identifier: typing.Optional[str] = pydantic.Field(alias="caCertificateIdentifier", default=None)
    db_subnet_group_name: typing.Optional[str] = pydantic.Field(alias="dbSubnetGroupName", default=None)
    storage_throughput: typing.Optional[int] = pydantic.Field(alias="storageThroughput", default=None)
    dedicated_log_volume: typing.Optional[bool] = pydantic.Field(alias="dedicatedLogVolume", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
