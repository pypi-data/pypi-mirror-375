# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/catalog/catalog.proto, unacast/v2/catalog/catalog_service.proto, unacast/v2/catalog/data_delivery_service.proto, unacast/v2/catalog/map_layer_data_delivery_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import unatype as __unatype__
from ...catalog import v1 as __catalog_v1__
from ...index import v1 as __index_v1__
from ...maps import v1 as __maps_v1__
from .. import (
    maps as _maps__,
    metric as _metric__,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class DataDeliveryStatus(betterproto.Enum):
    NOT_SET = 0
    NOT_STARTED = 1
    STARTED = 2
    SUCCESS = 3
    ERROR = 99


class DeliverySourceType(betterproto.Enum):
    METRIC = 0
    DATASET = 1
    LAYER_SERIES = 2
    LAYER = 3


class DestinationConfigType(betterproto.Enum):
    BIG_QUERY_DST = 0
    GCS = 1
    S3 = 2
    AZURE = 3


class DataDeliveryStatusType(betterproto.Enum):
    ENABLED = 0
    DISABLED = 1


class DataDeliveryJobStatus(betterproto.Enum):
    UNSPECIFIED = 0
    PENDING = 1
    RUNNING = 2
    COMPLETED = 3
    FAILED = 4


@dataclass(eq=False, repr=False)
class GetDataDeliveryInfoRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListDataDeliveryInfoRequest(betterproto.Message):
    filter: "ListDataDeliveryFilter" = betterproto.message_field(1)
    order_by: str = betterproto.string_field(2)
    """
    SQL syntax, e.g. "last_activity desc" or "created_at ASC".
     Only one field can be used for sorting.
     Ascending is default.
    
     The default is "last_activity desc".
    
     Accepted values:
     - "last_activity": Last Activity, last DataDeliveryOrder `status_timestamp`
     - "created_at": Created at, DataDelivery `created_at`
    """

    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListDataDeliveryInfoResponse(betterproto.Message):
    deliveries: List["DataDeliveryInfo"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class DataDeliveryInfo(betterproto.Message):
    data_delivery_config_id: str = betterproto.string_field(1)
    data_delivery: "DataDelivery" = betterproto.message_field(7)
    last_order: "DataDeliveryOrder" = betterproto.message_field(8)
    stats: "DataDeliveryStats" = betterproto.message_field(9)
    has_completed_final_order: bool = betterproto.bool_field(12)
    """
    True if the data delivery per its configuration has completed its final order.
     Typically this means that the configuration has an end-date and that this full date-range has been delivered.
    """

    billing_account_display_name: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class ListDataDeliveryFilter(betterproto.Message):
    included_billing_accounts: List[str] = betterproto.string_field(1)
    included_last_order_status: List["DataDeliveryStatus"] = betterproto.enum_field(2)
    included_metric_ids: List[str] = betterproto.string_field(3)
    include_delivery_status_types: List["DataDeliveryStatusType"] = (
        betterproto.enum_field(4)
    )
    included_dataset_ids: List[str] = betterproto.string_field(5)
    included_data_delivery_ids: List[str] = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class DataDeliveryStats(betterproto.Message):
    total_orders: int = betterproto.int32_field(1)
    completed_orders: int = betterproto.int32_field(2)
    completed_orders_date_range: "__unatype__.DateRange" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CreateDataDeliveryRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    delivery_source_type: "DeliverySourceType" = betterproto.enum_field(8)
    delivery_source_id: str = betterproto.string_field(2)
    billing_context: str = betterproto.string_field(4)
    filters: "DataDeliveryFilters" = betterproto.message_field(5)
    delivery_columns: List["DeliveryColumn"] = betterproto.message_field(6)
    destination: "DestinationConfig" = betterproto.message_field(9)
    strategy: "__catalog_v1__.DataDeliveryStrategy" = betterproto.enum_field(10)
    include_sensitive_data: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class DeleteDataDeliveryRequest(betterproto.Message):
    delivery_id: str = betterproto.string_field(1)
    preserve_delivery_spec: bool = betterproto.bool_field(2)
    dry_run: bool = betterproto.bool_field(3)
    delete_events: bool = betterproto.bool_field(4)
    delete_tasks: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class DeleteDataDeliveryResponse(betterproto.Message):
    resources: List[str] = betterproto.string_field(1)
    """
    A list of strings describing the effected resources, particularly useful when running with dry_run == true
    """


@dataclass(eq=False, repr=False)
class CreateDataDeliveryResponse(betterproto.Message):
    delivery: "DataDelivery" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDataDeliveryStatusRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDataDeliveryStatusResponse(betterproto.Message):
    id: str = betterproto.string_field(1)
    event_id: str = betterproto.string_field(3)
    status: "__index_v1__.IndexStatus" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class PauseDataDeliveryRequest(betterproto.Message):
    data_delivery_id: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PauseDataDeliveryResponse(betterproto.Message):
    delivery: "DataDelivery" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ResumeDataDeliveryRequest(betterproto.Message):
    data_delivery_id: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResumeDataDeliveryResponse(betterproto.Message):
    delivery: "DataDelivery" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TriggerDataDeliveryRequest(betterproto.Message):
    data_delivery_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TriggerDataDeliveryResponse(betterproto.Message):
    delivery: "DataDelivery" = betterproto.message_field(1)
    job: "DataDeliveryJob" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NotifyDataChangedRequest(betterproto.Message):
    series_id: str = betterproto.string_field(1)
    layer_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class NotifyDataChangedResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListDataDeliveriesRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListDataDeliveriesResponse(betterproto.Message):
    deliveries: List["DataDelivery"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDataDeliveryOrdersRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAllDataDeliveryOrdersRequest(betterproto.Message):
    billing_contexts: List[str] = betterproto.string_field(1)
    metric_ids: List[str] = betterproto.string_field(2)
    data_delivery_config_ids: List[str] = betterproto.string_field(7)
    statuses: List["DataDeliveryStatus"] = betterproto.enum_field(3)
    date_range: "__unatype__.DateRange" = betterproto.message_field(4)
    page_size: int = betterproto.int64_field(5)
    page_token: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class DataDeliveryOrder(betterproto.Message):
    id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)
    start_date: "__unatype__.Date" = betterproto.message_field(3)
    end_date: "__unatype__.Date" = betterproto.message_field(4)
    start_timestamp: int = betterproto.int64_field(6)
    destination_config_type: "DestinationConfigType" = betterproto.enum_field(7)
    delivery_status: "DataDeliveryStatus" = betterproto.enum_field(8)
    status_timestamp: int = betterproto.int64_field(9)
    big_query_destination: "BigQueryDestination" = betterproto.message_field(
        11, group="destination"
    )
    file_destination: "FileDestination" = betterproto.message_field(
        12, group="destination"
    )
    billing_context: str = betterproto.string_field(13)
    data_delivery_config_id: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class GetDataDeliveryOrdersResponse(betterproto.Message):
    orders: List["DataDeliveryOrder"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetAllDataDeliveryOrdersResponse(betterproto.Message):
    orders: List["DataDeliveryOrder"] = betterproto.message_field(1)
    next_page_token: int = betterproto.int64_field(2)
    total_pages: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class GetDataDeliveryShipmentsRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DataDeliveryShipment(betterproto.Message):
    id: str = betterproto.string_field(1)
    order_id: str = betterproto.string_field(2)
    filename: str = betterproto.string_field(3)
    status: "DataDeliveryStatus" = betterproto.enum_field(5)
    error_message: str = betterproto.string_field(6)
    created_at: int = betterproto.int64_field(7)
    updated_at: int = betterproto.int64_field(8)


@dataclass(eq=False, repr=False)
class GetDataDeliveryShipmentsResponse(betterproto.Message):
    shipments: List["DataDeliveryShipment"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RetryDataDeliveryJobRequest(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    force: bool = betterproto.bool_field(2)
    """
    If the job you want to retry is not in failed the retry will fail unless this is set to true. Be careful with this, you could potentially end up with duplicate data.
    """


@dataclass(eq=False, repr=False)
class DataDelivery(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    delivery_source_type: "DeliverySourceType" = betterproto.enum_field(11)
    delivery_source_id: str = betterproto.string_field(2)
    billing_account_id: str = betterproto.string_field(3)
    id: str = betterproto.string_field(10)
    filters: "DataDeliveryFilters" = betterproto.message_field(4)
    destination_config_json: str = betterproto.string_field(6)
    destination_config_type: "DestinationConfigType" = betterproto.enum_field(7)
    data_schema: "_metric__.DataSchema" = betterproto.message_field(8)
    delivery_columns: List["DeliveryColumn"] = betterproto.message_field(12)
    status: "DataDeliveryStatusType" = betterproto.enum_field(9)
    strategy: "__catalog_v1__.DataDeliveryStrategy" = betterproto.enum_field(13)
    storage_access_id: str = betterproto.string_field(14)
    created_time: str = betterproto.string_field(15)
    created_by: str = betterproto.string_field(16)
    update_time: str = betterproto.string_field(17)
    update_by: str = betterproto.string_field(18)
    include_sensitive_data: bool = betterproto.bool_field(19)


@dataclass(eq=False, repr=False)
class DataDeliveryFilters(betterproto.Message):
    feature_filter: List[str] = betterproto.string_field(1)
    """List of features by ID to limit the delivery to"""

    related_feature_filter: List[str] = betterproto.string_field(6)
    """List of related features by ID to limit the delivery to"""

    address_component_filter: List["_maps__.AddressComponentFilter"] = (
        betterproto.message_field(2)
    )
    """
    Filter clause to limit the delivery to certain Address Component Values.
    """

    related_address_component_filter: List["_maps__.AddressComponentFilter"] = (
        betterproto.message_field(7)
    )
    """
    Filter clause to limit the delivery to certain related Address Component Values.
    """

    dimension_filter: List["_metric__.DimensionFilter"] = betterproto.message_field(3)
    """Filter clause to limit the delivery to certain Dimension Values."""

    start_date: "__unatype__.Date" = betterproto.message_field(4)
    """Date from which the delivery will be started"""

    end_date: "__unatype__.Date" = betterproto.message_field(5)
    trim_to_period_of_existence: "__catalog_v1__.TrimToPeriodOfExistence" = (
        betterproto.enum_field(8)
    )
    """
    Trim to period of existence
     Optional. Only returns records within the period of existence of the feature.
     Default behaviour is to TRIM.
    
     Example: A feature has existed from 2020-01-01 to 2020-01-05.
     If TRIM is specified, only records from 2020-01-01 to 2020-01-05 are returned.
     If IGNORE is specified, all records are returned, but only the period of existence of the feature is considered when evaluating other filters.
    """


@dataclass(eq=False, repr=False)
class DestinationConfig(betterproto.Message):
    storage_access_id: str = betterproto.string_field(1)
    file_config: "FileConfig" = betterproto.message_field(2, group="config")
    big_query_table_config: "BigQueryTableConfig" = betterproto.message_field(
        3, group="config"
    )


@dataclass(eq=False, repr=False)
class BigQueryDestination(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    dataset_id: str = betterproto.string_field(2)
    table_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class FileConfig(betterproto.Message):
    filename: str = betterproto.string_field(1)
    format: str = betterproto.string_field(2)
    compression: str = betterproto.string_field(3)
    field_delimiter: str = betterproto.string_field(4)
    header: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class BigQueryTableConfig(betterproto.Message):
    table_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GcsDestination(betterproto.Message):
    bucket: str = betterproto.string_field(1)
    path: str = betterproto.string_field(2)
    region: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class S3Destination(betterproto.Message):
    bucket: str = betterproto.string_field(1)
    path: str = betterproto.string_field(2)
    region: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AzureDestination(betterproto.Message):
    blob_access_url: str = betterproto.string_field(1)
    container_name: str = betterproto.string_field(2)
    path: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class FileDestination(betterproto.Message):
    file_config: "FileConfig" = betterproto.message_field(2)
    s3_destination: "S3Destination" = betterproto.message_field(
        5, group="bucket_config"
    )
    gcs_destination: "GcsDestination" = betterproto.message_field(
        6, group="bucket_config"
    )
    azure_destination: "AzureDestination" = betterproto.message_field(
        7, group="bucket_config"
    )


@dataclass(eq=False, repr=False)
class DeliveryColumn(betterproto.Message):
    """
    Provided as a way of explicitly describe a column to deliver. Can translate to unacast.v2.metric.DataSchema that is usually provided with the metric creation, but removes the fuzz and allows ordering of columns
    """

    source_column: str = betterproto.string_field(1)
    """
    Structure: [Namespace].[column_id].[type] - to be provided alongside the Column in the default_schema to the frontend?
     Namespace because columns are sourced from different aspects and may not have unique IDs across asspects (address_component and features may both have a column with id X)
     Type because the same column can be included in different ways (ie id or value of related item). Maps internally to `unacast.v2.metric.ColumnKind`/`unacast.v2.metric.Column.type`
    """

    target_column_name: str = betterproto.string_field(2)
    """
    The columns name in the delivery. Maps to `user_friendly_name` of unacast.v2.metric.DataSchema
    """


@dataclass(eq=False, repr=False)
class ListDataDeliveryJobsRequest(betterproto.Message):
    filters: List["__unatype__.FilterClause"] = betterproto.message_field(1)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListDataDeliveryJobsResponse(betterproto.Message):
    jobs: List["DataDeliveryJob"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class DataDeliveryJob(betterproto.Message):
    id: str = betterproto.string_field(1)
    data_delivery_id: str = betterproto.string_field(2)
    source: "DataSource" = betterproto.message_field(3)
    destination: "Destination" = betterproto.message_field(4)
    created_time: str = betterproto.string_field(5)
    status: "DataDeliveryJobStatus" = betterproto.enum_field(6)
    status_time: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class DataSource(betterproto.Message):
    layer: "LayerDataSource" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LayerDataSource(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    only_delta: bool = betterproto.bool_field(3)
    feature_id_filter: List[str] = betterproto.string_field(4)
    address_component_filter: List["__maps_v1__.AddressComponentFilter"] = (
        betterproto.message_field(5)
    )
    delivery_columns: List["DeliveryColumn"] = betterproto.message_field(6)
    include_sensitive_data: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class Destination(betterproto.Message):
    big_query_destination: "BigQueryDestination" = betterproto.message_field(1)
    file_destination: "FileDestination" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UpdateDataDeliveryRequest(betterproto.Message):
    data_delivery: "DataDelivery" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class Catalog(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetCatalogRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListCatalogsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListCatalogsResponse(betterproto.Message):
    catalogs: List["Catalog"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetMetricRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)
    billing_context: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetMetricResponse(betterproto.Message):
    metric: "_metric__.Metric" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListMetricsRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)
    layer_filter: List[str] = betterproto.string_field(5)
    product_filter: List[str] = betterproto.string_field(16)
    availability_filter: List["__unatype__.AvailabilityKind"] = betterproto.enum_field(
        6
    )
    group_filter: List["_metric__.GroupMemberSpec"] = betterproto.message_field(7)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListMetricsResponse(betterproto.Message):
    metrics: List["_metric__.Metric"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListMetricsLeanResponse(betterproto.Message):
    metrics: List["_metric__.LeanMetric"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class GetLayerRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    layer_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetLayerResponse(betterproto.Message):
    layer: "_maps__.Layer" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListProductsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListProductsResponse(betterproto.Message):
    products: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryLayerRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    layer_id: str = betterproto.string_field(2)
    address_component_filter: List["_maps__.AddressComponentFilter"] = (
        betterproto.message_field(5)
    )
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class QueryLayerResponse(betterproto.Message):
    features: List["_maps__.Feature"] = betterproto.message_field(4)
    total_size: int = betterproto.int32_field(14)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class DeliverMapLayerRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    layer_id: str = betterproto.string_field(2)
    only_delta: bool = betterproto.bool_field(3)
    billing_context: str = betterproto.string_field(4)
    delivery_columns: List["DeliveryColumn"] = betterproto.message_field(6)
    """DataDeliveryFilters filters = 5;"""

    destination: "DestinationConfig" = betterproto.message_field(9)
    include_sensitive_data: bool = betterproto.bool_field(10)


class DataDeliveryServiceStub(betterproto.ServiceStub):
    async def list_data_deliveries(
        self,
        list_data_deliveries_request: "ListDataDeliveriesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListDataDeliveriesResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/ListDataDeliveries",
            list_data_deliveries_request,
            ListDataDeliveriesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_data_delivery_info(
        self,
        list_data_delivery_info_request: "ListDataDeliveryInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListDataDeliveryInfoResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/ListDataDeliveryInfo",
            list_data_delivery_info_request,
            ListDataDeliveryInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_data_delivery_info(
        self,
        get_data_delivery_info_request: "GetDataDeliveryInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DataDeliveryInfo":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/GetDataDeliveryInfo",
            get_data_delivery_info_request,
            DataDeliveryInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_data_delivery_status(
        self,
        get_data_delivery_status_request: "GetDataDeliveryStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDataDeliveryStatusResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/GetDataDeliveryStatus",
            get_data_delivery_status_request,
            GetDataDeliveryStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_data_delivery(
        self,
        create_data_delivery_request: "CreateDataDeliveryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateDataDeliveryResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/CreateDataDelivery",
            create_data_delivery_request,
            CreateDataDeliveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_data_delivery(
        self,
        update_data_delivery_request: "UpdateDataDeliveryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DataDelivery":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/UpdateDataDelivery",
            update_data_delivery_request,
            DataDelivery,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_data_delivery(
        self,
        delete_data_delivery_request: "DeleteDataDeliveryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteDataDeliveryResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/DeleteDataDelivery",
            delete_data_delivery_request,
            DeleteDataDeliveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pause_data_delivery(
        self,
        pause_data_delivery_request: "PauseDataDeliveryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PauseDataDeliveryResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/PauseDataDelivery",
            pause_data_delivery_request,
            PauseDataDeliveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def resume_data_delivery(
        self,
        resume_data_delivery_request: "ResumeDataDeliveryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ResumeDataDeliveryResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/ResumeDataDelivery",
            resume_data_delivery_request,
            ResumeDataDeliveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def trigger_data_delivery(
        self,
        trigger_data_delivery_request: "TriggerDataDeliveryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TriggerDataDeliveryResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/TriggerDataDelivery",
            trigger_data_delivery_request,
            TriggerDataDeliveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def notify_data_changed(
        self,
        notify_data_changed_request: "NotifyDataChangedRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NotifyDataChangedResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/NotifyDataChanged",
            notify_data_changed_request,
            NotifyDataChangedResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all_data_delivery_orders(
        self,
        get_all_data_delivery_orders_request: "GetAllDataDeliveryOrdersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAllDataDeliveryOrdersResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/GetAllDataDeliveryOrders",
            get_all_data_delivery_orders_request,
            GetAllDataDeliveryOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_data_delivery_orders(
        self,
        get_data_delivery_orders_request: "GetDataDeliveryOrdersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDataDeliveryOrdersResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/GetDataDeliveryOrders",
            get_data_delivery_orders_request,
            GetDataDeliveryOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_data_delivery_shipments(
        self,
        get_data_delivery_shipments_request: "GetDataDeliveryShipmentsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDataDeliveryShipmentsResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/GetDataDeliveryShipments",
            get_data_delivery_shipments_request,
            GetDataDeliveryShipmentsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def execute_delivery_jobs(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/ExecuteDeliveryJobs",
            betterproto_lib_google_protobuf_empty,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_data_delivery_jobs(
        self,
        list_data_delivery_jobs_request: "ListDataDeliveryJobsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListDataDeliveryJobsResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/ListDataDeliveryJobs",
            list_data_delivery_jobs_request,
            ListDataDeliveryJobsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def retry_data_delivery_job(
        self,
        retry_data_delivery_job_request: "RetryDataDeliveryJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.v2.catalog.DataDeliveryService/RetryDataDeliveryJob",
            retry_data_delivery_job_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CatalogServiceStub(betterproto.ServiceStub):
    async def list_catalogs(
        self,
        list_catalogs_request: "ListCatalogsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListCatalogsResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/ListCatalogs",
            list_catalogs_request,
            ListCatalogsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_metric(
        self,
        get_metric_request: "GetMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMetricResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/GetMetric",
            get_metric_request,
            GetMetricResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_metrics(
        self,
        list_metrics_request: "ListMetricsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListMetricsResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/ListMetrics",
            list_metrics_request,
            ListMetricsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_metrics_lean(
        self,
        list_metrics_request: "ListMetricsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListMetricsLeanResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/ListMetricsLean",
            list_metrics_request,
            ListMetricsLeanResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_layer(
        self,
        get_layer_request: "GetLayerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetLayerResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/GetLayer",
            get_layer_request,
            GetLayerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_products(
        self,
        list_products_request: "ListProductsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListProductsResponse":
        return await self._unary_unary(
            "/unacast.v2.catalog.CatalogService/ListProducts",
            list_products_request,
            ListProductsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MapLayerDataDeliveryServiceStub(betterproto.ServiceStub):
    async def deliver_map_layer(
        self,
        deliver_map_layer_request: "DeliverMapLayerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.v2.catalog.MapLayerDataDeliveryService/DeliverMapLayer",
            deliver_map_layer_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class DataDeliveryServiceBase(ServiceBase):

    async def list_data_deliveries(
        self, list_data_deliveries_request: "ListDataDeliveriesRequest"
    ) -> "ListDataDeliveriesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_data_delivery_info(
        self, list_data_delivery_info_request: "ListDataDeliveryInfoRequest"
    ) -> "ListDataDeliveryInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_data_delivery_info(
        self, get_data_delivery_info_request: "GetDataDeliveryInfoRequest"
    ) -> "DataDeliveryInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_data_delivery_status(
        self, get_data_delivery_status_request: "GetDataDeliveryStatusRequest"
    ) -> "GetDataDeliveryStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_data_delivery(
        self, create_data_delivery_request: "CreateDataDeliveryRequest"
    ) -> "CreateDataDeliveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_data_delivery(
        self, update_data_delivery_request: "UpdateDataDeliveryRequest"
    ) -> "DataDelivery":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_data_delivery(
        self, delete_data_delivery_request: "DeleteDataDeliveryRequest"
    ) -> "DeleteDataDeliveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pause_data_delivery(
        self, pause_data_delivery_request: "PauseDataDeliveryRequest"
    ) -> "PauseDataDeliveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def resume_data_delivery(
        self, resume_data_delivery_request: "ResumeDataDeliveryRequest"
    ) -> "ResumeDataDeliveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def trigger_data_delivery(
        self, trigger_data_delivery_request: "TriggerDataDeliveryRequest"
    ) -> "TriggerDataDeliveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def notify_data_changed(
        self, notify_data_changed_request: "NotifyDataChangedRequest"
    ) -> "NotifyDataChangedResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_data_delivery_orders(
        self, get_all_data_delivery_orders_request: "GetAllDataDeliveryOrdersRequest"
    ) -> "GetAllDataDeliveryOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_data_delivery_orders(
        self, get_data_delivery_orders_request: "GetDataDeliveryOrdersRequest"
    ) -> "GetDataDeliveryOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_data_delivery_shipments(
        self, get_data_delivery_shipments_request: "GetDataDeliveryShipmentsRequest"
    ) -> "GetDataDeliveryShipmentsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def execute_delivery_jobs(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_data_delivery_jobs(
        self, list_data_delivery_jobs_request: "ListDataDeliveryJobsRequest"
    ) -> "ListDataDeliveryJobsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def retry_data_delivery_job(
        self, retry_data_delivery_job_request: "RetryDataDeliveryJobRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_data_deliveries(
        self,
        stream: "grpclib.server.Stream[ListDataDeliveriesRequest, ListDataDeliveriesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_data_deliveries(request)
        await stream.send_message(response)

    async def __rpc_list_data_delivery_info(
        self,
        stream: "grpclib.server.Stream[ListDataDeliveryInfoRequest, ListDataDeliveryInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_data_delivery_info(request)
        await stream.send_message(response)

    async def __rpc_get_data_delivery_info(
        self,
        stream: "grpclib.server.Stream[GetDataDeliveryInfoRequest, DataDeliveryInfo]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_data_delivery_info(request)
        await stream.send_message(response)

    async def __rpc_get_data_delivery_status(
        self,
        stream: "grpclib.server.Stream[GetDataDeliveryStatusRequest, GetDataDeliveryStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_data_delivery_status(request)
        await stream.send_message(response)

    async def __rpc_create_data_delivery(
        self,
        stream: "grpclib.server.Stream[CreateDataDeliveryRequest, CreateDataDeliveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_data_delivery(request)
        await stream.send_message(response)

    async def __rpc_update_data_delivery(
        self, stream: "grpclib.server.Stream[UpdateDataDeliveryRequest, DataDelivery]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_data_delivery(request)
        await stream.send_message(response)

    async def __rpc_delete_data_delivery(
        self,
        stream: "grpclib.server.Stream[DeleteDataDeliveryRequest, DeleteDataDeliveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_data_delivery(request)
        await stream.send_message(response)

    async def __rpc_pause_data_delivery(
        self,
        stream: "grpclib.server.Stream[PauseDataDeliveryRequest, PauseDataDeliveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pause_data_delivery(request)
        await stream.send_message(response)

    async def __rpc_resume_data_delivery(
        self,
        stream: "grpclib.server.Stream[ResumeDataDeliveryRequest, ResumeDataDeliveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.resume_data_delivery(request)
        await stream.send_message(response)

    async def __rpc_trigger_data_delivery(
        self,
        stream: "grpclib.server.Stream[TriggerDataDeliveryRequest, TriggerDataDeliveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.trigger_data_delivery(request)
        await stream.send_message(response)

    async def __rpc_notify_data_changed(
        self,
        stream: "grpclib.server.Stream[NotifyDataChangedRequest, NotifyDataChangedResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.notify_data_changed(request)
        await stream.send_message(response)

    async def __rpc_get_all_data_delivery_orders(
        self,
        stream: "grpclib.server.Stream[GetAllDataDeliveryOrdersRequest, GetAllDataDeliveryOrdersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_all_data_delivery_orders(request)
        await stream.send_message(response)

    async def __rpc_get_data_delivery_orders(
        self,
        stream: "grpclib.server.Stream[GetDataDeliveryOrdersRequest, GetDataDeliveryOrdersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_data_delivery_orders(request)
        await stream.send_message(response)

    async def __rpc_get_data_delivery_shipments(
        self,
        stream: "grpclib.server.Stream[GetDataDeliveryShipmentsRequest, GetDataDeliveryShipmentsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_data_delivery_shipments(request)
        await stream.send_message(response)

    async def __rpc_execute_delivery_jobs(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_delivery_jobs(request)
        await stream.send_message(response)

    async def __rpc_list_data_delivery_jobs(
        self,
        stream: "grpclib.server.Stream[ListDataDeliveryJobsRequest, ListDataDeliveryJobsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_data_delivery_jobs(request)
        await stream.send_message(response)

    async def __rpc_retry_data_delivery_job(
        self,
        stream: "grpclib.server.Stream[RetryDataDeliveryJobRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.retry_data_delivery_job(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.catalog.DataDeliveryService/ListDataDeliveries": grpclib.const.Handler(
                self.__rpc_list_data_deliveries,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListDataDeliveriesRequest,
                ListDataDeliveriesResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/ListDataDeliveryInfo": grpclib.const.Handler(
                self.__rpc_list_data_delivery_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListDataDeliveryInfoRequest,
                ListDataDeliveryInfoResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/GetDataDeliveryInfo": grpclib.const.Handler(
                self.__rpc_get_data_delivery_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDataDeliveryInfoRequest,
                DataDeliveryInfo,
            ),
            "/unacast.v2.catalog.DataDeliveryService/GetDataDeliveryStatus": grpclib.const.Handler(
                self.__rpc_get_data_delivery_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDataDeliveryStatusRequest,
                GetDataDeliveryStatusResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/CreateDataDelivery": grpclib.const.Handler(
                self.__rpc_create_data_delivery,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateDataDeliveryRequest,
                CreateDataDeliveryResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/UpdateDataDelivery": grpclib.const.Handler(
                self.__rpc_update_data_delivery,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateDataDeliveryRequest,
                DataDelivery,
            ),
            "/unacast.v2.catalog.DataDeliveryService/DeleteDataDelivery": grpclib.const.Handler(
                self.__rpc_delete_data_delivery,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteDataDeliveryRequest,
                DeleteDataDeliveryResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/PauseDataDelivery": grpclib.const.Handler(
                self.__rpc_pause_data_delivery,
                grpclib.const.Cardinality.UNARY_UNARY,
                PauseDataDeliveryRequest,
                PauseDataDeliveryResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/ResumeDataDelivery": grpclib.const.Handler(
                self.__rpc_resume_data_delivery,
                grpclib.const.Cardinality.UNARY_UNARY,
                ResumeDataDeliveryRequest,
                ResumeDataDeliveryResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/TriggerDataDelivery": grpclib.const.Handler(
                self.__rpc_trigger_data_delivery,
                grpclib.const.Cardinality.UNARY_UNARY,
                TriggerDataDeliveryRequest,
                TriggerDataDeliveryResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/NotifyDataChanged": grpclib.const.Handler(
                self.__rpc_notify_data_changed,
                grpclib.const.Cardinality.UNARY_UNARY,
                NotifyDataChangedRequest,
                NotifyDataChangedResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/GetAllDataDeliveryOrders": grpclib.const.Handler(
                self.__rpc_get_all_data_delivery_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAllDataDeliveryOrdersRequest,
                GetAllDataDeliveryOrdersResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/GetDataDeliveryOrders": grpclib.const.Handler(
                self.__rpc_get_data_delivery_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDataDeliveryOrdersRequest,
                GetDataDeliveryOrdersResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/GetDataDeliveryShipments": grpclib.const.Handler(
                self.__rpc_get_data_delivery_shipments,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDataDeliveryShipmentsRequest,
                GetDataDeliveryShipmentsResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/ExecuteDeliveryJobs": grpclib.const.Handler(
                self.__rpc_execute_delivery_jobs,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.v2.catalog.DataDeliveryService/ListDataDeliveryJobs": grpclib.const.Handler(
                self.__rpc_list_data_delivery_jobs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListDataDeliveryJobsRequest,
                ListDataDeliveryJobsResponse,
            ),
            "/unacast.v2.catalog.DataDeliveryService/RetryDataDeliveryJob": grpclib.const.Handler(
                self.__rpc_retry_data_delivery_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                RetryDataDeliveryJobRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }


class CatalogServiceBase(ServiceBase):

    async def list_catalogs(
        self, list_catalogs_request: "ListCatalogsRequest"
    ) -> "ListCatalogsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_metric(
        self, get_metric_request: "GetMetricRequest"
    ) -> "GetMetricResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_metrics(
        self, list_metrics_request: "ListMetricsRequest"
    ) -> "ListMetricsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_metrics_lean(
        self, list_metrics_request: "ListMetricsRequest"
    ) -> "ListMetricsLeanResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_layer(
        self, get_layer_request: "GetLayerRequest"
    ) -> "GetLayerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_products(
        self, list_products_request: "ListProductsRequest"
    ) -> "ListProductsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_catalogs(
        self, stream: "grpclib.server.Stream[ListCatalogsRequest, ListCatalogsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_catalogs(request)
        await stream.send_message(response)

    async def __rpc_get_metric(
        self, stream: "grpclib.server.Stream[GetMetricRequest, GetMetricResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_metric(request)
        await stream.send_message(response)

    async def __rpc_list_metrics(
        self, stream: "grpclib.server.Stream[ListMetricsRequest, ListMetricsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_metrics(request)
        await stream.send_message(response)

    async def __rpc_list_metrics_lean(
        self,
        stream: "grpclib.server.Stream[ListMetricsRequest, ListMetricsLeanResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_metrics_lean(request)
        await stream.send_message(response)

    async def __rpc_get_layer(
        self, stream: "grpclib.server.Stream[GetLayerRequest, GetLayerResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_layer(request)
        await stream.send_message(response)

    async def __rpc_list_products(
        self, stream: "grpclib.server.Stream[ListProductsRequest, ListProductsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_products(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.catalog.CatalogService/ListCatalogs": grpclib.const.Handler(
                self.__rpc_list_catalogs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListCatalogsRequest,
                ListCatalogsResponse,
            ),
            "/unacast.v2.catalog.CatalogService/GetMetric": grpclib.const.Handler(
                self.__rpc_get_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMetricRequest,
                GetMetricResponse,
            ),
            "/unacast.v2.catalog.CatalogService/ListMetrics": grpclib.const.Handler(
                self.__rpc_list_metrics,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListMetricsRequest,
                ListMetricsResponse,
            ),
            "/unacast.v2.catalog.CatalogService/ListMetricsLean": grpclib.const.Handler(
                self.__rpc_list_metrics_lean,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListMetricsRequest,
                ListMetricsLeanResponse,
            ),
            "/unacast.v2.catalog.CatalogService/GetLayer": grpclib.const.Handler(
                self.__rpc_get_layer,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLayerRequest,
                GetLayerResponse,
            ),
            "/unacast.v2.catalog.CatalogService/ListProducts": grpclib.const.Handler(
                self.__rpc_list_products,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListProductsRequest,
                ListProductsResponse,
            ),
        }


class MapLayerDataDeliveryServiceBase(ServiceBase):

    async def deliver_map_layer(
        self, deliver_map_layer_request: "DeliverMapLayerRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_deliver_map_layer(
        self,
        stream: "grpclib.server.Stream[DeliverMapLayerRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deliver_map_layer(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.catalog.MapLayerDataDeliveryService/DeliverMapLayer": grpclib.const.Handler(
                self.__rpc_deliver_map_layer,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeliverMapLayerRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }
