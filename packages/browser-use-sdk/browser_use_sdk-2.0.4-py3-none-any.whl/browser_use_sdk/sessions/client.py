# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.proxy_country_code import ProxyCountryCode
from ..types.session_item_view import SessionItemView
from ..types.session_list_response import SessionListResponse
from ..types.session_status import SessionStatus
from ..types.session_view import SessionView
from ..types.share_view import ShareView
from .raw_client import AsyncRawSessionsClient, RawSessionsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SessionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSessionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSessionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSessionsClient
        """
        return self._raw_client

    def list_sessions(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        filter_by: typing.Optional[SessionStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionListResponse:
        """
        Get paginated list of AI agent sessions with optional status filtering.

        Parameters
        ----------
        page_size : typing.Optional[int]

        page_number : typing.Optional[int]

        filter_by : typing.Optional[SessionStatus]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionListResponse
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.sessions.list_sessions()
        """
        _response = self._raw_client.list_sessions(
            page_size=page_size, page_number=page_number, filter_by=filter_by, request_options=request_options
        )
        return _response.data

    def create_session(
        self,
        *,
        profile_id: typing.Optional[str] = OMIT,
        proxy_country_code: typing.Optional[ProxyCountryCode] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionItemView:
        """
        Create a new session with a new task.

        Parameters
        ----------
        profile_id : typing.Optional[str]
            The ID of the profile to use for the session

        proxy_country_code : typing.Optional[ProxyCountryCode]
            Country code for proxy location.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionItemView
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.sessions.create_session()
        """
        _response = self._raw_client.create_session(
            profile_id=profile_id, proxy_country_code=proxy_country_code, request_options=request_options
        )
        return _response.data

    def get_session(self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> SessionView:
        """
        Get detailed session information including status, URLs, and task details.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionView
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.sessions.get_session(
            session_id="session_id",
        )
        """
        _response = self._raw_client.get_session(session_id, request_options=request_options)
        return _response.data

    def update_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionView:
        """
        Stop a session and all its running tasks.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionView
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.sessions.update_session(
            session_id="session_id",
        )
        """
        _response = self._raw_client.update_session(session_id, request_options=request_options)
        return _response.data

    def get_session_public_share(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ShareView:
        """
        Get public share information including URL and usage statistics.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ShareView
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.sessions.get_session_public_share(
            session_id="session_id",
        )
        """
        _response = self._raw_client.get_session_public_share(session_id, request_options=request_options)
        return _response.data

    def create_session_public_share(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ShareView:
        """
        Create or return existing public share for a session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ShareView
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.sessions.create_session_public_share(
            session_id="session_id",
        )
        """
        _response = self._raw_client.create_session_public_share(session_id, request_options=request_options)
        return _response.data

    def delete_session_public_share(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Remove public share for a session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.sessions.delete_session_public_share(
            session_id="session_id",
        )
        """
        _response = self._raw_client.delete_session_public_share(session_id, request_options=request_options)
        return _response.data


class AsyncSessionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSessionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSessionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSessionsClient
        """
        return self._raw_client

    async def list_sessions(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        filter_by: typing.Optional[SessionStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionListResponse:
        """
        Get paginated list of AI agent sessions with optional status filtering.

        Parameters
        ----------
        page_size : typing.Optional[int]

        page_number : typing.Optional[int]

        filter_by : typing.Optional[SessionStatus]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionListResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sessions.list_sessions()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_sessions(
            page_size=page_size, page_number=page_number, filter_by=filter_by, request_options=request_options
        )
        return _response.data

    async def create_session(
        self,
        *,
        profile_id: typing.Optional[str] = OMIT,
        proxy_country_code: typing.Optional[ProxyCountryCode] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionItemView:
        """
        Create a new session with a new task.

        Parameters
        ----------
        profile_id : typing.Optional[str]
            The ID of the profile to use for the session

        proxy_country_code : typing.Optional[ProxyCountryCode]
            Country code for proxy location.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionItemView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sessions.create_session()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_session(
            profile_id=profile_id, proxy_country_code=proxy_country_code, request_options=request_options
        )
        return _response.data

    async def get_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionView:
        """
        Get detailed session information including status, URLs, and task details.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sessions.get_session(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_session(session_id, request_options=request_options)
        return _response.data

    async def update_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SessionView:
        """
        Stop a session and all its running tasks.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sessions.update_session(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_session(session_id, request_options=request_options)
        return _response.data

    async def get_session_public_share(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ShareView:
        """
        Get public share information including URL and usage statistics.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ShareView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sessions.get_session_public_share(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_session_public_share(session_id, request_options=request_options)
        return _response.data

    async def create_session_public_share(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ShareView:
        """
        Create or return existing public share for a session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ShareView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sessions.create_session_public_share(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_session_public_share(session_id, request_options=request_options)
        return _response.data

    async def delete_session_public_share(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Remove public share for a session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sessions.delete_session_public_share(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_session_public_share(session_id, request_options=request_options)
        return _response.data
