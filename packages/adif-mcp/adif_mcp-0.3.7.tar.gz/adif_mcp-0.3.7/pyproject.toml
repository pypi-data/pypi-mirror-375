[project]
name = "adif-mcp"
version = "0.3.7"
description = "ADIF MCP core engine with plugin support (LoTW, eQSL, QRZ, Clublog)"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "KI7MT" }]
# Support modern CPython, develop on 3.13, run on 3.11+
requires-python = ">=3.11"

# Runtime deps only (keep UI optional; Tkinter is stdlib)
dependencies = [
    "click>=8.1.7",
    "keyring>=25.6.0",
    "requests>=2.32.5",
    "typing-extensions>=4.15.0",
]

# Classifiers help downstream tooling/users
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Topic :: Utilities",
]

[dependency-groups]
dev = [
    "pytest",
    "ruff",
    "commitizen",
    "pydantic<2",
    "jsonschema>=4.25.1",
    "interrogate>=1.7.0",
    "types-click>=7.1.8",
    "types-requests", # ← add this
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.18",
    "mkdocstrings[python]>=0.30.0",
    "pymdown-extensions>=10.10",
    "pymdown-extensions[extra]>=10.10",
    "mkdocs-redirects>=1.2.2",
    "mkdocs-mermaid2-plugin>=1.2.2",
    "mkdocs-git-revision-date-localized-plugin>=1.4.7",
    "cli-test-helpers>=4.1.0",
]

# Optional extras (reserved for future use)
[project.optional-dependencies]
dev = [
  "ruff>=0.6.8",
  "interrogate>=1.7.0",
]

test = [
  "pytest>=8.3",
  "cli-test-helpers>=0.3.0",
]

# Optional provider integration ( macOS )
keyring = ["keyring>=25.2"]

# Convenience bundle
all = [
  # bring in dev + test + keyring
  "adif-mcp[dev,test]",
  "adif-mcp[keyring]",
]

[project.urls]
"Homepage" = "https://adif-mcp.com"
"Repository" = "https://github.com/your-org/adif-mcp"
"Issues" = "https://github.com/your-org/adif-mcp/issues"
"ADIF Spec" = "https://adif.org.uk/315/ADIF_315.htm"
"LoTW" = "https://lotw.arrl.org/"
"eQSL" = "https://www.eqsl.cc/"
"Club Log" = "https://clublog.org/"
"QRZ" = "https://www.qrz.com/"

[project.scripts]
adif-mcp = "adif_mcp.cli.__main__:main"

# --------------------------------------------------------------------
# ADIF tool config (OS-agnostic & SSOT-ish; your helpers interpret it)
# --------------------------------------------------------------------
[tool.adif]
spec_version = "3.1.5"
features = ["core QSO model", "band/mode/QSL_RCVD enums"]

[tool.adif_mcp]
config_dir_name = "config"
manifest = "manifest.json"
meta_output = "adif_meta.json"
personas_index = "personas.json"
providers_dir = "providers"
schemas = "adif_catalog.json"
spec = "ADIF_315"

[tool.pytest.ini_options]
testpaths = []

# Paths below are *logical* (not absolute). Your util code should:
# - Resolve {config_dir} to a platform-appropriate location (e.g., appdirs)
# - Treat relative repo paths as development defaults
manifest = "mcp/manifest.json"
schemas = { manifest = "mcp/schemas/manifest.v1.json" }
spec = { adif_catalog = "mcp/spec/adif_catalog.json" }
providers_dir = "mcp/providers"
meta_output = "src/adif_mcp/adif_meta.json"

# New: centralize config locations in one place (interpreted by util code)
config_dir_name = "adif-mcp"           # e.g., ~/.config/adif-mcp on Unix, %APPDATA%/adif-mcp on Windows
personas_index = "{config_dir}/personas.json"  # util resolves {config_dir}

# ----------------
# Dev / QA tooling
# ----------------
[tool.ruff]
target-version = "py311"
src = ["src", "test"]
line-length = 95
extend-exclude = [
    ".venv",
    ".smoke-venv",
    "dist",
    "build",
    ".eggs",
    ".pytest_cache",
    "site",
    "docs/_site",
]

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = []
fixable = ["I"]

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "pep621"
tag_format = "v$version"
update_changelog_on_bump = true

# -------------
# Build system
# -------------
[build-system]
requires = ["hatchling>=1.21"]
build-backend = "hatchling.build"

[tool.hatch.build.hooks.custom]
path = "src/adif_mcp/dev/build_hooks.py"


[tool.hatch.build.targets.wheel]
packages = ["src/adif_mcp"]
include = [
  "src/adif_mcp/mcp/manifest.json",
  "src/adif_mcp/resources/**",
]

[tool.hatch.build.targets.sdist]
include = [
  "src/adif_mcp/**",
  "src/adif_mcp/mcp/manifest.json",
  "src/adif_mcp/resources/**",
  "README.md",
  "LICENSE",
  "pyproject.toml",
  "test/**",
]
exclude = [
    "scripts/**",
    ".venv/**",
    ".smoke-venv/**",
    "dist/**",
    "build/**",
    ".git/**",
    ".github/**",
    "docs/**",
    "site/**",
    ".ruff_cache/**",
    ".pytest_cache/**",
]
