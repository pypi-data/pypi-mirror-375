# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.address import Address
from pyevr.openapi_client.models.contact_person import ContactPerson
from pyevr.openapi_client.models.coordinates import Coordinates
from pyevr.openapi_client.models.waybill_authorization import WaybillAuthorization


class PlaceOfDelivery(BaseModel):
    """
    PlaceOfDelivery
    """  # noqa: E501

    name: Optional[StrictStr] = Field(default=None, description="Tarnekoha nimi")
    code: Optional[StrictStr] = Field(default=None, description="Tarnekoha kood")
    register_code: Optional[StrictStr] = Field(
        default=None, description="Registrikood", alias="registerCode"
    )
    address: Optional[Address] = None
    near_address: Optional[StrictStr] = Field(
        default=None, description="Lähiaadress", alias="nearAddress"
    )
    coordinates: Optional[Coordinates] = None
    open_times: Optional[List[StrictStr]] = Field(
        default=None, description="Millal avatud", alias="openTimes"
    )
    is_active: Optional[StrictBool] = Field(
        default=None, description="Kas on aktiivne", alias="isActive"
    )
    preferred_certificates: Optional[List[StrictStr]] = Field(
        default=None,
        description="Eelistatud sertifikaadid",
        alias="preferredCertificates",
    )
    contact_person: Optional[ContactPerson] = Field(default=None, alias="contactPerson")
    waybill_authorizations: Optional[List[WaybillAuthorization]] = Field(
        default=None, description="Volitused", alias="waybillAuthorizations"
    )
    description: Optional[Annotated[str, Field(strict=True, max_length=400)]] = Field(
        default=None, description="Märkused"
    )
    user_custom_data: Optional[Any] = Field(
        default=None,
        description="Api kasutaja poolt kohandatavad andmed",
        alias="userCustomData",
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "code",
        "registerCode",
        "address",
        "nearAddress",
        "coordinates",
        "openTimes",
        "isActive",
        "preferredCertificates",
        "contactPerson",
        "waybillAuthorizations",
        "description",
        "userCustomData",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaceOfDelivery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict["address"] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict["coordinates"] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_person
        if self.contact_person:
            _dict["contactPerson"] = self.contact_person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in waybill_authorizations (list)
        _items = []
        if self.waybill_authorizations:
            for _item_waybill_authorizations in self.waybill_authorizations:
                if _item_waybill_authorizations:
                    _items.append(_item_waybill_authorizations.to_dict())
            _dict["waybillAuthorizations"] = _items
        # set to None if user_custom_data (nullable) is None
        # and model_fields_set contains the field
        if (
            self.user_custom_data is None
            and "user_custom_data" in self.model_fields_set
        ):
            _dict["userCustomData"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaceOfDelivery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "code": obj.get("code"),
                "registerCode": obj.get("registerCode"),
                "address": Address.from_dict(obj["address"])
                if obj.get("address") is not None
                else None,
                "nearAddress": obj.get("nearAddress"),
                "coordinates": Coordinates.from_dict(obj["coordinates"])
                if obj.get("coordinates") is not None
                else None,
                "openTimes": obj.get("openTimes"),
                "isActive": obj.get("isActive"),
                "preferredCertificates": obj.get("preferredCertificates"),
                "contactPerson": ContactPerson.from_dict(obj["contactPerson"])
                if obj.get("contactPerson") is not None
                else None,
                "waybillAuthorizations": [
                    WaybillAuthorization.from_dict(_item)
                    for _item in obj["waybillAuthorizations"]
                ]
                if obj.get("waybillAuthorizations") is not None
                else None,
                "description": obj.get("description"),
                "userCustomData": obj.get("userCustomData"),
            }
        )
        return _obj
