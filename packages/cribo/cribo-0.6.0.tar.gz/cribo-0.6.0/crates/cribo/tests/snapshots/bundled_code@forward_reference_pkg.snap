---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/forward_reference_pkg/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
pkg_compat = _cribo.types.SimpleNamespace(__name__='pkg.compat')
pkg = _cribo.types.SimpleNamespace(__name__='pkg', __initializing__=False, __initialized__=False)
pkg.compat = pkg_compat
"""Compat module."""
CONSTANT = "compat_value"
class BaseClass:
    """Base class."""
    pass
BaseClass.__module__ = 'pkg.compat'
pkg_compat.CONSTANT = CONSTANT
pkg_compat.BaseClass = BaseClass
pkg_core = _cribo.types.SimpleNamespace(__name__='pkg.core', __initializing__=False, __initialized__=False)
pkg.core = pkg_core
def _cribo_init___cribo_f70f3a_pkg(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global pkg_core
    """Package that triggers forward reference."""
    compat = pkg.compat
    self.compat = compat
    self.compat = compat
    pkg_core = _cribo_init___cribo_1a829c_pkg_core(pkg_core)
    core = pkg.core
    self.core = core
    pkg_core = _cribo_init___cribo_1a829c_pkg_core(pkg_core)
    get_value = pkg_core.get_value
    self.get_value = get_value
    self.get_value = get_value
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg.__init__ = _cribo_init___cribo_f70f3a_pkg
def _cribo_init___cribo_1a829c_pkg_core(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Core module that uses compat at top level."""
    CONSTANT = pkg_compat.CONSTANT
    pkg_core.CONSTANT = CONSTANT
    BaseClass = pkg_compat.BaseClass
    pkg_core.BaseClass = BaseClass
    _cached_value = f"Cached: {CONSTANT}"
    self._cached_value = _cached_value

    class DerivedClass(BaseClass):
        """Class that inherits from compat."""
        pass
    DerivedClass.__module__ = 'pkg.core'
    self.DerivedClass = DerivedClass

    def get_value():
        """Get the cached value."""
        return _cached_value
    self.get_value = get_value
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_core.__init__ = _cribo_init___cribo_1a829c_pkg_core
"""Test that should fail with forward reference __cribo_init issue."""
__cribo_init_result = _cribo_init___cribo_f70f3a_pkg(pkg)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(pkg, attr, getattr(__cribo_init_result, attr))
print(f"Value: {pkg.get_value()}")
print("Test completed")
core = pkg.core
compat = pkg.compat
