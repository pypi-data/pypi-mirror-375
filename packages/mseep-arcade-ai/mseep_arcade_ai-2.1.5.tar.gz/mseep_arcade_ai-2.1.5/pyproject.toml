[project]
name = "mseep-arcade-ai"
version = "2.1.5"
description = "Arcade.dev - Tool Calling platform for Agents"
authors = [
    { name = "mseep", email = "support@skydeck.ai" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.10"
dependencies = [
    "arcade-core>=2.2.2,<3.0.0",
    "typer==0.10.0",
    "rich==13.9.4",
    "Jinja2==3.1.6",
    "arcadepy==1.5.0",
    "tqdm==4.67.1",
    "openai==1.82.1",
    "click==8.1.8",
]

[project.readme]
content-type = "text/plain"
text = "Package managed by MseeP.ai"

[project.license]
file = "LICENSE"

[project.optional-dependencies]
all = [
    "scipy>=1.14.0",
    "numpy>=2.0.0",
    "scikit-learn>=1.5.0",
    "pytz>=2024.1",
    "python-dateutil>=2.8.2",
    "arcade-serve>=2.0.0,<3.0.0",
    "arcade-tdk>=2.0.0,<3.0.0",
]
evals = [
    "scipy>=1.14.0",
    "numpy>=2.0.0",
    "scikit-learn>=1.5.0",
    "pytz>=2024.1",
    "python-dateutil>=2.8.2",
]

[project.scripts]
arcade = "arcade_cli.main:cli"

[tool.uv]
dev-dependencies = [
    "pytest>=8.1.2",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.7",
    "mypy>=1.5.1",
    "pre-commit>=3.4.0",
    "ruff>=0.4.0",
    "types-PyYAML>=6.0.0",
    "types-python-dateutil>=2.8.2",
    "types-pytz>=2024.1",
]

[tool.uv.sources.arcade-core]
workspace = true

[tool.uv.sources.arcade-tdk]
workspace = true

[tool.uv.sources.arcade-serve]
workspace = true

[tool.uv.workspace]
members = [
    "libs/arcade-core",
    "libs/arcade-tdk",
    "libs/arcade-serve",
]

[tool.hatch.build.targets.wheel]
packages = [
    "libs/arcade-cli/arcade_cli",
    "libs/arcade-evals/arcade_evals",
]

[tool.mypy]
python_version = "3.10"
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true
exclude = [
    ".*{{.*}}.*",
]

[tool.pytest.ini_options]
testpaths = [
    "libs/tests",
]
python_files = [
    "test_*.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=libs",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = [
    "libs",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",
    "F",
    "I",
    "N",
    "UP",
    "RUF",
]
ignore = [
    "E501",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",
]

[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"
