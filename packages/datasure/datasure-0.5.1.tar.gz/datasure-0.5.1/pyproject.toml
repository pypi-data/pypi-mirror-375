[build-system]
requires = ["uv_build>=0.7.19,<0.9.0"]
build-backend = "uv_build"

[project]
name = "DataSure"
version = "0.5.1"
description = "IPA Data Management System Dashboard"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Innovations for Poverty Action", email = "researchsupport@poverty-action.org" },
]
keywords = ["data-quality", "survey-data", "streamlit", "monitoring", "hfc"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
requires-python = ">=3.11"
dependencies = [
    "streamlit>=1.49.0",
    "pandas>=2.2.2",
    "plotly>=6.2.0",
    "numpy>=2.2.3",
    "openpyxl>=3.1.5",
    "seaborn>=0.13.2",
    "scikit-learn>=1.5.2",
    "geopy>=2.4.1",
    "pysurveycto>=0.0.15",
    "requests>=2.32.3",
    "streamlit-extras>=0.5.5",
    "pyarrow>=16.0.0",
    "opencv-python>=4.11.0.86",
    "matplotlib>=3.10.0",
    "polars>=1.30.0",
    "duckdb==1.3.1",
    "pillow>=11.3.0",
    "pydantic>=2.11.7",
    "keyring>=25.6.0",
    "polars-readstat>=0.5.1",
    "fastexcel>=0.14.0",
]

[project.urls]
Source = "https://github.com/PovertyAction/datasure"
Issues = "https://github.com/PovertyAction/datasure/issues"

[project.scripts]
datasure = "datasure.cli:main"

[project.optional-dependencies]
dev = ["pytest>=8.0.0", "pytest-cov>=4.1.0", "ruff>=0.6.4"]


[tool.uv]
dev-dependencies = [
    "jupyter>=1.1.1",
    "ruff>=0.6.4",
    "sqlfluff>=3.1.1",
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
]

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"
publish-url = "https://upload.pypi.org/legacy/"

[tool.ruff]
line-length = 88
fix = true
# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# docs: https://docs.astral.sh/ruff/rules/
select = [
    "F",   # Pyflakes
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "I",   # isort
    "D",   # flake8-docstrings
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "RUF", # ruff
    "B",   # bugbear
    "TRY", # tryceratops
]

ignore = [
    # do not enable if formatting
    # docs: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",   # tab indentation
    "E111",   # indentation
    "E114",   # indentation
    "E117",   # over indented
    "D206",   # indent with spaces
    "D300",   # triple single quotes
    "E501",   # line length regulated by formatter
    "D105",   # missing docstring in magic method
    "D100",   # missing docstring in public module
    "D104",   # missing docstring in public package
    "SIM110", # Use all instead of `for` loop
    "TRY003", # Avoid specifying long messages outside the exception class
    "D205",   # 1 blank line required between summary line and description
    "D203",
    "D213",
    "D400",   # First line should end with a period
    "D401",   # First line of docstring should be in imperative mood
    "RUF005", # Code suggestions
    "E722",   #bare-exception
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88

[tool.mdformat]
# docs: https://mdformat.readthedocs.io/en/stable/users/configuration_file.html
wrap = 88          # possible values: {"keep", "no", INTEGER}
number = false     # possible values: {false, true}
end_of_line = "lf" # possible values: {"lf", "crlf", "keep"}

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__init__.py", "*/migrations/*", "*/venv/*", "*/.venv/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2
# TODO: need to increase the failing threshold considerably, get above 80%
fail_under = 23

[tool.coverage.html]
directory = "htmlcov"
title = "DataSure Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"
