"""
üé¨ Django —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è django-hlsfield

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–∏–¥–µ–æ:
- –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π
- –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

–ê–≤—Ç–æ—Ä: akula993
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import logging
import os
import time
from pathlib import Path
from typing import List, Optional

from django.conf import settings
from django.core.cache import cache
from django.db.models.signals import post_migrate, post_save, post_delete, pre_save, pre_delete
from django.dispatch import receiver
from django.utils import timezone

from .apps import HLSFieldConfig
from .helpers import get_model_video_fields

logger = logging.getLogger(__name__)


# ==============================================================================
# –°–ò–ì–ù–ê–õ–´ –ú–ò–ì–†–ê–¶–ò–ô –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
# ==============================================================================


@receiver(post_migrate, sender=HLSFieldConfig)
def create_media_directories(sender, **kwargs):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ media –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π.

    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤,
    –ø—Ä–µ–≤—å—é, HLS –∏ DASH –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """
    if not hasattr(settings, "MEDIA_ROOT") or not settings.MEDIA_ROOT:
        logger.debug("MEDIA_ROOT not configured, skipping directory creation")
        return

    media_root = Path(settings.MEDIA_ROOT)

    # –ë–∞–∑–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ
    directories = [
        media_root / "videos",
        media_root / "videos" / "hls",
        media_root / "videos" / "dash",
        media_root / "videos" / "adaptive",
        media_root / "videos" / "previews",
        media_root / "videos" / "temp",  # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    ]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    extra_dirs = getattr(settings, "HLSFIELD_EXTRA_DIRECTORIES", [])
    for extra_dir in extra_dirs:
        directories.append(media_root / extra_dir)

    created = []
    failed = []

    for directory in directories:
        try:
            if not directory.exists():
                directory.mkdir(parents=True, exist_ok=True)
                created.append(str(directory))

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                try:
                    os.chmod(directory, 0o755)
                except OSError:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞

        except Exception as e:
            failed.append(f"{directory}: {e}")
            logger.warning(f"Could not create directory {directory}: {e}")

    if created:
        logger.info(f"Created media directories: {', '.join(created)}")

    if failed:
        logger.warning(f"Failed to create directories: {', '.join(failed)}")


@receiver(post_migrate)
def cleanup_old_migrations_cache(sender, **kwargs):
    """–û—á–∏—â–∞–µ—Ç –∫–µ—à –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""

    # –û—á–∏—â–∞–µ–º –∫–µ—à –Ω–∞—Å—Ç—Ä–æ–µ–∫
    cache_keys = [
        "hlsfield_settings_validated",
        "ffmpeg_availability_checked",
        "video_analytics_*",
    ]

    for pattern in cache_keys:
        if "*" in pattern:
            # –û—á–∏—â–∞–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            try:
                cache.delete_many(cache.keys(pattern.replace("*", "*")))
            except (AttributeError, NotImplementedError):
                pass
        else:
            cache.delete(pattern)

    logger.debug("Cleared hlsfield caches after migration")


# ==============================================================================
# –°–ò–ì–ù–ê–õ–´ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –í–ò–î–ï–û –û–ë–™–ï–ö–¢–û–í
# ==============================================================================


@receiver(pre_save)
def video_field_pre_save_handler(sender, instance, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ —Å video –ø–æ–ª—è–º–∏.

    - –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å storage
    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    """

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ video –ø–æ–ª—è –º–æ–¥–µ–ª–∏
    video_fields = get_model_video_fields(sender)

    if not video_fields:
        return  # –í –º–æ–¥–µ–ª–∏ –Ω–µ—Ç video –ø–æ–ª–µ–π

    for field_name in video_fields:
        field_file = getattr(instance, field_name)

        if not field_file or not field_file.name:
            continue

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if hasattr(instance, "processing_status") and not getattr(
            instance, "processing_status", None
        ):
            setattr(instance, "processing_status", "pending")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        if hasattr(instance, "video_uploaded_at") and not getattr(
            instance, "video_uploaded_at", None
        ):
            setattr(instance, "video_uploaded_at", timezone.now())

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if hasattr(instance, "video_id") and not getattr(instance, "video_id", None):
            from .helpers import generate_video_id

            setattr(instance, "video_id", generate_video_id())


@receiver(post_save)
def video_field_post_save_handler(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å video –ø–æ–ª—è–º–∏.

    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    - –°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """

    video_fields = get_model_video_fields(sender)

    if not video_fields:
        return

    for field_name in video_fields:
        field_file = getattr(instance, field_name)

        if not field_file or not field_file.name:
            continue

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–µ–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        if created:
            _increment_video_counter(sender.__name__)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if _is_analytics_enabled():
            _create_video_analytics_record(
                instance, field_name, "uploaded" if created else "updated"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        if created and _should_send_notifications():
            _send_video_upload_notification(instance, field_name)


@receiver(pre_delete)
def video_field_pre_delete_handler(sender, instance, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ —Å video –ø–æ–ª—è–º–∏.

    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    - –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """

    video_fields = get_model_video_fields(sender)

    if not video_fields:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    video_info = {}

    for field_name in video_fields:
        field_file = getattr(instance, field_name)

        if field_file and field_file.name:
            video_info[field_name] = {
                "name": field_file.name,
                "size": _get_file_size_safe(field_file),
                "url": _get_file_url_safe(field_file),
            }

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (HLS, DASH, –ø—Ä–µ–≤—å—é)
            video_info[field_name]["related_files"] = _get_related_files(instance, field_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∞—Ç—Ä–∏–±—É—Ç–µ –¥–ª—è post_delete
    setattr(instance, "_hlsfield_deletion_info", video_info)


@receiver(post_delete)
def video_field_post_delete_handler(sender, instance, **kwargs):
    """
    –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å video –ø–æ–ª—è–º–∏.

    - –£–¥–∞–ª—è–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –∏–∑ storage
    - –û—á–∏—â–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ HLS/DASH —Ñ–∞–π–ª—ã
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    deletion_info = getattr(instance, "_hlsfield_deletion_info", {})

    if not deletion_info:
        return

    deleted_files = []
    failed_deletions = []

    for field_name, file_info in deletion_info.items():
        try:
            # –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            main_file = file_info["name"]
            if main_file and _delete_file_safe(main_file):
                deleted_files.append(main_file)

            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            related_files = file_info.get("related_files", [])
            for related_file in related_files:
                if _delete_file_safe(related_file):
                    deleted_files.append(related_file)
                else:
                    failed_deletions.append(related_file)

        except Exception as e:
            logger.error(
                f"Error deleting files for {sender.__name__}:{instance.pk}.{field_name}: {e}"
            )
            failed_deletions.append(f"{field_name}: {e}")

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if deleted_files:
        logger.info(f"Deleted {len(deleted_files)} video files for {sender.__name__}:{instance.pk}")

    if failed_deletions:
        logger.warning(f"Failed to delete {len(failed_deletions)} files: {failed_deletions}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    _decrement_video_counter(sender.__name__)

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    if _is_analytics_enabled():
        _create_video_analytics_record(instance, None, "deleted", extra_data=deletion_info)


# ==============================================================================
# –°–ò–ì–ù–ê–õ–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ô
# ==============================================================================


@receiver(post_save)
def video_processing_status_changed(sender, instance, created, **kwargs):
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É.
    """

    if not hasattr(instance, "processing_status"):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≥–æ—Ç–æ–≤–æ"
    if not created:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î
            old_instance = sender.objects.get(pk=instance.pk)
            old_status = getattr(old_instance, "processing_status", None)
            new_status = getattr(instance, "processing_status", None)

            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
            if old_status != new_status and new_status in [
                "ready",
                "hls_ready",
                "dash_ready",
                "adaptive_ready",
            ]:
                _handle_video_ready_notification(instance, new_status)

        except sender.DoesNotExist:
            pass  # –û–±—ä–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ
        except Exception as e:
            logger.warning(f"Error checking processing status change: {e}")


@receiver(post_save)
def update_video_statistics(sender, instance, created, **kwargs):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–¥–µ–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

    –í–µ–¥–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫, –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤.
    """

    video_fields = get_model_video_fields(sender)

    if not video_fields:
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        _update_app_statistics(sender, instance, created)
    except Exception as e:
        logger.debug(f"Failed to update statistics: {e}")


# ==============================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´
# ==============================================================================


@receiver(post_save)
def integrate_with_search_engines(sender, instance, created, **kwargs):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Elasticsearch, Solr –∏ —Ç.–¥.
    """

    if not _is_search_integration_enabled():
        return

    video_fields = get_model_video_fields(sender)

    if not video_fields:
        return

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        search_data = _prepare_search_data(instance, video_fields)

        if search_data:
            _send_to_search_engine(search_data, action="index" if created else "update")

    except Exception as e:
        logger.warning(f"Search engine integration failed: {e}")


@receiver(post_delete)
def remove_from_search_engines(sender, instance, **kwargs):
    """–£–¥–∞–ª—è–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""

    if not _is_search_integration_enabled():
        return

    video_fields = get_model_video_fields(sender)

    if video_fields:
        try:
            _send_to_search_engine({"id": instance.pk}, action="delete")
        except Exception as e:
            logger.warning(f"Search engine removal failed: {e}")


@receiver(post_save)
def trigger_cdn_purge(sender, instance, created, **kwargs):
    """
    –û—á–∏—â–∞–µ—Ç CDN –∫–µ—à –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.

    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å CloudFlare, CloudFront, KeyCDN –∏ –¥—Ä—É–≥–∏–º–∏.
    """

    if not _is_cdn_integration_enabled():
        return

    video_fields = get_model_video_fields(sender)

    if not video_fields:
        return

    urls_to_purge = []

    for field_name in video_fields:
        field_file = getattr(instance, field_name)

        if field_file and field_file.name:
            # –°–æ–±–∏—Ä–∞–µ–º URL –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            urls_to_purge.extend(_get_cdn_urls_for_purge(instance, field_name))

    if urls_to_purge:
        try:
            _purge_cdn_cache(urls_to_purge)
            logger.info(f"Purged {len(urls_to_purge)} URLs from CDN cache")
        except Exception as e:
            logger.warning(f"CDN cache purge failed: {e}")


# ==============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================================================================


def _increment_video_counter(model_name: str):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–µ–æ –¥–ª—è –º–æ–¥–µ–ª–∏"""
    cache_key = f"hlsfield_video_count_{model_name}"

    try:
        current = cache.get(cache_key, 0)
        cache.set(cache_key, current + 1, 86400)  # 24 —á–∞—Å–∞
    except Exception:
        pass


def _decrement_video_counter(model_name: str):
    """–£–º–µ–Ω—å—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–µ–æ –¥–ª—è –º–æ–¥–µ–ª–∏"""
    cache_key = f"hlsfield_video_count_{model_name}"

    try:
        current = cache.get(cache_key, 0)
        cache.set(cache_key, max(0, current - 1), 86400)
    except Exception:
        pass


def _get_file_size_safe(field_file) -> Optional[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
    try:
        return field_file.size
    except Exception:
        return None


def _get_file_url_safe(field_file) -> Optional[str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç URL —Ñ–∞–π–ª–∞"""
    try:
        return field_file.url
    except Exception:
        return None


def _get_related_files(instance, field_name: str) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (HLS, DASH, –ø—Ä–µ–≤—å—é)"""
    related_files = []

    field = instance._meta.get_field(field_name)

    # HLS –ø–ª–µ–π–ª–∏—Å—Ç
    hls_field = getattr(field, "hls_playlist_field", None)
    if hls_field:
        hls_path = getattr(instance, hls_field, None)
        if hls_path:
            related_files.append(hls_path)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ HLS —Å–µ–≥–º–µ–Ω—Ç—ã
            related_files.extend(_get_hls_segments(hls_path))

    # DASH –º–∞–Ω–∏—Ñ–µ—Å—Ç
    dash_field = getattr(field, "dash_manifest_field", None)
    if dash_field:
        dash_path = getattr(instance, dash_field, None)
        if dash_path:
            related_files.append(dash_path)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ DASH —Å–µ–≥–º–µ–Ω—Ç—ã
            related_files.extend(_get_dash_segments(dash_path))

    # –ü—Ä–µ–≤—å—é
    preview_field = getattr(field, "preview_field", None)
    if preview_field:
        preview_path = getattr(instance, preview_field, None)
        if preview_path:
            related_files.append(preview_path)

    return related_files


def _get_hls_segments(playlist_path: str) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ HLS —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ –ø—É—Ç–∏ –∫ –ø–ª–µ–π–ª–∏—Å—Ç—É"""
    segments = []

    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: path/to/hls/master.m3u8
        base_dir = str(Path(playlist_path).parent)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
        for quality in ["v240", "v360", "v480", "v720", "v1080"]:
            segments.append(f"{base_dir}/{quality}/index.m3u8")

            # –°–µ–≥–º–µ–Ω—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ 5-20 —Ñ–∞–π–ª–æ–≤)
            for i in range(20):
                segments.append(f"{base_dir}/{quality}/seg_{i:04d}.ts")

    except Exception:
        pass

    return segments


def _get_dash_segments(manifest_path: str) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ DASH —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ –ø—É—Ç–∏ –∫ –º–∞–Ω–∏—Ñ–µ—Å—Ç—É"""
    segments = []

    try:
        base_dir = str(Path(manifest_path).parent)

        # DASH init –∏ media —Å–µ–≥–º–µ–Ω—Ç—ã
        for i in range(5):  # –ü—Ä–∏–º–µ—Ä–Ω–æ 5 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
            segments.append(f"{base_dir}/init-{i}.m4s")

            # Media —Å–µ–≥–º–µ–Ω—Ç—ã
            for j in range(20):
                segments.append(f"{base_dir}/chunk-{i}-{j:05d}.m4s")

    except Exception:
        pass

    return segments


def _delete_file_safe(file_path: str) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ storage"""
    try:
        from django.core.files.storage import default_storage

        if default_storage.exists(file_path):
            default_storage.delete(file_path)
            return True
    except Exception as e:
        logger.debug(f"Could not delete file {file_path}: {e}")

    return False


def _is_analytics_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    return getattr(settings, "HLSFIELD_ENABLE_ANALYTICS", False)


def _should_send_notifications() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    return getattr(settings, "HLSFIELD_SEND_NOTIFICATIONS", False)


def _is_search_integration_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–º"""
    return getattr(settings, "HLSFIELD_SEARCH_INTEGRATION", False)


def _is_cdn_integration_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CDN"""
    return getattr(settings, "HLSFIELD_CDN_INTEGRATION", False)


def _create_video_analytics_record(
    instance, field_name: Optional[str], action: str, extra_data: dict = None
):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"""
    try:
        from .views import VideoEvent

        VideoEvent.objects.create(
            video_id=str(instance.pk),
            session_id="system",
            event_type=action,
            timestamp=timezone.now(),
            additional_data=extra_data or {},
        )
    except Exception as e:
        logger.debug(f"Could not create analytics record: {e}")


def _send_video_upload_notification(instance, field_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ"""
    try:
        # –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Django channels –∏–ª–∏ email
        notification_data = {
            "type": "video_uploaded",
            "instance_id": instance.pk,
            "model": instance._meta.label,
            "field_name": field_name,
            "timestamp": timezone.now().isoformat(),
        }

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Slack, Discord, email –∏ —Ç.–¥.
        logger.info(f"Video uploaded notification: {notification_data}")

    except Exception as e:
        logger.warning(f"Failed to send upload notification: {e}")


def _handle_video_ready_notification(instance, status: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if hasattr(instance, "user") and instance.user:
            _send_video_ready_email(instance.user, instance, status)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫—É
        _send_admin_notification(f"Video {instance.pk} is {status}")

    except Exception as e:
        logger.warning(f"Failed to send ready notification: {e}")


def _send_video_ready_email(user, instance, status: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    try:
        from django.core.mail import send_mail
        from django.template.loader import render_to_string

        subject = f"Your video is ready!"
        message = render_to_string(
            "hlsfield/emails/video_ready.html",
            {
                "user": user,
                "instance": instance,
                "status": status,
            },
        )

        send_mail(
            subject=subject,
            message=message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[user.email],
            fail_silently=True,
        )

    except Exception as e:
        logger.debug(f"Could not send video ready email: {e}")


def _send_admin_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        from django.core.mail import mail_admins

        mail_admins(
            subject="HLSField Notification",
            message=message,
            fail_silently=True,
        )
    except Exception:
        pass


def _update_app_statistics(sender, instance, created: bool):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    stats_key = "hlsfield_app_stats"

    try:
        stats = cache.get(
            stats_key,
            {
                "total_videos": 0,
                "total_processed": 0,
                "last_update": time.time(),
            },
        )

        if created:
            stats["total_videos"] += 1

        if hasattr(instance, "processing_status"):
            status = getattr(instance, "processing_status")
            if status in ["ready", "hls_ready", "dash_ready", "adaptive_ready"]:
                stats["total_processed"] += 1

        stats["last_update"] = time.time()
        cache.set(stats_key, stats, 86400)  # 24 —á–∞—Å–∞

    except Exception:
        pass


def _prepare_search_data(instance, video_fields: List[str]) -> dict:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"""
    search_data = {
        "id": instance.pk,
        "model": instance._meta.label,
        "timestamp": timezone.now().isoformat(),
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for field in ["title", "description", "tags"]:
        if hasattr(instance, field):
            search_data[field] = getattr(instance, field)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    for field_name in video_fields:
        try:
            from .helpers import get_video_field_metadata

            metadata = get_video_field_metadata(instance, field_name)
            search_data[f"{field_name}_metadata"] = metadata
        except Exception:
            pass

    return search_data


def _send_to_search_engine(data: dict, action: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Elasticsearch –∏ —Ç.–¥.
    logger.debug(f"Search engine {action}: {data}")


def _get_cdn_urls_for_purge(instance, field_name: str) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ CDN –∫–µ—à–∞"""
    urls = []

    try:
        from .helpers import get_video_field_metadata

        metadata = get_video_field_metadata(instance, field_name)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ URL
        for url_key in ["url", "hls_url", "dash_url", "preview_url"]:
            if url_key in metadata:
                urls.append(metadata[url_key])

    except Exception:
        pass

    return urls


def _purge_cdn_cache(urls: List[str]):
    """–û—á–∏—â–∞–µ—Ç –∫–µ—à CDN –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö URL"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CloudFlare, CloudFront –∏ —Ç.–¥.
    logger.debug(f"CDN purge: {urls}")


# ==============================================================================
# –£–°–õ–û–í–ù–´–ï –°–ò–ì–ù–ê–õ–´ (–∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
# ==============================================================================

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if getattr(settings, "HLSFIELD_ENABLE_WEBHOOKS", False):

    @receiver(post_save)
    def send_webhooks(sender, instance, created, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        video_fields = get_model_video_fields(sender)

        if video_fields:
            webhook_url = getattr(settings, "HLSFIELD_WEBHOOK_URL", None)
            if webhook_url:
                try:
                    import requests

                    payload = {
                        "action": "created" if created else "updated",
                        "model": sender.__name__,
                        "instance_id": instance.pk,
                        "timestamp": timezone.now().isoformat(),
                    }

                    requests.post(webhook_url, json=payload, timeout=5)

                except Exception as e:
                    logger.warning(f"Webhook failed: {e}")


# ==============================================================================
# –°–ò–ì–ù–ê–õ –î–õ–Ø –û–ß–ò–°–¢–ö–ò –ö–ï–®–ê
# ==============================================================================


@receiver([post_save, post_delete])
def invalidate_related_caches(sender, instance, **kwargs):
    """–û—á–∏—â–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–µ—à–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–∏–¥–µ–æ"""

    video_fields = get_model_video_fields(sender)

    if not video_fields:
        return

    # –û—á–∏—â–∞–µ–º –∫–µ—à–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –æ–±—ä–µ–∫—Ç–æ–º
    cache_patterns = [
        f"video_metadata_{instance.pk}",
        f"video_stats_{instance.pk}",
        f"video_analytics_{instance.pk}",
        f"hlsfield_video_count_{sender.__name__}",
    ]

    for pattern in cache_patterns:
        try:
            cache.delete(pattern)
        except Exception:
            pass


# ==============================================================================
# –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================================================================

"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ settings.py:

HLSFIELD_ENABLE_ANALYTICS = True          # –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
HLSFIELD_SEND_NOTIFICATIONS = True        # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
HLSFIELD_SEARCH_INTEGRATION = True        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–º
HLSFIELD_CDN_INTEGRATION = True           # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CDN
HLSFIELD_ENABLE_WEBHOOKS = True           # Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
HLSFIELD_WEBHOOK_URL = "https://..."      # URL –¥–ª—è webhook

HLSFIELD_EXTRA_DIRECTORIES = [            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    'videos/backup',
    'videos/temp',
]

# Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
DEFAULT_FROM_EMAIL = 'noreply@example.com'
ADMINS = [('Admin', 'admin@example.com')]
"""
