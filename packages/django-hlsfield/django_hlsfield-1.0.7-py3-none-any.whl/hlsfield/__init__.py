"""
üé¨ django-hlsfield - Django –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤–∏–¥–µ–æ —Å HLS/DASH —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è Django –ø—Ä–æ–µ–∫—Ç–æ–≤.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HLS, DASH, –ø—Ä–µ–≤—å—é, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ Celery –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- VideoField - –±–∞–∑–æ–≤–æ–µ –ø–æ–ª–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
- HLSVideoField - HTTP Live Streaming
- DASHVideoField - MPEG-DASH –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º
- AdaptiveVideoField - HLS + DASH –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –ì–æ—Ç–æ–≤—ã–µ HTML5 –ø–ª–µ–µ—Ä—ã
- Celery —Ñ–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö storage backends

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    from hlsfield import HLSVideoField

    class Movie(models.Model):
        title = models.CharField(max_length=200)
        video = HLSVideoField(
            upload_to="movies/",
            hls_playlist_field="hls_master"
        )
        hls_master = models.CharField(max_length=500, null=True, blank=True)

–ê–≤—Ç–æ—Ä: akula993
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
GitHub: https://github.com/akula993/django-hlsfield
"""

# –í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞ (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
__version__ = "1.0.7"

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
__title__ = "django-hlsfield"
__description__ = "Django VideoField + HLS/DASH adaptive streaming with automatic transcoding"
__url__ = "https://github.com/akula993/django-hlsfield"
__author__ = "akula993"
__author_email__ = "akula993@gmail.com"
__license__ = "MIT"
__copyright__ = "Copyright 2025 akula993"

# –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
__status__ = "Production/Stable"

from django.core.exceptions import ImproperlyConfigured

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
from .exceptions import (
    HLSFieldError,
    FFmpegError,
    FFmpegNotFoundError,
    InvalidVideoError,
    TranscodingError,
    StorageError,
    ConfigurationError,
)
# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–≥–ª–∞–≤–Ω—ã–π API)
from .fields import (
    VideoField,
    VideoFieldFile,
    HLSVideoField,
    HLSVideoFieldFile,
    DASHVideoField,
    DASHVideoFieldFile,
    AdaptiveVideoField,
    AdaptiveVideoFieldFile,
)
# –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É—Ç–∏–ª–∏—Ç—ã
from .fields import (
    validate_ladder,
    get_optimal_ladder_for_resolution,
)
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from .helpers import (
    video_upload_to,
    get_video_upload_path,
    generate_video_id,
)

# ==============================================================================
# –û–°–ù–û–í–ù–´–ï –ò–ú–ü–û–†–¢–´
# ==============================================================================

# ==============================================================================
# –≠–ö–°–ü–û–†–¢–´ –ü–ê–ö–ï–¢–ê
# ==============================================================================

# –û—Å–Ω–æ–≤–Ω–æ–π API - –ø–æ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ models.py
__all__ = [
    # === –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø ===
    "VideoField",  # –ë–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ –ø–æ–ª–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    "HLSVideoField",  # HTTP Live Streaming
    "DASHVideoField",  # MPEG-DASH –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º
    "AdaptiveVideoField",  # HLS + DASH –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    # === FILE OBJECTS ===
    "VideoFieldFile",  # –§–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è VideoField
    "HLSVideoFieldFile",  # –§–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è HLSVideoField
    "DASHVideoFieldFile",  # –§–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è DASHVideoField
    "AdaptiveVideoFieldFile",  # –§–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è AdaptiveVideoField
    # === –£–¢–ò–õ–ò–¢–´ ===
    "validate_ladder",  # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–µ—Å—Ç–Ω–∏—Ü—ã –∫–∞—á–µ—Å—Ç–≤
    "get_optimal_ladder_for_resolution",  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã
    "video_upload_to",  # –§—É–Ω–∫—Ü–∏—è upload_to
    "get_video_upload_path",  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –¥–ª—è –≤–∏–¥–µ–æ
    "generate_video_id",  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    # === –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    "HLSFieldError",  # –ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
    "FFmpegError",  # –û—à–∏–±–∫–∏ FFmpeg
    "FFmpegNotFoundError",  # FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω
    "InvalidVideoError",  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª
    "TranscodingError",  # –û—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥–∞
    "StorageError",  # –û—à–∏–±–∫–∏ storage
    "ConfigurationError",  # –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    # === –ú–ï–¢–ê–î–ê–ù–ù–´–ï ===
    "__version__",  # –í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞
]


# ==============================================================================
# –£–°–õ–û–í–ù–´–ï –ò–ú–ü–û–†–¢–´ (–¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)
# ==============================================================================


def _get_streaming_views():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç streaming views"""
    try:
        from .streaming import SecureStreamingView, ProtectedHLSView

        return {
            "SecureStreamingView": SecureStreamingView,
            "ProtectedHLSView": ProtectedHLSView,
        }
    except ImportError:
        return {}

def _get_analytics():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        from .views import VideoAnalyticsView
        return {
            "VideoAnalyticsView": VideoAnalyticsView,
        }
    except ImportError:
        return {}


# ==============================================================================
# –ú–ê–ì–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ò–ú–ü–û–†–¢–û–í
# ==============================================================================


def __getattr__(name: str):
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:
    - from hlsfield import SecureStreamingView
    - from hlsfield import VideoAnalyticsView
    """

    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–æ–ª—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è)
    if name in ["SmartAdaptiveVideoField", "ProgressiveVideoField"]:
        try:
            from . import smart_fields

            if hasattr(smart_fields, name):
                return getattr(smart_fields, name)
        except ImportError:
            pass

    # Streaming views
    if name in ["SecureStreamingView", "ProtectedHLSView"]:
        try:
            from . import streaming

            if hasattr(streaming, name):
                return getattr(streaming, name)
        except ImportError:
            pass

    # Views
    if name in ["VideoAnalyticsView", "VideoStatusView"]:
        try:
            from . import views

            if hasattr(views, name):
                return getattr(views, name)
        except ImportError:
            pass

    # –ó–∞–¥–∞—á–∏ Celery
    if name.endswith("_task") or name.startswith("build_"):
        try:
            from . import tasks

            if hasattr(tasks, name):
                return getattr(tasks, name)
        except ImportError:
            pass

    raise AttributeError(f"module '{__name__}' has no attribute '{name}'")


def __dir__():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞"""

    base_attrs = __all__.copy()

    # –î–æ–±–∞–≤–ª—è–µ–º streaming views –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    base_attrs.extend(_get_streaming_views().keys())

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    base_attrs.extend(_get_analytics().keys())

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    base_attrs.extend(
        [
            "DEFAULT_LADDER",
            "SEGMENT_DURATION",
            "FFMPEG",
            "FFPROBE",
            "MOBILE_LADDER",
            "PREMIUM_LADDER",
        ]
    )

    return sorted(base_attrs)


# ==============================================================================
# –ü–†–û–í–ï–†–ö–ò –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# ==============================================================================


def check_django_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–µ—Ä—Å–∏–µ–π Django"""
    try:
        import django
        from packaging import version

        django_version_str = "{}.{}".format(*django.VERSION[:2])
        django_version = version.parse(django_version_str)
        min_version = version.parse("4.2")

        if django_version < min_version:
            import warnings

            warnings.warn(
                f"django-hlsfield requires Django 4.2+, you have {django.get_version()}",
                UserWarning,
                stacklevel=2,
            )
    except ImportError:
        pass


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–µ—Ä—Å–∏–µ–π Python"""
    import sys

    if sys.version_info < (3, 10):
        import warnings

        warnings.warn(
            f"django-hlsfield requires Python 3.10+, you have {sys.version}",
            UserWarning,
            stacklevel=2,
        )


# –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (—Ç–æ–ª—å–∫–æ –≤ development)
try:
    from django.conf import settings

    if getattr(settings, "DEBUG", False):
        check_django_version()
        check_python_version()
except (ImportError, ImproperlyConfigured):
    # Django –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    pass

# ==============================================================================
# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–ö–ï–¢–ï –î–õ–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
# ==============================================================================

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è setuptools/pip
package_info = {
    "name": __title__,
    "version": __version__,
    "description": __description__,
    "url": __url__,
    "author": __author__,
    "author_email": __author_email__,
    "license": __license__,
    "status": __status__,
}

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è PyPI
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Multimedia :: Video",
    "Topic :: Multimedia :: Video :: Conversion",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Web Environment",
    "Natural Language :: English",
    "Natural Language :: Russian",
]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
keywords = [
    "django",
    "video",
    "hls",
    "dash",
    "streaming",
    "adaptive",
    "ffmpeg",
    "transcoding",
    "celery",
    "html5",
    "player",
    "multimedia",
    "webdev",
]

# ==============================================================================
# DJANGO APPS REGISTRY
# ==============================================================================

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Django app
default_app_config = "hlsfield.apps.HLSFieldConfig"

# ==============================================================================
# –ó–ê–í–ï–†–®–ê–Æ–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï
# ==============================================================================

# –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –≤ DEBUG)
try:
    from django.conf import settings
    from django.core.exceptions import ImproperlyConfigured

    if getattr(settings, "DEBUG", False):
        import sys

        if "runserver" in sys.argv or "shell" in sys.argv:
            print(f"üé¨ {__title__} v{__version__} loaded")
except (ImportError, ImproperlyConfigured, AttributeError):
    pass
