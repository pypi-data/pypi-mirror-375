---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_alike_locals/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
"""Test fixture for local variables that have the same name as stdlib modules."""
Any = _cribo.typing.Any
def process_data():
    """Function that uses local variables named like stdlib modules."""
    data = {"test": "value"}
    json_str = _cribo.json.dumps(data)
    print(f"JSON string: {json_str}")
    code = 42
    print(f"Local code variable: {code}")
    code_str = str(code)
    print(f"Code as string: {code_str}")
    items = ["a", "b", "c"]
    for code in items:
        print(f"Loop code: {code}")
        upper = code.upper()
        print(f"  Uppercase: {upper}")
    for socket in range(3):
        print(f"Socket number: {socket}")
    counter = _cribo.collections.Counter(items)
    print(f"Counter: {counter}")
    pickle = "I'm not the pickle module!"
    print(f"Local pickle: {pickle}")

    class StatusCode:

        def __init__(self, value: int, name: str):
            self.value = value
            self._name_ = name
    codes = [StatusCode(200, "OK"), StatusCode(404, "NOT_FOUND"), StatusCode(500, "SERVER_ERROR")]
    for code in codes:
        print(f"Status {code.value}: {code._name_}")
        lower_name = code._name_.lower()
        print(f"  Lowercase: {lower_name}")
    data_list = [1, 1, 2, 2, 3]
    counter = _cribo.collections.Counter(data_list)
    print(f"Counter result: {counter}")
    print("All tests completed!")
def test_shadowing():
    """Test what happens when we shadow an imported module."""
    cwd = _cribo.os.getcwd()
    print(f"os.getcwd() works: {bool(cwd)}")
    _cribo.os = "I'm not the os module!"
    print(f"Shadowed os: {_cribo.os}")
    print(f"Os uppercase: {_cribo.os.upper()}")
if __name__ == "__main__":
    process_data()
    print("\n--- Testing shadowing ---")
    test_shadowing()
