"""
üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è django-hlsfield

–ò–µ—Ä–∞—Ä—Ö–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ handling —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
–ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π, —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥–æ–º –∏ storage –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.

–í—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å–ª–µ–¥—É—é—Ç –æ—Ç HLSFieldError –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ catch-all handling.

–ê–≤—Ç–æ—Ä: django-hlsfield team
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

from typing import List, Optional, Any, Dict


# ==============================================================================
# –ë–ê–ó–û–í–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï
# ==============================================================================


class HLSFieldError(Exception):
    """
    –ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ django-hlsfield.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ catch-all –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –ø–∞–∫–µ—Ç–∞.
    –°–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è debugging –∏ monitoring.
    """

    def __init__(
        self,
        message: str,
        details: Optional[Dict[str, Any]] = None,
        suggestions: Optional[List[str]] = None,
    ):
        """
        Args:
            message: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            suggestions: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º—ã
        """
        super().__init__(message)
        self.message = message
        self.details = details or {}
        self.suggestions = suggestions or []

    def __str__(self) -> str:
        result = self.message

        if self.details:
            result += f" (Details: {self.details})"

        if self.suggestions:
            suggestions_str = "; ".join(self.suggestions)
            result += f" (Suggestions: {suggestions_str})"

        return result

    def to_dict(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        return {
            "error_type": self.__class__.__name__,
            "message": self.message,
            "details": self.details,
            "suggestions": self.suggestions,
        }


# ==============================================================================
# –û–®–ò–ë–ö–ò FFMPEG
# ==============================================================================


class FFmpegNotFoundError(HLSFieldError):
    """
    FFmpeg –∏–ª–∏ FFprobe –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.

    –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –±–µ–∑ FFmpeg –ø–∞–∫–µ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.
    """

    def __init__(self, binary_name: str = "ffmpeg"):
        self.binary_name = binary_name

        message = f"{binary_name} not found in system PATH"

        suggestions = [
            "Install FFmpeg: https://ffmpeg.org/download.html",
            f"Set HLSFIELD_FFMPEG and HLSFIELD_FFPROBE in Django settings",
            "Verify FFmpeg installation with: ffmpeg -version",
            "Check system PATH includes FFmpeg directory",
        ]

        details = {"binary_name": binary_name, "error_category": "system_configuration"}

        super().__init__(message, details, suggestions)


class FFmpegError(HLSFieldError):
    """
    –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã FFmpeg.

    –°–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ, –∫–æ–¥–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ output.
    """

    def __init__(self, command: List[str], returncode: int, stdout: str = "", stderr: str = ""):

        self.command = command
        self.returncode = returncode
        self.stdout = stdout
        self.stderr = stderr

        command_str = " ".join(command)
        message = f"FFmpeg command failed with code {returncode}: {command_str}"

        details = {
            "command": command,
            "returncode": returncode,
            "stdout": stdout[:500],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è readability
            "stderr": stderr[:500],
            "error_category": "ffmpeg_execution",
        }

        suggestions = self._generate_suggestions()

        super().__init__(message, details, suggestions)

    def _generate_suggestions(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç suggestions –Ω–∞ –æ—Å–Ω–æ–≤–µ stderr"""
        suggestions = []

        stderr_lower = self.stderr.lower()

        if "no such file" in stderr_lower:
            suggestions.extend(
                [
                    "Check input file path exists and is readable",
                    "Verify file permissions",
                    "Use absolute file path",
                ]
            )

        elif "invalid data found" in stderr_lower:
            suggestions.extend(
                [
                    "Input file may be corrupted",
                    "Try with a different video file",
                    "Check file was fully uploaded",
                ]
            )

        elif "permission denied" in stderr_lower:
            suggestions.extend(
                [
                    "Check file and directory permissions",
                    "Run with appropriate user privileges",
                    "Verify storage write permissions",
                ]
            )

        elif "no space left" in stderr_lower:
            suggestions.extend(
                [
                    "Free up disk space",
                    "Check temporary directory has sufficient space",
                    "Consider using different storage location",
                ]
            )

        elif "unknown encoder" in stderr_lower:
            suggestions.extend(
                [
                    "Check FFmpeg was compiled with required encoders",
                    "Install FFmpeg with libx264 support",
                    "Update FFmpeg to newer version",
                ]
            )

        if not suggestions:
            suggestions.append("Check FFmpeg documentation for this error")

        return suggestions


class FFmpegTimeoutError(FFmpegError):
    """FFmpeg –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç"""

    def __init__(self, command: List[str], timeout_seconds: int):
        self.timeout_seconds = timeout_seconds

        message = f"FFmpeg command timed out after {timeout_seconds} seconds"

        super().__init__(command, -1, "", f"Timeout after {timeout_seconds}s")

        self.suggestions = [
            f"Increase timeout (current: {timeout_seconds}s)",
            "Check if input video is very long or high resolution",
            "Consider using faster FFmpeg preset",
            "Monitor system resources during transcoding",
        ]


# ==============================================================================
# –û–®–ò–ë–ö–ò –í–ò–î–ï–û–§–ê–ô–õ–û–í
# ==============================================================================


class InvalidVideoError(HLSFieldError):
    """
    –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª.
    """

    def __init__(
        self,
        message: str,
        file_path: Optional[str] = None,
        file_info: Optional[Dict[str, Any]] = None,
    ):

        self.file_path = file_path
        self.file_info = file_info or {}

        details = {
            "file_path": file_path,
            "file_info": file_info,
            "error_category": "video_validation",
        }

        suggestions = [
            "Try with a different video file",
            "Check file was fully uploaded and not truncated",
            "Verify file format is supported (MP4, AVI, MOV, etc.)",
            "Use FFmpeg to validate file: ffprobe your_file.mp4",
        ]

        super().__init__(message, details, suggestions)


class UnsupportedFormatError(InvalidVideoError):
    """–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"""

    def __init__(self, format_name: str, file_path: Optional[str] = None):
        self.format_name = format_name

        message = f"Unsupported video format: {format_name}"

        file_info = {"detected_format": format_name}

        super().__init__(message, file_path, file_info)

        self.suggestions = [
            "Convert video to supported format (MP4, MOV, AVI)",
            "Use FFmpeg to convert: ffmpeg -i input.{format_name} output.mp4",
            "Check HLSFIELD_ALLOWED_EXTENSIONS setting",
            f"Current format '{format_name}' not in allowed list",
        ]


class VideoTooLargeError(InvalidVideoError):
    """–í–∏–¥–µ–æ—Ñ–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä"""

    def __init__(self, file_size: int, max_size: int, file_path: Optional[str] = None):
        self.file_size = file_size
        self.max_size = max_size

        size_mb = file_size / (1024 * 1024)
        max_mb = max_size / (1024 * 1024)

        message = f"Video file too large: {size_mb:.1f}MB (max: {max_mb:.1f}MB)"

        file_info = {
            "size_bytes": file_size,
            "size_mb": size_mb,
            "max_size_bytes": max_size,
            "max_size_mb": max_mb,
        }

        super().__init__(message, file_path, file_info)

        self.suggestions = [
            f"Compress video to under {max_mb:.0f}MB",
            "Reduce video bitrate or resolution",
            "Split video into smaller segments",
            "Increase HLSFIELD_MAX_FILE_SIZE setting if needed",
        ]


class VideoTooShortError(InvalidVideoError):
    """–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""

    def __init__(self, duration: float, min_duration: float = 1.0):
        self.duration = duration
        self.min_duration = min_duration

        message = f"Video too short: {duration:.1f}s (minimum: {min_duration:.1f}s)"

        file_info = {"duration_seconds": duration, "min_duration_seconds": min_duration}

        super().__init__(message, None, file_info)


# ==============================================================================
# –û–®–ò–ë–ö–ò –¢–†–ê–ù–°–ö–û–î–ò–ù–ì–ê
# ==============================================================================


class TranscodingError(HLSFieldError):
    """
    –û–±—â–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥–∞ –≤–∏–¥–µ–æ.
    """

    def __init__(
        self, message: str, stage: Optional[str] = None, original_error: Optional[Exception] = None
    ):

        self.stage = stage
        self.original_error = original_error

        details = {
            "transcoding_stage": stage,
            "original_error": str(original_error) if original_error else None,
            "error_category": "transcoding",
        }

        suggestions = [
            "Check system has sufficient CPU and memory",
            "Verify temporary storage has enough space",
            "Try with a simpler quality ladder",
            "Check FFmpeg logs for detailed error info",
        ]

        if stage:
            suggestions.insert(0, f"Error occurred during {stage} stage")

        super().__init__(message, details, suggestions)


class HLSTranscodingError(TranscodingError):
    """–û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HLS —Å—Ç—Ä–∏–º–∞"""

    def __init__(
        self, message: str, variant_height: Optional[int] = None, segments_created: int = 0
    ):

        self.variant_height = variant_height
        self.segments_created = segments_created

        details = {
            "variant_height": variant_height,
            "segments_created": segments_created,
            "transcoding_type": "HLS",
        }

        suggestions = [
            "Check HLS segment duration is reasonable (2-10 seconds)",
            "Verify output directory is writable",
            "Try with fewer quality variants",
            "Check source video is not corrupted",
        ]

        if variant_height:
            suggestions.insert(0, f"Error creating {variant_height}p HLS variant")

        super().__init__(message, "HLS_transcoding", None)
        self.details.update(details)


class DASHTranscodingError(TranscodingError):
    """–û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DASH —Å—Ç—Ä–∏–º–∞"""

    def __init__(self, message: str, representations_created: int = 0):
        self.representations_created = representations_created

        details = {"representations_created": representations_created, "transcoding_type": "DASH"}

        suggestions = [
            "Check DASH segment settings are valid",
            "Verify manifest template configuration",
            "Try shorter segment duration (2-4 seconds)",
            "Check FFmpeg DASH support is available",
        ]

        super().__init__(message, "DASH_transcoding", None)
        self.details.update(details)


# ==============================================================================
# –û–®–ò–ë–ö–ò STORAGE
# ==============================================================================


class StorageError(HLSFieldError):
    """
    –û—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º.
    """

    def __init__(
        self,
        message: str,
        operation: Optional[str] = None,
        file_path: Optional[str] = None,
        storage_backend: Optional[str] = None,
    ):

        self.operation = operation
        self.file_path = file_path
        self.storage_backend = storage_backend

        details = {
            "operation": operation,
            "file_path": file_path,
            "storage_backend": storage_backend,
            "error_category": "storage",
        }

        suggestions = [
            "Check file and directory permissions",
            "Verify storage backend configuration",
            "Ensure sufficient storage space available",
        ]

        if operation == "upload":
            suggestions.extend(
                [
                    "Check network connectivity for cloud storage",
                    "Verify authentication credentials",
                    "Try uploading smaller test file",
                ]
            )
        elif operation == "download":
            suggestions.extend(
                [
                    "Verify file exists in storage",
                    "Check read permissions",
                    "Confirm storage backend is accessible",
                ]
            )

        super().__init__(message, details, suggestions)


class S3StorageError(StorageError):
    """–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ AWS S3 storage"""

    def __init__(
        self,
        message: str,
        bucket: Optional[str] = None,
        key: Optional[str] = None,
        aws_error_code: Optional[str] = None,
    ):

        self.bucket = bucket
        self.key = key
        self.aws_error_code = aws_error_code

        details = {
            "bucket": bucket,
            "key": key,
            "aws_error_code": aws_error_code,
            "storage_type": "S3",
        }

        suggestions = [
            "Check AWS credentials (ACCESS_KEY_ID, SECRET_ACCESS_KEY)",
            "Verify S3 bucket exists and is accessible",
            "Check S3 bucket permissions and policies",
            "Confirm AWS region is correct",
        ]

        if aws_error_code == "NoSuchBucket":
            suggestions.insert(0, f"S3 bucket '{bucket}' does not exist")
        elif aws_error_code == "AccessDenied":
            suggestions.insert(0, "S3 access denied - check IAM permissions")
        elif aws_error_code == "NoSuchKey":
            suggestions.insert(0, f"S3 object '{key}' not found")

        super().__init__(message, None, key, "S3")
        self.details.update(details)


# ==============================================================================
# –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ==============================================================================


class ConfigurationError(HLSFieldError):
    """
    –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ django-hlsfield.
    """

    def __init__(
        self,
        message: str,
        setting_name: Optional[str] = None,
        current_value: Optional[Any] = None,
        expected_type: Optional[str] = None,
    ):

        self.setting_name = setting_name
        self.current_value = current_value
        self.expected_type = expected_type

        details = {
            "setting_name": setting_name,
            "current_value": current_value,
            "expected_type": expected_type,
            "error_category": "configuration",
        }

        suggestions = [
            "Check Django settings.py configuration",
            "Verify HLSFIELD_* settings are correct",
            "Run: python manage.py hlsfield_health_check",
            "Review django-hlsfield documentation",
        ]

        if setting_name:
            suggestions.insert(0, f"Fix {setting_name} setting in Django configuration")

        super().__init__(message, details, suggestions)


class InvalidLadderError(ConfigurationError):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–µ—Å—Ç–Ω–∏—Ü—ã –∫–∞—á–µ—Å—Ç–≤"""

    def __init__(
        self, message: str, ladder: Optional[List[Dict]] = None, rung_index: Optional[int] = None
    ):

        self.ladder = ladder
        self.rung_index = rung_index

        details = {
            "ladder_length": len(ladder) if ladder else 0,
            "invalid_rung_index": rung_index,
            "setting_type": "quality_ladder",
        }

        suggestions = [
            "Check ladder format: [{'height': 720, 'v_bitrate': 2500, 'a_bitrate': 128}, ...]",
            "Verify all ladder rungs have required fields",
            "Ensure bitrates and heights are positive integers",
            "Remove duplicate height values from ladder",
        ]

        if rung_index is not None:
            suggestions.insert(0, f"Fix ladder rung at index {rung_index}")

        super().__init__(message, "ladder", ladder, "List[Dict]")
        self.details.update(details)


# ==============================================================================
# –û–®–ò–ë–ö–ò CELERY/–ó–ê–î–ê–ß
# ==============================================================================


class TaskError(HLSFieldError):
    """
    –û—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.
    """

    def __init__(
        self,
        message: str,
        task_name: Optional[str] = None,
        task_id: Optional[str] = None,
        retry_count: int = 0,
    ):

        self.task_name = task_name
        self.task_id = task_id
        self.retry_count = retry_count

        details = {
            "task_name": task_name,
            "task_id": task_id,
            "retry_count": retry_count,
            "error_category": "task_execution",
        }

        suggestions = [
            "Check Celery worker is running",
            "Verify Redis/broker connectivity",
            "Monitor system resources (CPU, memory, disk)",
            "Check task logs for detailed errors",
        ]

        if retry_count > 0:
            suggestions.insert(0, f"Task failed after {retry_count} retries")

        super().__init__(message, details, suggestions)


class CeleryNotAvailableError(TaskError):
    """Celery –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, fallback –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""

    def __init__(self):
        message = "Celery not available, falling back to synchronous processing"

        suggestions = [
            "Install Celery: pip install celery",
            "Configure Celery in Django settings",
            "Start Celery worker: celery -A myproject worker",
            "Synchronous processing will continue but may be slow",
        ]

        details = {"fallback_mode": "synchronous"}

        super().__init__(message, None, None, 0)
        self.details.update(details)


# ==============================================================================
# –û–®–ò–ë–ö–ò –í–ê–õ–ò–î–ê–¶–ò–ò
# ==============================================================================


class ValidationError(HLSFieldError):
    """
    –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """

    def __init__(
        self,
        message: str,
        field_name: Optional[str] = None,
        validation_errors: Optional[List[str]] = None,
    ):

        self.field_name = field_name
        self.validation_errors = validation_errors or []

        details = {
            "field_name": field_name,
            "validation_errors": validation_errors,
            "error_category": "validation",
        }

        suggestions = []
        if validation_errors:
            suggestions.extend(validation_errors)

        suggestions.append("Check input data format and constraints")

        super().__init__(message, details, suggestions)


# ==============================================================================
# NETWORK –ò TIMEOUT –û–®–ò–ë–ö–ò
# ==============================================================================


class TimeoutError(HLSFieldError):
    """–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç"""

    def __init__(self, message: str, timeout_seconds: int, operation: Optional[str] = None):

        self.timeout_seconds = timeout_seconds
        self.operation = operation

        details = {
            "timeout_seconds": timeout_seconds,
            "operation": operation,
            "error_category": "timeout",
        }

        suggestions = [
            f"Increase timeout (current: {timeout_seconds}s)",
            "Check if operation is appropriate for timeout duration",
            "Monitor system performance during operation",
        ]

        if operation:
            suggestions.insert(0, f"Timeout during {operation}")

        super().__init__(message, details, suggestions)


class NetworkError(HLSFieldError):
    """–°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏"""

    def __init__(self, message: str, url: Optional[str] = None, status_code: Optional[int] = None):
        self.url = url
        self.status_code = status_code

        details = {"url": url, "status_code": status_code, "error_category": "network"}

        suggestions = [
            "Check network connectivity",
            "Verify URL is accessible",
            "Check firewall and proxy settings",
        ]

        if status_code:
            if status_code == 404:
                suggestions.insert(0, "Resource not found (404)")
            elif status_code == 403:
                suggestions.insert(0, "Access forbidden (403) - check permissions")
            elif status_code >= 500:
                suggestions.insert(0, f"Server error ({status_code}) - try again later")

        super().__init__(message, details, suggestions)


# ==============================================================================
# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò
# ==============================================================================


def categorize_exception(error: Exception) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

    Args:
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    Returns:
        dict: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    """

    if isinstance(error, HLSFieldError):
        return error.to_dict()

    # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π Python
    error_info = {
        "error_type": error.__class__.__name__,
        "message": str(error),
        "details": {},
        "suggestions": [],
    }

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    if isinstance(error, FileNotFoundError):
        error_info["details"]["error_category"] = "file_system"
        error_info["suggestions"] = [
            "Check file path exists",
            "Verify file permissions",
            "Ensure file was not moved or deleted",
        ]

    elif isinstance(error, PermissionError):
        error_info["details"]["error_category"] = "permissions"
        error_info["suggestions"] = [
            "Check file and directory permissions",
            "Run with appropriate user privileges",
            "Verify write access to destination",
        ]

    elif isinstance(error, OSError):
        error_info["details"]["error_category"] = "system"
        error_info["suggestions"] = [
            "Check system resources (disk space, memory)",
            "Verify system configuration",
            "Check for hardware issues",
        ]

    return error_info


def format_exception_for_user(error: Exception) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π).

    Args:
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        str: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """

    if isinstance(error, HLSFieldError):
        message = error.message

        if error.suggestions:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 suggestion –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            suggestions = error.suggestions[:2]
            message += f"\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: {'; '.join(suggestions)}"

        return message

    # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    error_messages = {
        FileNotFoundError: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.",
        PermissionError: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.",
        OSError: "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã.",
        ValueError: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        TypeError: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.",
    }

    return error_messages.get(type(error), f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(error)}")


def is_retryable_error(error: Exception) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏.

    Args:
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    Returns:
        bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    """

    # –û—à–∏–±–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å
    non_retryable = (
        FFmpegNotFoundError,
        InvalidVideoError,
        UnsupportedFormatError,
        VideoTooLargeError,
        ConfigurationError,
        ValidationError,
    )

    if isinstance(error, non_retryable):
        return False

    # –û—à–∏–±–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    retryable = (NetworkError, TimeoutError, StorageError, TaskError)

    if isinstance(error, retryable):
        return True

    # –î–ª—è HLSFieldError –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if isinstance(error, HLSFieldError):
        error_category = error.details.get("error_category")

        non_retryable_categories = ["video_validation", "configuration", "system_configuration"]

        return error_category not in non_retryable_categories

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è Python
    if isinstance(error, (ConnectionError, TimeoutError)):
        return True

    if isinstance(error, (ValueError, TypeError, FileNotFoundError)):
        return False

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
    return False


# ==============================================================================
# –≠–ö–°–ü–û–†–¢ –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô
# ==============================================================================

__all__ = [
    # –ë–∞–∑–æ–≤—ã–µ
    "HLSFieldError",
    # FFmpeg
    "FFmpegNotFoundError",
    "FFmpegError",
    "FFmpegTimeoutError",
    # –í–∏–¥–µ–æ
    "InvalidVideoError",
    "UnsupportedFormatError",
    "VideoTooLargeError",
    "VideoTooShortError",
    # –¢—Ä–∞–Ω—Å–∫–æ–¥–∏–Ω–≥
    "TranscodingError",
    "HLSTranscodingError",
    "DASHTranscodingError",
    # Storage
    "StorageError",
    "S3StorageError",
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    "ConfigurationError",
    "InvalidLadderError",
    # –ó–∞–¥–∞—á–∏
    "TaskError",
    "CeleryNotAvailableError",
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    "ValidationError",
    # Network
    "TimeoutError",
    "NetworkError",
    # –£—Ç–∏–ª–∏—Ç—ã
    "categorize_exception",
    "format_exception_for_user",
    "is_retryable_error",
]
