# coding: utf-8

"""
    Selling Partner API for Easy Ship

    Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).

    The version of the OpenAPI document: 2022-03-23
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CreateScheduledPackageRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amazon_order_id': 'str',
        'marketplace_id': 'str',
        'package_details': 'PackageDetails',
    }

    attribute_map = {
        'amazon_order_id': 'amazonOrderId',
        'marketplace_id': 'marketplaceId',
        'package_details': 'packageDetails',
    }

    def __init__(self, amazon_order_id=None, marketplace_id=None, package_details=None, _configuration=None):  # noqa: E501
        """CreateScheduledPackageRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._amazon_order_id = None
        self._marketplace_id = None
        self._package_details = None
        self.discriminator = None

        self.amazon_order_id = amazon_order_id
        self.marketplace_id = marketplace_id
        self.package_details = package_details

    @property
    def amazon_order_id(self):
        """Gets the amazon_order_id of this CreateScheduledPackageRequest.  # noqa: E501

        An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.  # noqa: E501

        :return: The amazon_order_id of this CreateScheduledPackageRequest.  # noqa: E501
        :rtype: str
        """
        return self._amazon_order_id

    @amazon_order_id.setter
    def amazon_order_id(self, amazon_order_id):
        """Sets the amazon_order_id of this CreateScheduledPackageRequest.

        An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.  # noqa: E501

        :param amazon_order_id: The amazon_order_id of this CreateScheduledPackageRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and amazon_order_id is None:
            raise ValueError("Invalid value for `amazon_order_id`, must not be `None`")  # noqa: E501

        self._amazon_order_id = amazon_order_id

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this CreateScheduledPackageRequest.  # noqa: E501

        A string of up to 255 characters.  # noqa: E501

        :return: The marketplace_id of this CreateScheduledPackageRequest.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this CreateScheduledPackageRequest.

        A string of up to 255 characters.  # noqa: E501

        :param marketplace_id: The marketplace_id of this CreateScheduledPackageRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                marketplace_id is not None and len(marketplace_id) > 255):
            raise ValueError("Invalid value for `marketplace_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                marketplace_id is not None and len(marketplace_id) < 1):
            raise ValueError("Invalid value for `marketplace_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def package_details(self):
        """Gets the package_details of this CreateScheduledPackageRequest.  # noqa: E501


        :return: The package_details of this CreateScheduledPackageRequest.  # noqa: E501
        :rtype: PackageDetails
        """
        return self._package_details

    @package_details.setter
    def package_details(self, package_details):
        """Sets the package_details of this CreateScheduledPackageRequest.


        :param package_details: The package_details of this CreateScheduledPackageRequest.  # noqa: E501
        :type: PackageDetails
        """
        if self._configuration.client_side_validation and package_details is None:
            raise ValueError("Invalid value for `package_details`, must not be `None`")  # noqa: E501

        self._package_details = package_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateScheduledPackageRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateScheduledPackageRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateScheduledPackageRequest):
            return True

        return self.to_dict() != other.to_dict()
