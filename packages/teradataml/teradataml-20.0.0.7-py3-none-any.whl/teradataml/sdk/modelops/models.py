# ################################################################################################
# 
# Copyright 2025 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Adithya Avvaru (adithya.avvaru@teradata.com)
# Secondary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# 
# Version: 1.0
# SDK Version: 1.0
#
# This file contains Pydantic models for all the schemas used in the SDK.
# It is generated by datamodel-codegen. See README.md in teradataml/sdk for more
# details about the usage and command to use.
#
# If there are not models, keep empty file, to not fail import this module file.
#
# ################################################################################################

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import (BaseModel, ConfigDict, Field, RootModel, StrictBool,
                      StrictInt)


class AlertPatch(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: StrictBool


class AlertRule(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alert: str = Field(..., max_length=256, min_length=0, pattern='[a-zA-Z0-9_ ]+')
    annotations: Dict[str, str]
    expr: str
    for_: str = Field(..., alias='for')
    labels: Dict[str, str]


class AutomationAttributes(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    dockerImage: str
    engine: Optional[str] = None
    resources: Optional[Resources] = None


class BYOMValidateQuery(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    artefactImportId: UUID
    columnExpression: Optional[str] = None
    datasetConnectionId: UUID
    datasetId: UUID
    language: str


class ByomAttributes(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    url: Optional[str] = None


class ByomModelLocation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    database: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    table: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')


class CatalogType(Enum):
    VANTAGE = 'VANTAGE'
    FEAST = 'FEAST'
    NONE = 'NONE'


class CollectionModelFeatureEngineeringEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class CollectionModelJob(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded1] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class CollectionModelJobEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded2] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class CollectionModelModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded3] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class CollectionModelModelAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded4] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class CollectionModelObject(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded5] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class CollectionModelProjectAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded6] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class CollectionModelTag(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded7] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class CollectionModelTrainedModelEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded8] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class CollectionModelUserAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded9] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')


class Component(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entity: str
    sql: str
    variables: List[Variable]


class ComputeFeatureMetadataRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automation: Union[AutomationAttributes, DeploymentAutomationAttributes]
    database: str
    datasetConnectionId: UUID
    featureMetadataTable: str
    features: List[Feature]
    featuresSourceSqlQuery: str


class ComputeStatisticsRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automation: Union[AutomationAttributes, DeploymentAutomationAttributes]
    datasetConnectionId: UUID
    datasetId: UUID


class CreateMetadataTableRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    database: Optional[str] = Field(
        None, max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+'
    )
    datasetConnectionId: UUID
    table: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')


class Credentials(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credsEncrypted: Optional[StrictBool] = None
    password: str = Field(..., max_length=128, min_length=0)
    username: str = Field(..., max_length=128, min_length=0)


class Dataset(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    createdAt: Optional[datetime] = None
    datasetTemplateId: UUID
    description: Optional[str] = Field(None, max_length=255, min_length=0)
    id: Optional[UUID] = None
    metadata: Union[DatasetCatalogMetadata, NoCatalogMetadata]
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    scope: str = Field(..., pattern='train|evaluate')


class DatasetConnection(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    createdAt: Optional[datetime] = None
    credentials: Credentials
    description: Optional[str] = Field(None, max_length=256, min_length=0)
    id: Optional[UUID] = None
    metadata: Metadata
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    personal: Optional[StrictBool] = None
    projectId: Optional[UUID] = None
    service: Optional[StrictBool] = None
    updatedAt: Optional[datetime] = None


class DatasetConnectionRequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    createdAt: Optional[datetime] = None
    credentials: Credentials
    description: Optional[str] = Field(None, max_length=256, min_length=0)
    id: Optional[UUID] = None
    metadata: Metadata
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    personal: Optional[StrictBool] = None
    projectId: Optional[UUID] = None
    service: Optional[StrictBool] = None
    tags: Optional[List[str]] = None
    updatedAt: Optional[datetime] = None


class DatasetMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: str


class DatasetRequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    createdAt: Optional[datetime] = None
    datasetTemplateId: UUID
    description: Optional[str] = Field(None, max_length=255, min_length=0)
    id: Optional[UUID] = None
    metadata: Union[DatasetCatalogMetadata, NoCatalogMetadata]
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    scope: str = Field(..., pattern='train|evaluate')
    tags: Optional[List[str]] = None


class DatasetTemplate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    catalogType: Optional[CatalogType] = None
    createdAt: Optional[datetime] = None
    description: Optional[str] = Field(None, max_length=255, min_length=0)
    featureMetadata: Optional[FeatureMetadata] = None
    id: Optional[UUID] = None
    metadata: Union[DatasetTemplateCatalogMetadata, NoCatalogMetadata]
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None


class DatasetTemplateMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: str


class DatasetTemplateRequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    catalogType: Optional[CatalogType] = None
    createdAt: Optional[datetime] = None
    description: Optional[str] = Field(None, max_length=255, min_length=0)
    featureMetadata: Optional[FeatureMetadata] = None
    id: Optional[UUID] = None
    metadata: Union[DatasetTemplateCatalogMetadata, NoCatalogMetadata]
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    tags: Optional[List[str]] = None


class Deployment(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    engine: Optional[str] = None
    engineType: Optional[str] = None
    id: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None


class DeploymentAutomationAttributes(AutomationAttributes):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    replicas: Optional[StrictInt] = None
    dockerImage: str


class DeploymentRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    args: Optional[Dict[str, str]] = None
    byomModelLocation: Optional[ByomModelLocation] = None
    cron: Optional[str] = None
    datasetConnectionId: Optional[UUID] = None
    datasetTemplateId: Optional[UUID] = None
    engineType: EngineType
    engineTypeConfig: DeploymentAutomationAttributes
    language: str
    publishOnly: Optional[StrictBool] = None
    type: Optional[Type] = None


class EngineType(Enum):
    DOCKER_RESTFUL = 'DOCKER_RESTFUL'
    DOCKER_BATCH = 'DOCKER_BATCH'
    IN_VANTAGE = 'IN_VANTAGE'
    LAKE_RESTFUL = 'LAKE_RESTFUL'
    LMZ_RESTFUL = 'LMZ_RESTFUL'


class EngineType1(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    schedulable: Optional[StrictBool] = None


class EngineType2(Enum):
    DOCKER_RESTFUL = 'DOCKER_RESTFUL'
    DOCKER_BATCH = 'DOCKER_BATCH'
    IN_VANTAGE = 'IN_VANTAGE'


class EntityModelDataset(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    archived: Optional[StrictBool] = None
    createdAt: Optional[datetime] = None
    datasetTemplateId: UUID
    description: Optional[str] = Field(None, max_length=255, min_length=0)
    id: Optional[UUID] = None
    metadata: Union[DatasetCatalogMetadata, NoCatalogMetadata]
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    scope: str = Field(..., pattern='train|evaluate')


class EntityModelDatasetConnection(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    archived: Optional[StrictBool] = None
    createdAt: Optional[datetime] = None
    credentials: Credentials
    description: Optional[str] = Field(None, max_length=256, min_length=0)
    id: Optional[UUID] = None
    metadata: Metadata
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    personal: Optional[StrictBool] = None
    projectId: Optional[UUID] = None
    service: Optional[StrictBool] = None
    updatedAt: Optional[datetime] = None


class EntityModelDatasetTemplate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    archived: Optional[StrictBool] = None
    catalogType: Optional[CatalogType] = None
    createdAt: Optional[datetime] = None
    description: Optional[str] = Field(None, max_length=255, min_length=0)
    featureMetadata: Optional[FeatureMetadata] = None
    id: Optional[UUID] = None
    metadata: Union[DatasetTemplateCatalogMetadata, NoCatalogMetadata]
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None


class EntityModelDeployment(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    engine: Optional[str] = None
    engineType: Optional[str] = None
    id: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None


class EntityModelFeatureEngineeringEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    featureEngineeringTaskId: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None


class EntityModelFeatureEngineeringTask(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    archived: Optional[StrictBool] = None
    automation: Optional[FeatureEngineeringTaskAutomation] = None
    createdAt: Optional[datetime] = None
    description: str = Field(..., max_length=255, min_length=0)
    functionName: str = Field(..., max_length=255, min_length=0)
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    language: str = Field(..., pattern='PYTHON|R')
    metadata: Optional[FeatureEngineeringMetadata] = None
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    source: Optional[Source] = None


class EntityModelJob(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    deploymentId: Optional[UUID] = None
    featureEngineeringTaskId: Optional[UUID] = None
    id: Optional[UUID] = None
    metadata: Optional[JobMetadata] = None
    modelId: Optional[UUID] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    source: Optional[Source1] = None
    trainedModelId: Optional[UUID] = None
    type: Optional[Type1] = None


class EntityModelJobEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None


class EntityModelModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    archived: Optional[StrictBool] = None
    automation: Optional[ModelAutomation] = None
    byomAttributes: Optional[ByomAttributes] = None
    changesetId: Optional[str] = None
    configuration: Optional[Dict[str, Dict[str, Any]]] = None
    createdAt: Optional[datetime] = None
    description: str = Field(..., max_length=255, min_length=0)
    gitFolder: Optional[str] = None
    id: Optional[UUID] = None
    language: str = Field(
        ..., pattern='python|Jupyter|R|PMML|ONNX|H2O|H2O_DAI|SAS|DATAIKU|DATAROBOT|AI'
    )
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    source: Optional[Source2] = None
    sourceModelId: Optional[UUID] = None
    updatedAt: Optional[datetime] = None


class EntityModelModelAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    modelId: UUID
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class EntityModelProject(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    archived: Optional[StrictBool] = None
    branch: str = Field(..., max_length=256, min_length=0)
    createdAt: Optional[datetime] = None
    description: str = Field(..., max_length=256, min_length=0)
    gitCredentials: Optional[Dict[str, str]] = None
    gitRepositoryUrl: str = Field(..., max_length=256, min_length=0)
    groupId: str = Field(..., max_length=256, min_length=0)
    id: Optional[UUID] = None
    name: str = Field(..., max_length=128, min_length=0)


class EntityModelProjectAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class EntityModelTag(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    entityId: Optional[UUID] = None
    entityType: Optional[EntityType] = None
    id: Optional[UUID] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: str = Field(..., max_length=256, min_length=0)


class EntityModelTrainedModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    archived: Optional[StrictBool] = None
    createdAt: Optional[datetime] = None
    externalId: Optional[str] = None
    gitCommitId: Optional[str] = None
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[TrainedModelMetadata] = None
    modelId: UUID
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None


class EntityModelTrainedModelEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    datasetId: Optional[UUID] = None
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None
    trainedModelId: Optional[UUID] = None


class EntityModelUserAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_links: Optional[Links] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class EntityType(Enum):
    JOB = 'JOB'
    JOB_EVENT = 'JOB_EVENT'
    DATASET_TEMPLATE = 'DATASET_TEMPLATE'
    DATASET_CONNECTION = 'DATASET_CONNECTION'
    DATASET = 'DATASET'
    PROJECT = 'PROJECT'
    MODEL = 'MODEL'
    TRAINED_MODEL = 'TRAINED_MODEL'
    TRAINED_MODEL_EVENT = 'TRAINED_MODEL_EVENT'
    FEATURE_ENGINEERING = 'FEATURE_ENGINEERING'
    FEATURE_ENGINEERING_TASK = 'FEATURE_ENGINEERING_TASK'
    FEATURE_ENGINEERING_TASK_EVENT = 'FEATURE_ENGINEERING_TASK_EVENT'


class EvaluationRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automation: Union[AutomationAttributes, DeploymentAutomationAttributes]
    datasetConnectionId: UUID
    datasetId: UUID
    metadata: Optional[Dict[str, Dict[str, Any]]] = None


class ExtractPythonFunctionsRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[str] = None
    featureEngineeringMetadata: Optional[FeatureEngineeringMetadata] = None


class Feature(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    type: str


class FeatureEngineeringDeploymentRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    args: Optional[Dict[str, str]] = None
    cron: Optional[str] = None
    datasetConnectionId: Optional[UUID] = None
    datasetTemplateId: Optional[UUID] = None
    engineType: EngineType2
    engineTypeConfig: DeploymentAutomationAttributes
    language: str
    publishOnly: Optional[StrictBool] = None
    type: Optional[Type2] = None


class FeatureEngineeringEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    featureEngineeringTaskId: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None


class FeatureEngineeringEventResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    featureEngineeringTaskId: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None


class FeatureEngineeringIntrospectionInfo(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    artefacts: Optional[List[str]] = None
    deploymentSettings: Optional[Dict[str, Dict[str, Any]]] = None


class FeatureEngineeringMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automation: Optional[
        Union[AutomationAttributes, DeploymentAutomationAttributes]
    ] = None
    customProperties: Optional[str] = None
    fileName: Optional[str] = None
    gitFolder: Optional[str] = None
    resourceTemplate: str


class FeatureEngineeringRetirementRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    datasetConnectionId: Optional[UUID] = None
    deploymentId: UUID


class FeatureEngineeringTask(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    automation: Optional[FeatureEngineeringTaskAutomation] = None
    createdAt: Optional[datetime] = None
    description: str = Field(..., max_length=255, min_length=0)
    functionName: str = Field(..., max_length=255, min_length=0)
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    language: str = Field(..., pattern='PYTHON|R')
    metadata: Optional[FeatureEngineeringMetadata] = None
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    source: Optional[Source3] = None


class FeatureEngineeringTaskAutomation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deployment: Optional[DeploymentAutomationAttributes] = None
    run: Optional[Union[AutomationAttributes, DeploymentAutomationAttributes]] = None


class FeatureEngineeringTaskRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    artefactImportId: Optional[UUID] = None
    description: str = Field(..., max_length=255, min_length=0)
    functionName: str = Field(..., max_length=255, min_length=0)
    id: Optional[UUID] = None
    language: str = Field(..., max_length=255, min_length=0)
    metadata: Optional[FeatureEngineeringMetadata] = None
    name: str = Field(..., max_length=128, min_length=0)
    source: Optional[str] = None


class FeatureMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    database: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    monitoringGroup: Optional[str] = None
    table: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')


class FieldEmbedded(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    featureEngineeringEvents: Optional[List[FeatureEngineeringEventResponse]] = None


class FieldEmbedded1(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    jobs: Optional[List[JobResponse]] = None


class FieldEmbedded10(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    datasets: Optional[List[EntityModelDataset]] = None


class FieldEmbedded11(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    datasetConnections: Optional[List[EntityModelDatasetConnection]] = None


class FieldEmbedded12(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    datasetTemplates: Optional[List[EntityModelDatasetTemplate]] = None


class FieldEmbedded13(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deployments: Optional[List[EntityModelDeployment]] = None


class FieldEmbedded14(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    featureEngineeringEvents: Optional[List[EntityModelFeatureEngineeringEvent]] = None


class FieldEmbedded15(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    featureEngineeringTasks: Optional[List[EntityModelFeatureEngineeringTask]] = None


class FieldEmbedded16(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    jobs: Optional[List[EntityModelJob]] = None


class FieldEmbedded17(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    jobEvents: Optional[List[EntityModelJobEvent]] = None


class FieldEmbedded18(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    models: Optional[List[EntityModelModel]] = None


class FieldEmbedded19(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    modelAttributes: Optional[List[EntityModelModelAttribute]] = None


class FieldEmbedded2(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    jobEvents: Optional[List[JobEventResponse]] = None


class FieldEmbedded20(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    projects: Optional[List[EntityModelProject]] = None


class FieldEmbedded21(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    projectAttributes: Optional[List[EntityModelProjectAttribute]] = None


class FieldEmbedded22(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    tags: Optional[List[EntityModelTag]] = None


class FieldEmbedded23(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    trainedModels: Optional[List[EntityModelTrainedModel]] = None


class FieldEmbedded24(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    trainedModelEvents: Optional[List[EntityModelTrainedModelEvent]] = None


class FieldEmbedded25(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    userAttributes: Optional[List[EntityModelUserAttribute]] = None


class FieldEmbedded3(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    models: Optional[List[ModelResponse]] = None


class FieldEmbedded4(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    modelAttributes: Optional[List[ModelAttributeResponse]] = None


class FieldEmbedded5(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    objects: Optional[List[Dict[str, Any]]] = None


class FieldEmbedded6(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    projectAttributes: Optional[List[ProjectAttributeResponse]] = None


class FieldEmbedded7(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    tags: Optional[List[TagResponse]] = None


class FieldEmbedded8(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    trainedModelEvents: Optional[List[TrainedModelEventResponse]] = None


class FieldEmbedded9(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    userAttributes: Optional[List[UserAttributeResponse]] = None


class GetFeatureMetadataRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    database: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    datasetConnectionId: UUID
    table: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')


class GitStatus(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cloneHealthy: Optional[StrictBool] = None
    exception: Optional[str] = None
    healthy: Optional[StrictBool] = None
    lastPullSuccessDate: Optional[datetime] = None
    message: Optional[str] = None
    monitored: Optional[StrictBool] = None
    pullHealthy: Optional[StrictBool] = None
    stackTrace: Optional[str] = None


class ImportRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    artefactImportId: UUID
    externalId: str
    modelMonitoring: Optional[CustomModelModelMonitoring] = None
    sas: Optional[SasMetadata] = None


class Job(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    deploymentId: Optional[UUID] = None
    featureEngineeringTaskId: Optional[UUID] = None
    id: Optional[UUID] = None
    metadata: Optional[JobMetadata] = None
    modelId: Optional[UUID] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    source: Optional[Source4] = None
    trainedModelId: Optional[UUID] = None
    type: Optional[Type3] = None


class JobEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None


class JobEventResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None


class JobMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automation: Optional[
        Union[AutomationAttributes, DeploymentAutomationAttributes]
    ] = None
    computeFeatureMetadataRequest: Optional[ComputeFeatureMetadataRequest] = None
    computeStatisticsRequest: Optional[ComputeStatisticsRequest] = None
    dataset: Optional[Dataset] = None
    datasetConnectionId: Optional[UUID] = None
    deploymentRequest: Optional[DeploymentRequest] = None
    evaluationRequest: Optional[EvaluationRequest] = None
    featureEngineeringDeploymentRequest: Optional[
        FeatureEngineeringDeploymentRequest
    ] = None
    featureEngineeringRetirementRequest: Optional[
        FeatureEngineeringRetirementRequest
    ] = None
    featureEngineeringTask: Optional[FeatureEngineeringTask] = None
    featureEngineeringTaskRequest: Optional[FeatureEngineeringTaskRequest] = None
    importRequest: Optional[ImportRequest] = None
    retirementRequest: Optional[RetirementRequest] = None
    runRequest: Optional[RunRequest] = None
    trainedModel: Optional[TrainedModel] = None
    trainingRequest: Optional[TrainingRequest] = None


class JobResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    deploymentId: Optional[UUID] = None
    featureEngineeringTaskId: Optional[UUID] = None
    id: Optional[UUID] = None
    metadata: Optional[JobMetadata] = None
    modelId: Optional[UUID] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    source: Optional[Source4] = None
    trainedModelId: Optional[UUID] = None
    type: Optional[Type3] = None


class JoinEntityAndTargetRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entityAndTargets: Component
    features: Component


class JoinPredictionRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entityAndTargets: Component
    features: Component
    predictionEntitySql: str


class JsonNode(BaseModel):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class Link(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deprecation: Optional[str] = None
    href: Optional[str] = None
    hreflang: Optional[str] = None
    name: Optional[str] = None
    profile: Optional[str] = None
    templated: Optional[StrictBool] = None
    title: Optional[str] = None
    type: Optional[str] = None


class Links(RootModel[Optional[Dict[str, Link]]]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Optional[Dict[str, Link]] = None


class ListTablesQuery(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    database: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    datasetConnectionId: UUID


class Metadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    byomDb: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    cloudEnvironment: Optional[str] = Field(None, max_length=128, min_length=0)
    cloudEnvironmentId: Optional[UUID] = None
    database: Optional[str] = Field(
        None, max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+'
    )
    host: str = Field(..., max_length=255, min_length=0)
    log_mech: str = Field(..., max_length=16, min_length=0, pattern='\\w+')
    sasDb: Optional[str] = Field(
        None, max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+'
    )
    valDb: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')


class Model(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    automation: Optional[ModelAutomation] = None
    byomAttributes: Optional[ByomAttributes] = None
    changesetId: Optional[str] = None
    configuration: Optional[Dict[str, Dict[str, Any]]] = None
    createdAt: Optional[datetime] = None
    description: str = Field(..., max_length=255, min_length=0)
    gitFolder: Optional[str] = None
    id: Optional[UUID] = None
    language: str = Field(
        ..., pattern='python|Jupyter|R|PMML|ONNX|H2O|H2O_DAI|SAS|DATAIKU|DATAROBOT|AI'
    )
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    source: Optional[Source6] = None
    sourceModelId: Optional[UUID] = None
    updatedAt: Optional[datetime] = None


class ModelAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    modelId: UUID
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class ModelAttributeRequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    modelId: UUID
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class ModelAttributeResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    modelId: UUID
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class ModelAutomation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deployment: Optional[DeploymentAutomationAttributes] = None
    evaluation: Optional[
        Union[AutomationAttributes, DeploymentAutomationAttributes]
    ] = None
    training: Optional[Union[AutomationAttributes, DeploymentAutomationAttributes]] = (
        None
    )


class ModelMonitoring(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    evaluationEnabled: Optional[StrictBool] = None
    language: str


class ModelRequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    attributes: Optional[List[str]] = None
    automation: Optional[ModelAutomation] = None
    byomAttributes: Optional[ByomAttributes] = None
    changesetId: Optional[str] = None
    configuration: Optional[Dict[str, Dict[str, Any]]] = None
    createdAt: Optional[datetime] = None
    description: str = Field(..., max_length=255, min_length=0)
    gitFolder: Optional[str] = None
    id: Optional[UUID] = None
    language: str = Field(
        ..., pattern='python|Jupyter|R|PMML|ONNX|H2O|H2O_DAI|SAS|DATAIKU|DATAROBOT|AI'
    )
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    source: Optional[Source6] = None
    sourceModelId: Optional[UUID] = None
    tags: Optional[List[str]] = None
    updatedAt: Optional[datetime] = None


class ModelResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    automation: Optional[ModelAutomation] = None
    byomAttributes: Optional[ByomAttributes] = None
    changesetId: Optional[str] = None
    configuration: Optional[Dict[str, Dict[str, Any]]] = None
    createdAt: Optional[datetime] = None
    description: str = Field(..., max_length=255, min_length=0)
    gitFolder: Optional[str] = None
    id: Optional[UUID] = None
    language: str = Field(
        ..., pattern='python|Jupyter|R|PMML|ONNX|H2O|H2O_DAI|SAS|DATAIKU|DATAROBOT|AI'
    )
    name: str = Field(..., max_length=128, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    source: Optional[Source6] = None
    sourceModelId: Optional[UUID] = None
    updatedAt: Optional[datetime] = None


class ModelType(Enum):
    CLASSIFICATION = 'CLASSIFICATION'
    REGRESSION = 'REGRESSION'


class NoCatalogMetadata(DatasetMetadata, DatasetTemplateMetadata):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    empty: Optional[StrictBool] = None


class PageDataset(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[Dataset]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageDatasetConnection(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[DatasetConnection]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageDatasetTemplate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[DatasetTemplate]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageDeployment(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[Deployment]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageFeatureEngineeringEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[FeatureEngineeringEvent]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageFeatureEngineeringTask(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[FeatureEngineeringTask]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageJob(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[Job]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageJobEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[JobEvent]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    number: Optional[StrictInt] = None
    size: Optional[StrictInt] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[Model]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageModelAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[ModelAttribute]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageObject(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[Dict[str, Any]]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageProject(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[Project]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageProjectAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[ProjectAttribute]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageTag(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[Tag]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageTrainedModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[TrainedModel]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageTrainedModelEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[TrainedModelEvent]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class PageUserAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content: Optional[List[UserAttribute]] = None
    empty: Optional[StrictBool] = None
    first: Optional[StrictBool] = None
    last: Optional[StrictBool] = None
    number: Optional[StrictInt] = None
    numberOfElements: Optional[StrictInt] = None
    pageable: Optional[PageableObject] = None
    size: Optional[StrictInt] = None
    sort: Optional[SortObject] = None
    totalElements: Optional[StrictInt] = None
    totalPages: Optional[StrictInt] = None


class Pageable(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    page: Optional[StrictInt] = None
    size: Optional[StrictInt] = None
    sort: Optional[List[str]] = None


class PageableObject(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    offset: Optional[StrictInt] = None
    pageNumber: Optional[StrictInt] = None
    pageSize: Optional[StrictInt] = None
    paged: Optional[StrictBool] = None
    sort: Optional[SortObject] = None
    unpaged: Optional[StrictBool] = None


class PagedModelEntityModelDataset(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded10] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelDatasetConnection(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded11] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelDatasetTemplate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded12] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelDeployment(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded13] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelFeatureEngineeringEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded14] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelFeatureEngineeringTask(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded15] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelJob(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded16] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelJobEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded17] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded18] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelModelAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded19] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelProject(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded20] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelProjectAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded21] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelTag(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded22] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelTrainedModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded23] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelTrainedModelEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded24] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class PagedModelEntityModelUserAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_embedded: Optional[FieldEmbedded25] = Field(None, alias='_embedded')
    field_links: Optional[Links] = Field(None, alias='_links')
    page: Optional[PageMetadata] = None


class Prediction(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    database: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    entitySql: str
    table: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')


class Project(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    branch: str = Field(..., max_length=256, min_length=0)
    createdAt: Optional[datetime] = None
    description: str = Field(..., max_length=256, min_length=0)
    gitCredentials: Optional[Dict[str, str]] = None
    gitRepositoryUrl: str = Field(..., max_length=256, min_length=0)
    groupId: str = Field(..., max_length=256, min_length=0)
    id: Optional[UUID] = None
    name: str = Field(..., max_length=128, min_length=0)


class ProjectAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class ProjectAttributeRequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class ProjectAttributeResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class ProjectRequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    attributes: Optional[List[str]] = None
    branch: str = Field(..., max_length=256, min_length=0)
    createdAt: Optional[datetime] = None
    description: str = Field(..., max_length=256, min_length=0)
    gitCredentials: Optional[Dict[str, str]] = None
    gitRepositoryUrl: str = Field(..., max_length=256, min_length=0)
    groupId: str = Field(..., max_length=256, min_length=0)
    id: Optional[UUID] = None
    jobs: Optional[List[str]] = None
    models: Optional[List[str]] = None
    name: str = Field(..., max_length=128, min_length=0)
    tags: Optional[List[str]] = None
    userAttributes: Optional[List[str]] = None


class Resources(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cpu: Optional[str] = Field(None, examples=[1])
    """
    No. of CPU's
    """
    gpu: Optional[str] = Field(None, examples=[1])
    """
    No. of GPU's
    """
    memory: Optional[str] = Field(None, examples=['1gi, 4mi'])
    """
    Memory limit
    """


class RetirementRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    datasetConnectionId: Optional[UUID] = None
    deploymentId: UUID


class Review(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    comments: str


class RunRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    args: Optional[Dict[str, str]] = None
    automation: Union[AutomationAttributes, DeploymentAutomationAttributes]
    datasetConnectionId: UUID


class SASListModels(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    database: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    datasetConnectionId: UUID
    table: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')


class SASValidateQuery(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    columnExpression: Optional[str] = None
    database: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    datasetConnectionId: UUID
    datasetId: UUID
    externalId: str
    table: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')


class SasMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    database: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    table: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')


class ScoringRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    args: Optional[Dict[str, str]] = None
    automation: Union[AutomationAttributes, DeploymentAutomationAttributes]
    datasetConnectionId: UUID
    notes: Optional[str] = None


class ServiceTemplate(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    containerName: str
    disabled: StrictBool
    enabled: Optional[StrictBool] = None
    id: str
    serviceDescription: str
    serviceName: str


class SortObject(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    empty: Optional[StrictBool] = None
    sorted: Optional[StrictBool] = None
    unsorted: Optional[StrictBool] = None


class Source(Enum):
    GIT = 'GIT'
    EXTERNAL = 'EXTERNAL'


class Source1(Enum):
    FEATURE_ENGINEERING = 'FEATURE_ENGINEERING'
    MODEL = 'MODEL'
    DATASET_TEMPLATE = 'DATASET_TEMPLATE'


class Source2(Enum):
    GIT = 'GIT'
    BYOM = 'BYOM'
    AUTOML = 'AUTOML'


class Source3(Enum):
    GIT = 'GIT'
    EXTERNAL = 'EXTERNAL'


class Source4(Enum):
    FEATURE_ENGINEERING = 'FEATURE_ENGINEERING'
    MODEL = 'MODEL'
    DATASET_TEMPLATE = 'DATASET_TEMPLATE'


class Source6(Enum):
    GIT = 'GIT'
    BYOM = 'BYOM'
    AUTOML = 'AUTOML'


class SqlQuery(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    datasetConnectionId: UUID
    sql: str


class Tag(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    entityId: Optional[UUID] = None
    entityType: Optional[EntityType] = None
    id: Optional[UUID] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: str = Field(..., max_length=256, min_length=0)


class TagRequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    entityId: Optional[UUID] = None
    entityType: Optional[EntityType] = None
    id: Optional[UUID] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: str = Field(..., max_length=256, min_length=0)


class TagResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    entityId: Optional[UUID] = None
    entityType: Optional[EntityType] = None
    id: Optional[UUID] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: str = Field(..., max_length=256, min_length=0)


class TaskRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    args: Optional[Dict[str, str]] = None
    automation: Union[AutomationAttributes, DeploymentAutomationAttributes]
    datasetConnectionId: UUID
    notes: Optional[str] = None


class TrainedModel(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    archived: Optional[StrictBool] = None
    createdAt: Optional[datetime] = None
    externalId: Optional[str] = None
    gitCommitId: Optional[str] = None
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[TrainedModelMetadata] = None
    modelId: UUID
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None


class TrainedModelEvent(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    datasetId: Optional[UUID] = None
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None
    trainedModelId: Optional[UUID] = None


class TrainedModelEventResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    datasetId: Optional[UUID] = None
    id: Optional[UUID] = None
    jobId: Optional[UUID] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    status: Optional[str] = None
    trainedModelId: Optional[UUID] = None


class TrainedModelIntrospectionInfo(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    artefacts: Optional[List[str]] = None
    deploymentSettings: Optional[Dict[str, Dict[str, Any]]] = None


class TrainedModelMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    byomColumnExpression: Optional[str] = None
    configuration: Optional[Dict[str, Dict[str, Any]]] = None
    dockerImage: Optional[str] = None
    evaluationEnabled: Optional[StrictBool] = None
    modelType: Optional[ModelType] = None
    sas: Optional[SasMetadata] = None


class TrainingRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automation: Union[AutomationAttributes, DeploymentAutomationAttributes]
    datasetConnectionId: UUID
    datasetId: UUID
    modelConfigurationOverrides: Optional[Dict[str, Dict[str, Any]]] = None


class Type(Enum):
    FE_TASK = 'FE_TASK'
    MODEL_VERSION = 'MODEL_VERSION'


class Type1(Enum):
    IMPORT = 'IMPORT'
    TRAINING = 'TRAINING'
    EVALUATION = 'EVALUATION'
    DEPLOYMENT = 'DEPLOYMENT'
    RETIREMENT = 'RETIREMENT'
    APPROVAL = 'APPROVAL'
    REJECTION = 'REJECTION'
    BATCH_PREDICTION = 'BATCH_PREDICTION'
    COMPUTE_STATISTICS = 'COMPUTE_STATISTICS'
    RUN = 'RUN'
    BATCH_EXECUTION = 'BATCH_EXECUTION'
    COMPUTE_FEATURE_METADATA = 'COMPUTE_FEATURE_METADATA'


class Type2(Enum):
    FE_TASK = 'FE_TASK'
    MODEL_VERSION = 'MODEL_VERSION'


class Type3(Enum):
    IMPORT = 'IMPORT'
    TRAINING = 'TRAINING'
    EVALUATION = 'EVALUATION'
    DEPLOYMENT = 'DEPLOYMENT'
    RETIREMENT = 'RETIREMENT'
    APPROVAL = 'APPROVAL'
    REJECTION = 'REJECTION'
    BATCH_PREDICTION = 'BATCH_PREDICTION'
    COMPUTE_STATISTICS = 'COMPUTE_STATISTICS'
    RUN = 'RUN'
    BATCH_EXECUTION = 'BATCH_EXECUTION'
    COMPUTE_FEATURE_METADATA = 'COMPUTE_FEATURE_METADATA'


class UserAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class UserAttributeRequestBody(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class UserAttributeResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    id: Optional[UUID] = None
    name: str = Field(..., max_length=256, min_length=0)
    ownerId: Optional[str] = None
    projectId: Optional[UUID] = None
    value: Dict[str, Dict[str, Any]]


class UserInfo(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    email: Optional[str] = None
    family_name: Optional[str] = None
    given_name: Optional[str] = None
    groups: Optional[List[str]] = None
    preferred_username: Optional[str] = None
    roles: Optional[List[str]] = None
    username: Optional[str] = None


class UserProfile(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    createdAt: Optional[datetime] = None
    guid: Optional[UUID] = None
    metadata: UserProfileMetadata
    ownerId: Optional[str] = None


class UserProfileMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allow_analytics: Optional[StrictBool] = None
    dataset_loading_completed: Optional[StrictBool] = None
    dataset_loading_running: Optional[StrictBool] = None
    dateFormat: Optional[str] = Field(None, max_length=128, min_length=0)
    eula_accepted: Optional[StrictBool] = None
    hours24: Optional[StrictBool] = None
    language: Optional[str] = Field(None, max_length=24, min_length=0)
    openHelpDefault: Optional[StrictBool] = None
    timeFormat: Optional[str] = Field(None, max_length=128, min_length=0)
    timezone: Optional[str] = Field(None, max_length=128, min_length=0)


class Variable(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    dataType: Optional[str] = Field(None, pattern='integer|float|string|other')
    name: str
    type: Optional[str] = Field(None, pattern='feature|target|entity')


class VariableStatisticsQuery(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    database: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    datasetConnectionId: UUID
    table: str = Field(..., max_length=128, min_length=0, pattern='[0-9a-zA-Z$#_]+')
    variables: List[str]


class CustomModelModelMonitoring(ModelMonitoring):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    evaluationEnabled: StrictBool


class DatasetCatalogMetadata(DatasetMetadata):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entityAndTargets: Component
    features: Component


class DatasetTemplateCatalogMetadata(DatasetTemplateMetadata):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entityAndTargets: Component
    features: Component
    predictions: Prediction
