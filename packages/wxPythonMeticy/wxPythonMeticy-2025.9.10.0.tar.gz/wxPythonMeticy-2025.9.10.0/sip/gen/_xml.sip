//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License

%Module( name=wx._xml,
         keyword_arguments="All",
         use_argument_names=True,
         all_raise_py_exception=True,
         language="C++")
{
    %AutoPyName(remove_leading="wx")
};

%Copying
    Copyright: (c) 2020 by Total Control Software
    License:   wxWindows License
%End

%DefaultDocstringFormat(name="deindented")

%Extract(id=pycode_xml, order=5)
# This file is generated by wxPython's SIP generator.  Do not edit by hand.
#
# Copyright: (c) 2020 by Total Control Software
# License:   wxWindows License

"""
Some simple XML classes for use with XRC.

For more advanced XML needs it would be better to use one of the XML packages
provided by Python.
"""

from ._xml import *

%End

//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wxPython/wxpy_api.h>
%End

%Import _core.sip


//---------------------------------------------------------------------------

const int wxXML_NO_INDENTATION;
enum wxXmlNodeType
{
    wxXML_ELEMENT_NODE,
    wxXML_ATTRIBUTE_NODE,
    wxXML_TEXT_NODE,
    wxXML_CDATA_SECTION_NODE,
    wxXML_ENTITY_REF_NODE,
    wxXML_ENTITY_NODE,
    wxXML_PI_NODE,
    wxXML_COMMENT_NODE,
    wxXML_DOCUMENT_NODE,
    wxXML_DOCUMENT_TYPE_NODE,
    wxXML_DOCUMENT_FRAG_NODE,
    wxXML_NOTATION_NODE,
    wxXML_HTML_DOCUMENT_NODE
};

enum wxXmlDocumentLoadFlag
{
    wxXMLDOC_NONE,
    wxXMLDOC_KEEP_WHITESPACE_NODES
};

class wxXmlNode
{
    %Docstring
        XmlNode(parent, type, name, content='', attrs=None, next=None, lineNo=-1) -> None
        XmlNode(type, name, content='', lineNo=-1) -> None
        XmlNode(node) -> None
        
        Represents a node in an XML document.
    %End
    %TypeHeaderCode
        #include <wx/xml/xml.h>
    %End

public:
    wxXmlNode(
        wxXmlNode * parent   /TransferThis/,
        wxXmlNodeType type,
        const wxString & name,
        const wxString & content = wxEmptyString,
        wxXmlAttribute * attrs = NULL,
        wxXmlNode * next = NULL,
        int lineNo = -1
    );

    wxXmlNode(
        wxXmlNodeType type,
        const wxString & name,
        const wxString & content = wxEmptyString,
        int lineNo = -1
    );

    wxXmlNode(
        const wxXmlNode & node
    );

    virtual
    ~wxXmlNode();

    virtual
    void AddAttribute(
        const wxString & name,
        const wxString & value
    );
    %Docstring
        AddAttribute(name, value) -> None
        AddAttribute(attr) -> None
        
        Appends an attribute with given name and value to the list of
        attributes for this node.
    %End

    virtual
    void AddAttribute(
        wxXmlAttribute * attr   /Transfer/
    );

    virtual
    void AddChild(
        wxXmlNode * child   /Transfer/
    );
    %Docstring
        AddChild(child) -> None
        
        Adds node child as the last child of this node.
    %End

    virtual
    bool DeleteAttribute(
        const wxString & name
    );
    %Docstring
        DeleteAttribute(name) -> bool
        
        Removes the first attributes which has the given name from the list of
        attributes for this node.
    %End

    wxString GetAttribute(
        const wxString & attrName,
        const wxString & defaultVal = wxEmptyString
    ) const;
    %Docstring
        GetAttribute(attrName, defaultVal='') -> str
        
        Returns the value of the attribute named attrName if it does exist.
    %End

    wxXmlAttribute * GetAttributes() const;
    %Docstring
        GetAttributes() -> XmlAttribute
        
        Return a pointer to the first attribute of this node.
    %End

    wxXmlNode * GetChildren() const;
    %Docstring
        GetChildren() -> XmlNode
        
        Returns the first child of this node.
    %End

    const wxString & GetContent() const;
    %Docstring
        GetContent() -> str
        
        Returns the content of this node.
    %End

    int GetDepth(
        wxXmlNode * grandparent = NULL
    ) const;
    %Docstring
        GetDepth(grandparent=None) -> int
        
        Returns the number of nodes which separate this node from grandparent.
    %End

    bool GetNoConversion() const;
    %Docstring
        GetNoConversion() -> bool
        
        Returns a flag indicating whether encoding conversion is necessary
        when saving.
    %End

    int GetLineNumber() const;
    %Docstring
        GetLineNumber() -> int
        
        Returns line number of the node in the input XML file or -1 if it is
        unknown.
    %End

    const wxString & GetName() const;
    %Docstring
        GetName() -> str
        
        Returns the name of this node.
    %End

    wxXmlNode * GetNext() const;
    %Docstring
        GetNext() -> XmlNode
        
        Returns a pointer to the sibling of this node or NULL if there are no
        siblings.
    %End

    wxString GetNodeContent() const;
    %Docstring
        GetNodeContent() -> str
        
        Returns the content of the first child node of type wxXML_TEXT_NODE or
        wxXML_CDATA_SECTION_NODE.
    %End

    wxXmlNode * GetParent() const;
    %Docstring
        GetParent() -> XmlNode
        
        Returns a pointer to the parent of this node or NULL if this node has
        no parent.
    %End

    wxXmlNodeType GetType() const;
    %Docstring
        GetType() -> XmlNodeType
        
        Returns the type of this node.
    %End

    bool HasAttribute(
        const wxString & attrName
    ) const;
    %Docstring
        HasAttribute(attrName) -> bool
        
        Returns true if this node has a attribute named attrName.
    %End

    virtual
    bool InsertChild(
        wxXmlNode * child   /Transfer/,
        wxXmlNode * followingNode
    );
    %Docstring
        InsertChild(child, followingNode) -> bool
        
        Inserts the child node immediately before followingNode in the
        children list.
    %End

    virtual
    bool InsertChildAfter(
        wxXmlNode * child   /Transfer/,
        wxXmlNode * precedingNode
    );
    %Docstring
        InsertChildAfter(child, precedingNode) -> bool
        
        Inserts the child node immediately after precedingNode in the children
        list.
    %End

    bool IsWhitespaceOnly() const;
    %Docstring
        IsWhitespaceOnly() -> bool
        
        Returns true if the content of this node is a string containing only
        whitespaces (spaces, tabs, new lines, etc).
    %End

    virtual
    bool RemoveChild(
        wxXmlNode * child   /TransferBack/
    );
    %Docstring
        RemoveChild(child) -> bool
        
        Removes the given node from the children list.
    %End

    void SetContent(
        const wxString & con
    );
    %Docstring
        SetContent(con) -> None
        
        Sets the content of this node.
    %End

    void SetName(
        const wxString & name
    );
    %Docstring
        SetName(name) -> None
        
        Sets the name of this node.
    %End

    void SetNext(
        wxXmlNode * next
    );
    %Docstring
        SetNext(next) -> None
        
        Sets as sibling the given node.
    %End

    void SetNoConversion(
        bool noconversion
    );
    %Docstring
        SetNoConversion(noconversion) -> None
        
        Sets a flag to indicate whether encoding conversion is necessary when
        saving.
    %End

    void SetParent(
        wxXmlNode * parent
    );
    %Docstring
        SetParent(parent) -> None
        
        Sets as parent the given node.
    %End

    void SetType(
        wxXmlNodeType type
    );
    %Docstring
        SetType(type) -> None
        
        Sets the type of this node.
    %End

    public:


    %Property(name=Attributes, get=GetAttributes)
    %Property(name=Children, get=GetChildren)
    %Property(name=Content, get=GetContent, set=SetContent)
    %Property(name=Depth, get=GetDepth)
    %Property(name=LineNumber, get=GetLineNumber)
    %Property(name=Name, get=GetName, set=SetName)
    %Property(name=Next, get=GetNext, set=SetNext)
    %Property(name=NoConversion, get=GetNoConversion, set=SetNoConversion)
    %Property(name=NodeContent, get=GetNodeContent)
    %Property(name=Parent, get=GetParent, set=SetParent)
    %Property(name=Type, get=GetType, set=SetType)
};  // end of class wxXmlNode


class wxXmlAttribute
{
    %Docstring
        XmlAttribute() -> None
        XmlAttribute(name, value, next=None) -> None
        
        Represents a node attribute.
    %End
    %TypeHeaderCode
        #include <wx/xml/xml.h>
    %End

public:
    wxXmlAttribute();

    wxXmlAttribute(
        const wxString & name,
        const wxString & value,
        wxXmlAttribute * next = NULL
    );

    virtual
    ~wxXmlAttribute();

    wxString GetName() const;
    %Docstring
        GetName() -> str
        
        Returns the name of this attribute.
    %End

    wxXmlAttribute * GetNext() const;
    %Docstring
        GetNext() -> XmlAttribute
        
        Returns the sibling of this attribute or NULL if there are no
        siblings.
    %End

    wxString GetValue() const;
    %Docstring
        GetValue() -> str
        
        Returns the value of this attribute.
    %End

    void SetName(
        const wxString & name
    );
    %Docstring
        SetName(name) -> None
        
        Sets the name of this attribute.
    %End

    void SetNext(
        wxXmlAttribute * next
    );
    %Docstring
        SetNext(next) -> None
        
        Sets the sibling of this attribute.
    %End

    void SetValue(
        const wxString & value
    );
    %Docstring
        SetValue(value) -> None
        
        Sets the value of this attribute.
    %End

    public:


    %Property(name=Name, get=GetName, set=SetName)
    %Property(name=Next, get=GetNext, set=SetNext)
    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxXmlAttribute


class wxXmlDocument : wxObject
{
    %Docstring
        XmlDocument() -> None
        XmlDocument(doc) -> None
        XmlDocument(filename, encoding="UTF-8") -> None
        XmlDocument(stream, encoding="UTF-8") -> None
        
        This class holds XML data/document as parsed by XML parser in the root
        node.
    %End
    %TypeHeaderCode
        #include <wx/xml/xml.h>
    %End

public:
    wxXmlDocument();

    wxXmlDocument(
        const wxXmlDocument & doc
    );

    wxXmlDocument(
        const wxString & filename,
        const wxString & encoding = "UTF-8"
    );

    wxXmlDocument(
        wxInputStream & stream,
        const wxString & encoding = "UTF-8"
    );

    virtual
    ~wxXmlDocument();

    void AppendToProlog(
        wxXmlNode * node   /Transfer/
    );
    %Docstring
        AppendToProlog(node) -> None
        
        Appends a Process Instruction or Comment node to the document
        prologue.
    %End

    wxXmlNode * DetachDocumentNode()   /TransferBack/;
    %Docstring
        DetachDocumentNode() -> XmlNode
        
        Detaches the document node and returns it.
    %End

    wxXmlNode * DetachRoot()   /TransferBack/;
    %Docstring
        DetachRoot() -> XmlNode
        
        Detaches the root entity node and returns it.
    %End

    const wxString & GetFileEncoding() const;
    %Docstring
        GetFileEncoding() -> str
        
        Returns encoding of document (may be empty).
    %End

    const wxXmlDoctype & GetDoctype() const;
    %Docstring
        GetDoctype() -> XmlDoctype
        
        Returns the DOCTYPE declaration data for the document.
    %End

    wxTextFileType GetFileType() const;
    %Docstring
        GetFileType() -> TextFileType
        
        Returns the output line ending format used for documents.
    %End

    wxString GetEOL() const;
    %Docstring
        GetEOL() -> str
        
        Returns the output line ending string used for documents.
    %End

    wxXmlNode * GetDocumentNode() const;
    %Docstring
        GetDocumentNode() -> XmlNode
        
        Returns the document node of the document.
    %End

    wxXmlNode * GetRoot() const;
    %Docstring
        GetRoot() -> XmlNode
        
        Returns the root element node of the document.
    %End

    const wxString & GetVersion() const;
    %Docstring
        GetVersion() -> str
        
        Returns the version of document.
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if the document has been loaded successfully.
    %End

    virtual
    bool Load(
        const wxString & filename,
        const wxString & encoding = "UTF-8",
        int flags = wxXMLDOC_NONE
    );
    %Docstring
        Load(filename, encoding="UTF-8", flags=XMLDOC_NONE) -> bool
        Load(stream, encoding="UTF-8", flags=XMLDOC_NONE) -> bool
        
        Parses filename as an xml document and loads its data.
    %End

    virtual
    bool Load(
        wxInputStream & stream,
        const wxString & encoding = "UTF-8",
        int flags = wxXMLDOC_NONE
    );

    virtual
    bool Save(
        const wxString & filename,
        int indentstep = 2
    ) const;
    %Docstring
        Save(filename, indentstep=2) -> bool
        Save(stream, indentstep=2) -> bool
        
        Saves XML tree creating a file named with given string.
    %End

    virtual
    bool Save(
        wxOutputStream & stream,
        int indentstep = 2
    ) const;

    void SetDocumentNode(
        wxXmlNode * node   /Transfer/
    );
    %Docstring
        SetDocumentNode(node) -> None
        
        Sets the document node of this document.
    %End

    void SetFileEncoding(
        const wxString & encoding
    );
    %Docstring
        SetFileEncoding(encoding) -> None
        
        Sets the encoding of the file which will be used to save the document.
    %End

    void SetDoctype(
        const wxXmlDoctype & doctype
    );
    %Docstring
        SetDoctype(doctype) -> None
        
        Sets the data which will appear in the DOCTYPE declaration when the
        document is saved.
    %End

    void SetFileType(
        wxTextFileType fileType
    );
    %Docstring
        SetFileType(fileType) -> None
        
        Sets the output line ending formats when the document is saved.
    %End

    void SetRoot(
        wxXmlNode * node   /Transfer/
    );
    %Docstring
        SetRoot(node) -> None
        
        Sets the root element node of this document.
    %End

    void SetVersion(
        const wxString & version
    );
    %Docstring
        SetVersion(version) -> None
        
        Sets the version of the XML file which will be used to save the
        document.
    %End

    static
    wxVersionInfo GetLibraryVersionInfo();
    %Docstring
        GetLibraryVersionInfo() -> VersionInfo
        
        Get expat library version information.
    %End

    public:


    %Property(name=Doctype, get=GetDoctype, set=SetDoctype)
    %Property(name=DocumentNode, get=GetDocumentNode, set=SetDocumentNode)
    %Property(name=EOL, get=GetEOL)
    %Property(name=FileEncoding, get=GetFileEncoding, set=SetFileEncoding)
    %Property(name=FileType, get=GetFileType, set=SetFileType)
    %Property(name=Root, get=GetRoot, set=SetRoot)
    %Property(name=Version, get=GetVersion, set=SetVersion)
};  // end of class wxXmlDocument


class wxXmlDoctype
{
    %Docstring
        XmlDoctype(rootName="", systemId="", publicId="") -> None
        
        Represents a DOCTYPE Declaration.
    %End
    %TypeHeaderCode
        #include <wx/xml/xml.h>
    %End

public:
    wxXmlDoctype(
        const wxString & rootName = wxString(),
        const wxString & systemId = wxString(),
        const wxString & publicId = wxString()
    );

    void Clear();
    %Docstring
        Clear() -> None
        
        Removes all the DOCTYPE values.
    %End

    const wxString & GetRootName() const;
    %Docstring
        GetRootName() -> str
        
        Returns the root name of the document.
    %End

    const wxString & GetSystemId() const;
    %Docstring
        GetSystemId() -> str
        
        Returns the system id of the document.
    %End

    const wxString & GetPublicId() const;
    %Docstring
        GetPublicId() -> str
        
        Returns the public id of the document.
    %End

    wxString GetFullString() const;
    %Docstring
        GetFullString() -> str
        
        Returns the formatted DOCTYPE contents.
    %End

    bool IsValid() const;
    %Docstring
        IsValid() -> bool
        
        Returns true if the contents can produce a valid DOCTYPE string.
    %End

    public:


    %Property(name=FullString, get=GetFullString)
    %Property(name=PublicId, get=GetPublicId)
    %Property(name=RootName, get=GetRootName)
    %Property(name=SystemId, get=GetSystemId)
};  // end of class wxXmlDoctype


%Extract(id=pycode_xml, order=10)
import wx

%End

%Extract(id=pycode_xml)
XmlProperty = wx.deprecated(XmlAttribute, 'Use XmlProperty instead.')

%End


//---------------------------------------------------------------------------

