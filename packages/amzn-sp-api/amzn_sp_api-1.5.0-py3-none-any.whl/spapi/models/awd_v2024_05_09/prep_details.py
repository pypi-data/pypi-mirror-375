# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PrepDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label_owner': 'LabelOwner',
        'prep_category': 'PrepCategory',
        'prep_instructions': 'List[PrepInstruction]',
        'prep_owner': 'PrepOwner',
    }

    attribute_map = {
        'label_owner': 'labelOwner',
        'prep_category': 'prepCategory',
        'prep_instructions': 'prepInstructions',
        'prep_owner': 'prepOwner',
    }

    def __init__(self, label_owner=None, prep_category=None, prep_instructions=None, prep_owner=None, _configuration=None):  # noqa: E501
        """PrepDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._label_owner = None
        self._prep_category = None
        self._prep_instructions = None
        self._prep_owner = None
        self.discriminator = None

        if label_owner is not None:
            self.label_owner = label_owner
        if prep_category is not None:
            self.prep_category = prep_category
        if prep_instructions is not None:
            self.prep_instructions = prep_instructions
        if prep_owner is not None:
            self.prep_owner = prep_owner

    @property
    def label_owner(self):
        """Gets the label_owner of this PrepDetails.  # noqa: E501


        :return: The label_owner of this PrepDetails.  # noqa: E501
        :rtype: LabelOwner
        """
        return self._label_owner

    @label_owner.setter
    def label_owner(self, label_owner):
        """Sets the label_owner of this PrepDetails.


        :param label_owner: The label_owner of this PrepDetails.  # noqa: E501
        :type: LabelOwner
        """

        self._label_owner = label_owner

    @property
    def prep_category(self):
        """Gets the prep_category of this PrepDetails.  # noqa: E501


        :return: The prep_category of this PrepDetails.  # noqa: E501
        :rtype: PrepCategory
        """
        return self._prep_category

    @prep_category.setter
    def prep_category(self, prep_category):
        """Sets the prep_category of this PrepDetails.


        :param prep_category: The prep_category of this PrepDetails.  # noqa: E501
        :type: PrepCategory
        """

        self._prep_category = prep_category

    @property
    def prep_instructions(self):
        """Gets the prep_instructions of this PrepDetails.  # noqa: E501

        Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the `prepCategory`, and if you attempt to pass a value for this field, the system will ignore it.  # noqa: E501

        :return: The prep_instructions of this PrepDetails.  # noqa: E501
        :rtype: List[PrepInstruction]
        """
        return self._prep_instructions

    @prep_instructions.setter
    def prep_instructions(self, prep_instructions):
        """Sets the prep_instructions of this PrepDetails.

        Contains information about the preparation of the inbound products. The system auto-generates this field with the use of the `prepCategory`, and if you attempt to pass a value for this field, the system will ignore it.  # noqa: E501

        :param prep_instructions: The prep_instructions of this PrepDetails.  # noqa: E501
        :type: List[PrepInstruction]
        """

        self._prep_instructions = prep_instructions

    @property
    def prep_owner(self):
        """Gets the prep_owner of this PrepDetails.  # noqa: E501


        :return: The prep_owner of this PrepDetails.  # noqa: E501
        :rtype: PrepOwner
        """
        return self._prep_owner

    @prep_owner.setter
    def prep_owner(self, prep_owner):
        """Sets the prep_owner of this PrepDetails.


        :param prep_owner: The prep_owner of this PrepDetails.  # noqa: E501
        :type: PrepOwner
        """

        self._prep_owner = prep_owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrepDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrepDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrepDetails):
            return True

        return self.to_dict() != other.to_dict()
