Metadata-Version: 2.4
Name: fluxgraph
Version: 0.0.1
Summary: A lightweight Python framework for building, orchestrating, and deploying Agentic AI systems (MVP).
Home-page: https://github.com/ihtesham-jahangir/fluxgraph
Author: ihtesham-jahangir
Author-email: ceo@alphanetwork.com.pk
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastapi<1.0.0,>=0.95.0
Requires-Dist: uvicorn[standard]<1.0.0,>=0.21.0
Requires-Dist: langgraph<1.0.0,>=0.0.1
Requires-Dist: pydantic<3.0.0,>=2.0.0
Requires-Dist: openai<2.0.0,>=1.0.0
Requires-Dist: anthropic<1.0.0,>=0.20.0
Requires-Dist: httpx<1.0.0,>=0.25.0
Requires-Dist: redis<5.0.0,>=4.5.0
Requires-Dist: celery<6.0.0,>=5.3.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary


# FluxGraph

FluxGraph is a lightweight, modular framework for building agentic AI workflows with full control and flexibility.  
It integrates **FastAPI, Celery, Redis**, and supports **direct LLM API calls** with extensible tooling.

---

## üöÄ Features
- **Full Control**: Direct API calls without heavy abstractions.  
- **Flexible Orchestration**: Works with LangGraph, AutoGen, or custom FastAPI workflows.  
- **Scalable**: Redis + Celery support for distributed workloads.  
- **Tooling Layer**: Extensible Python functions for DB queries, APIs, and custom tasks.  
- **Multi-LLM Support**: OpenAI, Anthropic, Ollama, or local LLMs.  
- **Persistence & Memory**: Optional Redis, PostgreSQL, or Vector DB integration.  
- **Feedback Loop (RLHF-ready)**: Collects user ratings for model fine-tuning.

---

## üèóÔ∏è Architecture
- **Client/User** ‚Üí FastAPI layer  
- **Agent Registry** ‚Üí Stores and manages agents  
- **Flux Orchestrator** ‚Üí Executes agent flows  
- **Adapters** ‚Üí LangGraph / Custom Orchestration  
- **Tooling Layer** ‚Üí Extensible Python functions  
- **LLM Providers** ‚Üí OpenAI, Anthropic, Ollama, Local models  
- **Persistence Layer** ‚Üí Redis, PostgreSQL, Vector DB  
- **Feedback Loop** ‚Üí RLHF integration for continuous improvement  

---

## üì¶ Installation
```bash
git clone https://github.com/ihtesham-jahangir/fluxgraph.git
cd fluxgraph
pip install -r requirements.txt
```

---

## ‚ö° Quick Start
```python
from fluxgraph import Agent, Orchestrator

# Define an agent
class MyAgent(Agent):
    def run(self, query: str):
        return f"Processed: {query}"

# Register agent
orchestrator = Orchestrator()
orchestrator.register("my_agent", MyAgent())

# Execute
response = orchestrator.run("my_agent", "Hello FluxGraph!")
print(response)
```

---

## üìä Roadmap
- [x] MVP with FastAPI + Orchestrator  
- [x] Tooling Layer (Python functions)  
- [ ] RLHF feedback integration  
- [ ] Auto-scaling with Docker + Kubernetes  
- [ ] GUI dashboard for monitoring  

---

## ü§ù Contributing
We welcome contributions! Please fork the repo, open issues, or submit PRs.

---

## üìú License
MIT License ¬© 2025 FluxGraph Team
