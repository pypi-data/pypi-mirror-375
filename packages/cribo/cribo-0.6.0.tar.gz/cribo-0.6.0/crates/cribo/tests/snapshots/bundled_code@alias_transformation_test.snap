---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/alias_transformation_test/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
utils_data_processor = _cribo.types.SimpleNamespace(__name__='utils.data_processor')
utils = _cribo.types.SimpleNamespace(__name__='utils', __initializing__=False, __initialized__=False)
utils.data_processor = utils_data_processor
"""\nData processing utilities module.\nUsed to test from-import alias transformations.\n"""
def process_data(data_list):
    """Process a list of data by doubling each element."""
    return [x * 2 for x in data_list]
def format_output(processed_data):
    """Format processed data as a comma-separated string."""
    return ", ".join(map(str, processed_data))
utils_data_processor.format_output = format_output
utils_data_processor.process_data = process_data
utils_config_manager = _cribo.types.SimpleNamespace(__name__='utils.config_manager')
utils.config_manager = utils_config_manager
"""\nConfiguration management utilities.\nUsed to test from-import alias transformations.\n"""
def load_config(config_file):
    """Load configuration from a file (simulated)."""
    return {"file": config_file, "loaded": True, "settings": {"debug": False}}
utils_config_manager.load_config = load_config
utils_helpers = _cribo.types.SimpleNamespace(__name__='utils.helpers')
utils.helpers = utils_helpers
"""\nHelper utilities module.\nUsed to test mixed from-import scenarios (some aliased, some not).\n"""
def helper_func(input_str):
    """A helper function that processes a string."""
    return f"Processed: {input_str.upper()}"
def debug_print(message):
    """Debug printing function (will be imported with alias)."""
    print(f"[DEBUG] {message}")
utils_helpers.debug_print = debug_print
utils_helpers.helper_func = helper_func
"""\nTest case for alias transformation functionality.\n\nThis script demonstrates the issue where import aliases are not being transformed properly.\nWithout the transformer logic, the bundled output will contain both:\n1. Alias assignments (generated by generate_alias_assignments)\n2. Original import statements (that should be removed/transformed)\n\nThis creates redundant code and potentially confusing output.\n"""
j = _cribo.json
operating_system = _cribo.os
system_info = _cribo.sys
process_a = utils_data_processor.process_data
format_a = utils_data_processor.format_output
config_a = utils_config_manager.load_config
debug_a = utils_helpers.debug_print
def main():
    """Main function that uses the imported modules with their aliases."""
    data = _cribo.json.dumps({"test": "data"})
    print(f"JSON data: {data}")
    dir_hash = _cribo.hashlib.md5(b"test_directory").hexdigest()[:8]
    print(f"Current directory: /test/deterministic/{dir_hash}")
    env_var = _cribo.os.environ.get("CRIBO_TEST", "default_value")
    print(f"CRIBO_TEST environment: {env_var}")
    python_version_info = _cribo.sys.version_info
    print(f"Python version: {python_version_info.major}.{python_version_info.minor}")
    processed = process_a([1, 2, 3, 4, 5])
    formatted = format_a(processed)
    print(f"Processed and formatted: {formatted}")
    config = config_a("settings.json")
    print(f"Loaded config: {config}")
    result = _cribo.math.sqrt(16)
    deterministic_num = int(_cribo.hashlib.md5(b"alias_transformation_test").hexdigest()[:2], 16)
    print(f"Math result: {result}, Deterministic: {deterministic_num}")
    helper_result = helper_func("test")
    debug_a(f"Helper result: {helper_result}")
if __name__ == "__main__":
    main()
helpers = utils.helpers
config_manager = utils.config_manager
data_processor = utils.data_processor
