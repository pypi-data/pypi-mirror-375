# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .task_status import TaskStatus


class TaskItemView(UncheckedBaseModel):
    """
    View model for representing a task with its execution details
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the task
    """

    session_id: typing_extensions.Annotated[str, FieldMetadata(alias="sessionId")] = pydantic.Field()
    """
    ID of the session this task belongs to
    """

    llm: str = pydantic.Field()
    """
    The LLM model used for this task represented as a string
    """

    task: str = pydantic.Field()
    """
    The task prompt/instruction given to the agent
    """

    status: TaskStatus
    started_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="startedAt")] = pydantic.Field()
    """
    Naive UTC timestamp when the task was started
    """

    finished_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="finishedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Naive UTC timestamp when the task completed (None if still running)
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Optional additional metadata associated with the task set by the user
    """

    output: typing.Optional[str] = pydantic.Field(default=None)
    """
    Final output/result of the task
    """

    browser_use_version: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="browserUseVersion")] = (
        pydantic.Field(default=None)
    )
    """
    Version of browser-use used for this task (older tasks may not have this set)
    """

    is_success: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isSuccess")] = pydantic.Field(
        default=None
    )
    """
    Whether the task was successful (self-reported by the agent)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
