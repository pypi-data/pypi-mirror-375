# coding: utf-8

"""
    SwiftyRX API

    API for the SwiftyRX Backend 

    The version of the OpenAPI document: 0.1.DEV-0
    Contact: paul.tindall@rxfoundry.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PatientAddressData(BaseModel):
    """
    PatientAddressData
    """ # noqa: E501
    address_line_one: Optional[StrictStr] = Field(default=None, description="The first line of the address")
    address_line_two: Optional[StrictStr] = Field(default=None, description="The second line of the address")
    city: Optional[StrictStr] = Field(default=None, description="The city")
    state_province: Optional[StrictStr] = Field(default=None, description="The state or province using the two alphabetic character abbreviation (e.g. TX, CA, NY)")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code in 5 digit format")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code using the two alphabetic character abbreviation (e.g. US, CA, GB)")
    __properties: ClassVar[List[str]] = ["address_line_one", "address_line_two", "city", "state_province", "postal_code", "country_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatientAddressData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatientAddressData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address_line_one": obj.get("address_line_one"),
            "address_line_two": obj.get("address_line_two"),
            "city": obj.get("city"),
            "state_province": obj.get("state_province"),
            "postal_code": obj.get("postal_code"),
            "country_code": obj.get("country_code")
        })
        return _obj


