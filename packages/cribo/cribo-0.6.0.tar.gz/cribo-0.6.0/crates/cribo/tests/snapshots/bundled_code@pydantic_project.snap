---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pydantic_project/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
schemas_user = _cribo.types.SimpleNamespace(__name__='schemas.user', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_f275a8_schemas_user(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """User schema definitions using Pydantic."""
    from pydantic import BaseModel, EmailStr, Field
    Optional = _cribo.typing.Optional
    self.Optional = Optional

    class UserSchema(BaseModel):
        """User model with Pydantic validation."""
        name: str = Field(..., min_length=1, max_length=100, description="User's full name")
        email: EmailStr = Field(..., description="User's email address")
        age: int = Field(..., ge=0, le=150, description="User's age")
        is_active: bool = Field(default=True, description="Whether the user is active")
        bio: _cribo.typing.Optional[str] = Field(default=None, max_length=500, description="User's biography")

        class Config:
            """Pydantic configuration."""
            json_encoders = {}
            json_schema_extra = {"example": {"name": "John Doe", "email": "john@example.com", "age": 30, "is_active": True, "bio": "Software developer"}}
    UserSchema.__module__ = 'schemas.user'
    self.UserSchema = UserSchema

    class CreateUserRequest(BaseModel):
        """Request model for creating a new user."""
        name: str = Field(..., min_length=1, max_length=100)
        email: EmailStr
        age: _cribo.typing.Optional[int] = Field(default=None, ge=0, le=150)
        bio: _cribo.typing.Optional[str] = Field(default=None, max_length=500)
    CreateUserRequest.__module__ = 'schemas.user'
    self.CreateUserRequest = CreateUserRequest

    class UserResponse(BaseModel):
        """Response model for user data."""
        id: int
        name: str
        email: str
        age: int
        is_active: bool
        bio: _cribo.typing.Optional[str] = None
    UserResponse.__module__ = 'schemas.user'
    self.UserResponse = UserResponse
    self.Optional = _cribo.typing.Optional
    self.__initialized__ = True
    self.__initializing__ = False
    return self
schemas_user.__init__ = _cribo_init___cribo_f275a8_schemas_user
schemas = _cribo.types.SimpleNamespace(__name__='schemas', __initializing__=False, __initialized__=False)
schemas.user = schemas_user
"""Schemas package initialization."""
schemas_user = schemas_user.__init__(schemas_user)
utils_validation = _cribo.types.SimpleNamespace(__name__='utils.validation')
utils = _cribo.types.SimpleNamespace(__name__='utils', __initializing__=False, __initialized__=False)
utils.validation = utils_validation
"""Validation utilities."""
def validate_email(email: str) -> bool:
    """Simple email validation."""
    pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    return bool(_cribo.re.match(pattern, email))
def sanitize_input(text: str) -> str:
    """Sanitize input text."""
    dangerous_chars = ["<", ">", '"', "'", "&"]
    sanitized = text
    for char in dangerous_chars:
        sanitized = sanitized.replace(char, "")
    return sanitized.strip()
def validate_age(age: _cribo.typing.Union[int, str]) -> bool:
    """Validate age value."""
    try:
        age_int = int(age)
        return 0 <= age_int <= 150
    except (ValueError, TypeError):
        return False
utils_validation.sanitize_input = sanitize_input
utils_validation.validate_age = validate_age
utils_validation.validate_email = validate_email
"""Utils package initialization."""
"""Pydantic test project entry point."""
from pydantic import ValidationError
schemas_user = _cribo_init___cribo_f275a8_schemas_user(schemas_user)
UserSchema = schemas.user.UserSchema
CreateUserRequest = schemas.user.CreateUserRequest
def main():
    """Main function demonstrating Pydantic usage."""
    user_data = {"name": "John Doe", "email": "john@example.com", "age": 25}
    try:
        user = UserSchema(**user_data)
        print(f"Created user: {user}")
        if validate_email(user.email):
            print("Email validation passed")
        user_json = user.model_dump_json()
        print(f"User JSON: {user_json}")
        request = CreateUserRequest(name="Jane Doe", email="jane@example.com")
        print(f"Create request: {request}")
    except ValidationError as e:
        print(f"Validation error: {e}")
if __name__ == "__main__":
    main()
validation = utils.validation
