from teradataml.analytics.sqle.DecisionTreePredict import DecisionTreePredict
from teradataml.analytics.sqle.NaiveBayesPredict import NaiveBayesPredict

from teradataml.analytics.meta_class import _AnalyticFunction
from teradataml.analytics.meta_class import _common_init, _common_dir
from teradataml.analytics.json_parser.utils import _get_associated_parent_classes

_sqle_functions = [
                  'TDAPIVertexAI',
                  'TDAPISagemaker',
                  'TDAPIAzureML',
                  'AIAnalyzeSentiment',
                  'AITextTranslate',
                  'AIDetectLanguage',
                  'AITextClassifier',
                  'AIAskLLM',
                  'AITextEmbeddings',
                  'AITextSummarize',
                  'AIExtractKeyPhrases',
                  'AIRecognizePIIEntities',
                  'AIMaskPII',
                  'AIRecognizeEntities',
                  'ANOVA',
                  'Antiselect',
                  'Attribution',
                  'BincodeFit',
                  'BincodeTransform',
                  'CategoricalSummary',
                  'CFilter',
                  'ChiSq',
                  'ClassificationEvaluator',
                  'ColumnSummary',
                  'ColumnTransformer',
                  'ConvertTo',
                  'DecisionForest',
                  'DecisionForestPredict',
                  'FillRowId',
                  'Fit',
                  'FTest',
                  'GetFutileColumns',
                  'GetRowsWithMissingValues',
                  'GetRowsWithoutMissingValues',
                  'GLM',
                  'GLMPredict',
                  'GLMPerSegment',
                  'GLMPredictPerSegment',
                  'Histogram',
                  'KMeans',
                  'KMeansPredict',
                  'KNN',
                  'MovingAverage',
                  'NaiveBayes',
                  'TDNaiveBayesPredict',
                  'NaiveBayesTextClassifierPredict',
                  'NaiveBayesTextClassifierTrainer',
                  'NGramSplitter',
                  'NonLinearCombineFit',
                  'NonLinearCombineTransform',
                  'NPath',
                  'NumApply',
                  'OneClassSVM',
                  'OneClassSVMPredict',
                  'OneHotEncodingFit',
                  'OneHotEncodingTransform',
                  'OrdinalEncodingFit',
                  'OrdinalEncodingTransform',
                  'OutlierFilterFit',
                  'OutlierFilterTransform',
                  'Pack',
                  'Pivoting',
                  'PolynomialFeaturesFit',
                  'PolynomialFeaturesTransform',
                  'QQNorm',
                  'RandomProjectionFit',
                  'RandomProjectionMinComponents',
                  'RandomProjectionTransform',
                  'RegressionEvaluator',
                  'ROC',
                  'RoundColumns',
                  'RowNormalizeFit',
                  'RowNormalizeTransform',
                  'ScaleFit',
                  'ScaleTransform',
                  'SentimentExtractor',
                  'Sessionize',
                  'Silhouette',
                  'SimpleImputeFit',
                  'SimpleImputeTransform',
                  'SMOTE',
                  'StrApply',
                  'StringSimilarity',
                  'SVM',
                  'SVMPredict',
                  'SVMSparsePredict',
                  'Shap',
                  'TDGLMPredict',
                  'TDDecisionForestPredict',
                  'TargetEncodingFit',
                  'TargetEncodingTransform',
                  'TextParser',
                  'TFIDF',
                  'Transform',
                  'TrainTestSplit',
                  'UnivariateStatistics',
                  'Unpack',
                  'Unpivoting',
                  'VectorDistance',
                  'WhichMax',
                  'WhichMin',
                  'WordEmbeddings',
                  'XGBoost',
                  'XGBoostPredict',
                  'ZTest',
                  'HNSW',
                  'HNSWPredict',
                  'HNSWSummary',
                  'TextMorph',
                  'NERExtractor',
                  'Apriori'
                  ]

for func in _sqle_functions:
    _c = (_AnalyticFunction, )
    for assoc_cl in _get_associated_parent_classes(func):
        _c = _c + (assoc_cl, )
    globals()[func] = type("{}".format(func), _c, {"__init__": lambda self, **kwargs: _common_init(self, 'sqle',
                                                              **kwargs), "__doc__": _AnalyticFunction.__doc__,
                                                   "__dir__": _common_dir})