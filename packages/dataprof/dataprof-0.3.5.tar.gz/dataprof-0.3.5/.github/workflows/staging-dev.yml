name: Staging Development Workflow

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]
  # Allow manual triggering
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick feedback for developers
  quick-check:
    name: Quick Development Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: staging-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          staging-${{ runner.os }}-cargo-

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy lints (core features)
      run: cargo clippy --lib -- -D warnings

    - name: Run Clippy lints (PostgreSQL features)
      run: cargo clippy --lib --features postgres -- -D warnings

    - name: Run Clippy lints (MySQL features)
      run: cargo clippy --lib --features mysql -- -D warnings

    - name: Run Clippy lints (SQLite features)
      run: cargo clippy --lib --features sqlite -- -D warnings

    - name: Check for common issues
      run: |
        echo "🔍 Checking for unsafe unwrap() calls..."
        UNWRAP_FILES=$(find src -name "*.rs" -exec grep -l "\.unwrap()" {} \; 2>/dev/null || true)
        if [ -n "$UNWRAP_FILES" ]; then
          echo "❌ Found unwrap() calls in:"
          echo "$UNWRAP_FILES"
          exit 1
        else
          echo "✅ No unsafe unwrap() calls found"
        fi

        echo "🔍 Checking for TODO/FIXME comments..."
        if grep -r -i "TODO\|FIXME" src/; then
          echo "⚠️  Found TODO/FIXME comments - consider addressing before merge"
        fi

        echo "✅ Code quality checks passed"

  # Simplified testing for staging
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quick-check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: staging-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev
        # Install DuckDB
        wget https://github.com/duckdb/duckdb/releases/download/v1.1.3/libduckdb-linux-amd64.zip
        unzip libduckdb-linux-amd64.zip
        sudo cp libduckdb.so /usr/local/lib/
        sudo cp duckdb.h /usr/local/include/
        sudo ldconfig

    - name: Run core tests
      run: cargo test --lib --verbose

    - name: Run database tests
      run: |
        cargo test --features postgres --lib --verbose
        cargo test --features sqlite --lib --verbose

  # Light performance check
  performance-check:
    name: Basic Performance Check
    runs-on: ubuntu-latest
    needs: test-suite
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Basic build test
      run: |
        echo "🚀 Quick build check..."
        cargo build --release

        echo "✅ Build completed successfully"

  # Final status check
  staging-ready:
    name: Staging Ready
    runs-on: ubuntu-latest
    needs: [quick-check, test-suite, performance-check]
    if: always()

    steps:
    - name: Check overall status
      run: |
        echo "📊 Staging Development Workflow Summary"
        echo "✅ Quick checks: ${{ needs.quick-check.result }}"
        echo "✅ Test suite: ${{ needs.test-suite.result }}"
        echo "⚡ Performance: ${{ needs.performance-check.result || 'skipped' }}"

        if [[ "${{ needs.quick-check.result }}" == "success" && "${{ needs.test-suite.result }}" == "success" ]]; then
          echo "🎉 Staging checks passed! Ready for development work."
        else
          echo "❌ Some checks failed. Please review before continuing development."
          exit 1
        fi
