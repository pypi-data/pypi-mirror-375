###############################
# Configuration for the project
###############################

[project]
name = 'easydiffraction'
dynamic = ['version'] # Use versioningit to manage the version
description = 'Diffraction data analysis'
authors = [{ name = 'EasyDiffraction contributors' }]
readme = 'README.md'
license = { file = 'LICENSE' }
classifiers = [
  'Intended Audience :: Science/Research',
  'Topic :: Scientific/Engineering',
  'License :: OSI Approved :: BSD License',
  'Operating System :: OS Independent',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: 3.13',
]
requires-python = '>=3.11,<3.14'
dependencies = [
  'colorama',       # Color terminal output
  'tabulate',       # Pretty-print tabular data for terminal output
  'asciichartpy',   # ASCII charts for terminal output
  'pooch',          # Data downloader
  'typer',          # Command-line interface creation
  'rich',           # Rich text and beautiful formatting in the terminal
  'varname',        # Variable name introspection
  'asteval',        # An expression evaluator for Python
  'scipy',          # Scientific computing library
  'sympy',          # Symbolic mathematics library
  'lmfit',          # Non-linear optimization and curve fitting
  'bumps',          # Non-linear optimization and curve fitting
  'dfo-ls',         # Non-linear optimization and curve fitting
  'gemmi',          # Crystallography library
  'cryspy',         # Calculations of diffraction patterns
  'diffpy.pdffit2', # Calculations of Pair Distribution Function (PDF), Python >=3.11,<3.14
  'diffpy.utils',   # Utilities for PDF calculations
]

[project.optional-dependencies]
dev = [
  'build',                   # Building the package
  'jinja2',                  # Templating
  'nbmake',                  # Building notebooks
  'nbstripout',              # Strip output from notebooks
  'nbqa',                    # Linting and formatting notebooks
  'pytest',                  # Testing
  'pytest-cov',              # Test coverage
  'pytest-xdist',            # Enable parallel testing
  'ruff',                    # Linting and formatting code
  'validate-pyproject[all]', # Validate pyproject.toml
  'versioningit',            # Automatic versioning from git tags
  'jupytext',                # Jupyter notebook text format support
  'jupyterquiz',             # Quizzes in Jupyter notebooks
]
docs = [
  'mkdocs',                          # Static site generator
  'mkdocs-material',                 # Documentation framework on top of MkDocs
  'mkdocs-autorefs<1.3.0',           # MkDocs: Auto-references support. 1.3.0 => DeprecationWarning: Setting a fallback anchor function is deprecated and ...
  'mkdocs-jupyter',                  # MkDocs: Jupyter notebook support
  'mkdocs-plugin-inline-svg',        # MkDocs: Inline SVG support
  'mkdocs-markdownextradata-plugin', # MkDocs: Markdown extra data support, such as global variables
  'mkdocstrings-python',             # MkDocs: Python docstring support
  'pyyaml',                          # YAML parser
]
visualization = [
  'darkdetect', # Detecting dark mode
  'pandas',     # Displaying tables in juptyer notebooks
  'plotly',     # Interactive plots
  'py3Dmol',    # Visualisation of crystal structures
]

[project.urls]
homepage = 'https://easydiffraction.org'
documentation = 'https://docs.easydiffraction.org/lib'
source = 'https://github.com/easyscience/diffraction-lib'
tracker = 'https://github.com/easyscience/diffraction-lib/issues'

############################
# Build system configuration
############################

# Build system 'hatch' -- Python project manager
# https://hatch.pypa.io/

# Versioning system 'versioningit' -- Versioning from git tags
# https://versioningit.readthedocs.io/

[build-system]
build-backend = 'hatchling.build'
requires = ['hatchling', 'versioningit']

#############################
# Configuration for hatchling
#############################

[tool.hatch.build.targets.wheel]
packages = ['src/easydiffraction']

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = 'versioningit' # Use versioningit to manage the version

################################
# Configuration for versioningit
################################

# Versioningit generates versions from git tags, so we don't need to
# either specify them statically in pyproject.toml or save them in the
# source code.

[tool.versioningit.format]
distance = '{base_version}+d{distance}'       # example: 0.5.8+d3, 1.2.3.post4+d2
dirty = '{base_version}'                      # example: 0.5.8, 1.2.3.post4
distance-dirty = '{base_version}+d{distance}' # example: as in distance

# Configure how versioningit detects versions from Git
# - 'match' ensures it only considers tags starting with 'v'
# - 'default-tag' is used as a fallback when no matching tag is found
[tool.versioningit.vcs]
method = 'git'
match = ['v*']
default-tag = 'v999.0.0'

########################
# Configuration for ruff
########################

# 'ruff' -- Python linter and code formatter
# https://docs.astral.sh/ruff/rules/

[tool.ruff]
exclude = ['tutorials-drafts']
indent-width = 4
line-length = 127

[tool.ruff.lint]
select = [
  'E',      # General PEP 8 style errors
  'E9',     # Runtime errors (e.g., syntax errors, undefined names)
  'F',      # Pyflakes-specific checks (e.g., unused variables, imports)
  'F63',    # Issues related to invalid escape sequences in strings
  'F7',     # Type-related errors (e.g., mismatched argument types, unsupported operations)
  'F82',    # Import-related errors (e.g., unresolved imports, reimported modules)
  'I',      # Import sorting issues (e.g., unsorted imports)
  'S',      # Security-related issues (e.g., use of insecure functions or libraries)
  'W',      # General PEP 8 warnings (e.g., lines too long, trailing whitespace)
  'TCH',    # Type checking issues (e.g., incompatible types, missing type annotations)
  'TID252', # Enforces absolute imports over relative imports
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = 'all'

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.per-file-ignores]
# allow asserts in test files
'*test_*.py' = ['S101']

#[tool.ruff.lint.pycodestyle]
#max-line-length = 88 # https://peps.python.org/pep-0008/#maximum-line-length
#max-doc-length = 72  # https://peps.python.org/pep-0008/#maximum-line-length

[tool.ruff.format]
docstring-code-format = true # Whether to format code snippets in docstrings
indent-style = 'space'       # PEP 8 recommends using spaces over tabs
line-ending = 'lf'           # Line endings will be converted to \n
quote-style = 'single'       # But double quotes in docstrings (PEP 8, PEP 257)
