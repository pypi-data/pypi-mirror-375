# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class BrowseNodeReturnTrendsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'browse_node_id': 'str',
        'display_name': 'str',
        'marketplace_id': 'str',
        'country_code': 'str',
        'date_range': 'DateRange',
        'return_trends': 'List[BrowseNodeReturnTrend]',
    }

    attribute_map = {
        'browse_node_id': 'browseNodeId',
        'display_name': 'displayName',
        'marketplace_id': 'marketplaceId',
        'country_code': 'countryCode',
        'date_range': 'dateRange',
        'return_trends': 'returnTrends',
    }

    def __init__(self, browse_node_id=None, display_name=None, marketplace_id=None, country_code=None, date_range=None, return_trends=None, _configuration=None):  # noqa: E501
        """BrowseNodeReturnTrendsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._browse_node_id = None
        self._display_name = None
        self._marketplace_id = None
        self._country_code = None
        self._date_range = None
        self._return_trends = None
        self.discriminator = None

        self.browse_node_id = browse_node_id
        self.display_name = display_name
        self.marketplace_id = marketplace_id
        self.country_code = country_code
        self.date_range = date_range
        self.return_trends = return_trends

    @property
    def browse_node_id(self):
        """Gets the browse_node_id of this BrowseNodeReturnTrendsResponse.  # noqa: E501

        The requested browse node id. A browse node id is the unique identifier of a given browse node.  # noqa: E501

        :return: The browse_node_id of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :rtype: str
        """
        return self._browse_node_id

    @browse_node_id.setter
    def browse_node_id(self, browse_node_id):
        """Sets the browse_node_id of this BrowseNodeReturnTrendsResponse.

        The requested browse node id. A browse node id is the unique identifier of a given browse node.  # noqa: E501

        :param browse_node_id: The browse_node_id of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and browse_node_id is None:
            raise ValueError("Invalid value for `browse_node_id`, must not be `None`")  # noqa: E501

        self._browse_node_id = browse_node_id

    @property
    def display_name(self):
        """Gets the display_name of this BrowseNodeReturnTrendsResponse.  # noqa: E501

        The display name of the browse node, as visible on the Amazon retail website.  # noqa: E501

        :return: The display_name of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BrowseNodeReturnTrendsResponse.

        The display name of the browse node, as visible on the Amazon retail website.  # noqa: E501

        :param display_name: The display_name of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this BrowseNodeReturnTrendsResponse.  # noqa: E501

        The requested marketplace id.  # noqa: E501

        :return: The marketplace_id of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this BrowseNodeReturnTrendsResponse.

        The requested marketplace id.  # noqa: E501

        :param marketplace_id: The marketplace_id of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def country_code(self):
        """Gets the country_code of this BrowseNodeReturnTrendsResponse.  # noqa: E501

        The two digit country code of requested marketplace id, in ISO 3166-1 alpha-2 format.  # noqa: E501

        :return: The country_code of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this BrowseNodeReturnTrendsResponse.

        The two digit country code of requested marketplace id, in ISO 3166-1 alpha-2 format.  # noqa: E501

        :param country_code: The country_code of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def date_range(self):
        """Gets the date_range of this BrowseNodeReturnTrendsResponse.  # noqa: E501


        :return: The date_range of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this BrowseNodeReturnTrendsResponse.


        :param date_range: The date_range of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :type: DateRange
        """
        if self._configuration.client_side_validation and date_range is None:
            raise ValueError("Invalid value for `date_range`, must not be `None`")  # noqa: E501

        self._date_range = date_range

    @property
    def return_trends(self):
        """Gets the return_trends of this BrowseNodeReturnTrendsResponse.  # noqa: E501

        The browse node return trends.  # noqa: E501

        :return: The return_trends of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :rtype: List[BrowseNodeReturnTrend]
        """
        return self._return_trends

    @return_trends.setter
    def return_trends(self, return_trends):
        """Sets the return_trends of this BrowseNodeReturnTrendsResponse.

        The browse node return trends.  # noqa: E501

        :param return_trends: The return_trends of this BrowseNodeReturnTrendsResponse.  # noqa: E501
        :type: List[BrowseNodeReturnTrend]
        """
        if self._configuration.client_side_validation and return_trends is None:
            raise ValueError("Invalid value for `return_trends`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                return_trends is not None and len(return_trends) > 10):
            raise ValueError("Invalid value for `return_trends`, number of items must be less than or equal to `10`")  # noqa: E501

        self._return_trends = return_trends

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrowseNodeReturnTrendsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrowseNodeReturnTrendsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrowseNodeReturnTrendsResponse):
            return True

        return self.to_dict() != other.to_dict()
