# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class StandardImageSidebarModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'headline': 'TextComponent',
        'image_caption_block': 'StandardImageCaptionBlock',
        'description_text_block': 'StandardTextBlock',
        'description_list_block': 'StandardTextListBlock',
        'sidebar_image_text_block': 'StandardImageTextBlock',
        'sidebar_list_block': 'StandardTextListBlock',
    }

    attribute_map = {
        'headline': 'headline',
        'image_caption_block': 'imageCaptionBlock',
        'description_text_block': 'descriptionTextBlock',
        'description_list_block': 'descriptionListBlock',
        'sidebar_image_text_block': 'sidebarImageTextBlock',
        'sidebar_list_block': 'sidebarListBlock',
    }

    def __init__(self, headline=None, image_caption_block=None, description_text_block=None, description_list_block=None, sidebar_image_text_block=None, sidebar_list_block=None, _configuration=None):  # noqa: E501
        """StandardImageSidebarModule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._headline = None
        self._image_caption_block = None
        self._description_text_block = None
        self._description_list_block = None
        self._sidebar_image_text_block = None
        self._sidebar_list_block = None
        self.discriminator = None

        if headline is not None:
            self.headline = headline
        if image_caption_block is not None:
            self.image_caption_block = image_caption_block
        if description_text_block is not None:
            self.description_text_block = description_text_block
        if description_list_block is not None:
            self.description_list_block = description_list_block
        if sidebar_image_text_block is not None:
            self.sidebar_image_text_block = sidebar_image_text_block
        if sidebar_list_block is not None:
            self.sidebar_list_block = sidebar_list_block

    @property
    def headline(self):
        """Gets the headline of this StandardImageSidebarModule.  # noqa: E501


        :return: The headline of this StandardImageSidebarModule.  # noqa: E501
        :rtype: TextComponent
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this StandardImageSidebarModule.


        :param headline: The headline of this StandardImageSidebarModule.  # noqa: E501
        :type: TextComponent
        """

        self._headline = headline

    @property
    def image_caption_block(self):
        """Gets the image_caption_block of this StandardImageSidebarModule.  # noqa: E501


        :return: The image_caption_block of this StandardImageSidebarModule.  # noqa: E501
        :rtype: StandardImageCaptionBlock
        """
        return self._image_caption_block

    @image_caption_block.setter
    def image_caption_block(self, image_caption_block):
        """Sets the image_caption_block of this StandardImageSidebarModule.


        :param image_caption_block: The image_caption_block of this StandardImageSidebarModule.  # noqa: E501
        :type: StandardImageCaptionBlock
        """

        self._image_caption_block = image_caption_block

    @property
    def description_text_block(self):
        """Gets the description_text_block of this StandardImageSidebarModule.  # noqa: E501


        :return: The description_text_block of this StandardImageSidebarModule.  # noqa: E501
        :rtype: StandardTextBlock
        """
        return self._description_text_block

    @description_text_block.setter
    def description_text_block(self, description_text_block):
        """Sets the description_text_block of this StandardImageSidebarModule.


        :param description_text_block: The description_text_block of this StandardImageSidebarModule.  # noqa: E501
        :type: StandardTextBlock
        """

        self._description_text_block = description_text_block

    @property
    def description_list_block(self):
        """Gets the description_list_block of this StandardImageSidebarModule.  # noqa: E501


        :return: The description_list_block of this StandardImageSidebarModule.  # noqa: E501
        :rtype: StandardTextListBlock
        """
        return self._description_list_block

    @description_list_block.setter
    def description_list_block(self, description_list_block):
        """Sets the description_list_block of this StandardImageSidebarModule.


        :param description_list_block: The description_list_block of this StandardImageSidebarModule.  # noqa: E501
        :type: StandardTextListBlock
        """

        self._description_list_block = description_list_block

    @property
    def sidebar_image_text_block(self):
        """Gets the sidebar_image_text_block of this StandardImageSidebarModule.  # noqa: E501


        :return: The sidebar_image_text_block of this StandardImageSidebarModule.  # noqa: E501
        :rtype: StandardImageTextBlock
        """
        return self._sidebar_image_text_block

    @sidebar_image_text_block.setter
    def sidebar_image_text_block(self, sidebar_image_text_block):
        """Sets the sidebar_image_text_block of this StandardImageSidebarModule.


        :param sidebar_image_text_block: The sidebar_image_text_block of this StandardImageSidebarModule.  # noqa: E501
        :type: StandardImageTextBlock
        """

        self._sidebar_image_text_block = sidebar_image_text_block

    @property
    def sidebar_list_block(self):
        """Gets the sidebar_list_block of this StandardImageSidebarModule.  # noqa: E501


        :return: The sidebar_list_block of this StandardImageSidebarModule.  # noqa: E501
        :rtype: StandardTextListBlock
        """
        return self._sidebar_list_block

    @sidebar_list_block.setter
    def sidebar_list_block(self, sidebar_list_block):
        """Sets the sidebar_list_block of this StandardImageSidebarModule.


        :param sidebar_list_block: The sidebar_list_block of this StandardImageSidebarModule.  # noqa: E501
        :type: StandardTextListBlock
        """

        self._sidebar_list_block = sidebar_list_block

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandardImageSidebarModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardImageSidebarModule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StandardImageSidebarModule):
            return True

        return self.to_dict() != other.to_dict()
