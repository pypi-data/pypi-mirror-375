# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class InvalidSKU(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seller_sku': 'str',
        'error_reason': 'ErrorReason',
    }

    attribute_map = {
        'seller_sku': 'SellerSKU',
        'error_reason': 'ErrorReason',
    }

    def __init__(self, seller_sku=None, error_reason=None, _configuration=None):  # noqa: E501
        """InvalidSKU - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._seller_sku = None
        self._error_reason = None
        self.discriminator = None

        if seller_sku is not None:
            self.seller_sku = seller_sku
        if error_reason is not None:
            self.error_reason = error_reason

    @property
    def seller_sku(self):
        """Gets the seller_sku of this InvalidSKU.  # noqa: E501

        The seller SKU of the item.  # noqa: E501

        :return: The seller_sku of this InvalidSKU.  # noqa: E501
        :rtype: str
        """
        return self._seller_sku

    @seller_sku.setter
    def seller_sku(self, seller_sku):
        """Sets the seller_sku of this InvalidSKU.

        The seller SKU of the item.  # noqa: E501

        :param seller_sku: The seller_sku of this InvalidSKU.  # noqa: E501
        :type: str
        """

        self._seller_sku = seller_sku

    @property
    def error_reason(self):
        """Gets the error_reason of this InvalidSKU.  # noqa: E501


        :return: The error_reason of this InvalidSKU.  # noqa: E501
        :rtype: ErrorReason
        """
        return self._error_reason

    @error_reason.setter
    def error_reason(self, error_reason):
        """Sets the error_reason of this InvalidSKU.


        :param error_reason: The error_reason of this InvalidSKU.  # noqa: E501
        :type: ErrorReason
        """

        self._error_reason = error_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvalidSKU, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvalidSKU):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvalidSKU):
            return True

        return self.to_dict() != other.to_dict()
