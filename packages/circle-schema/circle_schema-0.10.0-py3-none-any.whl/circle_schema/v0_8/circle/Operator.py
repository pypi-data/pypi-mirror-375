# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Operator(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Operator()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOperator(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OperatorBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # Operator
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Operator
    def OpcodeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Operator
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def InputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Operator
    def Outputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def OutputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def OutputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def OutputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Operator
    def BuiltinOptionsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Operator
    def CustomOptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def CustomOptionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Operator
    def CustomOptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def CustomOptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Operator
    def CustomOptionsFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def MutatingVariableInputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def MutatingVariableInputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # Operator
    def MutatingVariableInputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def MutatingVariableInputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Operator
    def Intermediates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def IntermediatesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def IntermediatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def IntermediatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Operator
    def LargeCustomOptionsOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Operator
    def LargeCustomOptionsSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions2Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def Start(builder): builder.StartObject(13)
def OperatorStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddOpcodeIndex(builder, opcodeIndex): builder.PrependUint32Slot(0, opcodeIndex, 0)
def OperatorAddOpcodeIndex(builder, opcodeIndex):
    """This method is deprecated. Please switch to AddOpcodeIndex."""
    return AddOpcodeIndex(builder, opcodeIndex)
def AddInputs(builder, inputs): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)
def OperatorAddInputs(builder, inputs):
    """This method is deprecated. Please switch to AddInputs."""
    return AddInputs(builder, inputs)
def StartInputsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OperatorStartInputsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartInputsVector(builder, numElems)
def AddOutputs(builder, outputs): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outputs), 0)
def OperatorAddOutputs(builder, outputs):
    """This method is deprecated. Please switch to AddOutputs."""
    return AddOutputs(builder, outputs)
def StartOutputsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OperatorStartOutputsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartOutputsVector(builder, numElems)
def AddBuiltinOptionsType(builder, builtinOptionsType): builder.PrependUint8Slot(3, builtinOptionsType, 0)
def OperatorAddBuiltinOptionsType(builder, builtinOptionsType):
    """This method is deprecated. Please switch to AddBuiltinOptionsType."""
    return AddBuiltinOptionsType(builder, builtinOptionsType)
def AddBuiltinOptions(builder, builtinOptions): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(builtinOptions), 0)
def OperatorAddBuiltinOptions(builder, builtinOptions):
    """This method is deprecated. Please switch to AddBuiltinOptions."""
    return AddBuiltinOptions(builder, builtinOptions)
def AddCustomOptions(builder, customOptions): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(customOptions), 0)
def OperatorAddCustomOptions(builder, customOptions):
    """This method is deprecated. Please switch to AddCustomOptions."""
    return AddCustomOptions(builder, customOptions)
def StartCustomOptionsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def OperatorStartCustomOptionsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCustomOptionsVector(builder, numElems)
def AddCustomOptionsFormat(builder, customOptionsFormat): builder.PrependInt8Slot(6, customOptionsFormat, 0)
def OperatorAddCustomOptionsFormat(builder, customOptionsFormat):
    """This method is deprecated. Please switch to AddCustomOptionsFormat."""
    return AddCustomOptionsFormat(builder, customOptionsFormat)
def AddMutatingVariableInputs(builder, mutatingVariableInputs): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(mutatingVariableInputs), 0)
def OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs):
    """This method is deprecated. Please switch to AddMutatingVariableInputs."""
    return AddMutatingVariableInputs(builder, mutatingVariableInputs)
def StartMutatingVariableInputsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def OperatorStartMutatingVariableInputsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMutatingVariableInputsVector(builder, numElems)
def AddIntermediates(builder, intermediates): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(intermediates), 0)
def OperatorAddIntermediates(builder, intermediates):
    """This method is deprecated. Please switch to AddIntermediates."""
    return AddIntermediates(builder, intermediates)
def StartIntermediatesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OperatorStartIntermediatesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartIntermediatesVector(builder, numElems)
def AddLargeCustomOptionsOffset(builder, largeCustomOptionsOffset): builder.PrependUint64Slot(9, largeCustomOptionsOffset, 0)
def OperatorAddLargeCustomOptionsOffset(builder, largeCustomOptionsOffset):
    """This method is deprecated. Please switch to AddLargeCustomOptionsOffset."""
    return AddLargeCustomOptionsOffset(builder, largeCustomOptionsOffset)
def AddLargeCustomOptionsSize(builder, largeCustomOptionsSize): builder.PrependUint64Slot(10, largeCustomOptionsSize, 0)
def OperatorAddLargeCustomOptionsSize(builder, largeCustomOptionsSize):
    """This method is deprecated. Please switch to AddLargeCustomOptionsSize."""
    return AddLargeCustomOptionsSize(builder, largeCustomOptionsSize)
def AddBuiltinOptions2Type(builder, builtinOptions2Type): builder.PrependUint8Slot(11, builtinOptions2Type, 0)
def OperatorAddBuiltinOptions2Type(builder, builtinOptions2Type):
    """This method is deprecated. Please switch to AddBuiltinOptions2Type."""
    return AddBuiltinOptions2Type(builder, builtinOptions2Type)
def AddBuiltinOptions2(builder, builtinOptions2): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(builtinOptions2), 0)
def OperatorAddBuiltinOptions2(builder, builtinOptions2):
    """This method is deprecated. Please switch to AddBuiltinOptions2."""
    return AddBuiltinOptions2(builder, builtinOptions2)
def End(builder): return builder.EndObject()
def OperatorEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
import circle_schema.v0_8.circle.ATan2Options
import circle_schema.v0_8.circle.AbsOptions
import circle_schema.v0_8.circle.AddNOptions
import circle_schema.v0_8.circle.AddOptions
import circle_schema.v0_8.circle.ArgMaxOptions
import circle_schema.v0_8.circle.ArgMinOptions
import circle_schema.v0_8.circle.AssignVariableOptions
import circle_schema.v0_8.circle.BCQFullyConnectedOptions
import circle_schema.v0_8.circle.BCQGatherOptions
import circle_schema.v0_8.circle.BatchMatMulOptions
import circle_schema.v0_8.circle.BatchToSpaceNDOptions
import circle_schema.v0_8.circle.BidirectionalSequenceLSTMOptions
import circle_schema.v0_8.circle.BidirectionalSequenceRNNOptions
import circle_schema.v0_8.circle.BitcastOptions
import circle_schema.v0_8.circle.BitwiseXorOptions
import circle_schema.v0_8.circle.BroadcastToOptions
import circle_schema.v0_8.circle.BucketizeOptions
import circle_schema.v0_8.circle.BuiltinOptions
import circle_schema.v0_8.circle.BuiltinOptions2
import circle_schema.v0_8.circle.CallOnceOptions
import circle_schema.v0_8.circle.CallOptions
import circle_schema.v0_8.circle.CastOptions
import circle_schema.v0_8.circle.ConcatEmbeddingsOptions
import circle_schema.v0_8.circle.ConcatenationOptions
import circle_schema.v0_8.circle.Conv2DOptions
import circle_schema.v0_8.circle.Conv3DOptions
import circle_schema.v0_8.circle.CosOptions
import circle_schema.v0_8.circle.CumsumOptions
import circle_schema.v0_8.circle.DensifyOptions
import circle_schema.v0_8.circle.DepthToSpaceOptions
import circle_schema.v0_8.circle.DepthwiseConv2DOptions
import circle_schema.v0_8.circle.DequantizeOptions
import circle_schema.v0_8.circle.DilateOptions
import circle_schema.v0_8.circle.DivOptions
import circle_schema.v0_8.circle.DynamicUpdateSliceOptions
import circle_schema.v0_8.circle.EmbeddingLookupSparseOptions
import circle_schema.v0_8.circle.EqualOptions
import circle_schema.v0_8.circle.ExpOptions
import circle_schema.v0_8.circle.ExpandDimsOptions
import circle_schema.v0_8.circle.FakeQuantOptions
import circle_schema.v0_8.circle.FillOptions
import circle_schema.v0_8.circle.FloorDivOptions
import circle_schema.v0_8.circle.FloorModOptions
import circle_schema.v0_8.circle.FullyConnectedOptions
import circle_schema.v0_8.circle.GRUOptions
import circle_schema.v0_8.circle.GatherNdOptions
import circle_schema.v0_8.circle.GatherOptions
import circle_schema.v0_8.circle.GeluOptions
import circle_schema.v0_8.circle.GreaterEqualOptions
import circle_schema.v0_8.circle.GreaterOptions
import circle_schema.v0_8.circle.HardSwishOptions
import circle_schema.v0_8.circle.HashtableFindOptions
import circle_schema.v0_8.circle.HashtableImportOptions
import circle_schema.v0_8.circle.HashtableOptions
import circle_schema.v0_8.circle.HashtableSizeOptions
import circle_schema.v0_8.circle.IfOptions
import circle_schema.v0_8.circle.InstanceNormOptions
import circle_schema.v0_8.circle.L2NormOptions
import circle_schema.v0_8.circle.LSHProjectionOptions
import circle_schema.v0_8.circle.LSTMOptions
import circle_schema.v0_8.circle.LeakyReluOptions
import circle_schema.v0_8.circle.LessEqualOptions
import circle_schema.v0_8.circle.LessOptions
import circle_schema.v0_8.circle.LocalResponseNormalizationOptions
import circle_schema.v0_8.circle.LogSoftmaxOptions
import circle_schema.v0_8.circle.LogicalAndOptions
import circle_schema.v0_8.circle.LogicalNotOptions
import circle_schema.v0_8.circle.LogicalOrOptions
import circle_schema.v0_8.circle.MatrixDiagOptions
import circle_schema.v0_8.circle.MatrixSetDiagOptions
import circle_schema.v0_8.circle.MaximumMinimumOptions
import circle_schema.v0_8.circle.MirrorPadOptions
import circle_schema.v0_8.circle.MulOptions
import circle_schema.v0_8.circle.NegOptions
import circle_schema.v0_8.circle.NonMaxSuppressionV4Options
import circle_schema.v0_8.circle.NonMaxSuppressionV5Options
import circle_schema.v0_8.circle.NotEqualOptions
import circle_schema.v0_8.circle.OneHotOptions
import circle_schema.v0_8.circle.PackOptions
import circle_schema.v0_8.circle.PadOptions
import circle_schema.v0_8.circle.PadV2Options
import circle_schema.v0_8.circle.Pool2DOptions
import circle_schema.v0_8.circle.PowOptions
import circle_schema.v0_8.circle.QuantizeOptions
import circle_schema.v0_8.circle.RNNOptions
import circle_schema.v0_8.circle.RandomOptions
import circle_schema.v0_8.circle.RangeOptions
import circle_schema.v0_8.circle.RankOptions
import circle_schema.v0_8.circle.ReadVariableOptions
import circle_schema.v0_8.circle.ReduceWindowOptions
import circle_schema.v0_8.circle.ReducerOptions
import circle_schema.v0_8.circle.ReshapeOptions
import circle_schema.v0_8.circle.ResizeBilinearOptions
import circle_schema.v0_8.circle.ResizeNearestNeighborOptions
import circle_schema.v0_8.circle.ReverseSequenceOptions
import circle_schema.v0_8.circle.ReverseV2Options
import circle_schema.v0_8.circle.Rfft2dOptions
import circle_schema.v0_8.circle.RightShiftOptions
import circle_schema.v0_8.circle.SVDFOptions
import circle_schema.v0_8.circle.ScatterNdOptions
import circle_schema.v0_8.circle.SegmentSumOptions
import circle_schema.v0_8.circle.SelectOptions
import circle_schema.v0_8.circle.SelectV2Options
import circle_schema.v0_8.circle.SequenceRNNOptions
import circle_schema.v0_8.circle.ShapeOptions
import circle_schema.v0_8.circle.SignOptions
import circle_schema.v0_8.circle.SkipGramOptions
import circle_schema.v0_8.circle.SliceOptions
import circle_schema.v0_8.circle.SoftmaxOptions
import circle_schema.v0_8.circle.SpaceToBatchNDOptions
import circle_schema.v0_8.circle.SpaceToDepthOptions
import circle_schema.v0_8.circle.SparseToDenseOptions
import circle_schema.v0_8.circle.SplitOptions
import circle_schema.v0_8.circle.SplitVOptions
import circle_schema.v0_8.circle.SquareOptions
import circle_schema.v0_8.circle.SquaredDifferenceOptions
import circle_schema.v0_8.circle.SqueezeOptions
import circle_schema.v0_8.circle.StablehloBroadcastInDimOptions
import circle_schema.v0_8.circle.StablehloCompareOptions
import circle_schema.v0_8.circle.StablehloConcatenateOptions
import circle_schema.v0_8.circle.StablehloConvolutionOptions
import circle_schema.v0_8.circle.StablehloCustomCallOptions
import circle_schema.v0_8.circle.StablehloDotGeneralOptions
import circle_schema.v0_8.circle.StablehloDynamicSliceOptions
import circle_schema.v0_8.circle.StablehloGatherOptions
import circle_schema.v0_8.circle.StablehloIotaOptions
import circle_schema.v0_8.circle.StablehloPadOptions
import circle_schema.v0_8.circle.StablehloReduceOptions
import circle_schema.v0_8.circle.StablehloReduceWindowOptions
import circle_schema.v0_8.circle.StablehloRngBitGeneratorOptions
import circle_schema.v0_8.circle.StablehloScatterOptions
import circle_schema.v0_8.circle.StablehloSliceOptions
import circle_schema.v0_8.circle.StablehloSortOptions
import circle_schema.v0_8.circle.StablehloTransposeOptions
import circle_schema.v0_8.circle.StablehloWhileOptions
import circle_schema.v0_8.circle.StridedSliceOptions
import circle_schema.v0_8.circle.SubOptions
import circle_schema.v0_8.circle.TileOptions
import circle_schema.v0_8.circle.TopKV2Options
import circle_schema.v0_8.circle.TransposeConvOptions
import circle_schema.v0_8.circle.TransposeOptions
import circle_schema.v0_8.circle.UnidirectionalSequenceLSTMOptions
import circle_schema.v0_8.circle.UniqueOptions
import circle_schema.v0_8.circle.UnpackOptions
import circle_schema.v0_8.circle.UnsortedSegmentMaxOptions
import circle_schema.v0_8.circle.UnsortedSegmentMinOptions
import circle_schema.v0_8.circle.UnsortedSegmentProdOptions
import circle_schema.v0_8.circle.UnsortedSegmentSumOptions
import circle_schema.v0_8.circle.VarHandleOptions
import circle_schema.v0_8.circle.WhereOptions
import circle_schema.v0_8.circle.WhileOptions
import circle_schema.v0_8.circle.ZerosLikeOptions
try:
    from typing import List, Union
except:
    pass

class OperatorT(object):

    # OperatorT
    def __init__(self):
        self.opcodeIndex = 0  # type: int
        self.inputs = None  # type: List[int]
        self.outputs = None  # type: List[int]
        self.builtinOptionsType = 0  # type: int
        self.builtinOptions = None  # type: Union[None, circle_schema.v0_8.circle.Conv2DOptions.Conv2DOptionsT, circle_schema.v0_8.circle.DepthwiseConv2DOptions.DepthwiseConv2DOptionsT, circle_schema.v0_8.circle.ConcatEmbeddingsOptions.ConcatEmbeddingsOptionsT, circle_schema.v0_8.circle.LSHProjectionOptions.LSHProjectionOptionsT, circle_schema.v0_8.circle.Pool2DOptions.Pool2DOptionsT, circle_schema.v0_8.circle.SVDFOptions.SVDFOptionsT, circle_schema.v0_8.circle.RNNOptions.RNNOptionsT, circle_schema.v0_8.circle.FullyConnectedOptions.FullyConnectedOptionsT, circle_schema.v0_8.circle.SoftmaxOptions.SoftmaxOptionsT, circle_schema.v0_8.circle.ConcatenationOptions.ConcatenationOptionsT, circle_schema.v0_8.circle.AddOptions.AddOptionsT, circle_schema.v0_8.circle.L2NormOptions.L2NormOptionsT, circle_schema.v0_8.circle.LocalResponseNormalizationOptions.LocalResponseNormalizationOptionsT, circle_schema.v0_8.circle.LSTMOptions.LSTMOptionsT, circle_schema.v0_8.circle.ResizeBilinearOptions.ResizeBilinearOptionsT, circle_schema.v0_8.circle.CallOptions.CallOptionsT, circle_schema.v0_8.circle.ReshapeOptions.ReshapeOptionsT, circle_schema.v0_8.circle.SkipGramOptions.SkipGramOptionsT, circle_schema.v0_8.circle.SpaceToDepthOptions.SpaceToDepthOptionsT, circle_schema.v0_8.circle.EmbeddingLookupSparseOptions.EmbeddingLookupSparseOptionsT, circle_schema.v0_8.circle.MulOptions.MulOptionsT, circle_schema.v0_8.circle.PadOptions.PadOptionsT, circle_schema.v0_8.circle.GatherOptions.GatherOptionsT, circle_schema.v0_8.circle.BatchToSpaceNDOptions.BatchToSpaceNDOptionsT, circle_schema.v0_8.circle.SpaceToBatchNDOptions.SpaceToBatchNDOptionsT, circle_schema.v0_8.circle.TransposeOptions.TransposeOptionsT, circle_schema.v0_8.circle.ReducerOptions.ReducerOptionsT, circle_schema.v0_8.circle.SubOptions.SubOptionsT, circle_schema.v0_8.circle.DivOptions.DivOptionsT, circle_schema.v0_8.circle.SqueezeOptions.SqueezeOptionsT, circle_schema.v0_8.circle.SequenceRNNOptions.SequenceRNNOptionsT, circle_schema.v0_8.circle.StridedSliceOptions.StridedSliceOptionsT, circle_schema.v0_8.circle.ExpOptions.ExpOptionsT, circle_schema.v0_8.circle.TopKV2Options.TopKV2OptionsT, circle_schema.v0_8.circle.SplitOptions.SplitOptionsT, circle_schema.v0_8.circle.LogSoftmaxOptions.LogSoftmaxOptionsT, circle_schema.v0_8.circle.CastOptions.CastOptionsT, circle_schema.v0_8.circle.DequantizeOptions.DequantizeOptionsT, circle_schema.v0_8.circle.MaximumMinimumOptions.MaximumMinimumOptionsT, circle_schema.v0_8.circle.ArgMaxOptions.ArgMaxOptionsT, circle_schema.v0_8.circle.LessOptions.LessOptionsT, circle_schema.v0_8.circle.NegOptions.NegOptionsT, circle_schema.v0_8.circle.PadV2Options.PadV2OptionsT, circle_schema.v0_8.circle.GreaterOptions.GreaterOptionsT, circle_schema.v0_8.circle.GreaterEqualOptions.GreaterEqualOptionsT, circle_schema.v0_8.circle.LessEqualOptions.LessEqualOptionsT, circle_schema.v0_8.circle.SelectOptions.SelectOptionsT, circle_schema.v0_8.circle.SliceOptions.SliceOptionsT, circle_schema.v0_8.circle.TransposeConvOptions.TransposeConvOptionsT, circle_schema.v0_8.circle.SparseToDenseOptions.SparseToDenseOptionsT, circle_schema.v0_8.circle.TileOptions.TileOptionsT, circle_schema.v0_8.circle.ExpandDimsOptions.ExpandDimsOptionsT, circle_schema.v0_8.circle.EqualOptions.EqualOptionsT, circle_schema.v0_8.circle.NotEqualOptions.NotEqualOptionsT, circle_schema.v0_8.circle.ShapeOptions.ShapeOptionsT, circle_schema.v0_8.circle.PowOptions.PowOptionsT, circle_schema.v0_8.circle.ArgMinOptions.ArgMinOptionsT, circle_schema.v0_8.circle.FakeQuantOptions.FakeQuantOptionsT, circle_schema.v0_8.circle.PackOptions.PackOptionsT, circle_schema.v0_8.circle.LogicalOrOptions.LogicalOrOptionsT, circle_schema.v0_8.circle.OneHotOptions.OneHotOptionsT, circle_schema.v0_8.circle.LogicalAndOptions.LogicalAndOptionsT, circle_schema.v0_8.circle.LogicalNotOptions.LogicalNotOptionsT, circle_schema.v0_8.circle.UnpackOptions.UnpackOptionsT, circle_schema.v0_8.circle.FloorDivOptions.FloorDivOptionsT, circle_schema.v0_8.circle.SquareOptions.SquareOptionsT, circle_schema.v0_8.circle.ZerosLikeOptions.ZerosLikeOptionsT, circle_schema.v0_8.circle.FillOptions.FillOptionsT, circle_schema.v0_8.circle.BidirectionalSequenceLSTMOptions.BidirectionalSequenceLSTMOptionsT, circle_schema.v0_8.circle.BidirectionalSequenceRNNOptions.BidirectionalSequenceRNNOptionsT, circle_schema.v0_8.circle.UnidirectionalSequenceLSTMOptions.UnidirectionalSequenceLSTMOptionsT, circle_schema.v0_8.circle.FloorModOptions.FloorModOptionsT, circle_schema.v0_8.circle.RangeOptions.RangeOptionsT, circle_schema.v0_8.circle.ResizeNearestNeighborOptions.ResizeNearestNeighborOptionsT, circle_schema.v0_8.circle.LeakyReluOptions.LeakyReluOptionsT, circle_schema.v0_8.circle.SquaredDifferenceOptions.SquaredDifferenceOptionsT, circle_schema.v0_8.circle.MirrorPadOptions.MirrorPadOptionsT, circle_schema.v0_8.circle.AbsOptions.AbsOptionsT, circle_schema.v0_8.circle.SplitVOptions.SplitVOptionsT, circle_schema.v0_8.circle.UniqueOptions.UniqueOptionsT, circle_schema.v0_8.circle.ReverseV2Options.ReverseV2OptionsT, circle_schema.v0_8.circle.AddNOptions.AddNOptionsT, circle_schema.v0_8.circle.GatherNdOptions.GatherNdOptionsT, circle_schema.v0_8.circle.CosOptions.CosOptionsT, circle_schema.v0_8.circle.WhereOptions.WhereOptionsT, circle_schema.v0_8.circle.RankOptions.RankOptionsT, circle_schema.v0_8.circle.ReverseSequenceOptions.ReverseSequenceOptionsT, circle_schema.v0_8.circle.MatrixDiagOptions.MatrixDiagOptionsT, circle_schema.v0_8.circle.QuantizeOptions.QuantizeOptionsT, circle_schema.v0_8.circle.MatrixSetDiagOptions.MatrixSetDiagOptionsT, circle_schema.v0_8.circle.HardSwishOptions.HardSwishOptionsT, circle_schema.v0_8.circle.IfOptions.IfOptionsT, circle_schema.v0_8.circle.WhileOptions.WhileOptionsT, circle_schema.v0_8.circle.DepthToSpaceOptions.DepthToSpaceOptionsT, circle_schema.v0_8.circle.NonMaxSuppressionV4Options.NonMaxSuppressionV4OptionsT, circle_schema.v0_8.circle.NonMaxSuppressionV5Options.NonMaxSuppressionV5OptionsT, circle_schema.v0_8.circle.ScatterNdOptions.ScatterNdOptionsT, circle_schema.v0_8.circle.SelectV2Options.SelectV2OptionsT, circle_schema.v0_8.circle.DensifyOptions.DensifyOptionsT, circle_schema.v0_8.circle.SegmentSumOptions.SegmentSumOptionsT, circle_schema.v0_8.circle.BatchMatMulOptions.BatchMatMulOptionsT, circle_schema.v0_8.circle.CumsumOptions.CumsumOptionsT, circle_schema.v0_8.circle.CallOnceOptions.CallOnceOptionsT, circle_schema.v0_8.circle.BroadcastToOptions.BroadcastToOptionsT, circle_schema.v0_8.circle.Rfft2dOptions.Rfft2dOptionsT, circle_schema.v0_8.circle.Conv3DOptions.Conv3DOptionsT, circle_schema.v0_8.circle.HashtableOptions.HashtableOptionsT, circle_schema.v0_8.circle.HashtableFindOptions.HashtableFindOptionsT, circle_schema.v0_8.circle.HashtableImportOptions.HashtableImportOptionsT, circle_schema.v0_8.circle.HashtableSizeOptions.HashtableSizeOptionsT, circle_schema.v0_8.circle.VarHandleOptions.VarHandleOptionsT, circle_schema.v0_8.circle.ReadVariableOptions.ReadVariableOptionsT, circle_schema.v0_8.circle.AssignVariableOptions.AssignVariableOptionsT, circle_schema.v0_8.circle.RandomOptions.RandomOptionsT, circle_schema.v0_8.circle.BucketizeOptions.BucketizeOptionsT, circle_schema.v0_8.circle.GeluOptions.GeluOptionsT, circle_schema.v0_8.circle.DynamicUpdateSliceOptions.DynamicUpdateSliceOptionsT, circle_schema.v0_8.circle.UnsortedSegmentProdOptions.UnsortedSegmentProdOptionsT, circle_schema.v0_8.circle.UnsortedSegmentMaxOptions.UnsortedSegmentMaxOptionsT, circle_schema.v0_8.circle.UnsortedSegmentMinOptions.UnsortedSegmentMinOptionsT, circle_schema.v0_8.circle.UnsortedSegmentSumOptions.UnsortedSegmentSumOptionsT, circle_schema.v0_8.circle.ATan2Options.ATan2OptionsT, circle_schema.v0_8.circle.SignOptions.SignOptionsT, circle_schema.v0_8.circle.BitcastOptions.BitcastOptionsT, circle_schema.v0_8.circle.BitwiseXorOptions.BitwiseXorOptionsT, circle_schema.v0_8.circle.RightShiftOptions.RightShiftOptionsT, circle_schema.v0_8.circle.GRUOptions.GRUOptionsT, circle_schema.v0_8.circle.BCQGatherOptions.BCQGatherOptionsT, circle_schema.v0_8.circle.BCQFullyConnectedOptions.BCQFullyConnectedOptionsT, circle_schema.v0_8.circle.InstanceNormOptions.InstanceNormOptionsT]
        self.customOptions = None  # type: List[int]
        self.customOptionsFormat = 0  # type: int
        self.mutatingVariableInputs = None  # type: List[bool]
        self.intermediates = None  # type: List[int]
        self.largeCustomOptionsOffset = 0  # type: int
        self.largeCustomOptionsSize = 0  # type: int
        self.builtinOptions2Type = 0  # type: int
        self.builtinOptions2 = None  # type: Union[None, circle_schema.v0_8.circle.StablehloConcatenateOptions.StablehloConcatenateOptionsT, circle_schema.v0_8.circle.StablehloBroadcastInDimOptions.StablehloBroadcastInDimOptionsT, circle_schema.v0_8.circle.StablehloSliceOptions.StablehloSliceOptionsT, circle_schema.v0_8.circle.StablehloConvolutionOptions.StablehloConvolutionOptionsT, circle_schema.v0_8.circle.StablehloCustomCallOptions.StablehloCustomCallOptionsT, circle_schema.v0_8.circle.StablehloReduceOptions.StablehloReduceOptionsT, circle_schema.v0_8.circle.StablehloScatterOptions.StablehloScatterOptionsT, circle_schema.v0_8.circle.StablehloCompareOptions.StablehloCompareOptionsT, circle_schema.v0_8.circle.StablehloDynamicSliceOptions.StablehloDynamicSliceOptionsT, circle_schema.v0_8.circle.StablehloPadOptions.StablehloPadOptionsT, circle_schema.v0_8.circle.StablehloIotaOptions.StablehloIotaOptionsT, circle_schema.v0_8.circle.StablehloDotGeneralOptions.StablehloDotGeneralOptionsT, circle_schema.v0_8.circle.StablehloReduceWindowOptions.StablehloReduceWindowOptionsT, circle_schema.v0_8.circle.StablehloSortOptions.StablehloSortOptionsT, circle_schema.v0_8.circle.StablehloWhileOptions.StablehloWhileOptionsT, circle_schema.v0_8.circle.StablehloGatherOptions.StablehloGatherOptionsT, circle_schema.v0_8.circle.StablehloTransposeOptions.StablehloTransposeOptionsT, circle_schema.v0_8.circle.DilateOptions.DilateOptionsT, circle_schema.v0_8.circle.StablehloRngBitGeneratorOptions.StablehloRngBitGeneratorOptionsT, circle_schema.v0_8.circle.ReduceWindowOptions.ReduceWindowOptionsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        operator = Operator()
        operator.Init(buf, pos)
        return cls.InitFromObj(operator)

    @classmethod
    def InitFromObj(cls, operator):
        x = OperatorT()
        x._UnPack(operator)
        return x

    # OperatorT
    def _UnPack(self, operator):
        if operator is None:
            return
        self.opcodeIndex = operator.OpcodeIndex()
        if not operator.InputsIsNone():
            if np is None:
                self.inputs = []
                for i in range(operator.InputsLength()):
                    self.inputs.append(operator.Inputs(i))
            else:
                self.inputs = operator.InputsAsNumpy()
        if not operator.OutputsIsNone():
            if np is None:
                self.outputs = []
                for i in range(operator.OutputsLength()):
                    self.outputs.append(operator.Outputs(i))
            else:
                self.outputs = operator.OutputsAsNumpy()
        self.builtinOptionsType = operator.BuiltinOptionsType()
        self.builtinOptions = circle_schema.v0_8.circle.BuiltinOptions.BuiltinOptionsCreator(self.builtinOptionsType, operator.BuiltinOptions())
        if not operator.CustomOptionsIsNone():
            if np is None:
                self.customOptions = []
                for i in range(operator.CustomOptionsLength()):
                    self.customOptions.append(operator.CustomOptions(i))
            else:
                self.customOptions = operator.CustomOptionsAsNumpy()
        self.customOptionsFormat = operator.CustomOptionsFormat()
        if not operator.MutatingVariableInputsIsNone():
            if np is None:
                self.mutatingVariableInputs = []
                for i in range(operator.MutatingVariableInputsLength()):
                    self.mutatingVariableInputs.append(operator.MutatingVariableInputs(i))
            else:
                self.mutatingVariableInputs = operator.MutatingVariableInputsAsNumpy()
        if not operator.IntermediatesIsNone():
            if np is None:
                self.intermediates = []
                for i in range(operator.IntermediatesLength()):
                    self.intermediates.append(operator.Intermediates(i))
            else:
                self.intermediates = operator.IntermediatesAsNumpy()
        self.largeCustomOptionsOffset = operator.LargeCustomOptionsOffset()
        self.largeCustomOptionsSize = operator.LargeCustomOptionsSize()
        self.builtinOptions2Type = operator.BuiltinOptions2Type()
        self.builtinOptions2 = circle_schema.v0_8.circle.BuiltinOptions2.BuiltinOptions2Creator(self.builtinOptions2Type, operator.BuiltinOptions2())

    # OperatorT
    def Pack(self, builder):
        if self.inputs is not None:
            if np is not None and type(self.inputs) is np.ndarray:
                inputs = builder.CreateNumpyVector(self.inputs)
            else:
                StartInputsVector(builder, len(self.inputs))
                for i in reversed(range(len(self.inputs))):
                    builder.PrependInt32(self.inputs[i])
                inputs = builder.EndVector()
        if self.outputs is not None:
            if np is not None and type(self.outputs) is np.ndarray:
                outputs = builder.CreateNumpyVector(self.outputs)
            else:
                StartOutputsVector(builder, len(self.outputs))
                for i in reversed(range(len(self.outputs))):
                    builder.PrependInt32(self.outputs[i])
                outputs = builder.EndVector()
        if self.builtinOptions is not None:
            builtinOptions = self.builtinOptions.Pack(builder)
        if self.customOptions is not None:
            if np is not None and type(self.customOptions) is np.ndarray:
                customOptions = builder.CreateNumpyVector(self.customOptions)
            else:
                StartCustomOptionsVector(builder, len(self.customOptions))
                for i in reversed(range(len(self.customOptions))):
                    builder.PrependUint8(self.customOptions[i])
                customOptions = builder.EndVector()
        if self.mutatingVariableInputs is not None:
            if np is not None and type(self.mutatingVariableInputs) is np.ndarray:
                mutatingVariableInputs = builder.CreateNumpyVector(self.mutatingVariableInputs)
            else:
                StartMutatingVariableInputsVector(builder, len(self.mutatingVariableInputs))
                for i in reversed(range(len(self.mutatingVariableInputs))):
                    builder.PrependBool(self.mutatingVariableInputs[i])
                mutatingVariableInputs = builder.EndVector()
        if self.intermediates is not None:
            if np is not None and type(self.intermediates) is np.ndarray:
                intermediates = builder.CreateNumpyVector(self.intermediates)
            else:
                StartIntermediatesVector(builder, len(self.intermediates))
                for i in reversed(range(len(self.intermediates))):
                    builder.PrependInt32(self.intermediates[i])
                intermediates = builder.EndVector()
        if self.builtinOptions2 is not None:
            builtinOptions2 = self.builtinOptions2.Pack(builder)
        Start(builder)
        AddOpcodeIndex(builder, self.opcodeIndex)
        if self.inputs is not None:
            AddInputs(builder, inputs)
        if self.outputs is not None:
            AddOutputs(builder, outputs)
        AddBuiltinOptionsType(builder, self.builtinOptionsType)
        if self.builtinOptions is not None:
            AddBuiltinOptions(builder, builtinOptions)
        if self.customOptions is not None:
            AddCustomOptions(builder, customOptions)
        AddCustomOptionsFormat(builder, self.customOptionsFormat)
        if self.mutatingVariableInputs is not None:
            AddMutatingVariableInputs(builder, mutatingVariableInputs)
        if self.intermediates is not None:
            AddIntermediates(builder, intermediates)
        AddLargeCustomOptionsOffset(builder, self.largeCustomOptionsOffset)
        AddLargeCustomOptionsSize(builder, self.largeCustomOptionsSize)
        AddBuiltinOptions2Type(builder, self.builtinOptions2Type)
        if self.builtinOptions2 is not None:
            AddBuiltinOptions2(builder, builtinOptions2)
        operator = End(builder)
        return operator
