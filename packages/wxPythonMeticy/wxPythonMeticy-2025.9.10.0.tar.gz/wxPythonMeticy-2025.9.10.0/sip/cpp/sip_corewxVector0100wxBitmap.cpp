/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.12.0
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"
        #include <wx/bitmap.h>


extern "C" {static void assign_wxVector_0100wxBitmap(void *, Py_ssize_t, void *);}
static void assign_wxVector_0100wxBitmap(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast<wxVector< ::wxBitmap> *>(sipDst)[sipDstIdx] = *reinterpret_cast<wxVector< ::wxBitmap> *>(sipSrc);
}


extern "C" {static void *array_wxVector_0100wxBitmap(Py_ssize_t);}
static void *array_wxVector_0100wxBitmap(Py_ssize_t sipNrElem)
{
    return new wxVector< ::wxBitmap>[sipNrElem];
}


extern "C" {static void *copy_wxVector_0100wxBitmap(const void *, Py_ssize_t);}
static void *copy_wxVector_0100wxBitmap(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new wxVector< ::wxBitmap>(reinterpret_cast<const wxVector< ::wxBitmap> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_wxVector_0100wxBitmap(void *, int);}
static void release_wxVector_0100wxBitmap(void *sipCppV, int)
{
    wxVector< ::wxBitmap> *sipCpp = reinterpret_cast<wxVector< ::wxBitmap> *>(sipCppV);
    Py_BEGIN_ALLOW_THREADS
    delete sipCpp;
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_wxVector_0100wxBitmap(PyObject *, void **, int *, PyObject *);}
static int convertTo_wxVector_0100wxBitmap(PyObject *sipPy, void **sipCppPtrV, int *sipIsErr, PyObject *sipTransferObj)
{
    wxVector< ::wxBitmap> **sipCppPtr = reinterpret_cast<wxVector< ::wxBitmap> **>(sipCppPtrV);
        PyObject *iter = PyObject_GetIter(sipPy);

        if (!sipIsErr) {
            PyErr_Clear();
            Py_XDECREF(iter);

            return (iter
#if PY_MAJOR_VERSION < 3
                    && !PyString_Check(sipPy)
#endif
                    && !PyUnicode_Check(sipPy));
        }

        if (!iter) {
            *sipIsErr = 1;

            return 0;
        }

        wxVector<wxBitmap> *wv = new wxVector<wxBitmap>;

        for (Py_ssize_t i = 0; ; ++i) {
            PyErr_Clear();
            PyObject *itm = PyIter_Next(iter);

            if (!itm) {
                if (PyErr_Occurred()) {
                    delete wv;
                    Py_DECREF(iter);
                    *sipIsErr = 1;

                    return 0;
                }

                break;
            }

            int state;
            wxBitmap *t = reinterpret_cast<wxBitmap *>(
                    sipForceConvertToType(itm, sipType_wxBitmap, sipTransferObj,
                            SIP_NOT_NONE, &state, sipIsErr));

            if (*sipIsErr) {
                PyErr_Format(PyExc_TypeError,
                        "index %zd has type '%s' but 'wxBitmap' is expected", i,
                        sipPyTypeName(Py_TYPE(itm)));

                Py_DECREF(itm);
                delete wv;
                Py_DECREF(iter);

                return 0;
            }

            wv->push_back(*t);

            sipReleaseType(t, sipType_wxBitmap, state);
            Py_DECREF(itm);
        }

        Py_DECREF(iter);
 
        *sipCppPtr = wv;
 
        return sipGetState(sipTransferObj);
}


extern "C" {static PyObject *convertFrom_wxVector_0100wxBitmap(void *, PyObject *);}
static PyObject *convertFrom_wxVector_0100wxBitmap(void *sipCppV, PyObject *sipTransferObj)
{
    wxVector< ::wxBitmap> *sipCpp = reinterpret_cast<wxVector< ::wxBitmap> *>(sipCppV);
        PyObject *l = PyList_New(sipCpp->size());

        if (!l)
            return 0;

        for (int i = 0; i < sipCpp->size(); ++i) {
            wxBitmap *t = new wxBitmap(sipCpp->at(i));
            PyObject *tobj = sipConvertFromNewType(t, sipType_wxBitmap,
                    sipTransferObj);

            if (!tobj) {
                delete t;
                Py_DECREF(l);

                return 0;
            }

            PyList_SetItem(l, i, tobj);
        }

        return l;
}


sipMappedTypeDef sipTypeDef__core_wxVector_0100wxBitmap = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_MAPPED,
        sipNameNr_55440,
        SIP_NULLPTR,
        SIP_NULLPTR,
    },
    {
        -1,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
    },
    assign_wxVector_0100wxBitmap,
    array_wxVector_0100wxBitmap,
    copy_wxVector_0100wxBitmap,
    release_wxVector_0100wxBitmap,
    convertTo_wxVector_0100wxBitmap,
    convertFrom_wxVector_0100wxBitmap
};
