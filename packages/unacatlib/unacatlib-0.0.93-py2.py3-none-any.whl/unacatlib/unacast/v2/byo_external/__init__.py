# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/byo_external/external_byo_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import metric as _metric__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ReportStatus(betterproto.Enum):
    Undefined = 0
    Pending = 1
    Running = 2
    Succeeded = 3
    Failed = 4


class MetricStatus(betterproto.Enum):
    """
    Metric status
     Unspeficied: Not determined yet
     Running: In progress
     Delayed: Produciton is delayed. Unacast have to manually intervene to produce the metric.
     Produced: Produced. The metric has been produced and will be available very soon. Our system is finalizing processing before it is ready to use.
     Finished: Finished. The metric is ready.
     Failed: Failed to produce. The metric is not ready. Please contact Unacast support if you think this is an error.
     Rejected: The request was rejected. You might have to change your request. Read the metric_status_reason for more information and try again.
    """

    UNSPECIFIED = 0
    RUNNING = 1
    DELAYED = 2
    PRODUCED = 3
    FINISHED = 4
    FAILED = 5
    REJECTED = 6


@dataclass(eq=False, repr=False)
class CreateUsReportRequest(betterproto.Message):
    billing_account: str = betterproto.string_field(2)
    metric_reference: List["MetricReference"] = betterproto.message_field(5)
    pois: List["PointOfInterest"] = betterproto.message_field(6)
    start_date: "Date" = betterproto.message_field(7)
    end_date: "Date" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class CreateReportRequest(betterproto.Message):
    """Create a report for a specific country"""

    billing_account: str = betterproto.string_field(2)
    country_code: str = betterproto.string_field(4)
    metric_reference: List["MetricReference"] = betterproto.message_field(5)
    pois: List["PointOfInterest"] = betterproto.message_field(6)
    start_date: "Date" = betterproto.message_field(7)
    end_date: "Date" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ReportDetails(betterproto.Message):
    billing_account: str = betterproto.string_field(10)
    report_id: str = betterproto.string_field(1)
    report_status: "ReportStatus" = betterproto.enum_field(3)
    error_message: str = betterproto.string_field(17)
    created_time: int = betterproto.int64_field(5)
    expiry_time: int = betterproto.int64_field(6)
    metric_reference: List["MetricReference"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class ReadMetricFromReportRequest(betterproto.Message):
    billing_account: str = betterproto.string_field(2)
    report_id: str = betterproto.string_field(3)
    metric_reference: "MetricReference" = betterproto.message_field(5)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class MetricValuesOnPois(betterproto.Message):
    report_status: "ReportStatus" = betterproto.enum_field(3)
    schema: "_metric__.MetricVersion" = betterproto.message_field(1)
    values: List["_metric__.MetricValue"] = betterproto.message_field(2)
    next_page_token: str = betterproto.string_field(14)
    metric_status: "MetricStatus" = betterproto.enum_field(15)
    metric_status_reason: str = betterproto.string_field(16)


@dataclass(eq=False, repr=False)
class MetricReference(betterproto.Message):
    metric_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PointOfInterest(betterproto.Message):
    name: str = betterproto.string_field(1)
    polygon: "MultiPolygon" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MultiPolygon(betterproto.Message):
    polygons: List["Polygon"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Polygon(betterproto.Message):
    rings: List["PolygonRing"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PolygonRing(betterproto.Message):
    coordinates: List["Coordinate"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Coordinate(betterproto.Message):
    lon: str = betterproto.string_field(1)
    lat: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class Date(betterproto.Message):
    year: int = betterproto.int32_field(1)
    month: int = betterproto.int32_field(2)
    day: int = betterproto.int32_field(3)


class ExternalByoServiceStub(betterproto.ServiceStub):
    async def create_us_report(
        self,
        create_us_report_request: "CreateUsReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ReportDetails":
        return await self._unary_unary(
            "/unacast.v2.byo_external.ExternalByoService/CreateUSReport",
            create_us_report_request,
            ReportDetails,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_report(
        self,
        create_report_request: "CreateReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ReportDetails":
        return await self._unary_unary(
            "/unacast.v2.byo_external.ExternalByoService/CreateReport",
            create_report_request,
            ReportDetails,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def read_metric_from_report(
        self,
        read_metric_from_report_request: "ReadMetricFromReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MetricValuesOnPois":
        return await self._unary_unary(
            "/unacast.v2.byo_external.ExternalByoService/ReadMetricFromReport",
            read_metric_from_report_request,
            MetricValuesOnPois,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ExternalByoServiceBase(ServiceBase):

    async def create_us_report(
        self, create_us_report_request: "CreateUsReportRequest"
    ) -> "ReportDetails":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_report(
        self, create_report_request: "CreateReportRequest"
    ) -> "ReportDetails":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def read_metric_from_report(
        self, read_metric_from_report_request: "ReadMetricFromReportRequest"
    ) -> "MetricValuesOnPois":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_us_report(
        self, stream: "grpclib.server.Stream[CreateUsReportRequest, ReportDetails]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_us_report(request)
        await stream.send_message(response)

    async def __rpc_create_report(
        self, stream: "grpclib.server.Stream[CreateReportRequest, ReportDetails]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_report(request)
        await stream.send_message(response)

    async def __rpc_read_metric_from_report(
        self,
        stream: "grpclib.server.Stream[ReadMetricFromReportRequest, MetricValuesOnPois]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.read_metric_from_report(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.byo_external.ExternalByoService/CreateUSReport": grpclib.const.Handler(
                self.__rpc_create_us_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateUsReportRequest,
                ReportDetails,
            ),
            "/unacast.v2.byo_external.ExternalByoService/CreateReport": grpclib.const.Handler(
                self.__rpc_create_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateReportRequest,
                ReportDetails,
            ),
            "/unacast.v2.byo_external.ExternalByoService/ReadMetricFromReport": grpclib.const.Handler(
                self.__rpc_read_metric_from_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReadMetricFromReportRequest,
                MetricValuesOnPois,
            ),
        }
