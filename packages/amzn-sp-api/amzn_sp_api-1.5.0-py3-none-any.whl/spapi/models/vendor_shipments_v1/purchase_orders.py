# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PurchaseOrders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'purchase_order_number': 'str',
        'purchase_order_date': 'datetime',
        'ship_window': 'str',
        'items': 'List[PurchaseOrderItems]',
    }

    attribute_map = {
        'purchase_order_number': 'purchaseOrderNumber',
        'purchase_order_date': 'purchaseOrderDate',
        'ship_window': 'shipWindow',
        'items': 'items',
    }

    def __init__(self, purchase_order_number=None, purchase_order_date=None, ship_window=None, items=None, _configuration=None):  # noqa: E501
        """PurchaseOrders - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._purchase_order_number = None
        self._purchase_order_date = None
        self._ship_window = None
        self._items = None
        self.discriminator = None

        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if purchase_order_date is not None:
            self.purchase_order_date = purchase_order_date
        if ship_window is not None:
            self.ship_window = ship_window
        if items is not None:
            self.items = items

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this PurchaseOrders.  # noqa: E501

        Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment.  # noqa: E501

        :return: The purchase_order_number of this PurchaseOrders.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this PurchaseOrders.

        Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment.  # noqa: E501

        :param purchase_order_number: The purchase_order_number of this PurchaseOrders.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def purchase_order_date(self):
        """Gets the purchase_order_date of this PurchaseOrders.  # noqa: E501

        Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment.  # noqa: E501

        :return: The purchase_order_date of this PurchaseOrders.  # noqa: E501
        :rtype: datetime
        """
        return self._purchase_order_date

    @purchase_order_date.setter
    def purchase_order_date(self, purchase_order_date):
        """Sets the purchase_order_date of this PurchaseOrders.

        Purchase order numbers involved in this shipment, list all the PO that are involved as part of this shipment.  # noqa: E501

        :param purchase_order_date: The purchase_order_date of this PurchaseOrders.  # noqa: E501
        :type: datetime
        """

        self._purchase_order_date = purchase_order_date

    @property
    def ship_window(self):
        """Gets the ship_window of this PurchaseOrders.  # noqa: E501

        Date range in which shipment is expected for these purchase orders.  # noqa: E501

        :return: The ship_window of this PurchaseOrders.  # noqa: E501
        :rtype: str
        """
        return self._ship_window

    @ship_window.setter
    def ship_window(self, ship_window):
        """Sets the ship_window of this PurchaseOrders.

        Date range in which shipment is expected for these purchase orders.  # noqa: E501

        :param ship_window: The ship_window of this PurchaseOrders.  # noqa: E501
        :type: str
        """

        self._ship_window = ship_window

    @property
    def items(self):
        """Gets the items of this PurchaseOrders.  # noqa: E501

        A list of the items that are associated to the PO in this transport and their associated details.  # noqa: E501

        :return: The items of this PurchaseOrders.  # noqa: E501
        :rtype: List[PurchaseOrderItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PurchaseOrders.

        A list of the items that are associated to the PO in this transport and their associated details.  # noqa: E501

        :param items: The items of this PurchaseOrders.  # noqa: E501
        :type: List[PurchaseOrderItems]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseOrders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseOrders):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PurchaseOrders):
            return True

        return self.to_dict() != other.to_dict()
