Metadata-Version: 2.1
Name: thoughtful
Version: 3.2.2a4
Summary: Thoughtful is a python package by Thoughtful for helping manage automations with helpful packages like supervisor
Home-page: https://thoughtful.ai
License: Apache-2.0
Keywords: rpa,robot-framework,robocorp,automation
Author: Thoughtful Automation
Author-email: care@thoughtful.ai
Requires-Python: >=3.10,<3.13
Classifier: Framework :: Robot Framework
Classifier: Framework :: Robot Framework :: Library
Classifier: Framework :: Robot Framework :: Tool
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Security :: Cryptography
Provides-Extra: screen-recorder
Provides-Extra: t-vault
Requires-Dist: aws-requests-auth (>=0.4.3,<0.5.0)
Requires-Dist: boto3 (>=1.24.64,<2.0.0)
Requires-Dist: chevron (>=0.14.0,<0.15.0)
Requires-Dist: grpcio (>=1.60.0,<2.0.0)
Requires-Dist: httpx (>=0.28.1,<0.29.0)
Requires-Dist: imageio (>=2.34.2,<3.0.0) ; extra == "screen-recorder"
Requires-Dist: imageio-ffmpeg (>=0.5.1,<0.6.0) ; extra == "screen-recorder"
Requires-Dist: isodate (>=0.6.1,<0.7.0)
Requires-Dist: moto (>=4.0.5,<5.0.0)
Requires-Dist: numpy (>=1.24.4,<2.0.0) ; extra == "screen-recorder"
Requires-Dist: opentelemetry-api (>=1.33.1,<2.0.0)
Requires-Dist: opentelemetry-exporter-otlp-proto-grpc (>=1.33.1,<2.0.0)
Requires-Dist: opentelemetry-exporter-otlp-proto-http (>=1.33.1,<2.0.0)
Requires-Dist: opentelemetry-instrumentation-grpc (>=0.54b0,<0.55)
Requires-Dist: opentelemetry-instrumentation-httpx (>=0.54b0,<0.55)
Requires-Dist: opentelemetry-instrumentation-requests (>=0.54b0,<0.55)
Requires-Dist: opentelemetry-sdk (>=1.33.1,<2.0.0)
Requires-Dist: pillow (>=10.4.0,<11.0.0) ; extra == "screen-recorder"
Requires-Dist: pyconfs (>=0.5.5,<0.6.0)
Requires-Dist: pydantic (>=2.5.2,<3.0.0)
Requires-Dist: pyjwt (>=2.9.0,<3.0.0)
Requires-Dist: pyyaml (>=5.4.1)
Requires-Dist: requests (>=2.28.1,<3.0.0)
Requires-Dist: robotframework-seleniumlibrary (>=6.5.0,<7.0.0) ; extra == "screen-recorder"
Requires-Dist: t-vault-manager (>=0.1.20,<0.2.0) ; extra == "t-vault"
Project-URL: Documentation, https://www.notion.so/thoughtfulautomation/Thoughtful-Library-c0333f67989d4044aa0a595eaf8fd07b
Project-URL: Repository, https://github.com/thoughtful-automation/thoughtful
Description-Content-Type: text/markdown

**thoughtful** is a collection of open-source libraries and tools for Robot Process
Automation (RPA) development. The goal of this project is to provide a set of
for supervising bot execution, and enabling these bots to do more.

[![PyPi version](https://badgen.net/pypi/v/thoughtful/)](https://pypi.org/project/thoughtful/)
[![Supported Versions](https://img.shields.io/pypi/pyversions/thoughtful.svg)](https://pypi.org/project/thoughtful)
[![Downloads](https://pepy.tech/badge/thoughtful/month)](https://pepy.tech/project/thoughtful)

[//]: # "[![GitHub release](https://img.shields.io/github/release/Thoughtful-Automation/supervisor.svg)](https://GitHub.com/Naereen/StrapDown.js/releases/)"

This project is:

- Open-source: [GitHub][url:gh]
- Owned by [thoughtful][url:ta]
- Licensed under the [Apache License 2.0][url:al]

Links:

- [Homepage][url:gh]
- [Documentation][url:docs]
- [PyPI][url:pypi]

**thoughtful** is available on [PyPI][url:pypi] and can be installed using pip:

```sh
pip install thoughtful
```

---

**thoughtful** officially supports Python 3.10+.

---

# Libraries

## Supervisor

Supervisor is a Workflow Engine for Digital Workers that constructs
and broadcasts a detailed and structured telemetric log, called the Run Report.

### Detailed documentation

Detailed documentation on how to utilize Supervisor can be found [here][url:supervisor_docs].

### Usage

```python
from thoughtful.supervisor import step, step_scope, supervise, set_step_status


# using the step decorator
@step("2")
def step_2(name: str) -> bool:
    print(f'Hello {name}')
    return True  # some condition

def main() -> None:
    # using the step_scope context manager
    with step_scope('1') as step_context:
        try:
            print("Getting credentials")
            # ...
        except Exception as e:
            # set step status using method
            step_context.set_status("warning")

    if not step_2():
        # set step status using function
        set_step_status("2", "fail")

if __name__ == '__main__':
    with supervise():
        main()
```

## Telemetry & Observability

The Supervisor automatically provides comprehensive observability for your bot workflows with **zero code changes** required. Simply use the `supervise()` context manager and your workflows are automatically instrumented with distributed tracing, metrics, and structured logging.

### 🚀 Seamless Integration

**No code changes needed** - telemetry is automatically enabled when you use the supervisor:

```python
from thoughtful.supervisor import supervise
from t_vault import bw_login_from_env

# Login to Bitwarden first
bw_login_from_env()

# That's it! Telemetry starts automatically
with supervise(manifest="manifest.yaml"):
    main()
```

### 🔧 Automatic Configuration

The supervisor automatically configures telemetry using your existing Bitwarden
`otl-info` item which we configure to retain our up to date Endpoint/Auth info:

- **Endpoint**: Retrieved from `bw_get_item("otl-info")["username"]`
- **Authentication**: Retrieved from `bw_get_item("otl-info")["password"]`
- **Zero configuration**: Works out-of-the-box with your existing vault setup

### 🔌 Endpoint Usage & Exporter Selection

The telemetry system uses intelligent endpoint resolution and exporter selection:

#### **Bitwarden Endpoints (Automatic)**
When using Bitwarden configuration, the system automatically:
- **Uses gRPC exporter** for all telemetry types
- **Assumes port 4317** (standard gRPC port)
- **No path segments needed** (gRPC handles this internally)

#### **Custom Endpoints (Port-Based Detection)**
When providing custom endpoints, the system determines the exporter based on the port:

| Port | Protocol | Exporter | Path Handling |
|------|----------|----------|---------------|
| `4317` | gRPC | `GRPCOTLP*Exporter` | No path segments |
| `4318` | HTTP | `HTTPOTLP*Exporter` | Adds `/v1/{telemetry_type}` |
| No port | HTTP | `HTTPOTLP*Exporter` | Adds `/v1/{telemetry_type}` |

#### **Example Endpoint Resolution**
```python
# Bitwarden endpoint (always gRPC)
"otel-collector.obs.thoughtful.ai:4317" → GRPCOTLPMetricExporter

# Custom gRPC endpoint
"https://custom.example.com:4317" → GRPCOTLPMetricExporter

# Custom HTTP endpoint
"https://custom.example.com:4318" → HTTPOTLPMetricExporter + /v1/metrics

# Custom HTTP endpoint (no port)
"https://custom.example.com" → HTTPOTLPMetricExporter + /v1/metrics
```

### 📊 What You Get Automatically

- **📈 Distributed Tracing**: Complete workflow execution traces with step-by-step timing
- **📊 Performance Metrics**: Execution counts, success rates, and duration statistics
- **📝 Structured Logs**: Contextual logging with automatic trace correlation
- **🌐 HTTP Monitoring**: Automatic tracing of external API calls and responses

### 📋 Manifest Standards for Telemetry

To ensure optimal telemetry performance, follow these standards when creating your `manifest.yaml`:

#### **Fields with Length Limits**
- **`uid`**: Maximum 5 characters (e.g., `"PAR3"`, `"AOC2"`)
  - Used as service name in all telemetry
  - Automatically truncated with warning if exceeded
  - Must be unique across your agent

- **`step_id`**: Maximum 8 characters (e.g., `"1.1"`, `"auth"`)
  - Used in span names and metric names
  - You can add larger description to describe it using `description` field, but
    shorten the `step_id` field to 8 characters max
  - Critical for telemetry compliance

#### **Agent-Type Field**
- **`agent_type`**: No length limit (e.g., `"CODY"`, `"CAM"`, `"PAULA"`)
  - Used for company-wide agent-type aggregation metrics
  - Creates cross-agent metrics: `sup.{agent_type}.workflow.started`, `sup.{agent_type}.workflow.completed`, `sup.{agent_type}.workflow.failed`
  - Adds `agent.type` resource attribute for filtering/grouping
  - Optional - telemetry works without it

> **Note**: Only `uid` and `step_id` have length limits as they're used in OpenTelemetry metric names. The `agent_type` field enables company-wide agent performance analysis across all agents of the same type.

#### **Environment Detection**
The supervisor automatically detects the deployment environment and includes it in all telemetry data:

- **Production**: Set `THOUGHTFUL_PRODUCTION` environment variable to any value
  - Results in `deployment.environment = "supervisor.prod"`
- **Development**: Leave `THOUGHTFUL_PRODUCTION` unset or empty
  - Results in `deployment.environment = "supervisor.dev"`

This allows you to filter and analyze telemetry data by environment in your observability platform.

### 🎯 Benefits

- **🔍 Debug Faster**: See exactly where workflows fail and how long each step takes
- **📈 Monitor Performance**: Track success rates, execution times, and resource usage
- **🚨 Proactive Alerts**: Get notified of issues before they impact users
- **📊 Business Insights**: Understand workflow patterns and optimization opportunities

### 🔧 Optional: Custom Configuration

For advanced use cases, you can provide custom telemetry configuration:

```python
with supervise(
    manifest="manifest.yaml",
    otlp_config={
        "tracing_endpoint": "http://localhost:4317",  # gRPC (port 4317)
        "metrics_endpoint": "http://localhost:4318",  # HTTP (port 4318)
        "auth_headers": {"Authorization": "Bearer your-token"}
    }
):
    main()
```

### ⚙️ Export Batching Configuration

The telemetry system uses optimized batching for efficient data export:
- **Metrics**: Exported every 10 seconds via PeriodicExportingMetricReader
- **Logs**: Batched automatically by OpenTelemetry LogRecordProcessor
- **Traces**: Batched automatically by OpenTelemetry BatchSpanProcessor

**Configuration Locations:**
- **Metrics**: `thoughtful/supervisor/telemetry/metrics/config.py:46-50` (customizable interval)
- **Logs**: `thoughtful/supervisor/telemetry/logging/config.py:20-40` (customizable defaults)
- **Traces**: `thoughtful/supervisor/telemetry/tracing/config.py:60` (OpenTelemetry defaults)

### 📚 Observability Platform

Your telemetry data is automatically sent to Thoughtful's observability platform, where you can:

- **View workflow traces** in real-time
- **Monitor performance metrics** with custom dashboards
- **Set up alerts** for failures or performance degradation
- **Analyze trends** across your bot fleet

### 🔗 Learn More

- [Thoughtful Observability Platform](https://hyperdx.obs.thoughtful.ai/)
- [OpenTelemetry Documentation](https://opentelemetry.io/docs/)

### 📝 Abbreviations & Naming Conventions

The supervisor uses specific abbreviations and shortening logic for telemetry metrics and identifiers to ensure consistency and readability:

#### **Metric Naming Prefixes**
- **`sup.`** - Primary prefix for all telemetry metrics (Supervisor)
- **`sup.manifest.*`** - Manifest-related metrics (uid, description, author, source, agent_type)
- **`sup.workflow.*`** - Workflow structure metrics (total_steps, top_level_steps, step_ids, max_depth)
- **`sup.{service_name}.workflow.*`** - Service-specific workflow metrics (started, completed, failed)
- **`sup.{service_name}.{step_id}.*`** - Step-specific metrics (executions, duration)
- **`sup.{service_name}.errors.*`** - Error tracking metrics (total, by type)
- **`sup.{service_name}.agent.calls`** - External service call metrics

#### **Service Name Shortening Logic**
Service names are automatically shortened to maintain metric readability:


#### **Endpoint Abbreviations**
External service endpoints are automatically shortened using predefined abbreviations:

| Service | Full Name | Abbreviation | Example |
|---------|-----------|-------------|---------|
| JSONPlaceholder | `placeholder` | `ph` | `jsonplaceholder.typicode.com` → `jsonph.typicode.com` |
| Typicode | `typicode` | `tc` | `api.typicode.com` → `api.tc.com` |
| GitHub | `github` | `gh` | `api.github.com` → `api.gh.com` |
| HTTPBin | `httpbin` | `hb` | `httpbin.org` → `hb.org` |
| Google APIs | `googleapis` | `gapi` | `www.googleapis.com` → `www.gapi.com` |
| Amazon AWS | `amazonaws` | `aws` | `api.amazonaws.com` → `api.aws.com` |
| Microsoft | `microsoft` | `ms` | `graph.microsoft.com` → `graph.ms.com` |
| Cloudflare | `cloudflare` | `cf` | `api.cloudflare.com` → `api.cf.com` |
| OpenAI | `openai` | `oai` | `api.openai.com` → `api.oai.com` |
| Anthropic | `anthropic` | `ant` | `api.anthropic.com` → `api.ant.com` |
| Claude | `claude` | `cl` | `claude.ai` → `cl.ai` |
| GPT | `gpt` | `gpt` | `gpt.openai.com` → `gpt.oai.com` |
| Gemini | `gemini` | `gem` | `gemini.google.com` → `gem.google.com` |

## Screen Recorder

The ScreenRecorder library facilitates the recording of screen activity from a
programmatic browser session and generates a video file of the recorded session.

### Detailed documentation

Detailed documentation on how to utilize Screen Recorder can be found [here][url:screen_recorder_docs].

### Prerequisites

Ensure you have already downloaded `FFmpeg` as it is utilized to create the video recording.

https://www.ffmpeg.org/download.html

### Installation

Install the optional `screen-recorder` extras

#### Poetry

```shell
poetry install -E screen-recorder
```

#### Pip

```shell
pip install thoughtful[screen-recorder]
```

### Usage

**WARNING: It is essential that you call `end_recording` at the end of a recording.**

**If you do not call `end_recording`, the recording threads will continue to run until your program ends and a
video will not be created.**

```python
from thoughtful.screen_recorder import ScreenRecorder, BrowserManager
from RPA.Browser.Selenium import Selenium # This dependency must be installed separately

class YoutubeScraper(ScreenRecorder):
    def __init__(self) -> None:
        self._selenium_instance = Selenium()
        super().__init__(browser_manager=BrowserManager(instance=self._selenium_instance))

youtube_scraper = YoutubeScraper()
try:
    # ... Perform actions here ...
finally:
    if youtube_scraper:
        # We recommend calling `end_recording` in a `finally` block to ensure that
        # video processing occurs and all recording threads are terminated even if the Process fails
        youtube_scraper.end_recording()
```

## Contributing

Contributions to **thoughtful** are welcome!

To get started, see the [contributing guide](CONTRIBUTING.md).

---

Made with ❤️ by

[![Thoughtful](https://user-images.githubusercontent.com/1096881/141985289-317c2e72-3c2d-4e6b-800a-0def1a05f599.png)][url:ta]

---

This project is open-source and licensed under the terms of the [Apache License 2.0][url:al].

<!--  Link References -->

[url:ta]: https://www.thoughtful.ai/
[url:gh]: https://github.com/Thoughtful-Automation/supervisor
[url:pypi]: https://pypi.org/project/thoughtful/
[git:issues]: https://github.com/Thoughtful-Automation/supervisor/issues
[url:docs]: https://www.notion.so/thoughtfulautomation/Thoughtful-Library-c0333f67989d4044aa0a595eaf8fd07b
[url:al]: http://www.apache.org/licenses/LICENSE-2.0
[url:supervisor_docs]: https://www.notion.so/thoughtfulautomation/How-to-develop-with-Supervisor-4247b8d2a5a747b6bff1d232ad395e9c
[url:screen_recorder_docs]: https://www.notion.so/thoughtfulautomation/ScreenRecorder-67380d38b18345f9bac039ff0ef38b0a

