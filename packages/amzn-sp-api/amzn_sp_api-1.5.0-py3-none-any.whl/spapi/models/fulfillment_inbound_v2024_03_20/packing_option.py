# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PackingOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discounts': 'List[Incentive]',
        'expiration': 'datetime',
        'fees': 'List[Incentive]',
        'packing_groups': 'List[str]',
        'packing_option_id': 'str',
        'status': 'str',
        'supported_configurations': 'List[PackingConfiguration]',
        'supported_shipping_configurations': 'List[ShippingConfiguration]',
    }

    attribute_map = {
        'discounts': 'discounts',
        'expiration': 'expiration',
        'fees': 'fees',
        'packing_groups': 'packingGroups',
        'packing_option_id': 'packingOptionId',
        'status': 'status',
        'supported_configurations': 'supportedConfigurations',
        'supported_shipping_configurations': 'supportedShippingConfigurations',
    }

    def __init__(self, discounts=None, expiration=None, fees=None, packing_groups=None, packing_option_id=None, status=None, supported_configurations=None, supported_shipping_configurations=None, _configuration=None):  # noqa: E501
        """PackingOption - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._discounts = None
        self._expiration = None
        self._fees = None
        self._packing_groups = None
        self._packing_option_id = None
        self._status = None
        self._supported_configurations = None
        self._supported_shipping_configurations = None
        self.discriminator = None

        self.discounts = discounts
        if expiration is not None:
            self.expiration = expiration
        self.fees = fees
        self.packing_groups = packing_groups
        self.packing_option_id = packing_option_id
        self.status = status
        self.supported_configurations = supported_configurations
        self.supported_shipping_configurations = supported_shipping_configurations

    @property
    def discounts(self):
        """Gets the discounts of this PackingOption.  # noqa: E501

        Discount for the offered option.  # noqa: E501

        :return: The discounts of this PackingOption.  # noqa: E501
        :rtype: List[Incentive]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this PackingOption.

        Discount for the offered option.  # noqa: E501

        :param discounts: The discounts of this PackingOption.  # noqa: E501
        :type: List[Incentive]
        """
        if self._configuration.client_side_validation and discounts is None:
            raise ValueError("Invalid value for `discounts`, must not be `None`")  # noqa: E501

        self._discounts = discounts

    @property
    def expiration(self):
        """Gets the expiration of this PackingOption.  # noqa: E501

        The time at which this packing option is no longer valid. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.  # noqa: E501

        :return: The expiration of this PackingOption.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this PackingOption.

        The time at which this packing option is no longer valid. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.  # noqa: E501

        :param expiration: The expiration of this PackingOption.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def fees(self):
        """Gets the fees of this PackingOption.  # noqa: E501

        Fee for the offered option.  # noqa: E501

        :return: The fees of this PackingOption.  # noqa: E501
        :rtype: List[Incentive]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this PackingOption.

        Fee for the offered option.  # noqa: E501

        :param fees: The fees of this PackingOption.  # noqa: E501
        :type: List[Incentive]
        """
        if self._configuration.client_side_validation and fees is None:
            raise ValueError("Invalid value for `fees`, must not be `None`")  # noqa: E501

        self._fees = fees

    @property
    def packing_groups(self):
        """Gets the packing_groups of this PackingOption.  # noqa: E501

        Packing group IDs.  # noqa: E501

        :return: The packing_groups of this PackingOption.  # noqa: E501
        :rtype: List[str]
        """
        return self._packing_groups

    @packing_groups.setter
    def packing_groups(self, packing_groups):
        """Sets the packing_groups of this PackingOption.

        Packing group IDs.  # noqa: E501

        :param packing_groups: The packing_groups of this PackingOption.  # noqa: E501
        :type: List[str]
        """
        if self._configuration.client_side_validation and packing_groups is None:
            raise ValueError("Invalid value for `packing_groups`, must not be `None`")  # noqa: E501

        self._packing_groups = packing_groups

    @property
    def packing_option_id(self):
        """Gets the packing_option_id of this PackingOption.  # noqa: E501

        Identifier of a packing option.  # noqa: E501

        :return: The packing_option_id of this PackingOption.  # noqa: E501
        :rtype: str
        """
        return self._packing_option_id

    @packing_option_id.setter
    def packing_option_id(self, packing_option_id):
        """Sets the packing_option_id of this PackingOption.

        Identifier of a packing option.  # noqa: E501

        :param packing_option_id: The packing_option_id of this PackingOption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and packing_option_id is None:
            raise ValueError("Invalid value for `packing_option_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                packing_option_id is not None and len(packing_option_id) > 38):
            raise ValueError("Invalid value for `packing_option_id`, length must be less than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                packing_option_id is not None and len(packing_option_id) < 38):
            raise ValueError("Invalid value for `packing_option_id`, length must be greater than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                packing_option_id is not None and not re.search(r'^[a-zA-Z0-9-]*$', packing_option_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `packing_option_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9-]*$/`")  # noqa: E501

        self._packing_option_id = packing_option_id

    @property
    def status(self):
        """Gets the status of this PackingOption.  # noqa: E501

        The status of the packing option. Possible values: `OFFERED`, `ACCEPTED`, `EXPIRED`.  # noqa: E501

        :return: The status of this PackingOption.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PackingOption.

        The status of the packing option. Possible values: `OFFERED`, `ACCEPTED`, `EXPIRED`.  # noqa: E501

        :param status: The status of this PackingOption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                status is not None and len(status) > 1024):
            raise ValueError("Invalid value for `status`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                status is not None and len(status) < 1):
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    @property
    def supported_configurations(self):
        """Gets the supported_configurations of this PackingOption.  # noqa: E501

        A list of possible configurations for this option.  # noqa: E501

        :return: The supported_configurations of this PackingOption.  # noqa: E501
        :rtype: List[PackingConfiguration]
        """
        return self._supported_configurations

    @supported_configurations.setter
    def supported_configurations(self, supported_configurations):
        """Sets the supported_configurations of this PackingOption.

        A list of possible configurations for this option.  # noqa: E501

        :param supported_configurations: The supported_configurations of this PackingOption.  # noqa: E501
        :type: List[PackingConfiguration]
        """
        if self._configuration.client_side_validation and supported_configurations is None:
            raise ValueError("Invalid value for `supported_configurations`, must not be `None`")  # noqa: E501

        self._supported_configurations = supported_configurations

    @property
    def supported_shipping_configurations(self):
        """Gets the supported_shipping_configurations of this PackingOption.  # noqa: E501

        **This field is deprecated**. Use the `shippingRequirements` property under `supportedConfigurations` instead. List of supported shipping modes.  # noqa: E501

        :return: The supported_shipping_configurations of this PackingOption.  # noqa: E501
        :rtype: List[ShippingConfiguration]
        """
        return self._supported_shipping_configurations

    @supported_shipping_configurations.setter
    def supported_shipping_configurations(self, supported_shipping_configurations):
        """Sets the supported_shipping_configurations of this PackingOption.

        **This field is deprecated**. Use the `shippingRequirements` property under `supportedConfigurations` instead. List of supported shipping modes.  # noqa: E501

        :param supported_shipping_configurations: The supported_shipping_configurations of this PackingOption.  # noqa: E501
        :type: List[ShippingConfiguration]
        """
        if self._configuration.client_side_validation and supported_shipping_configurations is None:
            raise ValueError("Invalid value for `supported_shipping_configurations`, must not be `None`")  # noqa: E501

        self._supported_shipping_configurations = supported_shipping_configurations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackingOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackingOption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackingOption):
            return True

        return self.to_dict() != other.to_dict()
