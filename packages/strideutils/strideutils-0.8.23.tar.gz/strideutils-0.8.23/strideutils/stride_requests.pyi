import datetime
import pandas as pd
from _typeshed import Incomplete
from functools import lru_cache
from strideutils import types as types
from strideutils.stride_config import config as config
from typing import Any

ACCOUNT_QUERY: str
ACCOUNT_BALANCE_QUERY: str
ACCOUNT_DELEGATIONS_QUERY: str
ACCOUNT_UNBONDINGS_QUERY: str
MODULE_ACCOUNTS_QUERY: str
SUPPLY_QUERY: str
VALIDATORS_QUERY: str
VALIDATOR_SLASHES_QUERY: str
DELEGATIONS_QUERY: str
CONNECTION_QUERY: str
CHANNELS_QUERY: str
CHANNEL_QUERY: str
TXS_QUERY: str
TX_BY_ACCOUNT_EVENT: str
HOST_ZONE_QUERY: str
EPOCHS_QUERY: str
PENDING_ICQ_QUERY: str
RATE_LIMIT_QUERY: str
DEPOSIT_RECORDS_QUERY: str
UNBONDING_RECORDS_QUERY: str
REDEMPTION_RECORDS_QUERY: str
LSM_RECORDS_QUERY: str
CALLBACK_DATA_QUERY: str
AUCTION_QUERY: str
AUCTIONS_QUERY: str
ICQORACLE_QUOTE_TOKEN_QUERY: str
TOTAL_BURNED_QUERY: str
STAKETIA: str
STAKEDYM: str
DYMENSION_CHAIN_ID: str
CELESTIA_CHAIN_ID: str
MULTISIG_HOST_ZONE_QUERY: str
MULTISIG_DELEGATION_RECORDS_QUERY: str
MULTISIG_UNBONDING_RECORDS_QUERY: str
MULTISIG_REDEMPTION_RECORDS_QUERY: str
COSMWASM_CONTRACT_QUERY: str
CHANNELS_SUMMARY_QUERY_BY_HOST: str
CHANNELS_SUMMARY_QUERY: str
ERC20_ABI: Incomplete
requests_session: Incomplete
retries: Incomplete

def request(url: str, method: str = 'GET', headers: dict[str, str] = {}, params: dict | list[tuple[str, str]] = {}, data: str | None = None, json: dict | None = None, block_height: int = 0, cache_response: bool = False, _cache: dict[str, Any] = {}): ...
def query_list_with_pagination(endpoint: str, rel_key: str, block_height: int = 0, max_pages: int = 50, params: dict | list[tuple[str, str]] = {}) -> list[dict]: ...
def get_all_host_zones(include_multisig_hosts: bool = True) -> list[dict]: ...
def get_host_zone(chain_id: str, cast_types: bool = True, **kwargs) -> dict[str, Any]: ...
def get_deposit_records(chain_id: str, status: types.DepositRecordStatus | None = None, block_height: int = 0) -> list[dict[str, Any]]: ...
def get_unbonding_records(chain_id: str, status: types.UnbondingRecordStatus | None = None, block_height: int = 0) -> list[dict[str, Any]]: ...
def get_unbonding_queue_records(chain_id: str, block_height: int = 0) -> list[dict[str, Any]]: ...
def get_unbonded_records(chain_id: str, block_height: int = 0, filter_unbonded_last_epoch: bool = False) -> list[dict[str, Any]]: ...
def get_user_redemption_records(chain_id: str | None = None) -> list[dict]: ...
def get_redemption_rate_slack() -> pd.DataFrame: ...
def get_redemption_rate_slack_string() -> str: ...
def get_lsm_deposit_records(chain_id: str) -> list[dict[str, Any]]: ...
def get_multisig_delegation_records(module: str, include_archived: bool = False) -> list[dict]: ...
def get_multisig_unbonding_records(module: str, include_archived: bool = False) -> list[dict]: ...
def get_multisig_redemption_records(module: str, address: str | None = None, unbonding_record_id: int | None = None) -> list[dict]: ...
def get_rate_limits(**kwargs): ...
def get_pending_interchain_queries(chain_id: str | None = None, block_height: int = 0) -> list[dict[str, Any]]: ...
def get_callback_data(chain_id: str | None = None, channel_id: str | None = None, port_id: str | None = None, callback_id: str | None = None, block_height: int = 0) -> list[dict[str, Any]]: ...
def get_validators(api_endpoint: str = ...) -> list[dict[str, Any]]: ...
def get_validator_slashes(api_endpoint: str, validator_address: str) -> list[dict[str, str]]: ...
def get_redemption_rate(token: str) -> float: ...
def get_tvl_in_utokens(host_zone_id: str) -> float: ...
def get_latest_block(rpc_endpoint: str = ...) -> int: ...
def convert_cosmos_address(address: str, new_prefix: str) -> str: ...
def get_balances(address: str, block_height: int = 0, api_endpoint: str = ..., cache_response: bool = False) -> dict[str, int]: ...
def get_balance(address: str, denom: str, block_height: int = 0, api_endpoint: str = ..., cache_response: bool = False) -> int: ...
def get_supply(denom: str, block_height: int = 0, api_endpoint: str = ..., cache_response: bool = False) -> int: ...
@lru_cache
def get_block_time(height: int, rpc_endpoint: str = ...) -> datetime.datetime: ...
@lru_cache
def get_icns_name(address: str) -> str: ...
def get_account_info(address: str, api_endpoint: str = ...): ...
def get_tx(hash: str, api_endpoint: str = ...) -> dict: ...
def get_txs(event_filters: list[str], api_endpoint: str = ..., limit=None, sdk50: bool = True) -> dict: ...
def get_tx_info(address: str, sequence: str | int, api_endpoint: str = ...) -> dict: ...
def generate_vesting_account(start_time_in_local_tz: str, total_tokens: int, seconds_in_period: int = 3600, number_of_days: int = 30, output_file: str = 'vesting_account.json') -> str: ...
def get_block_height_in_past(target_time: datetime.datetime | None = None, target_time_offset: datetime.timedelta | None = None, error_tolerance: datetime.timedelta = ..., seconds_per_block: int = 6, rpc_endpoint: str = ...) -> int: ...
def get_block_height_one_day_ago() -> int: ...
def get_unbonding_tokens_on_address(delegator_address: str, api_endpoint: str = ...) -> dict[str, int]: ...
def get_delegations(delegator_address: str, api_endpoint: str = ...) -> dict[str, int]: ...
def get_host_zone_delegations(host_zone_id: str, include_ground_truth: bool = True) -> pd.DataFrame: ...
def get_epochs() -> list[dict]: ...
def get_day_epoch() -> dict[str, Any]: ...
def get_stride_epoch() -> dict[str, Any]: ...
def get_stride_epoch_number() -> int: ...
def get_day_epoch_number() -> int: ...
def get_stride_epoch_start_time() -> datetime.datetime: ...
def get_day_epoch_start_time() -> datetime.datetime: ...
def get_stride_epoch_start_height() -> int: ...
def get_day_epoch_start_height() -> int: ...
def get_all_host_zone_channels() -> list[dict[str, Any]]: ...
def get_host_zone_channels(chain_id: str) -> dict[str, Any]: ...
def query_wasm_contract(contract_address: str, query_msg: dict, api_endpoint: str, block_height: int = 0) -> dict: ...
def get_module_accounts(api_endpoint: str = ...) -> list[dict]: ...
def query_evm_method(method: str, params: list[str], rpc_endpoint: str) -> str: ...
def get_evm_balance(address: str, rpc_endpoint: str, token_address: str | None = None, decimals: int = 16) -> int: ...
def get_auction(name: str, api_endpoint: str = ...) -> dict: ...
def get_auctions(api_endpoint: str = ...) -> dict: ...
def quote_auction_token_price(base_denom: str, quote_denom: str, api_endpoint: str = ...) -> float: ...
def get_total_strd_burned(api_endpoint: str = ..., block_height: int = 0) -> int: ...
