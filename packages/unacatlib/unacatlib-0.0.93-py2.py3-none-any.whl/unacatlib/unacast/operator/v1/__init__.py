# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/operator/v1/address_component_operator_service.proto, unacast/operator/v1/catalog_operator_service.proto, unacast/operator/v1/composite_metric_operator_service.proto, unacast/operator/v1/dataset_operator_service.proto, unacast/operator/v1/dimension_operator_service.proto, unacast/operator/v1/index_job.proto, unacast/operator/v1/index_job_operator_service.proto, unacast/operator/v1/map_operator_service.proto, unacast/operator/v1/metric_model_operator_service.proto, unacast/operator/v1/metric_operator_service.proto
# plugin: python-betterproto
# This file has been @generated
import warnings
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import unatype as __unatype__
from ...catalog import v1 as __catalog_v1__
from ...dataset import v1 as __dataset_v1__
from ...index import v1 as __index_v1__
from ...maps import v1 as __maps_v1__
from ...metric import v1 as __metric_v1__
from ...metricmodel import v1 as __metricmodel_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class AggregationStrategy(betterproto.Enum):
    DEFAULT = 0
    COPY = 1


@dataclass(eq=False, repr=False)
class GetLayerRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    include_index_events: bool = betterproto.bool_field(5)
    include_address_components: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class GetLayerResponse(betterproto.Message):
    layer: "__maps_v1__.Layer" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateLayerRequest(betterproto.Message):
    given_id: str = betterproto.string_field(2)
    spec: "__maps_v1__.LayerSpec" = betterproto.message_field(5)
    layer_kind: "__maps_v1__.LayerKind" = betterproto.enum_field(6)
    display_name: str = betterproto.string_field(8)
    description: str = betterproto.string_field(9)
    skip_address_component: bool = betterproto.bool_field(10)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class IndexLayerRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    big_query_table_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class IndexLayerResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetLastIndexLayerResponseRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdateLayerAvailabilityRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    target_availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class DeleteLayerRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetLayerSeriesRequest(betterproto.Message):
    layer_series_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class LayerSeriesFilter(betterproto.Message):
    catalog_ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListLayerSeriesRequest(betterproto.Message):
    filter: "LayerSeriesFilter" = betterproto.message_field(1)
    page_token: str = betterproto.string_field(14)
    page_size: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class ListLayerSeriesResponse(betterproto.Message):
    layer_series: List["__maps_v1__.MapLayerSeries"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class CreateLayerSeriesRequest(betterproto.Message):
    given_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    spec: "__maps_v1__.LayerSpec" = betterproto.message_field(5)
    country: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CreateLayerSeriesResponse(betterproto.Message):
    layer_series: "__maps_v1__.MapLayerSeries" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PrepareLayerSeriesRevisionRequest(betterproto.Message):
    layer_series_id: str = betterproto.string_field(1)
    availability: "__unatype__.Availability" = betterproto.enum_field(2)
    layer_version: str = betterproto.string_field(4)
    """Optional spec-changes"""

    layer_spec: "__maps_v1__.LayerSpec" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PrepareLayerSeriesRevisionResponse(betterproto.Message):
    layer_series_id: str = betterproto.string_field(1)
    layer_series_revision: str = betterproto.string_field(2)
    layer_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class InitiatePublishLayerSeriesRevisionRequest(betterproto.Message):
    layer_series_id: str = betterproto.string_field(1)
    layer_series_revision: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class InitiatePublishLayerSeriesRevisionResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FinalizePublishLayerSeriesRevisionRequest(betterproto.Message):
    layer_series_id: str = betterproto.string_field(1)
    layer_series_revision: str = betterproto.string_field(2)
    ignore_data_validation: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class FinalizePublishLayerSeriesRevisionResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NewLayerSeriesRevisionBasedOnDataSourceRequest(betterproto.Message):
    layer_series_id: str = betterproto.string_field(1)
    big_query_table_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UpdateMetricTagRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    tag_type: str = betterproto.string_field(2)
    tag_values: List[str] = betterproto.string_field(3)
    replace: bool = betterproto.bool_field(4)
    create_if_not_present: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class DeleteMetricTagRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    tag_type: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateMetricRequest(betterproto.Message):
    given_id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    spec: "__metric_v1__.MetricSpec" = betterproto.message_field(3)
    catalog_id: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    version_spec: "__metric_v1__.VersionSpec" = betterproto.message_field(6)
    tags: List["__metric_v1__.TagSpec"] = betterproto.message_field(8)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class GetMetricRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetMetricResponse(betterproto.Message):
    metric: "__metric_v1__.Metric" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateMetricRequest(betterproto.Message):
    metric: "__metric_v1__.Metric" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class UpdateMetricGroupRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    metric_id: str = betterproto.string_field(3)
    key: str = betterproto.string_field(4)
    key_display_name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class GetMetricGroupRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CleanupMetricRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RemoveMetricFromElasticSearchRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteMetricRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class IndexMetricRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    big_query_table_id: str = betterproto.string_field(2)
    change_set: bool = betterproto.bool_field(3)
    is_priority: bool = betterproto.bool_field(4)
    start_date_string: str = betterproto.string_field(5)
    end_date_string: str = betterproto.string_field(6)
    skip_data_completeness_check: bool = betterproto.bool_field(7)
    skip_layeradvancement: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class IndexMetricResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MigrateMetricAvailabilityRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class GetIndexJobStatusRequest(betterproto.Message):
    """Old request"""

    index_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetIndexJobStatusResponse(betterproto.Message):
    index: "__index_v1__.Index" = betterproto.message_field(1)
    status: "__index_v1__.IndexStatus" = betterproto.enum_field(2)
    error_details: List["FailedIndexEvent"] = betterproto.message_field(3)
    is_ready: bool = betterproto.bool_field(4)
    status_string: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class GetJobStatusRequest(betterproto.Message):
    job_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetJobStatusResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    error_details: List["FailedIndexEvent"] = betterproto.message_field(2)
    is_ready: bool = betterproto.bool_field(3)
    status: "__index_v1__.IndexStatus" = betterproto.enum_field(4)
    status_string: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class FailedIndexEvent(betterproto.Message):
    event_id: str = betterproto.string_field(1)
    error_message: str = betterproto.string_field(2)
    update_time_string: str = betterproto.string_field(3)
    index_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetMetricModelRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListMetricModelsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListMetricModelsResponse(betterproto.Message):
    metric_models: List["__metricmodel_v1__.MetricModel"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateMetricModelRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    billing_account_id: str = betterproto.string_field(2)
    storage_access_id: str = betterproto.string_field(3)
    display_name: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CreateMetricModelRevisionRequest(betterproto.Message):
    metric_model_id: str = betterproto.string_field(1)
    revision: str = betterproto.string_field(2)
    status: "__metricmodel_v1__.MetricModelRevisionStatus" = betterproto.enum_field(3)
    production_lag_days: int = betterproto.int32_field(4)
    earliest_observation_period_start: str = betterproto.string_field(5)
    spec: "__metricmodel_v1__.MetricModelSpec" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ChangeRevisionStatusRequest(betterproto.Message):
    metric_model_id: str = betterproto.string_field(1)
    revision: str = betterproto.string_field(2)
    status: "__metricmodel_v1__.MetricModelRevisionStatus" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class SetMetricModelCurrentRevisionRequest(betterproto.Message):
    metric_model_id: str = betterproto.string_field(1)
    revision: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListAddressComponentRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(4)
    map_layer_id: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ListAddressComponentResponse(betterproto.Message):
    address_components: List["__maps_v1__.AddressComponent"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class CreateAddressComponentRequest(betterproto.Message):
    component: str = betterproto.string_field(1)
    short_name: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(7)
    catalog_id: str = betterproto.string_field(4)
    kind: "__maps_v1__.ComponentKind" = betterproto.enum_field(5)
    map_layer_id: str = betterproto.string_field(6)
    id_display_name: str = betterproto.string_field(8)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class IndexAddressComponentRequest(betterproto.Message):
    component: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(5)
    big_query_table_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class IndexAddressComponentResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteAddressComponentRequest(betterproto.Message):
    component: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CreateCompositeMetricRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    given_id: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    spec: "CompositeMetricSpec" = betterproto.message_field(5)
    version_spec: "__metric_v1__.VersionSpec" = betterproto.message_field(6)
    tags: List["__metric_v1__.TagSpec"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class CreateCompositeMetricResponse(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)
    spec: "CompositeMetricSpec" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetCompositeMetricRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetCompositeMetricResponse(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric: "__metric_v1__.Metric" = betterproto.message_field(4)
    """Metric object"""

    spec: "CompositeMetricSpec" = betterproto.message_field(3)
    """Composite metric spec"""


@dataclass(eq=False, repr=False)
class DeleteCompositeMetricRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CompositeMetricSpec(betterproto.Message):
    cadence: "__metric_v1__.Cadence" = betterproto.enum_field(3)
    """target temporal cadence"""

    map_layer_id: str = betterproto.string_field(4)
    """target spatial resolution"""

    related_map_layer_id: str = betterproto.string_field(5)
    layer_relationship_name: str = betterproto.string_field(13)
    related_layer_relationship_name: str = betterproto.string_field(14)
    values: List["CompositeMetricValueSpec"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class CompositeMetricValueSpec(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    """source metric"""

    value_name: str = betterproto.string_field(2)
    """source value from specified metric"""

    target_value_name_override: str = betterproto.string_field(10)
    """override source value to target value"""

    aggregation_strategy: "AggregationStrategy" = betterproto.enum_field(5)
    """
    What tecnhique is used to aggregate the source metric to the target metric
    """

    spatial_join_strategy: str = betterproto.string_field(6)
    """
    Spatial Join, relevant when target has related map layer
    
     Allowed values:
     - "": no spatial join specified, will only work when this is unambiguous
     - "feature": joins on feature only, source must be a metric without related map layer
     - "relation": joins on both feature and related feature, both source and target must be a metric with related map layer
     - "related_feature": joins on related feature only, source must be a metric without related map layer, target must be a metric with related map layer
    """

    allow_missing_value: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GetDatasetRequest(betterproto.Message):
    dataset_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DatasetFilter(betterproto.Message):
    map_layer_series_ids: List[str] = betterproto.string_field(1)
    catalog_ids: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListDatasetsRequest(betterproto.Message):
    filter: "DatasetFilter" = betterproto.message_field(2)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListDatasetsResponse(betterproto.Message):
    datasets: List["__dataset_v1__.Dataset"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class CreateDatasetRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(2)
    map_layer_series_id: str = betterproto.string_field(3)
    pinned_map_layer_revision: str = betterproto.string_field(4)
    """If set will pin Dataset to revision of the map layer series"""

    metric_model_id: str = betterproto.string_field(5)
    pinned_metric_model_revision: str = betterproto.string_field(6)
    """If set will pin dataset to revision of the metric model"""

    cadence: "__metric_v1__.Cadence" = betterproto.enum_field(7)
    processing_cadence: "__metric_v1__.Cadence" = betterproto.enum_field(10)
    start_date: str = betterproto.string_field(8)
    """
    If empty Dataset will use MetricModelRevisions Start Date
     Format: YYYY-MM-DD
    """

    end_date: str = betterproto.string_field(9)
    """
    If empty Dataset will get data appended to it as it becomes available 
     Format: YYYY-MM-DD
    """


@dataclass(eq=False, repr=False)
class DeleteDatasetRequest(betterproto.Message):
    dataset_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SetDatasetPeriodBoundRequest(betterproto.Message):
    dataset_id: str = betterproto.string_field(1)
    start_date: str = betterproto.string_field(2)
    end_date: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PinMapLayerRevisionRequest(betterproto.Message):
    dataset_id: str = betterproto.string_field(1)
    map_layer_revision: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PinMetricModelRevisionRequest(betterproto.Message):
    dataset_id: str = betterproto.string_field(1)
    metric_model_revision: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDatasetProductionStatusRequest(betterproto.Message):
    dataset_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDatasetProductionStatusResponse(betterproto.Message):
    dataset_id: str = betterproto.string_field(1)
    status: "__dataset_v1__.DatasetDataProductionStatus" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CreateCatalogRequest(betterproto.Message):
    given_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class IndexJob(betterproto.Message):
    id: str = betterproto.string_field(1)
    target_object_id: str = betterproto.string_field(2)
    kind: str = betterproto.string_field(3)
    index_id: str = betterproto.string_field(4)
    initial_observation_start_date: str = betterproto.string_field(5)
    final_observation_end_date: str = betterproto.string_field(6)
    create_time_string: str = betterproto.string_field(7)
    update_time_string: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class ListDimensionRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListDimensionResponse(betterproto.Message):
    dimensions: List["__metric_v1__.Dimension"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateDimensionRequest(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)
    id_display_name: str = betterproto.string_field(5)
    description: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class IndexDimensionRequest(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(5)
    big_query_table_id: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class IndexDimensionResponse(betterproto.Message):
    job_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteDimensionRequest(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(5)


class MapOperatorServiceStub(betterproto.ServiceStub):
    async def create_layer(
        self,
        create_layer_request: "CreateLayerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__maps_v1__.Layer":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/CreateLayer",
            create_layer_request,
            __maps_v1__.Layer,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_layer(
        self,
        delete_layer_request: "DeleteLayerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/DeleteLayer",
            delete_layer_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_layer_availability(
        self,
        update_layer_availability_request: "UpdateLayerAvailabilityRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/UpdateLayerAvailability",
            update_layer_availability_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def index_layer(
        self,
        index_layer_request: "IndexLayerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IndexLayerResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/IndexLayer",
            index_layer_request,
            IndexLayerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_last_index_layer_response(
        self,
        get_last_index_layer_response_request: "GetLastIndexLayerResponseRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IndexLayerResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/GetLastIndexLayerResponse",
            get_last_index_layer_response_request,
            IndexLayerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_layer(
        self,
        get_layer_request: "GetLayerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetLayerResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/GetLayer",
            get_layer_request,
            GetLayerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_layer_series(
        self,
        get_layer_series_request: "GetLayerSeriesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__maps_v1__.MapLayerSeries":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/GetLayerSeries",
            get_layer_series_request,
            __maps_v1__.MapLayerSeries,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_layer_series(
        self,
        list_layer_series_request: "ListLayerSeriesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListLayerSeriesResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/ListLayerSeries",
            list_layer_series_request,
            ListLayerSeriesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_layer_series(
        self,
        create_layer_series_request: "CreateLayerSeriesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateLayerSeriesResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/CreateLayerSeries",
            create_layer_series_request,
            CreateLayerSeriesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def prepare_layer_series_revision(
        self,
        prepare_layer_series_revision_request: "PrepareLayerSeriesRevisionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PrepareLayerSeriesRevisionResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/PrepareLayerSeriesRevision",
            prepare_layer_series_revision_request,
            PrepareLayerSeriesRevisionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def initiate_publish_layer_series_revision(
        self,
        initiate_publish_layer_series_revision_request: "InitiatePublishLayerSeriesRevisionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "InitiatePublishLayerSeriesRevisionResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/InitiatePublishLayerSeriesRevision",
            initiate_publish_layer_series_revision_request,
            InitiatePublishLayerSeriesRevisionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def finalize_publish_layer_series_revision(
        self,
        finalize_publish_layer_series_revision_request: "FinalizePublishLayerSeriesRevisionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FinalizePublishLayerSeriesRevisionResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/FinalizePublishLayerSeriesRevision",
            finalize_publish_layer_series_revision_request,
            FinalizePublishLayerSeriesRevisionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def new_layer_series_revision_based_on_data_source(
        self,
        new_layer_series_revision_based_on_data_source_request: "NewLayerSeriesRevisionBasedOnDataSourceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.MapOperatorService/NewLayerSeriesRevisionBasedOnDataSource",
            new_layer_series_revision_based_on_data_source_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MetricOperatorServiceStub(betterproto.ServiceStub):
    async def create_metric(
        self,
        create_metric_request: "CreateMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metric_v1__.Metric":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/CreateMetric",
            create_metric_request,
            __metric_v1__.Metric,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_metric(
        self,
        get_metric_request: "GetMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMetricResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/GetMetric",
            get_metric_request,
            GetMetricResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_metric(
        self,
        update_metric_request: "UpdateMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metric_v1__.Metric":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/UpdateMetric",
            update_metric_request,
            __metric_v1__.Metric,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_metric(
        self,
        delete_metric_request: "DeleteMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/DeleteMetric",
            delete_metric_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clean_metric_data(
        self,
        cleanup_metric_request: "CleanupMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metric_v1__.Metric":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/CleanMetricData",
            cleanup_metric_request,
            __metric_v1__.Metric,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def index_metric(
        self,
        index_metric_request: "IndexMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IndexMetricResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/IndexMetric",
            index_metric_request,
            IndexMetricResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_metric_tag(
        self,
        update_metric_tag_request: "UpdateMetricTagRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metric_v1__.MetricParent":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/UpdateMetricTag",
            update_metric_tag_request,
            __metric_v1__.MetricParent,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_metric_tag(
        self,
        delete_metric_tag_request: "DeleteMetricTagRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metric_v1__.MetricParent":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/DeleteMetricTag",
            delete_metric_tag_request,
            __metric_v1__.MetricParent,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_metric_group(
        self,
        update_metric_group_request: "UpdateMetricGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metric_v1__.MetricGroup":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/UpdateMetricGroup",
            update_metric_group_request,
            __metric_v1__.MetricGroup,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_metric_from_elastic_search(
        self,
        remove_metric_from_elastic_search_request: "RemoveMetricFromElasticSearchRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        warnings.warn(
            "MetricOperatorService.remove_metric_from_elastic_search is deprecated",
            DeprecationWarning,
        )

        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/RemoveMetricFromElasticSearch",
            remove_metric_from_elastic_search_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def migrate_metric_availability(
        self,
        migrate_metric_availability_request: "MigrateMetricAvailabilityRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricOperatorService/MigrateMetricAvailability",
            migrate_metric_availability_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class IndexJobOperatorServiceStub(betterproto.ServiceStub):
    async def get_index_status(
        self,
        get_index_job_status_request: "GetIndexJobStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetIndexJobStatusResponse":
        warnings.warn(
            "IndexJobOperatorService.get_index_status is deprecated", DeprecationWarning
        )

        return await self._unary_unary(
            "/unacast.operator.v1.IndexJobOperatorService/GetIndexStatus",
            get_index_job_status_request,
            GetIndexJobStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_index_job_status(
        self,
        get_job_status_request: "GetJobStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetJobStatusResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.IndexJobOperatorService/GetIndexJobStatus",
            get_job_status_request,
            GetJobStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MetricModelOperatorServiceStub(betterproto.ServiceStub):
    async def get_metric_model(
        self,
        get_metric_model_request: "GetMetricModelRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metricmodel_v1__.MetricModel":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricModelOperatorService/GetMetricModel",
            get_metric_model_request,
            __metricmodel_v1__.MetricModel,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_metric_models(
        self,
        list_metric_models_request: "ListMetricModelsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListMetricModelsResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricModelOperatorService/ListMetricModels",
            list_metric_models_request,
            ListMetricModelsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_metric_model(
        self,
        create_metric_model_request: "CreateMetricModelRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metricmodel_v1__.MetricModel":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricModelOperatorService/CreateMetricModel",
            create_metric_model_request,
            __metricmodel_v1__.MetricModel,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_metric_model_revision(
        self,
        create_metric_model_revision_request: "CreateMetricModelRevisionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metricmodel_v1__.MetricModelRevision":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricModelOperatorService/CreateMetricModelRevision",
            create_metric_model_revision_request,
            __metricmodel_v1__.MetricModelRevision,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_revision_status(
        self,
        change_revision_status_request: "ChangeRevisionStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metricmodel_v1__.MetricModelRevision":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricModelOperatorService/ChangeRevisionStatus",
            change_revision_status_request,
            __metricmodel_v1__.MetricModelRevision,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_metric_model_current_revision(
        self,
        set_metric_model_current_revision_request: "SetMetricModelCurrentRevisionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metricmodel_v1__.MetricModel":
        return await self._unary_unary(
            "/unacast.operator.v1.MetricModelOperatorService/SetMetricModelCurrentRevision",
            set_metric_model_current_revision_request,
            __metricmodel_v1__.MetricModel,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class AddressComponentOperatorServiceStub(betterproto.ServiceStub):
    async def create_address_component(
        self,
        create_address_component_request: "CreateAddressComponentRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__maps_v1__.AddressComponent":
        return await self._unary_unary(
            "/unacast.operator.v1.AddressComponentOperatorService/CreateAddressComponent",
            create_address_component_request,
            __maps_v1__.AddressComponent,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def index_address_component(
        self,
        index_address_component_request: "IndexAddressComponentRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IndexAddressComponentResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.AddressComponentOperatorService/IndexAddressComponent",
            index_address_component_request,
            IndexAddressComponentResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_address_component(
        self,
        delete_address_component_request: "DeleteAddressComponentRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.AddressComponentOperatorService/DeleteAddressComponent",
            delete_address_component_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_address_component(
        self,
        list_address_component_request: "ListAddressComponentRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListAddressComponentResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.AddressComponentOperatorService/ListAddressComponent",
            list_address_component_request,
            ListAddressComponentResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CompositeMetricOperatorServiceStub(betterproto.ServiceStub):
    async def create_composite_metric(
        self,
        create_composite_metric_request: "CreateCompositeMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateCompositeMetricResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.CompositeMetricOperatorService/CreateCompositeMetric",
            create_composite_metric_request,
            CreateCompositeMetricResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_composite_metric(
        self,
        get_composite_metric_request: "GetCompositeMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCompositeMetricResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.CompositeMetricOperatorService/GetCompositeMetric",
            get_composite_metric_request,
            GetCompositeMetricResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_composite_metric(
        self,
        delete_composite_metric_request: "DeleteCompositeMetricRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.CompositeMetricOperatorService/DeleteCompositeMetric",
            delete_composite_metric_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class DatasetOperatorServiceStub(betterproto.ServiceStub):
    async def get_dataset(
        self,
        get_dataset_request: "GetDatasetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__dataset_v1__.Dataset":
        return await self._unary_unary(
            "/unacast.operator.v1.DatasetOperatorService/GetDataset",
            get_dataset_request,
            __dataset_v1__.Dataset,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_datasets(
        self,
        list_datasets_request: "ListDatasetsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListDatasetsResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.DatasetOperatorService/ListDatasets",
            list_datasets_request,
            ListDatasetsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_dataset(
        self,
        create_dataset_request: "CreateDatasetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__dataset_v1__.Dataset":
        return await self._unary_unary(
            "/unacast.operator.v1.DatasetOperatorService/CreateDataset",
            create_dataset_request,
            __dataset_v1__.Dataset,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_dataset(
        self,
        delete_dataset_request: "DeleteDatasetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.DatasetOperatorService/DeleteDataset",
            delete_dataset_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_dataset_period_bound(
        self,
        set_dataset_period_bound_request: "SetDatasetPeriodBoundRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__dataset_v1__.Dataset":
        return await self._unary_unary(
            "/unacast.operator.v1.DatasetOperatorService/SetDatasetPeriodBound",
            set_dataset_period_bound_request,
            __dataset_v1__.Dataset,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pin_map_layer_revision(
        self,
        pin_map_layer_revision_request: "PinMapLayerRevisionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__dataset_v1__.Dataset":
        return await self._unary_unary(
            "/unacast.operator.v1.DatasetOperatorService/PinMapLayerRevision",
            pin_map_layer_revision_request,
            __dataset_v1__.Dataset,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pin_metric_model_revision(
        self,
        pin_metric_model_revision_request: "PinMetricModelRevisionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__dataset_v1__.Dataset":
        return await self._unary_unary(
            "/unacast.operator.v1.DatasetOperatorService/PinMetricModelRevision",
            pin_metric_model_revision_request,
            __dataset_v1__.Dataset,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def trigger_dataset_extensions(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.DatasetOperatorService/TriggerDatasetExtensions",
            betterproto_lib_google_protobuf_empty,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_dataset_production_status(
        self,
        get_dataset_production_status_request: "GetDatasetProductionStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDatasetProductionStatusResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.DatasetOperatorService/GetDatasetProductionStatus",
            get_dataset_production_status_request,
            GetDatasetProductionStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CatalogOperatorServiceStub(betterproto.ServiceStub):
    async def create_catalog(
        self,
        create_catalog_request: "CreateCatalogRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__catalog_v1__.Catalog":
        return await self._unary_unary(
            "/unacast.operator.v1.CatalogOperatorService/CreateCatalog",
            create_catalog_request,
            __catalog_v1__.Catalog,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class DimensionOperatorServiceStub(betterproto.ServiceStub):
    async def create_dimension(
        self,
        create_dimension_request: "CreateDimensionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "__metric_v1__.Dimension":
        return await self._unary_unary(
            "/unacast.operator.v1.DimensionOperatorService/CreateDimension",
            create_dimension_request,
            __metric_v1__.Dimension,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def index_dimension(
        self,
        index_dimension_request: "IndexDimensionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IndexDimensionResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.DimensionOperatorService/IndexDimension",
            index_dimension_request,
            IndexDimensionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_dimension(
        self,
        delete_dimension_request: "DeleteDimensionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.operator.v1.DimensionOperatorService/DeleteDimension",
            delete_dimension_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_dimension(
        self,
        list_dimension_request: "ListDimensionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListDimensionResponse":
        return await self._unary_unary(
            "/unacast.operator.v1.DimensionOperatorService/ListDimension",
            list_dimension_request,
            ListDimensionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MapOperatorServiceBase(ServiceBase):

    async def create_layer(
        self, create_layer_request: "CreateLayerRequest"
    ) -> "__maps_v1__.Layer":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_layer(
        self, delete_layer_request: "DeleteLayerRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_layer_availability(
        self, update_layer_availability_request: "UpdateLayerAvailabilityRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def index_layer(
        self, index_layer_request: "IndexLayerRequest"
    ) -> "IndexLayerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_last_index_layer_response(
        self, get_last_index_layer_response_request: "GetLastIndexLayerResponseRequest"
    ) -> "IndexLayerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_layer(
        self, get_layer_request: "GetLayerRequest"
    ) -> "GetLayerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_layer_series(
        self, get_layer_series_request: "GetLayerSeriesRequest"
    ) -> "__maps_v1__.MapLayerSeries":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_layer_series(
        self, list_layer_series_request: "ListLayerSeriesRequest"
    ) -> "ListLayerSeriesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_layer_series(
        self, create_layer_series_request: "CreateLayerSeriesRequest"
    ) -> "CreateLayerSeriesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def prepare_layer_series_revision(
        self, prepare_layer_series_revision_request: "PrepareLayerSeriesRevisionRequest"
    ) -> "PrepareLayerSeriesRevisionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def initiate_publish_layer_series_revision(
        self,
        initiate_publish_layer_series_revision_request: "InitiatePublishLayerSeriesRevisionRequest",
    ) -> "InitiatePublishLayerSeriesRevisionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def finalize_publish_layer_series_revision(
        self,
        finalize_publish_layer_series_revision_request: "FinalizePublishLayerSeriesRevisionRequest",
    ) -> "FinalizePublishLayerSeriesRevisionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def new_layer_series_revision_based_on_data_source(
        self,
        new_layer_series_revision_based_on_data_source_request: "NewLayerSeriesRevisionBasedOnDataSourceRequest",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_layer(
        self, stream: "grpclib.server.Stream[CreateLayerRequest, __maps_v1__.Layer]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_layer(request)
        await stream.send_message(response)

    async def __rpc_delete_layer(
        self,
        stream: "grpclib.server.Stream[DeleteLayerRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_layer(request)
        await stream.send_message(response)

    async def __rpc_update_layer_availability(
        self,
        stream: "grpclib.server.Stream[UpdateLayerAvailabilityRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_layer_availability(request)
        await stream.send_message(response)

    async def __rpc_index_layer(
        self, stream: "grpclib.server.Stream[IndexLayerRequest, IndexLayerResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.index_layer(request)
        await stream.send_message(response)

    async def __rpc_get_last_index_layer_response(
        self,
        stream: "grpclib.server.Stream[GetLastIndexLayerResponseRequest, IndexLayerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_last_index_layer_response(request)
        await stream.send_message(response)

    async def __rpc_get_layer(
        self, stream: "grpclib.server.Stream[GetLayerRequest, GetLayerResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_layer(request)
        await stream.send_message(response)

    async def __rpc_get_layer_series(
        self,
        stream: "grpclib.server.Stream[GetLayerSeriesRequest, __maps_v1__.MapLayerSeries]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_layer_series(request)
        await stream.send_message(response)

    async def __rpc_list_layer_series(
        self,
        stream: "grpclib.server.Stream[ListLayerSeriesRequest, ListLayerSeriesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_layer_series(request)
        await stream.send_message(response)

    async def __rpc_create_layer_series(
        self,
        stream: "grpclib.server.Stream[CreateLayerSeriesRequest, CreateLayerSeriesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_layer_series(request)
        await stream.send_message(response)

    async def __rpc_prepare_layer_series_revision(
        self,
        stream: "grpclib.server.Stream[PrepareLayerSeriesRevisionRequest, PrepareLayerSeriesRevisionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.prepare_layer_series_revision(request)
        await stream.send_message(response)

    async def __rpc_initiate_publish_layer_series_revision(
        self,
        stream: "grpclib.server.Stream[InitiatePublishLayerSeriesRevisionRequest, InitiatePublishLayerSeriesRevisionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.initiate_publish_layer_series_revision(request)
        await stream.send_message(response)

    async def __rpc_finalize_publish_layer_series_revision(
        self,
        stream: "grpclib.server.Stream[FinalizePublishLayerSeriesRevisionRequest, FinalizePublishLayerSeriesRevisionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.finalize_publish_layer_series_revision(request)
        await stream.send_message(response)

    async def __rpc_new_layer_series_revision_based_on_data_source(
        self,
        stream: "grpclib.server.Stream[NewLayerSeriesRevisionBasedOnDataSourceRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.new_layer_series_revision_based_on_data_source(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.operator.v1.MapOperatorService/CreateLayer": grpclib.const.Handler(
                self.__rpc_create_layer,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateLayerRequest,
                __maps_v1__.Layer,
            ),
            "/unacast.operator.v1.MapOperatorService/DeleteLayer": grpclib.const.Handler(
                self.__rpc_delete_layer,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteLayerRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.operator.v1.MapOperatorService/UpdateLayerAvailability": grpclib.const.Handler(
                self.__rpc_update_layer_availability,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateLayerAvailabilityRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.operator.v1.MapOperatorService/IndexLayer": grpclib.const.Handler(
                self.__rpc_index_layer,
                grpclib.const.Cardinality.UNARY_UNARY,
                IndexLayerRequest,
                IndexLayerResponse,
            ),
            "/unacast.operator.v1.MapOperatorService/GetLastIndexLayerResponse": grpclib.const.Handler(
                self.__rpc_get_last_index_layer_response,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLastIndexLayerResponseRequest,
                IndexLayerResponse,
            ),
            "/unacast.operator.v1.MapOperatorService/GetLayer": grpclib.const.Handler(
                self.__rpc_get_layer,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLayerRequest,
                GetLayerResponse,
            ),
            "/unacast.operator.v1.MapOperatorService/GetLayerSeries": grpclib.const.Handler(
                self.__rpc_get_layer_series,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLayerSeriesRequest,
                __maps_v1__.MapLayerSeries,
            ),
            "/unacast.operator.v1.MapOperatorService/ListLayerSeries": grpclib.const.Handler(
                self.__rpc_list_layer_series,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListLayerSeriesRequest,
                ListLayerSeriesResponse,
            ),
            "/unacast.operator.v1.MapOperatorService/CreateLayerSeries": grpclib.const.Handler(
                self.__rpc_create_layer_series,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateLayerSeriesRequest,
                CreateLayerSeriesResponse,
            ),
            "/unacast.operator.v1.MapOperatorService/PrepareLayerSeriesRevision": grpclib.const.Handler(
                self.__rpc_prepare_layer_series_revision,
                grpclib.const.Cardinality.UNARY_UNARY,
                PrepareLayerSeriesRevisionRequest,
                PrepareLayerSeriesRevisionResponse,
            ),
            "/unacast.operator.v1.MapOperatorService/InitiatePublishLayerSeriesRevision": grpclib.const.Handler(
                self.__rpc_initiate_publish_layer_series_revision,
                grpclib.const.Cardinality.UNARY_UNARY,
                InitiatePublishLayerSeriesRevisionRequest,
                InitiatePublishLayerSeriesRevisionResponse,
            ),
            "/unacast.operator.v1.MapOperatorService/FinalizePublishLayerSeriesRevision": grpclib.const.Handler(
                self.__rpc_finalize_publish_layer_series_revision,
                grpclib.const.Cardinality.UNARY_UNARY,
                FinalizePublishLayerSeriesRevisionRequest,
                FinalizePublishLayerSeriesRevisionResponse,
            ),
            "/unacast.operator.v1.MapOperatorService/NewLayerSeriesRevisionBasedOnDataSource": grpclib.const.Handler(
                self.__rpc_new_layer_series_revision_based_on_data_source,
                grpclib.const.Cardinality.UNARY_UNARY,
                NewLayerSeriesRevisionBasedOnDataSourceRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }


class MetricOperatorServiceBase(ServiceBase):

    async def create_metric(
        self, create_metric_request: "CreateMetricRequest"
    ) -> "__metric_v1__.Metric":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_metric(
        self, get_metric_request: "GetMetricRequest"
    ) -> "GetMetricResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_metric(
        self, update_metric_request: "UpdateMetricRequest"
    ) -> "__metric_v1__.Metric":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_metric(
        self, delete_metric_request: "DeleteMetricRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clean_metric_data(
        self, cleanup_metric_request: "CleanupMetricRequest"
    ) -> "__metric_v1__.Metric":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def index_metric(
        self, index_metric_request: "IndexMetricRequest"
    ) -> "IndexMetricResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_metric_tag(
        self, update_metric_tag_request: "UpdateMetricTagRequest"
    ) -> "__metric_v1__.MetricParent":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_metric_tag(
        self, delete_metric_tag_request: "DeleteMetricTagRequest"
    ) -> "__metric_v1__.MetricParent":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_metric_group(
        self, update_metric_group_request: "UpdateMetricGroupRequest"
    ) -> "__metric_v1__.MetricGroup":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_metric_from_elastic_search(
        self,
        remove_metric_from_elastic_search_request: "RemoveMetricFromElasticSearchRequest",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def migrate_metric_availability(
        self, migrate_metric_availability_request: "MigrateMetricAvailabilityRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_metric(
        self, stream: "grpclib.server.Stream[CreateMetricRequest, __metric_v1__.Metric]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_metric(request)
        await stream.send_message(response)

    async def __rpc_get_metric(
        self, stream: "grpclib.server.Stream[GetMetricRequest, GetMetricResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_metric(request)
        await stream.send_message(response)

    async def __rpc_update_metric(
        self, stream: "grpclib.server.Stream[UpdateMetricRequest, __metric_v1__.Metric]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_metric(request)
        await stream.send_message(response)

    async def __rpc_delete_metric(
        self,
        stream: "grpclib.server.Stream[DeleteMetricRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_metric(request)
        await stream.send_message(response)

    async def __rpc_clean_metric_data(
        self,
        stream: "grpclib.server.Stream[CleanupMetricRequest, __metric_v1__.Metric]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.clean_metric_data(request)
        await stream.send_message(response)

    async def __rpc_index_metric(
        self, stream: "grpclib.server.Stream[IndexMetricRequest, IndexMetricResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.index_metric(request)
        await stream.send_message(response)

    async def __rpc_update_metric_tag(
        self,
        stream: "grpclib.server.Stream[UpdateMetricTagRequest, __metric_v1__.MetricParent]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_metric_tag(request)
        await stream.send_message(response)

    async def __rpc_delete_metric_tag(
        self,
        stream: "grpclib.server.Stream[DeleteMetricTagRequest, __metric_v1__.MetricParent]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_metric_tag(request)
        await stream.send_message(response)

    async def __rpc_update_metric_group(
        self,
        stream: "grpclib.server.Stream[UpdateMetricGroupRequest, __metric_v1__.MetricGroup]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_metric_group(request)
        await stream.send_message(response)

    async def __rpc_remove_metric_from_elastic_search(
        self,
        stream: "grpclib.server.Stream[RemoveMetricFromElasticSearchRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_metric_from_elastic_search(request)
        await stream.send_message(response)

    async def __rpc_migrate_metric_availability(
        self,
        stream: "grpclib.server.Stream[MigrateMetricAvailabilityRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.migrate_metric_availability(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.operator.v1.MetricOperatorService/CreateMetric": grpclib.const.Handler(
                self.__rpc_create_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateMetricRequest,
                __metric_v1__.Metric,
            ),
            "/unacast.operator.v1.MetricOperatorService/GetMetric": grpclib.const.Handler(
                self.__rpc_get_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMetricRequest,
                GetMetricResponse,
            ),
            "/unacast.operator.v1.MetricOperatorService/UpdateMetric": grpclib.const.Handler(
                self.__rpc_update_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateMetricRequest,
                __metric_v1__.Metric,
            ),
            "/unacast.operator.v1.MetricOperatorService/DeleteMetric": grpclib.const.Handler(
                self.__rpc_delete_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteMetricRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.operator.v1.MetricOperatorService/CleanMetricData": grpclib.const.Handler(
                self.__rpc_clean_metric_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                CleanupMetricRequest,
                __metric_v1__.Metric,
            ),
            "/unacast.operator.v1.MetricOperatorService/IndexMetric": grpclib.const.Handler(
                self.__rpc_index_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                IndexMetricRequest,
                IndexMetricResponse,
            ),
            "/unacast.operator.v1.MetricOperatorService/UpdateMetricTag": grpclib.const.Handler(
                self.__rpc_update_metric_tag,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateMetricTagRequest,
                __metric_v1__.MetricParent,
            ),
            "/unacast.operator.v1.MetricOperatorService/DeleteMetricTag": grpclib.const.Handler(
                self.__rpc_delete_metric_tag,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteMetricTagRequest,
                __metric_v1__.MetricParent,
            ),
            "/unacast.operator.v1.MetricOperatorService/UpdateMetricGroup": grpclib.const.Handler(
                self.__rpc_update_metric_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateMetricGroupRequest,
                __metric_v1__.MetricGroup,
            ),
            "/unacast.operator.v1.MetricOperatorService/RemoveMetricFromElasticSearch": grpclib.const.Handler(
                self.__rpc_remove_metric_from_elastic_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveMetricFromElasticSearchRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.operator.v1.MetricOperatorService/MigrateMetricAvailability": grpclib.const.Handler(
                self.__rpc_migrate_metric_availability,
                grpclib.const.Cardinality.UNARY_UNARY,
                MigrateMetricAvailabilityRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }


class IndexJobOperatorServiceBase(ServiceBase):

    async def get_index_status(
        self, get_index_job_status_request: "GetIndexJobStatusRequest"
    ) -> "GetIndexJobStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_index_job_status(
        self, get_job_status_request: "GetJobStatusRequest"
    ) -> "GetJobStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_index_status(
        self,
        stream: "grpclib.server.Stream[GetIndexJobStatusRequest, GetIndexJobStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_index_status(request)
        await stream.send_message(response)

    async def __rpc_get_index_job_status(
        self, stream: "grpclib.server.Stream[GetJobStatusRequest, GetJobStatusResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_index_job_status(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.operator.v1.IndexJobOperatorService/GetIndexStatus": grpclib.const.Handler(
                self.__rpc_get_index_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetIndexJobStatusRequest,
                GetIndexJobStatusResponse,
            ),
            "/unacast.operator.v1.IndexJobOperatorService/GetIndexJobStatus": grpclib.const.Handler(
                self.__rpc_get_index_job_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetJobStatusRequest,
                GetJobStatusResponse,
            ),
        }


class MetricModelOperatorServiceBase(ServiceBase):

    async def get_metric_model(
        self, get_metric_model_request: "GetMetricModelRequest"
    ) -> "__metricmodel_v1__.MetricModel":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_metric_models(
        self, list_metric_models_request: "ListMetricModelsRequest"
    ) -> "ListMetricModelsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_metric_model(
        self, create_metric_model_request: "CreateMetricModelRequest"
    ) -> "__metricmodel_v1__.MetricModel":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_metric_model_revision(
        self, create_metric_model_revision_request: "CreateMetricModelRevisionRequest"
    ) -> "__metricmodel_v1__.MetricModelRevision":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_revision_status(
        self, change_revision_status_request: "ChangeRevisionStatusRequest"
    ) -> "__metricmodel_v1__.MetricModelRevision":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_metric_model_current_revision(
        self,
        set_metric_model_current_revision_request: "SetMetricModelCurrentRevisionRequest",
    ) -> "__metricmodel_v1__.MetricModel":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_metric_model(
        self,
        stream: "grpclib.server.Stream[GetMetricModelRequest, __metricmodel_v1__.MetricModel]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_metric_model(request)
        await stream.send_message(response)

    async def __rpc_list_metric_models(
        self,
        stream: "grpclib.server.Stream[ListMetricModelsRequest, ListMetricModelsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_metric_models(request)
        await stream.send_message(response)

    async def __rpc_create_metric_model(
        self,
        stream: "grpclib.server.Stream[CreateMetricModelRequest, __metricmodel_v1__.MetricModel]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_metric_model(request)
        await stream.send_message(response)

    async def __rpc_create_metric_model_revision(
        self,
        stream: "grpclib.server.Stream[CreateMetricModelRevisionRequest, __metricmodel_v1__.MetricModelRevision]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_metric_model_revision(request)
        await stream.send_message(response)

    async def __rpc_change_revision_status(
        self,
        stream: "grpclib.server.Stream[ChangeRevisionStatusRequest, __metricmodel_v1__.MetricModelRevision]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_revision_status(request)
        await stream.send_message(response)

    async def __rpc_set_metric_model_current_revision(
        self,
        stream: "grpclib.server.Stream[SetMetricModelCurrentRevisionRequest, __metricmodel_v1__.MetricModel]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_metric_model_current_revision(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.operator.v1.MetricModelOperatorService/GetMetricModel": grpclib.const.Handler(
                self.__rpc_get_metric_model,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMetricModelRequest,
                __metricmodel_v1__.MetricModel,
            ),
            "/unacast.operator.v1.MetricModelOperatorService/ListMetricModels": grpclib.const.Handler(
                self.__rpc_list_metric_models,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListMetricModelsRequest,
                ListMetricModelsResponse,
            ),
            "/unacast.operator.v1.MetricModelOperatorService/CreateMetricModel": grpclib.const.Handler(
                self.__rpc_create_metric_model,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateMetricModelRequest,
                __metricmodel_v1__.MetricModel,
            ),
            "/unacast.operator.v1.MetricModelOperatorService/CreateMetricModelRevision": grpclib.const.Handler(
                self.__rpc_create_metric_model_revision,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateMetricModelRevisionRequest,
                __metricmodel_v1__.MetricModelRevision,
            ),
            "/unacast.operator.v1.MetricModelOperatorService/ChangeRevisionStatus": grpclib.const.Handler(
                self.__rpc_change_revision_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                ChangeRevisionStatusRequest,
                __metricmodel_v1__.MetricModelRevision,
            ),
            "/unacast.operator.v1.MetricModelOperatorService/SetMetricModelCurrentRevision": grpclib.const.Handler(
                self.__rpc_set_metric_model_current_revision,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetMetricModelCurrentRevisionRequest,
                __metricmodel_v1__.MetricModel,
            ),
        }


class AddressComponentOperatorServiceBase(ServiceBase):

    async def create_address_component(
        self, create_address_component_request: "CreateAddressComponentRequest"
    ) -> "__maps_v1__.AddressComponent":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def index_address_component(
        self, index_address_component_request: "IndexAddressComponentRequest"
    ) -> "IndexAddressComponentResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_address_component(
        self, delete_address_component_request: "DeleteAddressComponentRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_address_component(
        self, list_address_component_request: "ListAddressComponentRequest"
    ) -> "ListAddressComponentResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_address_component(
        self,
        stream: "grpclib.server.Stream[CreateAddressComponentRequest, __maps_v1__.AddressComponent]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_address_component(request)
        await stream.send_message(response)

    async def __rpc_index_address_component(
        self,
        stream: "grpclib.server.Stream[IndexAddressComponentRequest, IndexAddressComponentResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.index_address_component(request)
        await stream.send_message(response)

    async def __rpc_delete_address_component(
        self,
        stream: "grpclib.server.Stream[DeleteAddressComponentRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_address_component(request)
        await stream.send_message(response)

    async def __rpc_list_address_component(
        self,
        stream: "grpclib.server.Stream[ListAddressComponentRequest, ListAddressComponentResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_address_component(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.operator.v1.AddressComponentOperatorService/CreateAddressComponent": grpclib.const.Handler(
                self.__rpc_create_address_component,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateAddressComponentRequest,
                __maps_v1__.AddressComponent,
            ),
            "/unacast.operator.v1.AddressComponentOperatorService/IndexAddressComponent": grpclib.const.Handler(
                self.__rpc_index_address_component,
                grpclib.const.Cardinality.UNARY_UNARY,
                IndexAddressComponentRequest,
                IndexAddressComponentResponse,
            ),
            "/unacast.operator.v1.AddressComponentOperatorService/DeleteAddressComponent": grpclib.const.Handler(
                self.__rpc_delete_address_component,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteAddressComponentRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.operator.v1.AddressComponentOperatorService/ListAddressComponent": grpclib.const.Handler(
                self.__rpc_list_address_component,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListAddressComponentRequest,
                ListAddressComponentResponse,
            ),
        }


class CompositeMetricOperatorServiceBase(ServiceBase):

    async def create_composite_metric(
        self, create_composite_metric_request: "CreateCompositeMetricRequest"
    ) -> "CreateCompositeMetricResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_composite_metric(
        self, get_composite_metric_request: "GetCompositeMetricRequest"
    ) -> "GetCompositeMetricResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_composite_metric(
        self, delete_composite_metric_request: "DeleteCompositeMetricRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_composite_metric(
        self,
        stream: "grpclib.server.Stream[CreateCompositeMetricRequest, CreateCompositeMetricResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_composite_metric(request)
        await stream.send_message(response)

    async def __rpc_get_composite_metric(
        self,
        stream: "grpclib.server.Stream[GetCompositeMetricRequest, GetCompositeMetricResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_composite_metric(request)
        await stream.send_message(response)

    async def __rpc_delete_composite_metric(
        self,
        stream: "grpclib.server.Stream[DeleteCompositeMetricRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_composite_metric(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.operator.v1.CompositeMetricOperatorService/CreateCompositeMetric": grpclib.const.Handler(
                self.__rpc_create_composite_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateCompositeMetricRequest,
                CreateCompositeMetricResponse,
            ),
            "/unacast.operator.v1.CompositeMetricOperatorService/GetCompositeMetric": grpclib.const.Handler(
                self.__rpc_get_composite_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCompositeMetricRequest,
                GetCompositeMetricResponse,
            ),
            "/unacast.operator.v1.CompositeMetricOperatorService/DeleteCompositeMetric": grpclib.const.Handler(
                self.__rpc_delete_composite_metric,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteCompositeMetricRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }


class DatasetOperatorServiceBase(ServiceBase):

    async def get_dataset(
        self, get_dataset_request: "GetDatasetRequest"
    ) -> "__dataset_v1__.Dataset":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_datasets(
        self, list_datasets_request: "ListDatasetsRequest"
    ) -> "ListDatasetsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_dataset(
        self, create_dataset_request: "CreateDatasetRequest"
    ) -> "__dataset_v1__.Dataset":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_dataset(
        self, delete_dataset_request: "DeleteDatasetRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_dataset_period_bound(
        self, set_dataset_period_bound_request: "SetDatasetPeriodBoundRequest"
    ) -> "__dataset_v1__.Dataset":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pin_map_layer_revision(
        self, pin_map_layer_revision_request: "PinMapLayerRevisionRequest"
    ) -> "__dataset_v1__.Dataset":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pin_metric_model_revision(
        self, pin_metric_model_revision_request: "PinMetricModelRevisionRequest"
    ) -> "__dataset_v1__.Dataset":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def trigger_dataset_extensions(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_dataset_production_status(
        self, get_dataset_production_status_request: "GetDatasetProductionStatusRequest"
    ) -> "GetDatasetProductionStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_dataset(
        self, stream: "grpclib.server.Stream[GetDatasetRequest, __dataset_v1__.Dataset]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_dataset(request)
        await stream.send_message(response)

    async def __rpc_list_datasets(
        self, stream: "grpclib.server.Stream[ListDatasetsRequest, ListDatasetsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_datasets(request)
        await stream.send_message(response)

    async def __rpc_create_dataset(
        self,
        stream: "grpclib.server.Stream[CreateDatasetRequest, __dataset_v1__.Dataset]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_dataset(request)
        await stream.send_message(response)

    async def __rpc_delete_dataset(
        self,
        stream: "grpclib.server.Stream[DeleteDatasetRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_dataset(request)
        await stream.send_message(response)

    async def __rpc_set_dataset_period_bound(
        self,
        stream: "grpclib.server.Stream[SetDatasetPeriodBoundRequest, __dataset_v1__.Dataset]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_dataset_period_bound(request)
        await stream.send_message(response)

    async def __rpc_pin_map_layer_revision(
        self,
        stream: "grpclib.server.Stream[PinMapLayerRevisionRequest, __dataset_v1__.Dataset]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pin_map_layer_revision(request)
        await stream.send_message(response)

    async def __rpc_pin_metric_model_revision(
        self,
        stream: "grpclib.server.Stream[PinMetricModelRevisionRequest, __dataset_v1__.Dataset]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pin_metric_model_revision(request)
        await stream.send_message(response)

    async def __rpc_trigger_dataset_extensions(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.trigger_dataset_extensions(request)
        await stream.send_message(response)

    async def __rpc_get_dataset_production_status(
        self,
        stream: "grpclib.server.Stream[GetDatasetProductionStatusRequest, GetDatasetProductionStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_dataset_production_status(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.operator.v1.DatasetOperatorService/GetDataset": grpclib.const.Handler(
                self.__rpc_get_dataset,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetRequest,
                __dataset_v1__.Dataset,
            ),
            "/unacast.operator.v1.DatasetOperatorService/ListDatasets": grpclib.const.Handler(
                self.__rpc_list_datasets,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListDatasetsRequest,
                ListDatasetsResponse,
            ),
            "/unacast.operator.v1.DatasetOperatorService/CreateDataset": grpclib.const.Handler(
                self.__rpc_create_dataset,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateDatasetRequest,
                __dataset_v1__.Dataset,
            ),
            "/unacast.operator.v1.DatasetOperatorService/DeleteDataset": grpclib.const.Handler(
                self.__rpc_delete_dataset,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteDatasetRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.operator.v1.DatasetOperatorService/SetDatasetPeriodBound": grpclib.const.Handler(
                self.__rpc_set_dataset_period_bound,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetDatasetPeriodBoundRequest,
                __dataset_v1__.Dataset,
            ),
            "/unacast.operator.v1.DatasetOperatorService/PinMapLayerRevision": grpclib.const.Handler(
                self.__rpc_pin_map_layer_revision,
                grpclib.const.Cardinality.UNARY_UNARY,
                PinMapLayerRevisionRequest,
                __dataset_v1__.Dataset,
            ),
            "/unacast.operator.v1.DatasetOperatorService/PinMetricModelRevision": grpclib.const.Handler(
                self.__rpc_pin_metric_model_revision,
                grpclib.const.Cardinality.UNARY_UNARY,
                PinMetricModelRevisionRequest,
                __dataset_v1__.Dataset,
            ),
            "/unacast.operator.v1.DatasetOperatorService/TriggerDatasetExtensions": grpclib.const.Handler(
                self.__rpc_trigger_dataset_extensions,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.operator.v1.DatasetOperatorService/GetDatasetProductionStatus": grpclib.const.Handler(
                self.__rpc_get_dataset_production_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetProductionStatusRequest,
                GetDatasetProductionStatusResponse,
            ),
        }


class CatalogOperatorServiceBase(ServiceBase):

    async def create_catalog(
        self, create_catalog_request: "CreateCatalogRequest"
    ) -> "__catalog_v1__.Catalog":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_catalog(
        self,
        stream: "grpclib.server.Stream[CreateCatalogRequest, __catalog_v1__.Catalog]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_catalog(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.operator.v1.CatalogOperatorService/CreateCatalog": grpclib.const.Handler(
                self.__rpc_create_catalog,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateCatalogRequest,
                __catalog_v1__.Catalog,
            ),
        }


class DimensionOperatorServiceBase(ServiceBase):

    async def create_dimension(
        self, create_dimension_request: "CreateDimensionRequest"
    ) -> "__metric_v1__.Dimension":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def index_dimension(
        self, index_dimension_request: "IndexDimensionRequest"
    ) -> "IndexDimensionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_dimension(
        self, delete_dimension_request: "DeleteDimensionRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_dimension(
        self, list_dimension_request: "ListDimensionRequest"
    ) -> "ListDimensionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_dimension(
        self,
        stream: "grpclib.server.Stream[CreateDimensionRequest, __metric_v1__.Dimension]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_dimension(request)
        await stream.send_message(response)

    async def __rpc_index_dimension(
        self,
        stream: "grpclib.server.Stream[IndexDimensionRequest, IndexDimensionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.index_dimension(request)
        await stream.send_message(response)

    async def __rpc_delete_dimension(
        self,
        stream: "grpclib.server.Stream[DeleteDimensionRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_dimension(request)
        await stream.send_message(response)

    async def __rpc_list_dimension(
        self,
        stream: "grpclib.server.Stream[ListDimensionRequest, ListDimensionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_dimension(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.operator.v1.DimensionOperatorService/CreateDimension": grpclib.const.Handler(
                self.__rpc_create_dimension,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateDimensionRequest,
                __metric_v1__.Dimension,
            ),
            "/unacast.operator.v1.DimensionOperatorService/IndexDimension": grpclib.const.Handler(
                self.__rpc_index_dimension,
                grpclib.const.Cardinality.UNARY_UNARY,
                IndexDimensionRequest,
                IndexDimensionResponse,
            ),
            "/unacast.operator.v1.DimensionOperatorService/DeleteDimension": grpclib.const.Handler(
                self.__rpc_delete_dimension,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteDimensionRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.operator.v1.DimensionOperatorService/ListDimension": grpclib.const.Handler(
                self.__rpc_list_dimension,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListDimensionRequest,
                ListDimensionResponse,
            ),
        }
