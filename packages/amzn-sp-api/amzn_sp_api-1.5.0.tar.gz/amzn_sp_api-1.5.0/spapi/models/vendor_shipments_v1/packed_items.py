# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PackedItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_sequence_number': 'str',
        'buyer_product_identifier': 'str',
        'vendor_product_identifier': 'str',
        'packed_quantity': 'ItemQuantity',
        'item_details': 'PackageItemDetails',
    }

    attribute_map = {
        'item_sequence_number': 'itemSequenceNumber',
        'buyer_product_identifier': 'buyerProductIdentifier',
        'vendor_product_identifier': 'vendorProductIdentifier',
        'packed_quantity': 'packedQuantity',
        'item_details': 'itemDetails',
    }

    def __init__(self, item_sequence_number=None, buyer_product_identifier=None, vendor_product_identifier=None, packed_quantity=None, item_details=None, _configuration=None):  # noqa: E501
        """PackedItems - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._item_sequence_number = None
        self._buyer_product_identifier = None
        self._vendor_product_identifier = None
        self._packed_quantity = None
        self._item_details = None
        self.discriminator = None

        if item_sequence_number is not None:
            self.item_sequence_number = item_sequence_number
        if buyer_product_identifier is not None:
            self.buyer_product_identifier = buyer_product_identifier
        if vendor_product_identifier is not None:
            self.vendor_product_identifier = vendor_product_identifier
        if packed_quantity is not None:
            self.packed_quantity = packed_quantity
        if item_details is not None:
            self.item_details = item_details

    @property
    def item_sequence_number(self):
        """Gets the item_sequence_number of this PackedItems.  # noqa: E501

        Item sequence number for the item. The first item will be 001, the second 002, and so on. This number is used as a reference to refer to this item from the carton or pallet level.  # noqa: E501

        :return: The item_sequence_number of this PackedItems.  # noqa: E501
        :rtype: str
        """
        return self._item_sequence_number

    @item_sequence_number.setter
    def item_sequence_number(self, item_sequence_number):
        """Sets the item_sequence_number of this PackedItems.

        Item sequence number for the item. The first item will be 001, the second 002, and so on. This number is used as a reference to refer to this item from the carton or pallet level.  # noqa: E501

        :param item_sequence_number: The item_sequence_number of this PackedItems.  # noqa: E501
        :type: str
        """

        self._item_sequence_number = item_sequence_number

    @property
    def buyer_product_identifier(self):
        """Gets the buyer_product_identifier of this PackedItems.  # noqa: E501

        Buyer Standard Identification Number (ASIN) of an item.  # noqa: E501

        :return: The buyer_product_identifier of this PackedItems.  # noqa: E501
        :rtype: str
        """
        return self._buyer_product_identifier

    @buyer_product_identifier.setter
    def buyer_product_identifier(self, buyer_product_identifier):
        """Sets the buyer_product_identifier of this PackedItems.

        Buyer Standard Identification Number (ASIN) of an item.  # noqa: E501

        :param buyer_product_identifier: The buyer_product_identifier of this PackedItems.  # noqa: E501
        :type: str
        """

        self._buyer_product_identifier = buyer_product_identifier

    @property
    def vendor_product_identifier(self):
        """Gets the vendor_product_identifier of this PackedItems.  # noqa: E501

        The vendor selected product identification of the item. Should be the same as was sent in the purchase order.  # noqa: E501

        :return: The vendor_product_identifier of this PackedItems.  # noqa: E501
        :rtype: str
        """
        return self._vendor_product_identifier

    @vendor_product_identifier.setter
    def vendor_product_identifier(self, vendor_product_identifier):
        """Sets the vendor_product_identifier of this PackedItems.

        The vendor selected product identification of the item. Should be the same as was sent in the purchase order.  # noqa: E501

        :param vendor_product_identifier: The vendor_product_identifier of this PackedItems.  # noqa: E501
        :type: str
        """

        self._vendor_product_identifier = vendor_product_identifier

    @property
    def packed_quantity(self):
        """Gets the packed_quantity of this PackedItems.  # noqa: E501


        :return: The packed_quantity of this PackedItems.  # noqa: E501
        :rtype: ItemQuantity
        """
        return self._packed_quantity

    @packed_quantity.setter
    def packed_quantity(self, packed_quantity):
        """Sets the packed_quantity of this PackedItems.


        :param packed_quantity: The packed_quantity of this PackedItems.  # noqa: E501
        :type: ItemQuantity
        """

        self._packed_quantity = packed_quantity

    @property
    def item_details(self):
        """Gets the item_details of this PackedItems.  # noqa: E501


        :return: The item_details of this PackedItems.  # noqa: E501
        :rtype: PackageItemDetails
        """
        return self._item_details

    @item_details.setter
    def item_details(self, item_details):
        """Sets the item_details of this PackedItems.


        :param item_details: The item_details of this PackedItems.  # noqa: E501
        :type: PackageItemDetails
        """

        self._item_details = item_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackedItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackedItems):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackedItems):
            return True

        return self.to_dict() != other.to_dict()
