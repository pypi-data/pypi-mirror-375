from ..dtype import get_default_dtype as get_default_dtype
from .utils import device_map_torch as device_map_torch, dtype_map_torch as dtype_map_torch
from pyvqnet.backends_mock import TorchMock as TorchMock

def empty(shape, vqnet_dtype): ...
def xavier_normal(shape, vqnet_dtype, gain: int = 1): ...
def xavier_normal_(w, gain: int = 1) -> None: ...
def xavier_uniform(shape, vqnet_dtype, gain: int = 1): ...
def xavier_uniform_(w, gain: int = 1) -> None: ...
def he_uniform(shape, vqnet_dtype, a=..., mode: str = 'fan_in', nonlinearity: str = 'leaky_relu'): ...
def he_uniform_(w, a=..., mode: str = 'fan_in', nonlinearity: str = 'leaky_relu') -> None: ...
def he_normal(shape, vqnet_dtype, a=..., mode: str = 'fan_in', nonlinearity: str = 'leaky_relu'): ...
def he_normal_(w, a=..., mode: str = 'fan_in', nonlinearity: str = 'leaky_relu') -> None: ...
def zeros(shape, vqnet_dtype): ...
def zeros_(w) -> None: ...
def ones(shape, vqnet_dtype): ...
def ones_(w) -> None: ...
def normal_(w, m: int = 0, s: int = 1) -> None: ...
def normal(shape, vqnet_dtype, m: int = 0, s: int = 1): ...
def uniform(shape, vqnet_dtype, a: int = 0, b: int = 1): ...
def uniform_(w, a: int = 0, b: int = 1) -> None: ...
def fill_(w, v) -> None: ...
