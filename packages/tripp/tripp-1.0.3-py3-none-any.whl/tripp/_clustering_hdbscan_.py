"""
    This file is part of the TrIPP software
    (https://github.com/fornililab/TrIPP).
    Copyright (c) Christos Matsingos, Ka Fu Man and Arianna Fornili.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3.

    This program is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>.
"""

from sklearn.cluster import HDBSCAN
from tripp._density_clustering_utilities_ import find_density_clustering_centroids

def hdbscan_clustering(
    min_cluster_size,
    min_samples,
    clustering_matrix,
    frames,
    find_centroid,
    trajectory_names,
    **kwargs
):
    """
    Function to run HDBSCAN clustering from scikit-learn.
    Standard HDBSCAN parameters can be found in the scikit-learn documentation:
    https://scikit-learn.org/stable/modules/generated/sklearn.cluster.HDBSCAN.html
    
    Parameters
    ----------
    min_cluster_size: int
        The minimum number of samples in a group for that group to be considered a cluster; 
        groupings smaller than this size will be left as noise. (from scikit-learn)
    min_samples: int
        The parameter k used to calculate the distance between a point x_p and its k-th nearest neighbor. 
        When None, defaults to min_cluster_size. (from scikit-learn)
    clustering_matrix: np.ndarray
        The clustering matrix (feature matrix) created by the create_clustering_matrix function.
    frames: list
        A list of frames corresponding to the points to be clustered.
    find_centroid: bool
        If True, the function will return the cluster centroids.
        If False, it will only return the labels.
    trajectory_names: np.ndarray
        An array of names of the trajectories to be clustered.
        Generated by the create_clustering_matrix function.
    kwargs:
        Additional keyword arguments for HDBSCAN, such as 'metric', 'cluster_selection_method', etc.
    Returns
    -------
    labels: np.ndarray
        An array of cluster labels for each point in the feature matrix.

    If `find_centroid=True`:
    
    cluster_centers: list
        Indices of the cluster centers within their individual trajectories (local indices). 
        Indices start from 0 for each trajectory.
    cluster_center_indices: list
        Indices of the cluster centers within the full feature matrix (global indices).
    cluster_centers_trajectories: list
        Trajectory names of the cluster centers.
    """

    hdbscan = HDBSCAN(
        min_cluster_size=min_cluster_size,
        min_samples=min_samples,
        **kwargs
    )
    hdbscan.fit(clustering_matrix)
    labels = hdbscan.labels_

    if find_centroid is True:
        (cluster_centers, cluster_center_indices, cluster_centers_trajectories
        ) = find_density_clustering_centroids(labels, frames, trajectory_names, clustering_matrix)
        return (
            labels,
            cluster_centers,
            cluster_center_indices,
            cluster_centers_trajectories,
        )

    elif find_centroid is False:
        return labels