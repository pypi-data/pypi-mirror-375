# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ImageComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_destination_id': 'str',
        'image_crop_specification': 'ImageCropSpecification',
        'alt_text': 'str',
    }

    attribute_map = {
        'upload_destination_id': 'uploadDestinationId',
        'image_crop_specification': 'imageCropSpecification',
        'alt_text': 'altText',
    }

    def __init__(self, upload_destination_id=None, image_crop_specification=None, alt_text=None, _configuration=None):  # noqa: E501
        """ImageComponent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._upload_destination_id = None
        self._image_crop_specification = None
        self._alt_text = None
        self.discriminator = None

        self.upload_destination_id = upload_destination_id
        self.image_crop_specification = image_crop_specification
        self.alt_text = alt_text

    @property
    def upload_destination_id(self):
        """Gets the upload_destination_id of this ImageComponent.  # noqa: E501

        This identifier is provided by the [Uploads API](https://developer-docs.amazon.com/sp-api/reference/welcome-to-api-references).  # noqa: E501

        :return: The upload_destination_id of this ImageComponent.  # noqa: E501
        :rtype: str
        """
        return self._upload_destination_id

    @upload_destination_id.setter
    def upload_destination_id(self, upload_destination_id):
        """Sets the upload_destination_id of this ImageComponent.

        This identifier is provided by the [Uploads API](https://developer-docs.amazon.com/sp-api/reference/welcome-to-api-references).  # noqa: E501

        :param upload_destination_id: The upload_destination_id of this ImageComponent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and upload_destination_id is None:
            raise ValueError("Invalid value for `upload_destination_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                upload_destination_id is not None and len(upload_destination_id) < 1):
            raise ValueError("Invalid value for `upload_destination_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._upload_destination_id = upload_destination_id

    @property
    def image_crop_specification(self):
        """Gets the image_crop_specification of this ImageComponent.  # noqa: E501


        :return: The image_crop_specification of this ImageComponent.  # noqa: E501
        :rtype: ImageCropSpecification
        """
        return self._image_crop_specification

    @image_crop_specification.setter
    def image_crop_specification(self, image_crop_specification):
        """Sets the image_crop_specification of this ImageComponent.


        :param image_crop_specification: The image_crop_specification of this ImageComponent.  # noqa: E501
        :type: ImageCropSpecification
        """
        if self._configuration.client_side_validation and image_crop_specification is None:
            raise ValueError("Invalid value for `image_crop_specification`, must not be `None`")  # noqa: E501

        self._image_crop_specification = image_crop_specification

    @property
    def alt_text(self):
        """Gets the alt_text of this ImageComponent.  # noqa: E501

        The alternative text for the image.  # noqa: E501

        :return: The alt_text of this ImageComponent.  # noqa: E501
        :rtype: str
        """
        return self._alt_text

    @alt_text.setter
    def alt_text(self, alt_text):
        """Sets the alt_text of this ImageComponent.

        The alternative text for the image.  # noqa: E501

        :param alt_text: The alt_text of this ImageComponent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and alt_text is None:
            raise ValueError("Invalid value for `alt_text`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                alt_text is not None and len(alt_text) > 100):
            raise ValueError("Invalid value for `alt_text`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                alt_text is not None and len(alt_text) < 1):
            raise ValueError("Invalid value for `alt_text`, length must be greater than or equal to `1`")  # noqa: E501

        self._alt_text = alt_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageComponent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageComponent):
            return True

        return self.to_dict() != other.to_dict()
