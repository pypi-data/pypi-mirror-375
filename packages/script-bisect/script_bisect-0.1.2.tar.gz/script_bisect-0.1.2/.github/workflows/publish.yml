name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  build:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    - name: Build package
      run: uv build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  install-test-ubuntu:
    name: Test wheel installation on Ubuntu
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    - name: Test wheel installation
      shell: bash
      run: |
        uv pip install --system dist/*.whl
        script-bisect --help

  install-test-cross-platform:
    name: Cross-platform wheel installation test (optional)
    runs-on: ${{ matrix.os }}
    needs: [build]
    continue-on-error: true
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ["3.12", "3.13"]
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    - name: Test wheel installation
      shell: bash
      run: |
        uv pip install --system dist/*.whl
        script-bisect --help

  publish-to-pypi:
    name: Publish to PyPI ðŸš€
    needs: [build, install-test-ubuntu]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/script-bisect
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1


  github-release:
    name: Upload to GitHub Release ðŸ“‹
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
