# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Region(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'state': 'str',
        'warehouse_id': 'str',
    }

    attribute_map = {
        'country_code': 'countryCode',
        'state': 'state',
        'warehouse_id': 'warehouseId',
    }

    def __init__(self, country_code=None, state=None, warehouse_id=None, _configuration=None):  # noqa: E501
        """Region - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._country_code = None
        self._state = None
        self._warehouse_id = None
        self.discriminator = None

        if country_code is not None:
            self.country_code = country_code
        if state is not None:
            self.state = state
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id

    @property
    def country_code(self):
        """Gets the country_code of this Region.  # noqa: E501

        ISO 3166 standard alpha-2 country code.  # noqa: E501

        :return: The country_code of this Region.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Region.

        ISO 3166 standard alpha-2 country code.  # noqa: E501

        :param country_code: The country_code of this Region.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                country_code is not None and len(country_code) > 1024):
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                country_code is not None and len(country_code) < 1):
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._country_code = country_code

    @property
    def state(self):
        """Gets the state of this Region.  # noqa: E501

        State.  # noqa: E501

        :return: The state of this Region.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Region.

        State.  # noqa: E501

        :param state: The state of this Region.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                state is not None and len(state) > 1024):
            raise ValueError("Invalid value for `state`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                state is not None and len(state) < 1):
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")  # noqa: E501

        self._state = state

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Region.  # noqa: E501

        An identifier for a warehouse, such as a FC, IXD, upstream storage.  # noqa: E501

        :return: The warehouse_id of this Region.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Region.

        An identifier for a warehouse, such as a FC, IXD, upstream storage.  # noqa: E501

        :param warehouse_id: The warehouse_id of this Region.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                warehouse_id is not None and len(warehouse_id) > 1024):
            raise ValueError("Invalid value for `warehouse_id`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                warehouse_id is not None and len(warehouse_id) < 1):
            raise ValueError("Invalid value for `warehouse_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Region, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Region):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Region):
            return True

        return self.to_dict() != other.to_dict()
