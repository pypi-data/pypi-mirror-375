# coding: utf-8

"""
    Selling Partner API for Orders

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ConfirmShipmentOrderItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_item_id': 'str',
        'quantity': 'int',
        'transparency_codes': 'List[str]',
    }

    attribute_map = {
        'order_item_id': 'orderItemId',
        'quantity': 'quantity',
        'transparency_codes': 'transparencyCodes',
    }

    def __init__(self, order_item_id=None, quantity=None, transparency_codes=None, _configuration=None):  # noqa: E501
        """ConfirmShipmentOrderItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._order_item_id = None
        self._quantity = None
        self._transparency_codes = None
        self.discriminator = None

        self.order_item_id = order_item_id
        self.quantity = quantity
        if transparency_codes is not None:
            self.transparency_codes = transparency_codes

    @property
    def order_item_id(self):
        """Gets the order_item_id of this ConfirmShipmentOrderItem.  # noqa: E501

        The order item's unique identifier.  # noqa: E501

        :return: The order_item_id of this ConfirmShipmentOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """Sets the order_item_id of this ConfirmShipmentOrderItem.

        The order item's unique identifier.  # noqa: E501

        :param order_item_id: The order_item_id of this ConfirmShipmentOrderItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and order_item_id is None:
            raise ValueError("Invalid value for `order_item_id`, must not be `None`")  # noqa: E501

        self._order_item_id = order_item_id

    @property
    def quantity(self):
        """Gets the quantity of this ConfirmShipmentOrderItem.  # noqa: E501

        The item's quantity.  # noqa: E501

        :return: The quantity of this ConfirmShipmentOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ConfirmShipmentOrderItem.

        The item's quantity.  # noqa: E501

        :param quantity: The quantity of this ConfirmShipmentOrderItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def transparency_codes(self):
        """Gets the transparency_codes of this ConfirmShipmentOrderItem.  # noqa: E501

        A list of order items.  # noqa: E501

        :return: The transparency_codes of this ConfirmShipmentOrderItem.  # noqa: E501
        :rtype: List[str]
        """
        return self._transparency_codes

    @transparency_codes.setter
    def transparency_codes(self, transparency_codes):
        """Sets the transparency_codes of this ConfirmShipmentOrderItem.

        A list of order items.  # noqa: E501

        :param transparency_codes: The transparency_codes of this ConfirmShipmentOrderItem.  # noqa: E501
        :type: List[str]
        """

        self._transparency_codes = transparency_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfirmShipmentOrderItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfirmShipmentOrderItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfirmShipmentOrderItem):
            return True

        return self.to_dict() != other.to_dict()
