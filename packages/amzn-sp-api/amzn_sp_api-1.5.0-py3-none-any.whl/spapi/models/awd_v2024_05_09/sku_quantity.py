# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class SkuQuantity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expected_quantity': 'InventoryQuantity',
        'received_quantity': 'InventoryQuantity',
        'sku': 'str',
    }

    attribute_map = {
        'expected_quantity': 'expectedQuantity',
        'received_quantity': 'receivedQuantity',
        'sku': 'sku',
    }

    def __init__(self, expected_quantity=None, received_quantity=None, sku=None, _configuration=None):  # noqa: E501
        """SkuQuantity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expected_quantity = None
        self._received_quantity = None
        self._sku = None
        self.discriminator = None

        self.expected_quantity = expected_quantity
        if received_quantity is not None:
            self.received_quantity = received_quantity
        self.sku = sku

    @property
    def expected_quantity(self):
        """Gets the expected_quantity of this SkuQuantity.  # noqa: E501


        :return: The expected_quantity of this SkuQuantity.  # noqa: E501
        :rtype: InventoryQuantity
        """
        return self._expected_quantity

    @expected_quantity.setter
    def expected_quantity(self, expected_quantity):
        """Sets the expected_quantity of this SkuQuantity.


        :param expected_quantity: The expected_quantity of this SkuQuantity.  # noqa: E501
        :type: InventoryQuantity
        """
        if self._configuration.client_side_validation and expected_quantity is None:
            raise ValueError("Invalid value for `expected_quantity`, must not be `None`")  # noqa: E501

        self._expected_quantity = expected_quantity

    @property
    def received_quantity(self):
        """Gets the received_quantity of this SkuQuantity.  # noqa: E501


        :return: The received_quantity of this SkuQuantity.  # noqa: E501
        :rtype: InventoryQuantity
        """
        return self._received_quantity

    @received_quantity.setter
    def received_quantity(self, received_quantity):
        """Sets the received_quantity of this SkuQuantity.


        :param received_quantity: The received_quantity of this SkuQuantity.  # noqa: E501
        :type: InventoryQuantity
        """

        self._received_quantity = received_quantity

    @property
    def sku(self):
        """Gets the sku of this SkuQuantity.  # noqa: E501

        The merchant stock keeping unit  # noqa: E501

        :return: The sku of this SkuQuantity.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this SkuQuantity.

        The merchant stock keeping unit  # noqa: E501

        :param sku: The sku of this SkuQuantity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SkuQuantity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkuQuantity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SkuQuantity):
            return True

        return self.to_dict() != other.to_dict()
