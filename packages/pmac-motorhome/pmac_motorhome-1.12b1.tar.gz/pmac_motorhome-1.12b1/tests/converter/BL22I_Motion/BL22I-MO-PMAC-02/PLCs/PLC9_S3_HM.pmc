CLOSE

;####################################################
; Autogenerated Homing PLC for PMAC, DO NOT MODIFY
; Group 2:
;  Axis 3: htype = LIMIT, jdist = 0, post = i
;  Axis 4: htype = LIMIT, jdist = 0, post = i
; Group 3:
;  Axis 1: htype = LIMIT, jdist = 0, post = i
;  Axis 2: htype = LIMIT, jdist = 0, post = i
;####################################################

; Use a different timer for each PLC
#define timer             i(5111+(9&30)*50+9%2)
; Make timer more readable
#define MilliSeconds      * 8388608/i10

; Homing State P Variable
#define HomingState       P900
#define StateIdle         0
#define StateConfiguring  1
#define StateMoveNeg      2
#define StateMovePos      3
#define StateHoming       4
#define StatePostHomeMove 5
#define StateAligning     6
#define StateDone         7
#define StateFastSearch   8
#define StateFastRetrace  9
#define StatePreHomeMove  10
HomingState = StateIdle

; Homing Status P Variable
#define HomingStatus      P901
#define StatusDone        0
#define StatusHoming      1
#define StatusAborted     2
#define StatusTimeout     3
#define StatusFFErr       4
#define StatusLimit       5
#define StatusIncomplete  6
#define StatusInvalid     7
#define StatusPaused      8
#define StatusDebugHoming 9
HomingStatus = StatusDone

; Homing Group P Variable
#define HomingGroup       P902
HomingGroup = 0

; Homing Group Backup P Variable
#define HomingBackupGroup P903
HomingBackupGroup = 0

OPEN PLC9 CLEAR

if (HomingStatus != StatusHoming)
and (HomingStatus != StatusDebugHoming)
	HomingStatus = StatusHoming
endif

;---- Configuring State ----
HomingState=StateConfiguring
;Save the Homing group to px03
HomingBackupGroup=HomingGroup
;Save high soft limits to P variables px04..x19
P904=i313 P905=i413 P906=i113 P907=i213
;Save the low soft limits to P variables px20..x35
P920=i314 P921=i414 P922=i114 P923=i214
;Save the home capture flags to P variables px36..x51
MSR4,i912,P936 MSR5,i912,P937 MSR0,i912,P938 MSR1,i912,P939
;If any are zero then there is probably a macro error
if (P936=0 or P937=0 or P938=0 or P939=0)
	HomingStatus=StatusInvalid
endif
;Store 'not flag' to use in moving off a flag in P variables px52..x67
P952=P936^$C P953=P937^$C P954=P938^$C P955=P939^$C
;Save the limit flags to P variables px68..x83
P968=i324 P969=i424 P970=i124 P971=i224
;Save the current position to P variables px84..x99
P984=M362 P985=M462 P986=M162 P987=M262
;Clear the soft limits
i313=0 i413=0 i113=0 i213=0
i314=0 i414=0 i114=0 i214=0

if (HomingBackupGroup = 1 or HomingBackupGroup = 2)
and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	HomingGroup=2

	;Clear home flags
	m345=0 m445=0
	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- FastSearch State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateFastSearch
		; Execute the move commands
				m372=100000000*(i323/ABS(i323)) 		m472=100000000*(i423/ABS(i423))
		cmd "#3J^*^0 #4J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m340&m440=0) ; At least one motor should not be In Position
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		P984=(P984-M362)/(I308*32)+0-(i326/16)
		P985=(P985-M462)/(I408*32)+0-(i426/16)
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- FastRetrace State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateFastRetrace
		; Execute the move commands
		MSW4,i912,P952 MSW5,i912,P953 		m372=100000000*(-i323/ABS(i323)) 		m472=100000000*(-i423/ABS(i423))
		cmd "#3J^*^0 #4J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m340&m440=0) ; At least one motor should not be In Position
		and (m342|m442 = 0) ; Following error check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m342|m442 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Check if any limits need disabling ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		;Save the user home flags to P variables px52..x67
		;NOTE: this overwrites inverse flag (ran out of P vars), so can't use inverse flag after this point
			MSR4,i913,P952 MSR5,i913,P953
		; if capture on flag, and flag high, then we need to disable limits
		if (P936&2=2 and P936&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P952=1 and i323>0 and i326<1)
			or (P952=2 and i323<0 and i326>-1)
				i324=i324 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
		; if capture on flag, and flag high, then we need to disable limits
		if (P937&2=2 and P937&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P953=1 and i423>0 and i426<1)
			or (P953=2 and i423<0 and i426>-1)
				i424=i424 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- Homing State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateHoming
		; Execute the move commands
		MSW4,i912,P936 MSW5,i912,P937
		cmd "#3hm #4hm"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m340&m440=0) ; At least one motor should not be In Position
		and (m342|m442 = 0) ; Following error check
		and (m330|m430 = 0) ; Limit check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m342|m442 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (m330|m430 != 0) ; Limit check failed
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Restore limits if needed ----
	;Restore the limit flags to P variables px68..x83
	i324=P968 i424=P969

	;---- Check if all motors have homed ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	and (m345&m445=0)
		HomingStatus=StatusIncomplete
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- PostHomeMove State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StatePostHomeMove
		; Execute the move commands
		m372=P984 m472=P985
		cmd "#3J=* #4J=*"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m340&m440=0) ; At least one motor should not be In Position
		and (m342|m442 = 0) ; Following error check
		and (m330|m430 = 0) ; Limit check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m342|m442 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (m330|m430 != 0) ; Limit check failed
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

endif

if (HomingBackupGroup = 1 or HomingBackupGroup = 3)
and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	HomingGroup=3

	;Clear home flags
	m145=0 m245=0
	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- FastSearch State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateFastSearch
		; Execute the move commands
				m172=100000000*(i123/ABS(i123)) 		m272=100000000*(i223/ABS(i223))
		cmd "#1J^*^0 #2J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m140&m240=0) ; At least one motor should not be In Position
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		P986=(P986-M162)/(I108*32)+0-(i126/16)
		P987=(P987-M262)/(I208*32)+0-(i226/16)
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- FastRetrace State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateFastRetrace
		; Execute the move commands
		MSW0,i912,P954 MSW1,i912,P955 		m172=100000000*(-i123/ABS(i123)) 		m272=100000000*(-i223/ABS(i223))
		cmd "#1J^*^0 #2J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m140&m240=0) ; At least one motor should not be In Position
		and (m142|m242 = 0) ; Following error check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m142|m242 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Check if any limits need disabling ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		;Save the user home flags to P variables px52..x67
		;NOTE: this overwrites inverse flag (ran out of P vars), so can't use inverse flag after this point
			MSR0,i913,P954 MSR1,i913,P955
		; if capture on flag, and flag high, then we need to disable limits
		if (P938&2=2 and P938&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P954=1 and i123>0 and i126<1)
			or (P954=2 and i123<0 and i126>-1)
				i124=i124 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
		; if capture on flag, and flag high, then we need to disable limits
		if (P939&2=2 and P939&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P955=1 and i223>0 and i226<1)
			or (P955=2 and i223<0 and i226>-1)
				i224=i224 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- Homing State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateHoming
		; Execute the move commands
		MSW0,i912,P938 MSW1,i912,P939
		cmd "#1hm #2hm"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m140&m240=0) ; At least one motor should not be In Position
		and (m142|m242 = 0) ; Following error check
		and (m130|m230 = 0) ; Limit check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m142|m242 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (m130|m230 != 0) ; Limit check failed
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Restore limits if needed ----
	;Restore the limit flags to P variables px68..x83
	i124=P970 i224=P971

	;---- Check if all motors have homed ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	and (m145&m245=0)
		HomingStatus=StatusIncomplete
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- PostHomeMove State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StatePostHomeMove
		; Execute the move commands
		m172=P986 m272=P987
		cmd "#1J=* #2J=*"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m140&m240=0) ; At least one motor should not be In Position
		and (m142|m242 = 0) ; Following error check
		and (m130|m230 = 0) ; Limit check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m142|m242 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (m130|m230 != 0) ; Limit check failed
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

endif

;---- Done ----
if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	;If we've got this far without failing, set status and state done
	HomingStatus=StatusDone
	HomingState=StateDone
	;Restore the homing group from px03
	HomingGroup=HomingBackupGroup
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (m342=0)
	cmd "#3J/"
endif
if (m442=0)
	cmd "#4J/"
endif
if (m142=0)
	cmd "#1J/"
endif
if (m242=0)
	cmd "#2J/"
endif
;Restore the high soft limits from P variables px04..x19
i313=P904 i413=P905 i113=P906 i213=P907
;Restore the low soft limits from P variables px20..x35
i314=P920 i414=P921 i114=P922 i214=P923
;Restore the home capture flags from P variables px36..x51
MSW4,i912,P936 MSW5,i912,P937 MSW0,i912,P938 MSW1,i912,P939
;Restore the limit flags to P variables px68..x83
i324=P968 i424=P969 i124=P970 i224=P971

DISABLE PLC9
CLOSE
