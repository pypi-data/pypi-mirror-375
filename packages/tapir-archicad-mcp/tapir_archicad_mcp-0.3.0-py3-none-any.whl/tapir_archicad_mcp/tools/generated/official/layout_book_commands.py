# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch

from multiconn_archicad.models.official.commands import (
    CreateLayoutParameters,
CreateLayoutResult,
CreateLayoutSubsetParameters,
CreateLayoutSubsetResult,
GetLayoutSettingsParameters,
GetLayoutSettingsResult,
SetLayoutSettingsParameters
)


log = logging.getLogger()

def create_layout(port: int, params: CreateLayoutParameters) -> CreateLayoutResult:
    """
    Creates a new layout.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.CreateLayout",
            parameters=params.model_dump(mode='json')
        )
        return CreateLayoutResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreateLayout result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreateLayout on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    create_layout,
    name="layout_create_layout",
    title="CreateLayout",
    description="Creates a new layout.",
    params_model=CreateLayoutParameters,
    result_model=CreateLayoutResult
)


def create_layout_subset(port: int, params: CreateLayoutSubsetParameters) -> CreateLayoutSubsetResult:
    """
    Creates a new layout subset.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.CreateLayoutSubset",
            parameters=params.model_dump(mode='json')
        )
        return CreateLayoutSubsetResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreateLayoutSubset result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreateLayoutSubset on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    create_layout_subset,
    name="layout_create_layout_subset",
    title="CreateLayoutSubset",
    description="Creates a new layout subset.",
    params_model=CreateLayoutSubsetParameters,
    result_model=CreateLayoutSubsetResult
)


def get_layout_settings(port: int, params: GetLayoutSettingsParameters) -> GetLayoutSettingsResult:
    """
    Returns the parameters (settings) of the given layout.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetLayoutSettings",
            parameters=params.model_dump(mode='json')
        )
        return GetLayoutSettingsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetLayoutSettings result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetLayoutSettings on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_layout_settings,
    name="layout_get_layout_settings",
    title="GetLayoutSettings",
    description="Returns the parameters (settings) of the given layout.",
    params_model=GetLayoutSettingsParameters,
    result_model=GetLayoutSettingsResult
)


def set_layout_settings(port: int, params: SetLayoutSettingsParameters) -> None:
    """
    Sets the parameters (settings) of the given layout.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_command(
            command="API.SetLayoutSettings",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for SetLayoutSettings result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing SetLayoutSettings on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    set_layout_settings,
    name="layout_set_layout_settings",
    title="SetLayoutSettings",
    description="Sets the parameters (settings) of the given layout.",
    params_model=SetLayoutSettingsParameters,
    result_model=None
)
