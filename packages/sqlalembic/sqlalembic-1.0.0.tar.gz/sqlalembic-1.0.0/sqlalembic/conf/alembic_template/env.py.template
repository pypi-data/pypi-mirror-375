import os
import sys
import logging
from logging.config import fileConfig
from pathlib import Path
from sqlalchemy import engine_from_config, pool
from alembic import context
from dotenv import load_dotenv
# ==============================================================================
# Path Configuration
# ==============================================================================

PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, PROJECT_ROOT)  # insert at beginning for priority

# ==============================================================================
# Alembic Configuration Setup
# ==============================================================================

config = context.config

if config.config_file_name is not None:
    fileConfig(config.config_file_name)

load_dotenv()

# ==============================================================================
# Framework Integration
# ==============================================================================

logger = logging.getLogger('alembic.env')

def get_database_url():
    """Get database URL with proper error handling and fallback options."""
    
    try:
        from sqlalembic.core.config import Config
        app_config = Config()
        database_url = getattr(app_config, 'DATABASE_URI', None) or getattr(app_config, 'DATABASE_URL', None)
        
        if database_url:
            logger.info("Database URL loaded from framework config")
            return database_url
            
    except ImportError as e:
        logger.warning(f"Could not import framework config: {e}")
    except Exception as e:
        logger.warning(f"Error initializing framework config: {e}")
    
    database_url = (
        os.getenv('DATABASE_URI') or 
        os.getenv('DATABASE_URL') or
        os.getenv('SQLALCHEMY_DATABASE_URI') or
        os.getenv('DB_URL')
    )
    
    if database_url:
        logger.info("Database URL loaded from environment variables")
        return database_url
    
    # Final fallback - check if it's already in alembic.ini
    ini_url = config.get_main_option("sqlalchemy.url")
    if ini_url and ini_url != "driver://user:pass@localhost/dbname":
        logger.info("Database URL loaded from alembic.ini")
        return ini_url
    
    # No valid database URL found
    error_msg = """
    Error: No valid DATABASE_URL found!
    
    Please provide database URL in one of these ways:
    1. Set environment variable: DATABASE_URI, DATABASE_URL, SQLALCHEMY_DATABASE_URI, or DB_URL
    2. Configure it in your framework's Config class
    3. Set sqlalchemy.url in alembic.ini
    
    Example:
    DATABASE_URL=postgresql://user:password@localhost:5432/dbname
    """
    print(error_msg)
    sys.exit(1)

# Get and set database URL
try:
    DATABASE_URL = get_database_url()
    config.set_main_option('sqlalchemy.url', DATABASE_URL)
    logger.info("Database configuration loaded successfully")
except SystemExit:
    raise
except Exception as e:
    logger.error(f"Unexpected error while configuring database: {e}")
    print(f"Fatal error: {e}")
    sys.exit(1)

# ==============================================================================
# Model Discovery
# ==============================================================================

def get_target_metadata():
    """Discover and return target metadata with error handling."""
    try:
        from sqlalembic.integrations.alembic_setup import discover_target_metadata
        
        project_root = str(Path(__file__).parent.parent.resolve())
        logger.info(f"Discovering models in: {project_root}")
        
        metadata = discover_target_metadata(
            use_cache=True,
            debug=os.getenv('ALEMBIC_DEBUG', '').lower() in ('true', '1', 'yes')
        )
        
        if not metadata.tables:
            logger.warning("No database tables found! Make sure your models are properly defined.")
        else:
            logger.info(f"Successfully discovered {len(metadata.tables)} tables")
            
        return metadata
        
    except ImportError as e:
        logger.error(f"Could not import model discovery: {e}")
        print("Error: Model discovery module not found. Please check your installation.")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Error during model discovery: {e}")
        print(f"Error discovering models: {e}")
        from sqlalchemy import MetaData
        return MetaData()

target_metadata = get_target_metadata()

# ==============================================================================
# Migration Functions
# ==============================================================================

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.
    
    This configures the context with just a URL and not an Engine,
    though an Engine is acceptable here as well. By skipping the Engine creation
    we don't even need a DBAPI to be available.
    
    Calls to context.execute() here emit the given string to the script output.
    """
    url = config.get_main_option("sqlalchemy.url")
    
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.
    
    In this scenario we need to create an Engine and associate a connection
    with the context.
    """
    
    configuration = config.get_section(config.config_ini_section, {})
    
    configuration.setdefault('poolclass', pool.NullPool)
    
    # Create engine
    try:
        connectable = engine_from_config(
            configuration,
            prefix="sqlalchemy.",
            poolclass=pool.NullPool,
        )
    except Exception as e:
        logger.error(f"Failed to create database engine: {e}")
        print(f"Database connection error: {e}")
        sys.exit(1)

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,  # Enable server default comparison
        )

        with context.begin_transaction():
            context.run_migrations()


# ==============================================================================
# Main Execution
# ==============================================================================

if context.is_offline_mode():
    logger.info("Running migrations in offline mode")
    run_migrations_offline()
else:
    logger.info("Running migrations in online mode")
    run_migrations_online()