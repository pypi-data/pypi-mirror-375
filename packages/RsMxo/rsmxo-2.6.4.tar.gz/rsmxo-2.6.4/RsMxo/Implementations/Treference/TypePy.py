from ...Internal.Core import Core
from ...Internal.CommandsGroup import CommandsGroup
from ...Internal import Conversions
from ... import enums
from ... import repcap


# noinspection PyPep8Naming,PyAttributeOutsideInit,SpellCheckingInspection
class TypePyCls:
	"""TypePy commands group definition. 1 total commands, 0 Subgroups, 1 group commands"""

	def __init__(self, core: Core, parent):
		self._core = core
		self._cmd_group = CommandsGroup("typePy", core, parent)

	def set(self, type_py: enums.TreferenceType, timingReference=repcap.TimingReference.Default) -> None:
		"""TREFerence<*>:TYPE \n
		Snippet: driver.treference.typePy.set(type_py = enums.TreferenceType.CLOCk, timingReference = repcap.TimingReference.Default) \n
		Defines the origin of the clock signal - either an existing clock signal or waveform, or a clock generated by clock data
		recovery (CDR) . \n
			:param type_py: CLOCk: explicit clock signal SCDR: software CDR
			:param timingReference: optional repeated capability selector. Default value: Nr1 (settable in the interface 'Treference')
		"""
		param = Conversions.enum_scalar_to_str(type_py, enums.TreferenceType)
		timingReference_cmd_val = self._cmd_group.get_repcap_cmd_value(timingReference, repcap.TimingReference)
		self._core.io.write(f'TREFerence{timingReference_cmd_val}:TYPE {param}')

	# noinspection PyTypeChecker
	def get(self, timingReference=repcap.TimingReference.Default) -> enums.TreferenceType:
		"""TREFerence<*>:TYPE \n
		Snippet: value: enums.TreferenceType = driver.treference.typePy.get(timingReference = repcap.TimingReference.Default) \n
		Defines the origin of the clock signal - either an existing clock signal or waveform, or a clock generated by clock data
		recovery (CDR) . \n
			:param timingReference: optional repeated capability selector. Default value: Nr1 (settable in the interface 'Treference')
			:return: type_py: CLOCk: explicit clock signal SCDR: software CDR"""
		timingReference_cmd_val = self._cmd_group.get_repcap_cmd_value(timingReference, repcap.TimingReference)
		response = self._core.io.query_str(f'TREFerence{timingReference_cmd_val}:TYPE?')
		return Conversions.str_to_scalar_enum(response, enums.TreferenceType)
