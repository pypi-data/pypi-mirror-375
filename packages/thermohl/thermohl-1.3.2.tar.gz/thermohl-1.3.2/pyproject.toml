# SPDX-FileCopyrightText: 2025 RTE (https://www.rte-france.com)
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# SPDX-License-Identifier: MPL-2.0

[build-system]
requires = [
    "setuptools>=68.0.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "thermohl"
version = "1.3.2"

description = "Calculations relative to temperature and ampacity in overhead conductors."
license = "MPL-2.0"
readme = "README.md"
requires-python = ">=3.9,<3.13"
classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",

    "Natural Language :: English",

    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dependencies = [
    "numpy >= 1.26.0",
    "pandas >= 2.1.2",
    "scipy >= 1.13.1",
    "pyyaml >= 6.0.1"
]

[project.optional-dependencies]
test = [
    "pytest >= 7.2.2",
    "pytest-cov >= 6.0.0",
    "pylint >= 3.3.1"
]
lint = [
    "black >= 25.1.0",
    "mypy >= 1.13.0",
    "ruff >= 0.8.0"
]
dev = [
    "thermohl[test,lint]",
]
docs = [
    "mkdocs >= 1.6.1",
    "mkdocs-bibtex",
    "mkdocs-jupyter",
    "mkdocs-material >= 9.6.9",
    "mkdocstrings[python] >= 0.29.0",
    "markdown_extensions >= 0.0.1",
    "markdown-include >= 0.8.1",
    "mkdocs-markdownextradata-plugin >= 0.2.6",
    "thermohl[lint]",
]

[project.urls]
"Homepage" = "https://github.com/phlowers/thermohl"
"Documentation" = "https://phlowers.readthedocs.io/projects/thermohl"
"Issues" = "https://github.com/phlowers/thermohl/issues"

[tool.mypy]
strict = true
ignore_missing_imports = true
warn_return_any = false
#plugins = "numpy.typing.mypy_plugin"

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
