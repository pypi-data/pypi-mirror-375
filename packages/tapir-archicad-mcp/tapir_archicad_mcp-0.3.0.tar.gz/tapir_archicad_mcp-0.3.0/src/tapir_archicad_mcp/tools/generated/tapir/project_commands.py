# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch

from multiconn_archicad.models.tapir.commands import (
    GetGeoLocationResult,
GetHotlinksResult,
GetProjectInfoFieldsResult,
GetStoriesResult,
OpenProjectParameters,
SetProjectInfoFieldParameters,
SetStoriesParameters
)


log = logging.getLogger()

def get_geo_location(port: int) -> GetGeoLocationResult:
    """
    Gets the project location details.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetGeoLocation",
            parameters={}
        )
        return GetGeoLocationResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetGeoLocation result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetGeoLocation on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_geo_location,
    name="project_get_geo_location",
    title="GetGeoLocation",
    description="Gets the project location details.",
    params_model=None,
    result_model=GetGeoLocationResult
)


def get_hotlinks(port: int) -> GetHotlinksResult:
    """
    Gets the file system locations (path) of the hotlink modules. The hotlinks can have tree hierarchy in the project.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetHotlinks",
            parameters={}
        )
        return GetHotlinksResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetHotlinks result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetHotlinks on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_hotlinks,
    name="project_get_hotlinks",
    title="GetHotlinks",
    description="Gets the file system locations (path) of the hotlink modules. The hotlinks can have tree hierarchy in the project.",
    params_model=None,
    result_model=GetHotlinksResult
)


def get_project_info_fields(port: int) -> GetProjectInfoFieldsResult:
    """
    Retrieves the names and values of all project info fields.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetProjectInfoFields",
            parameters={}
        )
        return GetProjectInfoFieldsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetProjectInfoFields result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetProjectInfoFields on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_project_info_fields,
    name="project_get_project_info_fields",
    title="GetProjectInfoFields",
    description="Retrieves the names and values of all project info fields.",
    params_model=None,
    result_model=GetProjectInfoFieldsResult
)


def get_stories(port: int) -> GetStoriesResult:
    """
    Retrieves information about the story sructure of the currently loaded project.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetStories",
            parameters={}
        )
        return GetStoriesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetStories result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetStories on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_stories,
    name="project_get_stories",
    title="GetStories",
    description="Retrieves information about the story sructure of the currently loaded project.",
    params_model=None,
    result_model=GetStoriesResult
)


def open_project(port: int, params: OpenProjectParameters) -> None:
    """
    Opens the given project.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="OpenProject",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for OpenProject result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing OpenProject on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    open_project,
    name="project_open_project",
    title="OpenProject",
    description="Opens the given project.",
    params_model=OpenProjectParameters,
    result_model=None
)


def set_project_info_field(port: int, params: SetProjectInfoFieldParameters) -> None:
    """
    Sets the value of a project info field.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="SetProjectInfoField",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for SetProjectInfoField result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing SetProjectInfoField on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    set_project_info_field,
    name="project_set_project_info_field",
    title="SetProjectInfoField",
    description="Sets the value of a project info field.",
    params_model=SetProjectInfoFieldParameters,
    result_model=None
)


def set_stories(port: int, params: SetStoriesParameters) -> None:
    """
    Sets the story sructure of the currently loaded project.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="SetStories",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for SetStories result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing SetStories on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    set_stories,
    name="project_set_stories",
    title="SetStories",
    description="Sets the story sructure of the currently loaded project.",
    params_model=SetStoriesParameters,
    result_model=None
)
