# coding: utf-8

"""
    Selling Partner API for Easy Ship

    Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).

    The version of the OpenAPI document: 2022-03-23
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Packages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'packages': 'List[Package]',
    }

    attribute_map = {
        'packages': 'packages',
    }

    def __init__(self, packages=None, _configuration=None):  # noqa: E501
        """Packages - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._packages = None
        self.discriminator = None

        self.packages = packages

    @property
    def packages(self):
        """Gets the packages of this Packages.  # noqa: E501

        A list of packages.  # noqa: E501

        :return: The packages of this Packages.  # noqa: E501
        :rtype: List[Package]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this Packages.

        A list of packages.  # noqa: E501

        :param packages: The packages of this Packages.  # noqa: E501
        :type: List[Package]
        """
        if self._configuration.client_side_validation and packages is None:
            raise ValueError("Invalid value for `packages`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                packages is not None and len(packages) > 500):
            raise ValueError("Invalid value for `packages`, number of items must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                packages is not None and len(packages) < 1):
            raise ValueError("Invalid value for `packages`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._packages = packages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Packages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Packages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Packages):
            return True

        return self.to_dict() != other.to_dict()
