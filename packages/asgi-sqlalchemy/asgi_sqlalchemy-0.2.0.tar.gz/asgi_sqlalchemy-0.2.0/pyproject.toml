[project]
name = "asgi-sqlalchemy"
version = "0.2.0"
description = "Pure ASGI Database middleware."
readme = "README.md"
license = "MIT"
keywords = ["asgi", "FastAPI", "SQLAlchemy", "Middleware"]
authors = [{ name = "Abhi Agarwal", email = "abhiaagarwal01@gmail.com" }]
requires-python = ">=3.10"
dependencies = [
    "sqlalchemy>=2",
    "typing-extensions>=4; python_version < '3.12'",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: FastAPI", 
]

[project.urls]
homepage = "https://github.com/abhiaagarwal/asgi-sqlalchemy"
repository = "https://github.com/abhiaagarwal/asgi-sqlalchemy"
issues = "https://github.com/abhiaagarwal/asgi-sqlalchemy/issues"

[project.optional-dependencies]
fastapi = ["fastapi>=0.106"]
starlette = ["starlette>=0.37"]
type_hints = ["asgiref>=3.8.1"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "aiosqlite>=0.20.0",
    "asgi-lifespan>=2.1.0",
    "asyncpg>=0.30.0",
    "coverage>=7.6.10",
    "greenlet>=3.1.1",
    "httpx>=0.28.1",
    "starlette>=0.37",
    "mypy>=1.14.1",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.1",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.8.0",
    "ruff>=0.8.5",
    "testcontainers[postgres]>=4.12.0",
    "uvloop>=0.21.0",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = ["ISC001", "COM812", "D203", "D213"]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = ["S101", "PLR2004"]

[tool.mypy]
namespace_packages = true

[[tool.mypy.overrides]]
module = ["testcontainers.*"]
follow_untyped_imports = true

[tool.pytest.ini_options]
pythonpath = "."
addopts = [
    "--import-mode=importlib",
    "--cov=src",
    "--cov-report",
    "term-missing",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
