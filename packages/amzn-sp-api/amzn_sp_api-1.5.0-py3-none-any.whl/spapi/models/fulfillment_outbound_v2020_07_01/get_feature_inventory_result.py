# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetFeatureInventoryResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_id': 'str',
        'feature_name': 'str',
        'next_token': 'str',
        'feature_skus': 'List[FeatureSku]',
    }

    attribute_map = {
        'marketplace_id': 'marketplaceId',
        'feature_name': 'featureName',
        'next_token': 'nextToken',
        'feature_skus': 'featureSkus',
    }

    def __init__(self, marketplace_id=None, feature_name=None, next_token=None, feature_skus=None, _configuration=None):  # noqa: E501
        """GetFeatureInventoryResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._marketplace_id = None
        self._feature_name = None
        self._next_token = None
        self._feature_skus = None
        self.discriminator = None

        self.marketplace_id = marketplace_id
        self.feature_name = feature_name
        if next_token is not None:
            self.next_token = next_token
        if feature_skus is not None:
            self.feature_skus = feature_skus

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this GetFeatureInventoryResult.  # noqa: E501

        The requested marketplace.  # noqa: E501

        :return: The marketplace_id of this GetFeatureInventoryResult.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this GetFeatureInventoryResult.

        The requested marketplace.  # noqa: E501

        :param marketplace_id: The marketplace_id of this GetFeatureInventoryResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def feature_name(self):
        """Gets the feature_name of this GetFeatureInventoryResult.  # noqa: E501

        The name of the feature.  # noqa: E501

        :return: The feature_name of this GetFeatureInventoryResult.  # noqa: E501
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this GetFeatureInventoryResult.

        The name of the feature.  # noqa: E501

        :param feature_name: The feature_name of this GetFeatureInventoryResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and feature_name is None:
            raise ValueError("Invalid value for `feature_name`, must not be `None`")  # noqa: E501

        self._feature_name = feature_name

    @property
    def next_token(self):
        """Gets the next_token of this GetFeatureInventoryResult.  # noqa: E501

        When present and not empty, pass this string token in the next request to return the next response page.  # noqa: E501

        :return: The next_token of this GetFeatureInventoryResult.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetFeatureInventoryResult.

        When present and not empty, pass this string token in the next request to return the next response page.  # noqa: E501

        :param next_token: The next_token of this GetFeatureInventoryResult.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    @property
    def feature_skus(self):
        """Gets the feature_skus of this GetFeatureInventoryResult.  # noqa: E501

        An array of SKUs eligible for this feature and the quantity available.  # noqa: E501

        :return: The feature_skus of this GetFeatureInventoryResult.  # noqa: E501
        :rtype: List[FeatureSku]
        """
        return self._feature_skus

    @feature_skus.setter
    def feature_skus(self, feature_skus):
        """Sets the feature_skus of this GetFeatureInventoryResult.

        An array of SKUs eligible for this feature and the quantity available.  # noqa: E501

        :param feature_skus: The feature_skus of this GetFeatureInventoryResult.  # noqa: E501
        :type: List[FeatureSku]
        """

        self._feature_skus = feature_skus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFeatureInventoryResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFeatureInventoryResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetFeatureInventoryResult):
            return True

        return self.to_dict() != other.to_dict()
