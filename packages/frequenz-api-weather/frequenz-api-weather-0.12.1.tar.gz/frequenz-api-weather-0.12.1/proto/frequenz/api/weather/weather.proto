// Frequenz Weather & Forecast API
//
// Copyright:
// Copyright 2023 Frequenz Energy-as-a-Service GmbH
//
// License:
// MIT

syntax = "proto3";

package frequenz.api.weatherforecast.v1;

import "google/protobuf/timestamp.proto";

import "frequenz/api/common/v1/location.proto";
import "frequenz/api/common/v1/pagination/pagination_info.proto";
import "frequenz/api/common/v1/pagination/pagination_params.proto";

// Service provides operations related to retrieving weather forecasts for
// locations.
//
// The forecasts are updated regularly, and the service will stream the latest
// available data unless a specific time range is requested.
// !!! note
//     Weather forecasts are inherently uncertain and actual conditions may
//     vary. Use the data responsibly.
service WeatherForecastService {
  // Returns historical weather forecast features for a geo location for a
  // specified time range.
  rpc GetHistoricalWeatherForecast (GetHistoricalWeatherForecastRequest)
    returns (GetHistoricalWeatherForecastResponse);

  // Streams live weather forecast features for a geo location as they become
  // available. Initially, the most recent forecast will be streamed.
  rpc ReceiveLiveWeatherForecast (ReceiveLiveWeatherForecastRequest)
    returns (stream ReceiveLiveWeatherForecastResponse);
}


// Weather features (e.g. wind speeds or solar radiation) available for query
// through the API.
enum ForecastFeature {
  // Default value. When used, the API responds with all features listed below.
  FORECAST_FEATURE_UNSPECIFIED = 0;

  // Temperature at 2 m above the earth's surface. It is the temperature of
  // the air at a height of 2 metres above the surface of land, sea or
  // in-land waters.
  // Measured in Kelvin. To convert to Celsius, subtract 273.15.
  FORECAST_FEATURE_TEMPERATURE_2_METRE = 1;

  // Eastward component of the wind at 100 m altitude. It is the horizontal
  // speed of air moving towards the east, at a height of 100 metres above the
  // surface of the Earth.
  // A positive value indicates eastward wind, and a negative value indicates
  // westward wind. Typical range is -20 to 20 m/s.
  // Measured in m/s.
  FORECAST_FEATURE_U_WIND_COMPONENT_100_METRE = 2;

  // Northward component wind at 100 m altitude. It is the horizontal speed of
  // air moving towards the north, at a height of 100 metres above the surface
  // of the Earth.
  // A positive value indicates northward wind, and a negative value indicates
  // southward wind. Typical range is -20 to 20 m/s.
  // Measured in m/s.
  FORECAST_FEATURE_V_WIND_COMPONENT_100_METRE = 3;

  // Eastward component wind at 10 m altitude. It is the horizontal speed of
  // air moving towards the east, at a height of 10 metres above the surface
  // of the Earth.
  // A positive value indicates eastward wind, and a negative value indicates
  // westward wind. Typical values are smaller than their 100 m counterparts
  // since it is stronger influenced by local terrain, vegetation and buildings.
  // Measured in m/s.
  FORECAST_FEATURE_U_WIND_COMPONENT_10_METRE = 4;

  // Northward component wind at 10 m altitude. It is the horizontal speed of
  // air moving towards the north, at a height of 100 metres above the surface
  // of the Earth.
  // A positive value indicates northward wind, and a negative value indicates
  // southward wind. Typical values are smaller than their 100 m counterparts
  // since it is stronger influenced by local terrain, vegetation and buildings.
  // Measured in m/s.
  FORECAST_FEATURE_V_WIND_COMPONENT_10_METRE = 5;

  // Amount of solar radiation (shortwave radiation, direct and diffused) that
  // reaches a horizontal plane at the surface of the Earth.
  // The value is the forecast of the average solar irradiance from the
  // validity time until the next validity timestamp.
  // Measured in W/m².
  FORECAST_FEATURE_SURFACE_SOLAR_RADIATION_DOWNWARDS = 6;

  // Amount of solar radiation (shortwave radiation, direct and diffused) that
  // reaches a horizontal plane at the surface of the Earth minus the amount
  // reflected by the Earth's surface (which is governed by the albedo).
  // The value is the forecast of the average solar irradiance from the
  // validity time until the next validity timestamp.
  // Measured in W/m².
  FORECAST_FEATURE_SURFACE_NET_SOLAR_RADIATION = 7;
}

// The `GetHistoricalWeatherForecastRequest` message defines parameters for
// retrieving historical weather forecasts, targeting a specific location
// and time period, with designated features.
message GetHistoricalWeatherForecastRequest {
  // The locations for which the forecast is being requested.
  // The maximum number of locations that can be requested is 50. If the
  // request exceeds this limit, the API will respond with an error.
  repeated frequenz.api.common.v1.Location locations = 1;

  // List of required features. If none are specified, all available features
  // will be returned.
  repeated ForecastFeature features = 2;

  // The UTC timestamp indicating the start of the requested historical forecast
  // period.
  google.protobuf.Timestamp start_ts = 3;

  // The UTC timestamp indicating the end of the requested historical forecast
  // period.
  google.protobuf.Timestamp end_ts = 4;

  // The parameters define the 'page_size' and the 'page_token'. An inital
  // query of a request will omit the 'page_token'. Subsequent queries of the
  // same request must include the 'page_token' from the previous response.
  frequenz.api.common.v1.pagination.PaginationParams
    pagination_params = 5;
}

// The `ReceiveLiveWeatherForecastRequest` message defines parameters for
// requesting live weather forecasts for a specified location, with designated
// features.
message ReceiveLiveWeatherForecastRequest {
  // The locations for which the forecast is being requested.
  // The maximum number of locations that can be requested is 50. If the
  // request exceeds this limit, the API will respond with an error.
  repeated frequenz.api.common.v1.Location locations = 1;

  // List of required features. If none are specified, all available features
  // will be streamed.
  repeated ForecastFeature features = 2;

  // Minimum forecast horizon (in hours) to include in the returned forecasts.
  // Each forecast predicts weather conditions for a certain time span into the
  // future (the forecast horizon). If not specified, forecasts starting from
  // the earliest available horizon will be returned.
  optional uint32 forecast_horizon_min = 3;

  // Maximum forecast horizon (in hours) to include in the returned forecasts.
  // If not specified, forecasts up to their maximum available horizon will be
  // returned. If the requested horizon exceeds the available forecast data,
  // the maximum available horizon will be used.
  optional uint32 forecast_horizon_max = 4;
}

// The `ForecastResponse` message  provides a structured format for representing
// forecast data for a specific location, including UTC timestamps for validity
// and creation.
message LocationForecast {

  // Holds all weather features forecast for a certain point in time.
  message Forecasts {

    // Holds the forecast for a single weather feature.
    message FeatureForecast {
      ForecastFeature feature = 1;

      // Value of the feature. Unit depends on the feature (e.g., m/s for wind
      // speed, W/m² for radiation). Details can be found in the
      // ForecastFeature enum under each feature.
      float value = 2;
    }

    // The UTC timestamp for which the features in this entry are valid for.
    google.protobuf.Timestamp valid_at_ts = 1;

    // All requested weather features.
    repeated FeatureForecast features = 2;
  }

  // Weather forecasts.
  repeated Forecasts forecasts = 1;

  // The location for which the weather data is returned.
  frequenz.api.common.v1.Location location = 2;

  // The UTC timestamp indicating when the forecast was originally created.
  google.protobuf.Timestamp creation_ts = 3;
}

// The message encapsulates a collection of historical weather forecasts, each
// corresponding to a requested location.
message GetHistoricalWeatherForecastResponse {
  repeated LocationForecast location_forecasts = 1;

  // The pagination_info contains the number of 'total_items' in the response
  // and the 'next_page_token' for the subsequent query of the request. It is
  // omitted in the last response.
  frequenz.api.common.v1.pagination.PaginationInfo pagination_info = 2;
}

// The message encapsulates a collection of live weather forecasts, each
// corresponding to a requested location.
message ReceiveLiveWeatherForecastResponse {
  repeated LocationForecast location_forecasts = 1;
}
