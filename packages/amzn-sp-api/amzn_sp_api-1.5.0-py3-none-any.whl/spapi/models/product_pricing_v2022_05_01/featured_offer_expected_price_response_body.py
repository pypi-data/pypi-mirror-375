# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FeaturedOfferExpectedPriceResponseBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_identifier': 'OfferIdentifier',
        'featured_offer_expected_price_results': 'List[FeaturedOfferExpectedPriceResult]',
        'errors': 'List[Error]',
    }

    attribute_map = {
        'offer_identifier': 'offerIdentifier',
        'featured_offer_expected_price_results': 'featuredOfferExpectedPriceResults',
        'errors': 'errors',
    }

    def __init__(self, offer_identifier=None, featured_offer_expected_price_results=None, errors=None, _configuration=None):  # noqa: E501
        """FeaturedOfferExpectedPriceResponseBody - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._offer_identifier = None
        self._featured_offer_expected_price_results = None
        self._errors = None
        self.discriminator = None

        if offer_identifier is not None:
            self.offer_identifier = offer_identifier
        if featured_offer_expected_price_results is not None:
            self.featured_offer_expected_price_results = featured_offer_expected_price_results
        if errors is not None:
            self.errors = errors

    @property
    def offer_identifier(self):
        """Gets the offer_identifier of this FeaturedOfferExpectedPriceResponseBody.  # noqa: E501


        :return: The offer_identifier of this FeaturedOfferExpectedPriceResponseBody.  # noqa: E501
        :rtype: OfferIdentifier
        """
        return self._offer_identifier

    @offer_identifier.setter
    def offer_identifier(self, offer_identifier):
        """Sets the offer_identifier of this FeaturedOfferExpectedPriceResponseBody.


        :param offer_identifier: The offer_identifier of this FeaturedOfferExpectedPriceResponseBody.  # noqa: E501
        :type: OfferIdentifier
        """

        self._offer_identifier = offer_identifier

    @property
    def featured_offer_expected_price_results(self):
        """Gets the featured_offer_expected_price_results of this FeaturedOfferExpectedPriceResponseBody.  # noqa: E501

        A list of FOEP results for the requested offer.  # noqa: E501

        :return: The featured_offer_expected_price_results of this FeaturedOfferExpectedPriceResponseBody.  # noqa: E501
        :rtype: List[FeaturedOfferExpectedPriceResult]
        """
        return self._featured_offer_expected_price_results

    @featured_offer_expected_price_results.setter
    def featured_offer_expected_price_results(self, featured_offer_expected_price_results):
        """Sets the featured_offer_expected_price_results of this FeaturedOfferExpectedPriceResponseBody.

        A list of FOEP results for the requested offer.  # noqa: E501

        :param featured_offer_expected_price_results: The featured_offer_expected_price_results of this FeaturedOfferExpectedPriceResponseBody.  # noqa: E501
        :type: List[FeaturedOfferExpectedPriceResult]
        """

        self._featured_offer_expected_price_results = featured_offer_expected_price_results

    @property
    def errors(self):
        """Gets the errors of this FeaturedOfferExpectedPriceResponseBody.  # noqa: E501

        A list of error responses that are returned when a request is unsuccessful.  # noqa: E501

        :return: The errors of this FeaturedOfferExpectedPriceResponseBody.  # noqa: E501
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this FeaturedOfferExpectedPriceResponseBody.

        A list of error responses that are returned when a request is unsuccessful.  # noqa: E501

        :param errors: The errors of this FeaturedOfferExpectedPriceResponseBody.  # noqa: E501
        :type: List[Error]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeaturedOfferExpectedPriceResponseBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturedOfferExpectedPriceResponseBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeaturedOfferExpectedPriceResponseBody):
            return True

        return self.to_dict() != other.to_dict()
