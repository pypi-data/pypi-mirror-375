# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.4-5
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAfcMobileappAnchorCandidate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    List of AP candidates that may be used as anchors
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            serial_number = schemas.StrSchema
            name = schemas.StrSchema
            mac_address = schemas.StrSchema
            make = schemas.StrSchema
            product_type = schemas.StrSchema
            location = schemas.StrSchema
            bssid = schemas.StrSchema
            gps_anchor = schemas.BoolSchema
        
            @staticmethod
            def coordinates() -> typing.Type['XiqAfcMobileappCoordinates']:
                return XiqAfcMobileappCoordinates
            neighbors = schemas.Int32Schema
            __annotations__ = {
                "id": id,
                "serial_number": serial_number,
                "name": name,
                "mac_address": mac_address,
                "make": make,
                "product_type": product_type,
                "location": location,
                "bssid": bssid,
                "gps_anchor": gps_anchor,
                "coordinates": coordinates,
                "neighbors": neighbors,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_address"]) -> MetaOapg.properties.mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_type"]) -> MetaOapg.properties.product_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bssid"]) -> MetaOapg.properties.bssid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gps_anchor"]) -> MetaOapg.properties.gps_anchor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> 'XiqAfcMobileappCoordinates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neighbors"]) -> MetaOapg.properties.neighbors: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "serial_number", "name", "mac_address", "make", "product_type", "location", "bssid", "gps_anchor", "coordinates", "neighbors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_address"]) -> typing.Union[MetaOapg.properties.mac_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_type"]) -> typing.Union[MetaOapg.properties.product_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bssid"]) -> typing.Union[MetaOapg.properties.bssid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gps_anchor"]) -> typing.Union[MetaOapg.properties.gps_anchor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union['XiqAfcMobileappCoordinates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neighbors"]) -> typing.Union[MetaOapg.properties.neighbors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "serial_number", "name", "mac_address", "make", "product_type", "location", "bssid", "gps_anchor", "coordinates", "neighbors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        mac_address: typing.Union[MetaOapg.properties.mac_address, str, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        product_type: typing.Union[MetaOapg.properties.product_type, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        bssid: typing.Union[MetaOapg.properties.bssid, str, schemas.Unset] = schemas.unset,
        gps_anchor: typing.Union[MetaOapg.properties.gps_anchor, bool, schemas.Unset] = schemas.unset,
        coordinates: typing.Union['XiqAfcMobileappCoordinates', schemas.Unset] = schemas.unset,
        neighbors: typing.Union[MetaOapg.properties.neighbors, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAfcMobileappAnchorCandidate':
        return super().__new__(
            cls,
            *_args,
            id=id,
            serial_number=serial_number,
            name=name,
            mac_address=mac_address,
            make=make,
            product_type=product_type,
            location=location,
            bssid=bssid,
            gps_anchor=gps_anchor,
            coordinates=coordinates,
            neighbors=neighbors,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_afc_mobileapp_coordinates import XiqAfcMobileappCoordinates
