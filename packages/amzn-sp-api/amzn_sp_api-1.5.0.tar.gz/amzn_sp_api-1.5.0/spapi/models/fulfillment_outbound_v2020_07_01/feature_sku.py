# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FeatureSku(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seller_sku': 'str',
        'fn_sku': 'str',
        'asin': 'str',
        'sku_count': 'float',
        'overlapping_skus': 'List[str]',
    }

    attribute_map = {
        'seller_sku': 'sellerSku',
        'fn_sku': 'fnSku',
        'asin': 'asin',
        'sku_count': 'skuCount',
        'overlapping_skus': 'overlappingSkus',
    }

    def __init__(self, seller_sku=None, fn_sku=None, asin=None, sku_count=None, overlapping_skus=None, _configuration=None):  # noqa: E501
        """FeatureSku - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._seller_sku = None
        self._fn_sku = None
        self._asin = None
        self._sku_count = None
        self._overlapping_skus = None
        self.discriminator = None

        if seller_sku is not None:
            self.seller_sku = seller_sku
        if fn_sku is not None:
            self.fn_sku = fn_sku
        if asin is not None:
            self.asin = asin
        if sku_count is not None:
            self.sku_count = sku_count
        if overlapping_skus is not None:
            self.overlapping_skus = overlapping_skus

    @property
    def seller_sku(self):
        """Gets the seller_sku of this FeatureSku.  # noqa: E501

        Used to identify an item in the given marketplace. `SellerSKU` is qualified by the seller's SellerId, which is included with every operation that you submit.  # noqa: E501

        :return: The seller_sku of this FeatureSku.  # noqa: E501
        :rtype: str
        """
        return self._seller_sku

    @seller_sku.setter
    def seller_sku(self, seller_sku):
        """Sets the seller_sku of this FeatureSku.

        Used to identify an item in the given marketplace. `SellerSKU` is qualified by the seller's SellerId, which is included with every operation that you submit.  # noqa: E501

        :param seller_sku: The seller_sku of this FeatureSku.  # noqa: E501
        :type: str
        """

        self._seller_sku = seller_sku

    @property
    def fn_sku(self):
        """Gets the fn_sku of this FeatureSku.  # noqa: E501

        The unique SKU used by Amazon's fulfillment network.  # noqa: E501

        :return: The fn_sku of this FeatureSku.  # noqa: E501
        :rtype: str
        """
        return self._fn_sku

    @fn_sku.setter
    def fn_sku(self, fn_sku):
        """Sets the fn_sku of this FeatureSku.

        The unique SKU used by Amazon's fulfillment network.  # noqa: E501

        :param fn_sku: The fn_sku of this FeatureSku.  # noqa: E501
        :type: str
        """

        self._fn_sku = fn_sku

    @property
    def asin(self):
        """Gets the asin of this FeatureSku.  # noqa: E501

        The Amazon Standard Identification Number (ASIN) of the item.  # noqa: E501

        :return: The asin of this FeatureSku.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this FeatureSku.

        The Amazon Standard Identification Number (ASIN) of the item.  # noqa: E501

        :param asin: The asin of this FeatureSku.  # noqa: E501
        :type: str
        """

        self._asin = asin

    @property
    def sku_count(self):
        """Gets the sku_count of this FeatureSku.  # noqa: E501

        The number of SKUs available for this service.  # noqa: E501

        :return: The sku_count of this FeatureSku.  # noqa: E501
        :rtype: float
        """
        return self._sku_count

    @sku_count.setter
    def sku_count(self, sku_count):
        """Sets the sku_count of this FeatureSku.

        The number of SKUs available for this service.  # noqa: E501

        :param sku_count: The sku_count of this FeatureSku.  # noqa: E501
        :type: float
        """

        self._sku_count = sku_count

    @property
    def overlapping_skus(self):
        """Gets the overlapping_skus of this FeatureSku.  # noqa: E501

        Other seller SKUs that are shared across the same inventory.  # noqa: E501

        :return: The overlapping_skus of this FeatureSku.  # noqa: E501
        :rtype: List[str]
        """
        return self._overlapping_skus

    @overlapping_skus.setter
    def overlapping_skus(self, overlapping_skus):
        """Sets the overlapping_skus of this FeatureSku.

        Other seller SKUs that are shared across the same inventory.  # noqa: E501

        :param overlapping_skus: The overlapping_skus of this FeatureSku.  # noqa: E501
        :type: List[str]
        """

        self._overlapping_skus = overlapping_skus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureSku, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureSku):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeatureSku):
            return True

        return self.to_dict() != other.to_dict()
