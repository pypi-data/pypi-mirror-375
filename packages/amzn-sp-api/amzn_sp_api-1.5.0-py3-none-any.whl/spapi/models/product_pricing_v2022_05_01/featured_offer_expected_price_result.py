# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FeaturedOfferExpectedPriceResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'featured_offer_expected_price': 'FeaturedOfferExpectedPrice',
        'result_status': 'str',
        'competing_featured_offer': 'FeaturedOffer',
        'current_featured_offer': 'FeaturedOffer',
    }

    attribute_map = {
        'featured_offer_expected_price': 'featuredOfferExpectedPrice',
        'result_status': 'resultStatus',
        'competing_featured_offer': 'competingFeaturedOffer',
        'current_featured_offer': 'currentFeaturedOffer',
    }

    def __init__(self, featured_offer_expected_price=None, result_status=None, competing_featured_offer=None, current_featured_offer=None, _configuration=None):  # noqa: E501
        """FeaturedOfferExpectedPriceResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._featured_offer_expected_price = None
        self._result_status = None
        self._competing_featured_offer = None
        self._current_featured_offer = None
        self.discriminator = None

        if featured_offer_expected_price is not None:
            self.featured_offer_expected_price = featured_offer_expected_price
        self.result_status = result_status
        if competing_featured_offer is not None:
            self.competing_featured_offer = competing_featured_offer
        if current_featured_offer is not None:
            self.current_featured_offer = current_featured_offer

    @property
    def featured_offer_expected_price(self):
        """Gets the featured_offer_expected_price of this FeaturedOfferExpectedPriceResult.  # noqa: E501


        :return: The featured_offer_expected_price of this FeaturedOfferExpectedPriceResult.  # noqa: E501
        :rtype: FeaturedOfferExpectedPrice
        """
        return self._featured_offer_expected_price

    @featured_offer_expected_price.setter
    def featured_offer_expected_price(self, featured_offer_expected_price):
        """Sets the featured_offer_expected_price of this FeaturedOfferExpectedPriceResult.


        :param featured_offer_expected_price: The featured_offer_expected_price of this FeaturedOfferExpectedPriceResult.  # noqa: E501
        :type: FeaturedOfferExpectedPrice
        """

        self._featured_offer_expected_price = featured_offer_expected_price

    @property
    def result_status(self):
        """Gets the result_status of this FeaturedOfferExpectedPriceResult.  # noqa: E501

        The status of the FOEP computation. Possible values include `VALID_FOEP`, `NO_COMPETING_OFFER`, `OFFER_NOT_ELIGIBLE`, `OFFER_NOT_FOUND`, and `ASIN_NOT_ELIGIBLE`. Additional values might be added in the future.  # noqa: E501

        :return: The result_status of this FeaturedOfferExpectedPriceResult.  # noqa: E501
        :rtype: str
        """
        return self._result_status

    @result_status.setter
    def result_status(self, result_status):
        """Sets the result_status of this FeaturedOfferExpectedPriceResult.

        The status of the FOEP computation. Possible values include `VALID_FOEP`, `NO_COMPETING_OFFER`, `OFFER_NOT_ELIGIBLE`, `OFFER_NOT_FOUND`, and `ASIN_NOT_ELIGIBLE`. Additional values might be added in the future.  # noqa: E501

        :param result_status: The result_status of this FeaturedOfferExpectedPriceResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and result_status is None:
            raise ValueError("Invalid value for `result_status`, must not be `None`")  # noqa: E501

        self._result_status = result_status

    @property
    def competing_featured_offer(self):
        """Gets the competing_featured_offer of this FeaturedOfferExpectedPriceResult.  # noqa: E501


        :return: The competing_featured_offer of this FeaturedOfferExpectedPriceResult.  # noqa: E501
        :rtype: FeaturedOffer
        """
        return self._competing_featured_offer

    @competing_featured_offer.setter
    def competing_featured_offer(self, competing_featured_offer):
        """Sets the competing_featured_offer of this FeaturedOfferExpectedPriceResult.


        :param competing_featured_offer: The competing_featured_offer of this FeaturedOfferExpectedPriceResult.  # noqa: E501
        :type: FeaturedOffer
        """

        self._competing_featured_offer = competing_featured_offer

    @property
    def current_featured_offer(self):
        """Gets the current_featured_offer of this FeaturedOfferExpectedPriceResult.  # noqa: E501


        :return: The current_featured_offer of this FeaturedOfferExpectedPriceResult.  # noqa: E501
        :rtype: FeaturedOffer
        """
        return self._current_featured_offer

    @current_featured_offer.setter
    def current_featured_offer(self, current_featured_offer):
        """Sets the current_featured_offer of this FeaturedOfferExpectedPriceResult.


        :param current_featured_offer: The current_featured_offer of this FeaturedOfferExpectedPriceResult.  # noqa: E501
        :type: FeaturedOffer
        """

        self._current_featured_offer = current_featured_offer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeaturedOfferExpectedPriceResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturedOfferExpectedPriceResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeaturedOfferExpectedPriceResult):
            return True

        return self.to_dict() != other.to_dict()
