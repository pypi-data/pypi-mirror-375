Metadata-Version: 2.1
Name: meridianalgo
Version: 3.0.0
Summary: Advanced Algorithmic Trading and Statistical Analysis Library
Home-page: https://github.com/MeridianAlgo/Python-Packages
Author: Meridian Algorithmic Research Team
Author-email: support@meridianalgo.com
Project-URL: Bug Reports, https://github.com/MeridianAlgo/Python-Packages/issues
Project-URL: Source, https://github.com/MeridianAlgo/Python-Packages
Keywords: finance,trading,algorithmic-trading,quantitative-finance,statistical-arbitrage,portfolio-optimization,machine-learning
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Topic :: Office/Business :: Financial :: Investment
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.21.0
Requires-Dist: pandas>=1.5.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: scikit-learn>=1.0.0
Requires-Dist: yfinance>=0.2.0
Requires-Dist: requests>=2.28.0
Requires-Dist: torch>=2.0.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: ta>=0.10.0
Requires-Dist: pandas-ta>=0.3.14
Requires-Dist: statsmodels>=0.13.0
Requires-Dist: tqdm>=4.62.0
Requires-Dist: joblib>=1.1.0
Requires-Dist: python-dateutil>=2.8.2
Requires-Dist: pytz>=2021.3
Requires-Dist: lxml>=4.6.0
Requires-Dist: beautifulsoup4>=4.10.0
Requires-Dist: pytest>=6.2.5
Requires-Dist: python-dateutil>=2.8.2
Requires-Dist: torch>=1.12.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.7b0; extra == "dev"
Requires-Dist: flake8>=3.9.0; extra == "dev"
Requires-Dist: mypy>=0.910; extra == "dev"
Requires-Dist: sphinx>=4.0.0; extra == "dev"
Requires-Dist: sphinx-rtd-theme>=0.5.0; extra == "dev"

<div align="center">
  <h1>üöÄ MeridianAlgo Financial Analysis Platform</h1>
  <h3>Advanced Financial Analysis Suite with ML Predictions, Technical Analysis & Portfolio Management</h3>
  
  [![PyPI](https://img.shields.io/pypi/v/meridianalgo?color=blue&label=PyPI%20Package)](https://pypi.org/project/meridianalgo/)
  [![Python](https://img.shields.io/pypi/pyversions/meridianalgo?color=blue)](https://www.python.org/)
  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
  [![Documentation](https://img.shields.io/badge/Documentation-Read%20The%20Docs-blue)](https://meridianalgo.org/docs)
  [![Tests](https://github.com/MeridianAlgo/Python-Packages/actions/workflows/tests.yml/badge.svg)](https://github.com/MeridianAlgo/Python-Packages/actions)
  
  Professional-grade financial analysis platform combining ML predictions, technical indicators, portfolio optimization, and comprehensive market intelligence.
</div>

## üì¶ Installation

```bash
pip install meridianalgo
```

## üöÄ Quick Start

```python
from meridianalgo import quick_predict, analyze_accuracy

# Get quick prediction
result = quick_predict('AAPL', days=5)
print(f"AAPL predictions: {result}")

# Analyze model accuracy
accuracy = analyze_accuracy('AAPL')
print(f"Accuracy: {accuracy['accuracy_rate']:.1f}%")
```

## üîç Overview

MeridianAlgo is an advanced financial analysis platform that combines machine learning, statistical analysis, and quantitative finance techniques to provide comprehensive market insights. The platform is designed for both retail and institutional investors seeking to enhance their trading strategies with data-driven decision making.

## ‚ú® Key Features

### ü§ñ Advanced Machine Learning
- **Ensemble Models**: Combines Random Forest, Gradient Boosting, and LSTM Neural Networks
- **Technical Indicators**: 50+ indicators including RSI, MACD, Bollinger Bands, Stochastic
- **Feature Engineering**: Advanced price patterns, volume analysis, volatility metrics
- **GPU Acceleration**: Support for NVIDIA CUDA, AMD ROCm, Intel XPU, Apple MPS

### üìä Market Analysis
- **Real-time Data**: Yahoo Finance integration with smart caching
- **Technical Analysis**: Comprehensive set of technical indicators
- **Market Regime Detection**: Identify bull/bear markets and volatility regimes
- **Sector Analysis**: Performance comparison across market sectors

### üéØ Portfolio Management
- **Portfolio Optimization**: Modern portfolio theory implementation
- **Risk Management**: Value at Risk (VaR), Expected Shortfall (CVaR), Maximum Drawdown
- **Performance Tracking**: Detailed performance metrics and attribution analysis
- **Backtesting**: Historical strategy validation

### üìà Prediction System
- **Multi-day Forecasting**: 1-7 day price predictions
- **Confidence Scoring**: Model confidence with risk assessment
- **Automated Validation**: Daily accuracy tracking
- **Learning System**: Continuous model improvement

## Installation

```bash
pip install meridianalgo
```

## Quick Start

```python
import meridianalgo as ma
import yfinance as yf

# Fetch market data
data = yf.download(['AAPL', 'MSFT', 'GOOGL'], start='2020-01-01')['Adj Close']

# Calculate returns
returns = data.pct_change().dropna()

# Portfolio optimization
optimizer = ma.PortfolioOptimizer(returns)
efficient_frontier = optimizer.calculate_efficient_frontier()

# Statistical analysis
analyzer = ma.StatisticalArbitrage(data)
correlation = analyzer.calculate_rolling_correlation(window=21)

# Calculate risk metrics
var = ma.calculate_value_at_risk(returns['AAPL'])
es = ma.calculate_expected_shortfall(returns['AAPL'])
```

## üìö Documentation

### Core Modules

#### Stock Prediction
```python
from meridianalgo import StockPredictor

# Initialize predictor
predictor = StockPredictor()

# Train model
predictor.train('AAPL')

# Get predictions
predictions = predictor.predict(days=5)
```

#### Portfolio Optimization
```python
from meridianalgo import PortfolioOptimizer
import yfinance as yf

# Fetch data
data = yf.download(['AAPL', 'MSFT', 'GOOGL'], start='2020-01-01')['Adj Close']
returns = data.pct_change().dropna()

# Optimize portfolio
optimizer = PortfolioOptimizer(returns)
efficient_frontier = optimizer.calculate_efficient_frontier()
optimal_weights = optimizer.optimize_portfolio()
```

#### Statistical Arbitrage
```python
from meridianalgo import StatisticalArbitrage

# Initialize arbitrage model
arbitrage = StatisticalArbitrage()

# Find cointegrated pairs
pairs = arbitrage.find_cointegrated_pairs(returns)

# Calculate spread
spread = arbitrage.calculate_spread(returns['AAPL'], returns['MSFT'])
```

### üìä Technical Indicators

```python
from meridianalgo import TechnicalIndicators

# Calculate RSI
rsi = TechnicalIndicators.rsi(data['Close'], period=14)

# Calculate MACD
macd, signal, hist = TechnicalIndicators.macd(data['Close'])

# Calculate Bollinger Bands
upper, middle, lower = TechnicalIndicators.bollinger_bands(data['Close'])
```

## üìà Performance Metrics

### Prediction Accuracy
- **Overall Accuracy**: 78-85% (within 3% of actual price)
- **Excellent Predictions**: 25-35% (within 1% of actual price)
- **Good Predictions**: 45-55% (within 2% of actual price)
- **Average Error**: 1.8-2.4%

### Risk Metrics
- **Value at Risk (VaR)**: 95% confidence level
- **Expected Shortfall (CVaR)**: Average loss beyond VaR
- **Maximum Drawdown**: Worst historical loss from peak to trough
- **Sharpe Ratio**: Risk-adjusted returns

## üõ†Ô∏è System Requirements

### Dependencies
- Python 3.8+
- NumPy >= 1.21.0
- pandas >= 1.5.0
- scikit-learn >= 1.0.0
- PyTorch >= 1.12.0
- yfinance >= 0.1.87

### Hardware
- **CPU**: 2+ cores recommended
- **RAM**: 4GB+ recommended
- **GPU**: Optional but recommended for faster training (NVIDIA CUDA, AMD ROCm, or Apple MPS supported)

## ü§ù Contributing

We welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üìû Support

For support, please open an issue on our [GitHub repository](https://github.com/MeridianAlgo/Python-Packages) or contact us at support@meridianalgo.com.

## üìù Disclaimer

This software is for educational and research purposes only. Stock market predictions are inherently uncertain, and past performance does not guarantee future results. Always conduct your own research and consider consulting with financial professionals before making investment decisions. The authors are not responsible for any financial losses incurred from using this software.

## Examples

See the `examples/` directory for complete usage examples:

1. [Portfolio Optimization](examples/portfolio_optimization.py)
2. [Statistical Arbitrage](examples/statistical_arbitrage.py)
3. [Time Series Prediction](examples/time_series_prediction.py)

## Requirements

- Python 3.7+
- numpy
- pandas
- scipy
- scikit-learn
- yfinance
- torch (for deep learning features)

## Contributing

Contributions are welcome! Please read our [Contributing Guidelines](CONTRIBUTING.md) for details on how to submit pull requests, report issues, or suggest features.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

For support, please open an issue on GitHub or contact support@meridianalgo.com

---

*MeridianAlgo is developed and maintained by the Meridian Algorithmic Research Team.*
