# coding: utf-8

"""
    CyborgDB Service

    REST API for CyborgDB: The Confidential Vector Database

    The version of the OpenAPI document: 0.12.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cyborgdb.openapi_client.models.index_config import IndexConfig
from typing import Optional, Set
from typing_extensions import Self

class CreateIndexRequest(BaseModel):
    """
    Request model for creating a new encrypted index.  Attributes:     index_config (Optional[Union[IndexIVFModel, IndexIVFPQModel, IndexIVFFlatModel]]):          Optional configuration model for the index.     index_key (str): A 32-byte encryption key as a hex string.     index_name (str): The name/identifier of the index.     embedding_model (Optional[str]): Optional embedding model name.     metric (Optional[str]): Optional distance metric.
    """ # noqa: E501
    index_config: Optional[IndexConfig] = None
    index_key: StrictStr = Field(description="32-byte encryption key as hex string")
    index_name: StrictStr = Field(description="ID name")
    embedding_model: Optional[StrictStr] = None
    metric: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["index_config", "index_key", "index_name", "embedding_model", "metric"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateIndexRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of index_config
        if self.index_config:
            _dict['index_config'] = self.index_config.to_dict()
        # set to None if index_config (nullable) is None
        # and model_fields_set contains the field
        if self.index_config is None and "index_config" in self.model_fields_set:
            _dict['index_config'] = None

        # set to None if embedding_model (nullable) is None
        # and model_fields_set contains the field
        if self.embedding_model is None and "embedding_model" in self.model_fields_set:
            _dict['embedding_model'] = None

        # set to None if metric (nullable) is None
        # and model_fields_set contains the field
        if self.metric is None and "metric" in self.model_fields_set:
            _dict['metric'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateIndexRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index_config": IndexConfig.from_dict(obj["index_config"]) if obj.get("index_config") is not None else None,
            "index_key": obj.get("index_key"),
            "index_name": obj.get("index_name"),
            "embedding_model": obj.get("embedding_model"),
            "metric": obj.get("metric")
        })
        return _obj


