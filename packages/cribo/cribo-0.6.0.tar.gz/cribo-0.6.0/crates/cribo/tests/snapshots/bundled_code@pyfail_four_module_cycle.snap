---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pyfail_four_module_cycle/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
module_a = _cribo.types.SimpleNamespace(__name__='module_a', __initializing__=False, __initialized__=False)
module_b = _cribo.types.SimpleNamespace(__name__='module_b', __initializing__=False, __initialized__=False)
module_c = _cribo.types.SimpleNamespace(__name__='module_c', __initializing__=False, __initialized__=False)
module_d = _cribo.types.SimpleNamespace(__name__='module_d', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_1444c2_module_a(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global module_b

    def start_process():
        """Start the processing chain A -> B -> C -> D -> A"""
        global module_b
        module_b = _cribo_init___cribo_277dcc_module_b(module_b)
        process_in_b = module_b.process_in_b
        return f"A({process_in_b()})"
    self.start_process = start_process

    def final_step():
        """Final step called by module_d to complete the cycle"""
        global module_b
        module_b = _cribo_init___cribo_277dcc_module_b(module_b)
        process_in_b = module_b.process_in_b
        return "A_final"
    self.final_step = final_step
    self.__initialized__ = True
    self.__initializing__ = False
    return self
module_a.__init__ = _cribo_init___cribo_1444c2_module_a
def _cribo_init___cribo_277dcc_module_b(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global module_c

    def process_in_b():
        """Process in B, depends on C"""
        global module_c
        module_c = _cribo_init___cribo_21fc08_module_c(module_c)
        process_in_c = module_c.process_in_c
        return f"B({process_in_c()})"
    self.process_in_b = process_in_b

    def step_b():
        global module_c
        module_c = _cribo_init___cribo_21fc08_module_c(module_c)
        process_in_c = module_c.process_in_c
        return "B_step"
    self.step_b = step_b
    self.__initialized__ = True
    self.__initializing__ = False
    return self
module_b.__init__ = _cribo_init___cribo_277dcc_module_b
def _cribo_init___cribo_21fc08_module_c(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global module_d

    def process_in_c():
        """Process in C, depends on D"""
        global module_d
        module_d = _cribo_init___cribo_f1543a_module_d(module_d)
        process_in_d = module_d.process_in_d
        return f"C({process_in_d()})"
    self.process_in_c = process_in_c

    def step_c():
        global module_d
        module_d = _cribo_init___cribo_f1543a_module_d(module_d)
        process_in_d = module_d.process_in_d
        return "C_step"
    self.step_c = step_c
    self.__initialized__ = True
    self.__initializing__ = False
    return self
module_c.__init__ = _cribo_init___cribo_21fc08_module_c
def _cribo_init___cribo_f1543a_module_d(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global module_a

    def process_in_d():
        """Process in D, depends back on A - completes the 4-module cycle"""
        global module_a
        module_a = _cribo_init___cribo_1444c2_module_a(module_a)
        final_step = module_a.final_step
        return f"D({final_step()})"
    self.process_in_d = process_in_d

    def step_d():
        global module_a
        module_a = _cribo_init___cribo_1444c2_module_a(module_a)
        final_step = module_a.final_step
        return "D_step"
    self.step_d = step_d
    self.__initialized__ = True
    self.__initializing__ = False
    return self
module_d.__init__ = _cribo_init___cribo_f1543a_module_d
module_a = _cribo_init___cribo_1444c2_module_a(module_a)
def main():
    result = module_a.start_process()
    print(f"Four module cycle result: {result}")
if __name__ == "__main__":
    main()
