---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pyfail_class_level_cycles/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
admin_class = _cribo.types.SimpleNamespace(__name__='admin_class', __initializing__=False, __initialized__=False)
user_class = _cribo.types.SimpleNamespace(__name__='user_class', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_7f7c68_admin_class(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global user_class
    """Admin class module with circular dependency."""
    user_class = _cribo_init___cribo_f4b9e6_user_class(user_class)
    User = user_class.User
    self.User = User
    self.User = User

    class Admin(User):
        """Admin class that inherits from User."""

        def __init__(self, name):
            super().__init__(name)
            self.is_admin = True

        def demote_to_user(self):
            """Demote admin to regular user."""
            return User(self.name)
    Admin.__module__ = 'admin_class'
    self.Admin = Admin
    self.__initialized__ = True
    self.__initializing__ = False
    return self
admin_class.__init__ = _cribo_init___cribo_7f7c68_admin_class
def _cribo_init___cribo_f4b9e6_user_class(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global admin_class
    """User class module with circular dependency."""
    admin_class = _cribo_init___cribo_7f7c68_admin_class(admin_class)
    Admin = admin_class.Admin
    self.Admin = Admin
    self.Admin = Admin

    class User:
        """User class that references Admin class."""

        def __init__(self, name):
            self.name = name
            self.admin_reference = Admin

        def promote_to_admin(self):
            """Promote user to admin."""
            return self.admin_reference(self.name)
    User.__module__ = 'user_class'
    self.User = User
    self.__initialized__ = True
    self.__initializing__ = False
    return self
user_class.__init__ = _cribo_init___cribo_f4b9e6_user_class
"""Test case with class-level circular dependencies."""
user_class = _cribo_init___cribo_f4b9e6_user_class(user_class)
User = user_class.User
admin_class = _cribo_init___cribo_7f7c68_admin_class(admin_class)
Admin = admin_class.Admin
def main():
    user = User("Alice")
    admin = Admin("Bob")
    print(f"User: {user.name}")
    print(f"Admin: {admin.name}")
if __name__ == "__main__":
    main()
