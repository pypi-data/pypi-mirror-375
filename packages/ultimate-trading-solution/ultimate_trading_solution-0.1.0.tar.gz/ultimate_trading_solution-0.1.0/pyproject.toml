[tool.poetry]
name = "ultimate-trading-solution"
version = "0.1.0"
description = "A comprehensive trading solution with advanced analytics and automation"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/yourusername/ultimate-trading-solution"
repository = "https://github.com/yourusername/ultimate-trading-solution.git"
documentation = "https://yourusername.github.io/ultimate-trading-solution"
keywords = ["trading", "finance", "analytics", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]
packages = [{include = "ultimate_trading_solution", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
pandas = "^2.0.0"
numpy = "^1.24.0"
requests = "^2.31.0"
pydantic = "^2.0.0"
fastapi = "^0.100.0"
uvicorn = {extras = ["standard"], version = "^0.23.0"}
sqlalchemy = "^2.0.0"
alembic = "^1.11.0"
redis = "^4.6.0"
celery = "^5.3.0"
python-dotenv = "^1.0.0"
httpx = "^0.24.0"
aiofiles = "^23.0.0"
structlog = "^23.0.0"
rich = "^13.0.0"
click = "^8.1.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
pytest-xdist = "^3.3.0"
factory-boy = "^3.3.0"
faker = "^19.0.0"
freezegun = "^1.2.0"

# Code quality - Modern approach with Ruff
ruff = "^0.1.0"
mypy = "^1.5.0"
pre-commit = "^3.3.0"

# Security
bandit = "^1.7.0"
safety = "^2.3.0"

# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.1.0"
mkdocstrings = {extras = ["python"], version = "^0.22.0"}
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.0"

# Type stubs
types-requests = "*"
types-redis = "*"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.1.0"
mkdocstrings = {extras = ["python"], version = "^0.22.0"}
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
pytest-xdist = "^3.3.0"
factory-boy = "^3.3.0"
faker = "^19.0.0"
freezegun = "^1.2.0"
httpx = "^0.24.0"

[tool.poetry.scripts]
trading-cli = "ultimate_trading_solution.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration - Modern replacement for Black, isort, flake8, etc.
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "AIR", # airflow
    "PERF", # perflint
    "FURB", # refurb
    "RUF", # ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "S101", # Use of assert detected
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "TRY003", # Avoid specifying long messages outside exception class
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "S106", "S108"]
"scripts/*" = ["T201", "S602", "S603", "S607"]

[tool.ruff.isort]
known-first-party = ["ultimate_trading_solution"]
known-third-party = ["pandas", "numpy", "requests", "fastapi", "pydantic", "sqlalchemy"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "alembic.*",
]
ignore_missing_imports = true

# Pytest configuration - Modern comprehensive setup
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/ultimate_trading_solution",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=json:coverage.json",
    "--cov-fail-under=85",
    "--durations=10",
    "--tb=short",
    "--maxfail=5",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "network: marks tests that require network access",
    "database: marks tests that require database access",
    "redis: marks tests that require Redis access",
    "api: marks tests that test API endpoints",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/ultimate_trading_solution"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]

# Safety configuration
[tool.safety]
output = "json"
