frameworks:
  crewai:
    adapter_import: automcp.adapters.crewai import create_crewai_adapter
    import_comment: "# from your_module import YourCrewAgent"
    adapter_definition: |
      mcp_crewai = create_crewai_adapter(
          agent_instance=YourCrewAgent,  # Replace with your actual CrewAI agent instance
          name=name,
          description=description,
          input_schema=InputSchema,
      )

  mcp_agent:
    adapter_import: automcp.adapters.mcp_agent import create_mcp_agent_adapter
    import_comment: "# from your_module import your_agent_class, your_llm, your_app"
    adapter_definition: |
      mcp_agent = create_mcp_agent_adapter(
          agent_instance=instance_of_your_agent_class,
          llm=mcp_agent_llm, # mcp_agent LLM eg OpenAIAugmentedLLM
          app=mcp_agent_app, # mcp_agent app 
          app_initialize_fn=mcp_agent_app_initialize_fn, # mcp_agent app initialize function
          name=name,
          description=description,
          input_schema=InputSchema,
      )

  langgraph:
    adapter_import: automcp.adapters.langgraph import create_langgraph_adapter
    import_comment: "# from your_module import YourLangGraphAgent"
    adapter_definition: |
      mcp_langgraph_agent = create_langgraph_adapter(
          agent_instance=YourLangGraphAgent,  # Replace with your actual LangGraph agent instance
          name=name,
          description=description,
          input_schema=InputSchema,
      )

  pydantic:
    adapter_import: automcp.adapters.pydantic import create_pydantic_adapter
    import_comment: "# from your_module import YourPydanticAgent"
    adapter_definition: |
      mcp_pydantic_agent = create_pydantic_adapter(
          agent_instance=YourPydanticAgent,  # Replace with your actual Pydantic agent instance
          name=name,
          description=description,
          input_schema=InputSchema,
      )
  
  llamaindex:
    adapter_import: automcp.adapters.llamaindex import create_llamaindex_adapter
    import_comment: "# from your_module import YourLlamaIndexAgent"
    adapter_definition: |
      mcp_llamaindex_agent = create_llamaindex_adapter(
          agent_instance=YourLlamaIndexAgent,  # Replace with your actual LlamaIndex agent instance
          name=name,  # Replace with your agent name
          description=description,
          input_schema=InputSchema,
      )

  openai:
    adapter_import: automcp.adapters.openai import create_openai_adapter
    import_comment: "# from your_module import YourOpenAIAgent"
    adapter_definition: |
      mcp_openai_agent = create_openai_adapter(
          agent_instance=YourOpenAIAgent,  # Replace with your actual OpenAI agent instance
          name=name,
          description=description,
          input_schema=InputSchema,
      )
          