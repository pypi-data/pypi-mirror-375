---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/early_module_reference/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypkg_sessions = _cribo.types.SimpleNamespace(__name__='mypkg.sessions')
mypkg = _cribo.types.SimpleNamespace(__name__='mypkg', __initializing__=False, __initialized__=False)
mypkg.sessions = mypkg_sessions
"""Sessions module with Session class."""
class Session:
    """A simple session class."""

    def __init__(self):
        self.headers = {}
        self.cookies = {}

    def request(self, method, url, **kwargs):
        """Make a request."""
        return f"Mock response for {method} {url}"

    def __enter__(self):
        """Context manager entry."""
        return self

    def __exit__(self, *args):
        """Context manager exit."""
        pass
Session.__module__ = 'mypkg.sessions'
def session():
    """Create a new session."""
    return Session()
mypkg_sessions.Session = Session
mypkg_sessions.session = session
mypkg_api = _cribo.types.SimpleNamespace(__name__='mypkg.api', __initializing__=False, __initialized__=False)
mypkg.api = mypkg_api
def _cribo_init___cribo_b0d212_mypkg(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global mypkg_api
    """Package that demonstrates early module reference issue."""
    mypkg_api = _cribo_init___cribo_d2a83c_mypkg_api(mypkg_api)
    api = mypkg.api
    self.api = api
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypkg.__init__ = _cribo_init___cribo_b0d212_mypkg
def _cribo_init___cribo_d2a83c_mypkg_api(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """API module that references sessions module early.\n\nThis reproduces the issue where a module-level variable references\nanother module before it's fully initialized.\n"""
    sessions = mypkg.sessions
    self.sessions = sessions
    self.sessions = sessions
    session_ref = sessions
    self.session_ref = session_ref

    def request(method, url, **kwargs):
        """Make a request using the session."""
        with session_ref.Session() as session:
            return session.request(method=method, url=url, **kwargs)
    self.request = request
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypkg_api.__init__ = _cribo_init___cribo_d2a83c_mypkg_api
"""Test case for early module reference before initialization.\n\nThis reproduces the issue where a module tries to reference another module\nbefore it has been fully initialized through its init function.\n"""
__cribo_init_result = _cribo_init___cribo_b0d212_mypkg(mypkg)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypkg, attr, getattr(__cribo_init_result, attr))
response = mypkg.api.request("GET", "https://example.com")
print(f"Response: {response}")
sessions = mypkg.sessions
api = mypkg.api
