# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FeaturedOfferSegment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_membership': 'str',
        'segment_details': 'SegmentDetails',
    }

    attribute_map = {
        'customer_membership': 'customerMembership',
        'segment_details': 'segmentDetails',
    }

    def __init__(self, customer_membership=None, segment_details=None, _configuration=None):  # noqa: E501
        """FeaturedOfferSegment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._customer_membership = None
        self._segment_details = None
        self.discriminator = None

        self.customer_membership = customer_membership
        self.segment_details = segment_details

    @property
    def customer_membership(self):
        """Gets the customer_membership of this FeaturedOfferSegment.  # noqa: E501

        The customer membership type that makes up this segment  # noqa: E501

        :return: The customer_membership of this FeaturedOfferSegment.  # noqa: E501
        :rtype: str
        """
        return self._customer_membership

    @customer_membership.setter
    def customer_membership(self, customer_membership):
        """Sets the customer_membership of this FeaturedOfferSegment.

        The customer membership type that makes up this segment  # noqa: E501

        :param customer_membership: The customer_membership of this FeaturedOfferSegment.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and customer_membership is None:
            raise ValueError("Invalid value for `customer_membership`, must not be `None`")  # noqa: E501
        allowed_values = ["PRIME", "NON_PRIME", "DEFAULT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                customer_membership not in allowed_values):
            raise ValueError(
                "Invalid value for `customer_membership` ({0}), must be one of {1}"  # noqa: E501
                .format(customer_membership, allowed_values)
            )

        self._customer_membership = customer_membership

    @property
    def segment_details(self):
        """Gets the segment_details of this FeaturedOfferSegment.  # noqa: E501


        :return: The segment_details of this FeaturedOfferSegment.  # noqa: E501
        :rtype: SegmentDetails
        """
        return self._segment_details

    @segment_details.setter
    def segment_details(self, segment_details):
        """Sets the segment_details of this FeaturedOfferSegment.


        :param segment_details: The segment_details of this FeaturedOfferSegment.  # noqa: E501
        :type: SegmentDetails
        """
        if self._configuration.client_side_validation and segment_details is None:
            raise ValueError("Invalid value for `segment_details`, must not be `None`")  # noqa: E501

        self._segment_details = segment_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeaturedOfferSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturedOfferSegment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeaturedOfferSegment):
            return True

        return self.to_dict() != other.to_dict()
