# coding: utf-8

"""
    Selling Partner API for Listings Restrictions

    The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).

    The version of the OpenAPI document: 2021-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource': 'str',
        'verb': 'str',
        'title': 'str',
        'type': 'str',
    }

    attribute_map = {
        'resource': 'resource',
        'verb': 'verb',
        'title': 'title',
        'type': 'type',
    }

    def __init__(self, resource=None, verb=None, title=None, type=None, _configuration=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._resource = None
        self._verb = None
        self._title = None
        self._type = None
        self.discriminator = None

        self.resource = resource
        self.verb = verb
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def resource(self):
        """Gets the resource of this Link.  # noqa: E501

        The URI of the related resource.  # noqa: E501

        :return: The resource of this Link.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Link.

        The URI of the related resource.  # noqa: E501

        :param resource: The resource of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def verb(self):
        """Gets the verb of this Link.  # noqa: E501

        The HTTP verb used to interact with the related resource.  # noqa: E501

        :return: The verb of this Link.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this Link.

        The HTTP verb used to interact with the related resource.  # noqa: E501

        :param verb: The verb of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and verb is None:
            raise ValueError("Invalid value for `verb`, must not be `None`")  # noqa: E501
        allowed_values = ["GET"]  # noqa: E501
        if (self._configuration.client_side_validation and
                verb not in allowed_values):
            raise ValueError(
                "Invalid value for `verb` ({0}), must be one of {1}"  # noqa: E501
                .format(verb, allowed_values)
            )

        self._verb = verb

    @property
    def title(self):
        """Gets the title of this Link.  # noqa: E501

        The title of the related resource.  # noqa: E501

        :return: The title of this Link.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Link.

        The title of the related resource.  # noqa: E501

        :param title: The title of this Link.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Link.  # noqa: E501

        The media type of the related resource.  # noqa: E501

        :return: The type of this Link.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Link.

        The media type of the related resource.  # noqa: E501

        :param type: The type of this Link.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Link):
            return True

        return self.to_dict() != other.to_dict()
