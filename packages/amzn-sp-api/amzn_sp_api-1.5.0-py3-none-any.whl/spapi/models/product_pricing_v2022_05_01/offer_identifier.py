# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class OfferIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_id': 'str',
        'seller_id': 'str',
        'sku': 'str',
        'asin': 'str',
        'fulfillment_type': 'FulfillmentType',
    }

    attribute_map = {
        'marketplace_id': 'marketplaceId',
        'seller_id': 'sellerId',
        'sku': 'sku',
        'asin': 'asin',
        'fulfillment_type': 'fulfillmentType',
    }

    def __init__(self, marketplace_id=None, seller_id=None, sku=None, asin=None, fulfillment_type=None, _configuration=None):  # noqa: E501
        """OfferIdentifier - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._marketplace_id = None
        self._seller_id = None
        self._sku = None
        self._asin = None
        self._fulfillment_type = None
        self.discriminator = None

        self.marketplace_id = marketplace_id
        if seller_id is not None:
            self.seller_id = seller_id
        if sku is not None:
            self.sku = sku
        self.asin = asin
        if fulfillment_type is not None:
            self.fulfillment_type = fulfillment_type

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this OfferIdentifier.  # noqa: E501

        The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).  # noqa: E501

        :return: The marketplace_id of this OfferIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this OfferIdentifier.

        The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).  # noqa: E501

        :param marketplace_id: The marketplace_id of this OfferIdentifier.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def seller_id(self):
        """Gets the seller_id of this OfferIdentifier.  # noqa: E501

        The seller identifier for the offer.  # noqa: E501

        :return: The seller_id of this OfferIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this OfferIdentifier.

        The seller identifier for the offer.  # noqa: E501

        :param seller_id: The seller_id of this OfferIdentifier.  # noqa: E501
        :type: str
        """

        self._seller_id = seller_id

    @property
    def sku(self):
        """Gets the sku of this OfferIdentifier.  # noqa: E501

        The seller SKU of the item. This will only be present for the target offer, which belongs to the requesting seller.  # noqa: E501

        :return: The sku of this OfferIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this OfferIdentifier.

        The seller SKU of the item. This will only be present for the target offer, which belongs to the requesting seller.  # noqa: E501

        :param sku: The sku of this OfferIdentifier.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def asin(self):
        """Gets the asin of this OfferIdentifier.  # noqa: E501

        The ASIN of the item.  # noqa: E501

        :return: The asin of this OfferIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this OfferIdentifier.

        The ASIN of the item.  # noqa: E501

        :param asin: The asin of this OfferIdentifier.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and asin is None:
            raise ValueError("Invalid value for `asin`, must not be `None`")  # noqa: E501

        self._asin = asin

    @property
    def fulfillment_type(self):
        """Gets the fulfillment_type of this OfferIdentifier.  # noqa: E501


        :return: The fulfillment_type of this OfferIdentifier.  # noqa: E501
        :rtype: FulfillmentType
        """
        return self._fulfillment_type

    @fulfillment_type.setter
    def fulfillment_type(self, fulfillment_type):
        """Sets the fulfillment_type of this OfferIdentifier.


        :param fulfillment_type: The fulfillment_type of this OfferIdentifier.  # noqa: E501
        :type: FulfillmentType
        """

        self._fulfillment_type = fulfillment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfferIdentifier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfferIdentifier):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OfferIdentifier):
            return True

        return self.to_dict() != other.to_dict()
