[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tresto-ai"
version = "0.3.1"
description = "AI-powered E2E testing CLI inspired by Playwright codegen"
readme = "README.md"
license = "MIT"
requires-python = ">=3.13"
authors = [{ name = "LeaveMyYard", email = "zhukovpavel2001@gmail.com" }]
keywords = ["testing", "e2e", "ai", "playwright", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "typer[all]>=0.9.0",
    "playwright>=1.40.0",
    "anthropic>=0.25.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "toml>=0.10.2",
    "pathspec>=0.11.0",
    "langchain>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-core>=0.1.0",
    "pydantic-settings>=2.10.1",
    "langgraph>=0.6.4",
    "beautifulsoup4>=4.12.0",
    "pillow>=11.3.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/LeaveMyYard/Tresto"
Documentation = "https://github.com/LeaveMyYard/Tresto#readme"
Repository = "https://github.com/LeaveMyYard/Tresto"
"Bug Tracker" = "https://github.com/LeaveMyYard/Tresto/issues"

[project.scripts]
tresto = "tresto.cli:app"

[tool.hatch.build.targets.wheel]
packages = ["src/tresto"]

[tool.ruff]
target-version = "py313"
line-length = 120

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "FA",    # flake8-future-annotations
    "UP",    # pyupgrade
    "ASYNC", # flake8-async
    "PERF",  # perflint
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "T20",   # flake8-print
    "C4",    # flake8-comprehensions
    "LOG",   # flake8-logging
    "PIE",   # flake8-pie
    "TID",   # flake8-tidy-imports
    "ICN",   # flake8-import-conventions
    "PLE",   # pylint errors
    "TC",    # flake8-type-checking
    "BLE",   # flake8-blind-except
]
ignore = [
    "E501", # line too long, handled by ruff format
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["SLF001"]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.ruff.lint.flake8-type-checking]
# Add any bases whose annotations must be available at runtime:
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
# Add decorators (e.g., FastAPI Depends) that require runtime evaluation:
runtime-evaluated-decorators = [
    "fastapi.Depends",
    "fastapi.Query",
    "fastapi.Path",
    "fastapi.Body",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[dependency-groups]
dev = ["mypy>=1.17.1", "ruff>=0.12.7", "types-toml>=0.10.8.20240310"]
