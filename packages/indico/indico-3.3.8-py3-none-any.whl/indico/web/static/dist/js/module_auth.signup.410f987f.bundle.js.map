{"version":3,"file":"js/module_auth.signup.410f987f.bundle.js","mappings":"6SAKA,MAAAA,EAAAC,EAAAA,QAAAC,KAAA,MAAAC,SAAA,wBAAAC,MAAA,EAAAC,KAAA,GAAAC,WAAA,GAAAC,SAAA,GAAAC,MAAA,EAAAC,KAAA,IAAAC,WAAA,IAAAD,KAAA,IAAAC,WAAA,IAAAD,KAAA,UAAAC,WAAA,YAAAC,EAAAV,EAAAA,QAAAC,KAAA,MAAAC,SAAA,oBAAAC,MAAA,EAAAC,KAAA,GAAAC,WAAA,GAAAC,SAAA,GAAAC,MAAA,EAAAC,KAAA,IAAAC,WAAA,IAAAD,KAAA,IAAAC,WAAA,IAAAD,KAAA,MAAAC,WAAA,YA+BA,SAASE,GAAO,UACdC,EAAS,UACTC,EAAS,OACTC,EAAM,IACNC,EAAG,iBACHC,EAAgB,cAChBC,EAAa,mBACbC,EAAkB,mBAClBC,EAAkB,cAClBC,EAAa,0BACbC,EAAyB,wBACzBC,EAAuB,gBACvBC,EAAe,kBACfC,EAAiB,aACjBC,EAAY,OACZC,EAAM,gBACNC,EAAe,eACfC,EAAc,gBACdC,EAAe,aACfC,EAAY,mBACZC,IAEA,MAyBMC,EAAmBA,KACvB,MAAMC,EAAkBC,GAAOA,EAAID,kBAC7BE,EAAiBrB,EACrBsB,EAAAA,cAAA,KAAGC,KAAM3B,IAAU4B,IAAI,aAAaC,OAAO,SAASC,QAASP,IAE7DG,EAAAA,cAAA,aAEIK,EAA2BzB,EAC/BoB,EAAAA,cAAA,KAAGC,KAAMtC,IAAoBuC,IAAI,aAAaC,OAAO,SAASC,QAASP,IAEvEG,EAAAA,cAAA,aAGF,OAAKrB,GAAOD,KAAYG,GAAiBD,GAErCoB,EAAAA,cAACM,EAAAA,UAAS,KAAC,yCAC8B,IACvCN,EAAAA,cAACO,EAAAA,MAAK,CAACC,KAAK,UAAUC,QAASV,GAAgB,oBAEtC,IAAI,MACT,IACJC,EAAAA,cAACO,EAAAA,MAAK,CAACC,KAAK,cAAcC,QAASJ,GAA0B,kBAErD,KAIH1B,GAAOD,EAEdsB,EAAAA,cAACM,EAAAA,UAAS,KAAC,yCAC8B,IACvCN,EAAAA,cAACO,EAAAA,MAAK,CAACC,KAAK,UAAUC,QAASV,GAAgB,oBAEvC,KAIHlB,GAAiBD,EAExBoB,EAAAA,cAACM,EAAAA,UAAS,KAAC,yCAC8B,IACvCN,EAAAA,cAACO,EAAAA,MAAK,CAACC,KAAK,cAAcC,QAASJ,GAA0B,kBAErD,UANP,CAUP,EAGF,OACEL,EAAAA,cAACU,EAAAA,KAAS,CACRC,SA7EiBC,MAAOxC,EAAMyC,KAChC,MAAMC,GAASC,EAAAA,EAAAA,oBAAmB3C,EAAMyC,GAUxC,IAAIG,SATGF,EAAOG,iBACThC,EAGM6B,EAAOI,mBAChBJ,EAAOK,YAAcL,EAAOI,iBAAiBE,KAAKC,OAClDP,EAAOQ,eAAiBR,EAAOI,iBAAiBK,UACzCT,EAAOI,yBAJPJ,EAAOI,iBAOhB,IACEF,QAAaQ,EAAAA,YAAYC,KAAKC,SAASzB,KAAMa,EAC/C,CAAE,MAAOa,GACP,OAAOC,EAAAA,EAAAA,mBACLD,EACA1C,EAA4B,CAACkC,YAAa,oBAAsB,CAAC,EAErE,CACAO,SAASzB,KAAOe,EAAK5C,KAAKyD,eAEpB,IAAIC,SAAQ,QAAS,EAwDzB9C,cAAeA,EACf+C,mBAAoBC,IAAAA,QACpBC,aAAc,CAACC,YAAY,GAC3BC,SAAUrB,IACR,MAAMsB,EAAS,CAAC,EAQhB,OANEtB,EAAOuB,UACPvB,EAAOG,kBACPH,EAAOG,mBAAqBH,EAAOuB,WAEnCD,EAAOnB,iBAAmBX,EAAAA,UAAUgC,OAAO,yBAEtCF,CAAM,IAGdG,GACCvC,EAAAA,cAACwC,EAAAA,EAAI,CAAC7B,SAAU4B,EAAOE,eACnBtD,GACAa,EAAAA,cAAC0C,EAAAA,MAAK,CAAClC,KAAK,gBAAgBmC,QAASX,IAAAA,QAAWY,OAAQA,IAAM,OAE/DpD,GACCQ,EAAAA,cAAC6C,EAAAA,EAAO,CAACC,MAAI,GACX9C,EAAAA,cAACM,EAAAA,UAAS,KAAC,0GAMfN,EAAAA,cAAC+C,EAAAA,SAAQ,CACPC,OAAQ1C,EAAAA,UAAUgC,OAAO,oBACzBW,OAAQ9D,GAAmBV,GAE1Ba,EAAO4D,OAAS,EACflD,EAAAA,cAACmD,EAAAA,oBAAmB,CAClB3C,KAAK,QACL4C,MAAO9C,EAAAA,UAAUgC,OAAO,iBACxBe,QAAS/D,EAAOgE,KAAI3B,IAAK,CACvB4B,IAAK5B,EACL6B,MAAO7B,EACPP,KAAMO,MAERtC,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpB8D,UAAQ,IAGVzD,EAAAA,cAAC0D,EAAAA,iBAAgB,CACflD,KAAK,QACL4C,MAAO9C,EAAAA,UAAUgC,OAAO,iBACxBjD,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpBgE,UAAQ,IAGZ3D,EAAAA,cAACwC,EAAAA,EAAKoB,MAAK,CAACC,OAAO,SACjB7D,EAAAA,cAAC0D,EAAAA,iBAAgB,CACflD,KAAK,aACL4C,MAAO9C,EAAAA,UAAUgC,OAAO,cACxBmB,UAAQ,EACRpE,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpBwC,SAAU2B,EAAAA,WAAEC,UAAU,OAExB/D,EAAAA,cAAC0D,EAAAA,iBAAgB,CACflD,KAAK,YACL4C,MAAO9C,EAAAA,UAAUgC,OAAO,aACxBmB,UAAQ,EACRpE,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpBwC,SAAU2B,EAAAA,WAAEC,UAAU,QAGzB9E,EACCe,EAAAA,cAACgE,EAAAA,+BAA8B,CAC7BxD,KAAK,mBACLiD,SAAUhF,GAAagB,EAAgBwE,SAAS,eAChDC,SAAS,cACT7E,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpBwE,mBAAoB5E,EACpBL,wBAAyBA,IAG3Bc,EAAAA,cAAC0D,EAAAA,iBAAgB,CACflD,KAAK,cACL4C,MAAO9C,EAAAA,UAAUgC,OAAO,eACxBmB,SAAUhF,GAAagB,EAAgBwE,SAAS,eAChD5E,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpBwC,SAAUqB,QAAmBY,IAAVZ,GAAuBM,EAAAA,WAAEC,UAAU,IAAZD,CAAiBN,KAG9D,YAAanE,GACZW,EAAAA,cAACqE,EAAAA,oBAAmB,CAClB7D,KAAK,UACL4C,MAAO9C,EAAAA,UAAUgC,OAAO,WACxBjD,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpBwC,SAAU2B,EAAAA,WAAEC,UAAU,OAGzB,UAAW1E,GACVW,EAAAA,cAAC0D,EAAAA,iBAAgB,CACflD,KAAK,QACL4C,MAAO9C,EAAAA,UAAUgC,OAAO,gBACxBjD,aAAcA,EACdK,aAAcA,EACdC,mBAAoBA,EACpBwC,SAAU2B,EAAAA,WAAEC,UAAU,QAI3B5E,GACCa,EAAAA,cAAC+C,EAAAA,SAAQ,CAACC,OAAQ1C,EAAAA,UAAUgC,OAAO,kBAChClD,GACCY,EAAAA,cAACsE,EAAAA,WAAU,CACT9D,KAAK,WACL4C,MAAO9C,EAAAA,UAAUgC,OAAO,YACxBmB,UAAQ,EACRtB,SAAU2B,EAAAA,WAAEC,UAAU,OAG1B/D,EAAAA,cAACwC,EAAAA,EAAKoB,MAAK,CAACC,OAAO,SACjB7D,EAAAA,cAACsE,EAAAA,WAAU,CACT9D,KAAK,WACL+D,KAAK,WACLnB,MAAO9C,EAAAA,UAAUgC,OAAO,YACxBkC,aAAa,eACbf,UAAQ,EACRtB,SAAU2B,EAAAA,WAAEC,UAAU,OAExB/D,EAAAA,cAACsE,EAAAA,WAAU,CACT9D,KAAK,mBACL+D,KAAK,WACLnB,MAAO9C,EAAAA,UAAUgC,OAAO,oBACxBkC,aAAa,eACbf,UAAQ,EACRtB,SAAU2B,EAAAA,WAAEC,UAAU,SAGzBU,EAAAA,EAAAA,wBAAuB,+BAG3BhG,GACCuB,EAAAA,cAAC+C,EAAAA,SAAQ,CAACC,OAAQ1C,EAAAA,UAAUgC,OAAO,uBACjCtC,EAAAA,cAAC6C,EAAAA,EAAO,CAACC,MAAI,GACX9C,EAAAA,cAACM,EAAAA,UAAS,KAAC,oIAKbN,EAAAA,cAAC0E,EAAAA,cAAa,CACZjB,SAAUhE,EAAgBwE,SAAS,WACnCzD,KAAK,UACLmE,aAAa,GACbvB,MAAO9C,EAAAA,UAAUgC,OAAO,WACxBsC,YAAatE,EAAAA,UAAUgC,OACrB,iHAEFH,SAAUqB,QAAmBY,IAAVZ,GAAuBM,EAAAA,WAAEC,UAAU,IAAZD,CAAkBN,MAIjE1E,KAAwBH,IAAQD,GAC/BsB,EAAAA,cAAC+C,EAAAA,SAAQ,CAACC,OAAQ1C,EAAAA,UAAUgC,OAAO,qBACjCtC,EAAAA,cAAA,OAAK6E,UAAU,6BAA6BC,wBAAyB,CAACC,OAAQpG,MAGjFG,KAAwBD,IAAkBD,GACzCoB,EAAAA,cAAC+C,EAAAA,SAAQ,CAACC,OAAQ1C,EAAAA,UAAUgC,OAAO,mBACjCtC,EAAAA,cAAA,OACE6E,UAAU,6BACVC,wBAAyB,CAACC,OAAQlG,MAIvCC,KAAwBC,GACvBiB,EAAAA,cAAA,OAAK6E,UAAU,SACb7E,EAAAA,cAACM,EAAAA,UAAS,KAAC,gBAAwB,KAAG0E,IAAOjG,GAAoBkG,OAAO,OAG3EnG,GACCkB,EAAAA,cAACkF,EAAAA,cAAa,CACZ1E,KAAK,eACLiD,UAAQ,EACRL,MAAOpD,EAAAA,cAAA,aAAQJ,OAInBI,EAAAA,cAAA,OAAKmF,MAAO,CAACC,QAAS,OAAQC,eAAgB,aAC5CrF,EAAAA,cAACsF,EAAAA,kBAAiB,CAChBC,qBAAqB,EACrBnC,MACE3E,EACI6B,EAAAA,UAAUgC,OAAO,+BACjBhC,EAAAA,UAAUgC,OAAO,4BAEvBuC,UAAU,kBAEZ7E,EAAAA,cAACwC,EAAAA,EAAKE,MAAK,CAAC8C,SAAUjD,EAAOL,YAC3BlC,EAAAA,cAACyF,EAAAA,EAAM,CAACC,GAAG,IAAIzF,KAAMzB,EAAWgH,SAAUjD,EAAOL,YAC/ClC,EAAAA,cAACM,EAAAA,UAAS,KAAC,eAQ3B,CAEA/B,EAAOoH,UAAY,CACjBnH,UAAWoH,IAAAA,OAAiBC,WAC5BpH,UAAWmH,IAAAA,KAAeC,WAC1BlH,IAAKiH,IAAAA,OACLlH,OAAQkH,IAAAA,OACR/G,cAAe+G,IAAAA,OACfhH,iBAAkBgH,IAAAA,OAClB9G,mBAAoB8G,IAAAA,KACpB7G,mBAAoB6G,IAAAA,OACpB5G,cAAe4G,IAAAA,OAAiBC,WAChC5G,0BAA2B2G,IAAAA,KAAeC,WAC1C3G,wBAAyB0G,IAAAA,KAAeC,WACxC1G,gBAAiByG,IAAAA,KAAeC,WAChCzG,kBAAmBwG,IAAAA,KACnBvG,aAAcuG,IAAAA,OAAiBC,WAC/BvG,OAAQsG,IAAAA,QAAkBA,IAAAA,QAAkBC,WAC5CtG,gBAAiBqG,IAAAA,OACjBpG,eAAgBoG,IAAAA,KAChBnG,gBAAiBmG,IAAAA,QAAkBA,IAAAA,QAAkBC,WACrDnG,aAAckG,IAAAA,QAAkBA,IAAAA,QAChCjG,mBAAoBiG,IAAAA,QAGtBrH,EAAOuH,aAAe,CACpBnH,IAAK,GACLD,OAAQ,GACRG,cAAe,GACfD,iBAAkB,GAClBE,oBAAoB,EACpBC,mBAAoB,KACpBK,mBAAmB,EACnBG,gBAAiB,KACjBC,gBAAgB,EAChBE,aAAc,GACdC,mBAAoB,IAGtBoG,SAASC,iBAAiB,oBAAoB,KAC5C,MAAMC,EAAYF,SAASG,cAAc,qBACzC,IAAKD,EACH,OAGF,MAAME,EAASC,KAAKC,MAAMJ,EAAUK,QAAQH,QAC5CI,EAAAA,OAAgBvG,EAAAA,cAACzB,EAAW4H,GAAYF,EAAU,G","sources":["webpack:///indico/modules/auth/client/js/signup.jsx"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2025 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport privacyPolicyURL from 'indico-url:legal.display_privacy';\nimport tosURL from 'indico-url:legal.display_tos';\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Field, Form as FinalForm} from 'react-final-form';\nimport {Button, Form, Message} from 'semantic-ui-react';\n\nimport {\n  SyncedFinalAffiliationDropdown,\n  SyncedFinalDropdown,\n  SyncedFinalInput,\n  SyncedFinalTextArea,\n} from 'indico/react/components/syncedInputs';\nimport {\n  FinalInput,\n  FinalSubmitButton,\n  handleSubmitError,\n  getValuesForFields,\n  validators as v,\n} from 'indico/react/forms';\nimport {Fieldset, FinalTextArea, FinalCheckbox} from 'indico/react/forms/fields';\nimport {Translate, Param} from 'indico/react/i18n';\nimport {indicoAxios} from 'indico/utils/axios';\nimport {renderPluginComponents} from 'indico/utils/plugins';\n\nfunction Signup({\n  cancelURL,\n  moderated,\n  tosUrl,\n  tos,\n  privacyPolicyUrl,\n  privacyPolicy,\n  termsRequireAccept,\n  termsEffectiveDate,\n  initialValues,\n  hasPredefinedAffiliations,\n  allowCustomAffiliations,\n  showAccountForm,\n  showUsernameField,\n  syncedValues,\n  emails,\n  affiliationMeta,\n  hasPendingUser,\n  mandatoryFields,\n  lockedFields,\n  lockedFieldMessage,\n}) {\n  const handleSubmit = async (data, form) => {\n    const values = getValuesForFields(data, form);\n    delete values.password_confirm;\n    if (!hasPredefinedAffiliations) {\n      // value.affiliation is already there and used\n      delete values.affiliation_data;\n    } else if (values.affiliation_data) {\n      values.affiliation = values.affiliation_data.text.trim();\n      values.affiliation_id = values.affiliation_data.id;\n      delete values.affiliation_data;\n    }\n    let resp;\n    try {\n      resp = await indicoAxios.post(location.href, values);\n    } catch (e) {\n      return handleSubmitError(\n        e,\n        hasPredefinedAffiliations ? {affiliation: 'affiliation_data'} : {}\n      );\n    }\n    location.href = resp.data.redirect;\n    // never finish submitting to avoid fields being re-enabled\n    await new Promise(() => {});\n  };\n\n  const termsAcceptLabel = () => {\n    const stopPropagation = evt => evt.stopPropagation();\n    const tosLinkWrapper = tosUrl ? (\n      <a href={tosURL()} rel=\"noreferrer\" target=\"_blank\" onClick={stopPropagation} />\n    ) : (\n      <span />\n    );\n    const privacyPolicyLinkWrapper = privacyPolicyUrl ? (\n      <a href={privacyPolicyURL()} rel=\"noreferrer\" target=\"_blank\" onClick={stopPropagation} />\n    ) : (\n      <span />\n    );\n\n    if ((tos || tosUrl) && (privacyPolicy || privacyPolicyUrl)) {\n      return (\n        <Translate>\n          I have read, understood and accept the{' '}\n          <Param name=\"tosLink\" wrapper={tosLinkWrapper}>\n            terms of service\n          </Param>{' '}\n          and{' '}\n          <Param name=\"privacyLink\" wrapper={privacyPolicyLinkWrapper}>\n            privacy policy\n          </Param>\n          .\n        </Translate>\n      );\n    } else if (tos || tosUrl) {\n      return (\n        <Translate>\n          I have read, understood and accept the{' '}\n          <Param name=\"tosLink\" wrapper={tosLinkWrapper}>\n            terms of service\n          </Param>\n          .\n        </Translate>\n      );\n    } else if (privacyPolicy || privacyPolicyUrl) {\n      return (\n        <Translate>\n          I have read, understood and accept the{' '}\n          <Param name=\"privacyLink\" wrapper={privacyPolicyLinkWrapper}>\n            privacy policy\n          </Param>\n          .\n        </Translate>\n      );\n    }\n  };\n\n  return (\n    <FinalForm\n      onSubmit={handleSubmit}\n      initialValues={initialValues}\n      initialValuesEqual={_.isEqual}\n      subscription={{submitting: true}}\n      validate={values => {\n        const errors = {};\n        if (\n          values.password &&\n          values.password_confirm &&\n          values.password_confirm !== values.password\n        ) {\n          errors.password_confirm = Translate.string('Passwords must match');\n        }\n        return errors;\n      }}\n    >\n      {fprops => (\n        <Form onSubmit={fprops.handleSubmit}>\n          {!showAccountForm && (\n            <Field name=\"synced_fields\" isEqual={_.isEqual} render={() => null} />\n          )}\n          {hasPendingUser && (\n            <Message info>\n              <Translate>\n                There is already some information in Indico that concerns you. We are going to link\n                it automatically.\n              </Translate>\n            </Message>\n          )}\n          <Fieldset\n            legend={Translate.string('User information')}\n            active={showAccountForm || moderated}\n          >\n            {emails.length > 1 ? (\n              <SyncedFinalDropdown\n                name=\"email\"\n                label={Translate.string('Email address')}\n                options={emails.map(e => ({\n                  key: e,\n                  value: e,\n                  text: e,\n                }))}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                required\n              />\n            ) : (\n              <SyncedFinalInput\n                name=\"email\"\n                label={Translate.string('Email address')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                readOnly\n              />\n            )}\n            <Form.Group widths=\"equal\">\n              <SyncedFinalInput\n                name=\"first_name\"\n                label={Translate.string('First name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                validate={v.maxLength(250)}\n              />\n              <SyncedFinalInput\n                name=\"last_name\"\n                label={Translate.string('Last name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                validate={v.maxLength(250)}\n              />\n            </Form.Group>\n            {hasPredefinedAffiliations ? (\n              <SyncedFinalAffiliationDropdown\n                name=\"affiliation_data\"\n                required={moderated && mandatoryFields.includes('affiliation')}\n                syncName=\"affiliation\"\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                currentAffiliation={affiliationMeta}\n                allowCustomAffiliations={allowCustomAffiliations}\n              />\n            ) : (\n              <SyncedFinalInput\n                name=\"affiliation\"\n                label={Translate.string('Affiliation')}\n                required={moderated && mandatoryFields.includes('affiliation')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                validate={value => value !== undefined && v.maxLength(250)(value)}\n              />\n            )}\n            {'address' in syncedValues && (\n              <SyncedFinalTextArea\n                name=\"address\"\n                label={Translate.string('Address')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                validate={v.maxLength(500)}\n              />\n            )}\n            {'phone' in syncedValues && (\n              <SyncedFinalInput\n                name=\"phone\"\n                label={Translate.string('Phone number')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                validate={v.maxLength(100)}\n              />\n            )}\n          </Fieldset>\n          {showAccountForm && (\n            <Fieldset legend={Translate.string('Login details')}>\n              {showUsernameField && (\n                <FinalInput\n                  name=\"username\"\n                  label={Translate.string('Username')}\n                  required\n                  validate={v.maxLength(100)}\n                />\n              )}\n              <Form.Group widths=\"equal\">\n                <FinalInput\n                  name=\"password\"\n                  type=\"password\"\n                  label={Translate.string('Password')}\n                  autoComplete=\"new-password\"\n                  required\n                  validate={v.maxLength(100)}\n                />\n                <FinalInput\n                  name=\"password_confirm\"\n                  type=\"password\"\n                  label={Translate.string('Confirm password')}\n                  autoComplete=\"new-password\"\n                  required\n                  validate={v.maxLength(100)}\n                />\n              </Form.Group>\n              {renderPluginComponents('signup-form-after-password')}\n            </Fieldset>\n          )}\n          {moderated && (\n            <Fieldset legend={Translate.string('Account moderation')}>\n              <Message info>\n                <Translate>\n                  Each new account needs to be approved by an administrator. We will send you an\n                  email as soon as your request has been approved.\n                </Translate>\n              </Message>\n              <FinalTextArea\n                required={mandatoryFields.includes('comment')}\n                name=\"comment\"\n                initialValue=\"\"\n                label={Translate.string('Comment')}\n                description={Translate.string(\n                  'You can provide additional information or a comment for the administrators who will review your registration.'\n                )}\n                validate={value => value !== undefined && v.maxLength(1000)(value)}\n              />\n            </Fieldset>\n          )}\n          {termsRequireAccept && !!tos && !tosUrl && (\n            <Fieldset legend={Translate.string('Terms of service')}>\n              <div className=\"field policy editor-output\" dangerouslySetInnerHTML={{__html: tos}} />\n            </Fieldset>\n          )}\n          {termsRequireAccept && !!privacyPolicy && !privacyPolicyUrl && (\n            <Fieldset legend={Translate.string('Privacy Policy')}>\n              <div\n                className=\"field policy editor-output\"\n                dangerouslySetInnerHTML={{__html: privacyPolicy}}\n              />\n            </Fieldset>\n          )}\n          {termsRequireAccept && !!termsEffectiveDate && (\n            <div className=\"field\">\n              <Translate>Last updated</Translate>: {moment(termsEffectiveDate).format('LL')}\n            </div>\n          )}\n          {termsRequireAccept && (\n            <FinalCheckbox\n              name=\"accept_terms\"\n              required\n              label={<label>{termsAcceptLabel()}</label>}\n            />\n          )}\n\n          <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n            <FinalSubmitButton\n              disabledUntilChange={false}\n              label={\n                moderated\n                  ? Translate.string('Submit registration request')\n                  : Translate.string('Create my Indico profile')\n              }\n              className=\"submit-button\"\n            />\n            <Form.Field disabled={fprops.submitting}>\n              <Button as=\"a\" href={cancelURL} disabled={fprops.submitting}>\n                <Translate>Cancel</Translate>\n              </Button>\n            </Form.Field>\n          </div>\n        </Form>\n      )}\n    </FinalForm>\n  );\n}\n\nSignup.propTypes = {\n  cancelURL: PropTypes.string.isRequired,\n  moderated: PropTypes.bool.isRequired,\n  tos: PropTypes.string,\n  tosUrl: PropTypes.string,\n  privacyPolicy: PropTypes.string,\n  privacyPolicyUrl: PropTypes.string,\n  termsRequireAccept: PropTypes.bool,\n  termsEffectiveDate: PropTypes.string,\n  initialValues: PropTypes.object.isRequired,\n  hasPredefinedAffiliations: PropTypes.bool.isRequired,\n  allowCustomAffiliations: PropTypes.bool.isRequired,\n  showAccountForm: PropTypes.bool.isRequired,\n  showUsernameField: PropTypes.bool,\n  syncedValues: PropTypes.object.isRequired,\n  emails: PropTypes.arrayOf(PropTypes.string).isRequired,\n  affiliationMeta: PropTypes.object,\n  hasPendingUser: PropTypes.bool,\n  mandatoryFields: PropTypes.arrayOf(PropTypes.string).isRequired,\n  lockedFields: PropTypes.arrayOf(PropTypes.string),\n  lockedFieldMessage: PropTypes.string,\n};\n\nSignup.defaultProps = {\n  tos: '',\n  tosUrl: '',\n  privacyPolicy: '',\n  privacyPolicyUrl: '',\n  termsRequireAccept: false,\n  termsEffectiveDate: null,\n  showUsernameField: false,\n  affiliationMeta: null,\n  hasPendingUser: false,\n  lockedFields: [],\n  lockedFieldMessage: '',\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const container = document.querySelector('#signup-container');\n  if (!container) {\n    return;\n  }\n\n  const config = JSON.parse(container.dataset.config);\n  ReactDOM.render(<Signup {...config} />, container);\n});\n"],"names":["privacyPolicyURL","_buildFlaskURL","bind","endpoint","rules","args","converters","defaults","trace","data","isDynamic","tosURL","Signup","cancelURL","moderated","tosUrl","tos","privacyPolicyUrl","privacyPolicy","termsRequireAccept","termsEffectiveDate","initialValues","hasPredefinedAffiliations","allowCustomAffiliations","showAccountForm","showUsernameField","syncedValues","emails","affiliationMeta","hasPendingUser","mandatoryFields","lockedFields","lockedFieldMessage","termsAcceptLabel","stopPropagation","evt","tosLinkWrapper","React","href","rel","target","onClick","privacyPolicyLinkWrapper","Translate","Param","name","wrapper","FinalForm","onSubmit","async","form","values","getValuesForFields","resp","password_confirm","affiliation_data","affiliation","text","trim","affiliation_id","id","indicoAxios","post","location","e","handleSubmitError","redirect","Promise","initialValuesEqual","_","subscription","submitting","validate","errors","password","string","fprops","Form","handleSubmit","Field","isEqual","render","Message","info","Fieldset","legend","active","length","SyncedFinalDropdown","label","options","map","key","value","required","SyncedFinalInput","readOnly","Group","widths","v","maxLength","SyncedFinalAffiliationDropdown","includes","syncName","currentAffiliation","undefined","SyncedFinalTextArea","FinalInput","type","autoComplete","renderPluginComponents","FinalTextArea","initialValue","description","className","dangerouslySetInnerHTML","__html","moment","format","FinalCheckbox","style","display","justifyContent","FinalSubmitButton","disabledUntilChange","disabled","Button","as","propTypes","PropTypes","isRequired","defaultProps","document","addEventListener","container","querySelector","config","JSON","parse","dataset","ReactDOM"],"sourceRoot":""}