[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bookalimo"
version = "1.0.0"
description = "Python wrapper for the Book-A-Limo API"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jonathan Oren", email = "jonathan@bookalimo.com"},
]
maintainers = [
    {name = "Jonathan Oren", email = "jonathan@bookalimo.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
keywords = ["bookalimo", "api", "transportation", "booking"]
dependencies = [
    "httpx>=0.25.0",
    "pydantic>=2.11.0",
    "pycountry>=22.0.0",
    "us>=3.0.0",
    "airportsdata>=20230101",
]
requires-python = ">=3.9"

[project.optional-dependencies]
places = [
    "google-maps-places>=0.1.0",
    "google-api-core>=2.0.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx[mock]>=0.25.0",
    "respx>=0.20.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "python-dotenv>=1.0.0",
    "types-protobuf>=6.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx[mock]>=0.25.0",
    "respx>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/asparagusbeef/bookalimo-python"
Documentation = "https://asparagusbeef.github.io/bookalimo-python"
Repository = "https://github.com/asparagusbeef/bookalimo-python"
Issues = "https://github.com/asparagusbeef/bookalimo-python/issues"
Changelog = "https://github.com/asparagusbeef/bookalimo-python/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
bookalimo = ["py.typed"]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
lint.ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "UP045", # until I have time to Optional[] -> X | None everywhere.
    "UP035", # until I have time to Dict[] -> dict[]
    "UP006",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.isort]
known_first_party = ["bookalimo"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
mypy_path = "stubs"
disable_error_code = ["prop-decorator"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false
disallow_untyped_defs = false
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = ["ignore:Using google_geocode instead of city is recommended:UserWarning"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "network: marks tests as network tests",
    "performance: marks tests as performance tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
