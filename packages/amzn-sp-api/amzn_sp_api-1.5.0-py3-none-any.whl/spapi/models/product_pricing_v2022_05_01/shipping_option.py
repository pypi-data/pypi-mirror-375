# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShippingOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping_option_type': 'str',
        'price': 'MoneyType',
    }

    attribute_map = {
        'shipping_option_type': 'shippingOptionType',
        'price': 'price',
    }

    def __init__(self, shipping_option_type=None, price=None, _configuration=None):  # noqa: E501
        """ShippingOption - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._shipping_option_type = None
        self._price = None
        self.discriminator = None

        self.shipping_option_type = shipping_option_type
        self.price = price

    @property
    def shipping_option_type(self):
        """Gets the shipping_option_type of this ShippingOption.  # noqa: E501

        The type of shipping option.  # noqa: E501

        :return: The shipping_option_type of this ShippingOption.  # noqa: E501
        :rtype: str
        """
        return self._shipping_option_type

    @shipping_option_type.setter
    def shipping_option_type(self, shipping_option_type):
        """Sets the shipping_option_type of this ShippingOption.

        The type of shipping option.  # noqa: E501

        :param shipping_option_type: The shipping_option_type of this ShippingOption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and shipping_option_type is None:
            raise ValueError("Invalid value for `shipping_option_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DEFAULT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                shipping_option_type not in allowed_values):
            raise ValueError(
                "Invalid value for `shipping_option_type` ({0}), must be one of {1}"  # noqa: E501
                .format(shipping_option_type, allowed_values)
            )

        self._shipping_option_type = shipping_option_type

    @property
    def price(self):
        """Gets the price of this ShippingOption.  # noqa: E501


        :return: The price of this ShippingOption.  # noqa: E501
        :rtype: MoneyType
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ShippingOption.


        :param price: The price of this ShippingOption.  # noqa: E501
        :type: MoneyType
        """
        if self._configuration.client_side_validation and price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShippingOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShippingOption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShippingOption):
            return True

        return self.to_dict() != other.to_dict()
