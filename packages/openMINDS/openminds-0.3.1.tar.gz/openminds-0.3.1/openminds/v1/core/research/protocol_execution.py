"""
Structured information on a protocol execution.
"""

# this file was auto-generated!

from datetime import datetime, time

from openminds.base import LinkedMetadata
from openminds.properties import Property


class ProtocolExecution(LinkedMetadata):
    """
    Structured information on a protocol execution.
    """

    type_ = "https://openminds.ebrains.eu/core/ProtocolExecution"
    context = {"@vocab": "https://openminds.ebrains.eu/vocab/"}
    schema_version = "v1.0"

    properties = [
        Property(
            "behavioral_tasks",
            "openminds.v1.core.BehavioralTask",
            "behavioralTask",
            multiple=True,
            unique_items=True,
            min_items=1,
            description="Specific set of defined activities (or their absence) that should be performed (or avoided) by a subject.",
            instructions="Add all behavioral tasks that were performed during this protocol execution.",
        ),
        Property(
            "description",
            str,
            "description",
            formatting="text/markdown",
            multiline=True,
            description="Longer statement or account giving the characteristics of the protocol execution.",
            instructions="Enter a description of this activity.",
        ),
        Property(
            "ended_at_time",
            [datetime, time],
            "endedAtTime",
            description="no description available",
            instructions="Enter the time (e.g., '20:20:39+00:00') or datetime (e.g., '2018-11-13T20:20:39+00:00') of when the activity ended.",
        ),
        Property(
            "inputs",
            [
                "openminds.v1.core.File",
                "openminds.v1.core.FileBundle",
                "openminds.v1.core.SubjectGroupState",
                "openminds.v1.core.SubjectState",
                "openminds.v1.core.TissueSampleCollectionState",
                "openminds.v1.core.TissueSampleState",
            ],
            "input",
            multiple=True,
            unique_items=True,
            min_items=1,
            required=True,
            description="Something or someone that is put into or participates in a process or machine.",
            instructions="Add all inputs used by this activity.",
        ),
        Property(
            "is_part_of",
            "openminds.v1.core.DatasetVersion",
            "isPartOf",
            required=True,
            description="Reference to the ensemble of multiple things or beings.",
            instructions="Add the dataset version in which this protocol execution was conducted.",
        ),
        Property(
            "lookup_label",
            str,
            "lookupLabel",
            formatting="text/plain",
            description="no description available",
            instructions="Enter a lookup label for this activity that may help you to more easily find it again.",
        ),
        Property(
            "outputs",
            [
                "openminds.v1.core.File",
                "openminds.v1.core.FileBundle",
                "openminds.v1.core.SubjectGroupState",
                "openminds.v1.core.SubjectState",
                "openminds.v1.core.TissueSampleCollectionState",
                "openminds.v1.core.TissueSampleState",
            ],
            "output",
            multiple=True,
            unique_items=True,
            min_items=1,
            required=True,
            description="Something or someone that comes out of, is delivered or produced by a process or machine.",
            instructions="Add all outputs generated by this activity.",
        ),
        Property(
            "parameter_sets",
            "openminds.v1.core.ParameterSet",
            "parameterSet",
            multiple=True,
            unique_items=True,
            min_items=1,
            description="Manner, position, or direction in which digital or physical properties are set to determine a particular function, characteristics or behavior of something.",
            instructions="Add all important parameters grouped in context-specific sets that were used in this activity.",
        ),
        Property(
            "preparation_type",
            "openminds.v1.controlled_terms.PreparationType",
            "preparationType",
            description="Distinct class of actions or processes that make something ready for use or service.",
            instructions="Add the initial preparation type for this protocol execution.",
        ),
        Property(
            "protocols",
            "openminds.v1.core.Protocol",
            "protocol",
            multiple=True,
            unique_items=True,
            min_items=1,
            required=True,
            description="Plan that describes the process of a scientific or medical experiment, treatment, or procedure.",
            instructions="Add all protocols that were used in this protocol execution.",
        ),
        Property(
            "started_at_time",
            [datetime, time],
            "startedAtTime",
            description="no description available",
            instructions="Enter the time (e.g., '20:20:39+00:00') or datetime (e.g., '2018-11-13T20:20:39+00:00') of when the activity started.",
        ),
        Property(
            "study_targets",
            [],
            "studyTarget",
            multiple=True,
            unique_items=True,
            min_items=1,
            description="Structure or function that was targeted within a study.",
            instructions="Add all study targets of this activity.",
        ),
    ]

    def __init__(
        self,
        id=None,
        behavioral_tasks=None,
        description=None,
        ended_at_time=None,
        inputs=None,
        is_part_of=None,
        lookup_label=None,
        outputs=None,
        parameter_sets=None,
        preparation_type=None,
        protocols=None,
        started_at_time=None,
        study_targets=None,
    ):
        return super().__init__(
            id=id,
            behavioral_tasks=behavioral_tasks,
            description=description,
            ended_at_time=ended_at_time,
            inputs=inputs,
            is_part_of=is_part_of,
            lookup_label=lookup_label,
            outputs=outputs,
            parameter_sets=parameter_sets,
            preparation_type=preparation_type,
            protocols=protocols,
            started_at_time=started_at_time,
            study_targets=study_targets,
        )
