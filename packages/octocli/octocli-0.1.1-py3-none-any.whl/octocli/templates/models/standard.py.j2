from datetime import datetime
from typing import Any

from sqlalchemy import Boolean, BigInteger, DateTime, TextClause{{ custom_imports }}
from sqlalchemy.orm import Mapped, mapped_column

from ..prefix import PrefixBase
from ..settings import SettingsEngine


class {{ class_name }}(PrefixBase):
    __incomplete_tablename__ = "{{ model_name }}"

    id: Mapped[int] = mapped_column(
        BigInteger,
        primary_key=True,
        index=True,
        autoincrement=True,
    )
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        server_default=TextClause("CURRENT_TIMESTAMP"),
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        server_default=TextClause(SettingsEngine().get_updated_at()),
    )
    deleted: Mapped[bool] = mapped_column(
        Boolean,
        nullable=False,
        server_default=TextClause("FALSE"),
    ){% if columns %}
    {% for column in columns %}
    {{ column.name }}: Mapped[{{ column.type_ }}] = mapped_column({{ column.sql_type }}, nullable=False){% endfor %}{% endif %}

    def __repr__(self) -> str:
      return f"<{{ class_name }}(id={self.id})>"

    def keys(self) -> list[str]:
      return [column.key for column in self.__table__.columns]

    def __getitem__(self, key) -> Any:
      return getattr(self, key)

