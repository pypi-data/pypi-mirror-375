# coding: utf-8

"""
    The Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.

    The version of the OpenAPI document: 2024-06-19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PaymentsContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_type': 'str',
        'payment_method': 'str',
        'payment_reference': 'str',
        'payment_date': 'datetime',
    }

    attribute_map = {
        'payment_type': 'paymentType',
        'payment_method': 'paymentMethod',
        'payment_reference': 'paymentReference',
        'payment_date': 'paymentDate',
    }

    def __init__(self, payment_type=None, payment_method=None, payment_reference=None, payment_date=None, _configuration=None):  # noqa: E501
        """PaymentsContext - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._payment_type = None
        self._payment_method = None
        self._payment_reference = None
        self._payment_date = None
        self.discriminator = None

        if payment_type is not None:
            self.payment_type = payment_type
        if payment_method is not None:
            self.payment_method = payment_method
        if payment_reference is not None:
            self.payment_reference = payment_reference
        if payment_date is not None:
            self.payment_date = payment_date

    @property
    def payment_type(self):
        """Gets the payment_type of this PaymentsContext.  # noqa: E501

        Type of payment made.  # noqa: E501

        :return: The payment_type of this PaymentsContext.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PaymentsContext.

        Type of payment made.  # noqa: E501

        :param payment_type: The payment_type of this PaymentsContext.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentsContext.  # noqa: E501

        Method of payment made.  # noqa: E501

        :return: The payment_method of this PaymentsContext.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentsContext.

        Method of payment made.  # noqa: E501

        :param payment_method: The payment_method of this PaymentsContext.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def payment_reference(self):
        """Gets the payment_reference of this PaymentsContext.  # noqa: E501

        Reference number of payment made.  # noqa: E501

        :return: The payment_reference of this PaymentsContext.  # noqa: E501
        :rtype: str
        """
        return self._payment_reference

    @payment_reference.setter
    def payment_reference(self, payment_reference):
        """Sets the payment_reference of this PaymentsContext.

        Reference number of payment made.  # noqa: E501

        :param payment_reference: The payment_reference of this PaymentsContext.  # noqa: E501
        :type: str
        """

        self._payment_reference = payment_reference

    @property
    def payment_date(self):
        """Gets the payment_date of this PaymentsContext.  # noqa: E501

        Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).  # noqa: E501

        :return: The payment_date of this PaymentsContext.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PaymentsContext.

        Fields with a schema type of date are in ISO 8601 date time format (for example GroupBeginDate).  # noqa: E501

        :param payment_date: The payment_date of this PaymentsContext.  # noqa: E501
        :type: datetime
        """

        self._payment_date = payment_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentsContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentsContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentsContext):
            return True

        return self.to_dict() != other.to_dict()
