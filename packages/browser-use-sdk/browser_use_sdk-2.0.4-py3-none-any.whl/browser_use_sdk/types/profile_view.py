# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class ProfileView(UncheckedBaseModel):
    """
    View model for representing a profile. A profile lets you preserve the login state between sessions.

    We recommend that you create a separate profile for each user of your app.
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the profile
    """

    last_used_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastUsedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp when the profile was last used
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    Timestamp when the profile was created
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    Timestamp when the profile was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
