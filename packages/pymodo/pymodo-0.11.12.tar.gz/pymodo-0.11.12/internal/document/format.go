package document

import "text/template"

// Formatter is an interface for Modo output formats.
type Formatter interface {
	// Accepts checks whether the formatter can accept the given files or directories.
	Accepts(files []string) error
	// ToFilePath converts a member path to a full file path.
	ToFilePath(path string, kind string) string
	// ToLinkPath converts a member path to a format-specific link.
	ToLinkPath(path string, kind string) string
	// ProcessMarkdown allows to alter the final content of the markdown output.
	ProcessMarkdown(element any, text string, proc *Processor) (string, error)
	// WriteAuxiliary writes auxiliary files after the build process.
	WriteAuxiliary(p *Package, dir string, proc *Processor) error
	// Input determines the format's default input path.
	Input(in string, sources []PackageSource) string
	// Output determines the format's default output path.
	Output(out string) string
	// GitIgnore generates a list of .gitignore entries during `init`. May contain comments.
	GitIgnore(in, out string, sources []PackageSource) []string
	// CreateDirs creates the formatter's default directory structure during `init`.
	CreateDirs(base, in, out string, sources []PackageSource, templ *template.Template) error
	// Clean removes Markdown and test files generated by Modo.
	Clean(out, tests string) error
}

// PackageSource represents a sources of a package.
type PackageSource struct {
	Name string
	Path []string
}
