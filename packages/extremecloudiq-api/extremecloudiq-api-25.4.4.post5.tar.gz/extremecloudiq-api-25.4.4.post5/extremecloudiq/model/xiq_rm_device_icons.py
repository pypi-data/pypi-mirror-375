# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.4-5
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqRmDeviceIcons(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The icons for device
    """


    class MetaOapg:
        
        class properties:
            afc_status = schemas.StrSchema
            provisioned_device = schemas.BoolSchema
            config_rolled_back = schemas.BoolSchema
        
            @staticmethod
            def device_type() -> typing.Type['XiqDeviceType']:
                return XiqDeviceType
            undetermined = schemas.BoolSchema
            configured_at_device_level = schemas.BoolSchema
            device_update_unsuccessful = schemas.BoolSchema
            managed_by_extreme_iot = schemas.BoolSchema
            thread_commissioner_running = schemas.BoolSchema
            monitoring_unassociated_clients = schemas.BoolSchema
            switch_stack = schemas.BoolSchema
            switch_stack_warning = schemas.BoolSchema
            radsec_proxy_server = schemas.BoolSchema
            rogue_ap_mitigation_on = schemas.BoolSchema
            sensor_mode = schemas.BoolSchema
            swap = schemas.BoolSchema
            spectrum_intelligence = schemas.BoolSchema
        
            @staticmethod
            def vpn_server() -> typing.Type['XiqRmVpnStatus']:
                return XiqRmVpnStatus
        
            @staticmethod
            def vpn_client() -> typing.Type['XiqRmVpnStatus']:
                return XiqRmVpnStatus
            locally_managed = schemas.BoolSchema
            extreme_cluster_appliance = schemas.BoolSchema
            fabric_attach = schemas.BoolSchema
            fabric_attach_error = schemas.BoolSchema
            config_pending = schemas.BoolSchema
            __annotations__ = {
                "afc_status": afc_status,
                "provisioned_device": provisioned_device,
                "config_rolled_back": config_rolled_back,
                "device_type": device_type,
                "undetermined": undetermined,
                "configured_at_device_level": configured_at_device_level,
                "device_update_unsuccessful": device_update_unsuccessful,
                "managed_by_extreme_iot": managed_by_extreme_iot,
                "thread_commissioner_running": thread_commissioner_running,
                "monitoring_unassociated_clients": monitoring_unassociated_clients,
                "switch_stack": switch_stack,
                "switch_stack_warning": switch_stack_warning,
                "radsec_proxy_server": radsec_proxy_server,
                "rogue_ap_mitigation_on": rogue_ap_mitigation_on,
                "sensor_mode": sensor_mode,
                "swap": swap,
                "spectrum_intelligence": spectrum_intelligence,
                "vpn_server": vpn_server,
                "vpn_client": vpn_client,
                "locally_managed": locally_managed,
                "extreme_cluster_appliance": extreme_cluster_appliance,
                "fabric_attach": fabric_attach,
                "fabric_attach_error": fabric_attach_error,
                "config_pending": config_pending,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["afc_status"]) -> MetaOapg.properties.afc_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provisioned_device"]) -> MetaOapg.properties.provisioned_device: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config_rolled_back"]) -> MetaOapg.properties.config_rolled_back: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_type"]) -> 'XiqDeviceType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["undetermined"]) -> MetaOapg.properties.undetermined: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configured_at_device_level"]) -> MetaOapg.properties.configured_at_device_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_update_unsuccessful"]) -> MetaOapg.properties.device_update_unsuccessful: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managed_by_extreme_iot"]) -> MetaOapg.properties.managed_by_extreme_iot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_commissioner_running"]) -> MetaOapg.properties.thread_commissioner_running: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monitoring_unassociated_clients"]) -> MetaOapg.properties.monitoring_unassociated_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["switch_stack"]) -> MetaOapg.properties.switch_stack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["switch_stack_warning"]) -> MetaOapg.properties.switch_stack_warning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radsec_proxy_server"]) -> MetaOapg.properties.radsec_proxy_server: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rogue_ap_mitigation_on"]) -> MetaOapg.properties.rogue_ap_mitigation_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensor_mode"]) -> MetaOapg.properties.sensor_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["swap"]) -> MetaOapg.properties.swap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spectrum_intelligence"]) -> MetaOapg.properties.spectrum_intelligence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vpn_server"]) -> 'XiqRmVpnStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vpn_client"]) -> 'XiqRmVpnStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locally_managed"]) -> MetaOapg.properties.locally_managed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extreme_cluster_appliance"]) -> MetaOapg.properties.extreme_cluster_appliance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fabric_attach"]) -> MetaOapg.properties.fabric_attach: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fabric_attach_error"]) -> MetaOapg.properties.fabric_attach_error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config_pending"]) -> MetaOapg.properties.config_pending: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["afc_status", "provisioned_device", "config_rolled_back", "device_type", "undetermined", "configured_at_device_level", "device_update_unsuccessful", "managed_by_extreme_iot", "thread_commissioner_running", "monitoring_unassociated_clients", "switch_stack", "switch_stack_warning", "radsec_proxy_server", "rogue_ap_mitigation_on", "sensor_mode", "swap", "spectrum_intelligence", "vpn_server", "vpn_client", "locally_managed", "extreme_cluster_appliance", "fabric_attach", "fabric_attach_error", "config_pending", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["afc_status"]) -> typing.Union[MetaOapg.properties.afc_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provisioned_device"]) -> typing.Union[MetaOapg.properties.provisioned_device, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config_rolled_back"]) -> typing.Union[MetaOapg.properties.config_rolled_back, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_type"]) -> typing.Union['XiqDeviceType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["undetermined"]) -> typing.Union[MetaOapg.properties.undetermined, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configured_at_device_level"]) -> typing.Union[MetaOapg.properties.configured_at_device_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_update_unsuccessful"]) -> typing.Union[MetaOapg.properties.device_update_unsuccessful, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managed_by_extreme_iot"]) -> typing.Union[MetaOapg.properties.managed_by_extreme_iot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_commissioner_running"]) -> typing.Union[MetaOapg.properties.thread_commissioner_running, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monitoring_unassociated_clients"]) -> typing.Union[MetaOapg.properties.monitoring_unassociated_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["switch_stack"]) -> typing.Union[MetaOapg.properties.switch_stack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["switch_stack_warning"]) -> typing.Union[MetaOapg.properties.switch_stack_warning, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radsec_proxy_server"]) -> typing.Union[MetaOapg.properties.radsec_proxy_server, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rogue_ap_mitigation_on"]) -> typing.Union[MetaOapg.properties.rogue_ap_mitigation_on, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensor_mode"]) -> typing.Union[MetaOapg.properties.sensor_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["swap"]) -> typing.Union[MetaOapg.properties.swap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spectrum_intelligence"]) -> typing.Union[MetaOapg.properties.spectrum_intelligence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vpn_server"]) -> typing.Union['XiqRmVpnStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vpn_client"]) -> typing.Union['XiqRmVpnStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locally_managed"]) -> typing.Union[MetaOapg.properties.locally_managed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extreme_cluster_appliance"]) -> typing.Union[MetaOapg.properties.extreme_cluster_appliance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fabric_attach"]) -> typing.Union[MetaOapg.properties.fabric_attach, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fabric_attach_error"]) -> typing.Union[MetaOapg.properties.fabric_attach_error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config_pending"]) -> typing.Union[MetaOapg.properties.config_pending, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["afc_status", "provisioned_device", "config_rolled_back", "device_type", "undetermined", "configured_at_device_level", "device_update_unsuccessful", "managed_by_extreme_iot", "thread_commissioner_running", "monitoring_unassociated_clients", "switch_stack", "switch_stack_warning", "radsec_proxy_server", "rogue_ap_mitigation_on", "sensor_mode", "swap", "spectrum_intelligence", "vpn_server", "vpn_client", "locally_managed", "extreme_cluster_appliance", "fabric_attach", "fabric_attach_error", "config_pending", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        afc_status: typing.Union[MetaOapg.properties.afc_status, str, schemas.Unset] = schemas.unset,
        provisioned_device: typing.Union[MetaOapg.properties.provisioned_device, bool, schemas.Unset] = schemas.unset,
        config_rolled_back: typing.Union[MetaOapg.properties.config_rolled_back, bool, schemas.Unset] = schemas.unset,
        device_type: typing.Union['XiqDeviceType', schemas.Unset] = schemas.unset,
        undetermined: typing.Union[MetaOapg.properties.undetermined, bool, schemas.Unset] = schemas.unset,
        configured_at_device_level: typing.Union[MetaOapg.properties.configured_at_device_level, bool, schemas.Unset] = schemas.unset,
        device_update_unsuccessful: typing.Union[MetaOapg.properties.device_update_unsuccessful, bool, schemas.Unset] = schemas.unset,
        managed_by_extreme_iot: typing.Union[MetaOapg.properties.managed_by_extreme_iot, bool, schemas.Unset] = schemas.unset,
        thread_commissioner_running: typing.Union[MetaOapg.properties.thread_commissioner_running, bool, schemas.Unset] = schemas.unset,
        monitoring_unassociated_clients: typing.Union[MetaOapg.properties.monitoring_unassociated_clients, bool, schemas.Unset] = schemas.unset,
        switch_stack: typing.Union[MetaOapg.properties.switch_stack, bool, schemas.Unset] = schemas.unset,
        switch_stack_warning: typing.Union[MetaOapg.properties.switch_stack_warning, bool, schemas.Unset] = schemas.unset,
        radsec_proxy_server: typing.Union[MetaOapg.properties.radsec_proxy_server, bool, schemas.Unset] = schemas.unset,
        rogue_ap_mitigation_on: typing.Union[MetaOapg.properties.rogue_ap_mitigation_on, bool, schemas.Unset] = schemas.unset,
        sensor_mode: typing.Union[MetaOapg.properties.sensor_mode, bool, schemas.Unset] = schemas.unset,
        swap: typing.Union[MetaOapg.properties.swap, bool, schemas.Unset] = schemas.unset,
        spectrum_intelligence: typing.Union[MetaOapg.properties.spectrum_intelligence, bool, schemas.Unset] = schemas.unset,
        vpn_server: typing.Union['XiqRmVpnStatus', schemas.Unset] = schemas.unset,
        vpn_client: typing.Union['XiqRmVpnStatus', schemas.Unset] = schemas.unset,
        locally_managed: typing.Union[MetaOapg.properties.locally_managed, bool, schemas.Unset] = schemas.unset,
        extreme_cluster_appliance: typing.Union[MetaOapg.properties.extreme_cluster_appliance, bool, schemas.Unset] = schemas.unset,
        fabric_attach: typing.Union[MetaOapg.properties.fabric_attach, bool, schemas.Unset] = schemas.unset,
        fabric_attach_error: typing.Union[MetaOapg.properties.fabric_attach_error, bool, schemas.Unset] = schemas.unset,
        config_pending: typing.Union[MetaOapg.properties.config_pending, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqRmDeviceIcons':
        return super().__new__(
            cls,
            *_args,
            afc_status=afc_status,
            provisioned_device=provisioned_device,
            config_rolled_back=config_rolled_back,
            device_type=device_type,
            undetermined=undetermined,
            configured_at_device_level=configured_at_device_level,
            device_update_unsuccessful=device_update_unsuccessful,
            managed_by_extreme_iot=managed_by_extreme_iot,
            thread_commissioner_running=thread_commissioner_running,
            monitoring_unassociated_clients=monitoring_unassociated_clients,
            switch_stack=switch_stack,
            switch_stack_warning=switch_stack_warning,
            radsec_proxy_server=radsec_proxy_server,
            rogue_ap_mitigation_on=rogue_ap_mitigation_on,
            sensor_mode=sensor_mode,
            swap=swap,
            spectrum_intelligence=spectrum_intelligence,
            vpn_server=vpn_server,
            vpn_client=vpn_client,
            locally_managed=locally_managed,
            extreme_cluster_appliance=extreme_cluster_appliance,
            fabric_attach=fabric_attach,
            fabric_attach_error=fabric_attach_error,
            config_pending=config_pending,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_device_type import XiqDeviceType
from extremecloudiq.model.xiq_rm_vpn_status import XiqRmVpnStatus
