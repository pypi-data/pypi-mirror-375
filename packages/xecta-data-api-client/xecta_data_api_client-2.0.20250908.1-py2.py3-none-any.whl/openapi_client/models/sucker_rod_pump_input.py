# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SuckerRodPumpInput(BaseModel):
    """
    SuckerRodPumpInput
    """ # noqa: E501
    source_well_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceWellId which owns the rod pump", alias="sourceWellId")
    source_wellbore_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceWellboreId which owns the rod pump", alias="sourceWellboreId")
    source_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="sourceId of the rod pump to enable upsert. From WellView wvRod, use idrec column", alias="sourceId")
    install_date: Optional[datetime] = Field(default=None, description="Install date of the rod pump. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="installDate")
    surface_stroke_length: Union[StrictFloat, StrictInt] = Field(description="Surface stroke length, in", alias="surfaceStrokeLength")
    install_md: Union[StrictFloat, StrictInt] = Field(description="Install depth, ft", alias="installMd")
    plunger_dia: Union[StrictFloat, StrictInt] = Field(description="Plunger diameter, in", alias="plungerDIA")
    plunger_length: Union[StrictFloat, StrictInt] = Field(description="Plunger length, in", alias="plungerLength")
    plunger_clearance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Plunger clearance, in", alias="plungerClearance")
    rod_number: StrictInt = Field(description="API rod number, unitless", alias="rodNumber")
    __properties: ClassVar[List[str]] = ["sourceWellId", "sourceWellboreId", "sourceId", "installDate", "surfaceStrokeLength", "installMd", "plungerDIA", "plungerLength", "plungerClearance", "rodNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SuckerRodPumpInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if install_date (nullable) is None
        # and model_fields_set contains the field
        if self.install_date is None and "install_date" in self.model_fields_set:
            _dict['installDate'] = None

        # set to None if plunger_clearance (nullable) is None
        # and model_fields_set contains the field
        if self.plunger_clearance is None and "plunger_clearance" in self.model_fields_set:
            _dict['plungerClearance'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SuckerRodPumpInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceWellId": obj.get("sourceWellId"),
            "sourceWellboreId": obj.get("sourceWellboreId"),
            "sourceId": obj.get("sourceId"),
            "installDate": obj.get("installDate"),
            "surfaceStrokeLength": obj.get("surfaceStrokeLength"),
            "installMd": obj.get("installMd"),
            "plungerDIA": obj.get("plungerDIA"),
            "plungerLength": obj.get("plungerLength"),
            "plungerClearance": obj.get("plungerClearance"),
            "rodNumber": obj.get("rodNumber")
        })
        return _obj


