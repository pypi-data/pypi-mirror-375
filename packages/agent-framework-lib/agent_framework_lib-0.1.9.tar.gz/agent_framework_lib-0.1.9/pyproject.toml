[build-system]
requires = ["setuptools>=70.0.0", "wheel>=0.42.0"]
build-backend = "setuptools.build_meta"

[project]
name = "agent-framework-lib"
version = "0.1.9"
description = "A comprehensive Python framework for building and serving conversational AI agents with FastAPI"
readme = {file = "README.md", content-type = "text/markdown"}
license = {text = "MIT"}
authors = [
    {name = "Sebastian Pavel", email = "sebastian@cinco.ai"}
]
maintainers = [
    {name = "Sebastian Pavel", email = "sebastian@cinco.ai"}
]
keywords = [
    "ai", 
    "agents", 
    "fastapi", 
    "autogen", 
    "framework", 
    "conversational-ai",
    "multi-agent",
    "llm",
    "openai",
    "gemini",
    "chatbot",
    "session-management"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Communications :: Chat",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Framework :: FastAPI",
    "Environment :: Web Environment",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    # Core async file handling
    "aiofiles>=24.1.0",
    "autogen-agentchat>=0.7.4",
    "autogen-core>=0.7.4",
    "autogen-ext[mcp,openai]>=0.7.4",
    "fastapi>=0.115.12",
    "uvicorn>=0.34.2",
    # Model Context Protocol
    "fastmcp>=2.2.7",
    "mcp-python-interpreter",
    # Configuration and data handling
    "pyyaml>=6.0.2",
    "pydantic>=2.0.0",
    # Observability and monitoring
    "opentelemetry-sdk>=1.33.1",
    "opentelemetry-api>=1.33.1",
    "opentelemetry-exporter-otlp-proto-grpc>=1.33.1",
    # Database support
    "pymongo>=4.10.1",
    "motor>=3.6.0",
    "black>=25.1.0",
    "llama-index-core>=0.13.3",
    "llama-index>=0.13.3",
    "llama-index-llms-openai>=0.4.7",
    # Document processing and conversion
    "markitdown[all]>=0.1.2",
    "psutil>=7.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "black>=25.1.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "aiohttp>=3.12.13",
    "httpx>=0.28.1",
    "coverage>=7.0.0",
]

# Storage backends
mongodb = [
    "pymongo>=4.10.1",
    "motor>=3.6.0",
]

s3 = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
]

minio = [
    "minio>=7.2.0",
]

# Multimodal processing
multimodal = [
    "pillow>=10.0.0",
    "opencv-python>=4.8.0",
    "pytesseract>=0.3.10",
]

# All optional dependencies
all = [
    "agent-framework-lib[dev,mongodb,s3,minio,multimodal]"
]

[project.urls]
Homepage = "https://github.com/Cinco-AI/AgentFramework"
Repository = "https://github.com/Cinco-AI/AgentFramework.git"
Issues = "https://github.com/Cinco-AI/AgentFramework/issues"
Documentation = "https://github.com/Cinco-AI/AgentFramework/blob/main/README.md"
Changelog = "https://github.com/Cinco-AI/AgentFramework/blob/main/docs/CHANGELOG.md"
"Bug Tracker" = "https://github.com/Cinco-AI/AgentFramework/issues"
"Source Code" = "https://github.com/Cinco-AI/AgentFramework"

[project.scripts]
# CLI scripts can be added here in future versions
# agent-framework = "agent_framework.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["agent_framework*"]
exclude = [
    "tests*", 
    "docs*", 
    "specs*", 
    "examples*", 
    "mcp-server*",
    "*.tests",
    "*.tests.*",
    "tests.*",
]

[tool.setuptools.package-data]
agent_framework = [
    "*.json", 
    "*.yaml", 
    "*.yml", 
    "*.html", 
    "*.css", 
    "*.js",
    "py.typed",  # PEP 561 marker for type information
]

# Development tools configuration
[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | \.pytest_cache
)/
'''

# Ruff configuration (modern Python linter)
[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from None
]
exclude = [
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["ARG001", "ARG002"]  # Allow unused arguments in tests

[tool.ruff.isort]
known-first-party = ["agent_framework"]
force-single-line = false
lines-after-imports = 2

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "-q", 
    "--tb=short",
    "--cov=agent_framework",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--benchmark-skip",
    "--strict-markers",
    "--strict-config",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "multimodal: marks tests that require multimodal capabilities",
    "storage: marks tests that require storage backends",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true
namespace_packages = true
explicit_package_bases = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "motor.*",
    "pymongo.*",
    "markitdown.*",
    "autogen.*",
    "llama_index.*",
    "minio.*",
    "boto3.*",
    "botocore.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["agent_framework"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=6.2.1",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "coverage>=7.0.0",
    "black>=25.1.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "aiohttp>=3.12.13",
    "httpx>=0.28.1",
]

[dependency-groups]
# Development dependencies for UV
dev = [
    "build>=1.2.2.post1",
    "twine>=6.1.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
    "black>=25.1.0",
    "mypy>=1.5.0",
]

# Testing dependencies
test = [
    "pytest>=8.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=6.2.1",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "coverage>=7.0.0",
    "psutil>=5.9.0",
    "aiohttp>=3.12.13",
    "httpx>=0.28.1",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

# All development dependencies
all = [
    "agent-framework-lib[dev,test,docs]",
]
