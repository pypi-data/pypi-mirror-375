# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing_extensions import Self

from pyevr.openapi_client.models.assortment import Assortment


class PagedResultOfAssortment(BaseModel):
    """
    PagedResultOfAssortment
    """  # noqa: E501

    page_number: Optional[StrictInt] = Field(
        default=None, description="Lehekülje number", alias="pageNumber"
    )
    page_size: Optional[StrictInt] = Field(
        default=None, description="Lehekülje suurus", alias="pageSize"
    )
    page_result: Optional[List[Assortment]] = Field(
        default=None, description="Lehekülje tulemused", alias="pageResult"
    )
    total_count: Optional[StrictInt] = Field(
        default=None, description="Päringu vastete arv kokku", alias="totalCount"
    )
    __properties: ClassVar[List[str]] = [
        "pageNumber",
        "pageSize",
        "pageResult",
        "totalCount",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagedResultOfAssortment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in page_result (list)
        _items = []
        if self.page_result:
            for _item_page_result in self.page_result:
                if _item_page_result:
                    _items.append(_item_page_result.to_dict())
            _dict["pageResult"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagedResultOfAssortment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "pageNumber": obj.get("pageNumber"),
                "pageSize": obj.get("pageSize"),
                "pageResult": [
                    Assortment.from_dict(_item) for _item in obj["pageResult"]
                ]
                if obj.get("pageResult") is not None
                else None,
                "totalCount": obj.get("totalCount"),
            }
        )
        return _obj
