# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Shipping

    Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.

    The version of the OpenAPI document: 2021-12-28
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spapi.api_client import ApiClient


class VendorShippingLabelsApi(object):
    """NOTE: This class is auto generated by the openapi generator.

    Do not edit the class manually.
    """

    api_models_module = "spapi.models.vendor_direct_fulfillment_shipping_v2021_12_28"

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.classFileName = 'vendor_shipping_labels_api'

    def create_shipping_labels(self, purchase_order_number, body, **kwargs):  # noqa: E501
        """createShippingLabels  # noqa: E501

        Creates shipping labels for a purchase order and returns the labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_shipping_labels(purchase_order_number, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str purchase_order_number: The purchase order number for which you want to return the shipping labels. It should be the same number as the `purchaseOrderNumber` in the order. (required)
        :param CreateShippingLabelsRequest body: The request payload that contains the parameters for creating shipping labels. (required)
        :return: ShippingLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_shipping_labels_with_http_info(purchase_order_number, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_shipping_labels_with_http_info(purchase_order_number, body, **kwargs)  # noqa: E501
            return data

    def create_shipping_labels_with_http_info(self, purchase_order_number, body, **kwargs):  # noqa: E501
        """createShippingLabels  # noqa: E501

        Creates shipping labels for a purchase order and returns the labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_shipping_labels_with_http_info(purchase_order_number, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str purchase_order_number: The purchase order number for which you want to return the shipping labels. It should be the same number as the `purchaseOrderNumber` in the order. (required)
        :param CreateShippingLabelsRequest body: The request payload that contains the parameters for creating shipping labels. (required)
        :return: ShippingLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['purchase_order_number', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_shipping_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'purchase_order_number' is set
        if self.api_client.client_side_validation and ('purchase_order_number' not in params or
                                                       params['purchase_order_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `purchase_order_number` when calling `create_shipping_labels`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_shipping_labels`")  # noqa: E501

        if self.api_client.client_side_validation and ('purchase_order_number' in params and not re.search(r'^[a-zA-Z0-9]+$', params['purchase_order_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `purchase_order_number` when calling `create_shipping_labels`, must conform to the pattern `/^[a-zA-Z0-9]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'purchase_order_number' in params:
            path_params['purchaseOrderNumber'] = params['purchase_order_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShippingLabel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats, api_models_module=self.api_models_module)

    def get_shipping_label(self, purchase_order_number, **kwargs):  # noqa: E501
        """getShippingLabel  # noqa: E501

        Returns a shipping label for the `purchaseOrderNumber` that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shipping_label(purchase_order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str purchase_order_number: The purchase order number for which you want to return the shipping label. It should be the same `purchaseOrderNumber` that you received in the order. (required)
        :return: ShippingLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_shipping_label_with_http_info(purchase_order_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shipping_label_with_http_info(purchase_order_number, **kwargs)  # noqa: E501
            return data

    def get_shipping_label_with_http_info(self, purchase_order_number, **kwargs):  # noqa: E501
        """getShippingLabel  # noqa: E501

        Returns a shipping label for the `purchaseOrderNumber` that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shipping_label_with_http_info(purchase_order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str purchase_order_number: The purchase order number for which you want to return the shipping label. It should be the same `purchaseOrderNumber` that you received in the order. (required)
        :return: ShippingLabel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['purchase_order_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shipping_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'purchase_order_number' is set
        if self.api_client.client_side_validation and ('purchase_order_number' not in params or
                                                       params['purchase_order_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `purchase_order_number` when calling `get_shipping_label`")  # noqa: E501

        if self.api_client.client_side_validation and ('purchase_order_number' in params and not re.search(r'^[a-zA-Z0-9]+$', params['purchase_order_number'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `purchase_order_number` when calling `get_shipping_label`, must conform to the pattern `/^[a-zA-Z0-9]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'purchase_order_number' in params:
            path_params['purchaseOrderNumber'] = params['purchase_order_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShippingLabel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats, api_models_module=self.api_models_module)

    def get_shipping_labels(self, created_after, created_before, **kwargs):  # noqa: E501
        """getShippingLabels  # noqa: E501

        Returns a list of shipping labels created during the time frame that you specify. Use the `createdAfter` and `createdBefore` parameters to define the time frame. You must use both of these parameters. The date range to search must not be more than seven days.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shipping_labels(created_after, created_before, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime created_after: Shipping labels that became available after this date and time will be included in the result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
        :param datetime created_before: Shipping labels that became available before this date and time will be included in the result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
        :param str ship_from_party_id: The vendor `warehouseId` for order fulfillment. If not specified, the result contains orders for all warehouses.
        :param int limit: The limit to the number of records returned.
        :param str sort_order: The sort order creation date. You can choose between ascending (`ASC`) or descending (`DESC`) sort order.
        :param str next_token: Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
        :return: ShippingLabelList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_shipping_labels_with_http_info(created_after, created_before, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shipping_labels_with_http_info(created_after, created_before, **kwargs)  # noqa: E501
            return data

    def get_shipping_labels_with_http_info(self, created_after, created_before, **kwargs):  # noqa: E501
        """getShippingLabels  # noqa: E501

        Returns a list of shipping labels created during the time frame that you specify. Use the `createdAfter` and `createdBefore` parameters to define the time frame. You must use both of these parameters. The date range to search must not be more than seven days.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shipping_labels_with_http_info(created_after, created_before, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime created_after: Shipping labels that became available after this date and time will be included in the result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
        :param datetime created_before: Shipping labels that became available before this date and time will be included in the result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. (required)
        :param str ship_from_party_id: The vendor `warehouseId` for order fulfillment. If not specified, the result contains orders for all warehouses.
        :param int limit: The limit to the number of records returned.
        :param str sort_order: The sort order creation date. You can choose between ascending (`ASC`) or descending (`DESC`) sort order.
        :param str next_token: Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
        :return: ShippingLabelList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['created_after', 'created_before', 'ship_from_party_id', 'limit', 'sort_order', 'next_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shipping_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'created_after' is set
        if self.api_client.client_side_validation and ('created_after' not in params or
                                                       params['created_after'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `created_after` when calling `get_shipping_labels`")  # noqa: E501
        # verify the required parameter 'created_before' is set
        if self.api_client.client_side_validation and ('created_before' not in params or
                                                       params['created_before'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `created_before` when calling `get_shipping_labels`")  # noqa: E501

        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_shipping_labels`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_shipping_labels`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ship_from_party_id' in params:
            query_params.append(('shipFromPartyId', params['ship_from_party_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'created_after' in params:
            query_params.append(('createdAfter', params['created_after']))  # noqa: E501
        if 'created_before' in params:
            query_params.append(('createdBefore', params['created_before']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'next_token' in params:
            query_params.append(('nextToken', params['next_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'pagination', 'shippingLabels'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vendor/directFulfillment/shipping/2021-12-28/shippingLabels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShippingLabelList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats, api_models_module=self.api_models_module)

    def submit_shipping_label_request(self, body, **kwargs):  # noqa: E501
        """submitShippingLabelRequest  # noqa: E501

        Creates a shipping label for a purchase order and returns a `transactionId` for reference.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_shipping_label_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmitShippingLabelsRequest body: The request body that contains the shipping labels data. (required)
        :return: TransactionReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_shipping_label_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_shipping_label_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def submit_shipping_label_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """submitShippingLabelRequest  # noqa: E501

        Creates a shipping label for a purchase order and returns a `transactionId` for reference.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_shipping_label_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmitShippingLabelsRequest body: The request body that contains the shipping labels data. (required)
        :return: TransactionReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_shipping_label_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `submit_shipping_label_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vendor/directFulfillment/shipping/2021-12-28/shippingLabels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionReference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats, api_models_module=self.api_models_module)
