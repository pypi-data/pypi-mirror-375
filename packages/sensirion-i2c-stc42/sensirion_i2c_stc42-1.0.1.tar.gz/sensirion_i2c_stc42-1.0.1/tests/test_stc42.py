#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.3.4
# Product:       stc42
# Model-Version: 1.0.1
#

import pytest
from sensirion_i2c_stc42.device import Stc42Device


@pytest.fixture
def sensor(channel_provider):
    channel_provider.i2c_frequency = 100e3
    channel_provider.supply_voltage = 3.3
    with channel_provider:
        channel = channel_provider.get_channel(slave_address=0x29,
                                               crc_parameters=(8, 0x31, 0xff, 0x0))
        yield Stc42Device(channel)


def test_stop_measurement1(sensor):
    sensor.stop_measurement()


def test_read_product_info1(sensor):
    (product_number, serial_number
     ) = sensor.read_product_info()
    print(f"product_number: {product_number}; "
          f"serial_number: {serial_number}; "
          )


def test_enable_manual_temperature_compensation1(sensor):
    sensor.enable_manual_temperature_compensation()


def test_set_compensation_temperature_ticks1(sensor):
    sensor.set_compensation_temperature_ticks(26214)


def test_set_compensation_temperature1(sensor):
    sensor.set_compensation_temperature(25.0)


def test_enable_manual_humidity_compensation1(sensor):
    sensor.enable_manual_humidity_compensation()


def test_set_compensation_humidity_ticks1(sensor):
    sensor.set_compensation_humidity_ticks(29359)


def test_set_compensation_humidity1(sensor):
    sensor.set_compensation_humidity(50.0)


def test_enable_manual_pressure_compensation1(sensor):
    sensor.enable_manual_pressure_compensation()


def test_set_compensation_pressure_mbar1(sensor):
    sensor.set_compensation_pressure_mbar(1013)


def test_compensate_temperature_with_sht4x1(sensor):
    sensor.compensate_temperature_with_sht4x()


def test_compensate_humidity_with_sht4x1(sensor):
    sensor.compensate_humidity_with_sht4x()


def test_start_concentration_measurement1(sensor):
    sensor.start_concentration_measurement(1000)
    (hydrogen, temperature, humidity, ambient_pressure, error_flags
     ) = sensor.read_measurements()
    print(f"hydrogen: {hydrogen}; "
          f"temperature: {temperature}; "
          f"humidity: {humidity}; "
          f"ambient_pressure: {ambient_pressure}; "
          f"error_flags: {error_flags}; "
          )
    sensor.enable_automatic_self_calibration()
    sensor.disable_automatic_self_calibration()
    sensor.perform_forced_recalibration(20, 40)
    sensor.set_compensation_pressure_mbar(1013)
    sensor.set_compensation_humidity(50.0)
    sensor.set_compensation_temperature(25.0)
    sensor.stop_measurement()

