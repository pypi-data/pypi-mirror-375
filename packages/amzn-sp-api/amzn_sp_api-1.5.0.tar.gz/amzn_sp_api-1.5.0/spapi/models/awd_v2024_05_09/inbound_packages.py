# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class InboundPackages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'packages_to_inbound': 'List[DistributionPackageQuantity]',
    }

    attribute_map = {
        'packages_to_inbound': 'packagesToInbound',
    }

    def __init__(self, packages_to_inbound=None, _configuration=None):  # noqa: E501
        """InboundPackages - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._packages_to_inbound = None
        self.discriminator = None

        self.packages_to_inbound = packages_to_inbound

    @property
    def packages_to_inbound(self):
        """Gets the packages_to_inbound of this InboundPackages.  # noqa: E501

        List of packages to be inbounded.  # noqa: E501

        :return: The packages_to_inbound of this InboundPackages.  # noqa: E501
        :rtype: List[DistributionPackageQuantity]
        """
        return self._packages_to_inbound

    @packages_to_inbound.setter
    def packages_to_inbound(self, packages_to_inbound):
        """Sets the packages_to_inbound of this InboundPackages.

        List of packages to be inbounded.  # noqa: E501

        :param packages_to_inbound: The packages_to_inbound of this InboundPackages.  # noqa: E501
        :type: List[DistributionPackageQuantity]
        """
        if self._configuration.client_side_validation and packages_to_inbound is None:
            raise ValueError("Invalid value for `packages_to_inbound`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                packages_to_inbound is not None and len(packages_to_inbound) < 1):
            raise ValueError("Invalid value for `packages_to_inbound`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._packages_to_inbound = packages_to_inbound

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InboundPackages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InboundPackages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InboundPackages):
            return True

        return self.to_dict() != other.to_dict()
