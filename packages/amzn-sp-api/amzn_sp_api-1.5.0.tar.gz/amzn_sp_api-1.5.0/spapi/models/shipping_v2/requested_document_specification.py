# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class RequestedDocumentSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'DocumentFormat',
        'size': 'DocumentSize',
        'dpi': 'int',
        'page_layout': 'str',
        'need_file_joining': 'bool',
        'requested_document_types': 'List[DocumentType]',
        'requested_label_customization': 'RequestedLabelCustomization',
    }

    attribute_map = {
        'format': 'format',
        'size': 'size',
        'dpi': 'dpi',
        'page_layout': 'pageLayout',
        'need_file_joining': 'needFileJoining',
        'requested_document_types': 'requestedDocumentTypes',
        'requested_label_customization': 'requestedLabelCustomization',
    }

    def __init__(self, format=None, size=None, dpi=None, page_layout=None, need_file_joining=None, requested_document_types=None, requested_label_customization=None, _configuration=None):  # noqa: E501
        """RequestedDocumentSpecification - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._format = None
        self._size = None
        self._dpi = None
        self._page_layout = None
        self._need_file_joining = None
        self._requested_document_types = None
        self._requested_label_customization = None
        self.discriminator = None

        self.format = format
        self.size = size
        if dpi is not None:
            self.dpi = dpi
        if page_layout is not None:
            self.page_layout = page_layout
        self.need_file_joining = need_file_joining
        self.requested_document_types = requested_document_types
        if requested_label_customization is not None:
            self.requested_label_customization = requested_label_customization

    @property
    def format(self):
        """Gets the format of this RequestedDocumentSpecification.  # noqa: E501


        :return: The format of this RequestedDocumentSpecification.  # noqa: E501
        :rtype: DocumentFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this RequestedDocumentSpecification.


        :param format: The format of this RequestedDocumentSpecification.  # noqa: E501
        :type: DocumentFormat
        """
        if self._configuration.client_side_validation and format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def size(self):
        """Gets the size of this RequestedDocumentSpecification.  # noqa: E501


        :return: The size of this RequestedDocumentSpecification.  # noqa: E501
        :rtype: DocumentSize
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this RequestedDocumentSpecification.


        :param size: The size of this RequestedDocumentSpecification.  # noqa: E501
        :type: DocumentSize
        """
        if self._configuration.client_side_validation and size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def dpi(self):
        """Gets the dpi of this RequestedDocumentSpecification.  # noqa: E501

        The dots per inch (DPI) value used in printing. This value represents a measure of the resolution of the document.  # noqa: E501

        :return: The dpi of this RequestedDocumentSpecification.  # noqa: E501
        :rtype: int
        """
        return self._dpi

    @dpi.setter
    def dpi(self, dpi):
        """Sets the dpi of this RequestedDocumentSpecification.

        The dots per inch (DPI) value used in printing. This value represents a measure of the resolution of the document.  # noqa: E501

        :param dpi: The dpi of this RequestedDocumentSpecification.  # noqa: E501
        :type: int
        """

        self._dpi = dpi

    @property
    def page_layout(self):
        """Gets the page_layout of this RequestedDocumentSpecification.  # noqa: E501

        Indicates the position of the label on the paper. Should be the same value as returned in getRates response.  # noqa: E501

        :return: The page_layout of this RequestedDocumentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._page_layout

    @page_layout.setter
    def page_layout(self, page_layout):
        """Sets the page_layout of this RequestedDocumentSpecification.

        Indicates the position of the label on the paper. Should be the same value as returned in getRates response.  # noqa: E501

        :param page_layout: The page_layout of this RequestedDocumentSpecification.  # noqa: E501
        :type: str
        """

        self._page_layout = page_layout

    @property
    def need_file_joining(self):
        """Gets the need_file_joining of this RequestedDocumentSpecification.  # noqa: E501

        When true, files should be stitched together. Otherwise, files should be returned separately. Defaults to false.  # noqa: E501

        :return: The need_file_joining of this RequestedDocumentSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._need_file_joining

    @need_file_joining.setter
    def need_file_joining(self, need_file_joining):
        """Sets the need_file_joining of this RequestedDocumentSpecification.

        When true, files should be stitched together. Otherwise, files should be returned separately. Defaults to false.  # noqa: E501

        :param need_file_joining: The need_file_joining of this RequestedDocumentSpecification.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and need_file_joining is None:
            raise ValueError("Invalid value for `need_file_joining`, must not be `None`")  # noqa: E501

        self._need_file_joining = need_file_joining

    @property
    def requested_document_types(self):
        """Gets the requested_document_types of this RequestedDocumentSpecification.  # noqa: E501

        A list of the document types requested.  # noqa: E501

        :return: The requested_document_types of this RequestedDocumentSpecification.  # noqa: E501
        :rtype: List[DocumentType]
        """
        return self._requested_document_types

    @requested_document_types.setter
    def requested_document_types(self, requested_document_types):
        """Sets the requested_document_types of this RequestedDocumentSpecification.

        A list of the document types requested.  # noqa: E501

        :param requested_document_types: The requested_document_types of this RequestedDocumentSpecification.  # noqa: E501
        :type: List[DocumentType]
        """
        if self._configuration.client_side_validation and requested_document_types is None:
            raise ValueError("Invalid value for `requested_document_types`, must not be `None`")  # noqa: E501

        self._requested_document_types = requested_document_types

    @property
    def requested_label_customization(self):
        """Gets the requested_label_customization of this RequestedDocumentSpecification.  # noqa: E501


        :return: The requested_label_customization of this RequestedDocumentSpecification.  # noqa: E501
        :rtype: RequestedLabelCustomization
        """
        return self._requested_label_customization

    @requested_label_customization.setter
    def requested_label_customization(self, requested_label_customization):
        """Sets the requested_label_customization of this RequestedDocumentSpecification.


        :param requested_label_customization: The requested_label_customization of this RequestedDocumentSpecification.  # noqa: E501
        :type: RequestedLabelCustomization
        """

        self._requested_label_customization = requested_label_customization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestedDocumentSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestedDocumentSpecification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestedDocumentSpecification):
            return True

        return self.to_dict() != other.to_dict()
