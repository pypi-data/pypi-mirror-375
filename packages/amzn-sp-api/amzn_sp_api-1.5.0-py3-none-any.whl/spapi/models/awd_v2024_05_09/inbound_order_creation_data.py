# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class InboundOrderCreationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_reference_id': 'str',
        'origin_address': 'Address',
        'packages_to_inbound': 'List[DistributionPackageQuantity]',
        'preferences': 'InboundPreferences',
    }

    attribute_map = {
        'external_reference_id': 'externalReferenceId',
        'origin_address': 'originAddress',
        'packages_to_inbound': 'packagesToInbound',
        'preferences': 'preferences',
    }

    def __init__(self, external_reference_id=None, origin_address=None, packages_to_inbound=None, preferences=None, _configuration=None):  # noqa: E501
        """InboundOrderCreationData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._external_reference_id = None
        self._origin_address = None
        self._packages_to_inbound = None
        self._preferences = None
        self.discriminator = None

        if external_reference_id is not None:
            self.external_reference_id = external_reference_id
        self.origin_address = origin_address
        self.packages_to_inbound = packages_to_inbound
        if preferences is not None:
            self.preferences = preferences

    @property
    def external_reference_id(self):
        """Gets the external_reference_id of this InboundOrderCreationData.  # noqa: E501

        Reference ID that can be used to correlate the order with partner resources.  # noqa: E501

        :return: The external_reference_id of this InboundOrderCreationData.  # noqa: E501
        :rtype: str
        """
        return self._external_reference_id

    @external_reference_id.setter
    def external_reference_id(self, external_reference_id):
        """Sets the external_reference_id of this InboundOrderCreationData.

        Reference ID that can be used to correlate the order with partner resources.  # noqa: E501

        :param external_reference_id: The external_reference_id of this InboundOrderCreationData.  # noqa: E501
        :type: str
        """

        self._external_reference_id = external_reference_id

    @property
    def origin_address(self):
        """Gets the origin_address of this InboundOrderCreationData.  # noqa: E501


        :return: The origin_address of this InboundOrderCreationData.  # noqa: E501
        :rtype: Address
        """
        return self._origin_address

    @origin_address.setter
    def origin_address(self, origin_address):
        """Sets the origin_address of this InboundOrderCreationData.


        :param origin_address: The origin_address of this InboundOrderCreationData.  # noqa: E501
        :type: Address
        """
        if self._configuration.client_side_validation and origin_address is None:
            raise ValueError("Invalid value for `origin_address`, must not be `None`")  # noqa: E501

        self._origin_address = origin_address

    @property
    def packages_to_inbound(self):
        """Gets the packages_to_inbound of this InboundOrderCreationData.  # noqa: E501

        List of packages to be inbounded.  # noqa: E501

        :return: The packages_to_inbound of this InboundOrderCreationData.  # noqa: E501
        :rtype: List[DistributionPackageQuantity]
        """
        return self._packages_to_inbound

    @packages_to_inbound.setter
    def packages_to_inbound(self, packages_to_inbound):
        """Sets the packages_to_inbound of this InboundOrderCreationData.

        List of packages to be inbounded.  # noqa: E501

        :param packages_to_inbound: The packages_to_inbound of this InboundOrderCreationData.  # noqa: E501
        :type: List[DistributionPackageQuantity]
        """
        if self._configuration.client_side_validation and packages_to_inbound is None:
            raise ValueError("Invalid value for `packages_to_inbound`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                packages_to_inbound is not None and len(packages_to_inbound) < 1):
            raise ValueError("Invalid value for `packages_to_inbound`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._packages_to_inbound = packages_to_inbound

    @property
    def preferences(self):
        """Gets the preferences of this InboundOrderCreationData.  # noqa: E501


        :return: The preferences of this InboundOrderCreationData.  # noqa: E501
        :rtype: InboundPreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this InboundOrderCreationData.


        :param preferences: The preferences of this InboundOrderCreationData.  # noqa: E501
        :type: InboundPreferences
        """

        self._preferences = preferences

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InboundOrderCreationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InboundOrderCreationData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InboundOrderCreationData):
            return True

        return self.to_dict() != other.to_dict()
