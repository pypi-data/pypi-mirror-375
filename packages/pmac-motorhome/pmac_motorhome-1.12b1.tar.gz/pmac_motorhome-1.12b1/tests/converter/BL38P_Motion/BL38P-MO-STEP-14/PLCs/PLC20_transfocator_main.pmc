;####################################################
; DO NOT MODIFY: File created from src/PLC20_transfocator_main.psub
;####################################################

;MAIN TRANSFOCATOR CONTROL PLC
;
;ASSUMPTIONS:	"FILTER IN" MEANS FILTER UP	
;				ROCKER POS DIRECTION PUSHES THE FILTER OUT
;				TRANSLATION POS DIRECTION MOVES ROCKER AWAY FROM MOTOR
;
;DESCRIPTION:	THIS PLC CONTROLS THE SEQUENCE OF OPERATION OF THE TRANSFOCATOR.
;				IT CALLS OTHER PLC'S TO MOVE THE FILTERS IN AND OUT BUT THE MAIN
;				CONTROL IS CONTAINED IN THIS PLC. 
;
;VARIABLES USED:	P(100*PLC_NO) TO P(100*PLC_NO + 50)
;
;COMMANDS FROM EPICS:
;				FIRST_FILTER_EPICS 		= FIRST FILTER IN A BANK OF FILTERS TO BE SELECTED (0-127) 
;										= -1 FIRES ALL FILTERS OUT REGARDLESS OF CURRENT STATE AND RESETS ALL FILTER BANK REGISTERS
;										= -2 FIRES ALL FILTERS IN REGARDLESS OF CURRENT STATE AND RESETS ALL FILTER BANK REGISTERS
;				NUMBER_OF_FILTERS_EPICS = HOW MANY FILTERS FROM FIRST_FILTER TO BE SELECTED
;						  		  		  EG, FIRST_FILTER_EPICS = 4 NUMBER_OF_FILTERS_EPICS = 4 SELECTS FILTERS 4,5,6 AND 7
;				RUN 					= TRIGGERS THE PLC TO RUN. THIS IS RESET BY THE PLC ON COMPLETION
;				ABORT					= STOPS SEQUENCE AFTER ROCKER HAS BEEN MOVED OUT OF THE WAY, TO RESET
;								  		  SET THIS BACK TO 0 AND RE-INITIALISE RUN
;READBACK TO EPICS:
;				FILTER_BANK_X			= THE 128 FILTERS ARE SPLIT INTO 16 ELEMENT BANKS, THE STATUS OF EACH BANK IS 
;										  REPRESENTED BY A P VARIABLE ENCODED IN BCD.
;
;Rev 3		Translation now in closed loop, I variables added to reflect this and positions changed
;Rev 4 		Addresses issue with the rocker coming off limits during translation move. Now just jogs rocker to 0 if this occurs.
;Rev 5		If translation gets a following error it retries, then aborts. See lines 234 - 255
;Rev 6		FIRST_FILTER Macro added
;
; Macros (and example values):
; - MAIN_PLC_NO 	= 20  PLC Number for the main PLC, e.g 20
; - TRANS 		= 5  Axisnum for translation axis, e.g 5
; - ROCKER 		= 6  Axisnum for rocker axis, e.g. 6
; - TIMEOUT 		= 2000  Timeout period for jams in ms, e.g 2000
; - TOLERANCE 		= 10  In position tolerance for translation in cts, e.g 10
; - RETRIES 		= 3  Number of permitted retries in the event of a jam, e.g 3
; - FOUT_PLC_NO 	= 21  PLC number for the associated filter out PLC, e.g 21
; - FIN_PLC_NO 		= 22  PLC number for the associated filter in PLC, e.g 22
; - HOMING_PLC_NO 	= 23  PLC number for the associated homing PLC, e.g 23
; - JOG_VEL 		= 20  Jog velocity for translation axis, e.g 12.288
; - FILTER_PITCH 	= 4096  Number of counts between filters, e.g 4096
; - FIRST_FILTER 	= 13262  Number of counts to the first filter, eg, 13262


#DEFINE PLC_NO	20

#DEFINE TRANSLATION	5
#DEFINE	ROCKER	6

;COMMANDS FROM EPICS
#DEFINE FIRST_FILTER_EPICS	P(100*PLC_NO + 5)
#DEFINE NUMBER_OF_FILTERS_EPICS	P(100*PLC_NO + 6)
#DEFINE RUN	P(100*PLC_NO + 7)
#DEFINE ABORT P(100*PLC_NO + 8)

;COMMANDS FROM EPICS STORAGE
#DEFINE FIRST_FILTER_TEMP	P(100*PLC_NO + 15)
#DEFINE NUMBER_OF_FILTERS_COUNTER	P(100*PLC_NO + 16)
#DEFINE FIRST_FILTER	P(100*PLC_NO + 17)
#DEFINE NUMBER_OF_FILTERS_STORE	P(100*PLC_NO + 18)

;STATUS WORDS
;THESE ARE USED AS 16BIT VALUES TO REPRESENT THE CURRENT STATE OF A BANK OF 16 FILTERS
#DEFINE FILTER_BANK_0	P(100*PLC_NO + 30)
#DEFINE FILTER_BANK_1	P(100*PLC_NO + 31)
#DEFINE FILTER_BANK_2	P(100*PLC_NO + 32)
#DEFINE FILTER_BANK_3	P(100*PLC_NO + 33)
#DEFINE FILTER_BANK_4	P(100*PLC_NO + 34)
#DEFINE FILTER_BANK_5	P(100*PLC_NO + 35)
#DEFINE FILTER_BANK_6	P(100*PLC_NO + 36)
#DEFINE FILTER_BANK_7	P(100*PLC_NO + 37)
#DEFINE FILTER_BANK_NUMBER	P(100*PLC_NO + 38)
#DEFINE CURRENT_FILTER_BANK	P(100*PLC_NO + 30 + FILTER_BANK_NUMBER)
#DEFINE STATUS P(100*PLC_NO + 44)
#DEFINE TRANSLATION_POSITION_STORE	P(100*PLC_NO + 47)
#DEFINE TRANSLATION_STOPPED_LIM_STORE	P(100*PLC_NO + 48)

;ADDED TO ALLOW ALL FITERS TO BE RESET ONE WAY OR THE OTHER
#DEFINE FIRE_ALL_IN		P(100*PLC_NO + 39)
#DEFINE FIRE_ALL_OUT		P(100*PLC_NO + 40)
#DEFINE FILTER_STATE_CORRUPT		P(100*PLC_NO + 41)
#DEFINE CURRENT_FILTER_READBACK	P(100*PLC_NO + 42)

;INVOCATION BITS
#DEFINE TRIGGER_FILTER_IN	P(100*PLC_NO + 20)
#DEFINE TRIGGER_FILTER_OUT	P(100*PLC_NO + 21)
#DEFINE FIRST_PASS_LATCH	P(100*PLC_NO + 23)
#DEFINE TOGGLE_FILTER   	P(100*PLC_NO + 24)
#DEFINE TIMED_OUT   		P(100*PLC_NO + 25)
#DEFINE ROCKER_LATCH	P(100*PLC_NO + 43)

;GENERIC AXIS COMMANDS
#DEFINE JOG_AXIS_POS	&COMMAND"J+"
#DEFINE JOG_AXIS_NEG	&COMMAND"J-"
#DEFINE STOP_AXIS	&COMMAND"J/"
#DEFINE JOG_PRESET	&COMMAND"J^*"
#DEFINE KILL_AXIS	&COMMAND"K"
#DEFINE JOG_TO_PRESET	&COMMAND"J=*"
#DEFINE HOME_AXIS	&COMMAND"HM"
#DEFINE NUDGE_TO_TRIGGER_POS	&COMMAND"J:1000^0"
#DEFINE NUDGE_TO_TRIGGER_NEG	&COMMAND"J:-1000^0"

;TRANSLATION VARIABLES
#DEFINE TRANSLATION_IN_POS	M(100 * TRANSLATION + 40)
#DEFINE TRANSLATION_HOMED	M(100 * TRANSLATION + 45)
#DEFINE TRANSLATION_PRESET	M(100 * TRANSLATION + 72)
#DEFINE TRANSLATION_PLIM	M(100 * TRANSLATION + 21)
#DEFINE TRANSLATION_NLIM	M(100 * TRANSLATION + 22)
#DEFINE TRANSLATION_FFE 	M(100 * TRANSLATION + 42)
#DEFINE TRANSLATION_STOPPED_ON_LIMIT M(100 * TRANSLATION + 30)
#DEFINE CURRENT_FILTER		(FIRST_FILTER + (NUMBER_OF_FILTERS_STORE - NUMBER_OF_FILTERS_COUNTER))
#DEFINE ACTUAL_POSITION	M(100*TRANSLATION + 62)
#DEFINE POS_SCALE_FACTOR	I(100*TRANSLATION + 8)
#DEFINE ACTUAL_POSITION_SCALED	ACTUAL_POSITION*(1/(POS_SCALE_FACTOR*32))
#DEFINE TRANSLATION_STOPPED_LIM	M(100 * TRANSLATION + 30)
#DEFINE TRANSLATION_RETRY_COUNTER	P(100*PLC_NO + 49)
#DEFINE TRANSLATION_FFE_COUNTER	P(100*PLC_NO + 50)

#DEFINE JOG_SPEED	I(100*TRANSLATION + 22)
#DEFINE HOME_SPEED	I(100*TRANSLATION + 23)

;TRANSLATION CONSTANTS
#DEFINE TRANSLATION_DWELL	100
#DEFINE TRANSLATION_BACKLASH_DWELL	100
#DEFINE FIRST_FILTER_POSITION	P(100*PLC_NO + 45)
#DEFINE FILTER_INCREMENT	P(100*PLC_NO + 46)
#DEFINE BACKLASH_DISTANCE	FILTER_INCREMENT*2
#DEFINE TIMEOUT	2000	;2000
#DEFINE TOL 10	;10
#DEFINE TRANSLATION_RETRIES 3	;3

;ROCKER VARIABLES
#DEFINE ROCKER_IN_POS	M(100 * ROCKER + 40)
#DEFINE ROCKER_HOMED	M(100 * ROCKER + 45)
#DEFINE ROCKER_PRESET	M(100 * ROCKER + 72)
#DEFINE ROCKER_PLIM	M(100 * ROCKER + 21)
#DEFINE ROCKER_NLIM	M(100 * ROCKER + 22)

;TIME DEFINITION
#DEFINE TIMER	I(5111+(10&30)*50+10%2)
#DEFINE MILLISECONDS	* 8388608/i10

;PLC DEFINITIONS
#DEFINE FILTER_OUT_PLC	21	;21
#DEFINE FILTER_OUT_PLC_RUNNING	P(100*FILTER_OUT_PLC +10)
#DEFINE FILTER_OUT_TIMED_OUT P(100*FILTER_OUT_PLC +11)
#DEFINE FILTER_OUT_TIMED_OUT_STATUS P(100*FILTER_OUT_PLC +17)
#DEFINE FILTER_IN_PLC	22	;22
#DEFINE FILTER_IN_PLC_RUNNING	P(100*FILTER_IN_PLC +10)
#DEFINE FILTER_IN_TIMED_OUT P(100*FILTER_IN_PLC +11)
#DEFINE FILTER_IN_TIMED_OUT_STATUS P(100*FILTER_IN_PLC +17)
#DEFINE TRANSLATION_HOMING_PLC 23	;23

;FORMULAE
#DEFINE FILTER_POS_DECIMAL INT((EXP(INT(CURRENT_FILTER%16)*LN(2)))+0.1)

JOG_SPEED = 20	;12.288
HOME_SPEED = JOG_SPEED/3
FIRST_FILTER_POSITION = 13262 ;13262
FILTER_INCREMENT = 4096	;4096 
TRANSLATION_RETRY_COUNTER = 0

STATUS = 0
OPEN PLC PLC_NO
CLEAR
TRANSLATION_POSITION_STORE = 0
TRANSLATION_STOPPED_LIM_STORE = 0
;HOME THE TRANSLATION IF NOT ALREADY HOMED

IF(RUN = 1)
IF(TRANSLATION_HOMED = 0)
	STATUS=1 	;HOMING
	ENABLE PLC TRANSLATION_HOMING_PLC
	TIMER = 100 MILLISECONDS			
	WHILE(TIMER > 0)
	ENDWHILE
	
	WHILE(TRANSLATION_HOMED = 0)
	ENDWHILE
ENDIF
STATUS=2	;HOMED
ENDIF

;RESET CONTROL VARIABLES
FIRST_FILTER_EPICS = 0
FIRST_FILTER = 0
NUMBER_OF_FILTERS_EPICS = 0
RUN = 0

;RESET LATCHES AND TEMP VARIABLES
FIRST_PASS_LATCH = 0
NUMBER_OF_FILTERS_STORE = 0
NUMBER_OF_FILTERS_COUNTER = 0
TRANSLATION_PRESET = 0
TIMED_OUT = 0

TIMER = 100 MILLISECONDS			
WHILE(TIMER > 0)
ENDWHILE

WHILE(ABORT = 0)

	IF(RUN = 1)
		TIMED_OUT = 0
		IF(FIRST_PASS_LATCH = 0)
			CURRENT_FILTER_READBACK = CURRENT_FILTER
			;ADDED TO ALLOW ALL FITERS TO BE RESET ONE WAY OR THE OTHER
			IF(FIRST_FILTER_EPICS = -1)
				STATUS=3	;EPICS ALL FILTERS IN
				FIRE_ALL_IN = 1
				FILTER_STATE_CORRUPT = 0
				NUMBER_OF_FILTERS_STORE = 128
				FIRST_FILTER = 0
			ELSE
				IF(FIRST_FILTER_EPICS = -2)
					STATUS=4	;EPICS ALL FILTERS OUT
					FIRE_ALL_OUT = 1
					FILTER_STATE_CORRUPT = 0
					NUMBER_OF_FILTERS_STORE = 128
					FIRST_FILTER = 0
				ELSE
					STATUS=5	;STARTING OPERATION
					NUMBER_OF_FILTERS_STORE = NUMBER_OF_FILTERS_EPICS
					FIRST_FILTER = FIRST_FILTER_EPICS
				ENDIF
			ENDIF
			
			NUMBER_OF_FILTERS_COUNTER = NUMBER_OF_FILTERS_STORE
			
			;DO INITIAL MOVE PAST THE FIRST FILTER IN THE DESIRED BANK
			IF((FIRST_FILTER_POSITION + (FIRST_FILTER * FILTER_INCREMENT)) < ACTUAL_POSITION_SCALED)
				TRANSLATION_PRESET = FIRST_FILTER_POSITION + (FIRST_FILTER * FILTER_INCREMENT) - BACKLASH_DISTANCE
				IF(TRANSLATION_PRESET < 0)
					TRANSLATION_PRESET = 10000
				ENDIF
				STATUS=6	;REVERSE MOVE NEEDED
			ELSE
				STATUS=7	;FORWARD MOVE NEEDED
				TRANSLATION_PRESET = FIRST_FILTER_POSITION + (FIRST_FILTER * FILTER_INCREMENT)
			ENDIF
			
			ADDRESS#TRANSLATION
			JOG_TO_PRESET
			STATUS = 8		;MOVING TO PRESET
			WHILE(TRANSLATION_IN_POS = 1)
				STATUS = 9		;MOVING TO PRESET
			ENDWHILE
			WHILE(TRANSLATION_IN_POS = 0) AND (ABORT = 0)
				STATUS = 10		;MOVING TO PRESET
				;ADDED CODE TO RETRY IF THE TRANSLATION GETS A FOLLOWING ERROR. LH 26/01/2016
				IF(TRANSLATION_FFE = 1)
					IF(TRANSLATION_RETRY_COUNTER < TRANSLATION_RETRIES)
						TRANSLATION_FFE_COUNTER = TRANSLATION_FFE_COUNTER +1
						STATUS = 101
						TIMER = 1000 MILLISECONDS
						WHILE(TIMER > 0)
						ENDWHILE
						
						ADDRESS#TRANSLATION
						JOG_TO_PRESET
						TRANSLATION_RETRY_COUNTER = TRANSLATION_RETRY_COUNTER +1
						
						TIMER = 100 MILLISECONDS
						WHILE(TIMER > 0)
						ENDWHILE
					ELSE
						ABORT = 1
						TRANSLATION_RETRY_COUNTER = 0
					ENDIF
				ENDIF
			
			ENDWHILE
			
			TRANSLATION_RETRY_COUNTER = 0
			
			WHILE(ACTUAL_POSITION_SCALED > (TRANSLATION_PRESET + TOL)) OR (ACTUAL_POSITION_SCALED < (TRANSLATION_PRESET - TOL)) AND (ABORT = 0)
				STATUS = 11		;TRANSLATION NOT IN POSITION
				IF(TRANSLATION_STOPPED_ON_LIMIT = 1)
					ROCKER_PRESET = 0
					ADDRESS#ROCKER
					JOG_TO_PRESET
					WHILE(ROCKER_IN_POS = 1)
					ENDWHILE
					WHILE(ROCKER_IN_POS = 0)
					ENDWHILE
					
					;STATUS = 12		;ROCKER CAME AWAY FROM SAFE POSITION
					;IF(ROCKER_LATCH = 2)
					;	STATUS = 13		;TRYING TO NUDGE ROCKER FORWARD TO LIMIT
					;	ADDRESS#ROCKER
					;	NUDGE_TO_TRIGGER_POS
					;ELSE
					;	STATUS = 14		;TRYING TO NUDGE BACK ROCKER BACK TO LIMIT
					;	ADDRESS#ROCKER
					;	NUDGE_TO_TRIGGER_NEG
					;ENDIF
					;WHILE(ROCKER_IN_POS = 0)
					;ENDWHILE
					
				 ;WHILE(TRANSLATION_PLIM = 1) AND (TRANSLATION_NLIM = 1) AND (ABORT = 0)
					;STATUS = 15		;ROCKER NOT IN SAFE POSITION
					;TRANSLATION_POSITION_STORE = ACTUAL_POSITION_SCALED
					;TRANSLATION_STOPPED_LIM_STORE = TRANSLATION_STOPPED_LIM
				 ;ENDWHILE
					STATUS = 151
					IF(ABORT = 0)
						ADDRESS#TRANSLATION
						JOG_TO_PRESET
						STATUS = 16		;TRANSLATION MOVING TO PRESET AFTER RECOVERY
						WHILE(TRANSLATION_IN_POS = 1)
						STATUS = 161		;MOVING TO PRESET
						ENDWHILE
						WHILE(TRANSLATION_IN_POS = 0)
						STATUS = 162		;MOVING TO PRESET
						ENDWHILE
					ENDIF
				ENDIF
			ENDWHILE
			
			TIMER = TRANSLATION_BACKLASH_DWELL MILLISECONDS			
			WHILE(TIMER > 0)
				STATUS = 17		;TRANSLATION DWELLING
			ENDWHILE
			
			FIRST_PASS_LATCH = 1
		ENDIF
		
		IF(NUMBER_OF_FILTERS_COUNTER > 0) AND (ABORT = 0)
		
			;MOVE TO THE NEXT FILTER TO CHANGE
			CURRENT_FILTER_READBACK = CURRENT_FILTER
			TRANSLATION_PRESET = FIRST_FILTER_POSITION + (CURRENT_FILTER * FILTER_INCREMENT) 
			
			ADDRESS#TRANSLATION
			JOG_TO_PRESET
			WHILE(TRANSLATION_IN_POS = 1) 
				STATUS = 18		;MOVING TO FILTER
			ENDWHILE
			WHILE(TRANSLATION_IN_POS = 0) 
				STATUS = 19		;MOVING TO FILTER			
			ENDWHILE
			
			WHILE(ACTUAL_POSITION_SCALED > (TRANSLATION_PRESET + TOL)) OR (ACTUAL_POSITION_SCALED < (TRANSLATION_PRESET - TOL))
				STATUS = 20		;TRANSLATION NOT IN POSITION
				IF(TRANSLATION_STOPPED_ON_LIMIT = 1)
					STATUS = 21		;ROCKER CAME AWAY FROM SAFE POSITION
					IF(ROCKER_LATCH = 2)
						STATUS = 22		;TRYING TO NUDGE ROCKER FORWARD TO LIMIT
						ADDRESS#ROCKER
						NUDGE_TO_TRIGGER_POS
					ELSE
						STATUS = 23		;TRYING TO NUDGE BACK ROCKER BACK TO LIMIT
						ADDRESS#ROCKER
						NUDGE_TO_TRIGGER_NEG
					ENDIF
					WHILE(ROCKER_IN_POS = 0)
					ENDWHILE
					
					WHILE(TRANSLATION_PLIM = 1) OR (TRANSLATION_NLIM = 1)
						STATUS = 24		;ROCKER NOT IN SAFE POSITION
					ENDWHILE
					ADDRESS#TRANSLATION
					JOG_TO_PRESET
						STATUS = 25		;TRANSLATION MOVING TO PRESET AFTER RECOVERY
				ENDIF
			ENDWHILE
			
			TIMER = TRANSLATION_DWELL MILLISECONDS		
			WHILE(TIMER > 0)	
				STATUS = 26		;TRANSLATION DWELLING
			ENDWHILE
			
			TOGGLE_FILTER = 1
			;NUMBER_OF_FILTERS_COUNTER = NUMBER_OF_FILTERS_COUNTER - 1
		ELSE
			IF(ABORT = 0)
				STATUS = 27		;ALL DONE FOR CURRENT COMMAND
				TRANSLATION_POSITION_STORE = 0
				TRANSLATION_STOPPED_LIM_STORE = 0
				RUN = 0
				FIRST_PASS_LATCH = 0
				IF(FIRE_ALL_IN = 1)
					FILTER_BANK_0 = 65535
					FILTER_BANK_1 = 65535
					FILTER_BANK_2 = 65535
					FILTER_BANK_3 = 65535
					FILTER_BANK_4 = 65535
					FILTER_BANK_5 = 65535
					FILTER_BANK_6 = 65535
					FILTER_BANK_7 = 65535
					FIRE_ALL_IN = 0
				ENDIF
				
				IF(FIRE_ALL_OUT = 1)
					FILTER_BANK_0 = 0
					FILTER_BANK_1 = 0
					FILTER_BANK_2 = 0
					FILTER_BANK_3 = 0
					FILTER_BANK_4 = 0
					FILTER_BANK_5 = 0
					FILTER_BANK_6 = 0
					FILTER_BANK_7 = 0
					FIRE_ALL_OUT = 0
				ENDIF
			ENDIF
		ENDIF
		
	ENDIF
	
	IF(TOGGLE_FILTER = 1) AND (ABORT = 0)
		FILTER_BANK_NUMBER = INT(CURRENT_FILTER/16)
		IF(FIRE_ALL_IN = 0) AND (FIRE_ALL_OUT = 0)
			IF((CURRENT_FILTER_BANK & FILTER_POS_DECIMAL) = FILTER_POS_DECIMAL)
				;THIS FILTER IS CURRENTLY IN SO TRIGGER IT OUT
				TRIGGER_FILTER_OUT = 1			
			ELSE
				;THIS FILTER IS CURRENTLY OUT SO TRIGGER IT IN
				TRIGGER_FILTER_IN = 1
			ENDIF
			TOGGLE_FILTER = 0
		ELSE
			IF(FIRE_ALL_IN = 1)
				TRIGGER_FILTER_IN = 1
			ENDIF
			IF(FIRE_ALL_OUT = 1)
				TRIGGER_FILTER_OUT = 1
			ENDIF
			TOGGLE_FILTER = 0
		ENDIF
		
	ENDIF
	
	IF(TRIGGER_FILTER_IN = 1) AND (ABORT = 0)
	
		FILTER_OUT_TIMED_OUT = 0
		FILTER_OUT_TIMED_OUT_STATUS = 0
		FILTER_IN_TIMED_OUT = 0
		FILTER_IN_TIMED_OUT_STATUS = 0
		
		ENABLE PLC FILTER_IN_PLC
		FILTER_IN_PLC_RUNNING = 1
		ROCKER_LATCH = 1
		STATUS = 28		;FIRING FILTER IN
		
		TIMER = 50 MILLISECONDS			
		WHILE(TIMER > 0)
		ENDWHILE
		WHILE(FILTER_IN_PLC_RUNNING = 1)
			STATUS = 29		;FILTER IN PLC RUNNING
		ENDWHILE
		
		;FILTER_IN_PLC_RUNNING IS ALSO ACCESSED BY THE FILTER IN PLC, IF TIMEOUT OCCURS FILTER IN PLC WILL RETURN -1
		IF(FILTER_IN_PLC_RUNNING = 0)	
			STATUS = 30		;FILTER IN PLC FINISHED WITHOUT TIMEOUT
			IF(FIRE_ALL_IN = 0)
				CURRENT_FILTER_BANK = CURRENT_FILTER_BANK + FILTER_POS_DECIMAL
			ENDIF
			NUMBER_OF_FILTERS_COUNTER = NUMBER_OF_FILTERS_COUNTER - 1
		ELSE
			STATUS = 31		;FILTER IN PLC TIMED OUT
			IF(FIRE_ALL_IN = 1)
				FILTER_STATE_CORRUPT = 1
			ENDIF
			
			TIMED_OUT = 1
			FIRST_PASS_LATCH = 0
			RUN = 0
			FILTER_IN_PLC_RUNNING = 0
		ENDIF
		
		TRIGGER_FILTER_IN = 0

	ENDIF
	
	IF(TRIGGER_FILTER_OUT = 1) AND (ABORT = 0)
	
		FILTER_OUT_TIMED_OUT = 0
		FILTER_OUT_TIMED_OUT_STATUS = 0
		FILTER_IN_TIMED_OUT = 0
		FILTER_IN_TIMED_OUT_STATUS = 0
	
		ENABLE PLC FILTER_OUT_PLC
		FILTER_OUT_PLC_RUNNING = 1
		ROCKER_LATCH = 2
		STATUS = 32		;FIRING FILTER OUT
		
		TIMER = 50 MILLISECONDS			
		WHILE(TIMER > 0)
		ENDWHILE
		WHILE(FILTER_OUT_PLC_RUNNING = 1)
			STATUS = 33		;FILTER OUT PLC RUNNING
		ENDWHILE
		
		IF(FILTER_OUT_PLC_RUNNING = 0)	
			STATUS = 34		;FILTER OUT PLC FINISHED WITHOUT TIMEOUT
			IF(FIRE_ALL_OUT = 0)
				CURRENT_FILTER_BANK = CURRENT_FILTER_BANK - FILTER_POS_DECIMAL
			ENDIF
			NUMBER_OF_FILTERS_COUNTER = NUMBER_OF_FILTERS_COUNTER - 1
		ELSE	
			STATUS = 35		;FILTER OUT PLC TIMED OUT
			IF(FIRE_ALL_OUT = 1)
				FILTER_STATE_CORRUPT = 1
			ENDIF
			
			TIMED_OUT = 1
			FIRST_PASS_LATCH = 0
			RUN = 0
			FILTER_OUT_PLC_RUNNING = 0
		ENDIF
		
		TRIGGER_FILTER_OUT = 0
	ENDIF
	
	IF(ABORT = 1)
		FILTER_STATE_CORRUPT = 1
	ENDIF
ENDWHILE
IF(FIRE_ALL_IN = 1) OR (FIRE_ALL_OUT = 1)
	FILTER_STATE_CORRUPT = 1
	FIRE_ALL_IN = 0
	FIRE_ALL_OUT = 0
ENDIF

CLOSE
DISABLE PLC PLC_NO
