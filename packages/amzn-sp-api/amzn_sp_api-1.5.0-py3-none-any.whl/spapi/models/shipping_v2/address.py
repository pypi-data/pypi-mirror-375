# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_line3': 'str',
        'company_name': 'str',
        'state_or_region': 'str',
        'city': 'str',
        'country_code': 'str',
        'postal_code': 'str',
        'email': 'str',
        'phone_number': 'str',
        'geocode': 'Geocode',
    }

    attribute_map = {
        'name': 'name',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'address_line3': 'addressLine3',
        'company_name': 'companyName',
        'state_or_region': 'stateOrRegion',
        'city': 'city',
        'country_code': 'countryCode',
        'postal_code': 'postalCode',
        'email': 'email',
        'phone_number': 'phoneNumber',
        'geocode': 'geocode',
    }

    def __init__(self, name=None, address_line1=None, address_line2=None, address_line3=None, company_name=None, state_or_region=None, city=None, country_code=None, postal_code=None, email=None, phone_number=None, geocode=None, _configuration=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_line3 = None
        self._company_name = None
        self._state_or_region = None
        self._city = None
        self._country_code = None
        self._postal_code = None
        self._email = None
        self._phone_number = None
        self._geocode = None
        self.discriminator = None

        self.name = name
        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if address_line3 is not None:
            self.address_line3 = address_line3
        if company_name is not None:
            self.company_name = company_name
        self.state_or_region = state_or_region
        self.city = city
        self.country_code = country_code
        self.postal_code = postal_code
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if geocode is not None:
            self.geocode = geocode

    @property
    def name(self):
        """Gets the name of this Address.  # noqa: E501

        The name of the person, business or institution at the address.  # noqa: E501

        :return: The name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.

        The name of the person, business or institution at the address.  # noqa: E501

        :param name: The name of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.  # noqa: E501

        The first line of the address.  # noqa: E501

        :return: The address_line1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

        The first line of the address.  # noqa: E501

        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address_line1 is not None and len(address_line1) > 60):
            raise ValueError("Invalid value for `address_line1`, length must be less than or equal to `60`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address_line1 is not None and len(address_line1) < 1):
            raise ValueError("Invalid value for `address_line1`, length must be greater than or equal to `1`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.  # noqa: E501

        Additional address information, if required.  # noqa: E501

        :return: The address_line2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        Additional address information, if required.  # noqa: E501

        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                address_line2 is not None and len(address_line2) > 60):
            raise ValueError("Invalid value for `address_line2`, length must be less than or equal to `60`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address_line2 is not None and len(address_line2) < 1):
            raise ValueError("Invalid value for `address_line2`, length must be greater than or equal to `1`")  # noqa: E501

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this Address.  # noqa: E501

        Additional address information, if required.  # noqa: E501

        :return: The address_line3 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this Address.

        Additional address information, if required.  # noqa: E501

        :param address_line3: The address_line3 of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                address_line3 is not None and len(address_line3) > 60):
            raise ValueError("Invalid value for `address_line3`, length must be less than or equal to `60`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address_line3 is not None and len(address_line3) < 1):
            raise ValueError("Invalid value for `address_line3`, length must be greater than or equal to `1`")  # noqa: E501

        self._address_line3 = address_line3

    @property
    def company_name(self):
        """Gets the company_name of this Address.  # noqa: E501

        The name of the business or institution associated with the address.  # noqa: E501

        :return: The company_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Address.

        The name of the business or institution associated with the address.  # noqa: E501

        :param company_name: The company_name of this Address.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def state_or_region(self):
        """Gets the state_or_region of this Address.  # noqa: E501

        The state, county or region where the person, business or institution is located.  # noqa: E501

        :return: The state_or_region of this Address.  # noqa: E501
        :rtype: str
        """
        return self._state_or_region

    @state_or_region.setter
    def state_or_region(self, state_or_region):
        """Sets the state_or_region of this Address.

        The state, county or region where the person, business or institution is located.  # noqa: E501

        :param state_or_region: The state_or_region of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state_or_region is None:
            raise ValueError("Invalid value for `state_or_region`, must not be `None`")  # noqa: E501

        self._state_or_region = state_or_region

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        The city or town where the person, business or institution is located.  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        The city or town where the person, business or institution is located.  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this Address.  # noqa: E501

        The two digit country code. Follows ISO 3166-1 alpha-2 format.  # noqa: E501

        :return: The country_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        The two digit country code. Follows ISO 3166-1 alpha-2 format.  # noqa: E501

        :param country_code: The country_code of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501

        The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.  # noqa: E501

        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.  # noqa: E501

        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def email(self):
        """Gets the email of this Address.  # noqa: E501

        The email address of the contact associated with the address.  # noqa: E501

        :return: The email of this Address.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Address.

        The email address of the contact associated with the address.  # noqa: E501

        :param email: The email of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email is not None and len(email) > 64):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `64`")  # noqa: E501

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this Address.  # noqa: E501

        The phone number of the person, business or institution located at that address, including the country calling code.  # noqa: E501

        :return: The phone_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Address.

        The phone number of the person, business or institution located at that address, including the country calling code.  # noqa: E501

        :param phone_number: The phone_number of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                phone_number is not None and len(phone_number) > 20):
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                phone_number is not None and len(phone_number) < 1):
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def geocode(self):
        """Gets the geocode of this Address.  # noqa: E501


        :return: The geocode of this Address.  # noqa: E501
        :rtype: Geocode
        """
        return self._geocode

    @geocode.setter
    def geocode(self, geocode):
        """Sets the geocode of this Address.


        :param geocode: The geocode of this Address.  # noqa: E501
        :type: Geocode
        """

        self._geocode = geocode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Address):
            return True

        return self.to_dict() != other.to_dict()
