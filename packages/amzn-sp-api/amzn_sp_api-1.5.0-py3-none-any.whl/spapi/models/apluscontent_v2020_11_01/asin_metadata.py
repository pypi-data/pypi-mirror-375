# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class AsinMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asin': 'str',
        'badge_set': 'List[AsinBadge]',
        'parent': 'str',
        'title': 'str',
        'image_url': 'str',
        'content_reference_key_set': 'List[str]',
    }

    attribute_map = {
        'asin': 'asin',
        'badge_set': 'badgeSet',
        'parent': 'parent',
        'title': 'title',
        'image_url': 'imageUrl',
        'content_reference_key_set': 'contentReferenceKeySet',
    }

    def __init__(self, asin=None, badge_set=None, parent=None, title=None, image_url=None, content_reference_key_set=None, _configuration=None):  # noqa: E501
        """AsinMetadata - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asin = None
        self._badge_set = None
        self._parent = None
        self._title = None
        self._image_url = None
        self._content_reference_key_set = None
        self.discriminator = None

        self.asin = asin
        if badge_set is not None:
            self.badge_set = badge_set
        if parent is not None:
            self.parent = parent
        if title is not None:
            self.title = title
        if image_url is not None:
            self.image_url = image_url
        if content_reference_key_set is not None:
            self.content_reference_key_set = content_reference_key_set

    @property
    def asin(self):
        """Gets the asin of this AsinMetadata.  # noqa: E501

        The Amazon Standard Identification Number (ASIN).  # noqa: E501

        :return: The asin of this AsinMetadata.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this AsinMetadata.

        The Amazon Standard Identification Number (ASIN).  # noqa: E501

        :param asin: The asin of this AsinMetadata.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and asin is None:
            raise ValueError("Invalid value for `asin`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                asin is not None and len(asin) < 10):
            raise ValueError("Invalid value for `asin`, length must be greater than or equal to `10`")  # noqa: E501

        self._asin = asin

    @property
    def badge_set(self):
        """Gets the badge_set of this AsinMetadata.  # noqa: E501

        The set of ASIN badges.  # noqa: E501

        :return: The badge_set of this AsinMetadata.  # noqa: E501
        :rtype: List[AsinBadge]
        """
        return self._badge_set

    @badge_set.setter
    def badge_set(self, badge_set):
        """Sets the badge_set of this AsinMetadata.

        The set of ASIN badges.  # noqa: E501

        :param badge_set: The badge_set of this AsinMetadata.  # noqa: E501
        :type: List[AsinBadge]
        """

        self._badge_set = badge_set

    @property
    def parent(self):
        """Gets the parent of this AsinMetadata.  # noqa: E501

        The Amazon Standard Identification Number (ASIN).  # noqa: E501

        :return: The parent of this AsinMetadata.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AsinMetadata.

        The Amazon Standard Identification Number (ASIN).  # noqa: E501

        :param parent: The parent of this AsinMetadata.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                parent is not None and len(parent) < 10):
            raise ValueError("Invalid value for `parent`, length must be greater than or equal to `10`")  # noqa: E501

        self._parent = parent

    @property
    def title(self):
        """Gets the title of this AsinMetadata.  # noqa: E501

        The title for the ASIN in the Amazon catalog.  # noqa: E501

        :return: The title of this AsinMetadata.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AsinMetadata.

        The title for the ASIN in the Amazon catalog.  # noqa: E501

        :param title: The title of this AsinMetadata.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def image_url(self):
        """Gets the image_url of this AsinMetadata.  # noqa: E501

        The default image for the ASIN in the Amazon catalog.  # noqa: E501

        :return: The image_url of this AsinMetadata.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this AsinMetadata.

        The default image for the ASIN in the Amazon catalog.  # noqa: E501

        :param image_url: The image_url of this AsinMetadata.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                image_url is not None and len(image_url) < 1):
            raise ValueError("Invalid value for `image_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._image_url = image_url

    @property
    def content_reference_key_set(self):
        """Gets the content_reference_key_set of this AsinMetadata.  # noqa: E501

        A set of content reference keys.  # noqa: E501

        :return: The content_reference_key_set of this AsinMetadata.  # noqa: E501
        :rtype: List[str]
        """
        return self._content_reference_key_set

    @content_reference_key_set.setter
    def content_reference_key_set(self, content_reference_key_set):
        """Sets the content_reference_key_set of this AsinMetadata.

        A set of content reference keys.  # noqa: E501

        :param content_reference_key_set: The content_reference_key_set of this AsinMetadata.  # noqa: E501
        :type: List[str]
        """

        self._content_reference_key_set = content_reference_key_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsinMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsinMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AsinMetadata):
            return True

        return self.to_dict() != other.to_dict()
