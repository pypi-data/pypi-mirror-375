# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class TrackingDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carrier_code': 'CarrierCode',
        'booking_id': 'str',
    }

    attribute_map = {
        'carrier_code': 'carrierCode',
        'booking_id': 'bookingId',
    }

    def __init__(self, carrier_code=None, booking_id=None, _configuration=None):  # noqa: E501
        """TrackingDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._carrier_code = None
        self._booking_id = None
        self.discriminator = None

        if carrier_code is not None:
            self.carrier_code = carrier_code
        self.booking_id = booking_id

    @property
    def carrier_code(self):
        """Gets the carrier_code of this TrackingDetails.  # noqa: E501


        :return: The carrier_code of this TrackingDetails.  # noqa: E501
        :rtype: CarrierCode
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this TrackingDetails.


        :param carrier_code: The carrier_code of this TrackingDetails.  # noqa: E501
        :type: CarrierCode
        """

        self._carrier_code = carrier_code

    @property
    def booking_id(self):
        """Gets the booking_id of this TrackingDetails.  # noqa: E501

        The identifier that is received from transportation to uniquely identify a booking.  # noqa: E501

        :return: The booking_id of this TrackingDetails.  # noqa: E501
        :rtype: str
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id):
        """Sets the booking_id of this TrackingDetails.

        The identifier that is received from transportation to uniquely identify a booking.  # noqa: E501

        :param booking_id: The booking_id of this TrackingDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and booking_id is None:
            raise ValueError("Invalid value for `booking_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                booking_id is not None and len(booking_id) < 1):
            raise ValueError("Invalid value for `booking_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._booking_id = booking_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackingDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackingDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrackingDetails):
            return True

        return self.to_dict() != other.to_dict()
