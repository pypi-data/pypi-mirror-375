# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .ip_permission import IpPermission
from .tag import Tag
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class SecurityGroup(UniversalBaseModel):
    region: str
    description: typing.Optional[str] = None
    group_id: typing.Optional[str] = pydantic.Field(alias="groupId", default=None)
    group_name: typing.Optional[str] = pydantic.Field(alias="groupName", default=None)
    ip_permissions: typing.Optional[typing.List[IpPermission]] = pydantic.Field(alias="ipPermissions", default=None)
    ip_permissions_egress: typing.Optional[typing.List[IpPermission]] = pydantic.Field(
        alias="ipPermissionsEgress", default=None
    )
    owner_id: typing.Optional[str] = pydantic.Field(alias="ownerId", default=None)
    security_group_arn: typing.Optional[str] = pydantic.Field(alias="securityGroupArn", default=None)
    tags: typing.Optional[typing.List[Tag]] = None
    vpc_id: typing.Optional[str] = pydantic.Field(alias="vpcId", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
