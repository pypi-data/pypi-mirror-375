# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ServiceLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_location_type': 'str',
        'address': 'Address',
    }

    attribute_map = {
        'service_location_type': 'serviceLocationType',
        'address': 'address',
    }

    def __init__(self, service_location_type=None, address=None, _configuration=None):  # noqa: E501
        """ServiceLocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._service_location_type = None
        self._address = None
        self.discriminator = None

        if service_location_type is not None:
            self.service_location_type = service_location_type
        if address is not None:
            self.address = address

    @property
    def service_location_type(self):
        """Gets the service_location_type of this ServiceLocation.  # noqa: E501

        The location of the service job.  # noqa: E501

        :return: The service_location_type of this ServiceLocation.  # noqa: E501
        :rtype: str
        """
        return self._service_location_type

    @service_location_type.setter
    def service_location_type(self, service_location_type):
        """Sets the service_location_type of this ServiceLocation.

        The location of the service job.  # noqa: E501

        :param service_location_type: The service_location_type of this ServiceLocation.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_HOME", "IN_STORE", "ONLINE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                service_location_type not in allowed_values):
            raise ValueError(
                "Invalid value for `service_location_type` ({0}), must be one of {1}"  # noqa: E501
                .format(service_location_type, allowed_values)
            )

        self._service_location_type = service_location_type

    @property
    def address(self):
        """Gets the address of this ServiceLocation.  # noqa: E501


        :return: The address of this ServiceLocation.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ServiceLocation.


        :param address: The address of this ServiceLocation.  # noqa: E501
        :type: Address
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceLocation):
            return True

        return self.to_dict() != other.to_dict()
