# coding: utf-8

"""
    Selling Partner API for Listings Restrictions

    The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).

    The version of the OpenAPI document: 2021-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Restriction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_id': 'str',
        'condition_type': 'str',
        'reasons': 'List[Reason]',
    }

    attribute_map = {
        'marketplace_id': 'marketplaceId',
        'condition_type': 'conditionType',
        'reasons': 'reasons',
    }

    def __init__(self, marketplace_id=None, condition_type=None, reasons=None, _configuration=None):  # noqa: E501
        """Restriction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._marketplace_id = None
        self._condition_type = None
        self._reasons = None
        self.discriminator = None

        self.marketplace_id = marketplace_id
        if condition_type is not None:
            self.condition_type = condition_type
        if reasons is not None:
            self.reasons = reasons

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this Restriction.  # noqa: E501

        A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced.  # noqa: E501

        :return: The marketplace_id of this Restriction.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this Restriction.

        A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced.  # noqa: E501

        :param marketplace_id: The marketplace_id of this Restriction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def condition_type(self):
        """Gets the condition_type of this Restriction.  # noqa: E501

        The condition that applies to the restriction.  # noqa: E501

        :return: The condition_type of this Restriction.  # noqa: E501
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this Restriction.

        The condition that applies to the restriction.  # noqa: E501

        :param condition_type: The condition_type of this Restriction.  # noqa: E501
        :type: str
        """
        allowed_values = ["new_new", "new_open_box", "new_oem", "refurbished_refurbished", "used_like_new", "used_very_good", "used_good", "used_acceptable", "collectible_like_new", "collectible_very_good", "collectible_good", "collectible_acceptable", "club_club"]  # noqa: E501
        if (self._configuration.client_side_validation and
                condition_type not in allowed_values):
            raise ValueError(
                "Invalid value for `condition_type` ({0}), must be one of {1}"  # noqa: E501
                .format(condition_type, allowed_values)
            )

        self._condition_type = condition_type

    @property
    def reasons(self):
        """Gets the reasons of this Restriction.  # noqa: E501

        A list of reasons for the restriction.  # noqa: E501

        :return: The reasons of this Restriction.  # noqa: E501
        :rtype: List[Reason]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this Restriction.

        A list of reasons for the restriction.  # noqa: E501

        :param reasons: The reasons of this Restriction.  # noqa: E501
        :type: List[Reason]
        """

        self._reasons = reasons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Restriction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Restriction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Restriction):
            return True

        return self.to_dict() != other.to_dict()
