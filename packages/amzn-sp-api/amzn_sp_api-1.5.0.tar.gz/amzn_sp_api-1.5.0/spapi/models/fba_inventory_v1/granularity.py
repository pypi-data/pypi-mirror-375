# coding: utf-8

"""
    Selling Partner API for FBA Inventory

    The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Granularity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'granularity_type': 'str',
        'granularity_id': 'str',
    }

    attribute_map = {
        'granularity_type': 'granularityType',
        'granularity_id': 'granularityId',
    }

    def __init__(self, granularity_type=None, granularity_id=None, _configuration=None):  # noqa: E501
        """Granularity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._granularity_type = None
        self._granularity_id = None
        self.discriminator = None

        if granularity_type is not None:
            self.granularity_type = granularity_type
        if granularity_id is not None:
            self.granularity_id = granularity_id

    @property
    def granularity_type(self):
        """Gets the granularity_type of this Granularity.  # noqa: E501

        The granularity type for the inventory aggregation level.  # noqa: E501

        :return: The granularity_type of this Granularity.  # noqa: E501
        :rtype: str
        """
        return self._granularity_type

    @granularity_type.setter
    def granularity_type(self, granularity_type):
        """Sets the granularity_type of this Granularity.

        The granularity type for the inventory aggregation level.  # noqa: E501

        :param granularity_type: The granularity_type of this Granularity.  # noqa: E501
        :type: str
        """

        self._granularity_type = granularity_type

    @property
    def granularity_id(self):
        """Gets the granularity_id of this Granularity.  # noqa: E501

        The granularity ID for the specified granularity type. When granularityType is Marketplace, specify the marketplaceId.  # noqa: E501

        :return: The granularity_id of this Granularity.  # noqa: E501
        :rtype: str
        """
        return self._granularity_id

    @granularity_id.setter
    def granularity_id(self, granularity_id):
        """Sets the granularity_id of this Granularity.

        The granularity ID for the specified granularity type. When granularityType is Marketplace, specify the marketplaceId.  # noqa: E501

        :param granularity_id: The granularity_id of this Granularity.  # noqa: E501
        :type: str
        """

        self._granularity_id = granularity_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Granularity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Granularity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Granularity):
            return True

        return self.to_dict() != other.to_dict()
