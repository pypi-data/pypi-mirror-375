# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CreateMarketplaceItemLabelsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'height': 'float',
        'label_type': 'LabelPrintType',
        'locale_code': 'str',
        'marketplace_id': 'str',
        'msku_quantities': 'List[MskuQuantity]',
        'page_type': 'ItemLabelPageType',
        'width': 'float',
    }

    attribute_map = {
        'height': 'height',
        'label_type': 'labelType',
        'locale_code': 'localeCode',
        'marketplace_id': 'marketplaceId',
        'msku_quantities': 'mskuQuantities',
        'page_type': 'pageType',
        'width': 'width',
    }

    def __init__(self, height=None, label_type=None, locale_code=None, marketplace_id=None, msku_quantities=None, page_type=None, width=None, _configuration=None):  # noqa: E501
        """CreateMarketplaceItemLabelsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._height = None
        self._label_type = None
        self._locale_code = None
        self._marketplace_id = None
        self._msku_quantities = None
        self._page_type = None
        self._width = None
        self.discriminator = None

        if height is not None:
            self.height = height
        self.label_type = label_type
        if locale_code is not None:
            self.locale_code = locale_code
        self.marketplace_id = marketplace_id
        self.msku_quantities = msku_quantities
        if page_type is not None:
            self.page_type = page_type
        if width is not None:
            self.width = width

    @property
    def height(self):
        """Gets the height of this CreateMarketplaceItemLabelsRequest.  # noqa: E501

        The height of the item label.  # noqa: E501

        :return: The height of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this CreateMarketplaceItemLabelsRequest.

        The height of the item label.  # noqa: E501

        :param height: The height of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                height is not None and height > 1E+2):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `1E+2`")  # noqa: E501
        if (self._configuration.client_side_validation and
                height is not None and height < 25):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `25`")  # noqa: E501

        self._height = height

    @property
    def label_type(self):
        """Gets the label_type of this CreateMarketplaceItemLabelsRequest.  # noqa: E501


        :return: The label_type of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :rtype: LabelPrintType
        """
        return self._label_type

    @label_type.setter
    def label_type(self, label_type):
        """Sets the label_type of this CreateMarketplaceItemLabelsRequest.


        :param label_type: The label_type of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :type: LabelPrintType
        """
        if self._configuration.client_side_validation and label_type is None:
            raise ValueError("Invalid value for `label_type`, must not be `None`")  # noqa: E501

        self._label_type = label_type

    @property
    def locale_code(self):
        """Gets the locale_code of this CreateMarketplaceItemLabelsRequest.  # noqa: E501

        The locale code constructed from ISO 639 language code and ISO 3166-1 alpha-2 standard of country codes separated by an underscore character.  # noqa: E501

        :return: The locale_code of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale_code

    @locale_code.setter
    def locale_code(self, locale_code):
        """Sets the locale_code of this CreateMarketplaceItemLabelsRequest.

        The locale code constructed from ISO 639 language code and ISO 3166-1 alpha-2 standard of country codes separated by an underscore character.  # noqa: E501

        :param locale_code: The locale_code of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                locale_code is not None and not re.search(r'^[a-z]{2}_[A-Z]{2}$', locale_code)):  # noqa: E501
            raise ValueError(r"Invalid value for `locale_code`, must be a follow pattern or equal to `/^[a-z]{2}_[A-Z]{2}$/`")  # noqa: E501

        self._locale_code = locale_code

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this CreateMarketplaceItemLabelsRequest.  # noqa: E501

        The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).  # noqa: E501

        :return: The marketplace_id of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this CreateMarketplaceItemLabelsRequest.

        The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).  # noqa: E501

        :param marketplace_id: The marketplace_id of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                marketplace_id is not None and len(marketplace_id) > 20):
            raise ValueError("Invalid value for `marketplace_id`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                marketplace_id is not None and len(marketplace_id) < 1):
            raise ValueError("Invalid value for `marketplace_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def msku_quantities(self):
        """Gets the msku_quantities of this CreateMarketplaceItemLabelsRequest.  # noqa: E501

        Represents the quantity of an MSKU to print item labels for.  # noqa: E501

        :return: The msku_quantities of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :rtype: List[MskuQuantity]
        """
        return self._msku_quantities

    @msku_quantities.setter
    def msku_quantities(self, msku_quantities):
        """Sets the msku_quantities of this CreateMarketplaceItemLabelsRequest.

        Represents the quantity of an MSKU to print item labels for.  # noqa: E501

        :param msku_quantities: The msku_quantities of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :type: List[MskuQuantity]
        """
        if self._configuration.client_side_validation and msku_quantities is None:
            raise ValueError("Invalid value for `msku_quantities`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                msku_quantities is not None and len(msku_quantities) > 100):
            raise ValueError("Invalid value for `msku_quantities`, number of items must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                msku_quantities is not None and len(msku_quantities) < 1):
            raise ValueError("Invalid value for `msku_quantities`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._msku_quantities = msku_quantities

    @property
    def page_type(self):
        """Gets the page_type of this CreateMarketplaceItemLabelsRequest.  # noqa: E501


        :return: The page_type of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :rtype: ItemLabelPageType
        """
        return self._page_type

    @page_type.setter
    def page_type(self, page_type):
        """Sets the page_type of this CreateMarketplaceItemLabelsRequest.


        :param page_type: The page_type of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :type: ItemLabelPageType
        """

        self._page_type = page_type

    @property
    def width(self):
        """Gets the width of this CreateMarketplaceItemLabelsRequest.  # noqa: E501

        The width of the item label.  # noqa: E501

        :return: The width of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this CreateMarketplaceItemLabelsRequest.

        The width of the item label.  # noqa: E501

        :param width: The width of this CreateMarketplaceItemLabelsRequest.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                width is not None and width > 1E+2):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `1E+2`")  # noqa: E501
        if (self._configuration.client_side_validation and
                width is not None and width < 25):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `25`")  # noqa: E501

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateMarketplaceItemLabelsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateMarketplaceItemLabelsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateMarketplaceItemLabelsRequest):
            return True

        return self.to_dict() != other.to_dict()
