# coding: utf-8

"""
    Selling Partner API for Orders

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ConfirmShipmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_detail': 'PackageDetail',
        'cod_collection_method': 'str',
        'marketplace_id': 'str',
    }

    attribute_map = {
        'package_detail': 'packageDetail',
        'cod_collection_method': 'codCollectionMethod',
        'marketplace_id': 'marketplaceId',
    }

    def __init__(self, package_detail=None, cod_collection_method=None, marketplace_id=None, _configuration=None):  # noqa: E501
        """ConfirmShipmentRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._package_detail = None
        self._cod_collection_method = None
        self._marketplace_id = None
        self.discriminator = None

        self.package_detail = package_detail
        if cod_collection_method is not None:
            self.cod_collection_method = cod_collection_method
        self.marketplace_id = marketplace_id

    @property
    def package_detail(self):
        """Gets the package_detail of this ConfirmShipmentRequest.  # noqa: E501


        :return: The package_detail of this ConfirmShipmentRequest.  # noqa: E501
        :rtype: PackageDetail
        """
        return self._package_detail

    @package_detail.setter
    def package_detail(self, package_detail):
        """Sets the package_detail of this ConfirmShipmentRequest.


        :param package_detail: The package_detail of this ConfirmShipmentRequest.  # noqa: E501
        :type: PackageDetail
        """
        if self._configuration.client_side_validation and package_detail is None:
            raise ValueError("Invalid value for `package_detail`, must not be `None`")  # noqa: E501

        self._package_detail = package_detail

    @property
    def cod_collection_method(self):
        """Gets the cod_collection_method of this ConfirmShipmentRequest.  # noqa: E501

        The COD collection method (only supported in the JP marketplace).  # noqa: E501

        :return: The cod_collection_method of this ConfirmShipmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._cod_collection_method

    @cod_collection_method.setter
    def cod_collection_method(self, cod_collection_method):
        """Sets the cod_collection_method of this ConfirmShipmentRequest.

        The COD collection method (only supported in the JP marketplace).  # noqa: E501

        :param cod_collection_method: The cod_collection_method of this ConfirmShipmentRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["DirectPayment"]  # noqa: E501
        if (self._configuration.client_side_validation and
                cod_collection_method not in allowed_values):
            raise ValueError(
                "Invalid value for `cod_collection_method` ({0}), must be one of {1}"  # noqa: E501
                .format(cod_collection_method, allowed_values)
            )

        self._cod_collection_method = cod_collection_method

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this ConfirmShipmentRequest.  # noqa: E501

        The unobfuscated marketplace identifier.  # noqa: E501

        :return: The marketplace_id of this ConfirmShipmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this ConfirmShipmentRequest.

        The unobfuscated marketplace identifier.  # noqa: E501

        :param marketplace_id: The marketplace_id of this ConfirmShipmentRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501

        self._marketplace_id = marketplace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfirmShipmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfirmShipmentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfirmShipmentRequest):
            return True

        return self.to_dict() != other.to_dict()
