---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/conditional_exports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
compat_module = _cribo.types.SimpleNamespace(__name__='compat_module', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_244765_compat_module(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """\nModule that mimics requests.compat structure.\nNo __all__ defined, so all non-underscore symbols should be exported.\n"""
    sys = _cribo.sys
    self.sys = sys
    self.sys = sys
    _ver = _cribo.sys.version_info
    self._ver = _ver
    is_py2 = _ver[0] == 2
    self.is_py2 = is_py2
    is_py3 = _ver[0] == 3
    self.is_py3 = is_py3
    has_simplejson = False
    self.has_simplejson = has_simplejson
    try:
        import simplejson as json
        compat_module.json = json
        has_simplejson = True
        compat_module.has_simplejson = has_simplejson
    except ImportError:
        json = _cribo.json
        compat_module.json = json
        self.json = json
    if has_simplejson:
        from simplejson import JSONDecodeError
        compat_module.JSONDecodeError = JSONDecodeError
    else:
        JSONDecodeError = _cribo.json.JSONDecodeError
        compat_module.JSONDecodeError = JSONDecodeError

    def _resolve_char_detection():
        """Find supported character detection libraries."""
        chardet = None
        for lib in ("chardet", "charset_normalizer"):
            if chardet is None:
                try:
                    chardet = __import__(lib)
                except ImportError:
                    pass
        return chardet
    self._resolve_char_detection = _resolve_char_detection
    chardet = _resolve_char_detection()
    self.chardet = chardet
    builtin_str = str
    self.builtin_str = builtin_str
    basestring = str, bytes
    self.basestring = basestring
    _internal_cache = {}
    self._internal_cache = _internal_cache

    def get_encoding_from_headers(headers):
        """Dummy function to test function exports."""
        return "utf-8"
    self.get_encoding_from_headers = get_encoding_from_headers
    self.__initialized__ = True
    self.__initializing__ = False
    return self
compat_module.__init__ = _cribo_init___cribo_244765_compat_module
exceptions_module = _cribo.types.SimpleNamespace(__name__='exceptions_module')
"""Module that uses imports from compat_module (like requests.exceptions)."""
compat_module = compat_module.__init__(compat_module)
CompatJSONDecodeError = compat_module.JSONDecodeError
class BaseError(Exception):
    """Base error class."""
    pass
BaseError.__module__ = 'exceptions_module'
class JSONDecodeError(BaseError, compat_module.JSONDecodeError):
    """JSON decode error that inherits from both base and compat JSONDecodeError."""

    def __init__(self, *args, **kwargs):
        """Initialize with compat JSONDecodeError first."""
        compat_module.JSONDecodeError.__init__(self, *args)
        BaseError.__init__(self, *self.args, **kwargs)
JSONDecodeError.__module__ = 'exceptions_module'
exceptions_module.BaseError = BaseError
exceptions_module.JSONDecodeError = JSONDecodeError
"""Test conditional imports and exports without explicit __all__."""
compat_module = _cribo_init___cribo_244765_compat_module(compat_module)
print("compat_module has JSONDecodeError:", hasattr(compat_module, "JSONDecodeError"))
if hasattr(compat_module, "JSONDecodeError"):
    print("✓ Can access compat_module.JSONDecodeError")
else:
    print("✗ Cannot access compat_module.JSONDecodeError")
try:

    class CustomJSONError(exceptions_module.BaseError, compat_module.JSONDecodeError):
        """Custom JSON error that inherits from both base error and JSONDecodeError."""
        pass
    print("✓ Successfully created class inheriting from compat_module.JSONDecodeError")
except AttributeError as e:
    print(f"✗ Failed to create class: {e}")
expected_exports = ["json", "JSONDecodeError", "builtin_str", "is_py3", "chardet"]
for export in expected_exports:
    if hasattr(compat_module, export):
        print(f"✓ {export} is accessible")
    else:
        print(f"✗ {export} is NOT accessible")
