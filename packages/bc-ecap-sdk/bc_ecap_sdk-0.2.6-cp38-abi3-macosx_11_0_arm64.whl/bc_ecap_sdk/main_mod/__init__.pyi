# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from . import ble
from enum import Enum

class BLEDeviceInfo:
    manufacturer: builtins.str
    model: builtins.str
    serial: builtins.str
    hardware: builtins.str
    firmware: builtins.str

class BandPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    d3: builtins.float
    d4: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    w3: builtins.float
    w4: builtins.float
    def __new__(cls, fs:builtins.float, fl:builtins.float, fu:builtins.float) -> BandPassFilter: ...
    def filter(self, iter:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...
    def apply(self, input:builtins.float) -> builtins.float: ...

class BandStopFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    d3: builtins.float
    d4: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    w3: builtins.float
    w4: builtins.float
    r: builtins.float
    s: builtins.float
    def __new__(cls, fs:builtins.float, fl:builtins.float, fu:builtins.float) -> BandStopFilter: ...
    def filter(self, iter:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...
    def apply(self, input:builtins.float) -> builtins.float: ...

class ECapClient:
    def __new__(cls, addr:builtins.str, port:builtins.int) -> ECapClient: ...
    def start_data_stream(self, py_parser:MessageParser) -> typing.Any: ...
    def send_command(self, msg_id:builtins.int, data:typing.Sequence[builtins.int]) -> typing.Any: ...
    def get_battery_level(self) -> typing.Any: ...
    def get_device_info(self) -> typing.Any: ...
    def start_leadoff_check(self, loop_check:builtins.bool, freq:LeadOffFreq, current:LeadOffCurrent) -> typing.Any: ...
    def stop_leadoff_check(self) -> typing.Any: ...
    def start_eeg_stream(self) -> typing.Any: ...
    def stop_eeg_stream(self) -> typing.Any: ...
    def start_imu_stream(self) -> typing.Any: ...
    def stop_imu_stream(self) -> typing.Any: ...
    def get_eeg_config(self) -> typing.Any: ...
    def get_imu_config(self) -> typing.Any: ...
    def set_eeg_config(self, fs:EegSampleRate, gain:EegSignalGain, signal:EegSignalSource) -> typing.Any: ...
    def set_imu_config(self, fs:ImuSampleRate) -> typing.Any: ...

class HighPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    def __new__(cls, fs:builtins.float, fu:builtins.float) -> HighPassFilter: ...
    def filter(self, iter:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...
    def apply(self, input:builtins.float) -> builtins.float: ...

class LowPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    def __new__(cls, fs:builtins.float, fl:builtins.float) -> LowPassFilter: ...
    def filter(self, iter:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...
    def apply(self, input:builtins.float) -> builtins.float: ...

class MdnsScanResult:
    fullname: builtins.str
    hostname: builtins.str
    addr: builtins.str
    port: builtins.int
    sn: builtins.str
    model: builtins.str

class MessageParser:
    def __new__(cls, device_id:builtins.str, msg_type:MsgType) -> MessageParser: ...
    def receive_data(self, data:typing.Sequence[builtins.int]) -> None: ...

class NotchFilter:
    def __new__(cls, f0:builtins.float, fs:builtins.float, quality:builtins.float) -> NotchFilter: ...
    def apply(self, signal:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...

class PyTcpClient:
    def __new__(cls, addr:builtins.str, port:builtins.int) -> PyTcpClient: ...
    def start_data_stream(self, py_parser:MessageParser) -> typing.Any: ...
    def send_command(self, msg_id:builtins.int, data:typing.Sequence[builtins.int]) -> typing.Any: ...

class PyTcpStream:
    def __aiter__(self) -> PyTcpStream: ...
    def __anext__(self) -> typing.Any: ...

class PyTcpStream:
    def __aiter__(self) -> PyTcpStream: ...
    def __anext__(self) -> typing.Any: ...

class ScanResult:
    id: builtins.str
    name: builtins.str
    rssi: builtins.int
    is_in_pairing_mode: builtins.bool
    battery_level: builtins.int

class SosFilter:
    @staticmethod
    def create_low_pass(order:builtins.int, fs:builtins.float, lowcut:builtins.float) -> SosFilter: ...
    @staticmethod
    def create_high_pass(order:builtins.int, fs:builtins.float, highcut:builtins.float) -> SosFilter: ...
    @staticmethod
    def create_band_pass(order:builtins.int, fs:builtins.float, lowcut:builtins.float, highcut:builtins.float) -> SosFilter: ...
    @staticmethod
    def create_band_stop(order:builtins.int, fs:builtins.float, lowcut:builtins.float, highcut:builtins.float) -> SosFilter: ...
    def apply(self, signal:typing.Sequence[builtins.float]) -> builtins.list[builtins.float]: ...

class AggOperations(Enum):
    Mean = ...
    Median = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> AggOperations: ...

class CentralAdapterState(Enum):
    Unknown = ...
    PoweredOn = ...
    PoweredOff = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> CentralAdapterState: ...

class ConnectionState(Enum):
    Connecting = ...
    Connected = ...
    Disconnecting = ...
    Disconnected = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ConnectionState: ...

class DownsamplingOperations(Enum):
    Mean = ...
    Median = ...
    Max = ...
    Min = ...
    Sum = ...
    First = ...
    Last = ...
    Extremes = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> DownsamplingOperations: ...

class EEGCapModuleId(Enum):
    MCU = ...
    BLE = ...
    APP = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EEGCapModuleId: ...

class EegSampleRate(Enum):
    SR_None = ...
    SR_250Hz = ...
    SR_500Hz = ...
    SR_1000Hz = ...
    SR_2000Hz = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EegSampleRate: ...

class EegSignalGain(Enum):
    GAIN_NONE = ...
    GAIN_1 = ...
    GAIN_2 = ...
    GAIN_4 = ...
    GAIN_6 = ...
    GAIN_8 = ...
    GAIN_12 = ...
    GAIN_24 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EegSignalGain: ...

class EegSignalSource(Enum):
    SIGNAL_NONE = ...
    NORMAL = ...
    SHORTED = ...
    MVDD = ...
    TEST_SIGNAL = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EegSignalSource: ...

class ImuSampleRate(Enum):
    SR_NONE = ...
    SR_50Hz = ...
    SR_100Hz = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ImuSampleRate: ...

class LeadOffChip(Enum):
    None = ...
    Chip1 = ...
    Chip2 = ...
    Chip3 = ...
    Chip4 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> LeadOffChip: ...

class LeadOffCurrent(Enum):
    None = ...
    Cur6nA = ...
    Cur24nA = ...
    Cur6uA = ...
    Cur24uA = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> LeadOffCurrent: ...

class LeadOffFreq(Enum):
    None = ...
    Dc = ...
    Ac7p8hz = ...
    Ac31p2hz = ...
    AcFdr4 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> LeadOffFreq: ...

class LogLevel(Enum):
    Error = ...
    Warn = ...
    Info = ...
    Debug = ...
    Trace = ...

class MsgType(Enum):
    Crimson = ...
    OxyZen = ...
    Mobius = ...
    MobiusV1_5 = ...
    Almond = ...
    AlmondV2 = ...
    Morpheus = ...
    Luna = ...
    REN = ...
    Breeze = ...
    Stark = ...
    EEGCap = ...
    Edu = ...
    Clear = ...
    Melody = ...
    Aura = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> MsgType: ...

class NoiseTypes(Enum):
    FIFTY = ...
    SIXTY = ...
    FIFTY_AND_SIXTY = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> NoiseTypes: ...

class TcpExitReason(Enum):
    Normal = ...
    Disconnected = ...
    Timeout = ...
    ConnectionError = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> TcpExitReason: ...

class WiFiSecurity(Enum):
    SECURITY_NONE = ...
    SECURITY_OPEN = ...
    SECURITY_WPA2_MIXED_PSK = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> WiFiSecurity: ...

def apply_bandpass_filter(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def apply_bandstop_filter(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def apply_downsampling(data:typing.Sequence[builtins.float], window_size:builtins.int, operation:DownsamplingOperations) -> builtins.list[builtins.float]: ...

def apply_eeg_filter(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def apply_eeg_sosfiltfilt(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def apply_highpass_filter(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def apply_impendance_filter(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def apply_impendance_sosfiltfilt(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def apply_lowpass_filter(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def calculate_fft_data(data:typing.Sequence[builtins.float], fs:builtins.float) -> tuple[builtins.list[builtins.float], builtins.list[builtins.float]]: ...

def get_ble_device_info(id:builtins.str) -> typing.Any: ...

def get_wifi_config(id:builtins.str) -> typing.Any: ...

def get_wifi_status(id:builtins.str) -> typing.Any: ...

def parse_eeg_data(data:typing.Sequence[builtins.int], gain:EegSignalGain) -> builtins.list[builtins.float]: ...

def remove_env_noise(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def remove_env_noise_notch(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def remove_env_noise_sosfiltfilt(data:typing.Sequence[builtins.float], channel:builtins.int) -> builtins.list[builtins.float]: ...

def set_ble_device_info(id:builtins.str, model:builtins.str, sn:builtins.str) -> typing.Any: ...

def set_eeg_data_callback(func:typing.Any) -> None: ...

def set_env_noise_cfg(noise_type:NoiseTypes, fs:builtins.float) -> None: ...

def set_imp_data_callback(func:typing.Any) -> None: ...

def set_imu_data_callback(func:typing.Any) -> None: ...

def set_msg_resp_callback(func:typing.Any) -> None: ...

def set_wifi_config(id:builtins.str, enable:builtins.bool, security:WiFiSecurity, ssid:builtins.str, password:builtins.str) -> typing.Any: ...

def start_scan(with_sn:typing.Optional[builtins.str]=None) -> typing.Any: ...

def stop_scan() -> typing.Any: ...

