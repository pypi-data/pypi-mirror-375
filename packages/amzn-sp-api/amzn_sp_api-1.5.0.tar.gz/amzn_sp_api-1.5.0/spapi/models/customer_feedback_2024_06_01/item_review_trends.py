# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ItemReviewTrends(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'positive_topics': 'List[ItemReviewTrend]',
        'negative_topics': 'List[ItemReviewTrend]',
    }

    attribute_map = {
        'positive_topics': 'positiveTopics',
        'negative_topics': 'negativeTopics',
    }

    def __init__(self, positive_topics=None, negative_topics=None, _configuration=None):  # noqa: E501
        """ItemReviewTrends - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._positive_topics = None
        self._negative_topics = None
        self.discriminator = None

        if positive_topics is not None:
            self.positive_topics = positive_topics
        if negative_topics is not None:
            self.negative_topics = negative_topics

    @property
    def positive_topics(self):
        """Gets the positive_topics of this ItemReviewTrends.  # noqa: E501

        A list of the most positive review topics. The percentage of reviews that contain the topic determines the topic's placement in the list. This value is `null` if there are not enough positive reviews for the specified ASIN.  **Max length:** 10  # noqa: E501

        :return: The positive_topics of this ItemReviewTrends.  # noqa: E501
        :rtype: List[ItemReviewTrend]
        """
        return self._positive_topics

    @positive_topics.setter
    def positive_topics(self, positive_topics):
        """Sets the positive_topics of this ItemReviewTrends.

        A list of the most positive review topics. The percentage of reviews that contain the topic determines the topic's placement in the list. This value is `null` if there are not enough positive reviews for the specified ASIN.  **Max length:** 10  # noqa: E501

        :param positive_topics: The positive_topics of this ItemReviewTrends.  # noqa: E501
        :type: List[ItemReviewTrend]
        """
        if (self._configuration.client_side_validation and
                positive_topics is not None and len(positive_topics) > 10):
            raise ValueError("Invalid value for `positive_topics`, number of items must be less than or equal to `10`")  # noqa: E501

        self._positive_topics = positive_topics

    @property
    def negative_topics(self):
        """Gets the negative_topics of this ItemReviewTrends.  # noqa: E501

        A list of the most negative review topics. The percentage of reviews that contain the topic determines the topic's placement in the list. This value is `null` if there are not enough negative reviews for the specified ASIN.  **Max length:** 10  # noqa: E501

        :return: The negative_topics of this ItemReviewTrends.  # noqa: E501
        :rtype: List[ItemReviewTrend]
        """
        return self._negative_topics

    @negative_topics.setter
    def negative_topics(self, negative_topics):
        """Sets the negative_topics of this ItemReviewTrends.

        A list of the most negative review topics. The percentage of reviews that contain the topic determines the topic's placement in the list. This value is `null` if there are not enough negative reviews for the specified ASIN.  **Max length:** 10  # noqa: E501

        :param negative_topics: The negative_topics of this ItemReviewTrends.  # noqa: E501
        :type: List[ItemReviewTrend]
        """
        if (self._configuration.client_side_validation and
                negative_topics is not None and len(negative_topics) > 10):
            raise ValueError("Invalid value for `negative_topics`, number of items must be less than or equal to `10`")  # noqa: E501

        self._negative_topics = negative_topics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemReviewTrends, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemReviewTrends):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemReviewTrends):
            return True

        return self.to_dict() != other.to_dict()
