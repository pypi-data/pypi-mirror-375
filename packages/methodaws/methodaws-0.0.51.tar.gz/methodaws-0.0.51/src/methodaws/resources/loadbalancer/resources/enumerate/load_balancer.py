# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
from .load_balancer_version import LoadBalancerVersion
import typing
from .load_balancer_type import LoadBalancerType
import pydantic
import datetime as dt
from .listener import Listener
from .ip_address_type import IpAddressType
from .load_balancer_state import LoadBalancerState
from .target_group import TargetGroup
from .target import Target
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class LoadBalancer(UniversalBaseModel):
    version: LoadBalancerVersion
    load_balancer_type: typing.Optional[LoadBalancerType] = pydantic.Field(alias="loadBalancerType", default=None)
    name: str
    region: str
    created_time: typing.Optional[dt.datetime] = pydantic.Field(alias="createdTime", default=None)
    dns_name: typing.Optional[str] = pydantic.Field(alias="dnsName", default=None)
    security_group_ids: typing.Optional[typing.List[str]] = pydantic.Field(alias="securityGroupIds", default=None)
    vpc_id: typing.Optional[str] = pydantic.Field(alias="vpcId", default=None)
    subnet_ids: typing.Optional[typing.List[str]] = pydantic.Field(alias="subnetIds", default=None)
    hosted_zone_id: typing.Optional[str] = pydantic.Field(alias="hostedZoneId", default=None)
    listeners: typing.Optional[typing.List[Listener]] = None
    arn: typing.Optional[str] = None
    ip_address_type: typing.Optional[IpAddressType] = pydantic.Field(alias="ipAddressType", default=None)
    state: typing.Optional[LoadBalancerState] = None
    target_groups: typing.Optional[typing.List[TargetGroup]] = pydantic.Field(alias="targetGroups", default=None)
    targets: typing.Optional[typing.List[Target]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
