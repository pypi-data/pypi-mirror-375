"""
Settings and Configuration Management for Terra Command AI

This module handles all configuration-related functionality including
environment variable management, API key handling, and user preferences.
"""

import os
from pathlib import Path
from typing import Optional, Dict, Any



class Settings:
    """
    Centralized settings management for Terra Command AI.

    This class handles loading, saving, and managing all configuration
    options including API keys, model preferences, and user settings.
    """

    # Default configuration values
    DEFAULT_CONFIG = {
        'openai_model': 'gpt-4',
        'max_tokens': 100,
        'temperature': 0.1,
        'timeout': 30,
        'verbose': False,
        'auto_setup': False,
    }

    def __init__(self, config_file: Optional[str] = None):
        """
        Initialize settings with optional config file path.

        Args:
            config_file: Path to configuration file (optional)
        """
        self.config_file = config_file or self._get_default_config_path()
        self._config = self.DEFAULT_CONFIG.copy()
        self._load_config()

    def _get_default_config_path(self) -> str:
        """Get the default configuration file path."""
        # Use a hidden config file in the user's home directory
        config_dir = Path.home() / '.config' / 'terra-ai'
        config_dir.mkdir(parents=True, exist_ok=True)
        return str(config_dir / 'config')

    def _load_config(self) -> None:
        """Load configuration from config file."""
        config_path = Path(self.config_file)

        # Load from config file if it exists
        if config_path.exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            if '=' in line:
                                key, value = line.split('=', 1)
                                key = key.strip().lower()
                                value = value.strip()

                                # Convert string values to appropriate types
                                if value.lower() in ('true', 'false'):
                                    value = value.lower() == 'true'
                                elif value.isdigit():
                                    value = int(value)
                                elif value.replace('.', '').isdigit():
                                    value = float(value)

                                self._config[key] = value
            except Exception as e:
                # If config file is corrupted, use defaults
                print(f"Warning: Could not load config file: {e}")
                pass

    def get(self, key: str, default: Any = None) -> Any:
        """
        Get a configuration value.

        Args:
            key: Configuration key
            default: Default value if key not found

        Returns:
            Configuration value or default
        """
        return self._config.get(key, default)

    def set(self, key: str, value: Any) -> None:
        """
        Set a configuration value.

        Args:
            key: Configuration key
            value: Value to set
        """
        self._config[key] = value

    def save(self) -> bool:
        """
        Save configuration to file.

        Returns:
            bool: True if saved successfully, False otherwise
        """
        try:
            config_path = Path(self.config_file)
            config_path.parent.mkdir(parents=True, exist_ok=True)

            with open(config_path, 'w', encoding='utf-8') as f:
                f.write("# Terra Command AI Configuration File\n")
                f.write("# This file contains your Terra Command AI settings\n")
                f.write("# Do not edit this file manually - use 'tai --setup-ai' instead\n\n")

                for key, value in self._config.items():
                    if value is not None:
                        f.write(f"{key}={value}\n")

            return True
        except Exception:
            return False

    def get_openai_api_key(self) -> Optional[str]:
        """
        Get OpenAI API key.

        Returns:
            Optional[str]: API key if available
        """
        return self.get('openai_api_key')

    def set_openai_api_key(self, api_key: str) -> None:
        """
        Set OpenAI API key.

        Args:
            api_key: OpenAI API key
        """
        self.set('openai_api_key', api_key)

    def is_ai_enabled(self) -> bool:
        """
        Check if AI functionality is enabled.

        Returns:
            bool: True if API key is available
        """
        return self.get_openai_api_key() is not None

    def get_ai_config(self) -> Dict[str, Any]:
        """
        Get AI-related configuration.

        Returns:
            Dict[str, Any]: AI configuration dictionary
        """
        return {
            'api_key': self.get_openai_api_key(),
            'model': self.get('openai_model'),
            'max_tokens': self.get('max_tokens'),
            'temperature': self.get('temperature'),
            'timeout': self.get('timeout'),
        }

    def to_dict(self) -> Dict[str, Any]:
        """
        Convert settings to dictionary.

        Returns:
            Dict[str, Any]: Settings as dictionary
        """
        return self._config.copy()

    def reset_to_defaults(self) -> None:
        """Reset all settings to default values."""
        self._config = self.DEFAULT_CONFIG.copy()
