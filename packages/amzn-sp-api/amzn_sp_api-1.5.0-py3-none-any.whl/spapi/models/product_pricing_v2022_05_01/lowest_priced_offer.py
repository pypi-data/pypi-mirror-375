# coding: utf-8

"""
    Selling Partner API for Pricing

    The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

    The version of the OpenAPI document: 2022-05-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class LowestPricedOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lowest_priced_offers_input': 'LowestPricedOffersInput',
        'offers': 'List[Offer]',
    }

    attribute_map = {
        'lowest_priced_offers_input': 'lowestPricedOffersInput',
        'offers': 'offers',
    }

    def __init__(self, lowest_priced_offers_input=None, offers=None, _configuration=None):  # noqa: E501
        """LowestPricedOffer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._lowest_priced_offers_input = None
        self._offers = None
        self.discriminator = None

        self.lowest_priced_offers_input = lowest_priced_offers_input
        self.offers = offers

    @property
    def lowest_priced_offers_input(self):
        """Gets the lowest_priced_offers_input of this LowestPricedOffer.  # noqa: E501


        :return: The lowest_priced_offers_input of this LowestPricedOffer.  # noqa: E501
        :rtype: LowestPricedOffersInput
        """
        return self._lowest_priced_offers_input

    @lowest_priced_offers_input.setter
    def lowest_priced_offers_input(self, lowest_priced_offers_input):
        """Sets the lowest_priced_offers_input of this LowestPricedOffer.


        :param lowest_priced_offers_input: The lowest_priced_offers_input of this LowestPricedOffer.  # noqa: E501
        :type: LowestPricedOffersInput
        """
        if self._configuration.client_side_validation and lowest_priced_offers_input is None:
            raise ValueError("Invalid value for `lowest_priced_offers_input`, must not be `None`")  # noqa: E501

        self._lowest_priced_offers_input = lowest_priced_offers_input

    @property
    def offers(self):
        """Gets the offers of this LowestPricedOffer.  # noqa: E501

        A list of up to 20 lowest priced offers that match the criteria specified in `lowestPricedOffersInput`.  # noqa: E501

        :return: The offers of this LowestPricedOffer.  # noqa: E501
        :rtype: List[Offer]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this LowestPricedOffer.

        A list of up to 20 lowest priced offers that match the criteria specified in `lowestPricedOffersInput`.  # noqa: E501

        :param offers: The offers of this LowestPricedOffer.  # noqa: E501
        :type: List[Offer]
        """
        if self._configuration.client_side_validation and offers is None:
            raise ValueError("Invalid value for `offers`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                offers is not None and len(offers) > 20):
            raise ValueError("Invalid value for `offers`, number of items must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                offers is not None and len(offers) < 1):
            raise ValueError("Invalid value for `offers`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._offers = offers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LowestPricedOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LowestPricedOffer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LowestPricedOffer):
            return True

        return self.to_dict() != other.to_dict()
