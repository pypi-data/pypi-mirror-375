# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class NdrRequestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reschedule_date': 'datetime',
        'additional_address_notes': 'str',
    }

    attribute_map = {
        'reschedule_date': 'rescheduleDate',
        'additional_address_notes': 'additionalAddressNotes',
    }

    def __init__(self, reschedule_date=None, additional_address_notes=None, _configuration=None):  # noqa: E501
        """NdrRequestData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._reschedule_date = None
        self._additional_address_notes = None
        self.discriminator = None

        if reschedule_date is not None:
            self.reschedule_date = reschedule_date
        if additional_address_notes is not None:
            self.additional_address_notes = additional_address_notes

    @property
    def reschedule_date(self):
        """Gets the reschedule_date of this NdrRequestData.  # noqa: E501

        The date on which the Seller wants to reschedule shipment delivery, in ISO-8601 date/time format  # noqa: E501

        :return: The reschedule_date of this NdrRequestData.  # noqa: E501
        :rtype: datetime
        """
        return self._reschedule_date

    @reschedule_date.setter
    def reschedule_date(self, reschedule_date):
        """Sets the reschedule_date of this NdrRequestData.

        The date on which the Seller wants to reschedule shipment delivery, in ISO-8601 date/time format  # noqa: E501

        :param reschedule_date: The reschedule_date of this NdrRequestData.  # noqa: E501
        :type: datetime
        """

        self._reschedule_date = reschedule_date

    @property
    def additional_address_notes(self):
        """Gets the additional_address_notes of this NdrRequestData.  # noqa: E501

        Address notes to re-attempt delivery with.  # noqa: E501

        :return: The additional_address_notes of this NdrRequestData.  # noqa: E501
        :rtype: str
        """
        return self._additional_address_notes

    @additional_address_notes.setter
    def additional_address_notes(self, additional_address_notes):
        """Sets the additional_address_notes of this NdrRequestData.

        Address notes to re-attempt delivery with.  # noqa: E501

        :param additional_address_notes: The additional_address_notes of this NdrRequestData.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                additional_address_notes is not None and len(additional_address_notes) > 256):
            raise ValueError("Invalid value for `additional_address_notes`, length must be less than or equal to `256`")  # noqa: E501

        self._additional_address_notes = additional_address_notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NdrRequestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NdrRequestData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NdrRequestData):
            return True

        return self.to_dict() != other.to_dict()
