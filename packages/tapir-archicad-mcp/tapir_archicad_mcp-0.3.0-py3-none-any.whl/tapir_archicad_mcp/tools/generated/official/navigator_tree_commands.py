# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch

from multiconn_archicad.models.official.commands import (
    DeleteNavigatorItemsParameters,
DeleteNavigatorItemsResult,
GetBuiltInContainerNavigatorItemsParameters,
GetBuiltInContainerNavigatorItemsResult,
GetDetailNavigatorItemsParameters,
GetDetailNavigatorItemsResult,
GetDocument3DNavigatorItemsParameters,
GetDocument3DNavigatorItemsResult,
GetElevationNavigatorItemsParameters,
GetElevationNavigatorItemsResult,
GetInteriorElevationNavigatorItemsParameters,
GetInteriorElevationNavigatorItemsResult,
GetNavigatorItemTreeParameters,
GetNavigatorItemTreeResult,
GetNavigatorItemsTypeParameters,
GetNavigatorItemsTypeResult,
GetPublisherSetNamesResult,
GetSectionNavigatorItemsParameters,
GetSectionNavigatorItemsResult,
GetStoryNavigatorItemsParameters,
GetStoryNavigatorItemsResult,
GetWorksheetNavigatorItemsParameters,
GetWorksheetNavigatorItemsResult,
MoveNavigatorItemParameters,
RenameNavigatorItemParameters
)


log = logging.getLogger()

def delete_navigator_items(port: int, params: DeleteNavigatorItemsParameters) -> DeleteNavigatorItemsResult:
    """
    Deletes items from navigator tree.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.DeleteNavigatorItems",
            parameters=params.model_dump(mode='json')
        )
        return DeleteNavigatorItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for DeleteNavigatorItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing DeleteNavigatorItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    delete_navigator_items,
    name="navigator_delete_navigator_items",
    title="DeleteNavigatorItems",
    description="Deletes items from navigator tree.",
    params_model=DeleteNavigatorItemsParameters,
    result_model=DeleteNavigatorItemsResult
)


def get_built_in_container_navigator_items(port: int, params: GetBuiltInContainerNavigatorItemsParameters) -> GetBuiltInContainerNavigatorItemsResult:
    """
    Returns the details of the built-in container navigator items identified by their Ids.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetBuiltInContainerNavigatorItems",
            parameters=params.model_dump(mode='json')
        )
        return GetBuiltInContainerNavigatorItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetBuiltInContainerNavigatorItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetBuiltInContainerNavigatorItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_built_in_container_navigator_items,
    name="navigator_get_built_in_container_navigator_items",
    title="GetBuiltInContainerNavigatorItems",
    description="Returns the details of the built-in container navigator items identified by their Ids.",
    params_model=GetBuiltInContainerNavigatorItemsParameters,
    result_model=GetBuiltInContainerNavigatorItemsResult
)


def get_detail_navigator_items(port: int, params: GetDetailNavigatorItemsParameters) -> GetDetailNavigatorItemsResult:
    """
    Returns the details of the detail navigator items identified by their Ids.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetDetailNavigatorItems",
            parameters=params.model_dump(mode='json')
        )
        return GetDetailNavigatorItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetDetailNavigatorItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetDetailNavigatorItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_detail_navigator_items,
    name="navigator_get_detail_navigator_items",
    title="GetDetailNavigatorItems",
    description="Returns the details of the detail navigator items identified by their Ids.",
    params_model=GetDetailNavigatorItemsParameters,
    result_model=GetDetailNavigatorItemsResult
)


def get_document3_d_navigator_items(port: int, params: GetDocument3DNavigatorItemsParameters) -> GetDocument3DNavigatorItemsResult:
    """
    Returns the details of the 3D document navigator items identified by their Ids.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetDocument3DNavigatorItems",
            parameters=params.model_dump(mode='json')
        )
        return GetDocument3DNavigatorItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetDocument3DNavigatorItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetDocument3DNavigatorItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_document3_d_navigator_items,
    name="navigator_get_document3_d_navigator_items",
    title="GetDocument3DNavigatorItems",
    description="Returns the details of the 3D document navigator items identified by their Ids.",
    params_model=GetDocument3DNavigatorItemsParameters,
    result_model=GetDocument3DNavigatorItemsResult
)


def get_elevation_navigator_items(port: int, params: GetElevationNavigatorItemsParameters) -> GetElevationNavigatorItemsResult:
    """
    Returns the detailed elevation navigator items identified by their Ids.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetElevationNavigatorItems",
            parameters=params.model_dump(mode='json')
        )
        return GetElevationNavigatorItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetElevationNavigatorItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetElevationNavigatorItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_elevation_navigator_items,
    name="navigator_get_elevation_navigator_items",
    title="GetElevationNavigatorItems",
    description="Returns the detailed elevation navigator items identified by their Ids.",
    params_model=GetElevationNavigatorItemsParameters,
    result_model=GetElevationNavigatorItemsResult
)


def get_interior_elevation_navigator_items(port: int, params: GetInteriorElevationNavigatorItemsParameters) -> GetInteriorElevationNavigatorItemsResult:
    """
    Returns the details of the interior elevation navigator items identified by their Ids.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetInteriorElevationNavigatorItems",
            parameters=params.model_dump(mode='json')
        )
        return GetInteriorElevationNavigatorItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetInteriorElevationNavigatorItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetInteriorElevationNavigatorItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_interior_elevation_navigator_items,
    name="navigator_get_interior_elevation_navigator_items",
    title="GetInteriorElevationNavigatorItems",
    description="Returns the details of the interior elevation navigator items identified by their Ids.",
    params_model=GetInteriorElevationNavigatorItemsParameters,
    result_model=GetInteriorElevationNavigatorItemsResult
)


def get_navigator_item_tree(port: int, params: GetNavigatorItemTreeParameters) -> GetNavigatorItemTreeResult:
    """
    Returns the tree of navigator items.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetNavigatorItemTree",
            parameters=params.model_dump(mode='json')
        )
        return GetNavigatorItemTreeResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetNavigatorItemTree result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetNavigatorItemTree on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_navigator_item_tree,
    name="navigator_get_navigator_item_tree",
    title="GetNavigatorItemTree",
    description="Returns the tree of navigator items.",
    params_model=GetNavigatorItemTreeParameters,
    result_model=GetNavigatorItemTreeResult
)


def get_navigator_items_type(port: int, params: GetNavigatorItemsTypeParameters) -> GetNavigatorItemsTypeResult:
    """
    Returns all navigator item types based on the navigator item identifiers given. An error is returned for each identifier that is not found.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetNavigatorItemsType",
            parameters=params.model_dump(mode='json')
        )
        return GetNavigatorItemsTypeResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetNavigatorItemsType result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetNavigatorItemsType on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_navigator_items_type,
    name="navigator_get_navigator_items_type",
    title="GetNavigatorItemsType",
    description="Returns all navigator item types based on the navigator item identifiers given. An error is returned for each identifier that is not found.",
    params_model=GetNavigatorItemsTypeParameters,
    result_model=GetNavigatorItemsTypeResult
)


def get_publisher_set_names(port: int) -> GetPublisherSetNamesResult:
    """
    Returns the names of available publisher sets.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetPublisherSetNames",
            parameters={}
        )
        return GetPublisherSetNamesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetPublisherSetNames result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetPublisherSetNames on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_publisher_set_names,
    name="navigator_get_publisher_set_names",
    title="GetPublisherSetNames",
    description="Returns the names of available publisher sets.",
    params_model=None,
    result_model=GetPublisherSetNamesResult
)


def get_section_navigator_items(port: int, params: GetSectionNavigatorItemsParameters) -> GetSectionNavigatorItemsResult:
    """
    Returns the details of the section navigator items identified by their Ids.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetSectionNavigatorItems",
            parameters=params.model_dump(mode='json')
        )
        return GetSectionNavigatorItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetSectionNavigatorItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetSectionNavigatorItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_section_navigator_items,
    name="navigator_get_section_navigator_items",
    title="GetSectionNavigatorItems",
    description="Returns the details of the section navigator items identified by their Ids.",
    params_model=GetSectionNavigatorItemsParameters,
    result_model=GetSectionNavigatorItemsResult
)


def get_story_navigator_items(port: int, params: GetStoryNavigatorItemsParameters) -> GetStoryNavigatorItemsResult:
    """
    Returns the details of the story navigator items identified by their Ids.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetStoryNavigatorItems",
            parameters=params.model_dump(mode='json')
        )
        return GetStoryNavigatorItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetStoryNavigatorItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetStoryNavigatorItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_story_navigator_items,
    name="navigator_get_story_navigator_items",
    title="GetStoryNavigatorItems",
    description="Returns the details of the story navigator items identified by their Ids.",
    params_model=GetStoryNavigatorItemsParameters,
    result_model=GetStoryNavigatorItemsResult
)


def get_worksheet_navigator_items(port: int, params: GetWorksheetNavigatorItemsParameters) -> GetWorksheetNavigatorItemsResult:
    """
    Returns the details of the worksheet navigator items identified by their Ids.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetWorksheetNavigatorItems",
            parameters=params.model_dump(mode='json')
        )
        return GetWorksheetNavigatorItemsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetWorksheetNavigatorItems result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetWorksheetNavigatorItems on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_worksheet_navigator_items,
    name="navigator_get_worksheet_navigator_items",
    title="GetWorksheetNavigatorItems",
    description="Returns the details of the worksheet navigator items identified by their Ids.",
    params_model=GetWorksheetNavigatorItemsParameters,
    result_model=GetWorksheetNavigatorItemsResult
)


def move_navigator_item(port: int, params: MoveNavigatorItemParameters) -> None:
    """
    Moves the given navigator item under the <i>parentNavigatorItemId</i> in the navigator tree. If <i>previousNavigatorItemId</i> is not given then inserts it at the first place under the new parent. If it is given then inserts it after this navigator item.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_command(
            command="API.MoveNavigatorItem",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for MoveNavigatorItem result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing MoveNavigatorItem on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    move_navigator_item,
    name="navigator_move_navigator_item",
    title="MoveNavigatorItem",
    description="Moves the given navigator item under the <i>parentNavigatorItemId</i> in the navigator tree. If <i>previousNavigatorItemId</i> is not given then inserts it at the first place under the new parent. If it is given then inserts it after this navigator item.",
    params_model=MoveNavigatorItemParameters,
    result_model=None
)


def rename_navigator_item(port: int, params: RenameNavigatorItemParameters) -> None:
    """
    Renames an existing navigator item by specifying either the name or the ID, or both.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_command(
            command="API.RenameNavigatorItem",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for RenameNavigatorItem result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing RenameNavigatorItem on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    rename_navigator_item,
    name="navigator_rename_navigator_item",
    title="RenameNavigatorItem",
    description="Renames an existing navigator item by specifying either the name or the ID, or both.",
    params_model=RenameNavigatorItemParameters,
    result_model=None
)
