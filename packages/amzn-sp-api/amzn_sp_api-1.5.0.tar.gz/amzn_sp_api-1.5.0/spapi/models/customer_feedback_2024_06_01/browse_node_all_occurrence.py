# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class BrowseNodeAllOccurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'top_twenty_five_percent_products': 'float',
        'all_products': 'float',
    }

    attribute_map = {
        'top_twenty_five_percent_products': 'topTwentyFivePercentProducts',
        'all_products': 'allProducts',
    }

    def __init__(self, top_twenty_five_percent_products=None, all_products=None, _configuration=None):  # noqa: E501
        """BrowseNodeAllOccurrence - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._top_twenty_five_percent_products = None
        self._all_products = None
        self.discriminator = None

        self.top_twenty_five_percent_products = top_twenty_five_percent_products
        self.all_products = all_products

    @property
    def top_twenty_five_percent_products(self):
        """Gets the top_twenty_five_percent_products of this BrowseNodeAllOccurrence.  # noqa: E501

        The percentage of reviews of the top 25 percent of products in the browse node that mention the topic.  # noqa: E501

        :return: The top_twenty_five_percent_products of this BrowseNodeAllOccurrence.  # noqa: E501
        :rtype: float
        """
        return self._top_twenty_five_percent_products

    @top_twenty_five_percent_products.setter
    def top_twenty_five_percent_products(self, top_twenty_five_percent_products):
        """Sets the top_twenty_five_percent_products of this BrowseNodeAllOccurrence.

        The percentage of reviews of the top 25 percent of products in the browse node that mention the topic.  # noqa: E501

        :param top_twenty_five_percent_products: The top_twenty_five_percent_products of this BrowseNodeAllOccurrence.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and top_twenty_five_percent_products is None:
            raise ValueError("Invalid value for `top_twenty_five_percent_products`, must not be `None`")  # noqa: E501

        self._top_twenty_five_percent_products = top_twenty_five_percent_products

    @property
    def all_products(self):
        """Gets the all_products of this BrowseNodeAllOccurrence.  # noqa: E501

        The percentage of reviews of products in the browse node that mention the topic.  # noqa: E501

        :return: The all_products of this BrowseNodeAllOccurrence.  # noqa: E501
        :rtype: float
        """
        return self._all_products

    @all_products.setter
    def all_products(self, all_products):
        """Sets the all_products of this BrowseNodeAllOccurrence.

        The percentage of reviews of products in the browse node that mention the topic.  # noqa: E501

        :param all_products: The all_products of this BrowseNodeAllOccurrence.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and all_products is None:
            raise ValueError("Invalid value for `all_products`, must not be `None`")  # noqa: E501

        self._all_products = all_products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrowseNodeAllOccurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrowseNodeAllOccurrence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrowseNodeAllOccurrence):
            return True

        return self.to_dict() != other.to_dict()
