"""Document types for agent file outputs with path tracking."""

from typing import List, Optional, Any
from pydantic import BaseModel, Field
import os


class DocumentT(BaseModel):
    """A document with path and explanation"""
    path: str = Field(description="File path of the generated document (relative to working directory)")
    explanation: str = Field(description="Explanation of what the document contains")
    absolute_path: Optional[str] = Field(default=None, description="Absolute file path (resolved via document_finder)")

    def model_post_init(self, __context: Optional[dict[str, Any]]) -> None:
        """Post-init hook to resolve absolute path using context."""
        if self.absolute_path is None:
            # Try to get document_finder from validation context
            if isinstance(__context, dict) and 'document_finder' in __context:
                document_finder = __context['document_finder']
                self.absolute_path = document_finder(self.path)
            elif not os.path.isabs(self.path):
                # Fallback: use current working directory
                self.absolute_path = os.path.abspath(self.path)
            else:
                self.absolute_path = self.path


class DocumentsT(BaseModel):
    """Collection of documents generated by an agent"""
    documents: List[DocumentT] = Field(description="List of documents generated")