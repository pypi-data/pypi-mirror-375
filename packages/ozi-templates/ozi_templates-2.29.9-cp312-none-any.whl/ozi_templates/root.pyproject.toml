{#- OZI
# ozi/templates/root.pyproject.toml
# SPDX-License-Identifier: MIT-0
-#}
[build-system]
requires = [
{%- for requires in spec.python.build.requires.values() %}
{%- set r = requires -%}
{%- if project.enable_uv %}
{%- set r = r|replace('OZI.build[', 'OZI.build[uv,')%}
{%- else %}
{%- set r = r|replace('OZI.build[', 'OZI.build[pip,')%}
{%- endif %}
{%- if project.enable_cython %}
{%- set r = r|replace('OZI.build[', 'OZI.build[cython,')%}
{%- endif %}
    "{{ r }}",
{%- endfor %}
]
build-backend = "{{ spec.python.build.backend }}"

[project]
name="{{ project.name }}"
version="0.0"
{%- if project.author|length %}
authors=[
{%- for name, email in project.author|zip_longest(project.author_email) %}
    { {%- if name %}name="{{ name }}", {% endif %}{% if email %}email="{{ email }}"{% endif -%} },
{%- endfor %}
]
{%- endif %}
classifiers=[
{%- if project.license == 'Private' %}
    "Private :: Do Not Upload",
{%- endif %}
{%- for status in project.status %}
    "Development Status :: {{ status }}",
{%- endfor %}
    "Programming Language :: Python :: {{ spec.python.support.major }} :: Only",
    "Programming Language :: Python :: {{ spec.python.support.security2 }}",
    "Programming Language :: Python :: {{ spec.python.support.security1 }}",
    "Programming Language :: Python :: {{ spec.python.support.bugfix }}",
{%- for implementation in spec.python.support.implementations %}
    "Programming Language :: Python :: Implementation :: {{ implementation }}",
{%- endfor %}
{%- for audience in project.audience %}
    "Intended Audience :: {{ audience }}",
{%- endfor %}
{%- for language in project.language %}
    "Natural Language :: {{ language }}",
{%- endfor %}
{%- for topic in project.topic %}
    "Topic :: {{ topic }}",
{%- endfor %}
{%- for typing in project.typing %}
    "Typing :: {{ typing }}",
{%- endfor %}
{%- for framework in project.framework %}
    "Framework :: {{ framework }}",
{%- endfor %}
{%- for environment in project.environment %}
    "Environment :: {{ environment }}",
{%- endfor %}
]
description="{{ project.summary }}"
{%- if project.dist_requires|length %}
dependencies = [
{%- for req in project.dist_requires %}
    '{{ req }}',
{%- endfor %}
]
{%- endif %}
{%- if project.keywords|length %}
keywords="{{ project.keywords|join(',') }}"
{%- endif %}
{%- if project.maintainer|length %}
maintainers=[
{%- for name, email in project.maintainer|zip_longest(project.maintainer_email) %}
    { {%- if name %}name="{{ name }}", {% endif %}{% if email %}email="{{ email }}"{% endif -%} },
{%- endfor %}
]
{%- endif %}
readme="README.{{ project.long_description_content_type }}"

[project.optional-dependencies] # also meson test suite names
# OZI Packaging Dependencies
# continuous integration
ci = [
{%- for pkg in spec.python.ci.backend.values() %}
    "{{ pkg }}",
{%- endfor %}
]
# tox -e fix
fix  = ["black>=24.3", "autoflake", "isort"]
# Default meson test setup
{%- for suite in spec.python.ci.github.checkpoint.suites %}
{{ suite }} = [
{%- for utility in spec.python.get(suite).utility.values() %}
    "{{ utility }}",
{%- endfor %}
{%- for plugin in spec.python.get(suite).plugin.values() %}
    "{{ plugin }}",
{%- endfor %}
]
{%- endfor %}

{%- if project.project_url|length %}
[project.urls]
{%- for project_url in project.project_url %}
{%- set label, url = project_url.split(',') %}
"{{ label|trim }}"="{{ url|trim }}"
{%- endfor %}
{%- endif %}

{%- if project.obsoletes or project.provides or project.requires_external %}
[tool.ozi-build.metadata]
{%- if project.obsoletes|length %}
obsoletes=[
{%- for req in project.obsoletes %}
    '{{ req }}',
{%- endfor %}
]
{%- endif %}
{%- if project.provides|length %}
provides=[
{%- for req in project.provides %}
    '{{ req }}',
{%- endfor %}
]
{%- endif %}
{%- if project.requires_external|length %}
requires-external=[
{%- for req in project.requires_external %}
    '{{ req }}',
{%- endfor %}
]
{%- endif %}
{%- endif %}