# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .activity_stream_mode import ActivityStreamMode
from .activity_stream_status import ActivityStreamStatus
from .db_instance_role import DbInstanceRole
from .automation_mode import AutomationMode
from .certificate_details import CertificateDetails
from .db_instance_automated_backups_replication import DbInstanceAutomatedBackupsReplication
from .db_parameter_group_status import DbParameterGroupStatus
from .db_security_group_membership import DbSecurityGroupMembership
from .db_subnet_group import DbSubnetGroup
from .database_insights_mode import DatabaseInsightsMode
from .domain_membership import DomainMembership
from .endpoint import Endpoint
from .master_user_secret import MasterUserSecret
from .option_group_membership import OptionGroupMembership
from .pending_modified_values import PendingModifiedValues
from .processor_feature import ProcessorFeature
from .replica_mode import ReplicaMode
from .db_instance_status_info import DbInstanceStatusInfo
from .tag import Tag
from .vpc_security_group_membership import VpcSecurityGroupMembership
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class DbInstance(UniversalBaseModel):
    activity_stream_engine_native_audit_fields_included: typing.Optional[bool] = pydantic.Field(
        alias="activityStreamEngineNativeAuditFieldsIncluded", default=None
    )
    activity_stream_kinesis_stream_name: typing.Optional[str] = pydantic.Field(
        alias="activityStreamKinesisStreamName", default=None
    )
    activity_stream_kms_key_id: typing.Optional[str] = pydantic.Field(alias="activityStreamKmsKeyId", default=None)
    activity_stream_mode: typing.Optional[ActivityStreamMode] = pydantic.Field(alias="activityStreamMode", default=None)
    activity_stream_status: typing.Optional[ActivityStreamStatus] = pydantic.Field(
        alias="activityStreamStatus", default=None
    )
    allocated_storage: typing.Optional[int] = pydantic.Field(alias="allocatedStorage", default=None)
    associated_roles: typing.Optional[typing.List[DbInstanceRole]] = pydantic.Field(
        alias="associatedRoles", default=None
    )
    auto_minor_version_upgrade: typing.Optional[bool] = pydantic.Field(alias="autoMinorVersionUpgrade", default=None)
    automatic_restart_time: typing.Optional[str] = pydantic.Field(alias="automaticRestartTime", default=None)
    automation_mode: typing.Optional[AutomationMode] = pydantic.Field(alias="automationMode", default=None)
    availability_zone: typing.Optional[str] = pydantic.Field(alias="availabilityZone", default=None)
    aws_backup_recovery_point_arn: typing.Optional[str] = pydantic.Field(
        alias="awsBackupRecoveryPointArn", default=None
    )
    backup_retention_period: typing.Optional[int] = pydantic.Field(alias="backupRetentionPeriod", default=None)
    backup_target: typing.Optional[str] = pydantic.Field(alias="backupTarget", default=None)
    ca_certificate_identifier: typing.Optional[str] = pydantic.Field(alias="caCertificateIdentifier", default=None)
    certificate_details: typing.Optional[CertificateDetails] = pydantic.Field(alias="certificateDetails", default=None)
    character_set_name: typing.Optional[str] = pydantic.Field(alias="characterSetName", default=None)
    copy_tags_to_snapshot: typing.Optional[bool] = pydantic.Field(alias="copyTagsToSnapshot", default=None)
    custom_iam_instance_profile: typing.Optional[str] = pydantic.Field(alias="customIamInstanceProfile", default=None)
    customer_owned_ip_enabled: typing.Optional[bool] = pydantic.Field(alias="customerOwnedIpEnabled", default=None)
    db_cluster_identifier: typing.Optional[str] = pydantic.Field(alias="dbClusterIdentifier", default=None)
    db_instance_arn: typing.Optional[str] = pydantic.Field(alias="dbInstanceArn", default=None)
    db_instance_automated_backups_replications: typing.Optional[typing.List[DbInstanceAutomatedBackupsReplication]] = (
        pydantic.Field(alias="dbInstanceAutomatedBackupsReplications", default=None)
    )
    db_instance_class: typing.Optional[str] = pydantic.Field(alias="dbInstanceClass", default=None)
    db_instance_identifier: typing.Optional[str] = pydantic.Field(alias="dbInstanceIdentifier", default=None)
    db_instance_status: typing.Optional[str] = pydantic.Field(alias="dbInstanceStatus", default=None)
    db_name: typing.Optional[str] = pydantic.Field(alias="dbName", default=None)
    db_parameter_groups: typing.Optional[typing.List[DbParameterGroupStatus]] = pydantic.Field(
        alias="dbParameterGroups", default=None
    )
    db_security_groups: typing.Optional[typing.List[DbSecurityGroupMembership]] = pydantic.Field(
        alias="dbSecurityGroups", default=None
    )
    db_subnet_group: typing.Optional[DbSubnetGroup] = pydantic.Field(alias="dbSubnetGroup", default=None)
    db_system_id: typing.Optional[str] = pydantic.Field(alias="dbSystemId", default=None)
    database_insights_mode: typing.Optional[DatabaseInsightsMode] = pydantic.Field(
        alias="databaseInsightsMode", default=None
    )
    db_instance_port: typing.Optional[int] = pydantic.Field(alias="dbInstancePort", default=None)
    dbi_resource_id: typing.Optional[str] = pydantic.Field(alias="dbiResourceId", default=None)
    dedicated_log_volume: typing.Optional[bool] = pydantic.Field(alias="dedicatedLogVolume", default=None)
    deletion_protection: typing.Optional[bool] = pydantic.Field(alias="deletionProtection", default=None)
    domain_memberships: typing.Optional[typing.List[DomainMembership]] = pydantic.Field(
        alias="domainMemberships", default=None
    )
    enabled_cloudwatch_logs_exports: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="enabledCloudwatchLogsExports", default=None
    )
    endpoint: typing.Optional[Endpoint] = None
    engine: typing.Optional[str] = None
    engine_lifecycle_support: typing.Optional[str] = pydantic.Field(alias="engineLifecycleSupport", default=None)
    engine_version: typing.Optional[str] = pydantic.Field(alias="engineVersion", default=None)
    enhanced_monitoring_resource_arn: typing.Optional[str] = pydantic.Field(
        alias="enhancedMonitoringResourceArn", default=None
    )
    iam_database_authentication_enabled: typing.Optional[bool] = pydantic.Field(
        alias="iamDatabaseAuthenticationEnabled", default=None
    )
    instance_create_time: typing.Optional[str] = pydantic.Field(alias="instanceCreateTime", default=None)
    iops: typing.Optional[int] = None
    is_storage_config_upgrade_available: typing.Optional[bool] = pydantic.Field(
        alias="isStorageConfigUpgradeAvailable", default=None
    )
    kms_key_id: typing.Optional[str] = pydantic.Field(alias="kmsKeyId", default=None)
    latest_restorable_time: typing.Optional[str] = pydantic.Field(alias="latestRestorableTime", default=None)
    license_model: typing.Optional[str] = pydantic.Field(alias="licenseModel", default=None)
    listener_endpoint: typing.Optional[Endpoint] = pydantic.Field(alias="listenerEndpoint", default=None)
    master_user_secret: typing.Optional[MasterUserSecret] = pydantic.Field(alias="masterUserSecret", default=None)
    master_username: typing.Optional[str] = pydantic.Field(alias="masterUsername", default=None)
    max_allocated_storage: typing.Optional[int] = pydantic.Field(alias="maxAllocatedStorage", default=None)
    monitoring_interval: typing.Optional[int] = pydantic.Field(alias="monitoringInterval", default=None)
    monitoring_role_arn: typing.Optional[str] = pydantic.Field(alias="monitoringRoleArn", default=None)
    multi_az: typing.Optional[bool] = pydantic.Field(alias="multiAZ", default=None)
    multi_tenant: typing.Optional[bool] = pydantic.Field(alias="multiTenant", default=None)
    nchar_character_set_name: typing.Optional[str] = pydantic.Field(alias="ncharCharacterSetName", default=None)
    network_type: typing.Optional[str] = pydantic.Field(alias="networkType", default=None)
    option_group_memberships: typing.Optional[typing.List[OptionGroupMembership]] = pydantic.Field(
        alias="optionGroupMemberships", default=None
    )
    pending_modified_values: typing.Optional[PendingModifiedValues] = pydantic.Field(
        alias="pendingModifiedValues", default=None
    )
    percent_progress: typing.Optional[str] = pydantic.Field(alias="percentProgress", default=None)
    performance_insights_enabled: typing.Optional[bool] = pydantic.Field(
        alias="performanceInsightsEnabled", default=None
    )
    performance_insights_kms_key_id: typing.Optional[str] = pydantic.Field(
        alias="performanceInsightsKMSKeyId", default=None
    )
    performance_insights_retention_period: typing.Optional[int] = pydantic.Field(
        alias="performanceInsightsRetentionPeriod", default=None
    )
    preferred_backup_window: typing.Optional[str] = pydantic.Field(alias="preferredBackupWindow", default=None)
    preferred_maintenance_window: typing.Optional[str] = pydantic.Field(
        alias="preferredMaintenanceWindow", default=None
    )
    processor_features: typing.Optional[typing.List[ProcessorFeature]] = pydantic.Field(
        alias="processorFeatures", default=None
    )
    promotion_tier: typing.Optional[int] = pydantic.Field(alias="promotionTier", default=None)
    publicly_accessible: typing.Optional[bool] = pydantic.Field(alias="publiclyAccessible", default=None)
    read_replica_db_cluster_identifiers: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="readReplicaDBClusterIdentifiers", default=None
    )
    read_replica_db_instance_identifiers: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="readReplicaDBInstanceIdentifiers", default=None
    )
    read_replica_source_db_cluster_identifier: typing.Optional[str] = pydantic.Field(
        alias="readReplicaSourceDBClusterIdentifier", default=None
    )
    read_replica_source_db_instance_identifier: typing.Optional[str] = pydantic.Field(
        alias="readReplicaSourceDBInstanceIdentifier", default=None
    )
    replica_mode: typing.Optional[ReplicaMode] = pydantic.Field(alias="replicaMode", default=None)
    resume_full_automation_mode_time: typing.Optional[str] = pydantic.Field(
        alias="resumeFullAutomationModeTime", default=None
    )
    secondary_availability_zone: typing.Optional[str] = pydantic.Field(alias="secondaryAvailabilityZone", default=None)
    status_infos: typing.Optional[typing.List[DbInstanceStatusInfo]] = pydantic.Field(alias="statusInfos", default=None)
    storage_encrypted: typing.Optional[bool] = pydantic.Field(alias="storageEncrypted", default=None)
    storage_throughput: typing.Optional[int] = pydantic.Field(alias="storageThroughput", default=None)
    storage_type: typing.Optional[str] = pydantic.Field(alias="storageType", default=None)
    tag_list: typing.Optional[typing.List[Tag]] = pydantic.Field(alias="tagList", default=None)
    tde_credential_arn: typing.Optional[str] = pydantic.Field(alias="tdeCredentialArn", default=None)
    timezone: typing.Optional[str] = None
    vpc_security_groups: typing.Optional[typing.List[VpcSecurityGroupMembership]] = pydantic.Field(
        alias="vpcSecurityGroups", default=None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
