{"version":3,"file":"lib_index_js-webpack_sharing_consume_default_codemirror_language-webpack_sharing_consume_defa-b29f5c.6cf01cad86edf365d9ac.js","mappings":"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","sources":["webpack://nbtest_lab_extension/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport {\n  ICommandPalette,\n  ToolbarButton,\n  ISessionContext,\n  CommandToolbarButton,\n  ISessionContextDialogs // Added for type compatibility\n} from '@jupyterlab/apputils';\nimport {\n  INotebookTracker,\n  Notebook,\n  NotebookActions,\n  NotebookPanel\n} from '@jupyterlab/notebook';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ITranslator } from '@jupyterlab/translation'; // Added for type compatibility\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport { CodeCell, CodeCellModel } from '@jupyterlab/cells';\nimport { EditorState } from '@codemirror/state';\nimport { defaultKeymap, history, historyKeymap } from '@codemirror/commands';\nimport { python } from '@codemirror/lang-python';\nimport { jupyterTheme } from '@jupyterlab/codemirror';\nimport {\n  EditorView,\n  keymap,\n  Decoration,\n  ViewPlugin,\n  ViewUpdate,\n  DecorationSet\n} from '@codemirror/view';\nimport { RangeSetBuilder } from '@codemirror/state';\n\n// Signal for updating the status display of the ENV variable\nclass ToggleSignal {\n  private _stateChanged = new Signal<this, string>(this);\n\n  get stateChanged() {\n    return this._stateChanged;\n  }\n\n  emitState(value: string) {\n    this._stateChanged.emit(value);\n  }\n}\n\nconst toggleSignal = new ToggleSignal();\nlet status = 0; // Track status locally for the ENV variable\n\n// Define constants for the metadata key and assertion prefix\nconst METADATA_KEY = 'nbtest_hidden_asserts';\nconst ASSERT_PREFIX = 'nbtest.assert_';\n\n// A constant for our placeholder text. Using a valid comment is good practice.\nconst PLACEHOLDER = '# (This line is for spacing only)';\n\n/**\n * An editable widget that uses a CodeMirror instance for syntax highlighting.\n */\nclass EditableMergedSourceWidget extends Widget {\n  private _model: CodeCellModel;\n  private _editor: EditorView;\n  private _assertIndexMap: Map<string, number>; // assertion text → original index\n\n  constructor(\n    model: CodeCellModel,\n    assertions: { index: number; content: string }[]\n  ) {\n    super();\n    this._model = model;\n    this._assertIndexMap = new Map();\n\n    // Record original positions\n    assertions.forEach(a => {\n      this._assertIndexMap.set(a.content, a.index);\n    });\n\n    this.addClass('jp-Editor');\n    this.addClass('jp-CodeMirrorEditor');\n    this.addClass('nbtest-editable-merged-column');\n\n    this.node.style.flex = '0 1 50%';\n    this.node.style.maxWidth = '50%';\n    this.node.style.paddingLeft = '10px';\n    this.node.style.borderLeft = '1px solid var(--jp-border-color2)';\n\n    // 1. Determine the total number of lines needed for the editor.\n    const sourceLineCount = this._model.sharedModel\n      .getSource()\n      .split('\\n').length;\n    let highestAssertIndex = 0;\n    assertions.forEach(a => {\n      if (a.index > highestAssertIndex) {\n        highestAssertIndex = a.index;\n      }\n    });\n    const totalLines = Math.max(sourceLineCount, highestAssertIndex + 1);\n\n    // 2. Create a sparse array representing the editor content.\n    const lines = new Array(totalLines).fill(PLACEHOLDER);\n    assertions.forEach(assert => {\n      if (assert.index < totalLines) {\n        // If an assertion already exists at this line, append the new one.\n        if (lines[assert.index] !== PLACEHOLDER) {\n          lines[assert.index] += '\\n' + assert.content;\n        } else {\n          lines[assert.index] = assert.content;\n        }\n      }\n    });\n\n    const placeholderStyling = ViewPlugin.fromClass(\n      class {\n        decorations: DecorationSet;\n        constructor(view: EditorView) {\n          this.decorations = this.getDecorations(view);\n        }\n        update(update: ViewUpdate) {\n          if (update.docChanged || update.viewportChanged) {\n            this.decorations = this.getDecorations(update.view);\n          }\n        }\n        getDecorations(view: EditorView): DecorationSet {\n          const builder = new RangeSetBuilder<Decoration>();\n          for (const { from, to } of view.visibleRanges) {\n            for (let pos = from; pos <= to; ) {\n              const line = view.state.doc.lineAt(pos);\n              if (line.text === PLACEHOLDER) {\n                builder.add(\n                  line.from,\n                  line.from,\n                  Decoration.line({\n                    attributes: {\n                      style:\n                        'color: var(--jp-ui-font-color2); opacity: 0.5; font-style: italic;'\n                    }\n                  })\n                );\n              }\n              pos = line.to + 1;\n            }\n          }\n          return builder.finish();\n        }\n      },\n      {\n        decorations: v => v.decorations\n      }\n    );\n\n    const state = EditorState.create({\n      doc: lines.join('\\n'),\n      extensions: [\n        keymap.of([...defaultKeymap, ...historyKeymap]),\n        history(),\n        python(),\n        // EditorView.lineWrapping,\n        EditorView.editable.of(true),\n        jupyterTheme,\n        placeholderStyling,\n        EditorView.theme({\n          '&': {\n            backgroundColor: 'var(--jp-cell-editor-background)'\n          }\n        }),\n        EditorView.updateListener.of(update => {\n          if (update.docChanged) {\n            this.saveAssertionsToMetadata();\n          }\n        })\n      ]\n    });\n\n    this._editor = new EditorView({ state, parent: this.node });\n\n    // Prevent JupyterLab from hijacking standard text-editing shortcuts\n    this._editor.dom.addEventListener('keydown', event => {\n      const key = event.key.toLowerCase();\n      const isMod = event.metaKey || event.ctrlKey;\n\n      const stopKeys: ((e: KeyboardEvent) => boolean)[] = [\n        // Undo / Redo\n        e => isMod && !e.shiftKey && key === 'z', // Mod+Z\n        e => isMod && e.shiftKey && key === 'z', // Mod+Shift+Z\n\n        // Copy / Paste / Cut\n        e => isMod && key === 'c', // Mod+C\n        e => isMod && key === 'v', // Mod+V\n        e => isMod && key === 'x', // Mod+X\n\n        // Select All\n        e => isMod && key === 'a' // Mod+A\n      ];\n\n      if (stopKeys.some(fn => fn(event))) {\n        event.stopPropagation();\n      }\n    });\n  }\n\n  public saveAssertionsToMetadata() {\n    if (this.isDisposed) {\n      return;\n    }\n    const newAsserts: { index: number; content: string }[] = [];\n    const editorLines = this._editor.state.doc.toString().split('\\n');\n\n    editorLines.forEach(lineContent => {\n      if (lineContent.trim() && lineContent.trim() !== PLACEHOLDER) {\n        const singleAsserts = lineContent.split('\\n');\n        singleAsserts.forEach(assertText => {\n          if (assertText.trim().startsWith(ASSERT_PREFIX)) {\n            // Use original index if available\n            const idx = this._assertIndexMap.get(assertText) ?? 0;\n            newAsserts.push({ index: idx, content: assertText });\n          }\n        });\n      }\n    });\n\n    this._model.setMetadata(METADATA_KEY, newAsserts);\n  }\n\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.saveAssertionsToMetadata();\n    this._editor.destroy();\n    super.dispose();\n  }\n}\n\n/**\n * The main extension plugin.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'nbtest_lab_extension:plugin',\n  autoStart: true,\n  requires: [ICommandPalette, INotebookTracker, IRenderMimeRegistry],\n  activate: (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    tracker: INotebookTracker\n  ) => {\n    const { commands } = app;\n    const toggleEnvCommand = 'nbtest:toggle-asserts-env';\n    const toggleVisibilityCommand = 'nbtest:toggle-visibility';\n\n    let isColumnarViewActive = false;\n    const widgetMap = new WeakMap<CodeCell, EditableMergedSourceWidget>();\n\n    commands.addCommand(toggleEnvCommand, {\n      label: 'Toggle NBTEST_RUN_ASSERTS Env Var',\n      execute: async () => {\n        const currentNotebook = tracker.currentWidget;\n        if (!currentNotebook) {\n          return;\n        }\n        const session = currentNotebook.sessionContext.session;\n        if (!session || !session.kernel) {\n          return;\n        }\n        const code = `\n    import os\n    os.environ[\"NBTEST_RUN_ASSERTS\"] = \"1\" if os.environ.get(\"NBTEST_RUN_ASSERTS\", \"0\") != \"1\" else \"0\"\n    print(os.environ[\"NBTEST_RUN_ASSERTS\"])\n            `;\n        const future = session.kernel.requestExecute({ code });\n        future.onIOPub = msg => {\n          if (msg.header.msg_type === 'stream') {\n            const newStatusValue = (msg.content as any).text.trim();\n            status = newStatusValue === '1' ? 1 : 0;\n            toggleSignal.emitState(status === 1 ? 'ON' : 'OFF');\n          }\n        };\n        await future.done;\n      }\n    });\n\n    // Create a reusable function for your custom execution logic\n    async function executeWithAssertions(\n      cell: CodeCell,\n      sessionContext: ISessionContext\n    ): Promise<boolean> {\n      if (status !== 1 || !sessionContext.session?.kernel) {\n        return false; // We are not handling this execution\n      }\n\n      const cellModel = cell.model;\n      const assertions = cellModel.getMetadata(METADATA_KEY) as\n        | { index: number; content: string }[]\n        | undefined;\n\n      if (!Array.isArray(assertions) || assertions.length === 0) {\n        return false; // No assertions, let the original function handle it\n      }\n\n      const sourceLines = cellModel.sharedModel.getSource().split('\\n');\n      const finalCodeLines: string[] = sourceLines;\n\n      assertions.forEach(assert => {\n        finalCodeLines.splice(assert.index, 0, assert.content);\n      });\n\n      const mergedCode = finalCodeLines.join('\\n');\n\n      const kernel = sessionContext.session.kernel;\n      const future = kernel.requestExecute({ code: mergedCode });\n\n      cell.outputArea.future = future;\n      cell.model.executionState = 'running';\n      cell.model.sharedModel.setMetadata('execution', {\n        shell: {\n          reply: null\n        }\n      });\n\n      const reply = await future.done;\n\n      try {\n        if (reply && reply.content.status === 'ok') {\n          const banner = document.createElement('div');\n          banner.textContent = '✔ Assertions Passed';\n          banner.style.cssText = `\n            background-color: var(--jp-success-color1);\n            color: white;\n            font-size: 12px;\n            font-weight: 600;\n            padding: 4px 8px;\n            margin: 4px 0;\n            border-radius: 3px;\n            opacity: 0;                    /* start hidden */\n            transition: opacity 0.4s ease; /* smooth fade */\n          `;\n\n          cell.node.insertBefore(banner, cell.node.firstChild);\n\n          // trigger fade-in on next frame\n          requestAnimationFrame(() => {\n            banner.style.opacity = '1';\n          });\n\n          // fade out after 2s\n          setTimeout(() => {\n            banner.style.opacity = '0';\n            banner.addEventListener('transitionend', () => banner.remove(), {\n              once: true\n            });\n          }, 2000);\n        }\n        cell.model.executionCount = reply.content.execution_count;\n        return true; // We handled the execution\n      } catch (e) {\n        console.error('Failed to execute cell with assertions:', e);\n        cell.model.executionCount = reply.content.execution_count;\n        return true; // We attempted to handle it, even if it failed.\n      }\n    }\n\n    // 'run' for Ctrl+Enter\n    const originalRun = NotebookActions.run;\n    NotebookActions.run = async (\n      notebook: Notebook,\n      sessionContext?: ISessionContext,\n      sessionDialogs?: ISessionContextDialogs,\n      translator?: ITranslator\n    ): Promise<boolean> => {\n      const cell = notebook.activeCell;\n      if (cell instanceof CodeCell && sessionContext) {\n        const handled = await executeWithAssertions(cell, sessionContext);\n        if (handled) {\n          return true;\n        }\n      }\n      return originalRun.call(\n        NotebookActions,\n        notebook,\n        sessionContext,\n        sessionDialogs,\n        translator\n      );\n    };\n\n    // 'runAndAdvance' (for Shift+Enter and Toolbar Run)\n    const originalRunAndAdvance = NotebookActions.runAndAdvance;\n    NotebookActions.runAndAdvance = async (\n      notebook: Notebook,\n      sessionContext?: ISessionContext,\n      sessionDialogs?: ISessionContextDialogs,\n      translator?: ITranslator\n    ): Promise<boolean> => {\n      const cell = notebook.activeCell;\n      if (cell instanceof CodeCell && sessionContext) {\n        const handled = await executeWithAssertions(cell, sessionContext);\n        if (handled) {\n          NotebookActions.selectBelow(notebook);\n          return true;\n        }\n      }\n      return originalRunAndAdvance.call(\n        NotebookActions,\n        notebook,\n        sessionContext,\n        sessionDialogs,\n        translator\n      );\n    };\n\n    commands.addCommand(toggleVisibilityCommand, {\n      execute: () => {\n        const panel = tracker.currentWidget;\n        if (!panel) {\n          return;\n        }\n        isColumnarViewActive = !isColumnarViewActive;\n        commands.notifyCommandChanged(toggleVisibilityCommand);\n\n        panel.content.widgets.forEach(cell => {\n          if (!(cell instanceof CodeCell)) {\n            return;\n          }\n          const codeCell = cell;\n          const cellModel = codeCell.model as CodeCellModel;\n          const inputWrapper = codeCell.inputArea?.node.parentElement;\n\n          if (isColumnarViewActive) {\n            const assertions = cellModel.getMetadata(METADATA_KEY) as\n              | { index: number; content: string }[]\n              | undefined;\n            if (\n              !Array.isArray(assertions) ||\n              assertions.length === 0 ||\n              !inputWrapper\n            ) {\n              return;\n            }\n            const widget = new EditableMergedSourceWidget(\n              cellModel,\n              assertions\n            );\n            widgetMap.set(codeCell, widget);\n            inputWrapper.style.display = 'flex';\n            inputWrapper.style.alignItems = 'stretch';\n            codeCell.inputArea.node.style.flex = '1';\n            inputWrapper.appendChild(widget.node);\n          } else {\n            if (widgetMap.has(codeCell) && inputWrapper) {\n              const widget = widgetMap.get(codeCell);\n              if (widget && !widget.isDisposed) {\n                if (inputWrapper.contains(widget.node)) {\n                  inputWrapper.removeChild(widget.node);\n                }\n                widget.dispose();\n              }\n              widgetMap.delete(codeCell);\n              inputWrapper.style.display = '';\n              inputWrapper.style.alignItems = '';\n            }\n          }\n        });\n      },\n      isToggled: () => isColumnarViewActive,\n      label: () =>\n        isColumnarViewActive ? 'Hide Assertion Editor' : 'Show Assertion Editor'\n    });\n\n    palette.addItem({ command: toggleEnvCommand, category: 'NBTest' });\n    palette.addItem({ command: toggleVisibilityCommand, category: 'NBTest' });\n\n    tracker.widgetAdded.connect((sender, panel: NotebookPanel) => {\n      const envButton = new ToolbarButton({\n        label: 'Toggle Assertions',\n        tooltip: 'Toggle NBTEST_RUN_ASSERTS Environment Variable',\n        onClick: () => commands.execute(toggleEnvCommand)\n      });\n\n      const statusWidget = new Widget();\n      const statusNode = document.createElement('span');\n      statusWidget.node.appendChild(statusNode);\n      statusWidget.node.title = 'NBTEST_RUN_ASSERTS Status';\n      statusNode.style.cssText = `\n        margin-left: 4px; padding: 2px 6px; border-radius: 3px;\n        font-size: 12px; font-weight: 600; color: white;\n      `;\n\n      const updateStatusDisplay = (state: string) => {\n        if (state === 'ON') {\n          statusNode.textContent = 'NBTest Asserts: ON';\n          statusNode.style.backgroundColor = 'var(--jp-success-color1)';\n        } else {\n          statusNode.textContent = 'NBTest Asserts: OFF';\n          statusNode.style.backgroundColor = 'var(--jp-error-color2)';\n        }\n      };\n      toggleSignal.stateChanged.connect((_, newStatus) => {\n        updateStatusDisplay(newStatus);\n      });\n      updateStatusDisplay(status === 1 ? 'ON' : 'OFF');\n\n      const visibilityButton = new CommandToolbarButton({\n        commands: commands,\n        id: toggleVisibilityCommand\n      });\n\n      panel.toolbar.addItem('toggleAssertsEnv', envButton);\n      panel.toolbar.addItem('assertsStatus', statusWidget);\n      panel.toolbar.addItem('toggleVisibility', visibilityButton);\n\n      const highlightAssertCells = () => {\n        panel.content.widgets.forEach(cell => {\n          if (cell.model instanceof CodeCellModel) {\n            const metadata = cell.model.getMetadata(METADATA_KEY) as any[];\n            const hasAssertionsInMeta =\n              Array.isArray(metadata) && metadata.length > 0;\n            if (hasAssertionsInMeta) {\n              cell.node.style.borderLeft = '4px solid #f39c12';\n              cell.node.style.backgroundColor = 'rgba(243, 156, 18, 0.07)';\n            } else {\n              cell.node.style.borderLeft = '';\n              cell.node.style.backgroundColor = '';\n            }\n          }\n        });\n      };\n      panel.revealed.then(highlightAssertCells);\n      if (panel.content.model) {\n        panel.content.model.contentChanged.connect(highlightAssertCells);\n      }\n    });\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}