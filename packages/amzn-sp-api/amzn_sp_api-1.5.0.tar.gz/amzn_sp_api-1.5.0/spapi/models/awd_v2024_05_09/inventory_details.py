# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class InventoryDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_distributable_quantity': 'int',
        'replenishment_quantity': 'int',
        'reserved_distributable_quantity': 'int',
    }

    attribute_map = {
        'available_distributable_quantity': 'availableDistributableQuantity',
        'replenishment_quantity': 'replenishmentQuantity',
        'reserved_distributable_quantity': 'reservedDistributableQuantity',
    }

    def __init__(self, available_distributable_quantity=None, replenishment_quantity=None, reserved_distributable_quantity=None, _configuration=None):  # noqa: E501
        """InventoryDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._available_distributable_quantity = None
        self._replenishment_quantity = None
        self._reserved_distributable_quantity = None
        self.discriminator = None

        if available_distributable_quantity is not None:
            self.available_distributable_quantity = available_distributable_quantity
        if replenishment_quantity is not None:
            self.replenishment_quantity = replenishment_quantity
        if reserved_distributable_quantity is not None:
            self.reserved_distributable_quantity = reserved_distributable_quantity

    @property
    def available_distributable_quantity(self):
        """Gets the available_distributable_quantity of this InventoryDetails.  # noqa: E501

        Quantity that is available for downstream channel replenishment.  # noqa: E501

        :return: The available_distributable_quantity of this InventoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._available_distributable_quantity

    @available_distributable_quantity.setter
    def available_distributable_quantity(self, available_distributable_quantity):
        """Sets the available_distributable_quantity of this InventoryDetails.

        Quantity that is available for downstream channel replenishment.  # noqa: E501

        :param available_distributable_quantity: The available_distributable_quantity of this InventoryDetails.  # noqa: E501
        :type: int
        """

        self._available_distributable_quantity = available_distributable_quantity

    @property
    def replenishment_quantity(self):
        """Gets the replenishment_quantity of this InventoryDetails.  # noqa: E501

        Quantity that is in transit from AWD and has not yet been received at FBA.  # noqa: E501

        :return: The replenishment_quantity of this InventoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._replenishment_quantity

    @replenishment_quantity.setter
    def replenishment_quantity(self, replenishment_quantity):
        """Sets the replenishment_quantity of this InventoryDetails.

        Quantity that is in transit from AWD and has not yet been received at FBA.  # noqa: E501

        :param replenishment_quantity: The replenishment_quantity of this InventoryDetails.  # noqa: E501
        :type: int
        """

        self._replenishment_quantity = replenishment_quantity

    @property
    def reserved_distributable_quantity(self):
        """Gets the reserved_distributable_quantity of this InventoryDetails.  # noqa: E501

        Quantity that is reserved for a downstream channel replenishment order that is being prepared for shipment.  # noqa: E501

        :return: The reserved_distributable_quantity of this InventoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._reserved_distributable_quantity

    @reserved_distributable_quantity.setter
    def reserved_distributable_quantity(self, reserved_distributable_quantity):
        """Sets the reserved_distributable_quantity of this InventoryDetails.

        Quantity that is reserved for a downstream channel replenishment order that is being prepared for shipment.  # noqa: E501

        :param reserved_distributable_quantity: The reserved_distributable_quantity of this InventoryDetails.  # noqa: E501
        :type: int
        """

        self._reserved_distributable_quantity = reserved_distributable_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryDetails):
            return True

        return self.to_dict() != other.to_dict()
