# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GasLiftValve(BaseModel):
    """
    GasLiftValve
    """ # noqa: E501
    xid: StrictStr
    tubing_xid: StrictStr = Field(alias="tubingXid")
    source_id: StrictStr = Field(description="SourceId of the gas lift valve", alias="sourceId")
    run_date: datetime = Field(description="Run date of the valve. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="runDate")
    pull_date: Optional[datetime] = Field(default=None, description="Pull date of the valve. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="pullDate")
    glv_station: Optional[StrictInt] = Field(default=None, description="Station number of the valve. Valve 1 is typically the deepest", alias="glvStation")
    install_md: Union[StrictFloat, StrictInt] = Field(description="Install depth, ft", alias="installMd")
    test_rack_open_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Test rack opening pressure, psig", alias="testRackOpenPressure")
    surface_open_pressure: Union[StrictFloat, StrictInt] = Field(description="Designed surface opening pressure, psig", alias="surfaceOpenPressure")
    surface_close_pressure: Union[StrictFloat, StrictInt] = Field(description="Designed surface closing pressure, psig", alias="surfaceClosePressure")
    port_size: Union[StrictFloat, StrictInt] = Field(description="Port size of the valve, 64ths of an inch", alias="portSize")
    r: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="R-ratio, area of the valve port / effective bellows area, unitless")
    nominal_valve_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Nominal valve size, ex: 1\", 1.5\", 1.75\"", alias="nominalValveSize")
    __properties: ClassVar[List[str]] = ["xid", "tubingXid", "sourceId", "runDate", "pullDate", "glvStation", "installMd", "testRackOpenPressure", "surfaceOpenPressure", "surfaceClosePressure", "portSize", "r", "nominalValveSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GasLiftValve from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if pull_date (nullable) is None
        # and model_fields_set contains the field
        if self.pull_date is None and "pull_date" in self.model_fields_set:
            _dict['pullDate'] = None

        # set to None if glv_station (nullable) is None
        # and model_fields_set contains the field
        if self.glv_station is None and "glv_station" in self.model_fields_set:
            _dict['glvStation'] = None

        # set to None if test_rack_open_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.test_rack_open_pressure is None and "test_rack_open_pressure" in self.model_fields_set:
            _dict['testRackOpenPressure'] = None

        # set to None if r (nullable) is None
        # and model_fields_set contains the field
        if self.r is None and "r" in self.model_fields_set:
            _dict['r'] = None

        # set to None if nominal_valve_size (nullable) is None
        # and model_fields_set contains the field
        if self.nominal_valve_size is None and "nominal_valve_size" in self.model_fields_set:
            _dict['nominalValveSize'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GasLiftValve from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "xid": obj.get("xid"),
            "tubingXid": obj.get("tubingXid"),
            "sourceId": obj.get("sourceId"),
            "runDate": obj.get("runDate"),
            "pullDate": obj.get("pullDate"),
            "glvStation": obj.get("glvStation"),
            "installMd": obj.get("installMd"),
            "testRackOpenPressure": obj.get("testRackOpenPressure"),
            "surfaceOpenPressure": obj.get("surfaceOpenPressure"),
            "surfaceClosePressure": obj.get("surfaceClosePressure"),
            "portSize": obj.get("portSize"),
            "r": obj.get("r"),
            "nominalValveSize": obj.get("nominalValveSize")
        })
        return _obj


