"""Django settings for jfk_enterprise_toolbox project.

Generated by 'django-admin startproject' using Django 4.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
from typing import Any

# Base Directory
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get("DJANGO_DEBUG", "True") == "True" else False

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Allauth UI
    "allauth_ui",
    # Allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.openid_connect",
    # 3rd party
    "rest_framework",
    "django_celery_results",
    "django_celery_beat",
    "corsheaders",
    "knox",
    "colorfield",
    "drf_spectacular_sidecar",
    "drf_spectacular",
    "massadmin",
    "extra_settings",
    "django_filters",
    "import_export",
    "channels",
    "widget_tweaks",
    "slippers",
    # Apps
    "jfk_django_core.apps.JfkDjangoCoreConfig",
]

if DEBUG:
    INSTALLED_APPS.insert(0, "daphne")

ALLOWED_HOSTS = ["*"]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CSRF_TRUSTED_ORIGINS = os.getenv(
    "DJANGO_CSRF_TRUSTED_ORIGINS",
    "http://localhost:8000,http://localhost:3000,http://localhost:5173,http://localhost:8888,http://localhost:8001",
).split(",")

# Authentication
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Application Middleware
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # CORS
    "corsheaders.middleware.CorsMiddleware",
    # Django
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # 3rd party
    "whitenoise.middleware.WhiteNoiseMiddleware",
    # Allauth
    "allauth.account.middleware.AccountMiddleware",
]

# Application Templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Whitenoise
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Database
DATABASES = {
    "default": {
        "ENGINE": os.getenv("DJANGO_DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DJANGO_DB_NAME", "db.sqlite3"),
        "USER": os.getenv("DJANGO_DB_USER", "admin"),
        "PASSWORD": os.getenv("DJANGO_DB_PASSWORD", "PTzb7wJE5DkBVE2FMpfY"),
        "HOST": os.getenv("DJANGO_DB_HOST", "192.168.40.6"),
        "PORT": os.getenv("DJANGO_DB_PORT", "5432"),
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = os.getenv("DJANGO_TIME_ZONE", "Europe/Vienna")
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"

# Media Files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://:@localhost:6379")
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_RESULT_BACKEND = os.getenv("CELERY_BROKER_URL", "redis://:@localhost:6379")
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"


# Logging
def add_file_handler(  # noqa: PLR0913
    log_conf: dict[str, dict[Any, Any]],
    handler_name: str,
    filepath: Path,
    level: str = "DEBUG",
    formatter: str = "default",
    class_name: str = "logging.handlers.RotatingFileHandler",
    max_bytes: int = 20 * 1024 * 1024,
    backup_count: int = 7,
) -> None:
    """Add a handler to the Django logging configuration."""
    log_conf["handlers"][handler_name] = {
        "level": level,
        "formatter": formatter,
        "class": class_name,
        "maxBytes": max_bytes,
        "backupCount": backup_count,
        "filename": filepath,
    }


def add_logger(
    log_conf: dict[str, dict[Any, Any]],
    logger_name: str,
    handlers: list[str],
    level: str = "DEBUG",
    *,
    propagate: bool = False,
) -> None:
    """Add a logger to the Django logging configuration."""
    log_conf["loggers"][logger_name] = {
        "handlers": handlers,
        "level": level,
        "propagate": propagate,
    }


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "{asctime} {levelname} {name} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "default",
        },
    },
    "loggers": {},
    "root": {  # handle all other logs
        "handlers": ["console", "djangofile"],
        "level": "DEBUG",
    },
}

add_file_handler(LOGGING, "djangofile", "django.log")  # This will be saved in the package directory
add_logger(LOGGING, "django.request", ["console", "djangofile"])
add_logger(LOGGING, "django.server", ["console", "djangofile"])

# Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        #'rest_framework.authentication.BasicAuthentication',
        "rest_framework.authentication.SessionAuthentication",
        "knox.auth.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        #'rest_framework.permissions.AllowAny',
        "rest_framework.permissions.IsAuthenticated",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

# Channel Layers
layersHosts = os.getenv("DJANOG_CHANNEL_LAYERS_HOSTS")
layersHosts = layersHosts.split(",") if layersHosts is not None else None

if layersHosts is not None:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": layersHosts,
            },
        },
    }
else:
    # ! No Cross Process Communication
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer",
        },
    }

# Knox
# "cryptography.hazmat.primitives.hashes.SHA512",
REST_KNOX = {
    "SECURE_HASH_ALGORITHM": "hashlib.sha512",
    "AUTH_TOKEN_CHARACTER_LENGTH": 64,
    "TOKEN_TTL": timedelta(days=14),
    "USER_SERIALIZER": "knox.serializers.UserSerializer",
    "TOKEN_LIMIT_PER_USER": None,
    "AUTO_REFRESH": True,
}

# Spectacular
SPECTACULAR_SETTINGS = {
    "TITLE": "JFK Django Core",
    "DESCRIPTION": "JFK Django Core API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
}

# Allauth
LOGIN_REDIRECT_URL = os.getenv("DJANGO_LOGIN_REDIRECT_URL", "/")
ACCOUNT_DEFAULT_HTTP_PROTOCOL = os.getenv("DJANGO_ACCOUNT_DEFAULT_HTTP_PROTOCOL", "http")
SOCIALACCOUNT_LOGIN_ON_GET = os.getenv("DJANGO_SOCIALACCOUNT_LOGIN_ON_GET", "True") == "True"
SOCIALACCOUNT_EMAIL_AUTHENTICATION = os.getenv("DJANGO_SOCIALACCOUNT_EMAIL_AUTHENTICATION", "True") == "True"
SOCIALACCOUNT_AUTO_SIGNUP = os.getenv("DJANGO_SOCIALACCOUNT_AUTO_SIGNUP", "True") == "True"

# Allauth UI
ALLAUTH_UI_THEME = os.getenv("DJANGO_ALLAUTH_UI_THEME", "forest")

# Email
EMAIL_USE_SSL = os.getenv("DJANGO_EMAIL_USE_SSL", "True") == "True"
EMAIL_HOST = os.getenv("DJANGO_EMAIL_HOST", "")
EMAIL_HOST_USER = os.getenv("DJANGO_EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("DJANGO_EMAIL_HOST_PASSWORD", "")
EMAIL_PORT = os.getenv("DJANGO_EMAIL_PORT", "465")
DEFAULT_FROM_EMAIL = os.getenv("DJANGO_DEFAULT_FROM_EMAIL", "")
EMAIL_SUBJECT_PREFIX = os.getenv("DJANGO_EMAIL_SUBJECT_PREFIX", "[Django]")

# Cache
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.getenv("DJANGO_REDIS_CACHE_URL", CELERY_BROKER_URL),
    },
}
