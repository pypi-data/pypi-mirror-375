# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.formation_primary_fluid_type import FormationPrimaryFluidType
from typing import Optional, Set
from typing_extensions import Self

class Formation(BaseModel):
    """
    Formation
    """ # noqa: E501
    xid: StrictStr = Field(description="This is the xecta identifier")
    source_id: StrictStr = Field(alias="sourceId")
    name: Optional[StrictStr]
    allocation_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.0, alias="allocationFactor")
    compressibility_rock: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Formation rock compressibility", alias="compressibilityRock")
    pressure_formation_initial_datum: Union[StrictFloat, StrictInt] = Field(description="The initial reservoir pressure value", alias="pressureFormationInitialDatum")
    temperature_formation_datum: Union[StrictFloat, StrictInt] = Field(description="The reservoir temperature value", alias="temperatureFormationDatum")
    depth: Union[StrictFloat, StrictInt] = Field(description="Depth of the formation, ft")
    thickness_formation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Thickness of the formation", alias="thicknessFormation")
    porosity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Porosity of the formation")
    saturation_water_initial: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Initial water saturation", alias="saturationWaterInitial")
    saturation_gas_initial: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Initial gas saturation", alias="saturationGasInitial")
    saturation_oil_initial: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Initial oil saturation", alias="saturationOilInitial")
    primary_fluid_type: Optional[FormationPrimaryFluidType] = Field(default=FormationPrimaryFluidType.OIL, alias="primaryFluidType")
    rsi: Union[StrictFloat, StrictInt] = Field(description="Initial solution gas oil ratio")
    condensate_gas_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Condensate gas Ratio", alias="condensateGasRatio")
    water_gas_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Water gas ratio", alias="waterGasRatio")
    original_gas_in_place: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Original Gas in Place", alias="originalGasInPlace")
    original_oil_in_place: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Original Oil In Place", alias="originalOilInPlace")
    volume_aquifer_initial: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Initial aquifer volume", alias="volumeAquiferInitial")
    fluid_gravity_api: Union[StrictFloat, StrictInt] = Field(description="Oil API gravity", alias="fluidGravityApi")
    fluid_gravity_gas: Union[StrictFloat, StrictInt] = Field(description="Gas specific gravity", alias="fluidGravityGas")
    fluid_salinity_water: Union[StrictFloat, StrictInt] = Field(description="Water salinity", alias="fluidSalinityWater")
    fluid_commingled_gor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gas Oil Ratio of the co-mingled fluid in multi wellbore wells", alias="fluidCommingledGOR")
    fluid_molar_frac_n2: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Molar fraction N2", alias="fluidMolarFracN2")
    fluid_molar_frac_co2: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Molar fraction CO2", alias="fluidMolarFracCO2")
    fluid_molar_frac_h2_s: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Molar fraction H2S", alias="fluidMolarFracH2S")
    start_date: Optional[datetime] = Field(default=None, description="This is the valid date of the formation", alias="startDate")
    langmuir_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Langmuir pressure (for coal seam gas reservoirs)", alias="langmuirPressure")
    langmuir_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Langmuir volume (for coal seam gas reservoirs", alias="langmuirVolume")
    initial_gas_content: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Initial gas content (for coal seam gas reservoirs)", alias="initialGasContent")
    bulk_density: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Bulk density (for coal seam gas reservoirs)", alias="bulkDensity")
    __properties: ClassVar[List[str]] = ["xid", "sourceId", "name", "allocationFactor", "compressibilityRock", "pressureFormationInitialDatum", "temperatureFormationDatum", "depth", "thicknessFormation", "porosity", "saturationWaterInitial", "saturationGasInitial", "saturationOilInitial", "primaryFluidType", "rsi", "condensateGasRatio", "waterGasRatio", "originalGasInPlace", "originalOilInPlace", "volumeAquiferInitial", "fluidGravityApi", "fluidGravityGas", "fluidSalinityWater", "fluidCommingledGOR", "fluidMolarFracN2", "fluidMolarFracCO2", "fluidMolarFracH2S", "startDate", "langmuirPressure", "langmuirVolume", "initialGasContent", "bulkDensity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Formation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if allocation_factor (nullable) is None
        # and model_fields_set contains the field
        if self.allocation_factor is None and "allocation_factor" in self.model_fields_set:
            _dict['allocationFactor'] = None

        # set to None if compressibility_rock (nullable) is None
        # and model_fields_set contains the field
        if self.compressibility_rock is None and "compressibility_rock" in self.model_fields_set:
            _dict['compressibilityRock'] = None

        # set to None if thickness_formation (nullable) is None
        # and model_fields_set contains the field
        if self.thickness_formation is None and "thickness_formation" in self.model_fields_set:
            _dict['thicknessFormation'] = None

        # set to None if porosity (nullable) is None
        # and model_fields_set contains the field
        if self.porosity is None and "porosity" in self.model_fields_set:
            _dict['porosity'] = None

        # set to None if saturation_water_initial (nullable) is None
        # and model_fields_set contains the field
        if self.saturation_water_initial is None and "saturation_water_initial" in self.model_fields_set:
            _dict['saturationWaterInitial'] = None

        # set to None if saturation_gas_initial (nullable) is None
        # and model_fields_set contains the field
        if self.saturation_gas_initial is None and "saturation_gas_initial" in self.model_fields_set:
            _dict['saturationGasInitial'] = None

        # set to None if saturation_oil_initial (nullable) is None
        # and model_fields_set contains the field
        if self.saturation_oil_initial is None and "saturation_oil_initial" in self.model_fields_set:
            _dict['saturationOilInitial'] = None

        # set to None if condensate_gas_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.condensate_gas_ratio is None and "condensate_gas_ratio" in self.model_fields_set:
            _dict['condensateGasRatio'] = None

        # set to None if water_gas_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.water_gas_ratio is None and "water_gas_ratio" in self.model_fields_set:
            _dict['waterGasRatio'] = None

        # set to None if original_gas_in_place (nullable) is None
        # and model_fields_set contains the field
        if self.original_gas_in_place is None and "original_gas_in_place" in self.model_fields_set:
            _dict['originalGasInPlace'] = None

        # set to None if original_oil_in_place (nullable) is None
        # and model_fields_set contains the field
        if self.original_oil_in_place is None and "original_oil_in_place" in self.model_fields_set:
            _dict['originalOilInPlace'] = None

        # set to None if volume_aquifer_initial (nullable) is None
        # and model_fields_set contains the field
        if self.volume_aquifer_initial is None and "volume_aquifer_initial" in self.model_fields_set:
            _dict['volumeAquiferInitial'] = None

        # set to None if fluid_commingled_gor (nullable) is None
        # and model_fields_set contains the field
        if self.fluid_commingled_gor is None and "fluid_commingled_gor" in self.model_fields_set:
            _dict['fluidCommingledGOR'] = None

        # set to None if fluid_molar_frac_n2 (nullable) is None
        # and model_fields_set contains the field
        if self.fluid_molar_frac_n2 is None and "fluid_molar_frac_n2" in self.model_fields_set:
            _dict['fluidMolarFracN2'] = None

        # set to None if fluid_molar_frac_co2 (nullable) is None
        # and model_fields_set contains the field
        if self.fluid_molar_frac_co2 is None and "fluid_molar_frac_co2" in self.model_fields_set:
            _dict['fluidMolarFracCO2'] = None

        # set to None if fluid_molar_frac_h2_s (nullable) is None
        # and model_fields_set contains the field
        if self.fluid_molar_frac_h2_s is None and "fluid_molar_frac_h2_s" in self.model_fields_set:
            _dict['fluidMolarFracH2S'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['startDate'] = None

        # set to None if langmuir_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.langmuir_pressure is None and "langmuir_pressure" in self.model_fields_set:
            _dict['langmuirPressure'] = None

        # set to None if langmuir_volume (nullable) is None
        # and model_fields_set contains the field
        if self.langmuir_volume is None and "langmuir_volume" in self.model_fields_set:
            _dict['langmuirVolume'] = None

        # set to None if initial_gas_content (nullable) is None
        # and model_fields_set contains the field
        if self.initial_gas_content is None and "initial_gas_content" in self.model_fields_set:
            _dict['initialGasContent'] = None

        # set to None if bulk_density (nullable) is None
        # and model_fields_set contains the field
        if self.bulk_density is None and "bulk_density" in self.model_fields_set:
            _dict['bulkDensity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Formation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "xid": obj.get("xid"),
            "sourceId": obj.get("sourceId"),
            "name": obj.get("name"),
            "allocationFactor": obj.get("allocationFactor") if obj.get("allocationFactor") is not None else 1.0,
            "compressibilityRock": obj.get("compressibilityRock"),
            "pressureFormationInitialDatum": obj.get("pressureFormationInitialDatum"),
            "temperatureFormationDatum": obj.get("temperatureFormationDatum"),
            "depth": obj.get("depth"),
            "thicknessFormation": obj.get("thicknessFormation"),
            "porosity": obj.get("porosity"),
            "saturationWaterInitial": obj.get("saturationWaterInitial"),
            "saturationGasInitial": obj.get("saturationGasInitial"),
            "saturationOilInitial": obj.get("saturationOilInitial"),
            "primaryFluidType": obj.get("primaryFluidType") if obj.get("primaryFluidType") is not None else FormationPrimaryFluidType.OIL,
            "rsi": obj.get("rsi"),
            "condensateGasRatio": obj.get("condensateGasRatio"),
            "waterGasRatio": obj.get("waterGasRatio"),
            "originalGasInPlace": obj.get("originalGasInPlace"),
            "originalOilInPlace": obj.get("originalOilInPlace"),
            "volumeAquiferInitial": obj.get("volumeAquiferInitial"),
            "fluidGravityApi": obj.get("fluidGravityApi"),
            "fluidGravityGas": obj.get("fluidGravityGas"),
            "fluidSalinityWater": obj.get("fluidSalinityWater"),
            "fluidCommingledGOR": obj.get("fluidCommingledGOR"),
            "fluidMolarFracN2": obj.get("fluidMolarFracN2") if obj.get("fluidMolarFracN2") is not None else 0.0,
            "fluidMolarFracCO2": obj.get("fluidMolarFracCO2") if obj.get("fluidMolarFracCO2") is not None else 0.0,
            "fluidMolarFracH2S": obj.get("fluidMolarFracH2S") if obj.get("fluidMolarFracH2S") is not None else 0.0,
            "startDate": obj.get("startDate"),
            "langmuirPressure": obj.get("langmuirPressure"),
            "langmuirVolume": obj.get("langmuirVolume"),
            "initialGasContent": obj.get("initialGasContent"),
            "bulkDensity": obj.get("bulkDensity")
        })
        return _obj


