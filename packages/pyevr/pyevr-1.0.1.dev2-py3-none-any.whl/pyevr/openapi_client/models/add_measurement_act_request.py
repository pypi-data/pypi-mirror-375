# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.measurement import Measurement
from pyevr.openapi_client.models.total import Total


class AddMeasurementActRequest(BaseModel):
    """
    AddMeasurementActRequest
    """  # noqa: E501

    act_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(
        default=None, description="Mõõtmisakti number", alias="actNumber"
    )
    act_date: Optional[datetime] = Field(
        default=None, description="Mõõtmisakti kuupäev", alias="actDate"
    )
    measurements: Optional[List[Measurement]] = Field(
        default=None, description="Mõõtmistulemused"
    )
    custom_measurement_data: Optional[Any] = Field(
        default=None,
        description="Mõõtmistulemused vabas formaadis.",
        alias="customMeasurementData",
    )
    total: Optional[Total] = None
    __properties: ClassVar[List[str]] = [
        "actNumber",
        "actDate",
        "measurements",
        "customMeasurementData",
        "total",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddMeasurementActRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in measurements (list)
        _items = []
        if self.measurements:
            for _item_measurements in self.measurements:
                if _item_measurements:
                    _items.append(_item_measurements.to_dict())
            _dict["measurements"] = _items
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict["total"] = self.total.to_dict()
        # set to None if act_number (nullable) is None
        # and model_fields_set contains the field
        if self.act_number is None and "act_number" in self.model_fields_set:
            _dict["actNumber"] = None

        # set to None if act_date (nullable) is None
        # and model_fields_set contains the field
        if self.act_date is None and "act_date" in self.model_fields_set:
            _dict["actDate"] = None

        # set to None if measurements (nullable) is None
        # and model_fields_set contains the field
        if self.measurements is None and "measurements" in self.model_fields_set:
            _dict["measurements"] = None

        # set to None if custom_measurement_data (nullable) is None
        # and model_fields_set contains the field
        if (
            self.custom_measurement_data is None
            and "custom_measurement_data" in self.model_fields_set
        ):
            _dict["customMeasurementData"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddMeasurementActRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "actNumber": obj.get("actNumber"),
                "actDate": obj.get("actDate"),
                "measurements": [
                    Measurement.from_dict(_item) for _item in obj["measurements"]
                ]
                if obj.get("measurements") is not None
                else None,
                "customMeasurementData": obj.get("customMeasurementData"),
                "total": Total.from_dict(obj["total"])
                if obj.get("total") is not None
                else None,
            }
        )
        return _obj
