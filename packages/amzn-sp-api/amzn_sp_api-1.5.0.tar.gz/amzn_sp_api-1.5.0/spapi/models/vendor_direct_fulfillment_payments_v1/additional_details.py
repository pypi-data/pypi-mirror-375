# coding: utf-8

"""
    Selling Partner API for Direct Fulfillment Payments

    The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class AdditionalDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'detail': 'str',
        'language_code': 'str',
    }

    attribute_map = {
        'type': 'type',
        'detail': 'detail',
        'language_code': 'languageCode',
    }

    def __init__(self, type=None, detail=None, language_code=None, _configuration=None):  # noqa: E501
        """AdditionalDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._detail = None
        self._language_code = None
        self.discriminator = None

        self.type = type
        self.detail = detail
        if language_code is not None:
            self.language_code = language_code

    @property
    def type(self):
        """Gets the type of this AdditionalDetails.  # noqa: E501

        The type of the additional information provided by the selling party.  # noqa: E501

        :return: The type of this AdditionalDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AdditionalDetails.

        The type of the additional information provided by the selling party.  # noqa: E501

        :param type: The type of this AdditionalDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["SUR", "OCR"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def detail(self):
        """Gets the detail of this AdditionalDetails.  # noqa: E501

        The detail of the additional information provided by the selling party.  # noqa: E501

        :return: The detail of this AdditionalDetails.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this AdditionalDetails.

        The detail of the additional information provided by the selling party.  # noqa: E501

        :param detail: The detail of this AdditionalDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501

        self._detail = detail

    @property
    def language_code(self):
        """Gets the language_code of this AdditionalDetails.  # noqa: E501

        The language code of the additional information detail.  # noqa: E501

        :return: The language_code of this AdditionalDetails.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this AdditionalDetails.

        The language code of the additional information detail.  # noqa: E501

        :param language_code: The language_code of this AdditionalDetails.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdditionalDetails):
            return True

        return self.to_dict() != other.to_dict()
