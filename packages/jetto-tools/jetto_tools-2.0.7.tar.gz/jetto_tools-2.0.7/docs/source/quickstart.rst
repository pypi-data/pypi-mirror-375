.. _quickstart-label:

Quickstart
==========

As a simple example to get things started, we will demonstrate some basic use of the ``jetto_tools`` package.

Let's say that we want to run JETTO, starting from the case given by the example files in the
``testdata/jetto-sanco-pencil-esco-qlknn`` directory within the ``jetto-pythontools`` repository. This template case
consists of a set of JETTO configuration files which were generated by JAMS. Using the ``jetto_tools`` package, we can
load and run this case, in a similar manner to loading and running the case from within JAMS.

To start with, we'll assume:

* You are logged in on Freia or the JDC
* You have a terminal window open
* You have the Python 3.7 module loaded (should be loaded by default: if not, run ``module load python/3.7``)
* You have the ``jintrac-pythontools`` module loaded (if not, run ``source /u/sim/jintrac/default/sh/grpdef``)

Now, run the Python interpreter (type ``python``), and you will see the Python prompt:

.. highlight:: python

>>>

Load the test case template using the relative path to the directory containing the template files:

.. highlight:: python

>>> import jetto_tools.template
>>> template = jetto_tools.template.from_directory('jetto-pythontools/testdata/jetto-sanco-pencil-esco-qlknn')

Now that we've created a ``template`` object, we can create a *run configuration* from it, using the ``RunConfig`` class

.. highlight:: python

>>> import jetto_tools.config
>>> config = jetto_tools.config.RunConfig(template)

Now that we have a configuration, we can modify it as we wish. Let's say we want to modify the boundary ellipticity
(normally found in the ``Equilibrium`` tab in JAMS) to the value 1.1. To do this, simply run:

.. highlight:: python

>>> config['bound_ellip'] = 1.1

Note the string ``bound_ellip`` (which identifies the boundary ellipticity parameter), is defined by the *lookup* file,
called ``lookup.json``, which can be found in the example ``jetto-sanco-pencil-esco-qlknn`` directory. For more
information on the contents of this file, including how to add additional parameters to it, see the
:ref:`lookup <lookup-label>` documentation.

Once we've modified the configuration as we wish, we can launch a JETTO run with the modifications. To do this, import the
``job`` module and create a *job manager*:

.. highlight:: python

>>> import jetto_tools.job
>>> manager = jetto_tools.job.JobManager

Then run the configuration by doing

>>> manager.submit_job_to_batch(config, 'run-name', run=True)

This will cause the creation of a batch job running the JETTO configuration. To see the status of the job, you can use
the usual ``LoadLeveler`` commands (e.g. ``llq``). The ``run-name`` is just an arbitrary name which (similar to the ``Run Directory Name``
in the JAMS ``Job Process`` panel) is used to name the run directory containing the JETTO input and output files. Note
that setting the ``run`` argument to ``True`` causes the batch job to be launched (omitting it would create the input
files on disk, but no batch job would be created).

Once the job has finished, have a look at the directory ``/home/$USER/jetto/runs/run-name``: this will contain
the files generated when the run was launched, and (if the run has completed), the output files generated by JETTO.

For reference, a complete Python script doing all of the above is shown below. This can be useful to avoid typing all of
the commands at the Python REPL.

.. code-block:: python

    import jetto_tools.template
    import jetto_tools.config
    import jetto_tools.job
    template = jetto_tools.template.from_directory('testdata/jetto-sanco-pencil-esco-qlknn')
    config = jetto_tools.config.RunConfig(template)
    config['bound_ellip'] = 1.1
    manager = jetto_tools.job.JobManager
    manager.submit_job_to_batch(config, 'run-name', run=True)

For information about more advanced usage of this API, including running scans over parameters, see the detailed documentation
linked off the :ref:`main page <main-label>`.
