[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "embed-rerank"
dynamic = ["version"]
description = "Single Model Embedding & Reranker API with Apple Silicon acceleration"
readme = "README.md"
requires-python = ">=3.13"
license = "MIT"
keywords = ["embeddings", "reranking", "fastapi", "mlx", "apple-silicon"]
authors = [
  { name = "joonsoo-me", email = "bear8203@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Framework :: FastAPI",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
  "fastapi>=0.104.0",
  "uvicorn[standard]>=0.24.0",
  "pydantic>=2.0.0",
  "pydantic-settings>=2.0.0",
  "torch>=2.0.0",
  "sentence-transformers>=2.2.0",
  "transformers>=4.30.0",
  "numpy>=1.24.0",
  "httpx>=0.25.0",
  "python-multipart",
  "python-dotenv",
  "structlog",
  "prometheus-client",
]

[project.optional-dependencies]
mlx = [
  "mlx>=0.4.0; sys_platform=='darwin'",
  "mlx-lm>=0.2.0; sys_platform=='darwin'",
]
dev = [
  "pytest>=7.4.0",
  "pytest-asyncio>=0.21.0",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.11.0",
  "black>=23.0.0",
  "flake8>=6.0.0",
  "mypy>=1.5.0",
  "isort>=5.12.0",
  "pre-commit>=3.0.0",
  "locust>=2.16.0",
  "types-requests>=2.31.0",
  "bandit[toml]>=1.7.5",
  "safety>=2.3.0",
]

[project.urls]
Documentation = "https://github.com/joonsoo-me/embed-rerank#readme"
Issues = "https://github.com/joonsoo-me/embed-rerank/issues"
Source = "https://github.com/joonsoo-me/embed-rerank"

[project.scripts]
embed-rerank = "app.main:main"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-asyncio",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.13"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:app tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py313"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py313"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore banned relative imports
  "TID252",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.coverage.run]
source_pkgs = ["app", "tests"]
branch = true
parallel = true
omit = [
  "app/__about__.py",
]

[tool.coverage.paths]
embed_rerank = ["app", "*/embed-rerank/app"]
tests = ["tests", "*/embed-rerank/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "mlx: marks tests that require MLX (Apple Silicon)",
    "torch: marks tests that require PyTorch",
]

[tool.mypy]
python_version = "3.13"
ignore_errors = true
ignore_missing_imports = true
follow_imports = "skip"
warn_no_return = false
warn_return_any = false
warn_unused_ignores = false
warn_redundant_casts = false
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = false

[[tool.mypy.overrides]]
module = [
  "sentence_transformers.*",
  "mlx.*",
  "transformers.*",
]
ignore_missing_imports = true
