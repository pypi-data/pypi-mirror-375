# coding: utf-8

"""
    Selling Partner API for Data Kiosk

    The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.

    The version of the OpenAPI document: 2023-11-15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetDocumentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_id': 'str',
        'document_url': 'str',
    }

    attribute_map = {
        'document_id': 'documentId',
        'document_url': 'documentUrl',
    }

    def __init__(self, document_id=None, document_url=None, _configuration=None):  # noqa: E501
        """GetDocumentResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._document_id = None
        self._document_url = None
        self.discriminator = None

        self.document_id = document_id
        self.document_url = document_url

    @property
    def document_id(self):
        """Gets the document_id of this GetDocumentResponse.  # noqa: E501

        The identifier for the Data Kiosk document. This identifier is unique only in combination with a selling partner account ID.  # noqa: E501

        :return: The document_id of this GetDocumentResponse.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this GetDocumentResponse.

        The identifier for the Data Kiosk document. This identifier is unique only in combination with a selling partner account ID.  # noqa: E501

        :param document_id: The document_id of this GetDocumentResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def document_url(self):
        """Gets the document_url of this GetDocumentResponse.  # noqa: E501

        A presigned URL that can be used to retrieve the Data Kiosk document. This URL expires after 5 minutes. If the Data Kiosk document is compressed, the `Content-Encoding` header will indicate the compression algorithm.  **Note:** Most HTTP clients are capable of automatically decompressing downloaded files based on the `Content-Encoding` header.  # noqa: E501

        :return: The document_url of this GetDocumentResponse.  # noqa: E501
        :rtype: str
        """
        return self._document_url

    @document_url.setter
    def document_url(self, document_url):
        """Sets the document_url of this GetDocumentResponse.

        A presigned URL that can be used to retrieve the Data Kiosk document. This URL expires after 5 minutes. If the Data Kiosk document is compressed, the `Content-Encoding` header will indicate the compression algorithm.  **Note:** Most HTTP clients are capable of automatically decompressing downloaded files based on the `Content-Encoding` header.  # noqa: E501

        :param document_url: The document_url of this GetDocumentResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and document_url is None:
            raise ValueError("Invalid value for `document_url`, must not be `None`")  # noqa: E501

        self._document_url = document_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDocumentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDocumentResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetDocumentResponse):
            return True

        return self.to_dict() != other.to_dict()
