# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.v4_changes_get200_response_changes_inner_differences_inner import V4ChangesGet200ResponseChangesInnerDifferencesInner
from typing import Optional, Set
from typing_extensions import Self

class V4ChangesGet200ResponseChangesInner(BaseModel):
    """
    V4ChangesGet200ResponseChangesInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the change")
    workflow_id: Optional[StrictStr] = Field(default=None, description="ID of the workflow this change belongs to", alias="workflowId")
    data: Optional[List[Dict[str, Any]]] = Field(default=None, description="Current state of the data after the change")
    differences: Optional[List[V4ChangesGet200ResponseChangesInnerDifferencesInner]] = Field(default=None, description="Structured representation of changes with object-based diffing")
    url: Optional[StrictStr] = Field(default=None, description="URL where the change was detected")
    screenshot_url: Optional[StrictStr] = Field(default=None, description="URL of the screenshot taken when the change was detected", alias="screenshotUrl")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the change was created", alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "workflowId", "data", "differences", "url", "screenshotUrl", "createdAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V4ChangesGet200ResponseChangesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in differences (list)
        _items = []
        if self.differences:
            for _item_differences in self.differences:
                if _item_differences:
                    _items.append(_item_differences.to_dict())
            _dict['differences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V4ChangesGet200ResponseChangesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "workflowId": obj.get("workflowId"),
            "data": obj.get("data"),
            "differences": [V4ChangesGet200ResponseChangesInnerDifferencesInner.from_dict(_item) for _item in obj["differences"]] if obj.get("differences") is not None else None,
            "url": obj.get("url"),
            "screenshotUrl": obj.get("screenshotUrl"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


