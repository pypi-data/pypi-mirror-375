# coding: utf-8

"""
    Selling Partner API for Easy Ship

    Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).

    The version of the OpenAPI document: 2022-03-23
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CreateScheduledPackagesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_id': 'str',
        'order_schedule_details_list': 'List[OrderScheduleDetails]',
        'label_format': 'LabelFormat',
    }

    attribute_map = {
        'marketplace_id': 'marketplaceId',
        'order_schedule_details_list': 'orderScheduleDetailsList',
        'label_format': 'labelFormat',
    }

    def __init__(self, marketplace_id=None, order_schedule_details_list=None, label_format=None, _configuration=None):  # noqa: E501
        """CreateScheduledPackagesRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._marketplace_id = None
        self._order_schedule_details_list = None
        self._label_format = None
        self.discriminator = None

        self.marketplace_id = marketplace_id
        self.order_schedule_details_list = order_schedule_details_list
        self.label_format = label_format

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this CreateScheduledPackagesRequest.  # noqa: E501

        A string of up to 255 characters.  # noqa: E501

        :return: The marketplace_id of this CreateScheduledPackagesRequest.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this CreateScheduledPackagesRequest.

        A string of up to 255 characters.  # noqa: E501

        :param marketplace_id: The marketplace_id of this CreateScheduledPackagesRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                marketplace_id is not None and len(marketplace_id) > 255):
            raise ValueError("Invalid value for `marketplace_id`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                marketplace_id is not None and len(marketplace_id) < 1):
            raise ValueError("Invalid value for `marketplace_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def order_schedule_details_list(self):
        """Gets the order_schedule_details_list of this CreateScheduledPackagesRequest.  # noqa: E501

        An array allowing users to specify orders to be scheduled.  # noqa: E501

        :return: The order_schedule_details_list of this CreateScheduledPackagesRequest.  # noqa: E501
        :rtype: List[OrderScheduleDetails]
        """
        return self._order_schedule_details_list

    @order_schedule_details_list.setter
    def order_schedule_details_list(self, order_schedule_details_list):
        """Sets the order_schedule_details_list of this CreateScheduledPackagesRequest.

        An array allowing users to specify orders to be scheduled.  # noqa: E501

        :param order_schedule_details_list: The order_schedule_details_list of this CreateScheduledPackagesRequest.  # noqa: E501
        :type: List[OrderScheduleDetails]
        """
        if self._configuration.client_side_validation and order_schedule_details_list is None:
            raise ValueError("Invalid value for `order_schedule_details_list`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                order_schedule_details_list is not None and len(order_schedule_details_list) < 1):
            raise ValueError("Invalid value for `order_schedule_details_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._order_schedule_details_list = order_schedule_details_list

    @property
    def label_format(self):
        """Gets the label_format of this CreateScheduledPackagesRequest.  # noqa: E501


        :return: The label_format of this CreateScheduledPackagesRequest.  # noqa: E501
        :rtype: LabelFormat
        """
        return self._label_format

    @label_format.setter
    def label_format(self, label_format):
        """Sets the label_format of this CreateScheduledPackagesRequest.


        :param label_format: The label_format of this CreateScheduledPackagesRequest.  # noqa: E501
        :type: LabelFormat
        """
        if self._configuration.client_side_validation and label_format is None:
            raise ValueError("Invalid value for `label_format`, must not be `None`")  # noqa: E501

        self._label_format = label_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateScheduledPackagesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateScheduledPackagesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateScheduledPackagesRequest):
            return True

        return self.to_dict() != other.to_dict()
