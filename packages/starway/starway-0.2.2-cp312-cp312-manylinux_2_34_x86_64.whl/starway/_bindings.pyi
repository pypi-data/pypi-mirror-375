from typing import Annotated

import numpy
from numpy.typing import NDArray

class ClientSendFuture:
    def done(self) -> bool: ...
    def wait(self) -> None: ...
    def exception(self) -> str: ...

class ClientRecvFuture:
    def done(self) -> bool: ...
    def exception(self) -> str: ...
    def info(self) -> tuple[int, int]: ...
    def wait(self) -> None: ...

class Client:
    def __init__(self, addr: str, port: int) -> None: ...
    def send(
        self,
        buffer: Annotated[NDArray[numpy.uint8], dict(shape=(None,), device="cpu")],
        tag: int,
        done_callback: object,
        fail_callback: object,
    ) -> ClientSendFuture: ...
    def recv(
        self,
        buffer: Annotated[NDArray[numpy.uint8], dict(shape=(None,), device="cpu")],
        tag: int,
        tag_mask: int,
        done_callback: object,
        fail_callback: object,
    ) -> ClientRecvFuture: ...

class ServerRecvFuture:
    def done(self) -> bool: ...
    def exception(self) -> str: ...
    def info(self) -> tuple[int, int]: ...
    def wait(self) -> None: ...

class ServerSendFuture:
    def done(self) -> bool: ...
    def wait(self) -> None: ...
    def exception(self) -> str: ...

class Server:
    def __init__(self, addr: str, port: int) -> None: ...
    def recv(
        self,
        buffer: Annotated[NDArray[numpy.uint8], dict(shape=(None,), device="cpu")],
        tag: int,
        tag_mask: int,
        done_callback: object,
        fail_callback: object,
    ) -> ServerRecvFuture: ...
    def list_clients(self) -> list[int]: ...
    def send(
        self,
        client_ep: int,
        buffer: Annotated[NDArray[numpy.uint8], dict(shape=(None,), device="cpu")],
        tag: int,
        done_callback: object,
        fail_callback: object,
    ) -> ServerSendFuture: ...
