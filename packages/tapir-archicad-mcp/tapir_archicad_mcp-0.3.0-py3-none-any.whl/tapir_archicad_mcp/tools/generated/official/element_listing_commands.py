# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch
import time
from typing import Any
from tapir_archicad_mcp.pagination import handle_paginated_request, PAGINATION_CACHE, CACHE_LIFETIME_SECONDS

from multiconn_archicad.models.official.commands import (
    GetElementsByClassificationParameters,
GetElementsByClassificationResult,
GetTypesOfElementsParameters,
GetTypesOfElementsResult
)


log = logging.getLogger()

class PaginatedGetElementsByClassificationResult(GetElementsByClassificationResult):
    """A paginated version of the GetElementsByClassificationResult."""
    elements: list[Any]
    next_page_token: str | None = None


def get_elements_by_classification(port: int, params: GetElementsByClassificationParameters, page_token: str | None = None) -> PaginatedGetElementsByClassificationResult:
    """
    Returns the identifier of every element with the given classification identifier.
        This response is paginated. If 'next_page_token' is returned, call this function
        again with that token to get the next page of results.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        cache_key = f"{port}:GetElementsByClassification:{params.model_dump_json()}"

        if not page_token:
            full_response_dict = conn_header.core.post_command(
                command="API.GetElementsByClassification",
                parameters=params.model_dump(mode='json')
            )
            full_response_model = GetElementsByClassificationResult.model_validate(full_response_dict)
            PAGINATION_CACHE[cache_key] = (full_response_model, time.time())

        if cache_key not in PAGINATION_CACHE:
            raise ValueError("Pagination session expired or invalid. Please start a new request.")

        full_response_model, timestamp = PAGINATION_CACHE[cache_key]
        if time.time() - timestamp > CACHE_LIFETIME_SECONDS:
            del PAGINATION_CACHE[cache_key]
            raise ValueError("Pagination session expired. Please start a new request.")

        list_to_paginate = getattr(full_response_model, "elements")
        paginated_result = handle_paginated_request(list_to_paginate, page_token)

        response_data = full_response_model.model_dump()
        response_data["elements"] = paginated_result.items
        response_data["next_page_token"] = paginated_result.next_page_token

        return PaginatedGetElementsByClassificationResult.model_validate(response_data)

    except ValidationError as e:
        log.error(f"Validation error for GetElementsByClassification result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetElementsByClassification on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_elements_by_classification,
    name="elements_get_elements_by_classification",
    title="GetElementsByClassification",
    description="Returns the identifier of every element with the given classification identifier.",
    params_model=GetElementsByClassificationParameters,
    result_model=PaginatedGetElementsByClassificationResult
)


def get_types_of_elements(port: int, params: GetTypesOfElementsParameters) -> GetTypesOfElementsResult:
    """
    Returns the types of the given elements.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetTypesOfElements",
            parameters=params.model_dump(mode='json')
        )
        return GetTypesOfElementsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetTypesOfElements result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetTypesOfElements on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_types_of_elements,
    name="elements_get_types_of_elements",
    title="GetTypesOfElements",
    description="Returns the types of the given elements.",
    params_model=GetTypesOfElementsParameters,
    result_model=GetTypesOfElementsResult
)
