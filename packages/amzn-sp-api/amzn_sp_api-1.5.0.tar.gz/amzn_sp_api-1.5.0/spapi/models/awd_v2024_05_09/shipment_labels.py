# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShipmentLabels(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label_download_url': 'str',
        'label_status': 'LabelStatus',
    }

    attribute_map = {
        'label_download_url': 'labelDownloadURL',
        'label_status': 'labelStatus',
    }

    def __init__(self, label_download_url=None, label_status=None, _configuration=None):  # noqa: E501
        """ShipmentLabels - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._label_download_url = None
        self._label_status = None
        self.discriminator = None

        if label_download_url is not None:
            self.label_download_url = label_download_url
        self.label_status = label_status

    @property
    def label_download_url(self):
        """Gets the label_download_url of this ShipmentLabels.  # noqa: E501

        The URL to download shipment labels. The URL is active for 600 seconds from generation.  # noqa: E501

        :return: The label_download_url of this ShipmentLabels.  # noqa: E501
        :rtype: str
        """
        return self._label_download_url

    @label_download_url.setter
    def label_download_url(self, label_download_url):
        """Sets the label_download_url of this ShipmentLabels.

        The URL to download shipment labels. The URL is active for 600 seconds from generation.  # noqa: E501

        :param label_download_url: The label_download_url of this ShipmentLabels.  # noqa: E501
        :type: str
        """

        self._label_download_url = label_download_url

    @property
    def label_status(self):
        """Gets the label_status of this ShipmentLabels.  # noqa: E501


        :return: The label_status of this ShipmentLabels.  # noqa: E501
        :rtype: LabelStatus
        """
        return self._label_status

    @label_status.setter
    def label_status(self, label_status):
        """Sets the label_status of this ShipmentLabels.


        :param label_status: The label_status of this ShipmentLabels.  # noqa: E501
        :type: LabelStatus
        """
        if self._configuration.client_side_validation and label_status is None:
            raise ValueError("Invalid value for `label_status`, must not be `None`")  # noqa: E501

        self._label_status = label_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentLabels, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentLabels):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipmentLabels):
            return True

        return self.to_dict() != other.to_dict()
