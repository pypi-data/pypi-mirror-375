def SignifResidmean(data=None, data_filter_expr=None, 
                    significance_level=None, **generic_arguments):
    """
    DESCRIPTION:
        The SignifResidmean() function is a significance of residual mean
        statistics test to determine the optimum data model.
        The function uses the residuals generated during model validation
        that used the forecasted data points.

        The following procedure is an example of how to use SignifResidmean() function:
            1. Divide the sample data into two sets. One set is used to fit the data to the
               model, and the other set is used to select between models.
            2. Use ArimaEstimate() to determine the coefficients for the test statistics
               to use with models.
            3. Use ArimaValidate() to validate the goodness of the coefficients.
            4. Use the residuals data from ArimaValidate() as an input for SignifResidmean().
            5. Retrieve the null hypothesis results from the SignifResidmean() output.
               A value of 1 means that the series has mean of zero. A value of 0 means
               that the series has non-zero mean.


    PARAMETERS:
        data:
            Required Argument.
            Specifies the input series or a TDAnalyticResult object
            created over the residuals data generated by the UAF function.
            Types: TDSeries, TDAnalyticResult

        data_filter_expr:
            Optional Argument.
            Specifies the filter expression for "data".
            Types: ColumnExpression

        significance_level:
            Required Argument.
            Specifies the significance level for the test.
            Types: float

        **generic_arguments:
            Specifies the generic keyword arguments of UAF functions.
            Below are the generic keyword arguments:
                persist:
                    Optional Argument.
                    Specifies whether to persist the results of the
                    function in a table or not. When set to True,
                    results are persisted in a table; otherwise,
                    results are garbage collected at the end of the
                    session.
                    Note that, when UAF function is executed, an 
                    analytic result table (ART) is created.
                    Default Value: False
                    Types: bool

                volatile:
                    Optional Argument.
                    Specifies whether to put the results of the
                    function in a volatile ART or not. When set to
                    True, results are stored in a volatile ART,
                    otherwise not.
                    Default Value: False
                    Types: bool

                output_table_name:
                    Optional Argument.
                    Specifies the name of the table to store results. 
                    If not specified, a unique table name is internally 
                    generated.
                    Types: str

                output_db_name:
                    Optional Argument.
                    Specifies the name of the database to create output 
                    table into. If not specified, table is created into 
                    database specified by the user at the time of context 
                    creation or configuration parameter. Argument is ignored,
                    if "output_table_name" is not specified.
                    Types: str


    RETURNS:
        Instance of SignifResidmean.
        Output teradataml DataFrames can be accessed using attribute 
        references, such as SignifResidmean_obj.<attribute_name>.
        Output teradataml DataFrame attribute name is:
            1. result


    RAISES:
        TeradataMlException, TypeError, ValueError


    EXAMPLES:
        # Notes:
        #     1. Get the connection to Vantage to execute the function.
        #     2. One must import the required functions mentioned in
        #        the example from teradataml.
        #     3. Function will raise error if not supported on the Vantage
        #        user is connected to.

        # Check the list of available UAF analytic functions.
        display_analytic_functions(type="UAF")

        # Load the example data.
        load_example_data("uaf","timeseriesdatasetsd4")

        # Create teradataml DataFrame object.
        df = DataFrame.from_table("timeseriesdatasetsd4")

        # Create teradataml TDSeries object for ArimaEstimate.
        series_arimaestimate = TDSeries(data=df,
                                        id="dataset_id",
                                        row_index="seqno",
                                        row_index_style="SEQUENCE",
                                        payload_field="Magnitude",
                                        payload_content="REAL")

        # Function outputs a result set that contains the estimated
        # coefficients with accompanying per-coefficient statistical ratings.
        arima_estimate = ArimaEstimate(data1=series_arimaestimate,
                                       nonseasonal_model_order=[1,0,0],
                                       constant=True,
                                       algorithm='MLE',
                                       fit_percentage=70,
                                       coeff_stats=True,
                                       fit_metrics=True,
                                       residuals=True)

        # Create teradataml TDAnalyticResult object for ArimaValidate.
        art_arimavalidate = TDAnalyticResult(data=arima_estimate.result)

        # Validate the goodness of the coefficients.
        arima_validate = ArimaValidate(data=art_arimavalidate,
                                     fit_metrics=True,
                                     residuals=True)

        # Example 1: Determine the optimum data model using TDSeries created over
        #            'fitresiduals' attribute of arima_validate as input.
        # Create teradataml TDSeries object.
        series_signifresidmean = TDSeries(data=arima_validate.fitresiduals,
                                          id="dataset_id",
                                          row_index="ROW_I",
                                          row_index_style="SEQUENCE",
                                          payload_field="RESIDUAL",
                                          payload_content="REAL")

        uaf_out1 = SignifResidmean(data=series_signifresidmean,
                                   significance_level=0.05)

        # Print the result DataFrame.
        print(uaf_out1.result)

        # Example 2: Determine the optimum data model using TDAnalyticResult created over
        #            'result' attribute of arima_validate with layer as input.
        # Create teradataml TDAnalyticResult object.
        art_signifresidmean = TDAnalyticResult(data=arima_validate.result,
                                               layer="ARTFITRESIDUALS")

        uaf_out2 = SignifResidmean(data=art_signifresidmean,
                                   significance_level=0.05)

        # Print the result DataFrame.
        print(uaf_out2.result)
    """
    