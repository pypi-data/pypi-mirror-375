# coding: utf-8

"""
    Selling Partner API for Solicitations

    With the Solicitations API you can build applications that send non-critical solicitations to buyers. You can get a list of solicitation types that are available for an order that you specify, then call an operation that sends a solicitation to the buyer for that order. Buyers cannot respond to solicitations sent by this API, and these solicitations do not appear in the Messaging section of Seller Central or in the recipient's Message Center. The Solicitations API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetSolicitationActionsForOrderResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'GetSolicitationActionsForOrderResponseLinks',
        'embedded': 'GetSolicitationActionsForOrderResponseEmbedded',
        'errors': 'List[Error]',
    }

    attribute_map = {
        'links': '_links',
        'embedded': '_embedded',
        'errors': 'errors',
    }

    def __init__(self, links=None, embedded=None, errors=None, _configuration=None):  # noqa: E501
        """GetSolicitationActionsForOrderResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._links = None
        self._embedded = None
        self._errors = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded
        if errors is not None:
            self.errors = errors

    @property
    def links(self):
        """Gets the links of this GetSolicitationActionsForOrderResponse.  # noqa: E501


        :return: The links of this GetSolicitationActionsForOrderResponse.  # noqa: E501
        :rtype: GetSolicitationActionsForOrderResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GetSolicitationActionsForOrderResponse.


        :param links: The links of this GetSolicitationActionsForOrderResponse.  # noqa: E501
        :type: GetSolicitationActionsForOrderResponseLinks
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this GetSolicitationActionsForOrderResponse.  # noqa: E501


        :return: The embedded of this GetSolicitationActionsForOrderResponse.  # noqa: E501
        :rtype: GetSolicitationActionsForOrderResponseEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this GetSolicitationActionsForOrderResponse.


        :param embedded: The embedded of this GetSolicitationActionsForOrderResponse.  # noqa: E501
        :type: GetSolicitationActionsForOrderResponseEmbedded
        """

        self._embedded = embedded

    @property
    def errors(self):
        """Gets the errors of this GetSolicitationActionsForOrderResponse.  # noqa: E501

        A list of error responses returned when a request is unsuccessful.  # noqa: E501

        :return: The errors of this GetSolicitationActionsForOrderResponse.  # noqa: E501
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GetSolicitationActionsForOrderResponse.

        A list of error responses returned when a request is unsuccessful.  # noqa: E501

        :param errors: The errors of this GetSolicitationActionsForOrderResponse.  # noqa: E501
        :type: List[Error]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSolicitationActionsForOrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSolicitationActionsForOrderResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetSolicitationActionsForOrderResponse):
            return True

        return self.to_dict() != other.to_dict()
