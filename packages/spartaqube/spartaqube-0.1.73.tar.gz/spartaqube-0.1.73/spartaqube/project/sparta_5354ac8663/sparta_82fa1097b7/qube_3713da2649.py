_A3='summary_statistics'
_A2='notebook'
_A1='wordcloud'
_A0='calendar'
_z='regression'
_y='dynamicRescale'
_x='quantstats'
_w='gauge2'
_v='ts_area_bands'
_u='performance'
_t='ts_lollipop'
_s='ts_bar'
_r='ts_baseline'
_q='ts_area'
_p='tickerWidget'
_o='tickerTape'
_n='symbolOverview'
_m='topStories'
_l='screener'
_k='stockMarket'
_j='marketData'
_i='forex'
_h='economicCalendar'
_g='etfHeatmap'
_f='stockHeatmap'
_e='histogram'
_d='timescale'
_c='matrix'
_b='mixed'
_a='polar'
_Z='radar'
_Y='donut'
_X='pie'
_W='gauge4'
_V='gauge3'
_U='gauge1'
_T='ts_shaded'
_S='ts_line'
_R='candlestick'
_Q='singleTicker'
_P='symbolInfo'
_O='symbolMini'
_N='companyProfile'
_M='stockAnalysis'
_L='forexHeatmap'
_K='realTimeStock'
_J='bubble'
_I='scatter'
_H='area'
_G='bar'
_F='line'
_E='dataframe'
_D=None
_C='when_to_use'
_B='description'
_A='type'
import os,sys,re
from django.conf import settings
import project.sparta_5354ac8663.sparta_b8b7994f57.sparta_244d7b2b5c.qube_64a76f487a as qube_64a76f487a,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_244d7b2b5c.qube_193b4ff1b7 as qube_193b4ff1b7,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_244d7b2b5c.qube_f8555021ff as qube_f8555021ff,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_244d7b2b5c.qube_3498fe6811 as qube_3498fe6811,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_4b7c3db453.qube_756bf328cf as qube_756bf328cf,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_4b7c3db453.qube_1868401755 as qube_1868401755,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_4b7c3db453.qube_6da6cb177f as qube_6da6cb177f,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_4b7c3db453.qube_edce0a9dc5 as qube_edce0a9dc5,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_4b7c3db453.qube_c047cb086e as qube_c047cb086e,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_4b7c3db453.qube_4a555c8f91 as qube_4a555c8f91,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_4b7c3db453.qube_c8c729fb5f as qube_c8c729fb5f,project.sparta_5354ac8663.sparta_b8b7994f57.sparta_4b7c3db453.qube_a07e497a99 as qube_a07e497a99
def sparta_b312525d69(chart_type):
	A=chart_type
	if A==_F:return{_B:'Renders a line chart, best suited for visualizing trends over time or ordered categories. Ideal for time series data like prices, sales, or metrics.',_C:'Line plot: Use this when the user requests a line chart for numeric data over ordered categories or general trends. If the user explicitly asks for a ChartJS chart or does not require a time-aware x-axis, use this. Otherwise, prefer ts_line for true time series (i.e., when the x-axis is a list of timestamps).'}
	if A==_G:return{_B:'Displays vertical bars to compare values across categories. Best for discrete comparisons (e.g., revenue by product).',_C:'Bar plot: Use this when the user asks for a bar chart to compare values across categories. If the x-axis represents time (e.g., dates or timestamps), prefer using ts_bar instead, unless the user explicitly requests a ChartJS bar chart.'}
	if A==_H:return{_B:'Similar to a line chart but with the area under the line filled. Useful for emphasizing cumulative data or highlighting volume under a trend.',_C:'Area plot: Use when the user asks for an area chart to visualize trends or cumulative data. If the x-axis represents actual time (e.g., dates or timestamps), prefer using ts_area unless the user explicitly wants a ChartJS area chart.'}
	if A==_I:return{_B:'Shows data points as individual dots on X and Y axes. Ideal for correlation analysis or distribution plots.',_C:'Scatter plot: Use when the user wants to explore the relationship between two continuous numerical variables or visualize data distribution. Best for detecting trends, clusters, or outliers in paired datasets.'}
	if A==_X:return{_B:'Displays circular slices to represent proportions of a whole. Best for showing simple percentage-based breakdowns.',_C:'Pie Chart: Use when the user wants to display how parts contribute to a whole, especially when comparing a limited number of categories. Ideal for static, simple percentage-based breakdowns where precise comparisons are not critical.'}
	if A==_Y:return{_B:'A variation of the pie chart with a hollow center. Good for the same use cases as pie, with better label space.',_C:'Donut Chart: Use when the user wants a pie chart but with improved readability or additional label/number placement in the center. Suitable for showing proportions of a whole while maintaining a clean, modern look.'}
	if A==_Z:return{_B:'Plots multivariate data on axes starting from the same point. Ideal for performance comparisons across several dimensions.',_C:'Radar Chart: Use when the user wants to compare multiple variables across different categories, especially to evaluate strengths and weaknesses. Commonly used for performance scoring, skill comparisons, or feature benchmarking across entities.'}
	if A==_J:return{_B:"A scatter plot where each dot's size represents a third variable. Useful for multivariate analysis.",_C:'Bubble Chart: Use when the user wants to visualize relationships between two variables while encoding a third variable through the size of the points. Ideal for highlighting impact, magnitude, or weight alongside correlation.'}
	if A=='barHorizontal':return{_B:'Horizontal bar chart for comparing values across categories when labels are long or vertical space is limited.',_C:'Bar Horizontal: Use when the user wants to compare values across categories and the category labels are long or need to be read more easily. Also suitable when vertical space is constrained, or when sorting categories by value for readability.'}
	if A==_a:return{_B:'Similar to radar charts but with circular gridlines. Best for cyclical data or comparing values on a circular scale.',_C:'Polar Chart: Use when the user wants to visualize data with a natural circular structure or cycle, such as seasonality, angles, or time-based distributions. Ideal for showing how values relate within a circular dimension.'}
	if A==_b:return{_B:'Combines multiple chart types (e.g., line and bar) in a single view. Useful for showing different metrics on the same chart.',_C:'Mixed Plot: Use when the user wants to compare multiple metrics with different representations-like price (line) and volume (bar) on the same axis or time scale. Ideal for highlighting how different variables interact or co-move.'}
	if A==_c:return{_B:'Visualizes data using colored cells in a grid layout. Ideal for heatmaps or correlation matrices.',_C:'Matrix plot: Use when the user wants to show relationships or intensities between two categorical axes, such as correlation between features, co-occurrence frequency, or performance scores. Best suited for visualizing pairwise relationships in a compact, color-encoded format.'}
	if A==_d:return{_B:'A time-aware line or bar chart optimized for displaying time series with proper scaling and axis formatting.',_C:'Timescale plot: Use when the user wants to plot time series data using Chart.js with proper datetime formatting on the X-axis. Ideal when dealing with timestamps and needing precise control over the display of time units (e.g., days, hours, months). Prefer ts_line or ts_bar unless the user specifies Chart.js.'}
	if A==_e:return{_B:'Displays the distribution of a dataset by binning values into intervals. Great for statistical distributions.',_C:"Histogram plot: Use when the user wants to visualize the frequency distribution of a continuous variable. Ideal for spotting skewness, modality, or the shape of a dataset's distribution, such as income ranges, test scores, or daily returns."}
	if A==_K:return{_B:'Live-updating stock chart with current market price movements. Best for monitoring individual stock performance in real time.',_C:'Use when you want to display real-time price movements for a specific stock or asset. If a user asks for the stock price of a company (but does not require specific analysis), use this component. This is a TradingView component, so we do not have access to the underlying data - only the embedded live price view.'}
	if A==_f:return{_B:'Visual representation of stock performance in a sector or market using color intensity. Ideal for market overviews.',_C:'Use when the user wants a quick visual overview of how multiple stocks are performing within a sector, index, or market. This is ideal for identifying top gainers/losers at a glance based on color intensity. Note: this is a TradingView component with no access to raw data.'}
	if A==_g:return{_B:'Similar to stockHeatmap, but focused on ETFs. Good for seeing sector-wide fund performance.',_C:'Use when the user wants an at-a-glance view of how various ETFs are performing across sectors or themes. Best suited for portfolio managers, ETF traders, or analysts comparing fund performance visually. This is a TradingView component with embedded data.'}
	if A==_h:return{_B:'Shows upcoming economic events (e.g., CPI, Fed meetings). Useful for macroeconomic analysis and event-based trading.',_C:'Use when the user wants to view upcoming macroeconomic events that could impact financial markets. Ideal for traders or analysts preparing for news-driven volatility. This is a TradingView component with no direct data access-only an embedded display of scheduled events.'}
	if A=='CryptoTable':return{_B:'Tabular view of top cryptocurrencies with price, change, volume, etc. Ideal for quick crypto market insights.',_C:'Use when the user wants a quick overview of the cryptocurrency market, including prices, daily changes, and trading volumes. This is best for general crypto dashboards or summary views. Note: This is a TradingView component and does not expose underlying data.'}
	if A=='CryptoHeatmap':return{_B:'Color-coded view of crypto performance by market cap. Best for understanding trends across the crypto market.',_C:'Use when the user wants to visualize the performance of cryptocurrencies in a compact and intuitive way, with emphasis on market cap and percentage change. Ideal for spotting top gainers/losers across the crypto space. This is a TradingView component with no access to raw data.'}
	if A==_i:return{_B:'Displays currency exchange rates and trends. Useful for FX traders and currency exposure monitoring.',_C:'Use when the user wants to view real-time currency exchange rates and identify trends in the forex market. Ideal for FX traders or analysts monitoring currency pairs. This is a TradingView component and does not provide access to underlying data.'}
	if A==_L:return{_B:'Heatmap of currency pair strength/weakness. Helps identify strong vs. weak currencies at a glance.',_C:'Use when the user wants to quickly assess which currencies are performing strongly or weakly relative to others. Ideal for high-level FX market diagnostics. This is a TradingView component, so the data is embedded and not accessible directly.'}
	if A==_j:return{_B:'General market snapshot including indices, commodities, and currencies. Good for high-level market overview.',_C:'Use when the user wants a quick summary of major market indices, commodities (like oil, gold), and forex pairs. Ideal for dashboard headers or overviews. This is a TradingView component and does not expose raw data.'}
	if A==_k:return{_B:'Real-time overview of key stock indices and tickers. Best for monitoring general equity market trends.',_C:'Use when the user wants to monitor global or regional equity markets at a glance. Best for dashboards showing live stock indices. This is a TradingView component and provides real-time visuals but not programmatic access to data.'}
	if A==_l:return{_B:'Allows filtering stocks based on fundamental or technical criteria. Useful for discovering trade/investment ideas.',_C:'Use when the user wants to search, filter, or screen stocks based on performance metrics, valuation ratios, or technical indicators. Ideal for generating investment ideas or shortlists of assets based on specific rules. This is a TradingView component and does not expose raw data.'}
	if A==_M:return{_B:'Displays in-depth stock metrics, ratios, and performance charts. Best for equity analysis and valuation.',_C:'Use when the user wants detailed financial analysis of a single stock, including valuation ratios and historical performance. This component is ideal for fundamental equity research dashboards.'}
	if A=='TechnicalAnalysis':return{_B:'Automated technical indicators summary (e.g., RSI, MACD, MA). Helps assess short- to mid-term trend signals.',_C:'Use when the user requests a technical summary or wants to understand the technical trend of a stock (bullish/bearish signals). This is a TradingView component that does not expose raw data but shows visual signals.'}
	if A==_N:return{_B:'Shows company fundamentals, earnings, sector, CEO, and business summary. Best for context around a stock.',_C:'Use when the user is asking for general context or background about a company-its sector, size, CEO, business activity, etc. Works well as supplementary context for dashboards.'}
	if A==_m:return{_B:'Shows trending financial news. Helps track sentiment and key events affecting markets.',_C:"Use when the user wants to stay updated with market news or track events impacting prices. This component embeds TradingView's news stream and cannot be queried directly."}
	if A==_n:return{_B:'Compact view of stock price, chart, and basic info. Good for dashboard summaries.',_C:"Use when the user requests a concise overview of a stock's price and basic info, suitable for summary dashboards or compact layouts."}
	if A==_O:return{_B:'Mini version of symbolOverview for dense layouts or widget use.',_C:'Use when a minimal visual element is needed to show stock price and small chart, especially for widget-style dashboards or side panels.'}
	if A==_P:return{_B:'Rich detail about a single stock symbol, including pricing, metrics, and profile. Useful for detailed dashboards.',_C:'Use when the user needs a rich visual panel with both technical and fundamental info about a stock. This is suitable for detailed stock pages.'}
	if A==_Q:return{_B:"Full-feature chart with one stock's data, indicators, and interactions. Suitable for dedicated stock analysis pages.",_C:'Use when the user wants an advanced interactive chart with indicators for a single stock. Suitable for technical analysis or full-screen views.'}
	if A==_o:return{_B:'A scrolling ticker showing real-time quotes. Great for keeping market info visible across dashboards.',_C:'Use when the user wants to add a horizontal scrolling ticker of stock or crypto prices to their dashboard or app.'}
	if A==_p:return{_B:'Embeddable widget with current stock prices and small charts. Ideal for sidebars and compact UIs.',_C:'Use when the user requests a small component to show current prices of a few tickers. Good for sidebars or dashboards with limited space.'}
	if A==_R:return{_B:'Displays a candlestick chart for financial time series data. Ideal for showing open, high, low, and close (OHLC) prices of assets like stocks or cryptocurrencies.',_C:'Candles/Candlestick chart: Use when the user wants to visualize financial time series data with open, high, low, and close values. Ideal for traders or analysts who need to examine price action, patterns, or volatility in stock, forex, or crypto markets over time.'}
	if A==_S:return{_B:'Renders a time series line chart. Best suited for showing the evolution of a single metric over time (e.g., closing prices, temperature, metrics).',_C:'Use when the user wants to visualize how a metric evolves over time (e.g., prices, sales, sensor data). This is preferred over ChartJS line if time is the x-axis and the chart is meant for interaction or precision reading.'}
	if A==_q:return{_B:'Renders a filled area chart for time series data. Useful for visualizing trends and emphasizing the volume or magnitude of a signal over time.',_C:'Use when the user wants to show the same information as a time series line but with visual emphasis on the magnitude (e.g., accumulated sales, energy consumption, or intensity).'}
	if A==_r:return{_B:'Displays a baseline chart that highlights deviations above and below a fixed or dynamic baseline. Ideal for visualizing positive/negative contributions (e.g., profit/loss, sentiment shifts).',_C:'Use when you want to highlight changes relative to a neutral reference (e.g., profit vs. loss, net flow, sentiment index). Best when contrasting positive and negative regions over time.'}
	if A==_s:return{_B:'Time series bar chart for comparing values over time. Often used for volume, frequency, or count-based data indexed by date.',_C:'Use when you want to show discrete quantities across time intervals (e.g., trading volume, user signups, event frequency). Prefer this over ChartJS bar when the x-axis is time.'}
	if A==_T:return{_B:'Line chart with shaded regions to highlight specific time intervals or value ranges. Useful for annotating regimes, confidence intervals, or event periods.',_C:'Use when the user wants to annotate time periods (e.g., crises, campaigns, earnings periods) on top of a regular time series chart. Helps add context to trends.'}
	if A==_t:return{_B:'Combines dots and vertical lines to show time series values. Good for highlighting exact values while keeping a clean look, especially with sparse data.',_C:'Use when values are spaced out in time and the user wants to emphasize specific data points while keeping the chart lightweight. Works well for events or irregular measurements.'}
	if A==_u:return{_B:'Interactive performance chart for time series data. Allows users to drag across a time window to dynamically compute and display the performance (percentage change) between two points in time.',_C:'Use when the user wants to analyze returns or performance between arbitrary time points interactively (e.g., "how much did the asset gain from May to October?"). Great for investment dashboards.'}
	if A==_v:return{_B:'Area chart with upper and lower bands around a central time series. Ideal for visualizing confidence intervals, volatility bands, or forecast ranges over time.',_C:'Use when the user wants to display a central value (e.g., median, forecast) with its uncertainty, such as confidence intervals or Bollinger bands. Useful for forecasts or volatility visualization.'}
	if A==_U:return{_B:'This gauge type features a straightforward design with a prominent cursor indicating the current value. Its minimalistic appearance makes it easy to focus on the value being measured. Users can quickly gauge where their metric stands in relation to the defined range or target.',_C:'Use when a simple and clean visualization of a single metric is required, especially when clarity and focus on the current value are more important than complex zone distinctions.'}
	if A==_w:return{_B:"This gauge type omits the cursor in favor of a visually striking arc with gradient colors. The arc dynamically changes color to reflect the metric's value, providing a clear visual cue. Accompanied by the numerical value, users can easily interpret the metric's status at a glance.",_C:'Use when a more aesthetic, color-driven representation of a metric is desired. Ideal for dashboards where visual status or alert-level indicators are important, but exact thresholds are not needed.'}
	if A==_V:return{_B:"This gauge offers a circular layout with distinct zones marked around its circumference. A movable cursor points to the current value, which falls within one of the predefined zones. Each zone may represent different performance levels or thresholds, allowing users to assess their metric's status within the context of these zones.",_C:'Use when the user wants to display performance or thresholds using clearly defined zones. Best when values must be categorized (e.g., poor/average/good) and assessed within colored segments.'}
	if A==_W:return{_B:"In this advanced gauge type, each zone not only has a distinct color but also varies in height, providing additional visual differentiation. The cursor indicates the current value, aligning with the appropriate zone based on both color and height. This design enables users to discern finer nuances in their metric's performance and easily identify any deviations from desired targets.",_C:'Use when you need detailed visual segmentation of a metric, with both color and height encoding for zones. Ideal for highlighting subtle differences in performance, risk, or status tiers.'}
	if A==_E:return{_B:'Displays a simple table or dataframe. Ideal for inspecting raw data, viewing results of computations, or presenting tabular outputs from transformations.',_C:'Use when the user wants to display tabular data, either as raw input, transformed output, or the result of a computation. Suitable for inspection, debugging, or reporting data in structured format.'}
	if A==_x:return{_B:'Use this component to quickly display key performance metrics for financial time series. It generates plots like cumulative returns, drawdown, rolling volatility, and other analytics useful in portfolio evaluation.',_C:'Use when the user requests portfolio performance analysis, backtest summaries, or financial statistics related to investment strategies or time series of returns. Ideal for investors or quant users.'}
	if A==_y:return{_B:'Interactive chart for exploring how investment returns vary based on the entry date. As the user moves the mouse, the chart dynamically recalculates and displays returns from that point to the end of the series. A table below shows the associated metrics. Ideal for visualizing timing impact on performance.',_C:'Use when the user wants to analyze the impact of entry timing on investment returns. Best when visualizing how different starting points along a time series affect final performance.'}
	if A==_z:return{_B:'Performs and visualizes a simple OLS (Ordinary Least Squares) regression. Best used to evaluate the relationship between two continuous variables and analyze linear trends.',_C:'Use when the user wants to fit a linear model or analyze the correlation between two variables. Ideal for financial analysis, risk modeling, or data exploration.'}
	if A==_A0:return{_B:'A calendar heatmap visualization using color gradients to show data intensity or frequency on a daily basis. Ideal for identifying trends, anomalies, or seasonal patterns in time-based data like sales, web traffic, or price activity.',_C:'Use when the user wants to explore daily data across months or years. Best for spotting weekly or seasonal patterns, outliers, or repetitive behavior in time-indexed metrics.'}
	if A==_A1:return{_B:'Visualizes textual data by displaying words with sizes proportional to their frequency. Great for exploring unstructured data, performing sentiment analysis, or identifying dominant terms in reviews, social media, or documents.',_C:'Use when the user wants to explore or summarize textual data. Ideal for reviews, tweets, customer feedback, or any large corpus of unstructured text.'}
	if A==_A2:return{_B:'Code editor interface similar to Jupyter Notebook. Allows users to write and execute Python code, define variables, transform data, and view outputs inline. Ideal for scripting and exploratory data analysis.',_C:'Use when the user wants to run or write Python code, perform computations, transform dataframes, or interact programmatically with variables. This is a live coding environment.'}
	if A==_A3:return{_B:'Displays comprehensive summary statistics for a dataframe, including mean, median, standard deviation, percentiles, and more. Useful for understanding the distribution and central tendency of numerical features.',_C:'Use when the user wants a quick statistical summary of a dataset. Suitable for exploring the structure of new data, checking data quality, or preparing features for modeling.'}
def sparta_532299eac5():
	D=sparta_a1fc3f8405();B=''
	for(A,H)in D.items():
		C=sparta_b312525d69(A)
		if C is _D:continue
		E=C.get(_B,'');F=C.get(_C,'');G=D[A].get(_A,'');B+=f"{A} => (Type: {G}) {E}\n";B+=f"When to use {A}: {F}\n\n\n\n"
	return B
def sparta_416d6d8c82(b_return_type_id=False):
	E='typeId'
	def B(input_string,key=E):A=re.escape(key);B=f"'{A}':\\s*(true|false|\\d+|'.*?'|\\\".*?\\\")";C=re.findall(B,input_string,re.IGNORECASE);D=[A.strip('\'"')for A in C];return D
	def F(file_path):
		with open(file_path,'r')as L:D=L.read()
		D=D.split('// PARSED ENDLINE COMMENT (DO NOT REMOVE)')[0];M=D;F=re.search('return\\s*({[\\s\\S]*?});',M)
		if not F:raise ValueError('No return dictionary found in the file.')
		C=F.group(1);G=B(C,E);H=B(C,'slugApi');N=B(C,'display');O=B(C,'name');P=B(C,'libraryName');I=[];Q=0
		for(A,R)in enumerate(G):
			if N[A]=='true':
				J=H[A]
				if J!='-1'and len(J)>0:
					K={'ID':H[A],'Name':O[A],'Library':P[A]}
					if b_return_type_id or True:K['type_plot']=G[A]
					I.append(K);Q+=1
		return I
	G=os.path.dirname(__file__);H=os.path.dirname(G);I=os.path.dirname(H);D=os.path.dirname(I)
	if settings.DEBUG:C=os.path.join(D,'static')
	else:C=os.path.join(D,'staticfiles')
	A=os.path.join(C,'js/vueComponent/plot-db/new-plot/plot-config/plotConfigMixin.js')
	if not os.path.exists(A):A=os.path.join(C,'js/util/plotConfigMixin.js')
	A=os.path.normpath(A);J=F(A);return J
def sparta_a1fc3f8405():
	Ae='pd.Series';Ad='boolean';Ac='DataFrame Index';Ab='canonical_corr';Aa='cointegration_test';AZ='granger_test';AY='zivot_andrews_test';AX='perron_test';AW='kpss_test';AV='adf_test';AU='var';AT='prophet_forecast';AS='ets';AR='sarima';AQ='mad';AP='isolation_forest';AO='prophet_outlier';AN='zscore';AM='ruptures';AL='cusum';AK='hmm';AJ='wavelet';AI='stl';AH='recursive_regression';AG='rolling_regression';AF='quantile_regression';AE='mutual_information';AD='features_importance';AC='tsne';AB='pca';AA='correlation_network';A9='clustering';A8='RandomForestRegression';A7='DecisionTreeRegression';A6='PolynomialRegression';A5='technicalAnalysis';A4='cryptoHeatmap';A3='cryptoTable';A2='barH';A1='dict';A0='[pd.Series, pd.Series...]';z='gauge_zones_height';y='height';x='width';w='title_css';v='title';u='returns_bmk';t='returns';s='dates';r='gauge';q='border_style';p='tooltips_label';o='tooltips_title';n='background';m='border';l='datalabels';k='shaded_background';j='labels';i='stacked';g='vega';f='gauge.js';d='str';c='pd.DataFrame';b='gauge_zones_labels';a='gauge_zones';Z='interactive';Y='date_format';X='lightweightChart';V='list[list]';U='legend';S='ChartJS';Q='optional_args';P='mandatory_args';O='signature';N='list';J='TradingView';H='x';G='y';F='OLS';D='llm';C='examples';B='input';A='options';E={H:{_A:[N,Ac],_B:'list or DataFrame index representing the x axis of your chart'},G:{_A:[N,V,c,A0],_B:'list, list of lists, DataFrame, or list of Series representing the lines to plot'},'r':{_A:[N,V,c,A0],_B:'list, list of lists, DataFrame, or list of Series representing the radius to plot'},i:{_A:[Ad],_B:'If True and multiple series, all the series will be stacked together'},Y:{_A:[d],_B:'For instance: yyyy-MM-dd, dd/MM/yyyy, yyyy-MM-dd HH:MM:SS etc... year: y, month: M, day: d, quarter: QQQ, week: w, hour: HH, minute: MM, seconds: SS, millisecond: ms'},U:{_A:[N],_B:"A list containing the names of each series in your chart. Each element in the list corresponds to the name of a series, which will be displayed in the chart's legend."},j:{_A:[N,V],_B:'A list or list of lists containing the labels for each point (scatter/bubble chart).'},'ohlcv':{_A:['pd.DataFrame()','[open:list, high:list, low:list, close:list, volume:list]','[open:pd.Series, high:pd.Series, low:pd.Series, close:pd.Series, volume:pd.Series]'],_B:'DataFrame with Open, High, Low, Close and optionally Volumes columns. Or a list containing eight list or pd.Series of Open, High, Low, Close and optionally volumes.'},k:{_A:[N,V,c,A0],_B:'The shaded_background input should be a list of numerical values representing the intensity levels of the shaded background, where each value corresponds to a specific color gradient'},l:{_A:[N,V],_B:'For charts containing a single series, provide a list of strings to represent the label of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the labels for the points on each corresponding series'},m:{_A:[N,V],_B:'For charts containing a single series, provide a list of color strings (in hex, rgb, or rgba format) to represent the border color of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the border colors for the points on each corresponding series'},n:{_A:[N,V],_B:'For charts containing a single series, provide a list of color strings (in hex, rgb, or rgba format) to represent the background color of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the background colors for the points on each corresponding series'},o:{_A:[N,V],_B:'For charts containing a single series, provide a list of strings to represent the tooltip title of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the tooltips for the points on each corresponding series'},p:{_A:[N,V],_B:'For charts containing a single series, provide a list of strings to represent the tooltip label of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the tooltips for the points on each corresponding series'},q:{_A:[N,V],_B:'For charts containing a single series, provide a list of strings to represent the border style of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the border styles for the points on each corresponding series. Please make sure to only use border styles from the following list: <span style="font-weight:bold">"solid", "dotted", "dashed", "largeDashed", "sparseDotted"</span>.'},'chart_type':{_A:[d],_B:'This is the type of the chart. You can find the available ID by running the get_plot_types()'},r:{_A:[A1],_B:"This dictionary must contains 3 keys: <span style='font-weight:bold'>'value'</span> that corresponds to the value of the gauge, <span style='font-weight:bold'>'min'</span> and <span style='font-weight:bold'>'max'</span> for the minimum and maximum value the gauge can take"},Z:{_A:[Ad],_B:'If set to false, only the final plot will be displayed, without the option for interactive editing. Default value is true.'},_E:{_A:[],_B:''},s:{_A:[N,Ac],_B:'list or DataFrame index representing the dates of your time series'},t:{_A:[N,c,Ae],_B:'list, DataFrame, or Series representing the (portfolio) returns of your time series'},u:{_A:[N,c,Ae],_B:'list, DataFrame, or Series representing the (benchmark) returns of your time series'},v:{_A:[d],_B:'Title of your plot'},w:{_A:[A1],_B:'Apply css to your title. Put all your css attributes into a dictionary. For instance: {"text-align": "center", "color": "red"} etc...'},A:{_A:[A1],_B:'You can override every attributes of the chart with the highest granularity in this options dictionary. Please refer to the option section below to find out more about all the attributes to override'},x:{_A:['int',d],_B:'This is the width of the widget. You can either specify an integer or a string with the percentage value (width="100%" for instance)'},y:{_A:['int',d],_B:'This is the height of the widget. You can either specify an integer or a string with the percentage value (height="100%" for instance)'},a:{_A:[N],_B:'Separate the background sectors or zones to have static colors'},b:{_A:[N],_B:'Set labels for each zones'},z:{_A:[N],_B:'Height parameter may be passed in to increase the size for each zone'}};h={l:E[l],m:E[m],n:E[n],o:E[o],p:E[p],q:E[q]};K={x:E[x],y:E[y]};M={v:E[v],w:E[w]};Af={O:"def plot(dataframe:list, chart_type='dataframe', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{_E:E[_E]},Q:{**M,**{A:E[A]},**K}};Ag={O:"def plot(dates:list, returns:list, chart_type='quantstats', returns_bmk:list=None, title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{s:E[s],t:E[t]},Q:{**{u:E[u],A:E[A]},**M,**K}};Ah={O:"def plot(chart_type='notebook', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{_E:E[_E]},Q:{**M,**K}};Ai={O:"def plot(chart_type='dynamicRescale', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**K}};Aj={O:"def plot(chart_type='regression', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**K}};Ak={O:"def plot(chart_type='calendar', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**K}};Al={O:"def plot(chart_type='wordcloud', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**K}};Am={O:"def plot(y:list, chart_type='summary_statistics', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{G:E[G]},Q:{**M,**{A:E[A]},**K}}
	def R(chart_type=_F):
		B=chart_type
		if B in[_I,_J]:C={O:f"def plot(x:list, y:list, legend:list=None, date_format:str=None, labels:list=None, datalabels:list=None, \n        border:list=None, background:list=None, tooltips_title:list=None, tooltips_label:list=None, \n        border_style:list=None, chart_type='{B}', interactive=True, title:str=None, title_css:dict=None,\n        options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**{Y:E[Y],Z:E[Z],A:E[A],U:E[U],j:E[j]},**h,**K}}
		elif B in[_G,_H]:C={O:f"def plot(x:list, y:list, stacked:bool=False, legend:list=None, date_format:str=None, datalabels:list=None, \n        border:list=None, background:list=None, tooltips_title:list=None, tooltips_label:list=None, \n        border_style:list=None, chart_type='{B}', interactive=True, title:str=None, title_css:dict=None,\n        options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**{Y:E[Y],i:E[i],Z:E[Z],A:E[A],U:E[U]},**h,**K}}
		else:C={O:f"def plot(x:list, y:list, legend:list=None, date_format:str=None, datalabels:list=None, \n        border:list=None, background:list=None, tooltips_title:list=None, tooltips_label:list=None, \n        border_style:list=None, chart_type='{B}', interactive=True, title:str=None, title_css:dict=None,\n        options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**{Y:E[Y],Z:E[Z],A:E[A],U:E[U]},**h,**K}}
		return C
	def I(chart_type=_K):return{O:f"def plot(chart_type='{chart_type}', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{},Q:{**M,**{A:E[A],**K}}}
	def W(chart_type=_S):
		B=chart_type
		if B==_T:C={O:f"def plot(x:list, y:list, shaded_background:list, legend:list=None, chart_type='{B}', title:str=None, title_css:dict=None, \n    options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G],k:E[k]},Q:{**{A:E[A],U:E[U]},**K}}
		elif B==_R:C={O:f"def plot(x:list, ohlcv:list, legend:list=None, chart_type='{B}', title:str=None, title_css:dict=None,\n    options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],'ohlcv':E[G]},Q:{**M,**{A:E[A],U:E[U]},**K}}
		else:C={O:f"def plot(x:list, y:list, legend:list=None, chart_type='{B}', title:str=None, title_css:dict=None,\n    options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**{A:E[A],U:E[U]},**K}}
		return C
	def e(chart_type=_U):
		F="def plot(chart_type='";B=chart_type;C=F+str(B)+"', gauge={'value':10, 'min':1, 'max':100}, title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)";D={**{A:E[A],**K}}
		if B==_V:D={**{a:E[a],b:E[b]},**M,**{A:E[A]},**K};C=F+str(B)+"', gauge={'value':10, 'min':1, 'max':100}, gauge_zones:list=None, gauge_zones_labels:list=None, title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)"
		elif B==_W:D={a:E[a],b:E[b],z:E[z],**M,**{A:E[A]},**K};C=F+str(B)+"', gauge={'value':10, 'min':1, 'max':100}, gauge_zones:list=None, gauge_zones_labels:list=None, gauge_zones_height:list=None, title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)"
		return{O:C,_B:'',P:{r:E[r]},Q:{**M,**D}}
	def T(chart_type):return{O:f"def plot(chart_type='{chart_type}', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**K}}
	def L(chart_type):return{O:f"def plot(chart_type='{chart_type}', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",_B:'',P:{H:E[H],G:E[G]},Q:{**M,**K}}
	An={_F:{_A:S,B:R(_F),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_026b801387(),D:sparta_b312525d69(_F)},_G:{_A:S,B:R(_G),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_ebb2d32d5d(),D:sparta_b312525d69(_G)},_H:{_A:S,B:R(_H),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_aaadde5df5(),D:sparta_b312525d69(_H)},_I:{_A:S,B:R(_I),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_6750d33c45(),D:sparta_b312525d69(_I)},_X:{_A:S,B:R(_X),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_5c02277780(),D:sparta_b312525d69(_X)},_Y:{_A:S,B:R(_Y),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_c1250c42a3(),D:sparta_b312525d69(_Y)},_Z:{_A:S,B:R(_Z),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_4f227cf8d2(),D:sparta_b312525d69(_Z)},_J:{_A:S,B:R(_J),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_10abbf1da0(),D:sparta_b312525d69(_J)},A2:{_A:S,B:R(A2),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_e6310dfd13(),D:sparta_b312525d69(A2)},_a:{_A:S,B:R(_a),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_736de821cc(),D:sparta_b312525d69(_a)},_b:{_A:S,B:R(_b),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_de27bcf0ce(),D:sparta_b312525d69(_b)},_c:{_A:S,B:R(_c),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_9827337bf8(),D:sparta_b312525d69(_c)},_d:{_A:S,B:R(_d),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_ebb2d32d5d(),D:sparta_b312525d69(_d)},_e:{_A:S,B:R(_e),A:qube_193b4ff1b7.sparta_e476841e19(),C:qube_756bf328cf.sparta_0be5251bf6(),D:sparta_b312525d69(_e)},_K:{_A:J,B:I(_K),A:qube_64a76f487a.sparta_358dfc252b(),C:qube_edce0a9dc5.sparta_e47cb63856(),D:sparta_b312525d69(_K)},_f:{_A:J,B:I(_f),A:qube_64a76f487a.sparta_dccac4b199(),C:qube_edce0a9dc5.sparta_edcd4cc274(),D:sparta_b312525d69(_f)},_g:{_A:J,B:I(_g),A:qube_64a76f487a.sparta_d0a8f747e1(),C:qube_edce0a9dc5.sparta_b67f503106(),D:sparta_b312525d69(_g)},_h:{_A:J,B:I(_h),A:qube_64a76f487a.sparta_c68d89d57f(),C:qube_edce0a9dc5.sparta_b490b260e0(),D:sparta_b312525d69(_h)},A3:{_A:J,B:I(A3),A:qube_64a76f487a.sparta_200a34815b(),C:qube_edce0a9dc5.sparta_333d5bb580(),D:sparta_b312525d69(A3)},A4:{_A:J,B:I(A4),A:qube_64a76f487a.sparta_fee0630ce9(),C:qube_edce0a9dc5.sparta_a441b98535(),D:sparta_b312525d69(A4)},_i:{_A:J,B:I(_i),A:qube_64a76f487a.sparta_93150daae4(),C:qube_edce0a9dc5.sparta_db55b1d9ff(),D:sparta_b312525d69(_i)},_L:{_A:J,B:I(_L),A:qube_64a76f487a.sparta_9fc644c4e6(),C:qube_edce0a9dc5.sparta_db55b1d9ff(_L),D:sparta_b312525d69(_L)},_j:{_A:J,B:I(_j),A:qube_64a76f487a.sparta_139f229fec(),C:qube_edce0a9dc5.sparta_d7bb74df17(),D:sparta_b312525d69(_j)},_k:{_A:J,B:I(_k),A:qube_64a76f487a.sparta_1daddbcebb(),C:qube_edce0a9dc5.sparta_e47cb63856(),D:sparta_b312525d69(_k)},_l:{_A:J,B:I(_l),A:qube_64a76f487a.sparta_1fac9b8659(),C:qube_edce0a9dc5.sparta_b383e71a70(),D:sparta_b312525d69(_l)},_M:{_A:J,B:I(_M),A:qube_64a76f487a.sparta_4149c83c29(),C:qube_edce0a9dc5.sparta_e47cb63856(_M),D:sparta_b312525d69(_M)},A5:{_A:J,B:I(A5),A:qube_64a76f487a.sparta_f14585873f(),C:qube_edce0a9dc5.sparta_cf2b4acfab(),D:sparta_b312525d69(A5)},_N:{_A:J,B:I(_N),A:qube_64a76f487a.sparta_1547aea6f7(),C:qube_edce0a9dc5.sparta_e47cb63856(_N),D:sparta_b312525d69(_N)},_m:{_A:J,B:I(_m),A:qube_64a76f487a.sparta_9fa7d37778(),C:qube_edce0a9dc5.sparta_3c04e15ac6(),D:sparta_b312525d69(_m)},_n:{_A:J,B:I(_n),A:qube_64a76f487a.sparta_e21fb646f4(),C:qube_edce0a9dc5.sparta_9e163b47be(),D:sparta_b312525d69(_n)},_O:{_A:J,B:I(_O),A:qube_64a76f487a.sparta_8d63d82624(),C:qube_edce0a9dc5.sparta_e47cb63856(_O),D:sparta_b312525d69(_O)},_P:{_A:J,B:I(_P),A:qube_64a76f487a.sparta_ee391549d8(),C:qube_edce0a9dc5.sparta_e47cb63856(_P),D:sparta_b312525d69(_P)},_Q:{_A:J,B:I(_Q),A:qube_64a76f487a.sparta_6d32c409b7(),C:qube_edce0a9dc5.sparta_e47cb63856(_Q),D:sparta_b312525d69(_Q)},_o:{_A:J,B:I(_o),A:qube_64a76f487a.sparta_258eddf675(),C:qube_edce0a9dc5.sparta_b853abedd5(),D:sparta_b312525d69(_o)},_p:{_A:J,B:I(_p),A:qube_64a76f487a.sparta_4b381780f6(),C:qube_edce0a9dc5.sparta_6c889c0dcd(),D:sparta_b312525d69(_p)},_R:{_A:X,B:W(_R),A:_D,C:qube_1868401755.sparta_f6abd64c74(),D:sparta_b312525d69(_R)},_S:{_A:X,B:W(_S),A:_D,C:qube_1868401755.sparta_2a4006f26d(),D:sparta_b312525d69(_S)},_q:{_A:X,B:W(_q),A:_D,C:qube_1868401755.sparta_f129b27010(),D:sparta_b312525d69(_q)},_r:{_A:X,B:W(_r),A:_D,C:qube_1868401755.sparta_c7eaef1341(),D:sparta_b312525d69(_r)},_s:{_A:X,B:W(_s),A:_D,C:qube_1868401755.sparta_e92f8403f7(),D:sparta_b312525d69(_s)},_T:{_A:X,B:W(_T),A:_D,C:qube_1868401755.sparta_0456af01d1(),D:sparta_b312525d69(_T)},_t:{_A:X,B:W(_t),A:_D,C:qube_1868401755.sparta_890501a5da(),D:sparta_b312525d69(_t)},_u:{_A:X,B:W(_u),A:_D,C:qube_1868401755.sparta_6676aae4f3(),D:sparta_b312525d69(_u)},_v:{_A:X,B:W(_v),A:_D,C:qube_1868401755.sparta_a09b5b57b0(),D:sparta_b312525d69(_v)},_U:{_A:f,B:e(_U),A:qube_f8555021ff.sparta_7a9d72db9b(),C:qube_6da6cb177f.sparta_f92d6fee08(),D:sparta_b312525d69(_U)},_w:{_A:f,B:e(_w),A:qube_f8555021ff.sparta_fe1359b0b7(),C:qube_6da6cb177f.sparta_d81e2b89fc(),D:sparta_b312525d69(_w)},_V:{_A:f,B:e(_V),A:qube_f8555021ff.sparta_66a05013a1(),C:qube_6da6cb177f.sparta_c4b64bf4c2(),D:sparta_b312525d69(_V)},_W:{_A:f,B:e(_W),A:qube_f8555021ff.sparta_3e3eaf063b(),C:qube_6da6cb177f.sparta_155c9bfeae(),D:sparta_b312525d69(_W)},_E:{_A:'spartaqube_dataframe',B:Af,A:_D,C:qube_c047cb086e.sparta_74f4bbf20c(),D:sparta_b312525d69(_E)},_x:{_A:'Quantstats',B:Ag,A:_D,C:qube_c047cb086e.sparta_334b37f106(),D:sparta_b312525d69(_x)},_y:{_A:g,B:Ai,A:_D,C:qube_4a555c8f91.sparta_ec53144fd4(),D:sparta_b312525d69(_y)},_z:{_A:g,B:Aj,A:_D,C:qube_4a555c8f91.sparta_305b6cde7e(),D:sparta_b312525d69(_z)},_A0:{_A:g,B:Ak,A:_D,C:qube_4a555c8f91.sparta_292a8e0bc2(),D:sparta_b312525d69(_A0)},_A1:{_A:g,B:Al,A:_D,C:qube_4a555c8f91.sparta_0743ffefe3(),D:sparta_b312525d69(_A1)},_A2:{_A:'spartaqube_notebook',B:Ah,A:_D,C:qube_c047cb086e.sparta_810ac21b6e(),D:sparta_b312525d69(_A2)},_A3:{_A:'spartaqube_statistics',B:Am,A:_D,C:qube_c047cb086e.sparta_7b2c267270(),D:sparta_b312525d69(_A3)},F:{_A:F,B:T(F),A:_D,C:qube_c8c729fb5f.sparta_fd8f337faa(),D:sparta_b312525d69(F)},A6:{_A:F,B:T(A6),A:_D,C:qube_c8c729fb5f.sparta_67a66adc0d(),D:sparta_b312525d69(A6)},A7:{_A:F,B:T(A7),A:_D,C:qube_c8c729fb5f.sparta_a4f3333044(),D:sparta_b312525d69(A7)},A8:{_A:F,B:T(A8),A:_D,C:qube_c8c729fb5f.sparta_38004f4984(),D:sparta_b312525d69(A8)},A9:{_A:F,B:T(A9),A:_D,C:qube_c8c729fb5f.sparta_1f5e2aa72c(),D:sparta_b312525d69(A9)},AA:{_A:F,B:T(AA),A:_D,C:qube_c8c729fb5f.sparta_7f5339d211(),D:sparta_b312525d69(AA)},AB:{_A:F,B:T(AB),A:_D,C:qube_c8c729fb5f.sparta_1ef5f1da46(),D:sparta_b312525d69(AB)},AC:{_A:F,B:T(AC),A:_D,C:qube_c8c729fb5f.sparta_b1db67a90e(),D:sparta_b312525d69(AC)},AD:{_A:F,B:T(AD),A:_D,C:qube_c8c729fb5f.sparta_465f82310a(),D:sparta_b312525d69(AD)},AE:{_A:F,B:T(AE),A:_D,C:qube_c8c729fb5f.sparta_0f0f5d5182(),D:sparta_b312525d69(AE)},AF:{_A:F,B:T(AF),A:_D,C:qube_c8c729fb5f.sparta_7301ce4365(),D:sparta_b312525d69(AF)},AG:{_A:F,B:T(AG),A:_D,C:qube_c8c729fb5f.sparta_bd8855ccc9(),D:sparta_b312525d69(AG)},AH:{_A:F,B:T(AH),A:_D,C:qube_c8c729fb5f.sparta_286bbdfb05(),D:sparta_b312525d69(AH)},AI:{_A:F,B:L(AI),A:_D,C:qube_a07e497a99.sparta_043e1830d4(),D:sparta_b312525d69(AI)},AJ:{_A:F,B:L(AJ),A:_D,C:qube_a07e497a99.sparta_471a8cb5f1(),D:sparta_b312525d69(AJ)},AK:{_A:F,B:L(AK),A:_D,C:qube_a07e497a99.sparta_f5b3f408d0(),D:sparta_b312525d69(AK)},AL:{_A:F,B:L(AL),A:_D,C:qube_a07e497a99.sparta_8dafa0e303(),D:sparta_b312525d69(AL)},AM:{_A:F,B:L(AM),A:_D,C:qube_a07e497a99.sparta_dc36e52ece(),D:sparta_b312525d69(AM)},AN:{_A:F,B:L(AN),A:_D,C:qube_a07e497a99.sparta_7caa7dd349(),D:sparta_b312525d69(AN)},AO:{_A:F,B:L(AO),A:_D,C:qube_a07e497a99.sparta_4375cccda4(),D:sparta_b312525d69(AO)},AP:{_A:F,B:L(AP),A:_D,C:qube_a07e497a99.sparta_5e17eebfa7(),D:sparta_b312525d69(AP)},AQ:{_A:F,B:L(AQ),A:_D,C:qube_a07e497a99.sparta_2aac8a9f46(),D:sparta_b312525d69(AQ)},AR:{_A:F,B:L(AR),A:_D,C:qube_a07e497a99.sparta_1e88e19bb7(),D:sparta_b312525d69(AR)},AS:{_A:F,B:L(AS),A:_D,C:qube_a07e497a99.sparta_338f6767f0(),D:sparta_b312525d69(AS)},AT:{_A:F,B:L(AT),A:_D,C:qube_a07e497a99.sparta_809444fece(),D:sparta_b312525d69(AT)},AU:{_A:F,B:L(AU),A:_D,C:qube_a07e497a99.sparta_0a9bc99ced(),D:sparta_b312525d69(AU)},AV:{_A:F,B:L(AV),A:_D,C:qube_a07e497a99.sparta_7b28a7ce45(),D:sparta_b312525d69(AV)},AW:{_A:F,B:L(AW),A:_D,C:qube_a07e497a99.sparta_6d8d2c98bc(),D:sparta_b312525d69(AW)},AX:{_A:F,B:L(AX),A:_D,C:qube_a07e497a99.sparta_f9dc69ec0d(),D:sparta_b312525d69(AX)},AY:{_A:F,B:L(AY),A:_D,C:qube_a07e497a99.sparta_7e2f851ba7(),D:sparta_b312525d69(AY)},AZ:{_A:F,B:L(AZ),A:_D,C:qube_a07e497a99.sparta_c85204cb1d(),D:sparta_b312525d69(AZ)},Aa:{_A:F,B:L(Aa),A:_D,C:qube_a07e497a99.sparta_d5fe121175(),D:sparta_b312525d69(Aa)},Ab:{_A:F,B:L(Ab),A:_D,C:qube_a07e497a99.sparta_dbbde63f9b(),D:sparta_b312525d69(Ab)}};return An
def sparta_19443989ab(plot_type=_F):
	A=plot_type;F=sparta_416d6d8c82()
	try:C=[B for B in F if B['ID']==A][0];D=C['Library'];E=C['Name']
	except:D='';E=A.capitalize()
	B=sparta_a1fc3f8405()[A];B['plot_name']=E;B['plot_library']=D;return B