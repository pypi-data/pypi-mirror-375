[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pyTorchAutoForge"
description='PyTorchAutoForge library is based on raw PyTorch and designed to automate DNN development, model tracking and deployment, tightly integrated with MLflow and Optuna. It supports Spiking networks libraries (WIP). Deployment can be performed using ONNx, pyTorch facilities or TensorRT (WIP). The library is designed to be compatible with Jetson Orin Nano Jetpack rev6.1, with bash script to automatically configure virtualenv.'
readme = "README.md"
requires-python = ">=3.10"
dynamic = ["version"]
license = {text = "MIT"}
authors = [
    { name = "Pietro Califano (PC)", email = "petercalifano.gs@gmail.com" }
]
dependencies = [
    "torch-tb-profiler",
    "scikit-learn<=1.6.1",
    "dacite",
    "captum",
    "scipy",
    "numpy",
    "onnx<=1.18.0",
    "onnxscript",
    "onnxruntime",
    "inputimeout",
    "optuna",
    "mlflow<=3.2",
    "kornia",
    "albumentations",
    "pytest<=8.3.5",
    "mypy",
    "seaborn",
    "matplotlib<=3.10.0",
    "colorama",
    "msgpack",
    "torchinfo",
    "torch<=2.8.0; platform_machine == 'x86_64'", # Only for x86_64. Jetson requires nvidia version
    "torchvision; platform_machine == 'x86_64'", # Only for x86_64. Jetson requires nvidia version
    "lietorch; platform_machine == 'x86_64'",
    "norse; platform_machine == 'x86_64'",
    "tonic; platform_machine == 'x86_64'",
    "expelliarmus; platform_machine == 'x86_64'",
    "statsmodels"
]

classifiers=[
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.10',
    'License :: OSI Approved :: MIT License',
    'Operating System :: POSIX :: Linux',
]

# pyproject.toml (if using PEP 621)
[project.optional-dependencies]
cuda_all = [
    "pynvml; platform_machine == 'x86_64'", 
    "pycuda; platform_machine == 'x86_64'", 
]

[tool.setuptools.packages.find]
include = ["pyTorchAutoForge", "pyTorchAutoForge.*"]

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests/*"]
python_files = ["test*.py", "test_*.py", "*_test.py"]
python_functions = ["test_*", "*test", "test*", "Test*"]
addopts = """--ignore=lib/
             --maxfail=10
             -raxs
             --disable-warnings 
           """
console_output_style = "count"

# Specify folders to ignore
norecursedirs = ["*deprecated*", "*data", "*cache", "**/site-packages", "dist", "build"]
collect_ignore = ["**/*deprecated*"]

# Adding additional pytest configurations if necessary
# For example, you could set configuration for logging
log_cli_level = "INFO"  # Ensure log level is a string for compatibility
log_file_level = "DEBUG" # Adding log file level for more detailed logs

# Adding configuration for test coverage
[tool.coverage.run]
branch = true
source = ["pyTorchAutoForge"]
omit = ["tests/*"]  # Excludes tests from coverage analysis

[tool.coverage.report]
show_missing = true

[tool.coverage.html]
directory = "coverage_html_report"

#mypy configuration
[tool.mypy]
files = ["pyTorchAutoForge", "tests"]  
ignore_missing_imports = true  # Ignore type errors from external libraries
exclude = [
    "site-packages/.*",
    ".venv/.*",
    "env/.*",
    "dist/.*",
    "build/.*",
    "deprecated/.*",
    "cache/.*",
    "data/.*"
]
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
disallow_untyped_defs = false  # Enforce type checking on all function definitions
disallow_untyped_decorators = true  # Ensure decorators are typed
strict = false
cache_dir = ".mypy_cache"
allow_redefinition = true
warn_unused_configs = true
show_error_codes = true
show_column_numbers = true
check_untyped_defs = true
follow_imports = "normal"
local_partial_types = true
enable_error_code = "possibly-undefined"

# Versioning settings with hatch and hatch-vcs
[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[tool.hatch.build.targets.sdist]
only-include = ["pyTorchAutoForge", "conda_install.sh", "environment.yml", "examples/example_*", "README.md", "LICENSE", "pyproject.toml", "_version.py"]
