name: Functional tests

# NOTE(mikal): git repos are checked out to /srv/github/_work/{repo}/{repo}
# which is available as GITHUB_WORKSPACE. You can find other environment
# variables at https://docs.github.com/en/actions/learn-github-actions/environment-variables

on:
  pull_request:
    branches:
      - develop
      - v*-releases
    paths-ignore:
      - 'docs/**'
      - mkdocs.yml

jobs:
  lint:
    runs-on: [self-hosted, vm]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-lint
      cancel-in-progress: true

    steps:
      - name: Checkout code with two commits
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Lint with flake8
        run: |
          /usr/bin/tox -eflake8

  # NOTE(mikal): we need this one early because renovate creates a lot of PRs
  # where the proposed combination of dependencies doesn't actually install and
  # I don't want to waste a lot of CI resources on them.
  requirements-check:
    needs: lint
    runs-on: [self-hosted, vm]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-requirements
      cancel-in-progress: true

    steps:
      - name: Checkout client-python
        uses: actions/checkout@v4
        with:
          path: client-python
          fetch-depth: 0

      - name: Attempt to install requirements
        run: |
          cd ${GITHUB_WORKSPACE}
          python3 -mvenv venv
          venv/bin/pip3 install -r client-python/requirements.txt

  build38:
    needs: lint
    runs-on: [self-hosted, vm]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-build38
      cancel-in-progress: true

    steps:
      - name: Checkout code with two commits
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Run python3 unit tests
        run: |
          /usr/bin/tox -epy3

  functional_matrix:
    name: "${{ matrix.os.description }}"
    needs: requirements-check
    strategy:
      fail-fast: false
      matrix:
        os: [
          {
            description: 'debian 11 single machine',
            job_name: 'debian-11-localhost',
            base_image: 'sf://label/ci-images/debian-11',
            base_image_user: 'debian',
            topology: 'localhost',
            stestr_config: 'cluster-ci.conf',
            concurrency: 3
          },
        ]
    runs-on: [self-hosted, vm]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.os.job_name }}
      cancel-in-progress: true

    steps:
      - name: Log matrix details
        run: |
          echo "job_name: ${{ matrix.os.job_name }}"
          echo "base_image: ${{ matrix.os.base_image }}"
          echo "base_image_user: ${{ matrix.os.base_image_user }}"
          echo "topology: ${{ matrix.os.topology }}"
          echo "concurrency: ${{ matrix.os.concurrency }}"

      - name: Setup test environment
        uses: shakenfist/actions/setup-test-environment@main

      - name: Build infrastructure
        run: |
          cd ${GITHUB_WORKSPACE}/actions
          ansible-playbook -i /home/debian/ansible-hosts \
              --extra-vars "identifier=${SHAKENFIST_NAMESPACE} source_path=${GITHUB_WORKSPACE} \
              base_image=${{ matrix.os.base_image }} base_image_user=${{ matrix.os.base_image_user }}" \
              ansible/ci-topology-${{ matrix.os.topology }}.yml

          if [ "${{ matrix.os.topology }}" == "localhost" ]; then
            echo "UPLOAD_TARGET=10.0.0.10" >> $GITHUB_ENV
          else
            nodes=(10.0.0.20 10.0.0.21 10.0.0.22 10.0.0.23 10.0.0.24)
            random_index=$(( RANDOM % 5 ))
            echo "UPLOAD_TARGET=${nodes[$random_index]}" >> $GITHUB_ENV
          fi

      - name: Log environmental configuration
        run: |
          echo "## ci-environment.sh"
          cat ${GITHUB_WORKSPACE}/ci-environment.sh
          echo
          echo "## Environment variables"
          echo "SF_HEAD_SHA = ${SF_HEAD_SHA}"
          echo "SHAKENFIST_NAMESPACE = ${SHAKENFIST_NAMESPACE}"
          echo "UPLOAD_TARGET = ${UPLOAD_TARGET}"

      - name: Copy CI tools to primary
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          cd ${GITHUB_WORKSPACE}/actions
          scp -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null -rp tools \
              ${{ matrix.os.base_image_user }}@${primary}:.

          echo ""
          echo "Copied tools:"
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} "ls tools"

      - name: Log github actions buffering status
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          cd ${GITHUB_WORKSPACE}/actions
          tools/run_remote ${primary} python3 tools/buffer.py

      - name: Run getsf installer on primary
        timeout-minutes: 30
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} /tmp/getsf-wrapper
          echo ""
          echo ""
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} \
              'sudo rm /etc/apache2/sites-enabled/*; sudo a2ensite sf-example.conf; sudo apachectl graceful'

      - name: Wait for API to start answering
        run: |
          set +e

          . ${GITHUB_WORKSPACE}/ci-environment.sh
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} 'sudo chmod ugo+r /etc/sf/* /var/log/syslog'

          count=0
          while [ $count -lt 60 ]
          do
            ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} '. /etc/sf/sfrc; sf-client instance list'
            if [ $? == 0 ]; then
              exit 0
            fi

            count=$(( $count + 1 ))
            sleep 5
          done

          exit 1

      - name: Import cached images
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh

          setup="export PATH=$PATH:/srv/shakenfist/venv/bin;"
          setup="${setup} . /etc/sf/sfrc;"
          setup="${setup} export SHAKENFIST_API_URL=http://localhost:13000;"
          setup="${setup} sf-client artifact upload"
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${UPLOAD_TARGET} \
              "${setup} debian-11 /srv/ci/debian:11 --shared --no-checksum"

      - name: Make the traces directory
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} "sudo mkdir -p /srv/ci/traces; sudo chown -R ${{ matrix.os.base_image_user }}:${{ matrix.os.base_image_user }} /srv/ci/traces"

      - name: Run functional tests
        timeout-minutes: 120
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          scp -rp -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${GITHUB_WORKSPACE}/shakenfist \
              ${{ matrix.os.base_image_user }}@${primary}:shakenfist
          scp -rp -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${GITHUB_WORKSPACE}/client-python \
              ${{ matrix.os.base_image_user }}@${primary}:client-python

          script="cd shakenfist/deploy/;"
          script="${script} . /etc/sf/sfrc;"

          script="${script} python3 -mvenv /tmp/functests;"
          script="${script} /tmp/functests/bin/pip3 install -U -r ../requirements.txt -r ../test-requirements.txt;"
          script="${script} echo -e '\n\nvenv pip after packages:\n';"
          script="${script} /tmp/functests/bin/pip3 list;"
          script="${script} echo -e '\n---\n';"

          script="${script} echo -e '\n\nInstall client-python:\n';"
          script="${script} cd ~/client-python;"
          script="${script} /tmp/functests/bin/pip3 install -e .;"

          script="${script} cd ~/shakenfist/deploy/;"
          script="${script} set -e;"
          script="${script} /tmp/functests/bin/stestr run --config ${{ matrix.os.stestr_config }} --concurrency=${{ matrix.os.concurrency}};"

          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} "${script}"

      - name: List slowest tests
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh

          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} \
              "cd shakenfist/deploy; stestr slowest || true"

      - name: List failing tests
        if: failure()
        id: failures
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh

          echo "Gathering list of failed tests..."
          touch ${GITHUB_WORKSPACE}/failed
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} \
              "cd shakenfist/deploy; stestr failing || true" > ${GITHUB_WORKSPACE}/failed
          echo

          failed=$(cat ${GITHUB_WORKSPACE}/failed | egrep "^FAIL: " | \
              sed -z 's/FAIL: shakenfist_ci\.//g;s/\n/, /g;s/, $/\n/')

          echo "Failed tests:"
          cat ${GITHUB_WORKSPACE}/failed
          echo

          echo "failures<<EOF" >> ${GITHUB_OUTPUT}
          echo "${failed}" >> ${GITHUB_OUTPUT}
          echo "EOF" >> ${GITHUB_OUTPUT}
          echo "GITHUB_OUTPUT is:"
          cat ${GITHUB_OUTPUT}

      - name: Check logs
        if: always()
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          cd ${GITHUB_WORKSPACE}/actions
          tools/run_remote ${primary} "sudo bash tools/ci_log_checks.sh develop ${{ matrix.os.job_name }}"

      # On Ubuntu 22.04 the cleaner is rated a CPU hog because of etcd cleanup
      # cost. That's not really something we can control, so just ignore the CPU
      # usage of that process instead.
      - name: Check SF process CPU usage
        if: always()
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary} '. /etc/sf/sfrc; sf-client node cpuhogs -t 1.25 --ignore sf_cleaner'

      - name: Check for reasonable data rates
        timeout-minutes: 5
        if: always()
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          cd ${GITHUB_WORKSPACE}/actions
          tools/run_remote ${primary} "sudo bash tools/ci_event_checks.sh develop"

      - name: Fetch and tweak inventory
        if: always()
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          scp -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ matrix.os.base_image_user }}@${primary}:/etc/sf/inventory.yaml /srv/github/
          sed -i 's|/root/.ssh|/home/debian/.ssh|g' /srv/github/inventory.yaml

          echo "====="
          cat /srv/github/inventory.yaml

      - name: Gather logs
        if: always()
        run: |
          set -x

          # Fetch unit test tracing. Sometimes this isn't present if we failed
          # super early in the CI job.
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          mkdir -p /srv/github/bundle/
          scp -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null -rp \
              ${{ matrix.os.base_image_user }}@${primary}:/srv/ci/traces \
              /srv/github/bundle/ || true

          # We need the ssh key in the place ansible expects it to be, which isn't
          # true on the CI worker node.
          cp /srv/github/id_ci /home/debian/.ssh/id_rsa
          cp /srv/github/id_ci.pub /home/debian/.ssh/id_rsa.pub

          ansible-playbook -i /srv/github/inventory.yaml \
              --extra-vars "base_image_user=${{ matrix.os.base_image_user }} \
              ansible_ssh_common_args='-o StrictHostKeyChecking=no'" \
              ${GITHUB_WORKSPACE}/actions/ansible/ci-gather-logs.yml

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-functional-cluster-${{ matrix.os.job_name }}
          retention-days: 90
          if-no-files-found: error
          path: /srv/github/artifacts/bundle.zip

  ansible-modules:
    runs-on: [self-hosted, vm]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    # NOTE(mikal): git repos are checked out to /srv/github/_work/{repo}/{repo}
    # which is available as GITHUB_WORKSPACE. You can find other environment
    # variables at https://docs.github.com/en/actions/learn-github-actions/environment-variables

    steps:
      - name: Setup test environment
        uses: shakenfist/actions/setup-test-environment@main

      - name: Build infrastructure
        run: |
          cd ${GITHUB_WORKSPACE}/actions
          ansible-playbook -i /home/debian/ansible-hosts \
              --extra-vars "identifier=${SHAKENFIST_NAMESPACE} source_path=${GITHUB_WORKSPACE} \
              base_image=sf://label/ci-images/debian-11 base_image_user=debian" \
              ansible/ci-topology-slim-primary.yml

      - name: Log environmental configuration
        run: |
          echo "## ci-environment.sh"
          cat ${GITHUB_WORKSPACE}/ci-environment.sh
          echo
          echo "## Environment variables"
          echo "SF_HEAD_SHA = ${SF_HEAD_SHA}"
          echo "SHAKENFIST_NAMESPACE = ${SHAKENFIST_NAMESPACE}"
          echo "UPLOAD_TARGET = ${UPLOAD_TARGET}"

      - name: Copy CI tools to primary
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          cd ${GITHUB_WORKSPACE}/actions
          scp -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null -rp tools \
              debian@${primary}:.

          echo ""
          echo "Copied tools:"
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              debian@${primary} "ls tools"

      - name: Log github actions buffering status
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          cd ${GITHUB_WORKSPACE}/actions
          tools/run_remote ${primary} python3 tools/buffer.py

      - name: Run getsf installer on primary
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              debian@$primary /tmp/getsf-wrapper
          echo ""
          echo ""
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              debian@$primary \
              'sudo rm /etc/apache2/sites-enabled/*; sudo a2ensite sf-example.conf; sudo apachectl graceful'

      - name: Wait for API to start answering
        run: |
          set +e

          . ${GITHUB_WORKSPACE}/ci-environment.sh
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              debian@$primary 'sudo chmod ugo+r /etc/sf/* /var/log/syslog'

          count=0
          while [ $count -lt 60 ]
          do
            ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              debian@$primary '. /etc/sf/sfrc; sf-client instance list'
            if [ $? == 0 ]; then
              exit 0
            fi

            count=$(( $count + 1 ))
            sleep 5
          done

          exit 1

      - name: Import cached images
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              debian@$primary \
              '. /etc/sf/sfrc; sf-client artifact upload ubuntu-1804 /srv/ci/ubuntu:18.04 --shared'
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              debian@$primary \
              '. /etc/sf/sfrc; sf-client artifact upload ubuntu-2004 /srv/ci/ubuntu:20.04 --shared'
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              debian@$primary \
              '. /etc/sf/sfrc; sf-client artifact upload debian-11 /srv/ci/debian:11 --shared'
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              debian@$primary \
              '. /etc/sf/sfrc; sf-client artifact upload cirros /srv/ci/cirros --shared'

      - name: Run ansible module tests
        timeout-minutes: 120
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          scp -rp -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${GITHUB_WORKSPACE}/shakenfist \
              debian@${primary}:shakenfist
          scp -rp -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${GITHUB_WORKSPACE}/client-python \
              debian@${primary}:client-python

          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              debian@$primary "cd shakenfist/deploy; . /etc/sf/sfrc; bash ansiblemoduletests.sh"

      - name: Check logs
        if: always()
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          cd ${GITHUB_WORKSPACE}/actions
          tools/run_remote ${primary} "sudo bash tools/ci_log_checks.sh develop ansible-module-tests"

      # On Ubuntu 22.04 the cleaner is rated a CPU hog because of etcd cleanup
      # cost. That's not really something we can control, so just ignore the CPU
      # usage of that process instead.
      - name: Check SF process CPU usage
        if: always()
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          ssh -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              debian@${primary} '. /etc/sf/sfrc; sf-client node cpuhogs -t 1.25 --ignore sf_cleaner'

      - name: Check for reasonable data rates
        timeout-minutes: 5
        if: always()
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          cd ${GITHUB_WORKSPACE}/actions
          tools/run_remote ${primary} "sudo bash tools/ci_event_checks.sh develop"

      - name: Fetch and tweak inventory
        if: always()
        run: |
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          scp -i /srv/github/id_ci -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              debian@${primary}:/etc/sf/inventory.yaml /srv/github/
          sed -i 's|/root/.ssh|/home/debian/.ssh|g' /srv/github/inventory.yaml

          echo "====="
          cat /srv/github/inventory.yaml

      - name: Gather logs
        if: always()
        run: |
          set -x

          # Fetch unit test tracing. Sometimes this isn't present if we failed
          # super early in the CI job.
          . ${GITHUB_WORKSPACE}/ci-environment.sh
          mkdir -p /srv/github/bundle/
          scp -i /srv/github/id_ci -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null -rp \
              debian@${primary}:/srv/ci/traces \
              /srv/github/bundle/ || true

          # We need the ssh key in the place ansible expects it to be, which isn't
          # true on the CI worker node.
          cp /srv/github/id_ci /home/debian/.ssh/id_rsa
          cp /srv/github/id_ci.pub /home/debian/.ssh/id_rsa.pub

          ansible-playbook -i /srv/github/inventory.yaml \
              --extra-vars "base_image_user=debian \
              ansible_ssh_common_args='-o StrictHostKeyChecking=no'" \
              ${GITHUB_WORKSPACE}/actions/ansible/ci-gather-logs.yml

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle.zip
          retention-days: 90
          if-no-files-found: error
          path: /srv/github/artifacts/bundle.zip