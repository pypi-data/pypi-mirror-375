[tool.poetry]
name = "pyspdbutils"
version = "1.0.1"
description = "Production-grade database utilities with universal interface and hash collision detection"
authors = [
    "Debi Prasad Rath <debi.rath817@gmail.com>",
    "Sanjeev Kumar Pandey <sanjeev9088@gmail.com>",
    "Deepak Gadge <dip.gadge2008@hotmail.com>",
    "Sathishkumar Paramashivam <psathish2@gmail.com>",
]
maintainers = [
    "Sanjeev Kumar Pandey <sanjeev9088@gmail.com>",
    "Deepak Gadge <dip.gadge2008@hotmail.com>", 
    "Sathishkumar Paramashivam <psathish2@gmail.com>",
]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/yourusername/pyspdbutils"
repository = "https://github.com/yourusername/pyspdbutils"
documentation = "https://github.com/yourusername/pyspdbutils#readme"
keywords = [
    "database", "sql", "orm", "utilities", "postgresql", "mysql", 
    "sqlite", "oracle", "snowflake", "databricks", "redshift", "teradata"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
packages = [{include = "db_utils"}]

[tool.poetry.dependencies]
python = "^3.8"
sqlalchemy = "^1.4.0"
python-dotenv = "^0.19.0"

# Optional database dependencies
mysql-connector-python = {version = "^8.0.0", optional = true}
PyMySQL = {version = "^1.0.0", optional = true}
psycopg2-binary = {version = "^2.9.0", optional = true}
oracledb = {version = "^1.0.0", optional = true}
pyodbc = {version = "^4.0.0", optional = true}
snowflake-connector-python = {version = "^3.0.0", optional = true}
databricks-sql-connector = {version = "^2.0.0", optional = true}
redshift-connector = {version = "^2.0.0", optional = true}
teradatasql = {version = "^17.0.0", optional = true}
ibm-db = {version = "^3.0.0", optional = true}

[tool.poetry.extras]
mysql = ["mysql-connector-python", "PyMySQL"]
postgresql = ["psycopg2-binary"]
oracle = ["oracledb"]
sqlserver = ["pyodbc"]
snowflake = ["snowflake-connector-python"]
databricks = ["databricks-sql-connector"]
redshift = ["redshift-connector"]
teradata = ["teradatasql"]
db2 = ["ibm-db"]
all = [
    "mysql-connector-python", "PyMySQL", "psycopg2-binary", "oracledb",
    "pyodbc", "snowflake-connector-python", "databricks-sql-connector",
    "redshift-connector", "teradatasql", "ibm-db"
]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
black = "^22.0.0"
flake8 = "^5.0.0"
mypy = "^1.0.0"
pre-commit = "^2.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["db_utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
