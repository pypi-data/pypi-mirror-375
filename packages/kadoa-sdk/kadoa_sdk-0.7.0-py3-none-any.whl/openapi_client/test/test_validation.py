# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.validation import Validation

class TestValidation(unittest.TestCase):
    """Validation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Validation:
        """Test Validation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Validation`
        """
        model = Validation()
        if include_optional:
            return Validation(
                id = 'abc123',
                workflow_id = '',
                job_id = '',
                anomalies_count_total = 1.337,
                anomalies_count_by_rule = {
                    'key' : 1.337
                    },
                created_at = None,
                updated_at = None,
                completed_at = None,
                metadata = openapi_client.models.validation_metadata.ValidationMetadata(
                    custom_rules = [
                        openapi_client.models.dynamic_rule_config.DynamicRuleConfig(
                            name = '', 
                            description = '', 
                            rule_type = 'custom_sql', 
                            target_columns = [
                                ''
                                ], 
                            parameters = openapi_client.models.dynamic_rule_config_parameters.DynamicRuleConfig_parameters(
                                pattern = '', 
                                flags = '', 
                                sql = '', 
                                prompt = '', 
                                params = [
                                    null
                                    ], ), )
                        ], 
                    library_rules = [
                        openapi_client.models.validation_metadata_library_rules_inner.ValidationMetadata_libraryRules_inner(
                            id = '', 
                            name = '', 
                            description = '', )
                        ], 
                    total_rules_executed = 1.337, 
                    used_prompt = '', 
                    invalid_rules = [
                        openapi_client.models.validation_metadata_invalid_rules_inner.ValidationMetadata_invalidRules_inner(
                            name = '', 
                            error = '', )
                        ], 
                    records_validated = 1.337, ),
                error = '',
                is_dry_run = True,
                is_workflow_triggered = True,
                dataset_uri = '',
                anomalies_parquet_path = '',
                strategy = 'ISOLATED'
            )
        else:
            return Validation(
                id = 'abc123',
                workflow_id = '',
                job_id = '',
                anomalies_count_total = 1.337,
                anomalies_count_by_rule = {
                    'key' : 1.337
                    },
                created_at = None,
                updated_at = None,
        )
        """

    def testValidation(self):
        """Test Validation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
