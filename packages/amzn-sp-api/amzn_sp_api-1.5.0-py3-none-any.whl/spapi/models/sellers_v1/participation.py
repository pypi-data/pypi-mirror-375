# coding: utf-8

"""
    The Selling Partner API for Sellers

    The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Participation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_participating': 'bool',
        'has_suspended_listings': 'bool',
    }

    attribute_map = {
        'is_participating': 'isParticipating',
        'has_suspended_listings': 'hasSuspendedListings',
    }

    def __init__(self, is_participating=None, has_suspended_listings=None, _configuration=None):  # noqa: E501
        """Participation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_participating = None
        self._has_suspended_listings = None
        self.discriminator = None

        self.is_participating = is_participating
        self.has_suspended_listings = has_suspended_listings

    @property
    def is_participating(self):
        """Gets the is_participating of this Participation.  # noqa: E501

        If `true`, the seller participates in the marketplace. Otherwise `false`.  # noqa: E501

        :return: The is_participating of this Participation.  # noqa: E501
        :rtype: bool
        """
        return self._is_participating

    @is_participating.setter
    def is_participating(self, is_participating):
        """Sets the is_participating of this Participation.

        If `true`, the seller participates in the marketplace. Otherwise `false`.  # noqa: E501

        :param is_participating: The is_participating of this Participation.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_participating is None:
            raise ValueError("Invalid value for `is_participating`, must not be `None`")  # noqa: E501

        self._is_participating = is_participating

    @property
    def has_suspended_listings(self):
        """Gets the has_suspended_listings of this Participation.  # noqa: E501

        Specifies if the seller has suspended listings. `true` if the seller Listing Status is set to Inactive, otherwise `false`.  # noqa: E501

        :return: The has_suspended_listings of this Participation.  # noqa: E501
        :rtype: bool
        """
        return self._has_suspended_listings

    @has_suspended_listings.setter
    def has_suspended_listings(self, has_suspended_listings):
        """Sets the has_suspended_listings of this Participation.

        Specifies if the seller has suspended listings. `true` if the seller Listing Status is set to Inactive, otherwise `false`.  # noqa: E501

        :param has_suspended_listings: The has_suspended_listings of this Participation.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and has_suspended_listings is None:
            raise ValueError("Invalid value for `has_suspended_listings`, must not be `None`")  # noqa: E501

        self._has_suspended_listings = has_suspended_listings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Participation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Participation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Participation):
            return True

        return self.to_dict() != other.to_dict()
