#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.1.2
# Product:       sen68
# Model-Version: 1.4.0
#
"""
The class Sen68DeviceBase implements the low level interface of the sensor.
The class Sen68Device extends the Sen68DeviceBase. It provides additional functions to ease the use of the
sensor.
"""

from sensirion_driver_adapters.transfer import execute_transfer
from sensirion_driver_support_types.mixin_access import MixinAccess
from sensirion_i2c_sen68.commands import (ActivateShtHeater, DeviceReset, DeviceStatus, GetDataReady,
                                          GetNoxAlgorithmTuningParameters, GetProductName, GetSerialNumber,
                                          GetShtHeaterMeasurements, GetVersion, GetVocAlgorithmState,
                                          GetVocAlgorithmTuningParameters, ReadAndClearDeviceStatus, ReadDeviceStatus,
                                          ReadMeasuredRawValues, ReadMeasuredValuesAsIntegers,
                                          ReadNumberConcentrationValuesAsIntegers, SetNoxAlgorithmTuningParameters,
                                          SetTemperatureAccelerationParameters, SetTemperatureOffsetParameters,
                                          SetVocAlgorithmState, SetVocAlgorithmTuningParameters,
                                          StartContinuousMeasurement, StartFanCleaning, StopMeasurement)

from sensirion_i2c_sen68.result_types import (SignalHcho, SignalHumidity, SignalMassConcentrationPm10p0,
                                              SignalMassConcentrationPm1p0, SignalMassConcentrationPm2p5,
                                              SignalMassConcentrationPm4p0, SignalNoxIndex,
                                              SignalNumberConcentrationPm0p5, SignalNumberConcentrationPm10p0,
                                              SignalNumberConcentrationPm1p0, SignalNumberConcentrationPm2p5,
                                              SignalNumberConcentrationPm4p0, SignalTemperature, SignalVocIndex)


class Sen68DeviceBase:
    """Low level API implementation of SEN68"""

    def __init__(self, channel):
        self._channel = channel

    @property
    def channel(self):
        return self._channel

    def start_continuous_measurement(self):
        """
        Starts a continuous measurement.
        After starting the measurement, it takes some time (~1.1s) until the
        first measurement results are available. You could poll with the command
        "Get Data Ready" to check when the results are ready to read.
        This command is only available in idle mode. If the device is already
        in any measure mode, this command has no effect.
        """
        transfer = StartContinuousMeasurement()
        return execute_transfer(self._channel, transfer)

    def stop_measurement(self):
        """
        Stops the measurement and returns to idle mode. After sending this
        command, wait at least 1000 ms before starting a new measurement.
        If the device is already in idle mode, this command has no effect.
        """
        transfer = StopMeasurement()
        return execute_transfer(self._channel, transfer)

    def get_data_ready(self):
        """
        This command can be used to check if new measurement results are ready to read. The data ready flag
        is automatically reset after reading the measurement values.

        :return padding:
            Padding byte, always 0x00.
        :return data_ready:
            True (0x01) if data is ready, False (0x00) if not. When no measurement is running, False will be
            returned.
        """
        transfer = GetDataReady()
        return execute_transfer(self._channel, transfer)

    def read_measured_values_as_integers(self):
        """
        Returns the measured values.
        The command "Get Data Ready" can be used to check if new
        data is available since the last read operation. If no new data is
        available, the previous values will be returned again. If no data
        is available at all (e.g. measurement not running for at least one
        second), all values will be at their upper limit (0xFFFF for uint16,
        0x7FFF for int16).

        :return mass_concentration_pm1p0:
            Value is scaled with factor 10: PM1.0 [µg/m³] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned.*
        :return mass_concentration_pm2p5:
            Value is scaled with factor 10: PM2.5 [µg/m³] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned.*
        :return mass_concentration_pm4p0:
            Value is scaled with factor 10: PM4.0 [µg/m³] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned.*
        :return mass_concentration_pm10p0:
            Value is scaled with factor 10: PM10.0 [µg/m³] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned.*
        :return ambient_humidity:
            Value is scaled with factor 100: RH [%] = value / 100
            *Note: If this value is unknown, 0x7FFF is returned.*
        :return ambient_temperature:
            Value is scaled with factor 200: T [°C] = value / 200
            *Note: If this value is unknown, 0x7FFF is returned.*
        :return voc_index:
            Value is scaled with factor 10: VOC Index = value / 10
            *Note: If this value is unknown, 0x7FFF is returned.*
        :return nox_index:
            Value is scaled with factor 10: NOx Index = value / 10
            *Note: If this value is unknown, 0x7FFF is returned. During
            the first 10..11 seconds after power-on or device reset, this
            value will be 0x7FFF as well.*
        :return hcho:
            Value is scaled with a factor of 10: HCHO [ppm] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned. During the first
            60 seconds after the first measurement start after power-on or
            device reset, this value will be 0xFFFF as well.*
        """
        transfer = ReadMeasuredValuesAsIntegers()
        return execute_transfer(self._channel, transfer)

    def read_number_concentration_values_as_integers(self):
        """
        Returns the measured number concentration values.
        The command "Get Data Ready" can be used to check if new
        data is available since the last read operation. If no new data is
        available, the previous values will be returned again. If no data
        is available at all (e.g. measurement not running for at least one
        second), all values will be at their upper limit (0xFFFF for uint16).

        :return number_concentration_pm0p5:
            Value is scaled with factor 10: PM0.5 [particles/cm³] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned.*
        :return number_concentration_pm1p0:
            Value is scaled with factor 10: PM1.0 [particles/cm³] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned.*
        :return number_concentration_pm2p5:
            Value is scaled with factor 10: PM2.5 [particles/cm³] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned.*
        :return number_concentration_pm4p0:
            Value is scaled with factor 10: PM4.0 [particles/cm³] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned.*
        :return number_concentration_pm10p0:
            Value is scaled with factor 10: PM10.0 [particles/cm³] = value / 10
            *Note: If this value is unknown, 0xFFFF is returned.*
        """
        transfer = ReadNumberConcentrationValuesAsIntegers()
        return execute_transfer(self._channel, transfer)

    def read_measured_raw_values(self):
        """
        Returns the measured raw values.
        The command "Get Data Ready" can be used to check if new
        data is available since the last read operation. If no new data is
        available, the previous values will be returned again. If no data
        is available at all (e.g. measurement not running for at least one
        second), all values will be at their upper limit (0xFFFF for uint16,
        0x7FFF for int16).

        :return raw_humidity:
            Value is scaled with factor 100: RH [%] = value / 100
            *Note: If this value is unknown, 0x7FFF is returned.*
        :return raw_temperature:
            Value is scaled with factor 200: T [°C] = value / 200
            *Note: If this value is unknown, 0x7FFF is returned.*
        :return raw_voc:
            Raw measured VOC ticks without scale factor.
            *Note: If this value is unknown, 0xFFFF is returned.*
        :return raw_nox:
            Raw measured NOx ticks without scale factor.
            *Note: If this value is unknown, 0xFFFF is returned. During
            the first 10..11 seconds after power-on or device reset, this
            value will be 0xFFFF as well.*
        """
        transfer = ReadMeasuredRawValues()
        return execute_transfer(self._channel, transfer)

    def start_fan_cleaning(self):
        """
        This command triggers fan cleaning. The fan is set to the maximum
        speed for 10 seconds and then automatically stopped. Wait at least 10s
        after this command before starting a measurement.

        .. note::
            This command is only available in idle mode.
        """
        transfer = StartFanCleaning()
        return execute_transfer(self._channel, transfer)

    def set_temperature_offset_parameters(self, offset, slope, time_constant, slot):
        """
        This command allows to compensate temperature effects of the
        design-in at customer side by applying custom temperature offsets
        to the ambient temperature. The compensated ambient temperature is
        calculated as follows:
        T_Ambient_Compensated = T_Ambient + (slope * T_Ambient) + offset
        Where slope and offset are the values set with this command,
        smoothed with the specified time constant.
        All temperatures (T_Ambient_Compensated, T_Ambient and offset)
        are represented in °C.
        There are 5 temperature offset slots available that all contribute
        additively to T_Ambient_Compensated. The default values for
        the temperature offset parameters are all zero, meaning that
        T_Ambient_Compensated is equal to T_Ambient by default.
        The parameters can be changed in any state of the device, i.e. both in
        idle mode and in measure mode.

        :param offset:
            Constant temperature offset scaled with factor 200 (T [°C] = value / 200).
        :param slope:
            Normalized temperature offset slope scaled with factor 10000 (applied factor = value / 10000).
        :param time_constant:
            The time constant determines how fast the new slope and offset will be applied.
            After the specified value in seconds, 63% of the new slope and offset are applied.
            A time constant of zero means the new values will be applied immediately
            (within the next measure interval of 1 second).
        :param slot:
            The temperature offset slot to be modified.
            Valid values are 0 .. 4. If the value is outside this range,
            the parameters will not be applied.

        .. note::
            This configuration is volatile, i.e. the parameters will be reverted to their default value of zero
            after a device reset.

        :Example:
            .. code-block:: python

                sensor.set_temperature_offset_parameters(1, 10, 1, 0)

        """
        transfer = SetTemperatureOffsetParameters(offset, slope, time_constant, slot)
        return execute_transfer(self._channel, transfer)

    def set_voc_algorithm_tuning_parameters(self, index_offset, learning_time_offset_hours, learning_time_gain_hours,
                                            gating_max_duration_minutes, std_initial, gain_factor):
        """
        Sets the parameters to customize the VOC algorithm.
        This configuration is volatile, i.e. the parameters will be
        reverted to their default values after a device reset.

        :param index_offset:
            VOC index representing typical (average) conditions. Allowed values are in range 1..250. The default
            value is 100.
        :param learning_time_offset_hours:
            Time constant to estimate the VOC algorithm offset from the history in hours. Past events will be
            forgotten after about twice the learning time. Allowed values are in range 1..1000. The default
            value is 12 hours.
        :param learning_time_gain_hours:
            Time constant to estimate the VOC algorithm gain from the history in hours. Past events will be
            forgotten after about twice the learning time. Allowed values are in range 1..1000. The default
            value is 12 hours.
        :param gating_max_duration_minutes:
            Maximum duration of gating in minutes (freeze of estimator during high VOC index signal). Set to
            zero to disable the gating. Allowed values are in range 0..3000. The default value is 180 minutes
        :param std_initial:
            Initial estimate for standard deviation. Lower value boosts events during initial learning period,
            but may result in larger device-to-device variations. Allowed values are in range 10..5000. The
            default value is 50.
        :param gain_factor:
            Gain factor to amplify or to attenuate the VOC index output. Allowed values are in range 1..1000.
            The default value is 230.

        .. note::
            This command is available only in idle mode. In measure mode, this command has no effect. In
            addition, it has no effect if at least one parameter is outside the specified range.

        :Example:
            .. code-block:: python

                sensor.set_voc_algorithm_tuning_parameters(100, 12, 12, 180, 50, 230)

        """
        transfer = SetVocAlgorithmTuningParameters(index_offset, learning_time_offset_hours, learning_time_gain_hours,
                                                   gating_max_duration_minutes, std_initial, gain_factor)
        return execute_transfer(self._channel, transfer)

    def get_voc_algorithm_tuning_parameters(self):
        """
        Gets the parameters to customize the VOC algorithm.

        :return index_offset:
            VOC index representing typical (average) conditions.
        :return learning_time_offset_hours:
            Time constant to estimate the VOC algorithm offset from the history in hours. Past events will be
            forgotten after about twice the learning time.
        :return learning_time_gain_hours:
            Time constant to estimate the VOC algorithm gain from the history in hours. Past events will be
            forgotten after about twice the learning time.
        :return gating_max_duration_minutes:
            Maximum duration of gating in minutes (freeze of estimator during high VOC index signal). Zero
            disables the gating.
        :return std_initial:
            Initial estimate for standard deviation. Lower value boosts events during initial learning period,
            but may result in larger device-to-device variations.
        :return gain_factor:
            Gain factor to amplify or to attenuate the VOC index output.

        .. note::
            This command is only available in idle mode.
        """
        transfer = GetVocAlgorithmTuningParameters()
        return execute_transfer(self._channel, transfer)

    def set_nox_algorithm_tuning_parameters(self, index_offset, learning_time_offset_hours, learning_time_gain_hours,
                                            gating_max_duration_minutes, std_initial, gain_factor):
        """
        Sets the parameters to customize the NOx algorithm.
        This configuration is volatile, i.e. the parameters will be
        reverted to their default values after a device reset.

        :param index_offset:
            NOx index representing typical (average) conditions. Allowed values are in range 1..250. The default
            value is 1.
        :param learning_time_offset_hours:
            Time constant to estimate the NOx algorithm offset from the history in hours. Past events will be
            forgotten after about twice the learning time. Allowed values are in range 1..1000. The default
            value is 12 hours.
        :param learning_time_gain_hours:
            The time constant to estimate the NOx algorithm gain from the history has no impact for NOx. This
            parameter is still in place for consistency reasons with the VOC tuning parameters command. This
            parameter must always be set to 12 hours.
        :param gating_max_duration_minutes:
            Maximum duration of gating in minutes (freeze of estimator during high NOx index signal). Set to
            zero to disable the gating. Allowed values are in range 0..3000. The default value is 720 minutes.
        :param std_initial:
            The initial estimate for standard deviation parameter has no impact for NOx. This parameter is still
            in place for consistency reasons with the VOC tuning parameters command. This parameter must always
            be set to 50.
        :param gain_factor:
            Gain factor to amplify or to attenuate the NOx index output. Allowed values are in range 1..1000.
            The default value is 230.

        .. note::
            This command is available only in idle mode. In measure mode, this command has no effect. In
            addition, it has no effect if at least one parameter is outside the specified range.

        :Example:
            .. code-block:: python

                sensor.set_nox_algorithm_tuning_parameters(1, 12, 12, 720, 50, 230)

        """
        transfer = SetNoxAlgorithmTuningParameters(index_offset, learning_time_offset_hours, learning_time_gain_hours,
                                                   gating_max_duration_minutes, std_initial, gain_factor)
        return execute_transfer(self._channel, transfer)

    def get_nox_algorithm_tuning_parameters(self):
        """
        Gets the parameters to customize the NOx algorithm.

        :return index_offset:
            NOx index representing typical (average) conditions.
        :return learning_time_offset_hours:
            Time constant to estimate the NOx algorithm offset from the history in hours. Past events will be
            forgotten after about twice the learning time.
        :return learning_time_gain_hours:
            The time constant to estimate the NOx algorithm gain from the history has no impact for NOx. This
            parameter is still in place for consistency reasons with the VOC tuning parameters command.
        :return gating_max_duration_minutes:
            Maximum duration of gating in minutes (freeze of estimator during high NOx index signal). Zero
            disables the gating.
        :return std_initial:
            The initial estimate for standard deviation has no impact for NOx. This parameter is still in place
            for consistency reasons with the VOC tuning parameters command.
        :return gain_factor:
            Gain factor to amplify or to attenuate the NOx index output.

        .. note::
            This command is available only in idle mode.
        """
        transfer = GetNoxAlgorithmTuningParameters()
        return execute_transfer(self._channel, transfer)

    def set_temperature_acceleration_parameters(self, k, p, t1, t2):
        """
        This command allows to set custom temperature acceleration parameters of the RH/T engine.
        It overwrites the default temperature acceleration parameters of the RH/T engine with custom values. This
        configuration is volatile, i.e. the parameters will be reverted to their default values after a device reset.

        :param k:
            Filter constant K scaled with factor 10 (K = value / 10).
        :param p:
            Filter constant P scaled with factor 10 (P = value / 10).
        :param t1:
            Time constant T1 scaled with factor 10 (T1 [s] = value / 10).
        :param t2:
            Time constant T2 scaled with factor 10 (T2 [s] = value / 10).

        .. note::
            The command is only available in idle mode.

        :Example:
            .. code-block:: python

                sensor.set_temperature_acceleration_parameters(1, 1, 1, 1)

        """
        transfer = SetTemperatureAccelerationParameters(k, p, t1, t2)
        return execute_transfer(self._channel, transfer)

    def set_voc_algorithm_state(self, state):
        """
        Sets the VOC algorithm state previously received with "Get VOC Algorithm State" command.
        Allows restoration of the VOC algorithm state to resume operation after a power cycle or device
        reset, skipping initial learning phase. By default, the VOC Engine is reset, and the algorithm state is retained if
        a measurement is stopped and started again. If the VOC algorithm state shall be reset, a device reset, or a
        power cycle can be executed.

        :param state:
            VOC algorithm state to restore.

        .. note::
            This command is only available in idle mode and the state will be applied only once when starting
            the next measurement. In measure mode, this command has no effect.
        """
        transfer = SetVocAlgorithmState(state)
        return execute_transfer(self._channel, transfer)

    def get_voc_algorithm_state(self):
        """
        Gets the current VOC algorithm state.
        Allows to backup and restore the VOC algorithm state to resume operation after a power cycle or
        device reset, skipping initial learning phase. By default, the VOC Engine is reset and the algorithm
        state  is retained if a measurement is stopped and started again. If the VOC algorithm
        state shall be reset, a device reset or a power cycle can be executed.

        :return state:
            Current VOC algorithm state.

        .. note::
            This command can be used either in measure mode or in idle mode (which will then return the state at the
            time when the measurement was stopped). In measure mode, the state can be read each measure interval to
            always have the latest state available, even in case of a sudden power loss.
        """
        transfer = GetVocAlgorithmState()
        return execute_transfer(self._channel, transfer)[0]

    def activate_sht_heater(self):
        """
        This command allows to use the inbuilt heater in SHT sensor
        to reverse creep at high humidity.
        This command activates the SHT sensor heater with 200mW for 1s.
        The heater is then automatically deactivated again.
        The "get_sht_heater_measurements" command can be used to check if the
        heater has finished.
        Wait at least 20s after this command before starting a measurement to get
        coherent temperature values (heating consequence to disappear).

        .. note::
            This command is only available in idle mode.
        """
        transfer = ActivateShtHeater()
        return execute_transfer(self._channel, transfer)

    def get_sht_heater_measurements(self):
        """
        Get the measured values when the SHT sensor heating is triggerd. If the
        heating is not finished, the returned humidity and temperature values
        are 0x7FFF.

        :return humidity:
            Value is scaled with factor 100: RH [%] = value / 100
            *Note: If this value is not available, 0x7FFF is returned.*
        :return temperature:
            Value is scaled with factor 200: T [°C] = value / 200
            *Note: If this value is not available, 0x7FFF is returned.*

        .. note::
            This command is only availble in idle mode.
            This command must be used after the "activate_sht_heater" command.
            The get_sht_heater_measurements command can be queried every 0.05s to get
            the measurements.
        """
        transfer = GetShtHeaterMeasurements()
        return execute_transfer(self._channel, transfer)

    def get_product_name(self):
        """
        Gets the product name from the device.

        :return product_name:
            Null-terminated ASCII string containing the product name. Up to 32 characters can be read from the
            device.
        """
        transfer = GetProductName()
        return execute_transfer(self._channel, transfer)[0]

    def get_serial_number(self):
        """
        Gets the serial number from the device.

        :return serial_number:
            Null-terminated ASCII string containing the serial number. Up to 32 characters can be read from the
            device.
        """
        transfer = GetSerialNumber()
        return execute_transfer(self._channel, transfer)[0]

    def get_version(self):
        """
        Gets the version information for the hardware, firmware and communication protocol.

        :return firmware_major:
            Firmware major version number.
        :return firmware_minor:
            Firmware minor version number.
        """
        transfer = GetVersion()
        return execute_transfer(self._channel, transfer)

    def read_device_status(self):
        """
        Reads the current device status.
        Use this command to get detailed information about the device status.
        The device status is encoded in flags. Each device status flag
        represents a single bit in a 32-bit integer value. If more than one
        error is present, the device status register value is the sum of the
        corresponding flag values. For details about the available flags,
        refer to the device status flags documentation in the data sheet.

        :return device_status:
            Device status (32 flags as an integer value). For details, please refer to the device status flags
            documentation in the datasheet.

        .. note::
            The status flags of type "Error" are sticky, i.e. they are not cleared automatically even if the
            error condition no longer exists. So they can only be cleared manually with the command
            "Read And Clear Device Status" or with a device reset. All other flags are not sticky, i.e. they
            are cleared automatically if the trigger condition disappears.
        """
        transfer = ReadDeviceStatus()
        res_0 = execute_transfer(self._channel, transfer)[0]
        return DeviceStatus(res_0)

    def read_and_clear_device_status(self):
        """
        Reads the current device status (like command 0xD206 "Read Device Status") and afterwards clears
        all flags.

        :return device_status:
            Device status (32 flags as an integer value) **before** clearing it. For details, please refer to
            the device status flags documentation.
        """
        transfer = ReadAndClearDeviceStatus()
        res_0 = execute_transfer(self._channel, transfer)[0]
        return DeviceStatus(res_0)

    def device_reset(self):
        """Executes a reset on the device. This has the same effect as a power cycle."""
        transfer = DeviceReset()
        return execute_transfer(self._channel, transfer)


class Sen68Device(Sen68DeviceBase):
    """Driver class implementation of SEN68"""

    #: Access to base class
    sen68 = MixinAccess()

    def __init__(self, channel):
        super().__init__(channel)

    def read_measured_values(self):
        """
        Read measured values and apply scaling as defined in datasheet.

        :return mass_concentration_pm1p0:
            Mass concentration in μg/m³ for particles smaller than 1.0 μm.
        :return mass_concentration_pm2p5:
            Mass concentration in μg/m³ for particles smaller than 2.5 μm.
        :return mass_concentration_pm4p0:
            Mass concentration in μg/m³ for particles smaller than 4.0 μm.
        :return mass_concentration_pm10p0:
            Mass concentration in μg/m³ for particles smaller than 10.0 μm.
        :return humidity:
            Measured humidity in %RH.
        :return temperature:
            Measured temperature in degrees celsius.
        :return voc_index:
            Measured VOC Index between 0 and 500.
        :return nox_index:
            Measured NOx Index between 0 and 500.
        :return hcho:
            Measured formaldehyde concentration in ppb.
        """
        (mass_concentration_pm1p0_raw, mass_concentration_pm2p5_raw, mass_concentration_pm4p0_raw,
         mass_concentration_pm10p0_raw, humidity_raw, temperature_raw, voc_index_raw, nox_index_raw,
         hcho_raw
         ) = self.read_measured_values_as_integers()
        return (SignalMassConcentrationPm1p0(mass_concentration_pm1p0_raw),
                SignalMassConcentrationPm2p5(mass_concentration_pm2p5_raw),
                SignalMassConcentrationPm4p0(mass_concentration_pm4p0_raw),
                SignalMassConcentrationPm10p0(mass_concentration_pm10p0_raw), SignalHumidity(humidity_raw),
                SignalTemperature(temperature_raw), SignalVocIndex(voc_index_raw), SignalNoxIndex(nox_index_raw),
                SignalHcho(hcho_raw))

    def read_number_concentration_values(self):
        """
        Read measured number concentration values and apply scaling as defined in datasheet.

        :return number_concentration_pm0p5:
            Number concentration in particles/cm³ for particles smaller than 0.5 μm.
        :return number_concentration_pm1p0:
            Number concentration in particles/cm³ for particles smaller than 1.0 μm.
        :return number_concentration_pm2p5:
            Number concentration in particles/cm³ for particles smaller than 2.5 μm.
        :return number_concentration_pm4p0:
            Number concentration in particles/cm³ for particles smaller than 4.0 μm.
        :return number_concentration_pm10p0:
            Number concentration in particles/cm³ for particles smaller than 10.0 μm.
        """
        (number_concentration_pm0p5_raw, number_concentration_pm1p0_raw, number_concentration_pm2p5_raw,
         number_concentration_pm4p0_raw, number_concentration_pm10p0_raw
         ) = self.read_number_concentration_values_as_integers()
        return (SignalNumberConcentrationPm0p5(number_concentration_pm0p5_raw),
                SignalNumberConcentrationPm1p0(number_concentration_pm1p0_raw),
                SignalNumberConcentrationPm2p5(number_concentration_pm2p5_raw),
                SignalNumberConcentrationPm4p0(number_concentration_pm4p0_raw),
                SignalNumberConcentrationPm10p0(number_concentration_pm10p0_raw))
