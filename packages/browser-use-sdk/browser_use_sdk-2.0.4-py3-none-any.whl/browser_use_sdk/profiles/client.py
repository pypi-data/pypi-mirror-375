# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.profile_list_response import ProfileListResponse
from ..types.profile_view import ProfileView
from .raw_client import AsyncRawProfilesClient, RawProfilesClient


class ProfilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProfilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProfilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProfilesClient
        """
        return self._raw_client

    def list_profiles(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProfileListResponse:
        """
        Get paginated list of profiles.

        Parameters
        ----------
        page_size : typing.Optional[int]

        page_number : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProfileListResponse
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.profiles.list_profiles()
        """
        _response = self._raw_client.list_profiles(
            page_size=page_size, page_number=page_number, request_options=request_options
        )
        return _response.data

    def create_profile(self, *, request_options: typing.Optional[RequestOptions] = None) -> ProfileView:
        """
        Profiles allow you to preserve the state of the browser between tasks.

        They are most commonly used to allow users to preserve the log-in state in the agent between tasks.
        You'd normally create one profile per user and then use it for all their tasks.

        You can create a new profile by calling this endpoint.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProfileView
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.profiles.create_profile()
        """
        _response = self._raw_client.create_profile(request_options=request_options)
        return _response.data

    def get_profile(self, profile_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ProfileView:
        """
        Get profile details.

        Parameters
        ----------
        profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProfileView
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.profiles.get_profile(
            profile_id="profile_id",
        )
        """
        _response = self._raw_client.get_profile(profile_id, request_options=request_options)
        return _response.data

    def delete_browser_profile(
        self, profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Permanently delete a browser profile and its configuration.

        Parameters
        ----------
        profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.profiles.delete_browser_profile(
            profile_id="profile_id",
        )
        """
        _response = self._raw_client.delete_browser_profile(profile_id, request_options=request_options)
        return _response.data


class AsyncProfilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProfilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProfilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProfilesClient
        """
        return self._raw_client

    async def list_profiles(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProfileListResponse:
        """
        Get paginated list of profiles.

        Parameters
        ----------
        page_size : typing.Optional[int]

        page_number : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProfileListResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.profiles.list_profiles()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_profiles(
            page_size=page_size, page_number=page_number, request_options=request_options
        )
        return _response.data

    async def create_profile(self, *, request_options: typing.Optional[RequestOptions] = None) -> ProfileView:
        """
        Profiles allow you to preserve the state of the browser between tasks.

        They are most commonly used to allow users to preserve the log-in state in the agent between tasks.
        You'd normally create one profile per user and then use it for all their tasks.

        You can create a new profile by calling this endpoint.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProfileView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.profiles.create_profile()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_profile(request_options=request_options)
        return _response.data

    async def get_profile(
        self, profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProfileView:
        """
        Get profile details.

        Parameters
        ----------
        profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProfileView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.profiles.get_profile(
                profile_id="profile_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_profile(profile_id, request_options=request_options)
        return _response.data

    async def delete_browser_profile(
        self, profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Permanently delete a browser profile and its configuration.

        Parameters
        ----------
        profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.profiles.delete_browser_profile(
                profile_id="profile_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_browser_profile(profile_id, request_options=request_options)
        return _response.data
