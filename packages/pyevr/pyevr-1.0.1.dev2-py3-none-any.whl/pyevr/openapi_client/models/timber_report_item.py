# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.defect_code import DefectCode
from pyevr.openapi_client.models.wood_quality import WoodQuality
from pyevr.openapi_client.models.wood_type import WoodType


class TimberReportItem(BaseModel):
    """
    TimberReportItem
    """  # noqa: E501

    wood_type: WoodType = Field(alias="woodType")
    log_amount: Union[
        Annotated[float, Field(le=1.0e9, strict=True, ge=0.0)],
        Annotated[int, Field(le=1000000000, strict=True, ge=0)],
    ] = Field(description="Palkide arv (tk)", alias="logAmount")
    wood_quality: WoodQuality = Field(alias="woodQuality")
    defect_code: Optional[DefectCode] = Field(default=None, alias="defectCode")
    buyer_product_code: Optional[Annotated[str, Field(strict=True, max_length=500)]] = (
        Field(default=None, description="Ostja kaubakood", alias="buyerProductCode")
    )
    price_group_key: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = (
        Field(description="Hinnagrupi võti", alias="priceGroupKey")
    )
    tree_top_diameter_with_bark: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Ladva diameeter koorega - mm",
        alias="treeTopDiameterWithBark",
    )
    tree_top_diameter_without_bark: Union[StrictFloat, StrictInt] = Field(
        description="Ladva diameeter kooreta - mm", alias="treeTopDiameterWithoutBark"
    )
    snag_diameter: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Tüüka diameeter - cm", alias="snagDiameter"
    )
    estimated_diameter: Union[StrictFloat, StrictInt] = Field(
        description="Arvestuslik diameeter – cm", alias="estimatedDiameter"
    )
    actual_diameter: StrictInt = Field(
        description="Tegelik mõõdetud pikkus – täissentimeetrites",
        alias="actualDiameter",
    )
    payable_length: StrictInt = Field(
        description="Arvestuspikkus – täisdetsimeeter", alias="payableLength"
    )
    price: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Hind"
    )
    actual_volume: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Tegelik maht", alias="actualVolume"
    )
    payable_volume: Union[StrictFloat, StrictInt] = Field(
        description="Arvestusmaht", alias="payableVolume"
    )
    measurer_name: Optional[StrictStr] = Field(
        default=None, description="Mõõtja nimi", alias="measurerName"
    )
    __properties: ClassVar[List[str]] = [
        "woodType",
        "logAmount",
        "woodQuality",
        "defectCode",
        "buyerProductCode",
        "priceGroupKey",
        "treeTopDiameterWithBark",
        "treeTopDiameterWithoutBark",
        "snagDiameter",
        "estimatedDiameter",
        "actualDiameter",
        "payableLength",
        "price",
        "actualVolume",
        "payableVolume",
        "measurerName",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimberReportItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if buyer_product_code (nullable) is None
        # and model_fields_set contains the field
        if (
            self.buyer_product_code is None
            and "buyer_product_code" in self.model_fields_set
        ):
            _dict["buyerProductCode"] = None

        # set to None if tree_top_diameter_with_bark (nullable) is None
        # and model_fields_set contains the field
        if (
            self.tree_top_diameter_with_bark is None
            and "tree_top_diameter_with_bark" in self.model_fields_set
        ):
            _dict["treeTopDiameterWithBark"] = None

        # set to None if snag_diameter (nullable) is None
        # and model_fields_set contains the field
        if self.snag_diameter is None and "snag_diameter" in self.model_fields_set:
            _dict["snagDiameter"] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict["price"] = None

        # set to None if actual_volume (nullable) is None
        # and model_fields_set contains the field
        if self.actual_volume is None and "actual_volume" in self.model_fields_set:
            _dict["actualVolume"] = None

        # set to None if measurer_name (nullable) is None
        # and model_fields_set contains the field
        if self.measurer_name is None and "measurer_name" in self.model_fields_set:
            _dict["measurerName"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimberReportItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "woodType": obj.get("woodType"),
                "logAmount": obj.get("logAmount"),
                "woodQuality": obj.get("woodQuality"),
                "defectCode": obj.get("defectCode"),
                "buyerProductCode": obj.get("buyerProductCode"),
                "priceGroupKey": obj.get("priceGroupKey"),
                "treeTopDiameterWithBark": obj.get("treeTopDiameterWithBark"),
                "treeTopDiameterWithoutBark": obj.get("treeTopDiameterWithoutBark"),
                "snagDiameter": obj.get("snagDiameter"),
                "estimatedDiameter": obj.get("estimatedDiameter"),
                "actualDiameter": obj.get("actualDiameter"),
                "payableLength": obj.get("payableLength"),
                "price": obj.get("price"),
                "actualVolume": obj.get("actualVolume"),
                "payableVolume": obj.get("payableVolume"),
                "measurerName": obj.get("measurerName"),
            }
        )
        return _obj
