Metadata-Version: 2.4
Name: vibeutils
Version: 0.7.0
Summary: A Python library that provides various utils using OpenAI and Anthropic APIs
Author-email: Chuyang Deng <chuyangdeng@gmail.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/pika-orca/vibe-utils
Project-URL: Repository, https://github.com/pika-orca/vibe-utils
Project-URL: Issues, https://github.com/pika-orca/vibe-utils/issues
Keywords: letter counting,text analysis,number comparison,openai,anthropic,nlp
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: openai>=1.0.0
Provides-Extra: anthropic
Requires-Dist: anthropic>=0.3.0; extra == "anthropic"
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: pytest-mock; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: anthropic>=0.3.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0; extra == "test"
Requires-Dist: pytest-mock; extra == "test"
Requires-Dist: anthropic>=0.3.0; extra == "test"
Dynamic: license-file
Dynamic: requires-python

# vibeutils

A Python utils library that counts letter frequency, gets string length, compares numbers, and evaluates mathematical expressions using OpenAI and Anthropic APIs.

## Features

- Count frequency of specific letters in text
- Get the length of a string
- Compare two numbers using AI
- Evaluate mathematical expressions safely
- Support for both OpenAI and Anthropic APIs
- Environment variable support for default provider selection
- Custom model selection via parameters or environment variables

## Quick Start

```python
from vibeutils import vibecount, vibecompare, vibeeval, vibelength

# Set your preferred provider globally (optional)
# export VIBEUTILS_PROVIDER=anthropic

# Now all function calls use your preferred provider automatically
count = vibecount("strawberry", "r")        # Count letter frequency
length = vibelength("strawberry")            # Get string length
comparison = vibecompare(5, 10)               # Compare numbers  
result = vibeeval("(2 + 3) * 4")             # Evaluate expressions
```

## Upcoming

* `viebtime`
* ...

## Performance

- Time complexity: O(luck) and I use API calls to prevent prompt injection.

## Installation

Install the package using pip:

```bash
pip install vibeutils
```

For Anthropic support, install with the optional dependency:

```bash
pip install "vibeutils[anthropic]"
```

## Setup

Set up vibeutils in 3 easy steps:

1. **Install the package** (see Installation section)
2. **Set API keys** for your chosen provider(s)
3. **Optionally set default provider** to avoid specifying it in every call

### API Keys

You need to provide API keys for the services you want to use.

#### OpenAI (Default Provider)
Set your OpenAI API key as an environment variable:

```bash
export OPENAI_API_KEY=your_openai_api_key_here
```

#### Anthropic (Optional)
To use Anthropic's Claude, set your Anthropic API key:

```bash
export ANTHROPIC_API_KEY=your_anthropic_api_key_here
```

#### Default Provider (Optional)
To avoid specifying the provider in every function call, you can set a default provider:

```bash
export VIBEUTILS_PROVIDER=anthropic  # Use Anthropic as default
# or
export VIBEUTILS_PROVIDER=openai     # Use OpenAI as default (same as not setting it)
```

#### Custom Models (Optional)
You can specify custom models for each provider:

```bash
export VIBEUTILS_OPENAI_MODEL=gpt-4                    # Use GPT-4 instead of default
export VIBEUTILS_ANTHROPIC_MODEL=claude-opus-4-20250514  # Use Claude Opus instead of default
```

### Provider and Model Selection

By default, all functions use OpenAI with the default model. You can specify both provider and model in multiple ways:

#### Method 1: Environment Variables (Recommended)
Set environment variables to avoid specifying the provider and model in every function call:

```bash
# Provider selection
export VIBEUTILS_PROVIDER=anthropic  # Use Anthropic as default provider
export VIBEUTILS_PROVIDER=openai     # Use OpenAI as default provider (or just unset)

# Model selection
export VIBEUTILS_OPENAI_MODEL=gpt-4                    # Custom OpenAI model
export VIBEUTILS_ANTHROPIC_MODEL=claude-3-opus-20240229  # Custom Anthropic model
```

#### Method 2: Function Parameters
You can override environment variables using function parameters:

```python
# Provider and model parameters
vibecount("test", "t", provider="openai", model="gpt-4")
vibecompare(5, 10, provider="anthropic", model="claude-3-haiku-20240307")
vibeeval("2+3", provider="openai", model="gpt-4-turbo")
```

#### Priority Order for Provider Selection
1. **Explicit provider parameter** (highest priority)
2. **VIBEUTILS_PROVIDER environment variable**
3. **Default to "openai"** (lowest priority)

#### Priority Order for Model Selection
1. **Explicit model parameter** (highest priority)
2. **Environment variable** (VIBEUTILS_OPENAI_MODEL or VIBEUTILS_ANTHROPIC_MODEL)
3. **Built-in defaults** (gpt-4o-mini for OpenAI, claude-sonnet-4-20250514 for Anthropic)

## Usage

### Letter Counting - vibecount()

```python
from vibeutils import vibecount

# Count letter 'r' in "strawberry" (uses default provider)
result = vibecount("strawberry", "r")
print(result)  # 2 ;)

# Using environment variable to set default provider
# export VIBEUTILS_PROVIDER=anthropic
result = vibecount("strawberry", "r")  # Now uses Anthropic automatically
print(result)  # 2 ;)

# Override environment variable with explicit provider
result = vibecount("strawberry", "r", provider="openai")  # Forces OpenAI
print(result)  # 2 ;)

# Case-insensitive counting
result = vibecount("Strawberry", "R", case_sensitive=False)
print(result)  # 2 ;)

# Case-insensitive counting with explicit provider
result = vibecount("Strawberry", "R", case_sensitive=False, provider="anthropic")
print(result)  # 2 ;)

# Case-sensitive counting (explicit)
result = vibecount("Strawberry", "R", case_sensitive=True, provider="openai")
print(result)  # 0 (no uppercase 'R' in "Strawberry")

# Using custom models
result = vibecount("strawberry", "r", provider="openai", model="gpt-4")
print(result)  # 2 (using GPT-4 model)

result = vibecount("strawberry", "r", provider="anthropic", model="claude-3-opus-20240229")
print(result)  # 2 (using Claude Opus model)
```

### Number Comparison - vibecompare()

```python
from vibeutils import vibecompare

# Compare two integers (uses default provider)
result = vibecompare(5, 10)
print(result)  # -1 (first number is smaller)

# Using environment variable to set default provider
# export VIBEUTILS_PROVIDER=anthropic
result = vibecompare(5, 10)  # Now uses Anthropic automatically
print(result)  # -1 (first number is smaller)

# Compare two floats
result = vibecompare(5.11, 5.9)
print(result)  # -1 ;)

# Override environment variable with explicit provider
result = vibecompare(7, 7, provider="openai")  # Forces OpenAI
print(result)  # 0 (numbers are equal)

# Using custom models
result = vibecompare(15, 10, provider="openai", model="gpt-4-turbo")
print(result)  # 1 (using GPT-4 Turbo model)

result = vibecompare(3.14, 2.71, provider="anthropic", model="claude-3-haiku-20240307")
print(result)  # 1 (using Claude Haiku model)
```

### String Length - vibelength()

```python
from vibeutils import vibelength

# Get length (uses default provider)
result = vibelength("strawberry")
print(result)  # 10

# Using environment variable to set default provider
# export VIBEUTILS_PROVIDER=anthropic
result = vibelength("strawberry")  # Now uses Anthropic automatically
print(result)  # 10

# Override environment variable with explicit provider
result = vibelength("strawberry", provider="openai")  # Forces OpenAI
print(result)  # 10

# Using custom models
result = vibelength("hello world", provider="openai", model="gpt-4")
print(result)  # 11

result = vibelength("HELLO", provider="anthropic", model="claude-3-haiku-20240307")
print(result)  # 5
```

### Mathematical Expression Evaluation - vibeeval()

```python
from vibeutils import vibeeval

# Basic arithmetic operations (uses default provider)
result = vibeeval("2 + 3")
print(result)  # 5.0

# Using environment variable to set default provider
# export VIBEUTILS_PROVIDER=anthropic
result = vibeeval("3 * 4")  # Now uses Anthropic automatically
print(result)  # 12.0

# Complex expressions with parentheses
result = vibeeval("(2 + 3) * 4")
print(result)  # 20.0

# Override environment variable with explicit provider
result = vibeeval("5 / 2", provider="openai")  # Forces OpenAI
print(result)  # 2.5

# Error handling for invalid expressions
try:
    result = vibeeval("2 +")  # Invalid syntax
except ValueError as e:
    print(f"Error: {e}")

try:
    result = vibeeval("1 / 0")  # Division by zero
except ValueError as e:
    print(f"Error: {e}")

# Using custom models
result = vibeeval("2 ** 8", provider="openai", model="gpt-4")
print(result)  # 256.0 (using GPT-4 model)

result = vibeeval("sqrt(16)", provider="anthropic", model="claude-3-sonnet-20240229")
# Note: sqrt function may not be supported - depends on model understanding
```

### Parameters

#### vibecount(text, target_letter, case_sensitive=True, provider=None, model=None)
- `text` (str): The input string to analyze
- `target_letter` (str): The letter to count (must be a single character)
- `case_sensitive` (bool, optional): Whether to perform case-sensitive counting (default: True)
- `provider` (str, optional): AI provider to use ("openai" or "anthropic"). If None, uses VIBEUTILS_PROVIDER environment variable, defaulting to "openai" if not set.
- `model` (str, optional): The model to use for the provider. If None, uses environment variables VIBEUTILS_OPENAI_MODEL or VIBEUTILS_ANTHROPIC_MODEL, defaulting to built-in constants if not set.

#### vibecompare(num1, num2, provider=None, model=None)
- `num1` (Union[int, float]): The first number to compare
- `num2` (Union[int, float]): The second number to compare
- `provider` (str, optional): AI provider to use ("openai" or "anthropic"). If None, uses VIBEUTILS_PROVIDER environment variable, defaulting to "openai" if not set.
- `model` (str, optional): The model to use for the provider. If None, uses environment variables VIBEUTILS_OPENAI_MODEL or VIBEUTILS_ANTHROPIC_MODEL, defaulting to built-in constants if not set.

#### vibelength(text, provider=None, model=None)
- `text` (str): The input string to measure the length of
- `provider` (str, optional): AI provider to use ("openai" or "anthropic"). If None, uses VIBEUTILS_PROVIDER environment variable, defaulting to "openai" if not set.
- `model` (str, optional): The model to use for the provider. If None, uses environment variables VIBEUTILS_OPENAI_MODEL or VIBEUTILS_ANTHROPIC_MODEL, defaulting to built-in constants if not set.

#### vibeeval(expression, provider=None, model=None)
- `expression` (str): Mathematical expression containing numbers, operators (+, -, *, /, **), and parentheses
- `provider` (str, optional): AI provider to use ("openai" or "anthropic"). If None, uses VIBEUTILS_PROVIDER environment variable, defaulting to "openai" if not set.
- `model` (str, optional): The model to use for the provider. If None, uses environment variables VIBEUTILS_OPENAI_MODEL or VIBEUTILS_ANTHROPIC_MODEL, defaulting to built-in constants if not set.

### Return Values

- **vibecount()**: Returns an integer representing the count of the target letter
- **vibelength()**: Returns an integer representing the number of characters in the input string
- **vibecompare()**: Returns an integer:
  - `-1` if the first number is smaller than the second
  - `0` if the numbers are equal
  - `1` if the first number is larger than the second
- **vibeeval()**: Returns a float representing the result of the mathematical expression

### Error Handling

All functions raise:
- `ValueError`: If API key is not set for the chosen provider, invalid arguments provided, or invalid mathematical expression (vibeeval only)
- `ImportError`: If the anthropic package is not installed when using provider="anthropic"
- `Exception`: If AI API call fails or response validation fails

## Requirements

- Python 3.8+
- OpenAI API key (for OpenAI provider)
- Anthropic API key (for Anthropic provider, optional)
- Internet connection for API calls

## Dependencies

### Required
- `openai>=1.0.0`

### Optional (for Anthropic support)
- `anthropic>=0.3.0`

## Development

### Running Tests

Install test dependencies:
```bash
pip install -r test-requirements.txt
```

Run tests:
```bash
pytest
```

Run tests with coverage:
```bash
pytest --cov=vibeutils
```

Run specific test file:
```bash
pytest tests/test_vibeutils.py
```

### Test Structure

The test suite includes:
- Unit tests for all function parameters and edge cases
- Mock tests for OpenAI API calls (no actual API calls during testing)
- Error handling validation
- Input validation tests

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## Note

This package uses AI APIs for processing, which require API keys and internet connection. Each function call will make multiple requests to the chosen AI provider's servers and will consume API credits.

### Provider and Model-Specific Notes

#### Default Models
- **OpenAI**: Uses `gpt-4o-mini` model by default
- **Anthropic**: Uses `claude-sonnet-4-20250514` model by default

#### Custom Model Support
- **OpenAI**: Supports available OpenAI models (e.g., `gpt-4`, `gpt-4o`, `gpt-4-turbo`, `gpt-3.5-turbo`, `o1-preview`, `o1-mini`)
- **Anthropic**: Supports any valid Anthropic model (e.g., `claude-3-opus-20240229`, `claude-3-sonnet-20240229`, `claude-3-haiku-20240307`)

#### Model Selection Methods
1. **Function parameter**: `model="gpt-4"` (highest priority)
2. **Environment variable**: `VIBEUTILS_OPENAI_MODEL=gpt-4` (medium priority)
3. **Built-in default**: Uses package defaults (lowest priority)

#### Model Compatibility and API Parameters
- **Automatic Parameter Handling**: The library automatically detects model capabilities and uses the appropriate API parameters
- **Legacy Models** (gpt-3.5-turbo, gpt-4, gpt-4-turbo): Use `max_tokens` parameter, support `temperature=0`
- **Newer Models** (gpt-4o, gpt-4o-mini): Use `max_completion_tokens` parameter, support `temperature=0`
- **o1 Models**: Special handling - use `max_completion_tokens`, no `temperature` parameter supported
- **Future-Proof**: Automatically handles new OpenAI models with updated API requirements

#### Security and Validation
- All providers implement the same security checks and response validation
- Model selection does not affect security features
- Custom models must still support the expected input/output format
- API parameter compatibility is handled automatically based on model type
