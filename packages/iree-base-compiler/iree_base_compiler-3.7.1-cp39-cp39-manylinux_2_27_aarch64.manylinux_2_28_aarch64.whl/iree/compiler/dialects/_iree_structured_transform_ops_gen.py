
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir
_ods_cext.globals.register_traceback_file_exclusion(__file__)

import builtins
from typing import Sequence as _Sequence, Union as _Union


from ._transform_ops_gen import _Dialect

@_ods_cext.register_operation(_Dialect)
class EmitRemarkOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.iree.emit_remark"

  _ODS_REGIONS = (0, True)

  def __init__(self, handle, message, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(handle)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["message"] = (message if (
    isinstance(message, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(message, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def handle(self):
    return self.operation.operands[0]

  @builtins.property
  def message(self):
    return self.operation.attributes["message"]

  @message.setter
  def message(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["message"] = value

def iree_emit_remark(handle, message, *, loc=None, ip=None) -> _ods_ir.Operation:
  return EmitRemarkOp(handle=handle, message=message, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class MatchCallbackOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.iree.match_callback"

  _ODS_REGIONS = (0, True)

  def __init__(self, outputs, callback_name, failure_propagation_mode, inputs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["callback_name"] = (callback_name if (
    isinstance(callback_name, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(callback_name, context=_ods_context))
    attributes["failure_propagation_mode"] = (failure_propagation_mode if (
    isinstance(failure_propagation_mode, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FailurePropagationMode')) else
      _ods_ir.AttrBuilder.get('FailurePropagationMode')(failure_propagation_mode, context=_ods_context))
    results.extend(outputs)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def callback_name(self):
    return self.operation.attributes["callback_name"]

  @callback_name.setter
  def callback_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["callback_name"] = value

  @builtins.property
  def failure_propagation_mode(self):
    return self.operation.attributes["failure_propagation_mode"]

  @failure_propagation_mode.setter
  def failure_propagation_mode(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["failure_propagation_mode"] = value

  @builtins.property
  def outputs(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

def iree_match_callback(outputs, callback_name, failure_propagation_mode, inputs, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(MatchCallbackOp(outputs=outputs, callback_name=callback_name, failure_propagation_mode=failure_propagation_mode, inputs=inputs, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RegisterMatchCallbacksOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.iree.register_match_callbacks"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def iree_register_match_callbacks(*, loc=None, ip=None) -> _ods_ir.Operation:
  return RegisterMatchCallbacksOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class TakeFirstOp(_ods_ir.OpView):
  OPERATION_NAME = "transform.iree.take_first"

  _ODS_REGIONS = (0, True)

  def __init__(self, first, rest, inputs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(first)
    results.append(rest)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def first(self):
    return self.operation.results[0]

  @builtins.property
  def rest(self):
    return self.operation.results[1]

def iree_take_first(first, rest, inputs, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return TakeFirstOp(first=first, rest=rest, inputs=inputs, loc=loc, ip=ip).results
