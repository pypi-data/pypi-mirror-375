"""
Compatibility layer for PyTorch-like APIs
"""
from __future__ import annotations
import typing
__all__: list[str] = ['CustomClassProxy', 'CustomClassProxyInstance', 'IValue']
class CustomClassProxy:
    def __call__(self, *args, **kwargs) -> typing.Any:
        ...
    def __getattr__(self, arg0: str) -> typing.Any:
        ...
class CustomClassProxyInstance:
    def __getattr__(self, arg0: str) -> typing.Any:
        ...
class IValue:
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: int) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: float) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: bool) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: str) -> None:
        ...
    def __repr__(self) -> str:
        ...
    def is_bool(self) -> bool:
        ...
    def is_double(self) -> bool:
        ...
    def is_int(self) -> bool:
        ...
    def is_none(self) -> bool:
        ...
    def is_string(self) -> bool:
        ...
    def to_bool(self) -> bool:
        ...
    def to_double(self) -> float:
        ...
    def to_int(self) -> int:
        ...
    def to_string(self) -> str:
        ...
def _get_custom_class_python_wrapper(namespace_name: str, class_name: str) -> typing.Any:
    """
    Get a Python wrapper for the specified custom class
    """
def _get_operation(qualified_name: str) -> typing.Any:
    """
    Get a callable for the specified operation
    """
