---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pyfail_three_module_cycle/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
module_a = _cribo.types.SimpleNamespace(__name__='module_a', __initializing__=False, __initialized__=False)
module_b = _cribo.types.SimpleNamespace(__name__='module_b', __initializing__=False, __initialized__=False)
module_c = _cribo.types.SimpleNamespace(__name__='module_c', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_ae45fc_module_a(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global module_b

    def process_a():
        """Process A that depends on B"""
        global module_b
        module_b = _cribo_init___cribo_afa23a_module_b(module_b)
        process_b = module_b.process_b
        return process_b() + "->A"
    self.process_a = process_a

    def get_value_a():
        global module_b
        module_b = _cribo_init___cribo_afa23a_module_b(module_b)
        process_b = module_b.process_b
        return "value_from_A"
    self.get_value_a = get_value_a
    self.__initialized__ = True
    self.__initializing__ = False
    return self
module_a.__init__ = _cribo_init___cribo_ae45fc_module_a
def _cribo_init___cribo_afa23a_module_b(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global module_c

    def process_b():
        """Process B that depends on C"""
        global module_c
        module_c = _cribo_init___cribo_b6d812_module_c(module_c)
        process_c = module_c.process_c
        return process_c() + "->B"
    self.process_b = process_b

    def get_value_b():
        global module_c
        module_c = _cribo_init___cribo_b6d812_module_c(module_c)
        process_c = module_c.process_c
        return "value_from_B"
    self.get_value_b = get_value_b
    self.__initialized__ = True
    self.__initializing__ = False
    return self
module_b.__init__ = _cribo_init___cribo_afa23a_module_b
def _cribo_init___cribo_b6d812_module_c(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global module_a

    def process_c():
        """Process C that depends back on A - creates the cycle"""
        global module_a
        module_a = _cribo_init___cribo_ae45fc_module_a(module_a)
        get_value_a = module_a.get_value_a
        value = get_value_a()
        return f"C(using_{value})"
    self.process_c = process_c

    def get_value_c():
        global module_a
        module_a = _cribo_init___cribo_ae45fc_module_a(module_a)
        get_value_a = module_a.get_value_a
        return "value_from_C"
    self.get_value_c = get_value_c
    self.__initialized__ = True
    self.__initializing__ = False
    return self
module_c.__init__ = _cribo_init___cribo_b6d812_module_c
module_a = _cribo_init___cribo_ae45fc_module_a(module_a)
def main():
    result = module_a.process_a()
    print(f"Result: {result}")
if __name__ == "__main__":
    main()
