# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
language: en-US
tone_instructions: "Be professional and focus on security, performance, and Python best practices."
early_access: true
enable_free_tier: true

reviews:
  profile: assertive  # Comprehensive code quality checks
  request_changes_workflow: false
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai summary"
  high_level_summary_in_walkthrough: false
  auto_title_placeholder: "@coderabbitai"
  auto_title_instructions: "Include ticket number if referenced in PR"
  review_status: true
  commit_status: true
  fail_commit_status: false
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  estimate_code_review_effort: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: true
  suggested_reviewers: true
  auto_assign_reviewers: true
  poem: false

  labeling_instructions:
    - label: "‚ö° api"
      instructions: "Apply when PR modifies mcp_zammad/server.py, client.py, or any MCP/Zammad API integration"
    - label: "üë®‚ÄçüöÄ crew-backend"
      instructions: "Apply when PR modifies backend Python code in mcp_zammad/ directory"
    - label: "üíæ database"
      instructions: "Apply when PR modifies mcp_zammad/models.py or data models"
    - label: "‚ö° performance"
      instructions: "Apply when PR includes caching, pagination, or optimization improvements"
    - label: "üìö documentation"
      instructions: "Apply when PR updates README.md, ARCHITECTURE.md, CHANGELOG.md, or other docs"
    - label: "üìù crew-docs"
      instructions: "Apply when PR significantly updates documentation or adds new docs"
    - label: "üêõ bug"
      instructions: "Apply when PR fixes bugs or resolves issues"
    - label: "‚ú® enhancement"
      instructions: "Apply when PR adds new features, tools, or capabilities"
    - label: "üíé breaking-change"
      instructions: "Apply when PR introduces breaking changes to the MCP server API or tool signatures"
    - label: "üè∑Ô∏è auto-labeled"
      instructions: "Apply to all PRs to indicate CodeRabbit has reviewed and labeled"
    - label: "üîß ci/cd"
      instructions: "Apply when PR modifies CI/CD workflows or pipeline configuration"
    - label: "üîí security"
      instructions: "Apply when PR addresses security vulnerabilities or improves security"

  path_filters:
    - "**/*"                   # Include all files by default
    - "!**/.claude/**"         # Exclude .claude directory
    - "!**/venv/**"            # Exclude non-dotted virtualenvs
    - "!**/htmlcov/**"         # Exclude HTML coverage reports
    - "!**/.venv/**"           # Exclude virtual environment
    - "!**/dist/**"            # Exclude distribution/build artifacts
    - "!**/build/**"           # Exclude build directories
    - "!**/.pytest_cache/**"   # Exclude pytest cache
    - "!**/.cache/**"          # Exclude generic cache dirs
    - "!**/__pycache__/**"     # Exclude Python bytecode cache
    - "!**/*.pyc"              # Exclude compiled Python files
    - "!**/.coverage"          # Exclude coverage data files
    - "!**/.coverage.*"        # Exclude sharded coverage data files
    - "!**/coverage.xml"       # Exclude coverage XML reports
    - "!**/coverage-*/**"      # Exclude additional coverage artifacts
    - "!**/.mypy_cache/**"     # Exclude mypy type checking cache
    - "!**/.ruff_cache/**"     # Exclude ruff linter cache
    - "!**/node_modules/**"    # Exclude npm dependencies (if any)
    - "!**/.eggs/**"           # Exclude Python egg files
    - "!**/*.egg-info/**"      # Exclude Python package info
    - "!**/wheelhouse/**"      # Exclude wheel build directory
    - "!**/.tox/**"            # Exclude tox test environments
    - "!**/.nox/**"            # Exclude nox test environments
    - "!**/.hypothesis/**"     # Exclude hypothesis test data
  path_instructions:
    - path: "mcp_zammad/server.py"
      instructions: |
        Review for MCP protocol compliance and FastMCP best practices.
        Ensure proper async/await usage and lifespan management.
        Check that new tools follow the established decorator pattern.
        Verify proper error handling with MCP-specific error responses.
    - path: "mcp_zammad/client.py"
      instructions: |
        Review Zammad API integration for correct endpoint usage.
        Ensure proper authentication handling for all three auth methods.
        Check for URL validation to prevent SSRF attacks.
        Verify proper pagination handling for large result sets.
    - path: "mcp_zammad/models.py"
      instructions: |
        Review Pydantic models for proper validation and type annotations.
        Ensure union types handle both expanded and non-expanded Zammad responses.
        Check that all fields have appropriate defaults and constraints.
        Verify HTML sanitization is applied where needed.
    - path: "tests/**/*.py"
      instructions: |
        Ensure tests use proper mocking of ZammadClient.
        Check for comprehensive test coverage including error cases.
        Verify use of pytest fixtures and parametrization where appropriate.
        Ensure async tests use pytest-asyncio correctly.
    - path: "**/*.py"
      instructions: |
        Review against PEP 8 and modern Python 3.10+ conventions.
        Check for proper type hints using Python 3.10+ syntax (list[str] not List[str]).
        Ensure no parameter shadowing (use article_type not type).
        Verify proper use of sentinel pattern where applicable.
    - path: "scripts/**/*.sh"
      instructions: |
        Review shell scripts for POSIX compliance and security.
        Ensure proper error handling with set -e or equivalent.
        Check for proper quoting of variables.
    - path: ".github/workflows/*.yml"
      instructions: |
        Review GitHub Actions for security best practices.
        Ensure all third-party actions are pinned to commit SHAs.
        Check for proper secret handling and permissions.
        Verify job dependencies and conditional execution.
        Check for efficient caching strategies.
    - path: "Dockerfile"
      instructions: |
        Review for Docker security best practices.
        Ensure multi-stage build is used properly.
        Check for minimal final image size and attack surface.
        Verify proper handling of secrets and environment variables.

  abort_on_close: true
  disable_cache: false

  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: ["WIP", "draft", "DO NOT MERGE"]
    labels: []
    drafts: false
    base_branches: ["main"]

  finishing_touches:
    docstrings:
      enabled: true
    unit_tests:
      enabled: true

  pre_merge_checks:
    docstrings:
      mode: warning
      threshold: 80
    title:
      mode: warning
      requirements: "Should be descriptive and follow conventional commit format when possible"
    description:
      mode: warning
    issue_assessment:
      mode: warning

  tools:
    # Python-specific tools - ENABLED
    ruff:
      enabled: true
    pylint:
      enabled: false
    flake8:
      enabled: false

    # Security tools - ENABLED
    gitleaks:
      enabled: true
    semgrep:
      enabled: true
    checkov:
      enabled: true

    # Documentation and config tools - ENABLED
    markdownlint:
      enabled: true
    yamllint:
      enabled: true
    hadolint:
      enabled: true
    actionlint:
      enabled: true
    dotenvLint:
      enabled: true
    shellcheck:
      enabled: true

    # GitHub integration - ENHANCED
    github-checks:
      enabled: true
      timeout_ms: 180000  # Increased for complex pipelines

    # Language/documentation tools
    languagetool:
      enabled: true
      disabled_rules: ["WHITESPACE_RULE", "EN_QUOTES"]
      level: default

    # Tools for OTHER languages - DISABLED
    biome:
      enabled: false
    swiftlint:
      enabled: false
    phpstan:
      enabled: false
      level: default
    phpmd:
      enabled: false
    phpcs:
      enabled: false
    golangci-lint:
      enabled: false
    detekt:
      enabled: false
    eslint:
      enabled: false
    rubocop:
      enabled: false
    buf:
      enabled: false
    regal:
      enabled: false
    pmd:
      enabled: false
    cppcheck:
      enabled: false
    clippy:
      enabled: false
    sqlfluff:
      enabled: false
    prismaLint:
      enabled: false
    oxc:
      enabled: false
    shopifyThemeCheck:
      enabled: false
    luacheck:
      enabled: false
    brakeman:
      enabled: false
    htmlhint:
      enabled: false
    checkmake:
      enabled: false
    circleci:
      enabled: false
    ast-grep:
      rule_dirs: []
      util_dirs: []
      essential_rules: true
      packages: []

# Pipeline Failure Remediation Configuration
pipeline_remediation:
  enabled: true
  auto_suggest: true
  auto_apply: false  # Start with manual review

  analysis:
    confidence_threshold: 90
    include_performance_suggestions: true
    include_security_fixes: true
    create_issues_for_complex_failures: true

  platforms:
    github_actions:
      enabled: true
      monitor_workflows: ["tests", "security-scan", "docker-publish", "codacy"]
      analyze_workflow_syntax: true
      suggest_caching_improvements: true
      detect_deprecated_actions: true
    docker:
      enabled: true
      analyze_multistage_builds: true
      suggest_layer_optimizations: true
    python:
      enabled: true
      analyze_dependency_conflicts: true
      suggest_version_updates: true

  error_types:
    - build_failures
    - dependency_conflicts
    - test_failures
    - linting_errors
    - docker_issues
    - timeout_errors
    - security_vulnerabilities
    - performance_issues
    - coverage_threshold_failures

  # Custom patterns for Python/MCP project
  custom_patterns:
    - name: "uv_sync_failure"
      pattern: "uv sync.*failed|Failed to sync|uv.*error"
      remediation_template: |
        Check uv.lock file and Python version compatibility:
        1. Run 'uv lock --update' to refresh lock file
        2. Verify Python version matches project requirements
        3. Check for conflicting dependencies
      remediation_priority: "high"

    - name: "pytest_failure"
      pattern: "FAILED.*test_|pytest.*failed|AssertionError"
      remediation_priority: "high"
      auto_analyze_traceback: true

    - name: "mypy_error"
      pattern: "error:.*\\[.*\\]|Function is missing a return type annotation"
      remediation_template: "Add proper type annotations"
      remediation_priority: "medium"

    - name: "ruff_violations"
      pattern: "Found \\d+ error|ruff.*failed"
      remediation_priority: "medium"
      auto_fix_command: "uv run ruff format . && uv run ruff check --fix ."

    - name: "coverage_threshold"
      pattern: "Coverage.*below required.*%"
      remediation_template: |
        Coverage is below threshold. Options:
        1. Add tests for uncovered code
        2. Review threshold requirements
        3. Check coverage report for specific gaps
      remediation_priority: "high"

    - name: "docker_build_failure"
      pattern: "ERROR: failed to solve|docker build.*failed"
      remediation_priority: "critical"
      analyze_dockerfile: true

    - name: "security_scan_failure"
      pattern: "found vulnerabilities|security.*failed|bandit.*failed"
      remediation_priority: "critical"
      create_security_issue: true

    - name: "pip_audit_vulnerability"
      pattern: "pip-audit found vulnerabilities|vulnerability.*found"
      remediation_template: |
        Security vulnerabilities detected:
        1. Review pip-audit report
        2. Update affected packages
        3. Check for breaking changes
      remediation_priority: "critical"
      auto_create_issue: true

    - name: "github_action_deprecated"
      pattern: "Node.js 12 actions are deprecated|set-output.*deprecated"
      remediation_template: "Update to latest action version with SHA pinning"
      remediation_priority: "medium"

  # Auto-apply rules for safe fixes
  auto_apply_rules:
    - error_type: "linting_errors"
      confidence_min: 98
      max_changes: 10
      file_patterns: ["*.py"]
      exclude_paths: ["tests/"]

    - error_type: "formatting_errors"
      confidence_min: 99
      file_patterns: ["*.py", "*.yaml", "*.yml", "*.md"]
      auto_fix_command: "uv run ruff format ."

  # Security settings
  security:
    exclude_branches: ["main", "master", "production"]
    require_approval_for:
      - security_vulnerabilities
      - dependency_updates
      - production_configs
    auto_apply_security_fixes: false
    create_security_issues: true

  # Notification settings
  notifications:
    create_github_issues: true
    issue_labels: ["ci/cd", "automated"]

  # Performance monitoring
  performance:
    track_build_times: true
    suggest_optimizations: true
    cache_recommendations: true
    parallel_execution_hints: true

chat:
  auto_reply: true
  integrations:
    jira:
      usage: auto
    linear:
      usage: auto

knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  code_guidelines:
    enabled: true
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    usage: auto
    project_keys: []
  linear:
    usage: auto
    team_keys: []
  pull_requests:
    scope: auto

code_generation:
  docstrings:
    language: en-US
    path_instructions: []
  unit_tests:
    path_instructions: []