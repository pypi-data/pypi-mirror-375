# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloPadOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloPadOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloPadOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloPadOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # StablehloPadOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloPadOptions
    def EdgePaddingLow(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloPadOptions
    def EdgePaddingLowAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloPadOptions
    def EdgePaddingLowLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloPadOptions
    def EdgePaddingLowIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StablehloPadOptions
    def EdgePaddingHigh(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloPadOptions
    def EdgePaddingHighAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloPadOptions
    def EdgePaddingHighLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloPadOptions
    def EdgePaddingHighIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StablehloPadOptions
    def InteriorPadding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloPadOptions
    def InteriorPaddingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloPadOptions
    def InteriorPaddingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloPadOptions
    def InteriorPaddingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def Start(builder): builder.StartObject(3)
def StablehloPadOptionsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddEdgePaddingLow(builder, edgePaddingLow): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(edgePaddingLow), 0)
def StablehloPadOptionsAddEdgePaddingLow(builder, edgePaddingLow):
    """This method is deprecated. Please switch to AddEdgePaddingLow."""
    return AddEdgePaddingLow(builder, edgePaddingLow)
def StartEdgePaddingLowVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StablehloPadOptionsStartEdgePaddingLowVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEdgePaddingLowVector(builder, numElems)
def AddEdgePaddingHigh(builder, edgePaddingHigh): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(edgePaddingHigh), 0)
def StablehloPadOptionsAddEdgePaddingHigh(builder, edgePaddingHigh):
    """This method is deprecated. Please switch to AddEdgePaddingHigh."""
    return AddEdgePaddingHigh(builder, edgePaddingHigh)
def StartEdgePaddingHighVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StablehloPadOptionsStartEdgePaddingHighVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEdgePaddingHighVector(builder, numElems)
def AddInteriorPadding(builder, interiorPadding): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(interiorPadding), 0)
def StablehloPadOptionsAddInteriorPadding(builder, interiorPadding):
    """This method is deprecated. Please switch to AddInteriorPadding."""
    return AddInteriorPadding(builder, interiorPadding)
def StartInteriorPaddingVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StablehloPadOptionsStartInteriorPaddingVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartInteriorPaddingVector(builder, numElems)
def End(builder): return builder.EndObject()
def StablehloPadOptionsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
try:
    from typing import List
except:
    pass

class StablehloPadOptionsT(object):

    # StablehloPadOptionsT
    def __init__(self):
        self.edgePaddingLow = None  # type: List[int]
        self.edgePaddingHigh = None  # type: List[int]
        self.interiorPadding = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloPadOptions = StablehloPadOptions()
        stablehloPadOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloPadOptions)

    @classmethod
    def InitFromObj(cls, stablehloPadOptions):
        x = StablehloPadOptionsT()
        x._UnPack(stablehloPadOptions)
        return x

    # StablehloPadOptionsT
    def _UnPack(self, stablehloPadOptions):
        if stablehloPadOptions is None:
            return
        if not stablehloPadOptions.EdgePaddingLowIsNone():
            if np is None:
                self.edgePaddingLow = []
                for i in range(stablehloPadOptions.EdgePaddingLowLength()):
                    self.edgePaddingLow.append(stablehloPadOptions.EdgePaddingLow(i))
            else:
                self.edgePaddingLow = stablehloPadOptions.EdgePaddingLowAsNumpy()
        if not stablehloPadOptions.EdgePaddingHighIsNone():
            if np is None:
                self.edgePaddingHigh = []
                for i in range(stablehloPadOptions.EdgePaddingHighLength()):
                    self.edgePaddingHigh.append(stablehloPadOptions.EdgePaddingHigh(i))
            else:
                self.edgePaddingHigh = stablehloPadOptions.EdgePaddingHighAsNumpy()
        if not stablehloPadOptions.InteriorPaddingIsNone():
            if np is None:
                self.interiorPadding = []
                for i in range(stablehloPadOptions.InteriorPaddingLength()):
                    self.interiorPadding.append(stablehloPadOptions.InteriorPadding(i))
            else:
                self.interiorPadding = stablehloPadOptions.InteriorPaddingAsNumpy()

    # StablehloPadOptionsT
    def Pack(self, builder):
        if self.edgePaddingLow is not None:
            if np is not None and type(self.edgePaddingLow) is np.ndarray:
                edgePaddingLow = builder.CreateNumpyVector(self.edgePaddingLow)
            else:
                StartEdgePaddingLowVector(builder, len(self.edgePaddingLow))
                for i in reversed(range(len(self.edgePaddingLow))):
                    builder.PrependInt64(self.edgePaddingLow[i])
                edgePaddingLow = builder.EndVector()
        if self.edgePaddingHigh is not None:
            if np is not None and type(self.edgePaddingHigh) is np.ndarray:
                edgePaddingHigh = builder.CreateNumpyVector(self.edgePaddingHigh)
            else:
                StartEdgePaddingHighVector(builder, len(self.edgePaddingHigh))
                for i in reversed(range(len(self.edgePaddingHigh))):
                    builder.PrependInt64(self.edgePaddingHigh[i])
                edgePaddingHigh = builder.EndVector()
        if self.interiorPadding is not None:
            if np is not None and type(self.interiorPadding) is np.ndarray:
                interiorPadding = builder.CreateNumpyVector(self.interiorPadding)
            else:
                StartInteriorPaddingVector(builder, len(self.interiorPadding))
                for i in reversed(range(len(self.interiorPadding))):
                    builder.PrependInt64(self.interiorPadding[i])
                interiorPadding = builder.EndVector()
        Start(builder)
        if self.edgePaddingLow is not None:
            AddEdgePaddingLow(builder, edgePaddingLow)
        if self.edgePaddingHigh is not None:
            AddEdgePaddingHigh(builder, edgePaddingHigh)
        if self.interiorPadding is not None:
            AddInteriorPadding(builder, interiorPadding)
        stablehloPadOptions = End(builder)
        return stablehloPadOptions
