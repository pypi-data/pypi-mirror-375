# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import warnings
from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from pyevr.openapi_client.api_client import ApiClient, RequestSerialized
from pyevr.openapi_client.api_response import ApiResponse
from pyevr.openapi_client.models.paged_result_of_certificate import (
    PagedResultOfCertificate,
)
from pyevr.openapi_client.rest import RESTResponseType


class CertificatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def certificates_list(
        self,
        page: Annotated[
            Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]],
            Field(description="Tagastatav lehekülg"),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=500, strict=True, ge=1)]],
            Field(description="Tagastatava lehekülje suurus"),
        ] = None,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedResultOfCertificate:
        """Sertifikaatide pärimine

        Tagastab EVR-i aktiivsed sertifikaadid.

        :param page: Tagastatav lehekülg
        :type page: int
        :param page_size: Tagastatava lehekülje suurus
        :type page_size: int
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._certificates_list_serialize(
            page=page,
            page_size=page_size,
            evr_language=evr_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "403": "ProblemDetails",
            "401": "ProblemDetails",
            "400": "ValidationResult",
            "200": "PagedResultOfCertificate",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def certificates_list_with_http_info(
        self,
        page: Annotated[
            Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]],
            Field(description="Tagastatav lehekülg"),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=500, strict=True, ge=1)]],
            Field(description="Tagastatava lehekülje suurus"),
        ] = None,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedResultOfCertificate]:
        """Sertifikaatide pärimine

        Tagastab EVR-i aktiivsed sertifikaadid.

        :param page: Tagastatav lehekülg
        :type page: int
        :param page_size: Tagastatava lehekülje suurus
        :type page_size: int
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._certificates_list_serialize(
            page=page,
            page_size=page_size,
            evr_language=evr_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "403": "ProblemDetails",
            "401": "ProblemDetails",
            "400": "ValidationResult",
            "200": "PagedResultOfCertificate",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def certificates_list_without_preload_content(
        self,
        page: Annotated[
            Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]],
            Field(description="Tagastatav lehekülg"),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=500, strict=True, ge=1)]],
            Field(description="Tagastatava lehekülje suurus"),
        ] = None,
        evr_language: Annotated[
            Optional[StrictStr],
            Field(
                description='Defineerib keele tagastatavatele veateadetele (toetatud on väärtused "et" eesti keele ning "en" inglise keele jaoks).'
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Sertifikaatide pärimine

        Tagastab EVR-i aktiivsed sertifikaadid.

        :param page: Tagastatav lehekülg
        :type page: int
        :param page_size: Tagastatava lehekülje suurus
        :type page_size: int
        :param evr_language: Defineerib keele tagastatavatele veateadetele (toetatud on väärtused \"et\" eesti keele ning \"en\" inglise keele jaoks).
        :type evr_language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._certificates_list_serialize(
            page=page,
            page_size=page_size,
            evr_language=evr_language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "403": "ProblemDetails",
            "401": "ProblemDetails",
            "400": "ValidationResult",
            "200": "PagedResultOfCertificate",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _certificates_list_serialize(
        self,
        page,
        page_size,
        evr_language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            _query_params.append(("page", page))

        if page_size is not None:
            _query_params.append(("page_size", page_size))

        # process the header parameters
        if evr_language is not None:
            _header_params["EVR-LANGUAGE"] = evr_language
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["SecretApiKey"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/certificates",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
