# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MXQuantization(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MXQuantization()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMXQuantization(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MXQuantizationBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # MXQuantization
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MXQuantization
    def Axis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(1)
def MXQuantizationStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddAxis(builder, axis): builder.PrependInt32Slot(0, axis, 0)
def MXQuantizationAddAxis(builder, axis):
    """This method is deprecated. Please switch to AddAxis."""
    return AddAxis(builder, axis)
def End(builder): return builder.EndObject()
def MXQuantizationEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class MXQuantizationT(object):

    # MXQuantizationT
    def __init__(self):
        self.axis = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mXQuantization = MXQuantization()
        mXQuantization.Init(buf, pos)
        return cls.InitFromObj(mXQuantization)

    @classmethod
    def InitFromObj(cls, mXQuantization):
        x = MXQuantizationT()
        x._UnPack(mXQuantization)
        return x

    # MXQuantizationT
    def _UnPack(self, mXQuantization):
        if mXQuantization is None:
            return
        self.axis = mXQuantization.Axis()

    # MXQuantizationT
    def Pack(self, builder):
        Start(builder)
        AddAxis(builder, self.axis)
        mXQuantization = End(builder)
        return mXQuantization
