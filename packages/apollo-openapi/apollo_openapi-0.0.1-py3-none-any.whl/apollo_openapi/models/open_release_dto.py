# coding: utf-8

"""
    Apollo OpenAPI

    Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from apollo_openapi.models.map_string import MapString
from typing import Optional, Set
from typing_extensions import Self

class OpenReleaseDTO(BaseModel):
    """
    Apollo发布信息数据传输对象，表示一次配置发布的完整信息
    """ # noqa: E501
    data_change_created_by: Optional[StrictStr] = Field(default=None, description="发布创建者用户名，记录是谁创建了这次发布", alias="dataChangeCreatedBy")
    data_change_last_modified_by: Optional[StrictStr] = Field(default=None, description="发布最后修改者用户名，记录最后一次修改发布信息的用户", alias="dataChangeLastModifiedBy")
    data_change_created_time: Optional[StrictStr] = Field(default=None, description="发布创建时间，ISO 8601格式的时间戳", alias="dataChangeCreatedTime")
    data_change_last_modified_time: Optional[StrictStr] = Field(default=None, description="发布最后修改时间，ISO 8601格式的时间戳", alias="dataChangeLastModifiedTime")
    id: Optional[StrictInt] = Field(default=None, description="发布记录的唯一标识符，系统自动生成")
    app_id: Optional[StrictStr] = Field(default=None, description="所属应用的唯一标识符", alias="appId")
    cluster_name: Optional[StrictStr] = Field(default=None, description="所属集群的名称", alias="clusterName")
    namespace_name: Optional[StrictStr] = Field(default=None, description="所属命名空间的名称", alias="namespaceName")
    name: Optional[StrictStr] = Field(default=None, description="发布名称，用于标识这次发布的版本或描述")
    configurations: Optional[MapString] = None
    comment: Optional[StrictStr] = Field(default=None, description="发布备注，描述本次发布的变更内容和目的")
    __properties: ClassVar[List[str]] = ["dataChangeCreatedBy", "dataChangeLastModifiedBy", "dataChangeCreatedTime", "dataChangeLastModifiedTime", "id", "appId", "clusterName", "namespaceName", "name", "configurations", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenReleaseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configurations
        if self.configurations:
            _dict['configurations'] = self.configurations.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenReleaseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataChangeCreatedBy": obj.get("dataChangeCreatedBy"),
            "dataChangeLastModifiedBy": obj.get("dataChangeLastModifiedBy"),
            "dataChangeCreatedTime": obj.get("dataChangeCreatedTime"),
            "dataChangeLastModifiedTime": obj.get("dataChangeLastModifiedTime"),
            "id": obj.get("id"),
            "appId": obj.get("appId"),
            "clusterName": obj.get("clusterName"),
            "namespaceName": obj.get("namespaceName"),
            "name": obj.get("name"),
            "configurations": MapString.from_dict(obj["configurations"]) if obj.get("configurations") is not None else None,
            "comment": obj.get("comment")
        })
        return _obj


