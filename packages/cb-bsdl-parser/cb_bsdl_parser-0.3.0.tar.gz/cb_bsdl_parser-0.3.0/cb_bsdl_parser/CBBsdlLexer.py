# Generated from CBBsdlLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,5,33,259,8,33,10,33,12,33,262,9,33,1,34,
        1,34,1,34,1,34,3,34,268,8,34,1,35,1,35,1,35,5,35,273,8,35,10,35,
        12,35,276,9,35,1,36,1,36,1,37,1,37,3,37,282,8,37,1,37,1,37,1,38,
        4,38,287,8,38,11,38,12,38,288,1,38,1,38,1,39,1,39,1,39,1,39,5,39,
        297,8,39,10,39,12,39,300,9,39,1,39,1,39,0,0,40,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,2,0,43,43,45,45,3,0,9,10,13,13,32,32,2,0,10,10,13,13,309,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,
        0,0,3,88,1,0,0,0,5,92,1,0,0,0,7,95,1,0,0,0,9,103,1,0,0,0,11,110,
        1,0,0,0,13,127,1,0,0,0,15,137,1,0,0,0,17,153,1,0,0,0,19,171,1,0,
        0,0,21,174,1,0,0,0,23,178,1,0,0,0,25,183,1,0,0,0,27,189,1,0,0,0,
        29,192,1,0,0,0,31,196,1,0,0,0,33,204,1,0,0,0,35,208,1,0,0,0,37,219,
        1,0,0,0,39,222,1,0,0,0,41,229,1,0,0,0,43,231,1,0,0,0,45,233,1,0,
        0,0,47,235,1,0,0,0,49,237,1,0,0,0,51,239,1,0,0,0,53,241,1,0,0,0,
        55,243,1,0,0,0,57,245,1,0,0,0,59,248,1,0,0,0,61,250,1,0,0,0,63,252,
        1,0,0,0,65,254,1,0,0,0,67,256,1,0,0,0,69,263,1,0,0,0,71,269,1,0,
        0,0,73,277,1,0,0,0,75,279,1,0,0,0,77,286,1,0,0,0,79,292,1,0,0,0,
        81,82,5,101,0,0,82,83,5,110,0,0,83,84,5,116,0,0,84,85,5,105,0,0,
        85,86,5,116,0,0,86,87,5,121,0,0,87,2,1,0,0,0,88,89,5,101,0,0,89,
        90,5,110,0,0,90,91,5,100,0,0,91,4,1,0,0,0,92,93,5,105,0,0,93,94,
        5,115,0,0,94,6,1,0,0,0,95,96,5,103,0,0,96,97,5,101,0,0,97,98,5,110,
        0,0,98,99,5,101,0,0,99,100,5,114,0,0,100,101,5,105,0,0,101,102,5,
        99,0,0,102,8,1,0,0,0,103,104,5,115,0,0,104,105,5,116,0,0,105,106,
        5,114,0,0,106,107,5,105,0,0,107,108,5,110,0,0,108,109,5,103,0,0,
        109,10,1,0,0,0,110,111,5,80,0,0,111,112,5,72,0,0,112,113,5,89,0,
        0,113,114,5,83,0,0,114,115,5,73,0,0,115,116,5,67,0,0,116,117,5,65,
        0,0,117,118,5,76,0,0,118,119,5,95,0,0,119,120,5,80,0,0,120,121,5,
        73,0,0,121,122,5,78,0,0,122,123,5,95,0,0,123,124,5,77,0,0,124,125,
        5,65,0,0,125,126,5,80,0,0,126,12,1,0,0,0,127,128,5,97,0,0,128,129,
        5,116,0,0,129,130,5,116,0,0,130,131,5,114,0,0,131,132,5,105,0,0,
        132,133,5,98,0,0,133,134,5,117,0,0,134,135,5,116,0,0,135,136,5,101,
        0,0,136,14,1,0,0,0,137,138,5,66,0,0,138,139,5,79,0,0,139,140,5,85,
        0,0,140,141,5,78,0,0,141,142,5,68,0,0,142,143,5,65,0,0,143,144,5,
        82,0,0,144,145,5,89,0,0,145,146,5,95,0,0,146,147,5,76,0,0,147,148,
        5,69,0,0,148,149,5,78,0,0,149,150,5,71,0,0,150,151,5,84,0,0,151,
        152,5,72,0,0,152,16,1,0,0,0,153,154,5,66,0,0,154,155,5,79,0,0,155,
        156,5,85,0,0,156,157,5,78,0,0,157,158,5,68,0,0,158,159,5,65,0,0,
        159,160,5,82,0,0,160,161,5,89,0,0,161,162,5,95,0,0,162,163,5,82,
        0,0,163,164,5,69,0,0,164,165,5,71,0,0,165,166,5,73,0,0,166,167,5,
        83,0,0,167,168,5,84,0,0,168,169,5,69,0,0,169,170,5,82,0,0,170,18,
        1,0,0,0,171,172,5,111,0,0,172,173,5,102,0,0,173,20,1,0,0,0,174,175,
        5,117,0,0,175,176,5,115,0,0,176,177,5,101,0,0,177,22,1,0,0,0,178,
        179,5,112,0,0,179,180,5,111,0,0,180,181,5,114,0,0,181,182,5,116,
        0,0,182,24,1,0,0,0,183,184,5,105,0,0,184,185,5,110,0,0,185,186,5,
        111,0,0,186,187,5,117,0,0,187,188,5,116,0,0,188,26,1,0,0,0,189,190,
        5,105,0,0,190,191,5,110,0,0,191,28,1,0,0,0,192,193,5,111,0,0,193,
        194,5,117,0,0,194,195,5,116,0,0,195,30,1,0,0,0,196,197,5,108,0,0,
        197,198,5,105,0,0,198,199,5,110,0,0,199,200,5,107,0,0,200,201,5,
        97,0,0,201,202,5,103,0,0,202,203,5,101,0,0,203,32,1,0,0,0,204,205,
        5,98,0,0,205,206,5,105,0,0,206,207,5,116,0,0,207,34,1,0,0,0,208,
        209,5,98,0,0,209,210,5,105,0,0,210,211,5,116,0,0,211,212,5,95,0,
        0,212,213,5,118,0,0,213,214,5,101,0,0,214,215,5,99,0,0,215,216,5,
        116,0,0,216,217,5,111,0,0,217,218,5,114,0,0,218,36,1,0,0,0,219,220,
        5,116,0,0,220,221,5,111,0,0,221,38,1,0,0,0,222,223,5,100,0,0,223,
        224,5,111,0,0,224,225,5,119,0,0,225,226,5,110,0,0,226,227,5,116,
        0,0,227,228,5,111,0,0,228,40,1,0,0,0,229,230,5,46,0,0,230,42,1,0,
        0,0,231,232,5,44,0,0,232,44,1,0,0,0,233,234,5,58,0,0,234,46,1,0,
        0,0,235,236,5,59,0,0,236,48,1,0,0,0,237,238,5,40,0,0,238,50,1,0,
        0,0,239,240,5,41,0,0,240,52,1,0,0,0,241,242,5,38,0,0,242,54,1,0,
        0,0,243,244,5,34,0,0,244,56,1,0,0,0,245,246,5,58,0,0,246,247,5,61,
        0,0,247,58,1,0,0,0,248,249,5,42,0,0,249,60,1,0,0,0,250,251,5,95,
        0,0,251,62,1,0,0,0,252,253,5,91,0,0,253,64,1,0,0,0,254,255,5,93,
        0,0,255,66,1,0,0,0,256,260,7,0,0,0,257,259,7,1,0,0,258,257,1,0,0,
        0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,68,1,0,0,0,
        262,260,1,0,0,0,263,264,3,71,35,0,264,265,5,46,0,0,265,267,3,71,
        35,0,266,268,3,75,37,0,267,266,1,0,0,0,267,268,1,0,0,0,268,70,1,
        0,0,0,269,274,3,73,36,0,270,273,5,95,0,0,271,273,3,73,36,0,272,270,
        1,0,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,
        1,0,0,0,275,72,1,0,0,0,276,274,1,0,0,0,277,278,2,48,57,0,278,74,
        1,0,0,0,279,281,5,69,0,0,280,282,7,2,0,0,281,280,1,0,0,0,281,282,
        1,0,0,0,282,283,1,0,0,0,283,284,3,71,35,0,284,76,1,0,0,0,285,287,
        7,3,0,0,286,285,1,0,0,0,287,288,1,0,0,0,288,286,1,0,0,0,288,289,
        1,0,0,0,289,290,1,0,0,0,290,291,6,38,0,0,291,78,1,0,0,0,292,293,
        5,45,0,0,293,294,5,45,0,0,294,298,1,0,0,0,295,297,8,4,0,0,296,295,
        1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,301,
        1,0,0,0,300,298,1,0,0,0,301,302,6,39,0,0,302,80,1,0,0,0,8,0,260,
        267,272,274,281,288,298,1,6,0,0
    ]

class CBBsdlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ENTITY = 1
    END = 2
    IS = 3
    GENERIC = 4
    STRING = 5
    PHYSICAL_PIN_MAP = 6
    ATTRIBUTE = 7
    BS_LEN = 8
    BS_REG = 9
    OF = 10
    USE = 11
    PORT = 12
    INOUT = 13
    IN = 14
    OUT = 15
    LINKAGE = 16
    BIT = 17
    BIT_VECTOR = 18
    TO = 19
    DOWNTO = 20
    DOT = 21
    COMMA = 22
    COLON = 23
    SEMICOLON = 24
    BRACKET_OPEN = 25
    BRACKET_CLOSE = 26
    AMPERSAND = 27
    QUOTES = 28
    EQUALS = 29
    ASTERISK = 30
    UNDERLINE = 31
    SQUARE_OPEN = 32
    SQUARE_CLOSE = 33
    ID = 34
    REAL_LITERAL = 35
    INTEGER = 36
    DIGIT = 37
    EXPONENT = 38
    WS = 39
    COMMENT = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'entity'", "'end'", "'is'", "'generic'", "'string'", "'PHYSICAL_PIN_MAP'", 
            "'attribute'", "'BOUNDARY_LENGTH'", "'BOUNDARY_REGISTER'", "'of'", 
            "'use'", "'port'", "'inout'", "'in'", "'out'", "'linkage'", 
            "'bit'", "'bit_vector'", "'to'", "'downto'", "'.'", "','", "':'", 
            "';'", "'('", "')'", "'&'", "'\"'", "':='", "'*'", "'_'", "'['", 
            "']'" ]

    symbolicNames = [ "<INVALID>",
            "ENTITY", "END", "IS", "GENERIC", "STRING", "PHYSICAL_PIN_MAP", 
            "ATTRIBUTE", "BS_LEN", "BS_REG", "OF", "USE", "PORT", "INOUT", 
            "IN", "OUT", "LINKAGE", "BIT", "BIT_VECTOR", "TO", "DOWNTO", 
            "DOT", "COMMA", "COLON", "SEMICOLON", "BRACKET_OPEN", "BRACKET_CLOSE", 
            "AMPERSAND", "QUOTES", "EQUALS", "ASTERISK", "UNDERLINE", "SQUARE_OPEN", 
            "SQUARE_CLOSE", "ID", "REAL_LITERAL", "INTEGER", "DIGIT", "EXPONENT", 
            "WS", "COMMENT" ]

    ruleNames = [ "ENTITY", "END", "IS", "GENERIC", "STRING", "PHYSICAL_PIN_MAP", 
                  "ATTRIBUTE", "BS_LEN", "BS_REG", "OF", "USE", "PORT", 
                  "INOUT", "IN", "OUT", "LINKAGE", "BIT", "BIT_VECTOR", 
                  "TO", "DOWNTO", "DOT", "COMMA", "COLON", "SEMICOLON", 
                  "BRACKET_OPEN", "BRACKET_CLOSE", "AMPERSAND", "QUOTES", 
                  "EQUALS", "ASTERISK", "UNDERLINE", "SQUARE_OPEN", "SQUARE_CLOSE", 
                  "ID", "REAL_LITERAL", "INTEGER", "DIGIT", "EXPONENT", 
                  "WS", "COMMENT" ]

    grammarFileName = "CBBsdlLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


