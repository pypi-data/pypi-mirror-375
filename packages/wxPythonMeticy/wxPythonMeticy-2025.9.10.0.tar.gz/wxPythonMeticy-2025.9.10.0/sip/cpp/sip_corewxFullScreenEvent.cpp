/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.12.0
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxFullScreenEvent : public ::wxFullScreenEvent
{
public:
    sipwxFullScreenEvent(int, bool);
    sipwxFullScreenEvent(const ::wxFullScreenEvent&);
    virtual ~sipwxFullScreenEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    ::wxEvent* Clone() const SIP_OVERRIDE;
    ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxFullScreenEvent(const sipwxFullScreenEvent &);
    sipwxFullScreenEvent &operator = (const sipwxFullScreenEvent &);

    char sipPyMethods[2];
};

sipwxFullScreenEvent::sipwxFullScreenEvent(int id, bool fullscreen): ::wxFullScreenEvent(id, fullscreen), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFullScreenEvent::sipwxFullScreenEvent(const ::wxFullScreenEvent& a0): ::wxFullScreenEvent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFullScreenEvent::~sipwxFullScreenEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

::wxEvent* sipwxFullScreenEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_Clone);

    if (!sipMeth)
        return ::wxFullScreenEvent::Clone();

    extern ::wxEvent* sipVH__core_103(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_103(sipGILState, 0, sipPySelf, sipMeth);
}

::wxEventCategory sipwxFullScreenEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetEventCategory);

    if (!sipMeth)
        return ::wxFullScreenEvent::GetEventCategory();

    extern ::wxEventCategory sipVH__core_104(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_104(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxFullScreenEvent_IsFullScreen, "IsFullScreen() -> bool\n"
"\n"
"Returns true if the frame entered full screen, false if exited full\n"
"screen.");

extern "C" {static PyObject *meth_wxFullScreenEvent_IsFullScreen(PyObject *, PyObject *);}
static PyObject *meth_wxFullScreenEvent_IsFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxFullScreenEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFullScreenEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsFullScreen();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_FullScreenEvent, sipName_IsFullScreen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxFullScreenEvent_Clone, "Clone(self) -> Optional[Event]");

extern "C" {static PyObject *meth_wxFullScreenEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxFullScreenEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const ::wxFullScreenEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFullScreenEvent, &sipCpp))
        {
            ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxFullScreenEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxEvent, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_FullScreenEvent, sipName_Clone, doc_wxFullScreenEvent_Clone);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxFullScreenEvent(void *, const sipTypeDef *);}
static void *cast_wxFullScreenEvent(void *sipCppV, const sipTypeDef *targetType)
{
    ::wxFullScreenEvent *sipCpp = reinterpret_cast< ::wxFullScreenEvent *>(sipCppV);

    if (targetType == sipType_wxFullScreenEvent)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_wxEvent)->ctd_cast(static_cast< ::wxEvent *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxFullScreenEvent(void *, int);}
static void release_wxFullScreenEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxFullScreenEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxFullScreenEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxFullScreenEvent(sipSimpleWrapper *);}
static void dealloc_wxFullScreenEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxFullScreenEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxFullScreenEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxFullScreenEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxFullScreenEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxFullScreenEvent *sipCpp = SIP_NULLPTR;

    {
        int id = 0;
        bool fullscreen = 1;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_fullscreen,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|ib", &id, &fullscreen))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFullScreenEvent(id, fullscreen);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const ::wxFullScreenEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxFullScreenEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFullScreenEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxFullScreenEvent[] = {{151, 255, 1}};


static PyMethodDef methods_wxFullScreenEvent[] = {
    {sipName_Clone, meth_wxFullScreenEvent_Clone, METH_VARARGS, doc_wxFullScreenEvent_Clone},
    {sipName_IsFullScreen, meth_wxFullScreenEvent_IsFullScreen, METH_VARARGS, doc_wxFullScreenEvent_IsFullScreen}
};

PyDoc_STRVAR(doc_wxFullScreenEvent, "FullScreenEvent(id=0, fullscreen=True) -> None\n"
"\n"
"An event being sent when the user enters or exits full screen mode.");


sipClassTypeDef sipTypeDef__core_wxFullScreenEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxFullScreenEvent,
        SIP_NULLPTR,
        SIP_NULLPTR,
    },
    {
        sipNameNr_FullScreenEvent,
        {0, 0, 1},
        2, methods_wxFullScreenEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxFullScreenEvent,
    -1,
    -1,
    supers_wxFullScreenEvent,
    SIP_NULLPTR,
    init_type_wxFullScreenEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxFullScreenEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxFullScreenEvent,
    cast_wxFullScreenEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    sizeof (::wxFullScreenEvent),
};
