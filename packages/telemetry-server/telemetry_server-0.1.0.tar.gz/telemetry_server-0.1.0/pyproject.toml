[project]
name         = "telemetry_server"
version      = "0.1.0"
readme       = "README.md"
dependencies = ["flask", "gunicorn"]

[project.urls]
repository = "https://github.com/autoboat-vt/telemetry_server"

[build-system]
requires      = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    "**/.pyenv/**",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length  = 135
indent-width = 4

# Assume Python 3.12
target-version = "py312"

# Also format files in .gitignore
respect-gitignore = false

[tool.ruff.lint]
# Enable all rules, then selectively ignore some below.
select = ["ALL"]

ignore = [
    "BLE001",  # Do not catch blind exception: `Exception`
    "CPY001",  # Missing copyright notice at top of file
    "COM812",  # Trailing comma missing
    "S101",    # Use of `assert` detected
    "S113",    # Probable use of `requests` call without timeout
    "SIM115",  # Use a context manager for opening files
    "SLF001",  # Private member accessed
    "I001",    # Import block is un-sorted or un-formatted
    "INP001",  # implicit-namespace-package
    "D100",    # undocumented-public-module
    "D101",    # undocumented-public-class
    "D102",    # undocumented-public-method
    "D107",    # undocumented-public-init
    "D202",    # blank-line-after-function
    "D205",    # missing-blank-line-after-summary
    "D400",    # missing-trailing-period
    "D401",    # non-imperative-mood
    "C901",    # Method is too complex
    "E401",    # multiple-imports-on-one-line
    "E501",    # line-too-long
    "E741",    # ambiguous-variable-name
    "E711",    # Comparison to `None` should be `if cond is None:`
    "E712",    # Comparison to `True` or `False` should use `is`
    "EM101",   # Exception must not use a string literal, assign to variable first
    "ERA001",  # commented-out-code
    "EXE002",  # The file is executable but no shebang is present
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "F403",    # undefined-local-with-import-star
    "F405",    # undefined-local-with-import-star-usage
    "FA100",   # future-rewritable-type-annotation
    "FBT001",  # Boolean positional value in function definition
    "FBT002",  # Boolean positional value in function definition with default value
    "FBT003",  # Boolean positional value in function call
    "N802",    # checks for functions names that do not follow the snake_case naming convention.
    "N813",    # checks for variable names that do not follow the snake_case naming convention.
    "PLR0904", # Too many public methods (... > 20)
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments for function (... > 5)
    "PLR0915", # too-many-statements
    "PLR2004", # Magic value used in comparison
    "PTH",     # use of functions that can be replaced by pathlib module.
    "T201",    # Checks for print statements.
    "TD002",   # Missing author in TODO `# TODO(<author_name>): ...`
    "TD003",   # missing-todo-link
    "TD004",   # todo missing colon
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY301",  # raise-within-try
    "RET504",  # Unnecessary assignment of `return` value to a variable
    "RET505",  # Unnecessary `else` after `return` statement
    "G004",    # logging-f-string
    "UP015",   # Unnecessary mode argument for `open` function
    "W293",    # Blank line contains whitespace
    "Q000",    # Single quotes found but double quotes preferred
]

unfixable = [
    "F401", # Module imported but unused
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings (only has an effect when docstring-code-format is enabled).
docstring-code-line-length = "dynamic"
