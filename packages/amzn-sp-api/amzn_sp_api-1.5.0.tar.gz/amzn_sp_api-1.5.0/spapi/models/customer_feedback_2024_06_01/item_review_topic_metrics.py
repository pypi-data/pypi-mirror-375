# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ItemReviewTopicMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_of_mentions': 'int',
        'occurrence_percentage': 'float',
        'star_rating_impact': 'float',
    }

    attribute_map = {
        'number_of_mentions': 'numberOfMentions',
        'occurrence_percentage': 'occurrencePercentage',
        'star_rating_impact': 'starRatingImpact',
    }

    def __init__(self, number_of_mentions=None, occurrence_percentage=None, star_rating_impact=None, _configuration=None):  # noqa: E501
        """ItemReviewTopicMetrics - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._number_of_mentions = None
        self._occurrence_percentage = None
        self._star_rating_impact = None
        self.discriminator = None

        if number_of_mentions is not None:
            self.number_of_mentions = number_of_mentions
        if occurrence_percentage is not None:
            self.occurrence_percentage = occurrence_percentage
        if star_rating_impact is not None:
            self.star_rating_impact = star_rating_impact

    @property
    def number_of_mentions(self):
        """Gets the number_of_mentions of this ItemReviewTopicMetrics.  # noqa: E501

        The number of times that reviews mention the topic. This value is `null` if reviews do not mention the topic frequently enough.  # noqa: E501

        :return: The number_of_mentions of this ItemReviewTopicMetrics.  # noqa: E501
        :rtype: int
        """
        return self._number_of_mentions

    @number_of_mentions.setter
    def number_of_mentions(self, number_of_mentions):
        """Sets the number_of_mentions of this ItemReviewTopicMetrics.

        The number of times that reviews mention the topic. This value is `null` if reviews do not mention the topic frequently enough.  # noqa: E501

        :param number_of_mentions: The number_of_mentions of this ItemReviewTopicMetrics.  # noqa: E501
        :type: int
        """

        self._number_of_mentions = number_of_mentions

    @property
    def occurrence_percentage(self):
        """Gets the occurrence_percentage of this ItemReviewTopicMetrics.  # noqa: E501

        The percentage of customer reviews that mention the topic. This value is `null` if reviews do not mention the topic frequently enough.  # noqa: E501

        :return: The occurrence_percentage of this ItemReviewTopicMetrics.  # noqa: E501
        :rtype: float
        """
        return self._occurrence_percentage

    @occurrence_percentage.setter
    def occurrence_percentage(self, occurrence_percentage):
        """Sets the occurrence_percentage of this ItemReviewTopicMetrics.

        The percentage of customer reviews that mention the topic. This value is `null` if reviews do not mention the topic frequently enough.  # noqa: E501

        :param occurrence_percentage: The occurrence_percentage of this ItemReviewTopicMetrics.  # noqa: E501
        :type: float
        """

        self._occurrence_percentage = occurrence_percentage

    @property
    def star_rating_impact(self):
        """Gets the star_rating_impact of this ItemReviewTopicMetrics.  # noqa: E501

        The effect of the topic on the star rating of the ASIN. This value can be positive or negative. This value is `null` if the topic does't affect the star rating of the ASIN.  # noqa: E501

        :return: The star_rating_impact of this ItemReviewTopicMetrics.  # noqa: E501
        :rtype: float
        """
        return self._star_rating_impact

    @star_rating_impact.setter
    def star_rating_impact(self, star_rating_impact):
        """Sets the star_rating_impact of this ItemReviewTopicMetrics.

        The effect of the topic on the star rating of the ASIN. This value can be positive or negative. This value is `null` if the topic does't affect the star rating of the ASIN.  # noqa: E501

        :param star_rating_impact: The star_rating_impact of this ItemReviewTopicMetrics.  # noqa: E501
        :type: float
        """

        self._star_rating_impact = star_rating_impact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemReviewTopicMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemReviewTopicMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemReviewTopicMetrics):
            return True

        return self.to_dict() != other.to_dict()
