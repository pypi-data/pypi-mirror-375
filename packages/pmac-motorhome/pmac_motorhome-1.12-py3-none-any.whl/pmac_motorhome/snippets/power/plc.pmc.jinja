CLOSE

//#################################################################
// Autogenerated Homing PLC for {{plc.controller.value}}, DO NOT MODIFY
{% for group in plc.groups -%}
// Group {{ group.group_num }}:
{% if group.comment != None %}
{{ group.comment }}
{% endif %}
{% endfor -%}
//
// Manual homing instructions:
// Run homing for group GROUP_NUM: P{{plc.plc_num}}02 = GROUP_NUM enable PLC{{plc.plc_num}}
// Run homing: enable PLC{{plc.plc_num}}
// Run homing in debug mode: P{{plc.plc_num}}01 = 9 enable PLC{{plc.plc_num}}
// Pause homing: P{{plc.plc_num}}01 = 8
// Abort homing: P{{plc.plc_num}}01 = 2
// See definitions below to understand the status and the state.
//#################################################################


// Homing State P Variable
#define PLC{{plc.plc_num}}_HomingState       P{{plc.plc_num}}00
#define PLC{{plc.plc_num}}_StateIdle         0
#define PLC{{plc.plc_num}}_StateConfiguring  1
#define PLC{{plc.plc_num}}_StateMoveNeg      2
#define PLC{{plc.plc_num}}_StateMovePos      3
#define PLC{{plc.plc_num}}_StateHoming       4
#define PLC{{plc.plc_num}}_StatePostHomeMove 5
#define PLC{{plc.plc_num}}_StateAligning     6
#define PLC{{plc.plc_num}}_StateDone         7
#define PLC{{plc.plc_num}}_StateFastSearch   8
#define PLC{{plc.plc_num}}_StateFastRetrace  9
#define PLC{{plc.plc_num}}_StatePreHomeMove  10
PLC{{plc.plc_num}}_HomingState = PLC{{plc.plc_num}}_StateIdle

// Homing Status P Variable
#define PLC{{plc.plc_num}}_HomingStatus      P{{plc.plc_num}}01
#define PLC{{plc.plc_num}}_StatusDone        0
#define PLC{{plc.plc_num}}_StatusHoming      1
#define PLC{{plc.plc_num}}_StatusAborted     2
#define PLC{{plc.plc_num}}_StatusTimeout     3
#define PLC{{plc.plc_num}}_StatusFFErr       4
#define PLC{{plc.plc_num}}_StatusLimit       5
#define PLC{{plc.plc_num}}_StatusIncomplete  6
#define PLC{{plc.plc_num}}_StatusInvalid     7
#define PLC{{plc.plc_num}}_StatusPaused      8
#define PLC{{plc.plc_num}}_StatusDebugHoming 9
PLC{{plc.plc_num}}_HomingStatus = PLC{{plc.plc_num}}_StatusDone

// Homing Group P Variable
#define PLC{{plc.plc_num}}_HomingGroup       P{{plc.plc_num}}02
PLC{{plc.plc_num}}_HomingGroup = 0

// Homing Group Backup P Variable
#define PLC{{plc.plc_num}}_HomingBackupGroup P{{plc.plc_num}}03
PLC{{plc.plc_num}}_HomingBackupGroup = 0

open plc {{ plc.plc_num }}

if (PLC{{plc.plc_num}}_HomingStatus != PLC{{plc.plc_num}}_StatusHoming && PLC{{plc.plc_num}}_HomingStatus != PLC{{plc.plc_num}}_StatusDebugHoming){
    PLC{{plc.plc_num}}_HomingStatus = PLC{{plc.plc_num}}_StatusHoming
}

{# save axis state #}
//---- Configuring State ----
PLC{{plc.plc_num}}_HomingState=PLC{{plc.plc_num}}_StateConfiguring
//Save the Homing group to px03
PLC{{plc.plc_num}}_HomingBackupGroup=PLC{{plc.plc_num}}_HomingGroup
//Save high soft limits to P variables px04..x19
{{ plc.save_hi_limits() }}
//Save the low soft limits to P variables px20..x35
{{ plc.save_lo_limits() }}
//Save the home capture flags to P variables px36..x51
{{ plc.save_homed() }}
//Store 'not flag' to use in moving off a flag in P variables px52..x67
{{ plc.save_not_homed() }}
//Save the limit flags to P variables px68..x83
{{ plc.save_limit_flags() }}
//Save the current position to P variables px84..x99
{{ plc.save_position() }}
//Clear the soft limits
{{ plc.clear_limits() }}

{# Loop through the Groups in the Plc #}
{% for group in plc.groups %}
{% if group.group_num == 1 %}
if (PLC{{plc.plc_num}}_HomingBackupGroup == 1)
{% else %}
if ((PLC{{plc.plc_num}}_HomingBackupGroup == 1 || PLC{{plc.plc_num}}_HomingBackupGroup == {{ group.group_num }}){% endif %} && (PLC{{plc.plc_num}}_HomingStatus == PLC{{plc.plc_num}}_StatusHoming || PLC{{plc.plc_num}}_HomingStatus == PLC{{plc.plc_num}}_StatusDebugHoming)){
    PLC{{plc.plc_num}}_HomingGroup={{ group.group_num }}

    //Clear home flags
    {% if group.htype != "NOTHING" %}
    {{ group.clear_home() }}
    {% endif %}
    {# Loop through snippet templates in the Group #}
    {% for template in group.templates %}
        {% if template.function -%}
        {{ group.callback(template.function, template.args) -}}
        {% else %}
        {% include template.jinja_file+'.pmc.jinja' %}
        {% endif %}
    {% endfor %}
}

{% endfor %}
//---- Done ----
if (PLC{{plc.plc_num}}_HomingStatus == PLC{{plc.plc_num}}_StatusHoming || PLC{{plc.plc_num}}_HomingStatus == PLC{{plc.plc_num}}_StatusDebugHoming){
    //If we've got this far without failing, set status and state done
    PLC{{plc.plc_num}}_HomingStatus=PLC{{plc.plc_num}}_StatusDone
    PLC{{plc.plc_num}}_HomingState=PLC{{plc.plc_num}}_StateDone
    //Restore the homing group from px03
    PLC{{plc.plc_num}}_HomingGroup=PLC{{plc.plc_num}}_HomingBackupGroup
}

{# restore axis state #}
//---- Tidy Up ----
//Stop all motors if they don't have a following error
{{ plc.stop_motors() }}
//Restore the high soft limits from P variables px04..x19
{{ plc.restore_hi_limits() }}
//Restore the low soft limits from P variables px20..x35
{{ plc.restore_lo_limits() }}
//Restore the home capture flags from P variables px36..x51
{{ plc.restore_homed() }}
//Restore the limit flags to P variables px68..x83
{{ plc.restore_limit_flags() }}

disable plc {{ plc.plc_num }}
close
