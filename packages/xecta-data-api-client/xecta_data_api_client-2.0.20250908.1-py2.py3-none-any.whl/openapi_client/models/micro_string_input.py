# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MicroStringInput(BaseModel):
    """
    MicroStringInput
    """ # noqa: E501
    source_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceId of the micro string to enable upsert", alias="sourceId")
    source_wellbore_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceWellboreId of the wellbore which owns the micro string", alias="sourceWellboreId")
    source_well_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="SourceWellId of the well which owns the micro string", alias="sourceWellId")
    top_md: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Top measured depth of the micro string, ft", alias="topMd")
    bottom_md: Union[StrictFloat, StrictInt] = Field(description="Bottom measured depth of the micro string, ft", alias="bottomMd")
    id: Union[StrictFloat, StrictInt] = Field(description="Inner diameter, in")
    od: Union[StrictFloat, StrictInt] = Field(description="Outer diameter, in")
    roughness: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Absolute roughness, in")
    run_date: Optional[datetime] = Field(default=None, description="Run date. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="runDate")
    pull_date: Optional[datetime] = Field(default=None, description="Pull date. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="pullDate")
    __properties: ClassVar[List[str]] = ["sourceId", "sourceWellboreId", "sourceWellId", "topMd", "bottomMd", "id", "od", "roughness", "runDate", "pullDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MicroStringInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if top_md (nullable) is None
        # and model_fields_set contains the field
        if self.top_md is None and "top_md" in self.model_fields_set:
            _dict['topMd'] = None

        # set to None if roughness (nullable) is None
        # and model_fields_set contains the field
        if self.roughness is None and "roughness" in self.model_fields_set:
            _dict['roughness'] = None

        # set to None if run_date (nullable) is None
        # and model_fields_set contains the field
        if self.run_date is None and "run_date" in self.model_fields_set:
            _dict['runDate'] = None

        # set to None if pull_date (nullable) is None
        # and model_fields_set contains the field
        if self.pull_date is None and "pull_date" in self.model_fields_set:
            _dict['pullDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MicroStringInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceId": obj.get("sourceId"),
            "sourceWellboreId": obj.get("sourceWellboreId"),
            "sourceWellId": obj.get("sourceWellId"),
            "topMd": obj.get("topMd") if obj.get("topMd") is not None else 0.0,
            "bottomMd": obj.get("bottomMd"),
            "id": obj.get("id"),
            "od": obj.get("od"),
            "roughness": obj.get("roughness"),
            "runDate": obj.get("runDate"),
            "pullDate": obj.get("pullDate")
        })
        return _obj


