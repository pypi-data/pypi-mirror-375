# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CreateShipmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_request_details': 'ShipmentRequestDetails',
        'shipping_service_id': 'str',
        'shipping_service_offer_id': 'str',
        'hazmat_type': 'HazmatType',
        'label_format_option': 'LabelFormatOptionRequest',
        'shipment_level_seller_inputs_list': 'List[AdditionalSellerInputs]',
    }

    attribute_map = {
        'shipment_request_details': 'ShipmentRequestDetails',
        'shipping_service_id': 'ShippingServiceId',
        'shipping_service_offer_id': 'ShippingServiceOfferId',
        'hazmat_type': 'HazmatType',
        'label_format_option': 'LabelFormatOption',
        'shipment_level_seller_inputs_list': 'ShipmentLevelSellerInputsList',
    }

    def __init__(self, shipment_request_details=None, shipping_service_id=None, shipping_service_offer_id=None, hazmat_type=None, label_format_option=None, shipment_level_seller_inputs_list=None, _configuration=None):  # noqa: E501
        """CreateShipmentRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._shipment_request_details = None
        self._shipping_service_id = None
        self._shipping_service_offer_id = None
        self._hazmat_type = None
        self._label_format_option = None
        self._shipment_level_seller_inputs_list = None
        self.discriminator = None

        self.shipment_request_details = shipment_request_details
        self.shipping_service_id = shipping_service_id
        if shipping_service_offer_id is not None:
            self.shipping_service_offer_id = shipping_service_offer_id
        if hazmat_type is not None:
            self.hazmat_type = hazmat_type
        if label_format_option is not None:
            self.label_format_option = label_format_option
        if shipment_level_seller_inputs_list is not None:
            self.shipment_level_seller_inputs_list = shipment_level_seller_inputs_list

    @property
    def shipment_request_details(self):
        """Gets the shipment_request_details of this CreateShipmentRequest.  # noqa: E501


        :return: The shipment_request_details of this CreateShipmentRequest.  # noqa: E501
        :rtype: ShipmentRequestDetails
        """
        return self._shipment_request_details

    @shipment_request_details.setter
    def shipment_request_details(self, shipment_request_details):
        """Sets the shipment_request_details of this CreateShipmentRequest.


        :param shipment_request_details: The shipment_request_details of this CreateShipmentRequest.  # noqa: E501
        :type: ShipmentRequestDetails
        """
        if self._configuration.client_side_validation and shipment_request_details is None:
            raise ValueError("Invalid value for `shipment_request_details`, must not be `None`")  # noqa: E501

        self._shipment_request_details = shipment_request_details

    @property
    def shipping_service_id(self):
        """Gets the shipping_service_id of this CreateShipmentRequest.  # noqa: E501

        An Amazon-defined shipping service identifier.  # noqa: E501

        :return: The shipping_service_id of this CreateShipmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipping_service_id

    @shipping_service_id.setter
    def shipping_service_id(self, shipping_service_id):
        """Sets the shipping_service_id of this CreateShipmentRequest.

        An Amazon-defined shipping service identifier.  # noqa: E501

        :param shipping_service_id: The shipping_service_id of this CreateShipmentRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and shipping_service_id is None:
            raise ValueError("Invalid value for `shipping_service_id`, must not be `None`")  # noqa: E501

        self._shipping_service_id = shipping_service_id

    @property
    def shipping_service_offer_id(self):
        """Gets the shipping_service_offer_id of this CreateShipmentRequest.  # noqa: E501

        Identifies a shipping service order made by a carrier.  # noqa: E501

        :return: The shipping_service_offer_id of this CreateShipmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipping_service_offer_id

    @shipping_service_offer_id.setter
    def shipping_service_offer_id(self, shipping_service_offer_id):
        """Sets the shipping_service_offer_id of this CreateShipmentRequest.

        Identifies a shipping service order made by a carrier.  # noqa: E501

        :param shipping_service_offer_id: The shipping_service_offer_id of this CreateShipmentRequest.  # noqa: E501
        :type: str
        """

        self._shipping_service_offer_id = shipping_service_offer_id

    @property
    def hazmat_type(self):
        """Gets the hazmat_type of this CreateShipmentRequest.  # noqa: E501


        :return: The hazmat_type of this CreateShipmentRequest.  # noqa: E501
        :rtype: HazmatType
        """
        return self._hazmat_type

    @hazmat_type.setter
    def hazmat_type(self, hazmat_type):
        """Sets the hazmat_type of this CreateShipmentRequest.


        :param hazmat_type: The hazmat_type of this CreateShipmentRequest.  # noqa: E501
        :type: HazmatType
        """

        self._hazmat_type = hazmat_type

    @property
    def label_format_option(self):
        """Gets the label_format_option of this CreateShipmentRequest.  # noqa: E501


        :return: The label_format_option of this CreateShipmentRequest.  # noqa: E501
        :rtype: LabelFormatOptionRequest
        """
        return self._label_format_option

    @label_format_option.setter
    def label_format_option(self, label_format_option):
        """Sets the label_format_option of this CreateShipmentRequest.


        :param label_format_option: The label_format_option of this CreateShipmentRequest.  # noqa: E501
        :type: LabelFormatOptionRequest
        """

        self._label_format_option = label_format_option

    @property
    def shipment_level_seller_inputs_list(self):
        """Gets the shipment_level_seller_inputs_list of this CreateShipmentRequest.  # noqa: E501

        A list of additional seller input pairs required to purchase shipping.  # noqa: E501

        :return: The shipment_level_seller_inputs_list of this CreateShipmentRequest.  # noqa: E501
        :rtype: List[AdditionalSellerInputs]
        """
        return self._shipment_level_seller_inputs_list

    @shipment_level_seller_inputs_list.setter
    def shipment_level_seller_inputs_list(self, shipment_level_seller_inputs_list):
        """Sets the shipment_level_seller_inputs_list of this CreateShipmentRequest.

        A list of additional seller input pairs required to purchase shipping.  # noqa: E501

        :param shipment_level_seller_inputs_list: The shipment_level_seller_inputs_list of this CreateShipmentRequest.  # noqa: E501
        :type: List[AdditionalSellerInputs]
        """

        self._shipment_level_seller_inputs_list = shipment_level_seller_inputs_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateShipmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateShipmentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateShipmentRequest):
            return True

        return self.to_dict() != other.to_dict()
