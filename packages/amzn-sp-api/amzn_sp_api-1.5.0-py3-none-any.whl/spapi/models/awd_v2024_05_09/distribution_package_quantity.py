# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class DistributionPackageQuantity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'distribution_package': 'DistributionPackage',
    }

    attribute_map = {
        'count': 'count',
        'distribution_package': 'distributionPackage',
    }

    def __init__(self, count=None, distribution_package=None, _configuration=None):  # noqa: E501
        """DistributionPackageQuantity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._count = None
        self._distribution_package = None
        self.discriminator = None

        self.count = count
        self.distribution_package = distribution_package

    @property
    def count(self):
        """Gets the count of this DistributionPackageQuantity.  # noqa: E501

        Number of cases or pallets with the same package configuration.  # noqa: E501

        :return: The count of this DistributionPackageQuantity.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DistributionPackageQuantity.

        Number of cases or pallets with the same package configuration.  # noqa: E501

        :param count: The count of this DistributionPackageQuantity.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def distribution_package(self):
        """Gets the distribution_package of this DistributionPackageQuantity.  # noqa: E501


        :return: The distribution_package of this DistributionPackageQuantity.  # noqa: E501
        :rtype: DistributionPackage
        """
        return self._distribution_package

    @distribution_package.setter
    def distribution_package(self, distribution_package):
        """Sets the distribution_package of this DistributionPackageQuantity.


        :param distribution_package: The distribution_package of this DistributionPackageQuantity.  # noqa: E501
        :type: DistributionPackage
        """
        if self._configuration.client_side_validation and distribution_package is None:
            raise ValueError("Invalid value for `distribution_package`, must not be `None`")  # noqa: E501

        self._distribution_package = distribution_package

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DistributionPackageQuantity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributionPackageQuantity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DistributionPackageQuantity):
            return True

        return self.to_dict() != other.to_dict()
