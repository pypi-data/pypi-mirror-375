# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ServiceJobProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_job_provider_id': 'str',
    }

    attribute_map = {
        'service_job_provider_id': 'serviceJobProviderId',
    }

    def __init__(self, service_job_provider_id=None, _configuration=None):  # noqa: E501
        """ServiceJobProvider - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._service_job_provider_id = None
        self.discriminator = None

        if service_job_provider_id is not None:
            self.service_job_provider_id = service_job_provider_id

    @property
    def service_job_provider_id(self):
        """Gets the service_job_provider_id of this ServiceJobProvider.  # noqa: E501

        The identifier of the service job provider.  # noqa: E501

        :return: The service_job_provider_id of this ServiceJobProvider.  # noqa: E501
        :rtype: str
        """
        return self._service_job_provider_id

    @service_job_provider_id.setter
    def service_job_provider_id(self, service_job_provider_id):
        """Sets the service_job_provider_id of this ServiceJobProvider.

        The identifier of the service job provider.  # noqa: E501

        :param service_job_provider_id: The service_job_provider_id of this ServiceJobProvider.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                service_job_provider_id is not None and not re.search(r'^[A-Z0-9]*$', service_job_provider_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `service_job_provider_id`, must be a follow pattern or equal to `/^[A-Z0-9]*$/`")  # noqa: E501

        self._service_job_provider_id = service_job_provider_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceJobProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceJobProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceJobProvider):
            return True

        return self.to_dict() != other.to_dict()
