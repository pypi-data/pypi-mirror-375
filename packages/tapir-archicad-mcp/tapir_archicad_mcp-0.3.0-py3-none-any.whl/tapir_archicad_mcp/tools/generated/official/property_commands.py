# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch
import time
from typing import Any
from tapir_archicad_mcp.pagination import handle_paginated_request, PAGINATION_CACHE, CACHE_LIFETIME_SECONDS

from multiconn_archicad.models.official.commands import (
    GetAllPropertyGroupIdsParameters,
GetAllPropertyGroupIdsResult,
GetAllPropertyIdsOfElementsParameters,
GetAllPropertyIdsOfElementsResult,
GetAllPropertyIdsParameters,
GetAllPropertyIdsResult,
GetAllPropertyNamesResult,
GetDetailsOfPropertiesParameters,
GetDetailsOfPropertiesResult,
GetPropertyDefinitionAvailabilityParameters,
GetPropertyDefinitionAvailabilityResult,
GetPropertyGroupsParameters,
GetPropertyGroupsResult,
GetPropertyIdsParameters,
GetPropertyIdsResult
)


log = logging.getLogger()

def get_all_property_group_ids(port: int, params: GetAllPropertyGroupIdsParameters) -> GetAllPropertyGroupIdsResult:
    """
    Returns the identifier of every property group in the current plan. The optional propertyType parameter can be used to filter the results based on the type of the property group (Built-in or User Defined).
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetAllPropertyGroupIds",
            parameters=params.model_dump(mode='json')
        )
        return GetAllPropertyGroupIdsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetAllPropertyGroupIds result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAllPropertyGroupIds on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_all_property_group_ids,
    name="properties_get_all_property_group_ids",
    title="GetAllPropertyGroupIds",
    description="Returns the identifier of every property group in the current plan. The optional propertyType parameter can be used to filter the results based on the type of the property group (Built-in or User Defined).",
    params_model=GetAllPropertyGroupIdsParameters,
    result_model=GetAllPropertyGroupIdsResult
)


class PaginatedGetAllPropertyIdsResult(GetAllPropertyIdsResult):
    """A paginated version of the GetAllPropertyIdsResult."""
    properties: list[Any]
    next_page_token: str | None = None


def get_all_property_ids(port: int, params: GetAllPropertyIdsParameters, page_token: str | None = None) -> PaginatedGetAllPropertyIdsResult:
    """
    Returns the identifier of every property in the current plan. The optional propertyType parameter can be used to filter the results based on the type of the property (Built-in or User Defined).
        This response is paginated. If 'next_page_token' is returned, call this function
        again with that token to get the next page of results.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        cache_key = f"{port}:GetAllPropertyIds:{params.model_dump_json()}"

        if not page_token:
            full_response_dict = conn_header.core.post_command(
                command="API.GetAllPropertyIds",
                parameters=params.model_dump(mode='json')
            )
            full_response_model = GetAllPropertyIdsResult.model_validate(full_response_dict)
            PAGINATION_CACHE[cache_key] = (full_response_model, time.time())

        if cache_key not in PAGINATION_CACHE:
            raise ValueError("Pagination session expired or invalid. Please start a new request.")

        full_response_model, timestamp = PAGINATION_CACHE[cache_key]
        if time.time() - timestamp > CACHE_LIFETIME_SECONDS:
            del PAGINATION_CACHE[cache_key]
            raise ValueError("Pagination session expired. Please start a new request.")

        list_to_paginate = getattr(full_response_model, "properties")
        paginated_result = handle_paginated_request(list_to_paginate, page_token)

        response_data = full_response_model.model_dump()
        response_data["properties"] = paginated_result.items
        response_data["next_page_token"] = paginated_result.next_page_token

        return PaginatedGetAllPropertyIdsResult.model_validate(response_data)

    except ValidationError as e:
        log.error(f"Validation error for GetAllPropertyIds result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAllPropertyIds on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_all_property_ids,
    name="properties_get_all_property_ids",
    title="GetAllPropertyIds",
    description="Returns the identifier of every property in the current plan. The optional propertyType parameter can be used to filter the results based on the type of the property (Built-in or User Defined).",
    params_model=GetAllPropertyIdsParameters,
    result_model=PaginatedGetAllPropertyIdsResult
)


def get_all_property_ids_of_elements(port: int, params: GetAllPropertyIdsOfElementsParameters) -> GetAllPropertyIdsOfElementsResult:
    """
    Returns all property identifiers of the given elements. The optional propertyType parameter can be used to filter the results based on the type of the property (Built-in or User Defined).
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetAllPropertyIdsOfElements",
            parameters=params.model_dump(mode='json')
        )
        return GetAllPropertyIdsOfElementsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetAllPropertyIdsOfElements result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAllPropertyIdsOfElements on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_all_property_ids_of_elements,
    name="properties_get_all_property_ids_of_elements",
    title="GetAllPropertyIdsOfElements",
    description="Returns all property identifiers of the given elements. The optional propertyType parameter can be used to filter the results based on the type of the property (Built-in or User Defined).",
    params_model=GetAllPropertyIdsOfElementsParameters,
    result_model=GetAllPropertyIdsOfElementsResult
)


class PaginatedGetAllPropertyNamesResult(GetAllPropertyNamesResult):
    """A paginated version of the GetAllPropertyNamesResult."""
    properties: list[Any]
    next_page_token: str | None = None


def get_all_property_names(port: int, page_token: str | None = None) -> PaginatedGetAllPropertyNamesResult:
    """
    Returns the human-readable names of available Property definitions for debug and development purposes.
        This response is paginated. If 'next_page_token' is returned, call this function
        again with that token to get the next page of results.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        cache_key = f"{port}:GetAllPropertyNames"

        if not page_token:
            full_response_dict = conn_header.core.post_command(
                command="API.GetAllPropertyNames",
                parameters={}
            )
            full_response_model = GetAllPropertyNamesResult.model_validate(full_response_dict)
            PAGINATION_CACHE[cache_key] = (full_response_model, time.time())

        if cache_key not in PAGINATION_CACHE:
            raise ValueError("Pagination session expired or invalid. Please start a new request.")

        full_response_model, timestamp = PAGINATION_CACHE[cache_key]
        if time.time() - timestamp > CACHE_LIFETIME_SECONDS:
            del PAGINATION_CACHE[cache_key]
            raise ValueError("Pagination session expired. Please start a new request.")

        list_to_paginate = getattr(full_response_model, "properties")
        paginated_result = handle_paginated_request(list_to_paginate, page_token)

        response_data = full_response_model.model_dump()
        response_data["properties"] = paginated_result.items
        response_data["next_page_token"] = paginated_result.next_page_token

        return PaginatedGetAllPropertyNamesResult.model_validate(response_data)

    except ValidationError as e:
        log.error(f"Validation error for GetAllPropertyNames result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAllPropertyNames on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_all_property_names,
    name="properties_get_all_property_names",
    title="GetAllPropertyNames",
    description="Returns the human-readable names of available Property definitions for debug and development purposes.",
    params_model=None,
    result_model=PaginatedGetAllPropertyNamesResult
)


def get_details_of_properties(port: int, params: GetDetailsOfPropertiesParameters) -> GetDetailsOfPropertiesResult:
    """
    Returns the details of property definitions.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetDetailsOfProperties",
            parameters=params.model_dump(mode='json')
        )
        return GetDetailsOfPropertiesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetDetailsOfProperties result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetDetailsOfProperties on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_details_of_properties,
    name="properties_get_details_of_properties",
    title="GetDetailsOfProperties",
    description="Returns the details of property definitions.",
    params_model=GetDetailsOfPropertiesParameters,
    result_model=GetDetailsOfPropertiesResult
)


def get_property_definition_availability(port: int, params: GetPropertyDefinitionAvailabilityParameters) -> GetPropertyDefinitionAvailabilityResult:
    """
    Returns the ids of classification items a given property definition is available for.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetPropertyDefinitionAvailability",
            parameters=params.model_dump(mode='json')
        )
        return GetPropertyDefinitionAvailabilityResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetPropertyDefinitionAvailability result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetPropertyDefinitionAvailability on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_property_definition_availability,
    name="properties_get_property_definition_availability",
    title="GetPropertyDefinitionAvailability",
    description="Returns the ids of classification items a given property definition is available for.",
    params_model=GetPropertyDefinitionAvailabilityParameters,
    result_model=GetPropertyDefinitionAvailabilityResult
)


def get_property_groups(port: int, params: GetPropertyGroupsParameters) -> GetPropertyGroupsResult:
    """
    Returns the details of property groups.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetPropertyGroups",
            parameters=params.model_dump(mode='json')
        )
        return GetPropertyGroupsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetPropertyGroups result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetPropertyGroups on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_property_groups,
    name="properties_get_property_groups",
    title="GetPropertyGroups",
    description="Returns the details of property groups.",
    params_model=GetPropertyGroupsParameters,
    result_model=GetPropertyGroupsResult
)


def get_property_ids(port: int, params: GetPropertyIdsParameters) -> GetPropertyIdsResult:
    """
    Returns the identifiers of property definitions for the requested property names.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetPropertyIds",
            parameters=params.model_dump(mode='json')
        )
        return GetPropertyIdsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetPropertyIds result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetPropertyIds on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_property_ids,
    name="properties_get_property_ids",
    title="GetPropertyIds",
    description="Returns the identifiers of property definitions for the requested property names.",
    params_model=GetPropertyIdsParameters,
    result_model=GetPropertyIdsResult
)
