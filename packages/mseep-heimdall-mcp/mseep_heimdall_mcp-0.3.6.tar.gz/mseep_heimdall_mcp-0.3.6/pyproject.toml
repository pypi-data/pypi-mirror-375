[build-system]
requires = [
    "setuptools>=64",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "mseep-heimdall-mcp"
version = "0.3.6"
description = "Persistent, project-aware, long-term memory for AI coding assistants"
requires-python = ">=3.10"
authors = [
    { name = "mseep", email = "support@skydeck.ai" },
]
keywords = [
    "ai",
    "memory",
    "cognitive",
    "llm",
    "mcp",
    "quadrant",
    "persistent",
    "session",
    "chat",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
dependencies = [
    "onnxruntime>=1.16.0",
    "tokenizers>=0.21.0",
    "qdrant-client>=1.7.0",
    "numpy>=1.24.0",
    "loguru>=0.7.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "docker>=6.0.0",
    "psutil>=5.9.0",
    "requests>=2.31.0",
    "prompt-toolkit>=3.0.0",
    "platformdirs>=3.0.0",
    "portalocker>=2.7.0",
    "mcp>=1.4.0",
    "GitPython",
    "spacy",
    "vaderSentiment",
    "nrclex>=3.0.0",
]

[project.readme]
content-type = "text/plain"
text = "Package managed by MseeP.ai"

[project.license]
text = "Apache 2.0"

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pre-commit>=3.0.0",
    "pip-tools>=7.0.0",
    "types-requests",
    "types-PyYAML",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
heimdall = "heimdall.cli:main"
heimdall-mcp = "heimdall.mcp_server:main_sync"
heimdall-lightweight-monitor = "lightweight_monitor:main"

[tool.setuptools]
include-package-data = true
py-modules = [
    "lightweight_monitor",
]

[tool.setuptools.packages.find]
where = [
    ".",
]
include = [
    "cognitive_memory*",
    "heimdall*",
]

[tool.setuptools.package-data]
"*" = [
    "scripts/*",
]
cognitive_memory = [
    "storage/migrations/*.sql",
]

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "B",
    "C4",
    "UP",
]
ignore = [
    "E501",
    "B008",
    "C901",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",
]
"tests/**/*" = [
    "B018",
]

[tool.black]
target-version = [
    "py313",
]
line-length = 88
skip-string-normalization = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "onnxruntime.*",
    "tokenizers.*",
    "spacy.*",
    "vaderSentiment.*",
    "nrclex.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_qdrant: marks tests that require Qdrant service",
]

[tool.coverage.run]
source = [
    "cognitive_memory",
    "heimdall",
    "lightweight_monitor.py",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
