# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class BrowseNodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'browse_node_id': 'str',
        'display_name': 'str',
    }

    attribute_map = {
        'browse_node_id': 'browseNodeId',
        'display_name': 'displayName',
    }

    def __init__(self, browse_node_id=None, display_name=None, _configuration=None):  # noqa: E501
        """BrowseNodeResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._browse_node_id = None
        self._display_name = None
        self.discriminator = None

        self.browse_node_id = browse_node_id
        self.display_name = display_name

    @property
    def browse_node_id(self):
        """Gets the browse_node_id of this BrowseNodeResponse.  # noqa: E501

        A browse node id is the unique identifier of a given browse node. A browse node is a location in a browse tree that is used for navigation, product classification, and website content.  # noqa: E501

        :return: The browse_node_id of this BrowseNodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._browse_node_id

    @browse_node_id.setter
    def browse_node_id(self, browse_node_id):
        """Sets the browse_node_id of this BrowseNodeResponse.

        A browse node id is the unique identifier of a given browse node. A browse node is a location in a browse tree that is used for navigation, product classification, and website content.  # noqa: E501

        :param browse_node_id: The browse_node_id of this BrowseNodeResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and browse_node_id is None:
            raise ValueError("Invalid value for `browse_node_id`, must not be `None`")  # noqa: E501

        self._browse_node_id = browse_node_id

    @property
    def display_name(self):
        """Gets the display_name of this BrowseNodeResponse.  # noqa: E501

        The display name of the browse node as visible on the Amazon retail website.  # noqa: E501

        :return: The display_name of this BrowseNodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BrowseNodeResponse.

        The display name of the browse node as visible on the Amazon retail website.  # noqa: E501

        :param display_name: The display_name of this BrowseNodeResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrowseNodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrowseNodeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrowseNodeResponse):
            return True

        return self.to_dict() != other.to_dict()
