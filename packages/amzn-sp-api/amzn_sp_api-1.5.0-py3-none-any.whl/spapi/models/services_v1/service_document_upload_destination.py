# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ServiceDocumentUploadDestination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_destination_id': 'str',
        'url': 'str',
        'encryption_details': 'EncryptionDetails',
        'headers': 'object',
    }

    attribute_map = {
        'upload_destination_id': 'uploadDestinationId',
        'url': 'url',
        'encryption_details': 'encryptionDetails',
        'headers': 'headers',
    }

    def __init__(self, upload_destination_id=None, url=None, encryption_details=None, headers=None, _configuration=None):  # noqa: E501
        """ServiceDocumentUploadDestination - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._upload_destination_id = None
        self._url = None
        self._encryption_details = None
        self._headers = None
        self.discriminator = None

        self.upload_destination_id = upload_destination_id
        self.url = url
        self.encryption_details = encryption_details
        if headers is not None:
            self.headers = headers

    @property
    def upload_destination_id(self):
        """Gets the upload_destination_id of this ServiceDocumentUploadDestination.  # noqa: E501

        The unique identifier to be used by APIs that reference the upload destination.  # noqa: E501

        :return: The upload_destination_id of this ServiceDocumentUploadDestination.  # noqa: E501
        :rtype: str
        """
        return self._upload_destination_id

    @upload_destination_id.setter
    def upload_destination_id(self, upload_destination_id):
        """Sets the upload_destination_id of this ServiceDocumentUploadDestination.

        The unique identifier to be used by APIs that reference the upload destination.  # noqa: E501

        :param upload_destination_id: The upload_destination_id of this ServiceDocumentUploadDestination.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and upload_destination_id is None:
            raise ValueError("Invalid value for `upload_destination_id`, must not be `None`")  # noqa: E501

        self._upload_destination_id = upload_destination_id

    @property
    def url(self):
        """Gets the url of this ServiceDocumentUploadDestination.  # noqa: E501

        The URL to which to upload the file.  # noqa: E501

        :return: The url of this ServiceDocumentUploadDestination.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ServiceDocumentUploadDestination.

        The URL to which to upload the file.  # noqa: E501

        :param url: The url of this ServiceDocumentUploadDestination.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def encryption_details(self):
        """Gets the encryption_details of this ServiceDocumentUploadDestination.  # noqa: E501


        :return: The encryption_details of this ServiceDocumentUploadDestination.  # noqa: E501
        :rtype: EncryptionDetails
        """
        return self._encryption_details

    @encryption_details.setter
    def encryption_details(self, encryption_details):
        """Sets the encryption_details of this ServiceDocumentUploadDestination.


        :param encryption_details: The encryption_details of this ServiceDocumentUploadDestination.  # noqa: E501
        :type: EncryptionDetails
        """
        if self._configuration.client_side_validation and encryption_details is None:
            raise ValueError("Invalid value for `encryption_details`, must not be `None`")  # noqa: E501

        self._encryption_details = encryption_details

    @property
    def headers(self):
        """Gets the headers of this ServiceDocumentUploadDestination.  # noqa: E501

        The headers to include in the upload request.  # noqa: E501

        :return: The headers of this ServiceDocumentUploadDestination.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ServiceDocumentUploadDestination.

        The headers to include in the upload request.  # noqa: E501

        :param headers: The headers of this ServiceDocumentUploadDestination.  # noqa: E501
        :type: object
        """

        self._headers = headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceDocumentUploadDestination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceDocumentUploadDestination):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceDocumentUploadDestination):
            return True

        return self.to_dict() != other.to_dict()
