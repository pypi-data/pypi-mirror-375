[project]
name = "datarobot-pulumi-utils"
dynamic = ["version"]
description = "A set of Pulumi CustomResources and other utilities built on top of the pulumi-datarobot provider."
readme = "README.md"
license = "Apache-2.0"

classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Internet",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.9"
maintainers = [
    { name = "DataRobot", email = "api-maintainer@datarobot.com" },
]
dependencies = [
    "pulumi>=3.0.0,<4.0.0",
    "pulumi-datarobot>=0.8.15",
    "pydantic>=2.7.4,<3.0",
    "datarobot>=3.5.2,<4.0",
    "PyYAML>=6.0.2,<7.0",
    "papermill>=2.6.0,<3"
]

[project.urls]
Homepage = "https://datarobot.com"
Source = "https://github.com/datarobot-oss/datarobot-pulumi-utils"

[dependency-groups]
dev = [
    "coverage>=7.7.1",
    "mypy>=1.15.0",
    "pytest>=8.3.5",
    "ruff>=0.11.1",
    "types-pyyaml>=6.0.12.20241230",
]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"

[tool.hatch.build.hooks.version]
path = "src/datarobot_pulumi_utils/_version.py"
template = '''
version = "{version}"
'''

[tool.ruff]
line-length = 120
target-version = "py39"
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
  "tests",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.mypy]
plugins = "pydantic.mypy"
strict = true
exclude = """(?x)(
    output/ # exclude files starting with "output"
    | deployment_.*/
    | include/   # or files starting with "include."
    | venv/
    | .venv/
    | .cache
    | e2e/
  )"""
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
enable_error_code = "ignore-without-code"
implicit_reexport = true
ignore_missing_imports = false
no_implicit_optional = true
show_column_numbers = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "datarobot.*"
implicit_reexport = true

[[tool.mypy.overrides]]
module = "papermill.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning",
]