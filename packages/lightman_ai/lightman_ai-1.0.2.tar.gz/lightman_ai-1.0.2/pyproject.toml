
[project]
authors = [
    {name = "sdn4z", email = "imsdn4z@gmail.com"},
    {name = "scastlara", email = "s.cast.lara@gmail.com"}
]
requires-python = "<4,>=3.13"
dependencies = [
    "httpx<1.0.0,>=0.28.0",
    "python-dotenv<2.0.0,>=1.1.1",
    "click<9.0.0,>=8.1.7",
    "stamina<26.0.0,>=25.1.0",
    "pydantic-settings<3.0.0,>=2.9.1",
    "tomlkit<1.0.0,>=0.13.3",
    "pydantic-ai-slim[google,openai]>=1.0.0,<2.0.0",
]
name = "lightman_ai"
description = "LLM-powered cybersecurity news aggregator."
readme = "README.md"
dynamic = ["version"]

[project.scripts]
lightman-ai = "lightman_ai.cli:entry_point"

[project.optional-dependencies]
sentry = [
    "sentry-sdk>=2.21.0,<3.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "VERSION"
pattern = "v(?P<version>[^\\s]+)"

[tool.hatch.build.targets.wheel]
packages = ["src/lightman_ai"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
    "/VERSION",
    "/pyproject.toml",
]

[tool.pytest.ini_options]
addopts = """
    -s
    --cov
    --cov-report term-missing
    --cov-report=xml:./tests/coverage.xml
    --junitxml=./tests/junit.xml
"""
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"


[tool.ruff]
target-version = "py312"
line-length = 120
src = ["src", "tests"]

[tool.ruff.lint]
select = [
  "B",   # flake8-bugbear
  "C",   # mccabe
  "E",   # pycodestyle
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "B",   # bugbear
  "D",   # pydocstyle
  "I",   # isort
  "C4",  # comprehensions
  "SIM", # simplify
  "N",   # pep8-naming
  "TRY", # tryceratops
  "UP",  # pyupgrade
  "PT",  # pytest-style
  "TCH", # type-checking
  "PL",  # pylint
  "G",   # logging format
  "TID", # tidy-imports
]
ignore = [
  "E501",    # line-length (enforced by black instead)
  'D1',      # pydocstyle enforces docstrings everywhere
  'TRY003',  # tryceratops rule not useful
  "PLR0913", # pylint rule not useful
  "B008",    # checks for function calls in default function arguments.
  'D206',    # conflicts with formatter
  'W191',    # conflicts with formatter
  'D203',    # conflicts with formatter
  'D211',    # conflicts with formatter
  'D212',    # conflicts with formatter
  'UP031',   # allow strings formated with %s
  'PLR2004'  # magic value
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.isort]
known-third-party = ["lightman_ai", "tests"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ANN", # no enforcement of type annotations in tests
    "S",   # bandit is not useful in tests
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"dateutil.tz".msg = "Use `zoneinfo` instead."
"pytz".msg = "Use `zoneinfo` instead."


[tool.mypy]
python_version = "3.13"
mypy_path = "src"
strict = true
pretty = true
warn_unused_ignores = true
enable_error_code = ["explicit-override"]


[tool.coverage.run]
omit = ["tests/*", "eval/*"]

[tool.coverage.report]
fail_under = 95
exclude_lines = [
    "if TYPE_CHECKING:",
    "pragma: no cover",
    "raise NotImplementedError",
]

[dependency-groups]
test = [
    "pytest<9.0.0,>=8.0.0",
    "pytest-cov<6.0.0,>=5.0.0",
    "pytest-asyncio<1.0.0,>=0.26.0",
    "freezegun>=1.5.3",
]
lint = [
    "mypy<2.0.0,>=1.1.1",
    "ruff<1.0.0,>=0.11.0",
]
local = [
    "ipdb<1.0.0,>=0.13.13",
    "pdbpp<1.0.0,>=0.11.6",
    "pre-commit<4.0.0,>=3.2.2",
    "commitizen<5.0.0,>=4.8.3",
    "codespell<3.0.0,>=2.2.4",
]