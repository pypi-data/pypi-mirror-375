# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FulfillmentOrderItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seller_sku': 'str',
        'seller_fulfillment_order_item_id': 'str',
        'quantity': 'int',
        'gift_message': 'str',
        'displayable_comment': 'str',
        'fulfillment_network_sku': 'str',
        'order_item_disposition': 'str',
        'cancelled_quantity': 'int',
        'unfulfillable_quantity': 'int',
        'estimated_ship_date': 'datetime',
        'estimated_arrival_date': 'datetime',
        'per_unit_price': 'Money',
        'per_unit_tax': 'Money',
        'per_unit_declared_value': 'Money',
    }

    attribute_map = {
        'seller_sku': 'sellerSku',
        'seller_fulfillment_order_item_id': 'sellerFulfillmentOrderItemId',
        'quantity': 'quantity',
        'gift_message': 'giftMessage',
        'displayable_comment': 'displayableComment',
        'fulfillment_network_sku': 'fulfillmentNetworkSku',
        'order_item_disposition': 'orderItemDisposition',
        'cancelled_quantity': 'cancelledQuantity',
        'unfulfillable_quantity': 'unfulfillableQuantity',
        'estimated_ship_date': 'estimatedShipDate',
        'estimated_arrival_date': 'estimatedArrivalDate',
        'per_unit_price': 'perUnitPrice',
        'per_unit_tax': 'perUnitTax',
        'per_unit_declared_value': 'perUnitDeclaredValue',
    }

    def __init__(self, seller_sku=None, seller_fulfillment_order_item_id=None, quantity=None, gift_message=None, displayable_comment=None, fulfillment_network_sku=None, order_item_disposition=None, cancelled_quantity=None, unfulfillable_quantity=None, estimated_ship_date=None, estimated_arrival_date=None, per_unit_price=None, per_unit_tax=None, per_unit_declared_value=None, _configuration=None):  # noqa: E501
        """FulfillmentOrderItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._seller_sku = None
        self._seller_fulfillment_order_item_id = None
        self._quantity = None
        self._gift_message = None
        self._displayable_comment = None
        self._fulfillment_network_sku = None
        self._order_item_disposition = None
        self._cancelled_quantity = None
        self._unfulfillable_quantity = None
        self._estimated_ship_date = None
        self._estimated_arrival_date = None
        self._per_unit_price = None
        self._per_unit_tax = None
        self._per_unit_declared_value = None
        self.discriminator = None

        self.seller_sku = seller_sku
        self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id
        self.quantity = quantity
        if gift_message is not None:
            self.gift_message = gift_message
        if displayable_comment is not None:
            self.displayable_comment = displayable_comment
        if fulfillment_network_sku is not None:
            self.fulfillment_network_sku = fulfillment_network_sku
        if order_item_disposition is not None:
            self.order_item_disposition = order_item_disposition
        self.cancelled_quantity = cancelled_quantity
        self.unfulfillable_quantity = unfulfillable_quantity
        if estimated_ship_date is not None:
            self.estimated_ship_date = estimated_ship_date
        if estimated_arrival_date is not None:
            self.estimated_arrival_date = estimated_arrival_date
        if per_unit_price is not None:
            self.per_unit_price = per_unit_price
        if per_unit_tax is not None:
            self.per_unit_tax = per_unit_tax
        if per_unit_declared_value is not None:
            self.per_unit_declared_value = per_unit_declared_value

    @property
    def seller_sku(self):
        """Gets the seller_sku of this FulfillmentOrderItem.  # noqa: E501

        The seller SKU of the item.  # noqa: E501

        :return: The seller_sku of this FulfillmentOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._seller_sku

    @seller_sku.setter
    def seller_sku(self, seller_sku):
        """Sets the seller_sku of this FulfillmentOrderItem.

        The seller SKU of the item.  # noqa: E501

        :param seller_sku: The seller_sku of this FulfillmentOrderItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and seller_sku is None:
            raise ValueError("Invalid value for `seller_sku`, must not be `None`")  # noqa: E501

        self._seller_sku = seller_sku

    @property
    def seller_fulfillment_order_item_id(self):
        """Gets the seller_fulfillment_order_item_id of this FulfillmentOrderItem.  # noqa: E501

        A fulfillment order item identifier submitted with a call to the `createFulfillmentOrder` operation.  # noqa: E501

        :return: The seller_fulfillment_order_item_id of this FulfillmentOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._seller_fulfillment_order_item_id

    @seller_fulfillment_order_item_id.setter
    def seller_fulfillment_order_item_id(self, seller_fulfillment_order_item_id):
        """Sets the seller_fulfillment_order_item_id of this FulfillmentOrderItem.

        A fulfillment order item identifier submitted with a call to the `createFulfillmentOrder` operation.  # noqa: E501

        :param seller_fulfillment_order_item_id: The seller_fulfillment_order_item_id of this FulfillmentOrderItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and seller_fulfillment_order_item_id is None:
            raise ValueError("Invalid value for `seller_fulfillment_order_item_id`, must not be `None`")  # noqa: E501

        self._seller_fulfillment_order_item_id = seller_fulfillment_order_item_id

    @property
    def quantity(self):
        """Gets the quantity of this FulfillmentOrderItem.  # noqa: E501

        The item quantity.  # noqa: E501

        :return: The quantity of this FulfillmentOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this FulfillmentOrderItem.

        The item quantity.  # noqa: E501

        :param quantity: The quantity of this FulfillmentOrderItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def gift_message(self):
        """Gets the gift_message of this FulfillmentOrderItem.  # noqa: E501

        A message to the gift recipient, if applicable.  # noqa: E501

        :return: The gift_message of this FulfillmentOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._gift_message

    @gift_message.setter
    def gift_message(self, gift_message):
        """Sets the gift_message of this FulfillmentOrderItem.

        A message to the gift recipient, if applicable.  # noqa: E501

        :param gift_message: The gift_message of this FulfillmentOrderItem.  # noqa: E501
        :type: str
        """

        self._gift_message = gift_message

    @property
    def displayable_comment(self):
        """Gets the displayable_comment of this FulfillmentOrderItem.  # noqa: E501

        Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.  # noqa: E501

        :return: The displayable_comment of this FulfillmentOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._displayable_comment

    @displayable_comment.setter
    def displayable_comment(self, displayable_comment):
        """Sets the displayable_comment of this FulfillmentOrderItem.

        Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.  # noqa: E501

        :param displayable_comment: The displayable_comment of this FulfillmentOrderItem.  # noqa: E501
        :type: str
        """

        self._displayable_comment = displayable_comment

    @property
    def fulfillment_network_sku(self):
        """Gets the fulfillment_network_sku of this FulfillmentOrderItem.  # noqa: E501

        Amazon's fulfillment network SKU of the item.  # noqa: E501

        :return: The fulfillment_network_sku of this FulfillmentOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_network_sku

    @fulfillment_network_sku.setter
    def fulfillment_network_sku(self, fulfillment_network_sku):
        """Sets the fulfillment_network_sku of this FulfillmentOrderItem.

        Amazon's fulfillment network SKU of the item.  # noqa: E501

        :param fulfillment_network_sku: The fulfillment_network_sku of this FulfillmentOrderItem.  # noqa: E501
        :type: str
        """

        self._fulfillment_network_sku = fulfillment_network_sku

    @property
    def order_item_disposition(self):
        """Gets the order_item_disposition of this FulfillmentOrderItem.  # noqa: E501

        Indicates whether the item is sellable or unsellable.  # noqa: E501

        :return: The order_item_disposition of this FulfillmentOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._order_item_disposition

    @order_item_disposition.setter
    def order_item_disposition(self, order_item_disposition):
        """Sets the order_item_disposition of this FulfillmentOrderItem.

        Indicates whether the item is sellable or unsellable.  # noqa: E501

        :param order_item_disposition: The order_item_disposition of this FulfillmentOrderItem.  # noqa: E501
        :type: str
        """

        self._order_item_disposition = order_item_disposition

    @property
    def cancelled_quantity(self):
        """Gets the cancelled_quantity of this FulfillmentOrderItem.  # noqa: E501

        The item quantity.  # noqa: E501

        :return: The cancelled_quantity of this FulfillmentOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._cancelled_quantity

    @cancelled_quantity.setter
    def cancelled_quantity(self, cancelled_quantity):
        """Sets the cancelled_quantity of this FulfillmentOrderItem.

        The item quantity.  # noqa: E501

        :param cancelled_quantity: The cancelled_quantity of this FulfillmentOrderItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and cancelled_quantity is None:
            raise ValueError("Invalid value for `cancelled_quantity`, must not be `None`")  # noqa: E501

        self._cancelled_quantity = cancelled_quantity

    @property
    def unfulfillable_quantity(self):
        """Gets the unfulfillable_quantity of this FulfillmentOrderItem.  # noqa: E501

        The item quantity.  # noqa: E501

        :return: The unfulfillable_quantity of this FulfillmentOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._unfulfillable_quantity

    @unfulfillable_quantity.setter
    def unfulfillable_quantity(self, unfulfillable_quantity):
        """Sets the unfulfillable_quantity of this FulfillmentOrderItem.

        The item quantity.  # noqa: E501

        :param unfulfillable_quantity: The unfulfillable_quantity of this FulfillmentOrderItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and unfulfillable_quantity is None:
            raise ValueError("Invalid value for `unfulfillable_quantity`, must not be `None`")  # noqa: E501

        self._unfulfillable_quantity = unfulfillable_quantity

    @property
    def estimated_ship_date(self):
        """Gets the estimated_ship_date of this FulfillmentOrderItem.  # noqa: E501

        Date timestamp  # noqa: E501

        :return: The estimated_ship_date of this FulfillmentOrderItem.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_ship_date

    @estimated_ship_date.setter
    def estimated_ship_date(self, estimated_ship_date):
        """Sets the estimated_ship_date of this FulfillmentOrderItem.

        Date timestamp  # noqa: E501

        :param estimated_ship_date: The estimated_ship_date of this FulfillmentOrderItem.  # noqa: E501
        :type: datetime
        """

        self._estimated_ship_date = estimated_ship_date

    @property
    def estimated_arrival_date(self):
        """Gets the estimated_arrival_date of this FulfillmentOrderItem.  # noqa: E501

        Date timestamp  # noqa: E501

        :return: The estimated_arrival_date of this FulfillmentOrderItem.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_arrival_date

    @estimated_arrival_date.setter
    def estimated_arrival_date(self, estimated_arrival_date):
        """Sets the estimated_arrival_date of this FulfillmentOrderItem.

        Date timestamp  # noqa: E501

        :param estimated_arrival_date: The estimated_arrival_date of this FulfillmentOrderItem.  # noqa: E501
        :type: datetime
        """

        self._estimated_arrival_date = estimated_arrival_date

    @property
    def per_unit_price(self):
        """Gets the per_unit_price of this FulfillmentOrderItem.  # noqa: E501


        :return: The per_unit_price of this FulfillmentOrderItem.  # noqa: E501
        :rtype: Money
        """
        return self._per_unit_price

    @per_unit_price.setter
    def per_unit_price(self, per_unit_price):
        """Sets the per_unit_price of this FulfillmentOrderItem.


        :param per_unit_price: The per_unit_price of this FulfillmentOrderItem.  # noqa: E501
        :type: Money
        """

        self._per_unit_price = per_unit_price

    @property
    def per_unit_tax(self):
        """Gets the per_unit_tax of this FulfillmentOrderItem.  # noqa: E501


        :return: The per_unit_tax of this FulfillmentOrderItem.  # noqa: E501
        :rtype: Money
        """
        return self._per_unit_tax

    @per_unit_tax.setter
    def per_unit_tax(self, per_unit_tax):
        """Sets the per_unit_tax of this FulfillmentOrderItem.


        :param per_unit_tax: The per_unit_tax of this FulfillmentOrderItem.  # noqa: E501
        :type: Money
        """

        self._per_unit_tax = per_unit_tax

    @property
    def per_unit_declared_value(self):
        """Gets the per_unit_declared_value of this FulfillmentOrderItem.  # noqa: E501


        :return: The per_unit_declared_value of this FulfillmentOrderItem.  # noqa: E501
        :rtype: Money
        """
        return self._per_unit_declared_value

    @per_unit_declared_value.setter
    def per_unit_declared_value(self, per_unit_declared_value):
        """Sets the per_unit_declared_value of this FulfillmentOrderItem.


        :param per_unit_declared_value: The per_unit_declared_value of this FulfillmentOrderItem.  # noqa: E501
        :type: Money
        """

        self._per_unit_declared_value = per_unit_declared_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FulfillmentOrderItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FulfillmentOrderItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FulfillmentOrderItem):
            return True

        return self.to_dict() != other.to_dict()
