# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'company_name': 'str',
        'country_code': 'str',
        'district_or_county': 'str',
        'email': 'str',
        'name': 'str',
        'phone_number': 'str',
        'postal_code': 'str',
        'state_or_province_code': 'str',
    }

    attribute_map = {
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'city': 'city',
        'company_name': 'companyName',
        'country_code': 'countryCode',
        'district_or_county': 'districtOrCounty',
        'email': 'email',
        'name': 'name',
        'phone_number': 'phoneNumber',
        'postal_code': 'postalCode',
        'state_or_province_code': 'stateOrProvinceCode',
    }

    def __init__(self, address_line1=None, address_line2=None, city=None, company_name=None, country_code=None, district_or_county=None, email=None, name=None, phone_number=None, postal_code=None, state_or_province_code=None, _configuration=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._company_name = None
        self._country_code = None
        self._district_or_county = None
        self._email = None
        self._name = None
        self._phone_number = None
        self._postal_code = None
        self._state_or_province_code = None
        self.discriminator = None

        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        self.city = city
        if company_name is not None:
            self.company_name = company_name
        self.country_code = country_code
        if district_or_county is not None:
            self.district_or_county = district_or_county
        if email is not None:
            self.email = email
        self.name = name
        if phone_number is not None:
            self.phone_number = phone_number
        self.postal_code = postal_code
        if state_or_province_code is not None:
            self.state_or_province_code = state_or_province_code

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.  # noqa: E501

        Street address information.  # noqa: E501

        :return: The address_line1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

        Street address information.  # noqa: E501

        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address_line1 is not None and len(address_line1) > 180):
            raise ValueError("Invalid value for `address_line1`, length must be less than or equal to `180`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address_line1 is not None and len(address_line1) < 1):
            raise ValueError("Invalid value for `address_line1`, length must be greater than or equal to `1`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.  # noqa: E501

        Additional street address information.  # noqa: E501

        :return: The address_line2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        Additional street address information.  # noqa: E501

        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                address_line2 is not None and len(address_line2) > 60):
            raise ValueError("Invalid value for `address_line2`, length must be less than or equal to `60`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address_line2 is not None and len(address_line2) < 1):
            raise ValueError("Invalid value for `address_line2`, length must be greater than or equal to `1`")  # noqa: E501

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        The city.  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        The city.  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                city is not None and len(city) > 30):
            raise ValueError("Invalid value for `city`, length must be less than or equal to `30`")  # noqa: E501
        if (self._configuration.client_side_validation and
                city is not None and len(city) < 1):
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")  # noqa: E501

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this Address.  # noqa: E501

        The name of the business.  # noqa: E501

        :return: The company_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Address.

        The name of the business.  # noqa: E501

        :param company_name: The company_name of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                company_name is not None and len(company_name) > 50):
            raise ValueError("Invalid value for `company_name`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                company_name is not None and len(company_name) < 1):
            raise ValueError("Invalid value for `company_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._company_name = company_name

    @property
    def country_code(self):
        """Gets the country_code of this Address.  # noqa: E501

        The country code in two-character ISO 3166-1 alpha-2 format.  # noqa: E501

        :return: The country_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        The country code in two-character ISO 3166-1 alpha-2 format.  # noqa: E501

        :param country_code: The country_code of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                country_code is not None and len(country_code) > 2):
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")  # noqa: E501
        if (self._configuration.client_side_validation and
                country_code is not None and len(country_code) < 2):
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `2`")  # noqa: E501
        if (self._configuration.client_side_validation and
                country_code is not None and not re.search(r'^[A-Z]{2}$', country_code)):  # noqa: E501
            raise ValueError(r"Invalid value for `country_code`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")  # noqa: E501

        self._country_code = country_code

    @property
    def district_or_county(self):
        """Gets the district_or_county of this Address.  # noqa: E501

        The district or county.  # noqa: E501

        :return: The district_or_county of this Address.  # noqa: E501
        :rtype: str
        """
        return self._district_or_county

    @district_or_county.setter
    def district_or_county(self, district_or_county):
        """Sets the district_or_county of this Address.

        The district or county.  # noqa: E501

        :param district_or_county: The district_or_county of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                district_or_county is not None and len(district_or_county) > 50):
            raise ValueError("Invalid value for `district_or_county`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                district_or_county is not None and len(district_or_county) < 1):
            raise ValueError("Invalid value for `district_or_county`, length must be greater than or equal to `1`")  # noqa: E501

        self._district_or_county = district_or_county

    @property
    def email(self):
        """Gets the email of this Address.  # noqa: E501

        The email address.  # noqa: E501

        :return: The email of this Address.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Address.

        The email address.  # noqa: E501

        :param email: The email of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email is not None and len(email) > 1024):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def name(self):
        """Gets the name of this Address.  # noqa: E501

        The name of the individual who is the primary contact.  # noqa: E501

        :return: The name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.

        The name of the individual who is the primary contact.  # noqa: E501

        :param name: The name of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this Address.  # noqa: E501

        The phone number.  # noqa: E501

        :return: The phone_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Address.

        The phone number.  # noqa: E501

        :param phone_number: The phone_number of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                phone_number is not None and len(phone_number) > 20):
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                phone_number is not None and len(phone_number) < 1):
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501

        The postal code.  # noqa: E501

        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        The postal code.  # noqa: E501

        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                postal_code is not None and len(postal_code) > 32):
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `32`")  # noqa: E501
        if (self._configuration.client_side_validation and
                postal_code is not None and len(postal_code) < 1):
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def state_or_province_code(self):
        """Gets the state_or_province_code of this Address.  # noqa: E501

        The state or province code.  # noqa: E501

        :return: The state_or_province_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._state_or_province_code

    @state_or_province_code.setter
    def state_or_province_code(self, state_or_province_code):
        """Sets the state_or_province_code of this Address.

        The state or province code.  # noqa: E501

        :param state_or_province_code: The state_or_province_code of this Address.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                state_or_province_code is not None and len(state_or_province_code) > 64):
            raise ValueError("Invalid value for `state_or_province_code`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                state_or_province_code is not None and len(state_or_province_code) < 1):
            raise ValueError("Invalid value for `state_or_province_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._state_or_province_code = state_or_province_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Address):
            return True

        return self.to_dict() != other.to_dict()
