# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.address import Address


class Representer(BaseModel):
    """
    Representer
    """  # noqa: E501

    name: Annotated[str, Field(min_length=0, strict=True, max_length=200)] = Field(
        description="Nimi"
    )
    code: Annotated[str, Field(min_length=0, strict=True, max_length=20)] = Field(
        description="Isiku- või registrikood"
    )
    address: Address
    right_of_representation: Optional[
        Annotated[str, Field(strict=True, max_length=200)]
    ] = Field(
        default=None, description="Esindusõiguse alus", alias="rightOfRepresentation"
    )
    email: Optional[Annotated[str, Field(strict=True, max_length=254)]] = Field(
        default=None, description="Email"
    )
    phone: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(
        default=None, description="Telefoninumber"
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "code",
        "address",
        "rightOfRepresentation",
        "email",
        "phone",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Representer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict["address"] = self.address.to_dict()
        # set to None if right_of_representation (nullable) is None
        # and model_fields_set contains the field
        if (
            self.right_of_representation is None
            and "right_of_representation" in self.model_fields_set
        ):
            _dict["rightOfRepresentation"] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict["email"] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict["phone"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Representer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "code": obj.get("code"),
                "address": Address.from_dict(obj["address"])
                if obj.get("address") is not None
                else None,
                "rightOfRepresentation": obj.get("rightOfRepresentation"),
                "email": obj.get("email"),
                "phone": obj.get("phone"),
            }
        )
        return _obj
