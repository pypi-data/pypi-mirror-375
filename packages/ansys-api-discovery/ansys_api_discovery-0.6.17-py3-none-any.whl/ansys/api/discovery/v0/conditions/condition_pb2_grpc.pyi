"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.discovery.v0.conditions.condition_pb2
import ansys.api.discovery.v0.discoverymodels_pb2
import grpc

class ConditionStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    DeleteCondition: grpc.UnaryUnaryMultiCallable[
        ansys.api.discovery.v0.conditions.condition_pb2.DeleteConditionRequest,
        ansys.api.discovery.v0.discoverymodels_pb2.ChangeResponse] = ...
    """General condition methods"""

    ChangeConditionSuppressionState: grpc.UnaryUnaryMultiCallable[
        ansys.api.discovery.v0.conditions.condition_pb2.ChangeConditionSuppressionStateRequest,
        ansys.api.discovery.v0.discoverymodels_pb2.ChangeResponse] = ...

    ChangeConditionName: grpc.UnaryUnaryMultiCallable[
        ansys.api.discovery.v0.conditions.condition_pb2.ChangeConditionNameRequest,
        ansys.api.discovery.v0.discoverymodels_pb2.ChangeResponse] = ...


class ConditionServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def DeleteCondition(self,
        request: ansys.api.discovery.v0.conditions.condition_pb2.DeleteConditionRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.discovery.v0.discoverymodels_pb2.ChangeResponse:
        """General condition methods"""
        pass

    @abc.abstractmethod
    def ChangeConditionSuppressionState(self,
        request: ansys.api.discovery.v0.conditions.condition_pb2.ChangeConditionSuppressionStateRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.discovery.v0.discoverymodels_pb2.ChangeResponse: ...

    @abc.abstractmethod
    def ChangeConditionName(self,
        request: ansys.api.discovery.v0.conditions.condition_pb2.ChangeConditionNameRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.discovery.v0.discoverymodels_pb2.ChangeResponse: ...


def add_ConditionServicer_to_server(servicer: ConditionServicer, server: grpc.Server) -> None: ...
