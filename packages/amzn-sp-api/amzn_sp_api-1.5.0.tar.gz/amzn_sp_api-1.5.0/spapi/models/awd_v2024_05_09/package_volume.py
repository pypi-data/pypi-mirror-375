# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PackageVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit_of_measurement': 'VolumeUnitOfMeasurement',
        'volume': 'float',
    }

    attribute_map = {
        'unit_of_measurement': 'unitOfMeasurement',
        'volume': 'volume',
    }

    def __init__(self, unit_of_measurement=None, volume=None, _configuration=None):  # noqa: E501
        """PackageVolume - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._unit_of_measurement = None
        self._volume = None
        self.discriminator = None

        self.unit_of_measurement = unit_of_measurement
        self.volume = volume

    @property
    def unit_of_measurement(self):
        """Gets the unit_of_measurement of this PackageVolume.  # noqa: E501


        :return: The unit_of_measurement of this PackageVolume.  # noqa: E501
        :rtype: VolumeUnitOfMeasurement
        """
        return self._unit_of_measurement

    @unit_of_measurement.setter
    def unit_of_measurement(self, unit_of_measurement):
        """Sets the unit_of_measurement of this PackageVolume.


        :param unit_of_measurement: The unit_of_measurement of this PackageVolume.  # noqa: E501
        :type: VolumeUnitOfMeasurement
        """
        if self._configuration.client_side_validation and unit_of_measurement is None:
            raise ValueError("Invalid value for `unit_of_measurement`, must not be `None`")  # noqa: E501

        self._unit_of_measurement = unit_of_measurement

    @property
    def volume(self):
        """Gets the volume of this PackageVolume.  # noqa: E501

        The package volume value.  # noqa: E501

        :return: The volume of this PackageVolume.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this PackageVolume.

        The package volume value.  # noqa: E501

        :param volume: The volume of this PackageVolume.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")  # noqa: E501

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageVolume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageVolume):
            return True

        return self.to_dict() != other.to_dict()
