# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class StandardCompanyLogoModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_logo': 'ImageComponent',
    }

    attribute_map = {
        'company_logo': 'companyLogo',
    }

    def __init__(self, company_logo=None, _configuration=None):  # noqa: E501
        """StandardCompanyLogoModule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._company_logo = None
        self.discriminator = None

        self.company_logo = company_logo

    @property
    def company_logo(self):
        """Gets the company_logo of this StandardCompanyLogoModule.  # noqa: E501


        :return: The company_logo of this StandardCompanyLogoModule.  # noqa: E501
        :rtype: ImageComponent
        """
        return self._company_logo

    @company_logo.setter
    def company_logo(self, company_logo):
        """Sets the company_logo of this StandardCompanyLogoModule.


        :param company_logo: The company_logo of this StandardCompanyLogoModule.  # noqa: E501
        :type: ImageComponent
        """
        if self._configuration.client_side_validation and company_logo is None:
            raise ValueError("Invalid value for `company_logo`, must not be `None`")  # noqa: E501

        self._company_logo = company_logo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandardCompanyLogoModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardCompanyLogoModule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StandardCompanyLogoModule):
            return True

        return self.to_dict() != other.to_dict()
