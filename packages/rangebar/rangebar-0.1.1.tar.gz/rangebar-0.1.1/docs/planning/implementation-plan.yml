# Master Implementation Plan
project: rangebar
version: 1.0.0
objective: Non-lookahead range bar construction from Binance UM Futures aggTrades

data_source:
  library: binance_historical_data
  asset_class: um  # USD-M Futures ONLY
  data_type: aggTrades
  url: https://github.com/stas-prokopiev/binance_historical_data

algorithm:
  threshold_type: percentage_from_open
  threshold_value: 0.008  # 0.8%
  computation: |
    upper_breach = bar_open * 1.008
    lower_breach = bar_open * 0.992
  non_lookahead: true
  breach_tick_handling: included_in_closing_bar

phases:
  - id: PHASE_1
    name: Foundation Setup
    success_gate: SG1
    status: in_progress
    tasks:
      - id: T1.1
        name: Create project documentation structure
        status: in_progress
        files:
          - CLAUDE.md
          - docs/planning/implementation-plan.yml
          - docs/planning/success-gates.yml
          - docs/architecture/algorithm-spec.md
      - id: T1.2
        name: Setup Rust/PyO3 build system
        status: pending
        files:
          - Cargo.toml
          - src/lib.rs
          - pyproject.toml (update)

  - id: PHASE_2
    name: Data Pipeline
    success_gate: SG2
    status: pending
    dependencies: [SG1]
    tasks:
      - id: T2.1
        name: Implement UM Futures data fetcher
        status: pending
        implementation: |
          from binance_historical_data import BinanceDataDumper
          dumper = BinanceDataDumper(
              path_dir_where_to_dump="data/um_futures",
              asset_class="um",  # Critical: UM futures only
              data_type="aggTrades"
          )
      - id: T2.2
        name: Parquet converter with schema validation
        status: pending
        schema:
          a: int64  # aggTradeId
          p: string # price (preserve precision)
          q: string # quantity
          f: int64  # firstTradeId
          l: int64  # lastTradeId
          T: int64  # timestamp (ms)
          m: bool   # isBuyerMaker

  - id: PHASE_3
    name: Rust Core Implementation
    success_gate: SG3
    status: pending
    dependencies: [SG2]
    tasks:
      - id: T3.1
        name: Implement range bar algorithm in Rust
        status: pending
        file: src/range_bars.rs
        performance_target: 1B ticks in <30 seconds
      - id: T3.2
        name: PyO3 bindings with zero-copy arrays
        status: pending
        file: src/lib.rs
      - id: T3.3
        name: Fixed-point arithmetic implementation
        status: pending
        precision: 8 decimal places using i64

  - id: PHASE_4
    name: Testing & Validation
    success_gate: SG4
    status: pending
    dependencies: [SG3]
    tasks:
      - id: T4.1
        name: Non-lookahead validation tests
        status: pending
        coverage_target: 100%
      - id: T4.2
        name: Edge case testing
        status: pending
        scenarios:
          - exact_threshold_breach
          - large_gaps
          - high_frequency_oscillation
      - id: T4.3
        name: Performance benchmarking
        status: pending
        targets:
          - 1M ticks: <100ms
          - 100M ticks: <3s
          - 1B ticks: <30s

  - id: PHASE_5
    name: Production Integration
    success_gate: SG5
    status: pending
    dependencies: [SG4]
    tasks:
      - id: T5.1
        name: CLI implementation
        status: pending
        commands:
          - fetch: Download UM futures data
          - convert: Transform to Parquet
          - build: Generate range bars
      - id: T5.2
        name: Multi-symbol parallel processing
        status: pending
      - id: T5.3
        name: Real-time streaming support
        status: pending

progress_tracking:
  last_updated: 2025-09-09T13:30:00Z
  current_phase: PHASE_1
  completed_gates: []
  active_tasks: [T1.1]

risk_mitigation:
  - risk: "Rust learning curve"
    mitigation: "Start with simple implementation, iterate"
  - risk: "Performance not meeting targets"
    mitigation: "Profile and optimize hot paths, use SIMD if needed"
  - risk: "Data quality issues"
    mitigation: "Comprehensive validation and checksum verification"