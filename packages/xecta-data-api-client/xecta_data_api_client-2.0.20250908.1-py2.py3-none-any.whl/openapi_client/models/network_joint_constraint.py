# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class NetworkJointConstraint(BaseModel):
    """
    NetworkJointConstraint
    """ # noqa: E501
    xid: StrictStr = Field(description="Xecta unique identifier")
    source_network_id: StrictStr = Field(description="Source ID of the Network Header", alias="sourceNetworkId")
    source_id: StrictStr = Field(description="Source ID of downstream node", alias="sourceId")
    var_date: datetime = Field(description="Date at which the constraint becomes applicable. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="date")
    max_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum pressure constraint, psig", alias="maxPressure")
    min_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum pressure constraint, psig", alias="minPressure")
    max_molar_fraction_co2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum molar fraction CO2 constraint", alias="maxMolarFractionCO2")
    max_molar_fraction_n2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum molar fraction N2 constraint", alias="maxMolarFractionN2")
    max_molar_fraction_h2_s: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum molar fraction H2S constraint", alias="maxMolarFractionH2S")
    max_oil_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum oil rate constraint, STB/d", alias="maxOilRate")
    max_gas_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum gas rate constraint, Mscf/d", alias="maxGasRate")
    max_water_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum water rate constraint, STB/d", alias="maxWaterRate")
    max_liquid_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum liquid rate constraint, STB/d", alias="maxLiquidRate")
    __properties: ClassVar[List[str]] = ["xid", "sourceNetworkId", "sourceId", "date", "maxPressure", "minPressure", "maxMolarFractionCO2", "maxMolarFractionN2", "maxMolarFractionH2S", "maxOilRate", "maxGasRate", "maxWaterRate", "maxLiquidRate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkJointConstraint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if max_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.max_pressure is None and "max_pressure" in self.model_fields_set:
            _dict['maxPressure'] = None

        # set to None if min_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.min_pressure is None and "min_pressure" in self.model_fields_set:
            _dict['minPressure'] = None

        # set to None if max_molar_fraction_co2 (nullable) is None
        # and model_fields_set contains the field
        if self.max_molar_fraction_co2 is None and "max_molar_fraction_co2" in self.model_fields_set:
            _dict['maxMolarFractionCO2'] = None

        # set to None if max_molar_fraction_n2 (nullable) is None
        # and model_fields_set contains the field
        if self.max_molar_fraction_n2 is None and "max_molar_fraction_n2" in self.model_fields_set:
            _dict['maxMolarFractionN2'] = None

        # set to None if max_molar_fraction_h2_s (nullable) is None
        # and model_fields_set contains the field
        if self.max_molar_fraction_h2_s is None and "max_molar_fraction_h2_s" in self.model_fields_set:
            _dict['maxMolarFractionH2S'] = None

        # set to None if max_oil_rate (nullable) is None
        # and model_fields_set contains the field
        if self.max_oil_rate is None and "max_oil_rate" in self.model_fields_set:
            _dict['maxOilRate'] = None

        # set to None if max_gas_rate (nullable) is None
        # and model_fields_set contains the field
        if self.max_gas_rate is None and "max_gas_rate" in self.model_fields_set:
            _dict['maxGasRate'] = None

        # set to None if max_water_rate (nullable) is None
        # and model_fields_set contains the field
        if self.max_water_rate is None and "max_water_rate" in self.model_fields_set:
            _dict['maxWaterRate'] = None

        # set to None if max_liquid_rate (nullable) is None
        # and model_fields_set contains the field
        if self.max_liquid_rate is None and "max_liquid_rate" in self.model_fields_set:
            _dict['maxLiquidRate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkJointConstraint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "xid": obj.get("xid"),
            "sourceNetworkId": obj.get("sourceNetworkId"),
            "sourceId": obj.get("sourceId"),
            "date": obj.get("date"),
            "maxPressure": obj.get("maxPressure"),
            "minPressure": obj.get("minPressure"),
            "maxMolarFractionCO2": obj.get("maxMolarFractionCO2"),
            "maxMolarFractionN2": obj.get("maxMolarFractionN2"),
            "maxMolarFractionH2S": obj.get("maxMolarFractionH2S"),
            "maxOilRate": obj.get("maxOilRate"),
            "maxGasRate": obj.get("maxGasRate"),
            "maxWaterRate": obj.get("maxWaterRate"),
            "maxLiquidRate": obj.get("maxLiquidRate")
        })
        return _obj


