# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

---
version: '3'

silent: true
set: [pipefail]
shopt: [globstar]

verbose: false

includes:
  rust:
    taskfile: ../../tasks/rust.yaml
    internal: true
  tools:
    taskfile: ../../tasks/tools.yaml
    internal: true
    flatten: true

tasks:
  default:
    cmds:
      - task -l

  python-bindings:build:
    desc: "Build the Python bindings"
    vars:
      PROFILE: '{{.PROFILE | default "debug"}}'
      RELEASE:
        sh: '[[ {{.PROFILE}} == "release" ]] && echo "--release" || echo ""'
      TARGET: '{{.TARGET | default ""}}'
    cmds:
      - task: rust:toolchain:run-command
        vars:
          COMMAND: |
            uv run maturin develop --uv {{.RELEASE}}

  python-bindings:examples:build:
    desc: "Build the Python bindings examples"
    deps:
      - python-bindings:build
    cmds:
      - task: rust:toolchain:run-command
        vars:
          COMMAND: |
            uv sync --frozen --no-dev --no-editable --package slim-bindings-examples

  python-bindings:lint:
    desc: "Lint the Python bindings"
    cmds:
      - uv run ruff check
      - uv run ruff format --check
      - uv run mypy slim_bindings

  python-bindings:test:
    desc: "Test the Python bindings"
    deps:
      - python-bindings:build
    cmds:
      - uv run pytest -s {{.TESTS}}
    vars:
      TARGET: '{{.TESTS | default ""}}'

  python-bindings:packaging:
    desc: "Generate the Python bindings for python versions 3.10, 3.11, 3.12 and 3.13"
    vars:
      PROFILE: '{{.PROFILE | default "debug"}}'
      RELEASE:
        sh: '[[ {{.PROFILE}} == "release" ]] && echo "--release" || echo ""'
      TARGET: '{{.TARGET | default ""}}'
    cmds:
      - for:
          matrix:
            PYTHON: ["3.10", "3.11", "3.12", "3.13"]
        cmd: |
          uv python install {{.ITEM.PYTHON}}
          uv python pin {{.ITEM.PYTHON}}
      - task: rust:toolchain:run-command
        vars:
          COMMAND: |
            rustup target add {{.TARGET}}

            UV_ARGS=(
              --no-default-groups
              --group building
            )

            uv sync ${UV_ARGS[@]}

            uv run ${UV_ARGS[@]} maturin develop --uv {{.RELEASE}}

            # This file if a leftover from the previous build, delete it otherwise
            # maturin will try to add it to the wheel, and it will fail
            rm -f slim_bindings/*.pyd

            PYTHONS=(3.10 3.11 3.12 3.13)
            uv run                            \
              ${UV_ARGS[@]}                   \
              maturin build {{.RELEASE}}      \
              --out dist                      \
              --target {{.TARGET}}            \
              --frozen                        \
              -i                              \
              ${PYTHONS[@]}

  python-bindings:example:server:
    desc: "Run the server example"
    env:
      SLIM_INSTANCE_ID: server
    cmds:
      - uv run --package slim-bindings-examples slim --slim "127.0.0.1:46357" {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  python-bindings:example:ff:alice:
    desc: "Fire and forget example - Alice will listen for messages and echo them"
    cmds:
      - |
        uv run --package slim-bindings-examples ff                                    \
          --local agntcy/ns/alice                                                     \
          --slim '{"endpoint": "http://localhost:46357", "tls": {"insecure": true}}'  \
          --shared-secret "secret" {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  python-bindings:example:ff:bob:
    desc: "Fire and forget example - Bob will send encrypted messages to Alice"
    env:
      SLIM_INSTANCE_ID: bob
    cmds:
      - |
        uv run --package slim-bindings-examples ff                                    \
          --local agntcy/ns/bob                                                       \
          --slim '{"endpoint": "http://localhost:46357", "tls": {"insecure": true}}'  \
          --shared-secret "secret"                                                    \
          --remote agntcy/ns/alice                                                    \
          --message "hey there"                                                       \
          --enable-mls {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  python-bindings:example:rr:responder  :
    desc: "Responder example - Responds to requests from the requester"
    cmds:
      - |
        uv run --package slim-bindings-examples rr                                    \
          --local agntcy/ns/responder                                                 \
          --slim '{"endpoint": "http://localhost:46357", "tls": {"insecure": true}}'  \
          --shared-secret "secret"
          {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  python-bindings:example:rr:requester:
    desc: "Requester example - Sends requests to the responder and waits for responses"
    cmds:
      - |
        uv run --package slim-bindings-examples rr                                    \
          --local agntcy/ns/requester                                                 \
          --slim '{"endpoint": "http://localhost:46357", "tls": {"insecure": true}}'  \
          --shared-secret "secret"                                                    \
          --remote agntcy/ns/responder                                                \
          --message "hey there"                                                       \
          --enable-mls {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  python-bindings:example:pubsub:moderator:
    desc: "PubSub moderator example - Creates a channel, invites participants, and sends messages"
    cmds:
      - |
        uv run --package slim-bindings-examples pubsub                                \
          --local agntcy/ns/moderator                                                 \
          --slim '{"endpoint": "http://localhost:46357", "tls": {"insecure": true}}'  \
          --shared-secret "secret"                                                    \
          --remote agntcy/ns/chat                                                     \
          --invites agntcy/ns/client-1                                                \
          --invites agntcy/ns/client-2                                                \
          --enable-mls {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  python-bindings:example:pubsub:client-1:
    desc: "PubSub client example - Waits to be invited to a channel and receives messages"
    cmds:
      - |
        uv run --package slim-bindings-examples pubsub                                \
          --local agntcy/ns/client-1                                                  \
          --slim '{"endpoint": "http://localhost:46357", "tls": {"insecure": true}}'  \
          --shared-secret "secret" {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  python-bindings:example:pubsub:client-2:
    desc: "PubSub client example - Waits to be invited to a channel and receives messages"
    cmds:
      - |
        uv run --package slim-bindings-examples pubsub                                \
          --local agntcy/ns/client-2                                                  \
          --slim '{"endpoint": "http://localhost:46357", "tls": {"insecure": true}}'  \
          --shared-secret "secret" {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  python-bindings:generate-stub:
    desc: "Generate stub file for the Python bindings"
    cmds:
      - cargo run --bin stub_gen

  python-bindings:generate-proto:
    desc: "Generate proto files for the Python bindings"
    deps:
      - task: rust:toolchain:run-command
        vars:
          COMMAND: |
            cargo build --package agntcy-protoc-srpc-plugin --bin protoc-srpc-plugin
      - task: tools:buf
    cmds:
      - |
        # Find all the buf.gen.yaml files in the current directory and its subdirectories
        find . -name 'buf.gen.yaml' | while read -r file; do
          # Generate the proto files using buf
          echo "Generating proto files for $file"
          # get folder name
          folder=$(dirname "$file")
          pushd > /dev/null ${folder} && {{.TOOLS_INSTALL_DIR}}/buf generate && popd > /dev/null
        done
