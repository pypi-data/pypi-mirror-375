[project]
name = "nacos-serving-python"
version = "0.1.3"
description = "Nacos 2.x async serving & config SDK with auto registration and discovery extensions"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "nacos-sdk-python>=2.0.5",
    "aiohttp>=3.10.11",
    "pyyaml>=5.1",
    "watchdog>=2.0.0",
    "psutil>=5.8.0",
    "httpx>=0.28.0"
    # 去掉 setuptools：不应作为运行时依赖
]

# 可选：提供 extras 方式安装开发依赖（uv --with dev）
[project.optional-dependencies]
dev = ["pyright>=1.1.389"]

[tool.hatch.build.targets.wheel]
# 仅打包实际包路径而不是整个 src 根
packages = ["src/nacos"]

[tool.hatch.build.targets.sdist]
# 限定源码发布内容（可按需增减）
include = [
  "src/nacos",
  "README.md",
  "LICENSE",
  "pyproject.toml"
]
exclude = [
  "demo",
  "scripts",
  "tests*"
]

[project.scripts]
nacos-serving-python = "nacos.auto.registration:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# 修正节名：uv 读取 [tool.uv] 的 dev-dependencies
[tool.uv]
dev-dependencies = ["pyright>=1.1.389"]

# 新增：pyright 配置，修复 import 与降级非关键告警
[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "basic"
venvPath = "."
# 仅分析核心源码与测试
include = ["src", "test"]
# 排除 demo（其中包含大量可选依赖的示例）
exclude = ["demo", "scripts", "**/__pycache__"]
# 让 pyright 识别 src 为包根
extraPaths = ["src"]
# 将缺失三方依赖的导入降级为 warning/none，避免阻塞 CI
reportMissingImports = "none"
reportMissingModuleSource = "warning"
# 降级常见的可选类型与签名不匹配告警，避免 demo/扩展里的噪声
reportOptionalMemberAccess = "warning"
reportOptionalSubscript = "warning"
reportOptionalCall = "warning"
reportArgumentType = "warning"
reportIncompatibleMethodOverride = "warning"
reportAttributeAccessIssue = "warning"
reportCallIssue = "warning"
reportUndefinedVariable = "error"

