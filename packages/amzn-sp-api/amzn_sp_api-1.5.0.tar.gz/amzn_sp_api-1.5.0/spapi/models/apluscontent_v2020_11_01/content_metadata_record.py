# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ContentMetadataRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_reference_key': 'str',
        'content_metadata': 'ContentMetadata',
    }

    attribute_map = {
        'content_reference_key': 'contentReferenceKey',
        'content_metadata': 'contentMetadata',
    }

    def __init__(self, content_reference_key=None, content_metadata=None, _configuration=None):  # noqa: E501
        """ContentMetadataRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._content_reference_key = None
        self._content_metadata = None
        self.discriminator = None

        self.content_reference_key = content_reference_key
        self.content_metadata = content_metadata

    @property
    def content_reference_key(self):
        """Gets the content_reference_key of this ContentMetadataRecord.  # noqa: E501

        A unique reference key for the A+ Content document. A content reference key cannot form a permalink and might change in the future. A content reference key is not guaranteed to match any A+ content identifier.  # noqa: E501

        :return: The content_reference_key of this ContentMetadataRecord.  # noqa: E501
        :rtype: str
        """
        return self._content_reference_key

    @content_reference_key.setter
    def content_reference_key(self, content_reference_key):
        """Sets the content_reference_key of this ContentMetadataRecord.

        A unique reference key for the A+ Content document. A content reference key cannot form a permalink and might change in the future. A content reference key is not guaranteed to match any A+ content identifier.  # noqa: E501

        :param content_reference_key: The content_reference_key of this ContentMetadataRecord.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and content_reference_key is None:
            raise ValueError("Invalid value for `content_reference_key`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                content_reference_key is not None and len(content_reference_key) < 1):
            raise ValueError("Invalid value for `content_reference_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._content_reference_key = content_reference_key

    @property
    def content_metadata(self):
        """Gets the content_metadata of this ContentMetadataRecord.  # noqa: E501


        :return: The content_metadata of this ContentMetadataRecord.  # noqa: E501
        :rtype: ContentMetadata
        """
        return self._content_metadata

    @content_metadata.setter
    def content_metadata(self, content_metadata):
        """Sets the content_metadata of this ContentMetadataRecord.


        :param content_metadata: The content_metadata of this ContentMetadataRecord.  # noqa: E501
        :type: ContentMetadata
        """
        if self._configuration.client_side_validation and content_metadata is None:
            raise ValueError("Invalid value for `content_metadata`, must not be `None`")  # noqa: E501

        self._content_metadata = content_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentMetadataRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentMetadataRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentMetadataRecord):
            return True

        return self.to_dict() != other.to_dict()
