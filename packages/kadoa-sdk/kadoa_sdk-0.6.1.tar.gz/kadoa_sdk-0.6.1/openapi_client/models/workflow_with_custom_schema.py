# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.workflow_with_custom_schema_fields_inner import WorkflowWithCustomSchemaFieldsInner
from openapi_client.models.workflow_with_custom_schema_interactions_inner import WorkflowWithCustomSchemaInteractionsInner
from openapi_client.models.workflow_with_custom_schema_location import WorkflowWithCustomSchemaLocation
from typing import Optional, Set
from typing_extensions import Self

class WorkflowWithCustomSchema(BaseModel):
    """
    Create a workflow by defining entity and fields directly
    """ # noqa: E501
    entity: Optional[StrictStr] = Field(default=None, description="Entity name for extraction (required unless using agentic-navigation mode)")
    fields: Optional[List[WorkflowWithCustomSchemaFieldsInner]] = Field(default=None, description="Schema fields for extraction (required unless using agentic-navigation mode)")
    urls: List[StrictStr] = Field(description="List of URLs to scrape")
    navigation_mode: StrictStr = Field(description="Navigation mode for scraping. When using agentic-navigation, userPrompt is required and entity/fields become optional", alias="navigationMode")
    user_prompt: Optional[Annotated[str, Field(min_length=10, strict=True, max_length=5000)]] = Field(default=None, description="Required when navigationMode is agentic-navigation. Natural language instructions for the agent (between 10 and 5000 characters)", alias="userPrompt")
    limit: Optional[StrictInt] = Field(default=None, description="Maximum number of items to scrape")
    location: Optional[WorkflowWithCustomSchemaLocation] = None
    name: Optional[StrictStr] = Field(default=None, description="Name of the workflow")
    description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Optional description of the workflow (maximum 500 characters)")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags for categorization")
    monitoring: Optional[Dict[str, Any]] = Field(default=None, description="Monitoring configuration")
    interval: Optional[StrictStr] = Field(default=None, description="Update frequency")
    schedules: Optional[List[StrictStr]] = Field(default=None, description="Cron schedules for updates")
    bypass_preview: Optional[StrictBool] = Field(default=False, description="When true, bypasses preview and installs the scraper immediately with the given limit", alias="bypassPreview")
    interactions: Optional[List[WorkflowWithCustomSchemaInteractionsInner]] = Field(default=None, description="Optional browser interactions to perform during scraping")
    __properties: ClassVar[List[str]] = ["entity", "fields", "urls", "navigationMode", "userPrompt", "limit", "location", "name", "description", "tags", "monitoring", "interval", "schedules", "bypassPreview", "interactions"]

    @field_validator('navigation_mode')
    def navigation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['single-page', 'paginated-page', 'page-and-detail', 'agentic-navigation']):
            raise ValueError("must be one of enum values ('single-page', 'paginated-page', 'page-and-detail', 'agentic-navigation')")
        return value

    @field_validator('interval')
    def interval_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ONLY_ONCE', 'EVERY_10_MINUTES', 'HALF_HOURLY', 'HOURLY', 'THREE_HOURLY', 'SIX_HOURLY', 'TWELVE_HOURLY', 'EIGHTEEN_HOURLY', 'DAILY', 'TWO_DAY', 'THREE_DAY', 'WEEKLY', 'BIWEEKLY', 'TRIWEEKLY', 'FOUR_WEEKLY', 'MONTHLY', 'REAL_TIME', 'CUSTOM']):
            raise ValueError("must be one of enum values ('ONLY_ONCE', 'EVERY_10_MINUTES', 'HALF_HOURLY', 'HOURLY', 'THREE_HOURLY', 'SIX_HOURLY', 'TWELVE_HOURLY', 'EIGHTEEN_HOURLY', 'DAILY', 'TWO_DAY', 'THREE_DAY', 'WEEKLY', 'BIWEEKLY', 'TRIWEEKLY', 'FOUR_WEEKLY', 'MONTHLY', 'REAL_TIME', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowWithCustomSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interactions (list)
        _items = []
        if self.interactions:
            for _item_interactions in self.interactions:
                if _item_interactions:
                    _items.append(_item_interactions.to_dict())
            _dict['interactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowWithCustomSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entity": obj.get("entity"),
            "fields": [WorkflowWithCustomSchemaFieldsInner.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "urls": obj.get("urls"),
            "navigationMode": obj.get("navigationMode"),
            "userPrompt": obj.get("userPrompt"),
            "limit": obj.get("limit"),
            "location": WorkflowWithCustomSchemaLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "tags": obj.get("tags"),
            "monitoring": obj.get("monitoring"),
            "interval": obj.get("interval"),
            "schedules": obj.get("schedules"),
            "bypassPreview": obj.get("bypassPreview") if obj.get("bypassPreview") is not None else False,
            "interactions": [WorkflowWithCustomSchemaInteractionsInner.from_dict(_item) for _item in obj["interactions"]] if obj.get("interactions") is not None else None
        })
        return _obj


