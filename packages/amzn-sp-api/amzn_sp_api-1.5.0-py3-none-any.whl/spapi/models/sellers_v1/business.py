# coding: utf-8

"""
    The Selling Partner API for Sellers

    The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Business(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'registered_business_address': 'Address',
        'company_registration_number': 'str',
        'company_tax_identification_number': 'str',
        'non_latin_name': 'str',
    }

    attribute_map = {
        'name': 'name',
        'registered_business_address': 'registeredBusinessAddress',
        'company_registration_number': 'companyRegistrationNumber',
        'company_tax_identification_number': 'companyTaxIdentificationNumber',
        'non_latin_name': 'nonLatinName',
    }

    def __init__(self, name=None, registered_business_address=None, company_registration_number=None, company_tax_identification_number=None, non_latin_name=None, _configuration=None):  # noqa: E501
        """Business - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._registered_business_address = None
        self._company_registration_number = None
        self._company_tax_identification_number = None
        self._non_latin_name = None
        self.discriminator = None

        self.name = name
        self.registered_business_address = registered_business_address
        if company_registration_number is not None:
            self.company_registration_number = company_registration_number
        if company_tax_identification_number is not None:
            self.company_tax_identification_number = company_tax_identification_number
        if non_latin_name is not None:
            self.non_latin_name = non_latin_name

    @property
    def name(self):
        """Gets the name of this Business.  # noqa: E501

        The registered business name.  # noqa: E501

        :return: The name of this Business.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Business.

        The registered business name.  # noqa: E501

        :param name: The name of this Business.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def registered_business_address(self):
        """Gets the registered_business_address of this Business.  # noqa: E501


        :return: The registered_business_address of this Business.  # noqa: E501
        :rtype: Address
        """
        return self._registered_business_address

    @registered_business_address.setter
    def registered_business_address(self, registered_business_address):
        """Sets the registered_business_address of this Business.


        :param registered_business_address: The registered_business_address of this Business.  # noqa: E501
        :type: Address
        """
        if self._configuration.client_side_validation and registered_business_address is None:
            raise ValueError("Invalid value for `registered_business_address`, must not be `None`")  # noqa: E501

        self._registered_business_address = registered_business_address

    @property
    def company_registration_number(self):
        """Gets the company_registration_number of this Business.  # noqa: E501

        The seller's company registration number, if applicable. This field will be absent for individual sellers and sole proprietorships.  # noqa: E501

        :return: The company_registration_number of this Business.  # noqa: E501
        :rtype: str
        """
        return self._company_registration_number

    @company_registration_number.setter
    def company_registration_number(self, company_registration_number):
        """Sets the company_registration_number of this Business.

        The seller's company registration number, if applicable. This field will be absent for individual sellers and sole proprietorships.  # noqa: E501

        :param company_registration_number: The company_registration_number of this Business.  # noqa: E501
        :type: str
        """

        self._company_registration_number = company_registration_number

    @property
    def company_tax_identification_number(self):
        """Gets the company_tax_identification_number of this Business.  # noqa: E501

        The seller's company tax identification number, if applicable. This field will be present for certain business types only, such as sole proprietorships.  # noqa: E501

        :return: The company_tax_identification_number of this Business.  # noqa: E501
        :rtype: str
        """
        return self._company_tax_identification_number

    @company_tax_identification_number.setter
    def company_tax_identification_number(self, company_tax_identification_number):
        """Sets the company_tax_identification_number of this Business.

        The seller's company tax identification number, if applicable. This field will be present for certain business types only, such as sole proprietorships.  # noqa: E501

        :param company_tax_identification_number: The company_tax_identification_number of this Business.  # noqa: E501
        :type: str
        """

        self._company_tax_identification_number = company_tax_identification_number

    @property
    def non_latin_name(self):
        """Gets the non_latin_name of this Business.  # noqa: E501

        The non-Latin script version of the registered business name, if applicable.  # noqa: E501

        :return: The non_latin_name of this Business.  # noqa: E501
        :rtype: str
        """
        return self._non_latin_name

    @non_latin_name.setter
    def non_latin_name(self, non_latin_name):
        """Sets the non_latin_name of this Business.

        The non-Latin script version of the registered business name, if applicable.  # noqa: E501

        :param non_latin_name: The non_latin_name of this Business.  # noqa: E501
        :type: str
        """

        self._non_latin_name = non_latin_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Business, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Business):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Business):
            return True

        return self.to_dict() != other.to_dict()
