# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class StandardComparisonProductBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position': 'int',
        'image': 'ImageComponent',
        'title': 'str',
        'asin': 'str',
        'highlight': 'bool',
        'metrics': 'List[PlainTextItem]',
    }

    attribute_map = {
        'position': 'position',
        'image': 'image',
        'title': 'title',
        'asin': 'asin',
        'highlight': 'highlight',
        'metrics': 'metrics',
    }

    def __init__(self, position=None, image=None, title=None, asin=None, highlight=None, metrics=None, _configuration=None):  # noqa: E501
        """StandardComparisonProductBlock - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._position = None
        self._image = None
        self._title = None
        self._asin = None
        self._highlight = None
        self._metrics = None
        self.discriminator = None

        self.position = position
        if image is not None:
            self.image = image
        if title is not None:
            self.title = title
        if asin is not None:
            self.asin = asin
        if highlight is not None:
            self.highlight = highlight
        if metrics is not None:
            self.metrics = metrics

    @property
    def position(self):
        """Gets the position of this StandardComparisonProductBlock.  # noqa: E501

        The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.  # noqa: E501

        :return: The position of this StandardComparisonProductBlock.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StandardComparisonProductBlock.

        The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.  # noqa: E501

        :param position: The position of this StandardComparisonProductBlock.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                position is not None and position > 6):  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `6`")  # noqa: E501
        if (self._configuration.client_side_validation and
                position is not None and position < 1):  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1`")  # noqa: E501

        self._position = position

    @property
    def image(self):
        """Gets the image of this StandardComparisonProductBlock.  # noqa: E501


        :return: The image of this StandardComparisonProductBlock.  # noqa: E501
        :rtype: ImageComponent
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this StandardComparisonProductBlock.


        :param image: The image of this StandardComparisonProductBlock.  # noqa: E501
        :type: ImageComponent
        """

        self._image = image

    @property
    def title(self):
        """Gets the title of this StandardComparisonProductBlock.  # noqa: E501

        The comparison product title.  # noqa: E501

        :return: The title of this StandardComparisonProductBlock.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StandardComparisonProductBlock.

        The comparison product title.  # noqa: E501

        :param title: The title of this StandardComparisonProductBlock.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                title is not None and len(title) > 80):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `80`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def asin(self):
        """Gets the asin of this StandardComparisonProductBlock.  # noqa: E501

        The Amazon Standard Identification Number (ASIN).  # noqa: E501

        :return: The asin of this StandardComparisonProductBlock.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this StandardComparisonProductBlock.

        The Amazon Standard Identification Number (ASIN).  # noqa: E501

        :param asin: The asin of this StandardComparisonProductBlock.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                asin is not None and len(asin) < 10):
            raise ValueError("Invalid value for `asin`, length must be greater than or equal to `10`")  # noqa: E501

        self._asin = asin

    @property
    def highlight(self):
        """Gets the highlight of this StandardComparisonProductBlock.  # noqa: E501

        When true, indicates that this content block is visually highlighted.  # noqa: E501

        :return: The highlight of this StandardComparisonProductBlock.  # noqa: E501
        :rtype: bool
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this StandardComparisonProductBlock.

        When true, indicates that this content block is visually highlighted.  # noqa: E501

        :param highlight: The highlight of this StandardComparisonProductBlock.  # noqa: E501
        :type: bool
        """

        self._highlight = highlight

    @property
    def metrics(self):
        """Gets the metrics of this StandardComparisonProductBlock.  # noqa: E501

        Comparison metrics for the product.  # noqa: E501

        :return: The metrics of this StandardComparisonProductBlock.  # noqa: E501
        :rtype: List[PlainTextItem]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this StandardComparisonProductBlock.

        Comparison metrics for the product.  # noqa: E501

        :param metrics: The metrics of this StandardComparisonProductBlock.  # noqa: E501
        :type: List[PlainTextItem]
        """
        if (self._configuration.client_side_validation and
                metrics is not None and len(metrics) > 10):
            raise ValueError("Invalid value for `metrics`, number of items must be less than or equal to `10`")  # noqa: E501
        if (self._configuration.client_side_validation and
                metrics is not None and len(metrics) < 0):
            raise ValueError("Invalid value for `metrics`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandardComparisonProductBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardComparisonProductBlock):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StandardComparisonProductBlock):
            return True

        return self.to_dict() != other.to_dict()
