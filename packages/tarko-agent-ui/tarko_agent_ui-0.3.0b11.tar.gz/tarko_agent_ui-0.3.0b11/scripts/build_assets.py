#!/usr/bin/env python3

"""Build script to download and package static assets.

This script downloads the specified version of @tarko/agent-ui-builder
and packages it with the Python distribution.
"""

import json
import shutil
import sys
import tarfile
import tempfile
from pathlib import Path
from typing import Optional
from urllib.request import urlopen


def get_project_paths() -> tuple[Path, Path]:
    """Returns project root and package directory paths."""
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    package_dir = project_root / "tarko_agent_ui"
    return project_root, package_dir


def download_npm_package(
    version: Optional[str] = None, target_dir: Optional[Path] = None
) -> str:
    """Downloads and extracts npm package to target directory.

    Args:
        version: Specific version to download. If None, downloads latest.
        target_dir: Target directory to extract to. If None, uses package static dir.

    Returns:
        Downloaded version string.
    """
    package_name = "@tarko/agent-ui-builder"

    if target_dir is None:
        # Default to package static directory
        _, package_dir = get_project_paths()
        target_dir = package_dir / "static"

    print(f"🔍 Fetching package info for {package_name}...")

    # Get package info from npm registry
    registry_url = f"https://registry.npmjs.org/{package_name.replace('@', '%40')}"

    with urlopen(registry_url) as response:
        package_info = json.loads(response.read().decode())

    # Determine target version
    if version is None:
        target_version: str = package_info["dist-tags"]["latest"]
        print(f"📦 Using latest version: {target_version}")
    else:
        target_version = version
        if target_version not in package_info["versions"]:
            available_versions = list(package_info["versions"].keys())
            raise ValueError(
                f"Version {target_version} not found. Available versions: {available_versions[-10:]}"
            )
        print(f"📦 Using specified version: {target_version}")

    tarball_url = package_info["versions"][target_version]["dist"]["tarball"]

    print(f"⬇️  Downloading {package_name}@{target_version}...")

    # Clean and create target directory
    if target_dir.exists():
        shutil.rmtree(target_dir)
    target_dir.mkdir(parents=True, exist_ok=True)

    # Download and extract tarball
    with tempfile.NamedTemporaryFile(suffix=".tgz") as tmp_file:
        with urlopen(tarball_url) as response:
            shutil.copyfileobj(response, tmp_file)
        tmp_file.flush()

        # Extract static files
        with tarfile.open(tmp_file.name, "r:gz") as tar:
            extracted_count = 0
            for member in tar.getmembers():
                if member.name.startswith("package/static/"):
                    # Remove 'package/static/' prefix
                    relative_path = member.name[15:]  # len("package/static/") = 15
                    if relative_path:  # Skip empty paths
                        member.name = relative_path
                        tar.extract(member, target_dir)
                        extracted_count += 1

    print(f"✅ Extracted {extracted_count} files to {target_dir}")
    return target_version


def create_version_file(version: str, target_dir: Optional[Path] = None) -> None:
    """Creates version tracking file for packaged assets.

    Args:
        version: The version that was packaged.
        target_dir: Target directory. If None, uses package root.
    """
    if target_dir is None:
        _, target_dir = get_project_paths()

    version_file = target_dir / "_static_version.py"

    content = f'''"""Static assets version information.

This file is auto-generated by scripts/build_assets.py
"""

STATIC_ASSETS_VERSION = "{version}"
STATIC_ASSETS_PACKAGE = "@tarko/agent-ui-builder"
'''

    version_file.write_text(content)
    print(f"📝 Created version file: {version_file}")


def main() -> None:
    """Downloads and packages static assets with CLI interface."""
    import argparse

    parser = argparse.ArgumentParser(
        description="Download and package static assets from @tarko/agent-ui-builder"
    )
    parser.add_argument(
        "--version", type=str, help="Specific version to download (default: latest)"
    )
    parser.add_argument(
        "--output", type=Path, help="Output directory (default: tarko_agent_ui/static)"
    )

    args = parser.parse_args()

    try:
        # Download the package
        downloaded_version = download_npm_package(
            version=args.version, target_dir=args.output
        )

        # Create version tracking file
        create_version_file(downloaded_version)

        print(f"\n🎉 Successfully packaged {downloaded_version}!")
        print("📦 Static assets are now ready for distribution.")

    except Exception as e:
        print(f"❌ Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
