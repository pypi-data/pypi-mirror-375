[project]
name = "mergeron"
description = "Python for analyzing merger enforcement policy"
authors = [{ name = "Murthy Kambhampaty", email = "smk@capeconomics.com" }]
readme = "README.rst"
license = "MIT"
license-files = ["./docs/source/license.rst"]
keywords = [
    "merger enforcement policy",
    "merger guidelines",
    "merger screening",
    "enforcement presumptions",
    "concentration standards",
    "diversion ratio",
    "upward pricing pressure",
    "GUPPI",
]
version = "2025.739439.25"
requires-python = ">=3.13,<4.0" # need math.fma

# Classifiers list: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "aenum>=3.1.16",
    "attrs>=25.3.0",
    "beautifulsoup4>=4.13.4",
    "certifi>=2025.6.15",
    "h5py>=3.14.0",
    "jinja2>=3.1.6",
    "joblib>=1.5.1",
    "lxml>=6.0.0",
    "matplotlib>=3.10.3",
    "mpmath>=1.3.0",
    "python-calamine>=0.4.0",
    "ruamel-yaml>=0.18.14",
    "scipy>=1.16.0",
    "sympy>=1.14.0",
    "types-beautifulsoup4>=4.12.0.20250516",
    "urllib3>=2.5.0",
]

[project.urls]
Homepage = "https://software.capeconomics.com/mergeron/"
Repository = "https://github.com/capeconomics/mergeron.git"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.doc.dependencies]
sphinx = ">=8.2.3"
sphinx-autoapi = ">=3.6.0"
sphinx-autodoc-typehints = ">=3.2.0"
sphinx-immaterial = ">=0.13.5"
linuxdoc = ">=20240924"
ipython = ">=9.4.0"
ipython-pygments-lexers = ">=1.1.1"

[tool.poetry.group.lint.dependencies]
ruff = ">=0.12.2"
mypy = ">=1.16.1"

[tool.poetry.group.test.dependencies]
coverage = ">=7.9.2"
pytest = ">=8.4.1"
pytest-cov = ">=6.2.1"
pytest-xdist = ">=3.8.0"
pytest-sugar = "^1.1.1"
tox = "^4.30.2"

[tool.poetry.group.other.dependencies]
semver = ">=3.0.4"
twine = ">=6.1.0"
pendulum = ">=3.1.0"
poetry = ">=2.1.3"

[tool.ruff]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

fix = true

# Same as Black.
line-length = 88
indent-width = 4


[tool.ruff.lint]
# Borrowed primaryly from,
#   https://github.com/sphinx-doc/sphinx/blob/master/pyproject.toml

select = [
    "D", # docstrings
    "E", # pycodestyle
    "F", # Pyflakes
    "I", # isort
    "W", # pycodestyle
    # plugins:
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "FURB", # refurb
    "ICN",  # flake8-import-conventions
    "NPY",  # NumPy-specific rules
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PTH",  # flake8-use-pathlib
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TC",   # flake8-type-checking
    "UP",   # pyupgrade
    "RUF",  # ruff-specific
]

ignore = [
    # flake-8 line length
    "E501",
    # pycodestyle
    "E741",
    # flake8-bugbear
    "B006",
    "B023",
    # flake8-bugbear opinionated (disabled by default in flake8)
    "B904",
    "B905",
    "PLC2801", # unnecessary-dunder-call
    "PLR2004", # avoid magic values
    # RUF
    "RUF052",
    # flake8-type-checking
    "TC001", # move application import into a type-checking block
    "TC002", # move third-party import into a type-checking block
    "TC003", # move third-party import into a type-checking block
    # Use typing.TypeAlias for now:
    # mypy yet to implements PEP 695 type aliases;
    # sphinx (as setup here) gives different results with TypeAlias and typing statement
    "UP040",
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = true
line-ending = "lf"
preview = true

[tool.mypy]

cache_fine_grained = true
ignore_missing_imports = false
warn_unreachable = false
warn_redundant_casts = true
strict = true
local_partial_types = true
allow_redefinition_new = true
enable_incomplete_feature = ["PreciseTupleTypes"]

show_column_numbers = true
show_error_codes = true
show_error_context = true

no_implicit_optional = true
no_implicit_reexport = true

allow_redefinition = true

[tool.pytest.ini_options]
log_auto_indent = 4
minversion = "8.0"
addopts = [
    "--import-mode=importlib",
    "--cov=mergeron",
    "--cov-report=html:tests/cov_html",
]
filterwarnings = [
    "all",
    "ignore::DeprecationWarning:dateutil.tz.tz",
    "ignore::DeprecationWarning:jinja2.lexer",
    "ignore::DeprecationWarning:joblib._utils",
    "ignore::RuntimeWarning:mergeron.core.empirical_margin_distribution",
    "ignore::RuntimeWarning:mergeron.core.proportions_tests",
    "ignore::RuntimeWarning:mergeron.gen.enforcement_stats",
]
tmp_path_retention_policy = "failed"


[tool.tox]
requires = ["tox>=4.19"]
skip_missing_interpreters = true
isolated_build = true

[tool.tox.env_run_base]
commands = [
    [
        "poetry",
        "config",
        "virtualenvs.create",
        "false",
    ],
    [
        "poetry",
        "install",
        "--without",
        "doc",
        "--no-root",
    ],[
        "ruff", "check", "./src",
    ],[
        "mypy", "./src",
    ],
    [
        "pytest",
        { replace = "posargs", extend = true },
    ],
]

description = "install ruff, mpypy, pytest in a virtual environment and invoke each, in turn"
deps = ["poetry"]
