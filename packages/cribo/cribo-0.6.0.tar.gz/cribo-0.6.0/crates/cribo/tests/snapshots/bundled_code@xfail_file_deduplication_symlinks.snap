---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_file_deduplication_symlinks/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
lib = _cribo.types.SimpleNamespace(__name__='lib')
lib_helpers = _cribo.types.SimpleNamespace(__name__='lib.helpers')
lib.helpers = lib_helpers
def get_location():
    return "lib/helpers.py"
counter = 0
def increment_counter():
    global counter
    counter += 1
    return counter
lib_helpers.counter = counter
lib_helpers.get_location = get_location
lib_helpers.increment_counter = increment_counter
shared = _cribo.types.SimpleNamespace(__name__='shared')
shared.counter = counter
shared.get_location = get_location
shared.increment_counter = increment_counter
helpers = lib_helpers
common = lib_helpers
print(f"helpers location: {helpers.get_location()}")
print(f"common location: {common.get_location()}")
print(f"helpers counter: {helpers.increment_counter()}")
print(f"common counter: {common.increment_counter()}")
assert helpers.counter == 1
assert common.counter == 1
print("SUCCESS: Symlinked modules are separate in Python!")
