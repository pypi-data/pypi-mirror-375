from __future__ import annotations


cpp_code = """
#include "my_class.h"

struct MyStructPImpl
{
    MyStructPImpl() { /* ...*/ }
    virtual bool SomeMethod() { /* ... */ }
private:
    bool SomePrivateMethod() { /* ... */ }
    int mSomePrivateMember;
};

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <pimpl_glue_code>  // Autogenerated code below! Do not edit!
// </pimpl_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

"""


header_code = """
#pragma once
#include <memory>


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <pimpl_header_code>  // Autogenerated code below! Do not edit!
// </pimpl_header_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
"""

# Create a temporary directory
import tempfile  # noqa

temp_dir = tempfile.TemporaryDirectory()

# write code to temp_dir/my_class.cpp
with open(temp_dir.name + "/my_class.h", "w") as f:
    f.write(cpp_code)
