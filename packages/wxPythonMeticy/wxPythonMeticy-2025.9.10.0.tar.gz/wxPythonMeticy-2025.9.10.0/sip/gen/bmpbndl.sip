//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxBitmapBundle
{
    %Docstring
        BitmapBundle() -> None
        BitmapBundle(bitmap) -> None
        BitmapBundle(icon) -> None
        BitmapBundle(image) -> None
        BitmapBundle(other) -> None
        
        Contains representations of the same bitmap in different resolutions.
    %End
    %TypeHeaderCode
        #include <wx/bmpbndl.h>
    %End

public:
    wxBitmapBundle();

    wxBitmapBundle(
        const wxBitmap & bitmap
    );

    wxBitmapBundle(
        const wxIcon & icon
    );

    wxBitmapBundle(
        const wxImage & image
    );

    wxBitmapBundle(
        const wxBitmapBundle & other
    );

    void Clear();
    %Docstring
        Clear() -> None
        
        Clear the existing bundle contents.
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Check if bitmap bundle is non-empty.
    %End

    wxSize GetDefaultSize() const;
    %Docstring
        GetDefaultSize() -> Size
        
        Get the size of the bitmap represented by this bundle in default
        resolution or, equivalently, at 100% scaling.
    %End

    wxSize GetPreferredBitmapSizeAtScale(
        double scale
    ) const;
    %Docstring
        GetPreferredBitmapSizeAtScale(scale) -> Size
        
        Get the size that would be best to use for this bundle at the given
        DPI scaling factor.
    %End

    wxSize GetPreferredBitmapSizeFor(
        const wxWindow * window
    ) const;
    %Docstring
        GetPreferredBitmapSizeFor(window) -> Size
        
        Get the size that would be best to use for this bundle at the DPI
        scaling factor used by the given window.
    %End

    wxSize GetPreferredLogicalSizeFor(
        const wxWindow * window
    ) const;
    %Docstring
        GetPreferredLogicalSizeFor(window) -> Size
        
        Get the size that would be best to use for this bundle at the DPI
        scaling factor used by the given window in logical size.
    %End

    wxBitmap GetBitmap(
        const wxSize & size
    ) const;
    %Docstring
        GetBitmap(size) -> Bitmap
        
        Get bitmap of the specified size, creating a new bitmap from the
        closest available size by rescaling it if necessary.
    %End

    wxBitmap GetBitmapFor(
        const wxWindow * window
    ) const;
    %Docstring
        GetBitmapFor(window) -> Bitmap
        
        Get bitmap of the size appropriate for the DPI scaling used by the
        given window.
    %End

    wxIcon GetIcon(
        const wxSize & size
    ) const;
    %Docstring
        GetIcon(size) -> Icon
        
        Get icon of the specified size.
    %End

    wxIcon GetIconFor(
        const wxWindow * window
    ) const;
    %Docstring
        GetIconFor(window) -> Icon
        
        Get icon of the size appropriate for the DPI scaling used by the given
        window.
    %End

    bool IsSameAs(
        const wxBitmapBundle & other
    ) const;
    %Docstring
        IsSameAs(other) -> bool
        
        Check if the two bundles refer to the same object.
    %End

    static
    wxBitmapBundle FromBitmaps(
        const wxVector< wxBitmap > & bitmaps
    );
    %Docstring
        FromBitmaps(bitmaps) -> BitmapBundle
        FromBitmaps(bitmap1, bitmap2) -> BitmapBundle
        
        Create a bundle from the given collection of bitmaps.
    %End

    static
    wxBitmapBundle FromBitmaps(
        const wxBitmap & bitmap1,
        const wxBitmap & bitmap2
    );

    static
    wxBitmapBundle FromBitmap(
        const wxBitmap & bitmap
    );
    %Docstring
        FromBitmap(bitmap) -> BitmapBundle
        
        Create a bundle from a single bitmap.
    %End

    static
    wxBitmapBundle FromIconBundle(
        const wxIconBundle & iconBundle
    );
    %Docstring
        FromIconBundle(iconBundle) -> BitmapBundle
        
        Create a bundle from an icon bundle.
    %End

    static
    wxBitmapBundle FromImage(
        const wxImage & image
    );
    %Docstring
        FromImage(image) -> BitmapBundle
        
        Create a bundle from a single image.
    %End

    static
    wxBitmapBundle FromImpl(
        wxBitmapBundleImpl * impl   /Transfer/
    );
    %Docstring
        FromImpl(impl) -> BitmapBundle
        
        Create a bundle from a custom bitmap bundle implementation.
    %End

    static
    wxBitmapBundle FromResources(
        const wxString & name
    );
    %Docstring
        FromResources(name) -> BitmapBundle
        
        Create a bundle from the bitmaps in the application resources.
    %End

    static
    wxBitmapBundle FromFiles(
        const wxString & path,
        const wxString & filename,
        const wxString & extension = "png"
    );
    %Docstring
        FromFiles(path, filename, extension="png") -> BitmapBundle
        FromFiles(fullpathname) -> BitmapBundle
        
        Create a bundle from bitmaps stored as files.
    %End

    static
    wxBitmapBundle FromFiles(
        const wxString & fullpathname
    );

    static
    wxBitmapBundle FromSVG(
        const char * data,
        const wxSize & sizeDef
    );
    %Docstring
        FromSVG(data, sizeDef) -> BitmapBundle
        FromSVG(data, len, sizeDef) -> BitmapBundle
        
        This is an overloaded member function, provided for convenience. It
        differs from the above function only in what argument(s) it accepts.
    %End

    static
    wxBitmapBundle FromSVG(
        const wxByte * data,
        size_t len,
        const wxSize & sizeDef
    );

    static
    wxBitmapBundle FromSVGFile(
        const wxString & path,
        const wxSize & sizeDef
    );
    %Docstring
        FromSVGFile(path, sizeDef) -> BitmapBundle
        
        Create a bundle from the SVG image loaded from the given file.
    %End

    static
    wxBitmapBundle FromSVGResource(
        const wxString & name,
        const wxSize & sizeDef
    );
    %Docstring
        FromSVGResource(name, sizeDef) -> BitmapBundle
        
        Create a bundle from the SVG image loaded from an application
        resource.
    %End

    public:


    %Property(name=DefaultSize, get=GetDefaultSize)
    %ConvertToTypeCode
        // Check for type compatibility
        if (!sipIsErr) {
            if (sipCanConvertToType(sipPy, sipType_wxBitmap, SIP_NO_CONVERTORS))
                return 1;
            if (sipCanConvertToType(sipPy, sipType_wxIcon, SIP_NO_CONVERTORS))
                return 1;
            if (sipCanConvertToType(sipPy, sipType_wxImage, SIP_NO_CONVERTORS))
                return 1;
            if (sipCanConvertToType(sipPy, sipType_wxBitmapBundle, SIP_NO_CONVERTORS))
                return 1;
            return 0;
        }
        
        // Otherwise, a conversion is needed
        int state = 0;
        // TODO: A macro for these nearly identical statements would be a good idea...
        if (sipCanConvertToType(sipPy, sipType_wxBitmap, SIP_NO_CONVERTORS)) {
            wxBitmap* obj = reinterpret_cast<wxBitmap*>(
                sipConvertToType(sipPy, sipType_wxBitmap, sipTransferObj, SIP_NO_CONVERTORS, &state, sipIsErr));
            *sipCppPtr = new wxBitmapBundle(*obj);
            sipReleaseType(obj, sipType_wxBitmap, state);
            return sipGetState(sipTransferObj);
        }
        if (sipCanConvertToType(sipPy, sipType_wxIcon, SIP_NO_CONVERTORS)) {
            wxIcon* obj = reinterpret_cast<wxIcon*>(
                sipConvertToType(sipPy, sipType_wxIcon, sipTransferObj, SIP_NO_CONVERTORS, &state, sipIsErr));
            *sipCppPtr = new wxBitmapBundle(*obj);
            sipReleaseType(obj, sipType_wxIcon, state);
            return sipGetState(sipTransferObj);
        }
        if (sipCanConvertToType(sipPy, sipType_wxImage, SIP_NO_CONVERTORS)) {
            wxImage* obj = reinterpret_cast<wxImage*>(
                sipConvertToType(sipPy, sipType_wxImage, sipTransferObj, SIP_NO_CONVERTORS, &state, sipIsErr));
            *sipCppPtr = new wxBitmapBundle(*obj);
            sipReleaseType(obj, sipType_wxImage, state);
            return sipGetState(sipTransferObj);
        }
        
        // The final option is that it is already a wxBitmapBundle, so just fetch the pointer and return
        *sipCppPtr = reinterpret_cast<wxBitmapBundle*>(
            sipConvertToType(sipPy, sipType_wxBitmapBundle, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
        return 0; // not a new instance
    %End
};  // end of class wxBitmapBundle


class wxBitmapBundleImpl : wxRefCounter
{
    %Docstring
        Base class for custom implementations of wxBitmapBundle.
    %End
    %TypeHeaderCode
        #include <wx/bmpbndl.h>
    %End

public:
    virtual
    wxSize GetDefaultSize() const = 0;
    %Docstring
        GetDefaultSize() -> Size
        
        Return the size of the bitmaps represented by this bundle in the
        default DPI.
    %End

    virtual
    wxSize GetPreferredBitmapSizeAtScale(
        double scale
    ) const = 0;
    %Docstring
        GetPreferredBitmapSizeAtScale(scale) -> Size
        
        Return the preferred size that should be used at the given scale.
    %End

    virtual
    wxBitmap GetBitmap(
        const wxSize & size
    ) = 0;
    %Docstring
        GetBitmap(size) -> Bitmap
        
        Retrieve the bitmap of exactly the given size.
    %End

    public:


    %Property(name=DefaultSize, get=GetDefaultSize)

protected:
    wxSize DoGetPreferredSize(
        double scale
    ) const;
    %Docstring
        DoGetPreferredSize(scale) -> Size
        
        Helper for implementing GetPreferredBitmapSizeAtScale() in the derived
        classes.
    %End

    size_t GetIndexToUpscale(
        const wxSize & size
    ) const;
    %Docstring
        GetIndexToUpscale(size) -> int
        
        Return the index of the available scale most suitable to be upscaled
        to the given size.
    %End

    virtual
    double GetNextAvailableScale(
        size_t & idx   /In, Out/
    ) const;
    %Docstring
        GetNextAvailableScale(idx) -> Tuple[float, int]
        
        Return information about the available bitmaps.
    %End

    virtual
    ~wxBitmapBundleImpl();

};  // end of class wxBitmapBundleImpl



//---------------------------------------------------------------------------

