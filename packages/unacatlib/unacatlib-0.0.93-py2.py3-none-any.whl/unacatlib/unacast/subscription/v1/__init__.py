# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/subscription/v1/account.proto, unacast/subscription/v1/account_service.proto, unacast/subscription/v1/billing_account.proto, unacast/subscription/v1/quota.proto, unacast/subscription/v1/quota_service.proto, unacast/subscription/v1/subscription.proto, unacast/subscription/v1/subscription_service.proto, unacast/subscription/v1/subscription_status.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import unatype as __unatype__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class SubscriptionAccessKind(betterproto.Enum):
    ACCESS_UNSPECIFIED = 0
    DESCRIPTIVE = 3
    FREE = 6
    PARTIAL = 9
    UNRESTRICTED = 15


class BillingAccountKind(betterproto.Enum):
    UNSPECIFIED = 0
    PERSONAL = 1
    ORGANIZATION = 2
    INTERNAL = 3
    OPERATING_ORGANIZATION = 4
    """
    Special organization for operating a business within the Catalog. 
     Other accounts are scoped to a OPERATING_ORGANIZATION.
    """


class EnforcementPolicy(betterproto.Enum):
    """
    EnforcementPolicy defines how the quota will be enforced when a quota is exceeded
    """

    UNSPECIFIED = 0
    ALERT_ONLY = 1
    EXHAUST_AND_ALERT = 2


class ColumnOrder(betterproto.Enum):
    NONE = 0
    EMAIL = 1
    DATE = 2
    NAME = 4


@dataclass(eq=False, repr=False)
class SubscriptionStatus(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    additional_subscription_ids: List[str] = betterproto.string_field(2)
    billing_account_id: str = betterproto.string_field(3)
    current_access_kind: "SubscriptionAccessKind" = betterproto.enum_field(5)
    resource_name: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class BillingAccount(betterproto.Message):
    id: str = betterproto.string_field(1)
    kind: "BillingAccountKind" = betterproto.enum_field(2)
    owner_email: str = betterproto.string_field(3)
    display_name: str = betterproto.string_field(4)
    create_time_string: str = betterproto.string_field(7)
    members: List["BillingAccountMember"] = betterproto.message_field(5)
    operating_scopes: List["OperatingScope"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class BillingAccountMember(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class OperatingScope(betterproto.Message):
    name: str = betterproto.string_field(1)
    display_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BillingAccountSpec(betterproto.Message):
    display_name: str = betterproto.string_field(1)
    owner_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Subscription(betterproto.Message):
    id: str = betterproto.string_field(1)
    sku: str = betterproto.string_field(2)
    license_series: str = betterproto.string_field(3)
    """
    if set only one active (non-expired) subscription of this license_series is allowed per billing-account.
     will return FAILED_PRECONDITION if this is violated.
    """

    billing_account_id: str = betterproto.string_field(5)
    expire_time_string: str = betterproto.string_field(6)
    created_time_string: str = betterproto.string_field(7)
    replaced_by: str = betterproto.string_field(8)
    billing_account: "BillingAccount" = betterproto.message_field(10)
    resources: List["ResourceSubscription"] = betterproto.message_field(12)
    created_by: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class SubscriptionSpec(betterproto.Message):
    sku: str = betterproto.string_field(1)
    license_series: str = betterproto.string_field(2)
    """
    if set only one active (non-expired) subscription of this license_series is allowed per billing-account.
     will return FAILED_PRECONDITION if this is violated.
    """

    expire_time_string: str = betterproto.string_field(6)
    resources: List[str] = betterproto.string_field(10)
    resources_with_filter_policy: List["ResourceSubscription"] = (
        betterproto.message_field(11)
    )


@dataclass(eq=False, repr=False)
class ResourceSubscription(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    resource_name: str = betterproto.string_field(2)
    subscription_filter_policy: "SubscriptionFilterPolicy" = betterproto.message_field(
        3
    )


@dataclass(eq=False, repr=False)
class SubscriptionFilterPolicy(betterproto.Message):
    filter_clauses: List["__unatype__.FilterClause"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Account(betterproto.Message):
    billing_account: "BillingAccount" = betterproto.message_field(1)
    subscriptions: List["Subscription"] = betterproto.message_field(2)
    """
    By default currently active subscriptions are included
     use response_options to alter this behaviour
    """


@dataclass(eq=False, repr=False)
class AccountStats(betterproto.Message):
    accounts_per_subscription_config: List["AccountsPerSubscriptionConfig"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class AccountsPerSubscriptionConfig(betterproto.Message):
    sku: str = betterproto.string_field(1)
    license_series: str = betterproto.string_field(2)
    accounts: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class ListAccountsRequest(betterproto.Message):
    operating_scopes: List[str] = betterproto.string_field(3)
    """
    If not provided, Unacast scope will be used if user is old style Sales Operator
    """

    filters: List["__unatype__.FilterClause"] = betterproto.message_field(1)
    """
    available fields to filter by are:
     - id, display_name, kind, owner_email
     - accounts.kind
     - active_subscriptions.license_series
     - active_subscriptions.sku
     - active_subscriptions.resource_name
     - active_subscriptions.created_by
     - subscriptions.license_series
     - subscriptions.sku
     - subscriptions.resource_name
     - subscriptions.created_by
     - members.member_email
    """

    response_options: "AccountResponseOptions" = betterproto.message_field(2)
    order_by: str = betterproto.string_field(13)
    page_token: str = betterproto.string_field(14)
    page_size: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class ListAccountsResponse(betterproto.Message):
    accounts: List["Account"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class GetAccountStatsRequest(betterproto.Message):
    operating_scopes: List[str] = betterproto.string_field(3)
    """
    If not provided, Unacast scope will be used if user is old style Sales Operator
    """

    filters: List["__unatype__.FilterClause"] = betterproto.message_field(1)
    """
    available fields to filter by are:
     - id, display_name, kind, owner_email
     - active_subscriptions.license_series
     - active_subscriptions.sku
     - active_subscriptions.resource_name
     - active_subscriptions.created_by
     - ubscriptions.license_series
     - subscriptions.sku
     - subscriptions.resource_name
     - subscriptions.created_by
     - members.member_email
    """


@dataclass(eq=False, repr=False)
class GetAccountStatsResponse(betterproto.Message):
    account_stats: "AccountStats" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AccountResponseOptions(betterproto.Message):
    include_expired_subscriptions: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class Quota(betterproto.Message):
    service: str = betterproto.string_field(1)
    """e.g. Insights"""

    quota_id: str = betterproto.string_field(2)
    """e.g. CustomLocationsLimit"""

    metric_unit: str = betterproto.string_field(3)
    """unit of the metric tracked in the value"""

    default_value: int = betterproto.int64_field(4)
    max_value: int = betterproto.int64_field(5)
    """if set to -1 max is unlimited."""

    description: str = betterproto.string_field(6)
    """Description of the quota"""


@dataclass(eq=False, repr=False)
class QuotaConfig(betterproto.Message):
    name: str = betterproto.string_field(1)
    """
    accounts/<account-id>/services/<service>/quotas/<quota-id>
     accounts/123/services/insights/quotas/CustomLocationsLimit
     accounts/<account-id>/services/<service>/quotas/<quota-id>/scope/<scope>/<scope-value>
     accounts/123/services/insights/quotas/ListRecordsInvocationCount/scope/SCOPE_TOKEN/uc_123
    """

    billing_account_id: str = betterproto.string_field(2)
    service: str = betterproto.string_field(3)
    """The id of the service this quota belongs to"""

    quota_id: str = betterproto.string_field(4)
    """
    The id of the quota, which is unquie within the service.
     Example: `CustomLocationsLimit`
    """

    metric_unit: str = betterproto.string_field(8)
    """unit of the metric tracked in the value"""

    value: int = betterproto.int64_field(9)
    """
    the value to be enforced for this quota
     if set to -1 unlimited, if 0 no usage can happen.
    """

    enforcement_policy: "EnforcementPolicy" = betterproto.enum_field(10)
    """
    EnforcementPolicy defines how the quota will be enforced when a quota is exceeded
    """

    create_time: str = betterproto.string_field(14)
    last_update_time: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class QuotaUsage(betterproto.Message):
    quota_config_name: str = betterproto.string_field(1)
    """name of the quota config this usage belongs to"""

    usage_metric_name: str = betterproto.string_field(2)
    """the name of the usage metric"""

    value: int = betterproto.int64_field(3)
    """the value of the usage metric"""

    time_period_unit: str = betterproto.string_field(4)
    """time window over which the usage was tracked"""

    time_period_value: int = betterproto.int32_field(5)
    """number of time_period_units over which the usage was tracked"""

    scope: str = betterproto.string_field(6)
    """scope of the usage metric"""

    scope_value: str = betterproto.string_field(7)
    """scope value of the usage metric"""


@dataclass(eq=False, repr=False)
class ListQuotaConfigsRequest(betterproto.Message):
    billing_accounts_filter: List[str] = betterproto.string_field(1)
    """Limit request to a set of billing accounts"""

    services_filter: List[str] = betterproto.string_field(2)
    """Limit request to a set of services"""

    quotas_filter: List[str] = betterproto.string_field(3)
    """Limit request to a set of quotas"""

    scopes_filter: List[str] = betterproto.string_field(4)
    """Limit request to a set of scopes"""

    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListQuotaConfigsResponse(betterproto.Message):
    quota_configs: List["QuotaConfig"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class GetQuotaConfigRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    """fully qualified name of quota to be set"""


@dataclass(eq=False, repr=False)
class SetQuotaConfigRequest(betterproto.Message):
    name: str = betterproto.string_field(1)
    """fully qualified name of quota to be set"""

    value: int = betterproto.int64_field(2)
    """value to give the quota-config"""

    enforcement_policy: "EnforcementPolicy" = betterproto.enum_field(3)
    """
    enforcement policy
     if not set, the default policy will be used
    
     NB! if setting an existing quota config the enforcement policy will be set to default if unspecified
    """


@dataclass(eq=False, repr=False)
class ListQuotasRequest(betterproto.Message):
    services_filter: List[str] = betterproto.string_field(1)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListQuotasResponse(betterproto.Message):
    quotas: List["Quota"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListQuotaUsageRequest(betterproto.Message):
    billing_accounts_filter: List[str] = betterproto.string_field(1)
    services_filter: List[str] = betterproto.string_field(2)
    quotas_filter: List[str] = betterproto.string_field(3)
    scope: str = betterproto.string_field(4)
    scope_value: str = betterproto.string_field(5)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListQuotaUsageResponse(betterproto.Message):
    quota_usages: List["QuotaUsage"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class GetQuotaUsageRequest(betterproto.Message):
    billing_account: str = betterproto.string_field(1)
    service_name: str = betterproto.string_field(2)
    quota_id: str = betterproto.string_field(3)
    scope: str = betterproto.string_field(4)
    scope_value: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class GetQuotaUsageResponse(betterproto.Message):
    quota_usage: "QuotaUsage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SyncQuotaUsageRequest(betterproto.Message):
    billing_account: str = betterproto.string_field(1)
    service_name: str = betterproto.string_field(2)
    quota_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class SyncQuotaUsageResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CreateBillingAccountRequest(betterproto.Message):
    display_name: str = betterproto.string_field(1)
    owner_email: str = betterproto.string_field(2)
    kind: "BillingAccountKind" = betterproto.enum_field(3)
    operating_scope_names: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CreateBillingAccountResponse(betterproto.Message):
    billing_account: "BillingAccount" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetBillingAccountResponse(betterproto.Message):
    billing_account: "BillingAccount" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetBillingAccountRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteBillingAccountRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdateBillingAccountRequest(betterproto.Message):
    billing_account: "BillingAccount" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class CreateSubscriptionRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    spec: "SubscriptionSpec" = betterproto.message_field(5)
    billing_account_spec: "BillingAccountSpec" = betterproto.message_field(6)
    """Deprecated, use billing_account_id instead"""


@dataclass(eq=False, repr=False)
class CreateSubscriptionResponse(betterproto.Message):
    subscription: "Subscription" = betterproto.message_field(1)
    billing_account: "BillingAccount" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetSubscriptionRequest(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdateSubscriptionRequest(betterproto.Message):
    subscription: "Subscription" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class ReplaceSubscriptionRequest(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    spec: "SubscriptionSpec" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ListSubscriptionsRequest(betterproto.Message):
    billing_account_filter: List[str] = betterproto.string_field(1)
    sku_filter: List[str] = betterproto.string_field(2)
    show_expired: bool = betterproto.bool_field(6)
    """
    @exclude
    note to future selves, these should be named "include_" not "show_"
    """

    show_replaced: bool = betterproto.bool_field(7)
    order_by: str = betterproto.string_field(12)
    """
    SQL style; e.g. "created_time_string desc, expire_time_string asc"
     Only one field can be used for sorting.
     Default: created_time_string desc
     Allowed columns: created_time_string, expire_time_string
    """

    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListSubscriptionsResponse(betterproto.Message):
    subscriptions: List["Subscription"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class DeleteSubscriptionRequest(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class BulkSubscriptionStatusRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    resources: List["RequestResource"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RequestResource(betterproto.Message):
    resource_name: str = betterproto.string_field(1)
    resource_lens: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BulkSubscriptionStatusResponse(betterproto.Message):
    resource_status: List["SubscriptionStatus"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListBillingAccountsRequest(betterproto.Message):
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)
    limit_to_current_user: bool = betterproto.bool_field(2)
    filter_out_baccs_with_no_access_to_catalog: str = betterproto.string_field(6)
    filter_subscription_resource: List[str] = betterproto.string_field(7)
    search_value: str = betterproto.string_field(16)
    order_by: "ColumnOrder" = betterproto.enum_field(17)


@dataclass(eq=False, repr=False)
class ListBillingAccountsResponse(betterproto.Message):
    billing_accounts: List["BillingAccount"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)
    total_pages: int = betterproto.int64_field(16)


@dataclass(eq=False, repr=False)
class AddBillingAccountMemberRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_full_name: str = betterproto.string_field(3)
    member_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AddBillingAccountMemberResponse(betterproto.Message):
    member: "BillingAccountMember" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RemoveBillingAccountMemberRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_email: str = betterproto.string_field(2)


class AccountServiceStub(betterproto.ServiceStub):
    async def list_accounts(
        self,
        list_accounts_request: "ListAccountsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListAccountsResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.AccountService/ListAccounts",
            list_accounts_request,
            ListAccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_account_stats(
        self,
        get_account_stats_request: "GetAccountStatsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAccountStatsResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.AccountService/GetAccountStats",
            get_account_stats_request,
            GetAccountStatsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QuotaServiceStub(betterproto.ServiceStub):
    async def list_quotas(
        self,
        list_quotas_request: "ListQuotasRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListQuotasResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.QuotaService/ListQuotas",
            list_quotas_request,
            ListQuotasResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_quota_configs(
        self,
        list_quota_configs_request: "ListQuotaConfigsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListQuotaConfigsResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.QuotaService/ListQuotaConfigs",
            list_quota_configs_request,
            ListQuotaConfigsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_quota_config(
        self,
        get_quota_config_request: "GetQuotaConfigRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuotaConfig":
        return await self._unary_unary(
            "/unacast.subscription.v1.QuotaService/GetQuotaConfig",
            get_quota_config_request,
            QuotaConfig,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_quota_config(
        self,
        set_quota_config_request: "SetQuotaConfigRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuotaConfig":
        return await self._unary_unary(
            "/unacast.subscription.v1.QuotaService/SetQuotaConfig",
            set_quota_config_request,
            QuotaConfig,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_quota_usage(
        self,
        list_quota_usage_request: "ListQuotaUsageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListQuotaUsageResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.QuotaService/ListQuotaUsage",
            list_quota_usage_request,
            ListQuotaUsageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_quota_usage(
        self,
        get_quota_usage_request: "GetQuotaUsageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetQuotaUsageResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.QuotaService/GetQuotaUsage",
            get_quota_usage_request,
            GetQuotaUsageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def sync_quota_usage(
        self,
        sync_quota_usage_request: "SyncQuotaUsageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SyncQuotaUsageResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.QuotaService/SyncQuotaUsage",
            sync_quota_usage_request,
            SyncQuotaUsageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SubscriptionServiceStub(betterproto.ServiceStub):
    async def create_billing_account(
        self,
        create_billing_account_request: "CreateBillingAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateBillingAccountResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/CreateBillingAccount",
            create_billing_account_request,
            CreateBillingAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_billing_account(
        self,
        get_billing_account_request: "GetBillingAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetBillingAccountResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/GetBillingAccount",
            get_billing_account_request,
            GetBillingAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_billing_accounts(
        self,
        list_billing_accounts_request: "ListBillingAccountsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListBillingAccountsResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/ListBillingAccounts",
            list_billing_accounts_request,
            ListBillingAccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_billing_account_member(
        self,
        add_billing_account_member_request: "AddBillingAccountMemberRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddBillingAccountMemberResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/AddBillingAccountMember",
            add_billing_account_member_request,
            AddBillingAccountMemberResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_billing_account_member(
        self,
        remove_billing_account_member_request: "RemoveBillingAccountMemberRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/RemoveBillingAccountMember",
            remove_billing_account_member_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_billing_account(
        self,
        delete_billing_account_request: "DeleteBillingAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/DeleteBillingAccount",
            delete_billing_account_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_billing_account(
        self,
        update_billing_account_request: "UpdateBillingAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BillingAccount":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/UpdateBillingAccount",
            update_billing_account_request,
            BillingAccount,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_subscription(
        self,
        create_subscription_request: "CreateSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateSubscriptionResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/CreateSubscription",
            create_subscription_request,
            CreateSubscriptionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_subscription(
        self,
        get_subscription_request: "GetSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Subscription":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/GetSubscription",
            get_subscription_request,
            Subscription,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_subscriptions(
        self,
        list_subscriptions_request: "ListSubscriptionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListSubscriptionsResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/ListSubscriptions",
            list_subscriptions_request,
            ListSubscriptionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_subscription(
        self,
        update_subscription_request: "UpdateSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Subscription":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/UpdateSubscription",
            update_subscription_request,
            Subscription,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def replace_subscription(
        self,
        replace_subscription_request: "ReplaceSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Subscription":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/ReplaceSubscription",
            replace_subscription_request,
            Subscription,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_subscription(
        self,
        delete_subscription_request: "DeleteSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/DeleteSubscription",
            delete_subscription_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_subscription_status(
        self,
        bulk_subscription_status_request: "BulkSubscriptionStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BulkSubscriptionStatusResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/BulkSubscriptionStatus",
            bulk_subscription_status_request,
            BulkSubscriptionStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class AccountServiceBase(ServiceBase):

    async def list_accounts(
        self, list_accounts_request: "ListAccountsRequest"
    ) -> "ListAccountsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_account_stats(
        self, get_account_stats_request: "GetAccountStatsRequest"
    ) -> "GetAccountStatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_accounts(
        self, stream: "grpclib.server.Stream[ListAccountsRequest, ListAccountsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_accounts(request)
        await stream.send_message(response)

    async def __rpc_get_account_stats(
        self,
        stream: "grpclib.server.Stream[GetAccountStatsRequest, GetAccountStatsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_account_stats(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.subscription.v1.AccountService/ListAccounts": grpclib.const.Handler(
                self.__rpc_list_accounts,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListAccountsRequest,
                ListAccountsResponse,
            ),
            "/unacast.subscription.v1.AccountService/GetAccountStats": grpclib.const.Handler(
                self.__rpc_get_account_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAccountStatsRequest,
                GetAccountStatsResponse,
            ),
        }


class QuotaServiceBase(ServiceBase):

    async def list_quotas(
        self, list_quotas_request: "ListQuotasRequest"
    ) -> "ListQuotasResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_quota_configs(
        self, list_quota_configs_request: "ListQuotaConfigsRequest"
    ) -> "ListQuotaConfigsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_quota_config(
        self, get_quota_config_request: "GetQuotaConfigRequest"
    ) -> "QuotaConfig":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_quota_config(
        self, set_quota_config_request: "SetQuotaConfigRequest"
    ) -> "QuotaConfig":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_quota_usage(
        self, list_quota_usage_request: "ListQuotaUsageRequest"
    ) -> "ListQuotaUsageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_quota_usage(
        self, get_quota_usage_request: "GetQuotaUsageRequest"
    ) -> "GetQuotaUsageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def sync_quota_usage(
        self, sync_quota_usage_request: "SyncQuotaUsageRequest"
    ) -> "SyncQuotaUsageResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_quotas(
        self, stream: "grpclib.server.Stream[ListQuotasRequest, ListQuotasResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_quotas(request)
        await stream.send_message(response)

    async def __rpc_list_quota_configs(
        self,
        stream: "grpclib.server.Stream[ListQuotaConfigsRequest, ListQuotaConfigsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_quota_configs(request)
        await stream.send_message(response)

    async def __rpc_get_quota_config(
        self, stream: "grpclib.server.Stream[GetQuotaConfigRequest, QuotaConfig]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_quota_config(request)
        await stream.send_message(response)

    async def __rpc_set_quota_config(
        self, stream: "grpclib.server.Stream[SetQuotaConfigRequest, QuotaConfig]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_quota_config(request)
        await stream.send_message(response)

    async def __rpc_list_quota_usage(
        self,
        stream: "grpclib.server.Stream[ListQuotaUsageRequest, ListQuotaUsageResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_quota_usage(request)
        await stream.send_message(response)

    async def __rpc_get_quota_usage(
        self,
        stream: "grpclib.server.Stream[GetQuotaUsageRequest, GetQuotaUsageResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_quota_usage(request)
        await stream.send_message(response)

    async def __rpc_sync_quota_usage(
        self,
        stream: "grpclib.server.Stream[SyncQuotaUsageRequest, SyncQuotaUsageResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.sync_quota_usage(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.subscription.v1.QuotaService/ListQuotas": grpclib.const.Handler(
                self.__rpc_list_quotas,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListQuotasRequest,
                ListQuotasResponse,
            ),
            "/unacast.subscription.v1.QuotaService/ListQuotaConfigs": grpclib.const.Handler(
                self.__rpc_list_quota_configs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListQuotaConfigsRequest,
                ListQuotaConfigsResponse,
            ),
            "/unacast.subscription.v1.QuotaService/GetQuotaConfig": grpclib.const.Handler(
                self.__rpc_get_quota_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetQuotaConfigRequest,
                QuotaConfig,
            ),
            "/unacast.subscription.v1.QuotaService/SetQuotaConfig": grpclib.const.Handler(
                self.__rpc_set_quota_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetQuotaConfigRequest,
                QuotaConfig,
            ),
            "/unacast.subscription.v1.QuotaService/ListQuotaUsage": grpclib.const.Handler(
                self.__rpc_list_quota_usage,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListQuotaUsageRequest,
                ListQuotaUsageResponse,
            ),
            "/unacast.subscription.v1.QuotaService/GetQuotaUsage": grpclib.const.Handler(
                self.__rpc_get_quota_usage,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetQuotaUsageRequest,
                GetQuotaUsageResponse,
            ),
            "/unacast.subscription.v1.QuotaService/SyncQuotaUsage": grpclib.const.Handler(
                self.__rpc_sync_quota_usage,
                grpclib.const.Cardinality.UNARY_UNARY,
                SyncQuotaUsageRequest,
                SyncQuotaUsageResponse,
            ),
        }


class SubscriptionServiceBase(ServiceBase):

    async def create_billing_account(
        self, create_billing_account_request: "CreateBillingAccountRequest"
    ) -> "CreateBillingAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_billing_account(
        self, get_billing_account_request: "GetBillingAccountRequest"
    ) -> "GetBillingAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_billing_accounts(
        self, list_billing_accounts_request: "ListBillingAccountsRequest"
    ) -> "ListBillingAccountsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_billing_account_member(
        self, add_billing_account_member_request: "AddBillingAccountMemberRequest"
    ) -> "AddBillingAccountMemberResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_billing_account_member(
        self, remove_billing_account_member_request: "RemoveBillingAccountMemberRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_billing_account(
        self, delete_billing_account_request: "DeleteBillingAccountRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_billing_account(
        self, update_billing_account_request: "UpdateBillingAccountRequest"
    ) -> "BillingAccount":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_subscription(
        self, create_subscription_request: "CreateSubscriptionRequest"
    ) -> "CreateSubscriptionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_subscription(
        self, get_subscription_request: "GetSubscriptionRequest"
    ) -> "Subscription":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_subscriptions(
        self, list_subscriptions_request: "ListSubscriptionsRequest"
    ) -> "ListSubscriptionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_subscription(
        self, update_subscription_request: "UpdateSubscriptionRequest"
    ) -> "Subscription":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def replace_subscription(
        self, replace_subscription_request: "ReplaceSubscriptionRequest"
    ) -> "Subscription":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_subscription(
        self, delete_subscription_request: "DeleteSubscriptionRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def bulk_subscription_status(
        self, bulk_subscription_status_request: "BulkSubscriptionStatusRequest"
    ) -> "BulkSubscriptionStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_billing_account(
        self,
        stream: "grpclib.server.Stream[CreateBillingAccountRequest, CreateBillingAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_billing_account(request)
        await stream.send_message(response)

    async def __rpc_get_billing_account(
        self,
        stream: "grpclib.server.Stream[GetBillingAccountRequest, GetBillingAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_billing_account(request)
        await stream.send_message(response)

    async def __rpc_list_billing_accounts(
        self,
        stream: "grpclib.server.Stream[ListBillingAccountsRequest, ListBillingAccountsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_billing_accounts(request)
        await stream.send_message(response)

    async def __rpc_add_billing_account_member(
        self,
        stream: "grpclib.server.Stream[AddBillingAccountMemberRequest, AddBillingAccountMemberResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_billing_account_member(request)
        await stream.send_message(response)

    async def __rpc_remove_billing_account_member(
        self,
        stream: "grpclib.server.Stream[RemoveBillingAccountMemberRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_billing_account_member(request)
        await stream.send_message(response)

    async def __rpc_delete_billing_account(
        self,
        stream: "grpclib.server.Stream[DeleteBillingAccountRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_billing_account(request)
        await stream.send_message(response)

    async def __rpc_update_billing_account(
        self,
        stream: "grpclib.server.Stream[UpdateBillingAccountRequest, BillingAccount]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_billing_account(request)
        await stream.send_message(response)

    async def __rpc_create_subscription(
        self,
        stream: "grpclib.server.Stream[CreateSubscriptionRequest, CreateSubscriptionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_subscription(request)
        await stream.send_message(response)

    async def __rpc_get_subscription(
        self, stream: "grpclib.server.Stream[GetSubscriptionRequest, Subscription]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_subscription(request)
        await stream.send_message(response)

    async def __rpc_list_subscriptions(
        self,
        stream: "grpclib.server.Stream[ListSubscriptionsRequest, ListSubscriptionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_subscriptions(request)
        await stream.send_message(response)

    async def __rpc_update_subscription(
        self, stream: "grpclib.server.Stream[UpdateSubscriptionRequest, Subscription]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_subscription(request)
        await stream.send_message(response)

    async def __rpc_replace_subscription(
        self, stream: "grpclib.server.Stream[ReplaceSubscriptionRequest, Subscription]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.replace_subscription(request)
        await stream.send_message(response)

    async def __rpc_delete_subscription(
        self,
        stream: "grpclib.server.Stream[DeleteSubscriptionRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_subscription(request)
        await stream.send_message(response)

    async def __rpc_bulk_subscription_status(
        self,
        stream: "grpclib.server.Stream[BulkSubscriptionStatusRequest, BulkSubscriptionStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.bulk_subscription_status(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.subscription.v1.SubscriptionService/CreateBillingAccount": grpclib.const.Handler(
                self.__rpc_create_billing_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateBillingAccountRequest,
                CreateBillingAccountResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/GetBillingAccount": grpclib.const.Handler(
                self.__rpc_get_billing_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBillingAccountRequest,
                GetBillingAccountResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/ListBillingAccounts": grpclib.const.Handler(
                self.__rpc_list_billing_accounts,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListBillingAccountsRequest,
                ListBillingAccountsResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/AddBillingAccountMember": grpclib.const.Handler(
                self.__rpc_add_billing_account_member,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddBillingAccountMemberRequest,
                AddBillingAccountMemberResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/RemoveBillingAccountMember": grpclib.const.Handler(
                self.__rpc_remove_billing_account_member,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveBillingAccountMemberRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.subscription.v1.SubscriptionService/DeleteBillingAccount": grpclib.const.Handler(
                self.__rpc_delete_billing_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteBillingAccountRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.subscription.v1.SubscriptionService/UpdateBillingAccount": grpclib.const.Handler(
                self.__rpc_update_billing_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateBillingAccountRequest,
                BillingAccount,
            ),
            "/unacast.subscription.v1.SubscriptionService/CreateSubscription": grpclib.const.Handler(
                self.__rpc_create_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateSubscriptionRequest,
                CreateSubscriptionResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/GetSubscription": grpclib.const.Handler(
                self.__rpc_get_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSubscriptionRequest,
                Subscription,
            ),
            "/unacast.subscription.v1.SubscriptionService/ListSubscriptions": grpclib.const.Handler(
                self.__rpc_list_subscriptions,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListSubscriptionsRequest,
                ListSubscriptionsResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/UpdateSubscription": grpclib.const.Handler(
                self.__rpc_update_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateSubscriptionRequest,
                Subscription,
            ),
            "/unacast.subscription.v1.SubscriptionService/ReplaceSubscription": grpclib.const.Handler(
                self.__rpc_replace_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReplaceSubscriptionRequest,
                Subscription,
            ),
            "/unacast.subscription.v1.SubscriptionService/DeleteSubscription": grpclib.const.Handler(
                self.__rpc_delete_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteSubscriptionRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.subscription.v1.SubscriptionService/BulkSubscriptionStatus": grpclib.const.Handler(
                self.__rpc_bulk_subscription_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                BulkSubscriptionStatusRequest,
                BulkSubscriptionStatusResponse,
            ),
        }
