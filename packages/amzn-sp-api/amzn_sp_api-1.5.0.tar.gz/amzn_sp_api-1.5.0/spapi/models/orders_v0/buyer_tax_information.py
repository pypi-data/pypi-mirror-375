# coding: utf-8

"""
    Selling Partner API for Orders

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class BuyerTaxInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buyer_legal_company_name': 'str',
        'buyer_business_address': 'str',
        'buyer_tax_registration_id': 'str',
        'buyer_tax_office': 'str',
    }

    attribute_map = {
        'buyer_legal_company_name': 'BuyerLegalCompanyName',
        'buyer_business_address': 'BuyerBusinessAddress',
        'buyer_tax_registration_id': 'BuyerTaxRegistrationId',
        'buyer_tax_office': 'BuyerTaxOffice',
    }

    def __init__(self, buyer_legal_company_name=None, buyer_business_address=None, buyer_tax_registration_id=None, buyer_tax_office=None, _configuration=None):  # noqa: E501
        """BuyerTaxInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._buyer_legal_company_name = None
        self._buyer_business_address = None
        self._buyer_tax_registration_id = None
        self._buyer_tax_office = None
        self.discriminator = None

        if buyer_legal_company_name is not None:
            self.buyer_legal_company_name = buyer_legal_company_name
        if buyer_business_address is not None:
            self.buyer_business_address = buyer_business_address
        if buyer_tax_registration_id is not None:
            self.buyer_tax_registration_id = buyer_tax_registration_id
        if buyer_tax_office is not None:
            self.buyer_tax_office = buyer_tax_office

    @property
    def buyer_legal_company_name(self):
        """Gets the buyer_legal_company_name of this BuyerTaxInformation.  # noqa: E501

        Business buyer's company legal name.  # noqa: E501

        :return: The buyer_legal_company_name of this BuyerTaxInformation.  # noqa: E501
        :rtype: str
        """
        return self._buyer_legal_company_name

    @buyer_legal_company_name.setter
    def buyer_legal_company_name(self, buyer_legal_company_name):
        """Sets the buyer_legal_company_name of this BuyerTaxInformation.

        Business buyer's company legal name.  # noqa: E501

        :param buyer_legal_company_name: The buyer_legal_company_name of this BuyerTaxInformation.  # noqa: E501
        :type: str
        """

        self._buyer_legal_company_name = buyer_legal_company_name

    @property
    def buyer_business_address(self):
        """Gets the buyer_business_address of this BuyerTaxInformation.  # noqa: E501

        Business buyer's address.  # noqa: E501

        :return: The buyer_business_address of this BuyerTaxInformation.  # noqa: E501
        :rtype: str
        """
        return self._buyer_business_address

    @buyer_business_address.setter
    def buyer_business_address(self, buyer_business_address):
        """Sets the buyer_business_address of this BuyerTaxInformation.

        Business buyer's address.  # noqa: E501

        :param buyer_business_address: The buyer_business_address of this BuyerTaxInformation.  # noqa: E501
        :type: str
        """

        self._buyer_business_address = buyer_business_address

    @property
    def buyer_tax_registration_id(self):
        """Gets the buyer_tax_registration_id of this BuyerTaxInformation.  # noqa: E501

        Business buyer's tax registration ID.  # noqa: E501

        :return: The buyer_tax_registration_id of this BuyerTaxInformation.  # noqa: E501
        :rtype: str
        """
        return self._buyer_tax_registration_id

    @buyer_tax_registration_id.setter
    def buyer_tax_registration_id(self, buyer_tax_registration_id):
        """Sets the buyer_tax_registration_id of this BuyerTaxInformation.

        Business buyer's tax registration ID.  # noqa: E501

        :param buyer_tax_registration_id: The buyer_tax_registration_id of this BuyerTaxInformation.  # noqa: E501
        :type: str
        """

        self._buyer_tax_registration_id = buyer_tax_registration_id

    @property
    def buyer_tax_office(self):
        """Gets the buyer_tax_office of this BuyerTaxInformation.  # noqa: E501

        Business buyer's tax office.  # noqa: E501

        :return: The buyer_tax_office of this BuyerTaxInformation.  # noqa: E501
        :rtype: str
        """
        return self._buyer_tax_office

    @buyer_tax_office.setter
    def buyer_tax_office(self, buyer_tax_office):
        """Sets the buyer_tax_office of this BuyerTaxInformation.

        Business buyer's tax office.  # noqa: E501

        :param buyer_tax_office: The buyer_tax_office of this BuyerTaxInformation.  # noqa: E501
        :type: str
        """

        self._buyer_tax_office = buyer_tax_office

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BuyerTaxInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuyerTaxInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BuyerTaxInformation):
            return True

        return self.to_dict() != other.to_dict()
