CLOSE

;####################################################
; Autogenerated Homing PLC for PMAC, DO NOT MODIFY
; Group 2:
;  Axis 14: htype = LIMIT, jdist = 0, post = i
;  Axis 15: htype = LIMIT, jdist = 0, post = i
; Group 3:
;  Axis 12: htype = LIMIT, jdist = 0, post = i
;  Axis 13: htype = LIMIT, jdist = 0, post = i
;####################################################

; Use a different timer for each PLC
#define timer             i(5111+(12&30)*50+12%2)
; Make timer more readable
#define MilliSeconds      * 8388608/i10

; Homing State P Variable
#define HomingState       P1200
#define StateIdle         0
#define StateConfiguring  1
#define StateMoveNeg      2
#define StateMovePos      3
#define StateHoming       4
#define StatePostHomeMove 5
#define StateAligning     6
#define StateDone         7
#define StateFastSearch   8
#define StateFastRetrace  9
#define StatePreHomeMove  10
HomingState = StateIdle

; Homing Status P Variable
#define HomingStatus      P1201
#define StatusDone        0
#define StatusHoming      1
#define StatusAborted     2
#define StatusTimeout     3
#define StatusFFErr       4
#define StatusLimit       5
#define StatusIncomplete  6
#define StatusInvalid     7
#define StatusPaused      8
#define StatusDebugHoming 9
HomingStatus = StatusDone

; Homing Group P Variable
#define HomingGroup       P1202
HomingGroup = 0

; Homing Group Backup P Variable
#define HomingBackupGroup P1203
HomingBackupGroup = 0

OPEN PLC12 CLEAR

if (HomingStatus != StatusHoming)
and (HomingStatus != StatusDebugHoming)
	HomingStatus = StatusHoming
endif

;---- Configuring State ----
HomingState=StateConfiguring
;Save the Homing group to px03
HomingBackupGroup=HomingGroup
;Save high soft limits to P variables px04..x19
P1204=i1413 P1205=i1513 P1206=i1213 P1207=i1313
;Save the low soft limits to P variables px20..x35
P1220=i1414 P1221=i1514 P1222=i1214 P1223=i1314
;Save the home capture flags to P variables px36..x51
MSR25,i912,P1236 MSR28,i912,P1237 MSR21,i912,P1238 MSR24,i912,P1239
;If any are zero then there is probably a macro error
if (P1236=0 or P1237=0 or P1238=0 or P1239=0)
	HomingStatus=StatusInvalid
endif
;Store 'not flag' to use in moving off a flag in P variables px52..x67
P1252=P1236^$C P1253=P1237^$C P1254=P1238^$C P1255=P1239^$C
;Save the limit flags to P variables px68..x83
P1268=i1424 P1269=i1524 P1270=i1224 P1271=i1324
;Save the current position to P variables px84..x99
P1284=M1462 P1285=M1562 P1286=M1262 P1287=M1362
;Clear the soft limits
i1413=0 i1513=0 i1213=0 i1313=0
i1414=0 i1514=0 i1214=0 i1314=0

if (HomingBackupGroup = 1 or HomingBackupGroup = 2)
and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	HomingGroup=2

	;Clear home flags
	m1445=0 m1545=0
	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- FastSearch State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateFastSearch
		; Execute the move commands
				m1472=100000000*(i1423/ABS(i1423)) 		m1572=100000000*(i1523/ABS(i1523))
		cmd "#14J^*^0 #15J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m1440&m1540=0) ; At least one motor should not be In Position
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		P1284=(P1284-M1462)/(I1408*32)+0-(i1426/16)
		P1285=(P1285-M1562)/(I1508*32)+0-(i1526/16)
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- FastRetrace State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateFastRetrace
		; Execute the move commands
		MSW25,i912,P1252 MSW28,i912,P1253 		m1472=100000000*(-i1423/ABS(i1423)) 		m1572=100000000*(-i1523/ABS(i1523))
		cmd "#14J^*^0 #15J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m1440&m1540=0) ; At least one motor should not be In Position
		and (m1442|m1542 = 0) ; Following error check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m1442|m1542 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Check if any limits need disabling ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		;Save the user home flags to P variables px52..x67
		;NOTE: this overwrites inverse flag (ran out of P vars), so can't use inverse flag after this point
			MSR25,i913,P1252 MSR28,i913,P1253
		; if capture on flag, and flag high, then we need to disable limits
		if (P1236&2=2 and P1236&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P1252=1 and i1423>0 and i1426<1)
			or (P1252=2 and i1423<0 and i1426>-1)
				i1424=i1424 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
		; if capture on flag, and flag high, then we need to disable limits
		if (P1237&2=2 and P1237&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P1253=1 and i1523>0 and i1526<1)
			or (P1253=2 and i1523<0 and i1526>-1)
				i1524=i1524 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- Homing State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateHoming
		; Execute the move commands
		MSW25,i912,P1236 MSW28,i912,P1237
		cmd "#14hm #15hm"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m1440&m1540=0) ; At least one motor should not be In Position
		and (m1442|m1542 = 0) ; Following error check
		and (m1430|m1530 = 0) ; Limit check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m1442|m1542 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (m1430|m1530 != 0) ; Limit check failed
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Restore limits if needed ----
	;Restore the limit flags to P variables px68..x83
	i1424=P1268 i1524=P1269

	;---- Check if all motors have homed ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	and (m1445&m1545=0)
		HomingStatus=StatusIncomplete
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- PostHomeMove State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StatePostHomeMove
		; Execute the move commands
		m1472=P1284 m1572=P1285
		cmd "#14J=* #15J=*"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m1440&m1540=0) ; At least one motor should not be In Position
		and (m1442|m1542 = 0) ; Following error check
		and (m1430|m1530 = 0) ; Limit check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m1442|m1542 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (m1430|m1530 != 0) ; Limit check failed
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

endif

if (HomingBackupGroup = 1 or HomingBackupGroup = 3)
and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	HomingGroup=3

	;Clear home flags
	m1245=0 m1345=0
	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- FastSearch State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateFastSearch
		; Execute the move commands
				m1272=100000000*(i1223/ABS(i1223)) 		m1372=100000000*(i1323/ABS(i1323))
		cmd "#12J^*^0 #13J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m1240&m1340=0) ; At least one motor should not be In Position
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Store the difference between current pos and start pos ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		P1286=(P1286-M1262)/(I1208*32)+0-(i1226/16)
		P1287=(P1287-M1362)/(I1308*32)+0-(i1326/16)
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- FastRetrace State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateFastRetrace
		; Execute the move commands
		MSW21,i912,P1254 MSW24,i912,P1255 		m1272=100000000*(-i1223/ABS(i1223)) 		m1372=100000000*(-i1323/ABS(i1323))
		cmd "#12J^*^0 #13J^*^0"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m1240&m1340=0) ; At least one motor should not be In Position
		and (m1242|m1342 = 0) ; Following error check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m1242|m1342 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Check if any limits need disabling ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		;Save the user home flags to P variables px52..x67
		;NOTE: this overwrites inverse flag (ran out of P vars), so can't use inverse flag after this point
			MSR21,i913,P1254 MSR24,i913,P1255
		; if capture on flag, and flag high, then we need to disable limits
		if (P1238&2=2 and P1238&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P1254=1 and i1223>0 and i1226<1)
			or (P1254=2 and i1223<0 and i1226>-1)
				i1224=i1224 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
		; if capture on flag, and flag high, then we need to disable limits
		if (P1239&2=2 and P1239&8=0)
			; ix23 (h_vel) should be opposite to ix26 (h_off) and in direction of home flag
			if (P1255=1 and i1323>0 and i1326<1)
			or (P1255=2 and i1323<0 and i1326>-1)
				i1324=i1324 | $20000
			else
				; if it isn't then set it into invalid error
				HomingStatus=StatusInvalid
			endif
		endif
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- Homing State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StateHoming
		; Execute the move commands
		MSW21,i912,P1238 MSW24,i912,P1239
		cmd "#12hm #13hm"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m1240&m1340=0) ; At least one motor should not be In Position
		and (m1242|m1342 = 0) ; Following error check
		and (m1230|m1330 = 0) ; Limit check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m1242|m1342 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (m1230|m1330 != 0) ; Limit check failed
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

	;---- Restore limits if needed ----
	;Restore the limit flags to P variables px68..x83
	i1224=P1270 i1324=P1271

	;---- Check if all motors have homed ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	and (m1245&m1345=0)
		HomingStatus=StatusIncomplete
	endif

	; Wait for user to tell us to continue if in debug
	if (HomingStatus = StatusDebugHoming)
		HomingStatus = StatusPaused
		while (HomingStatus = StatusPaused)
		endw
	endif

	;---- PostHomeMove State ----
	if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
		HomingState=StatePostHomeMove
		; Execute the move commands
		m1272=P1286 m1372=P1287
		cmd "#12J=* #13J=*"
		; Wait for the move to complete
		timer = 20 MilliSeconds ; Small delay to start moving
		while (timer > 0)
		endw
		timer = 600000 MilliSeconds ; Now start checking the conditions
		while (m1240&m1340=0) ; At least one motor should not be In Position
		and (m1242|m1342 = 0) ; Following error check
		and (m1230|m1330 = 0) ; Limit check
		and (timer > 0) ; Check for timeout
		and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming) ; Check that we didn't abort
		endw
		; Check why we left the while loop
		if (m1242|m1342 != 0) ; Following error check failed
			HomingStatus = StatusFFErr
		endif
		if (m1230|m1330 != 0) ; Limit check failed
			HomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			HomingStatus = StatusTimeout
		endif
	endif

endif

;---- Done ----
if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
	;If we've got this far without failing, set status and state done
	HomingStatus=StatusDone
	HomingState=StateDone
	;Restore the homing group from px03
	HomingGroup=HomingBackupGroup
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
if (m1442=0)
	cmd "#14J/"
endif
if (m1542=0)
	cmd "#15J/"
endif
if (m1242=0)
	cmd "#12J/"
endif
if (m1342=0)
	cmd "#13J/"
endif
;Restore the high soft limits from P variables px04..x19
i1413=P1204 i1513=P1205 i1213=P1206 i1313=P1207
;Restore the low soft limits from P variables px20..x35
i1414=P1220 i1514=P1221 i1214=P1222 i1314=P1223
;Restore the home capture flags from P variables px36..x51
MSW25,i912,P1236 MSW28,i912,P1237 MSW21,i912,P1238 MSW24,i912,P1239
;Restore the limit flags to P variables px68..x83
i1424=P1268 i1524=P1269 i1224=P1270 i1324=P1271

DISABLE PLC12
CLOSE
