# coding: utf-8

"""
    Selling Partner API for Retail Procurement Orders

    The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class OrderAcknowledgement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'purchase_order_number': 'str',
        'selling_party': 'PartyIdentification',
        'acknowledgement_date': 'datetime',
        'items': 'List[OrderAcknowledgementItem]',
    }

    attribute_map = {
        'purchase_order_number': 'purchaseOrderNumber',
        'selling_party': 'sellingParty',
        'acknowledgement_date': 'acknowledgementDate',
        'items': 'items',
    }

    def __init__(self, purchase_order_number=None, selling_party=None, acknowledgement_date=None, items=None, _configuration=None):  # noqa: E501
        """OrderAcknowledgement - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._purchase_order_number = None
        self._selling_party = None
        self._acknowledgement_date = None
        self._items = None
        self.discriminator = None

        self.purchase_order_number = purchase_order_number
        self.selling_party = selling_party
        self.acknowledgement_date = acknowledgement_date
        self.items = items

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this OrderAcknowledgement.  # noqa: E501

        The purchase order number. Formatting Notes: 8-character alpha-numeric code.  # noqa: E501

        :return: The purchase_order_number of this OrderAcknowledgement.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this OrderAcknowledgement.

        The purchase order number. Formatting Notes: 8-character alpha-numeric code.  # noqa: E501

        :param purchase_order_number: The purchase_order_number of this OrderAcknowledgement.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and purchase_order_number is None:
            raise ValueError("Invalid value for `purchase_order_number`, must not be `None`")  # noqa: E501

        self._purchase_order_number = purchase_order_number

    @property
    def selling_party(self):
        """Gets the selling_party of this OrderAcknowledgement.  # noqa: E501


        :return: The selling_party of this OrderAcknowledgement.  # noqa: E501
        :rtype: PartyIdentification
        """
        return self._selling_party

    @selling_party.setter
    def selling_party(self, selling_party):
        """Sets the selling_party of this OrderAcknowledgement.


        :param selling_party: The selling_party of this OrderAcknowledgement.  # noqa: E501
        :type: PartyIdentification
        """
        if self._configuration.client_side_validation and selling_party is None:
            raise ValueError("Invalid value for `selling_party`, must not be `None`")  # noqa: E501

        self._selling_party = selling_party

    @property
    def acknowledgement_date(self):
        """Gets the acknowledgement_date of this OrderAcknowledgement.  # noqa: E501

        The date and time when the purchase order is acknowledged, in ISO-8601 date/time format.  # noqa: E501

        :return: The acknowledgement_date of this OrderAcknowledgement.  # noqa: E501
        :rtype: datetime
        """
        return self._acknowledgement_date

    @acknowledgement_date.setter
    def acknowledgement_date(self, acknowledgement_date):
        """Sets the acknowledgement_date of this OrderAcknowledgement.

        The date and time when the purchase order is acknowledged, in ISO-8601 date/time format.  # noqa: E501

        :param acknowledgement_date: The acknowledgement_date of this OrderAcknowledgement.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and acknowledgement_date is None:
            raise ValueError("Invalid value for `acknowledgement_date`, must not be `None`")  # noqa: E501

        self._acknowledgement_date = acknowledgement_date

    @property
    def items(self):
        """Gets the items of this OrderAcknowledgement.  # noqa: E501

        A list of the items being acknowledged with associated details.  # noqa: E501

        :return: The items of this OrderAcknowledgement.  # noqa: E501
        :rtype: List[OrderAcknowledgementItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrderAcknowledgement.

        A list of the items being acknowledged with associated details.  # noqa: E501

        :param items: The items of this OrderAcknowledgement.  # noqa: E501
        :type: List[OrderAcknowledgementItem]
        """
        if self._configuration.client_side_validation and items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderAcknowledgement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderAcknowledgement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderAcknowledgement):
            return True

        return self.to_dict() != other.to_dict()
