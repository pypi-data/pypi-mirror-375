---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/cross_module_inheritance/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
auth = _cribo.types.SimpleNamespace(__name__='auth')
"""First auth module with HTTPBasicAuth."""
class HTTPBasicAuth_2:
    """Basic HTTP authentication."""

    def __init__(self, username, password):
        self.username = username
        self.password = password

    def __repr__(self):
        return f"<HTTPBasicAuth user={self.username}>"
HTTPBasicAuth_2.__module__ = 'auth'
HTTPBasicAuth_2.__name__ = 'HTTPBasicAuth'
HTTPBasicAuth_2.__qualname__ = 'HTTPBasicAuth'
auth.HTTPBasicAuth = HTTPBasicAuth_2
another_auth = _cribo.types.SimpleNamespace(__name__='another_auth')
"""Another auth module with HTTPBasicAuth to create collision."""
class HTTPBasicAuth_1:
    """Different HTTPBasicAuth implementation."""

    def __init__(self, token):
        self.token = token

    def __repr__(self):
        return f"<TokenAuth token={self.token[:4]}...>"
HTTPBasicAuth_1.__module__ = 'another_auth'
HTTPBasicAuth_1.__name__ = 'HTTPBasicAuth'
HTTPBasicAuth_1.__qualname__ = 'HTTPBasicAuth'
another_auth.HTTPBasicAuth = HTTPBasicAuth_1
proxy = _cribo.types.SimpleNamespace(__name__='proxy')
"""Proxy module that inherits from HTTPBasicAuth in a different module.\n\nThis is the key part - proxy.py imports HTTPBasicAuth from auth.py\nand creates a class that inherits from it. When HTTPBasicAuth gets\nrenamed due to collision, this inheritance needs to be updated.\n"""
HTTPBasicAuth = auth.HTTPBasicAuth
class HTTPProxyAuth(HTTPBasicAuth):
    """Proxy authentication that inherits from HTTPBasicAuth."""

    def __init__(self, username, password):
        super().__init__(username, password)
        self.proxy_info = "proxy"

    def __repr__(self):
        return f"<HTTPProxyAuth user={self.username}>"
HTTPProxyAuth.__module__ = 'proxy'
proxy.HTTPProxyAuth = HTTPProxyAuth
"""Test cross-module inheritance with symbol collision.\n\nThis reproduces the exact error from requests where HTTPBasicAuth\nis renamed to HTTPBasicAuth_1 in one module but another module\ntries to inherit from HTTPBasicAuth.\n"""
proxy = HTTPProxyAuth("user", "pass")
print(f"Created proxy auth: {proxy}")
basic = HTTPBasicAuth("user2", "pass2")
print(f"Created basic auth: {basic}")
print("âœ“ All tests passed")
