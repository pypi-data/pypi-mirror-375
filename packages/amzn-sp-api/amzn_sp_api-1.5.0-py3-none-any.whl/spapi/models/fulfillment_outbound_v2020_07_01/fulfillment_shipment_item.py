# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FulfillmentShipmentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seller_sku': 'str',
        'seller_fulfillment_order_item_id': 'str',
        'quantity': 'int',
        'package_number': 'int',
        'serial_number': 'str',
        'manufacturer_lot_codes': 'List[str]',
    }

    attribute_map = {
        'seller_sku': 'sellerSku',
        'seller_fulfillment_order_item_id': 'sellerFulfillmentOrderItemId',
        'quantity': 'quantity',
        'package_number': 'packageNumber',
        'serial_number': 'serialNumber',
        'manufacturer_lot_codes': 'manufacturerLotCodes',
    }

    def __init__(self, seller_sku=None, seller_fulfillment_order_item_id=None, quantity=None, package_number=None, serial_number=None, manufacturer_lot_codes=None, _configuration=None):  # noqa: E501
        """FulfillmentShipmentItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._seller_sku = None
        self._seller_fulfillment_order_item_id = None
        self._quantity = None
        self._package_number = None
        self._serial_number = None
        self._manufacturer_lot_codes = None
        self.discriminator = None

        self.seller_sku = seller_sku
        self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id
        self.quantity = quantity
        if package_number is not None:
            self.package_number = package_number
        if serial_number is not None:
            self.serial_number = serial_number
        if manufacturer_lot_codes is not None:
            self.manufacturer_lot_codes = manufacturer_lot_codes

    @property
    def seller_sku(self):
        """Gets the seller_sku of this FulfillmentShipmentItem.  # noqa: E501

        The seller SKU of the item.  # noqa: E501

        :return: The seller_sku of this FulfillmentShipmentItem.  # noqa: E501
        :rtype: str
        """
        return self._seller_sku

    @seller_sku.setter
    def seller_sku(self, seller_sku):
        """Sets the seller_sku of this FulfillmentShipmentItem.

        The seller SKU of the item.  # noqa: E501

        :param seller_sku: The seller_sku of this FulfillmentShipmentItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and seller_sku is None:
            raise ValueError("Invalid value for `seller_sku`, must not be `None`")  # noqa: E501

        self._seller_sku = seller_sku

    @property
    def seller_fulfillment_order_item_id(self):
        """Gets the seller_fulfillment_order_item_id of this FulfillmentShipmentItem.  # noqa: E501

        The fulfillment order item identifier that the seller created and submitted with a call to the `createFulfillmentOrder` operation.  # noqa: E501

        :return: The seller_fulfillment_order_item_id of this FulfillmentShipmentItem.  # noqa: E501
        :rtype: str
        """
        return self._seller_fulfillment_order_item_id

    @seller_fulfillment_order_item_id.setter
    def seller_fulfillment_order_item_id(self, seller_fulfillment_order_item_id):
        """Sets the seller_fulfillment_order_item_id of this FulfillmentShipmentItem.

        The fulfillment order item identifier that the seller created and submitted with a call to the `createFulfillmentOrder` operation.  # noqa: E501

        :param seller_fulfillment_order_item_id: The seller_fulfillment_order_item_id of this FulfillmentShipmentItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and seller_fulfillment_order_item_id is None:
            raise ValueError("Invalid value for `seller_fulfillment_order_item_id`, must not be `None`")  # noqa: E501

        self._seller_fulfillment_order_item_id = seller_fulfillment_order_item_id

    @property
    def quantity(self):
        """Gets the quantity of this FulfillmentShipmentItem.  # noqa: E501

        The item quantity.  # noqa: E501

        :return: The quantity of this FulfillmentShipmentItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this FulfillmentShipmentItem.

        The item quantity.  # noqa: E501

        :param quantity: The quantity of this FulfillmentShipmentItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def package_number(self):
        """Gets the package_number of this FulfillmentShipmentItem.  # noqa: E501

        An identifier for the package that contains the item quantity.  # noqa: E501

        :return: The package_number of this FulfillmentShipmentItem.  # noqa: E501
        :rtype: int
        """
        return self._package_number

    @package_number.setter
    def package_number(self, package_number):
        """Sets the package_number of this FulfillmentShipmentItem.

        An identifier for the package that contains the item quantity.  # noqa: E501

        :param package_number: The package_number of this FulfillmentShipmentItem.  # noqa: E501
        :type: int
        """

        self._package_number = package_number

    @property
    def serial_number(self):
        """Gets the serial_number of this FulfillmentShipmentItem.  # noqa: E501

        The serial number of the shipped item.  # noqa: E501

        :return: The serial_number of this FulfillmentShipmentItem.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this FulfillmentShipmentItem.

        The serial number of the shipped item.  # noqa: E501

        :param serial_number: The serial_number of this FulfillmentShipmentItem.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def manufacturer_lot_codes(self):
        """Gets the manufacturer_lot_codes of this FulfillmentShipmentItem.  # noqa: E501

        String list  # noqa: E501

        :return: The manufacturer_lot_codes of this FulfillmentShipmentItem.  # noqa: E501
        :rtype: List[str]
        """
        return self._manufacturer_lot_codes

    @manufacturer_lot_codes.setter
    def manufacturer_lot_codes(self, manufacturer_lot_codes):
        """Sets the manufacturer_lot_codes of this FulfillmentShipmentItem.

        String list  # noqa: E501

        :param manufacturer_lot_codes: The manufacturer_lot_codes of this FulfillmentShipmentItem.  # noqa: E501
        :type: List[str]
        """

        self._manufacturer_lot_codes = manufacturer_lot_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FulfillmentShipmentItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FulfillmentShipmentItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FulfillmentShipmentItem):
            return True

        return self.to_dict() != other.to_dict()
