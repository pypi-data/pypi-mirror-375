# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.coordinates import Coordinates
from pyevr.openapi_client.models.measurement_act import MeasurementAct
from pyevr.openapi_client.models.owner import Owner
from pyevr.openapi_client.models.receiver import Receiver
from pyevr.openapi_client.models.shipment import Shipment
from pyevr.openapi_client.models.timber_report import TimberReport
from pyevr.openapi_client.models.transport import Transport
from pyevr.openapi_client.models.waybill_authorization import WaybillAuthorization
from pyevr.openapi_client.models.waybill_note import WaybillNote
from pyevr.openapi_client.models.waybill_place_of_delivery import WaybillPlaceOfDelivery
from pyevr.openapi_client.models.waybill_status import WaybillStatus


class Waybill(BaseModel):
    """
    Waybill
    """  # noqa: E501

    owner: Owner
    transport: Transport
    receiver: Receiver
    place_of_delivery: WaybillPlaceOfDelivery = Field(alias="placeOfDelivery")
    comment: Optional[Annotated[str, Field(strict=True, max_length=400)]] = Field(
        default=None, description="Märkused/lisainfo"
    )
    departure_time: datetime = Field(
        description="Väljasõidu aeg", alias="departureTime"
    )
    submission_time: datetime = Field(
        description="Veoselehe EVR-i saatmise aeg", alias="submissionTime"
    )
    shipments: Annotated[List[Shipment], Field(max_length=25)] = Field(
        description="Lähetatud veose andmed"
    )
    pre_journey_mileage: Optional[
        Annotated[int, Field(le=100000, strict=True, ge=0)]
    ] = Field(
        default=None, description="Ettesõidu kilometraaž", alias="preJourneyMileage"
    )
    user_custom_data: Optional[Any] = Field(
        default=None,
        description="Api kasutaja poolt kohandatavad andmed",
        alias="userCustomData",
    )
    mass: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Autorongi mass tonnides"
    )
    transport_order: Optional[Annotated[str, Field(strict=True, max_length=13)]] = (
        Field(default=None, description="Veotellimuse number", alias="transportOrder")
    )
    submission_coordinates: Optional[Coordinates] = Field(
        default=None, alias="submissionCoordinates"
    )
    number: Optional[StrictStr] = Field(default=None, description="Veoselehe number")
    status: Optional[WaybillStatus] = None
    creation_time: Optional[datetime] = Field(
        default=None, description="Loomise aeg", alias="creationTime"
    )
    cancellation_time: Optional[datetime] = Field(
        default=None,
        description="Tühistamise aeg (kui veoseleht on tühistatud)",
        alias="cancellationTime",
    )
    cancellation_reason: Optional[StrictStr] = Field(
        default=None,
        description="Tühistamise põhjus (kui veoseleht on tühistatud)",
        alias="cancellationReason",
    )
    cancellation_coordinates: Optional[Coordinates] = Field(
        default=None, alias="cancellationCoordinates"
    )
    total_journey_mileage: Optional[StrictInt] = Field(
        default=None,
        description="Kilometraaž koormaga (kui veoselehel on vedu lõpetatud)",
        alias="totalJourneyMileage",
    )
    unloading_comment: Optional[StrictStr] = Field(
        default=None,
        description="Mahalaadimise kommentaar (kui veoselehel on vedu lõpetatud)",
        alias="unloadingComment",
    )
    unloading_time: Optional[datetime] = Field(
        default=None,
        description="Mahalaadimise aeg (kui veoselehel on vedu lõpetatud)",
        alias="unloadingTime",
    )
    unloading_coordinates: Optional[Coordinates] = Field(
        default=None, alias="unloadingCoordinates"
    )
    finishing_time: Optional[datetime] = Field(
        default=None,
        description="Veoselehe lõpetamise aeg (kui veoseleht on lõpetatud)",
        alias="finishingTime",
    )
    last_modification_time: Optional[datetime] = Field(
        default=None,
        description="Veoselehe viimase muutmise aeg",
        alias="lastModificationTime",
    )
    notes: Optional[List[WaybillNote]] = Field(
        default=None, description="Veoselehe märkused"
    )
    waybill_authorizations: Optional[List[WaybillAuthorization]] = Field(
        default=None, description="Veoselehe volitused", alias="waybillAuthorizations"
    )
    waybill_latest_measurements: Optional[MeasurementAct] = Field(
        default=None, alias="waybillLatestMeasurements"
    )
    timber_report: Optional[TimberReport] = Field(default=None, alias="timberReport")
    __properties: ClassVar[List[str]] = [
        "owner",
        "transport",
        "receiver",
        "placeOfDelivery",
        "comment",
        "departureTime",
        "submissionTime",
        "shipments",
        "preJourneyMileage",
        "userCustomData",
        "mass",
        "transportOrder",
        "submissionCoordinates",
        "number",
        "status",
        "creationTime",
        "cancellationTime",
        "cancellationReason",
        "cancellationCoordinates",
        "totalJourneyMileage",
        "unloadingComment",
        "unloadingTime",
        "unloadingCoordinates",
        "finishingTime",
        "lastModificationTime",
        "notes",
        "waybillAuthorizations",
        "waybillLatestMeasurements",
        "timberReport",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Waybill from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict["owner"] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transport
        if self.transport:
            _dict["transport"] = self.transport.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver
        if self.receiver:
            _dict["receiver"] = self.receiver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of place_of_delivery
        if self.place_of_delivery:
            _dict["placeOfDelivery"] = self.place_of_delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipments (list)
        _items = []
        if self.shipments:
            for _item_shipments in self.shipments:
                if _item_shipments:
                    _items.append(_item_shipments.to_dict())
            _dict["shipments"] = _items
        # override the default output from pydantic by calling `to_dict()` of submission_coordinates
        if self.submission_coordinates:
            _dict["submissionCoordinates"] = self.submission_coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cancellation_coordinates
        if self.cancellation_coordinates:
            _dict["cancellationCoordinates"] = self.cancellation_coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unloading_coordinates
        if self.unloading_coordinates:
            _dict["unloadingCoordinates"] = self.unloading_coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item_notes in self.notes:
                if _item_notes:
                    _items.append(_item_notes.to_dict())
            _dict["notes"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in waybill_authorizations (list)
        _items = []
        if self.waybill_authorizations:
            for _item_waybill_authorizations in self.waybill_authorizations:
                if _item_waybill_authorizations:
                    _items.append(_item_waybill_authorizations.to_dict())
            _dict["waybillAuthorizations"] = _items
        # override the default output from pydantic by calling `to_dict()` of waybill_latest_measurements
        if self.waybill_latest_measurements:
            _dict["waybillLatestMeasurements"] = (
                self.waybill_latest_measurements.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of timber_report
        if self.timber_report:
            _dict["timberReport"] = self.timber_report.to_dict()
        # set to None if pre_journey_mileage (nullable) is None
        # and model_fields_set contains the field
        if (
            self.pre_journey_mileage is None
            and "pre_journey_mileage" in self.model_fields_set
        ):
            _dict["preJourneyMileage"] = None

        # set to None if user_custom_data (nullable) is None
        # and model_fields_set contains the field
        if (
            self.user_custom_data is None
            and "user_custom_data" in self.model_fields_set
        ):
            _dict["userCustomData"] = None

        # set to None if mass (nullable) is None
        # and model_fields_set contains the field
        if self.mass is None and "mass" in self.model_fields_set:
            _dict["mass"] = None

        # set to None if cancellation_time (nullable) is None
        # and model_fields_set contains the field
        if (
            self.cancellation_time is None
            and "cancellation_time" in self.model_fields_set
        ):
            _dict["cancellationTime"] = None

        # set to None if cancellation_reason (nullable) is None
        # and model_fields_set contains the field
        if (
            self.cancellation_reason is None
            and "cancellation_reason" in self.model_fields_set
        ):
            _dict["cancellationReason"] = None

        # set to None if total_journey_mileage (nullable) is None
        # and model_fields_set contains the field
        if (
            self.total_journey_mileage is None
            and "total_journey_mileage" in self.model_fields_set
        ):
            _dict["totalJourneyMileage"] = None

        # set to None if unloading_comment (nullable) is None
        # and model_fields_set contains the field
        if (
            self.unloading_comment is None
            and "unloading_comment" in self.model_fields_set
        ):
            _dict["unloadingComment"] = None

        # set to None if unloading_time (nullable) is None
        # and model_fields_set contains the field
        if self.unloading_time is None and "unloading_time" in self.model_fields_set:
            _dict["unloadingTime"] = None

        # set to None if finishing_time (nullable) is None
        # and model_fields_set contains the field
        if self.finishing_time is None and "finishing_time" in self.model_fields_set:
            _dict["finishingTime"] = None

        # set to None if last_modification_time (nullable) is None
        # and model_fields_set contains the field
        if (
            self.last_modification_time is None
            and "last_modification_time" in self.model_fields_set
        ):
            _dict["lastModificationTime"] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict["notes"] = None

        # set to None if waybill_authorizations (nullable) is None
        # and model_fields_set contains the field
        if (
            self.waybill_authorizations is None
            and "waybill_authorizations" in self.model_fields_set
        ):
            _dict["waybillAuthorizations"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Waybill from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "owner": Owner.from_dict(obj["owner"])
                if obj.get("owner") is not None
                else None,
                "transport": Transport.from_dict(obj["transport"])
                if obj.get("transport") is not None
                else None,
                "receiver": Receiver.from_dict(obj["receiver"])
                if obj.get("receiver") is not None
                else None,
                "placeOfDelivery": WaybillPlaceOfDelivery.from_dict(
                    obj["placeOfDelivery"]
                )
                if obj.get("placeOfDelivery") is not None
                else None,
                "comment": obj.get("comment"),
                "departureTime": obj.get("departureTime"),
                "submissionTime": obj.get("submissionTime"),
                "shipments": [Shipment.from_dict(_item) for _item in obj["shipments"]]
                if obj.get("shipments") is not None
                else None,
                "preJourneyMileage": obj.get("preJourneyMileage"),
                "userCustomData": obj.get("userCustomData"),
                "mass": obj.get("mass"),
                "transportOrder": obj.get("transportOrder"),
                "submissionCoordinates": Coordinates.from_dict(
                    obj["submissionCoordinates"]
                )
                if obj.get("submissionCoordinates") is not None
                else None,
                "number": obj.get("number"),
                "status": obj.get("status"),
                "creationTime": obj.get("creationTime"),
                "cancellationTime": obj.get("cancellationTime"),
                "cancellationReason": obj.get("cancellationReason"),
                "cancellationCoordinates": Coordinates.from_dict(
                    obj["cancellationCoordinates"]
                )
                if obj.get("cancellationCoordinates") is not None
                else None,
                "totalJourneyMileage": obj.get("totalJourneyMileage"),
                "unloadingComment": obj.get("unloadingComment"),
                "unloadingTime": obj.get("unloadingTime"),
                "unloadingCoordinates": Coordinates.from_dict(
                    obj["unloadingCoordinates"]
                )
                if obj.get("unloadingCoordinates") is not None
                else None,
                "finishingTime": obj.get("finishingTime"),
                "lastModificationTime": obj.get("lastModificationTime"),
                "notes": [WaybillNote.from_dict(_item) for _item in obj["notes"]]
                if obj.get("notes") is not None
                else None,
                "waybillAuthorizations": [
                    WaybillAuthorization.from_dict(_item)
                    for _item in obj["waybillAuthorizations"]
                ]
                if obj.get("waybillAuthorizations") is not None
                else None,
                "waybillLatestMeasurements": MeasurementAct.from_dict(
                    obj["waybillLatestMeasurements"]
                )
                if obj.get("waybillLatestMeasurements") is not None
                else None,
                "timberReport": TimberReport.from_dict(obj["timberReport"])
                if obj.get("timberReport") is not None
                else None,
            }
        )
        return _obj
