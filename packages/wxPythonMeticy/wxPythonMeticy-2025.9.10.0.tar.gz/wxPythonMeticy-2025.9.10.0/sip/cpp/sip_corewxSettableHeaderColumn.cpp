/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.12.0
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"
        #include <wx/headercol.h>
        #include <wx/bmpbndl.h>
        #include <wx/bitmap.h>


class sipwxSettableHeaderColumn : public ::wxSettableHeaderColumn
{
public:
    sipwxSettableHeaderColumn();
    sipwxSettableHeaderColumn(const ::wxSettableHeaderColumn&);
    virtual ~sipwxSettableHeaderColumn();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void SetSortOrder(bool) SIP_OVERRIDE;
    void SetHidden(bool) SIP_OVERRIDE;
    void SetReorderable(bool) SIP_OVERRIDE;
    void SetSortable(bool) SIP_OVERRIDE;
    void SetResizeable(bool) SIP_OVERRIDE;
    void SetFlags(int) SIP_OVERRIDE;
    void SetAlignment(::wxAlignment) SIP_OVERRIDE;
    void SetMinWidth(int) SIP_OVERRIDE;
    void SetWidth(int) SIP_OVERRIDE;
    void SetBitmap(const ::wxBitmapBundle&) SIP_OVERRIDE;
    void SetTitle(const ::wxString&) SIP_OVERRIDE;
    ::wxString GetTitle() const SIP_OVERRIDE;
    ::wxBitmap GetBitmap() const SIP_OVERRIDE;
    ::wxBitmapBundle GetBitmapBundle() const SIP_OVERRIDE;
    int GetWidth() const SIP_OVERRIDE;
    int GetMinWidth() const SIP_OVERRIDE;
    ::wxAlignment GetAlignment() const SIP_OVERRIDE;
    int GetFlags() const SIP_OVERRIDE;
    bool IsResizeable() const SIP_OVERRIDE;
    bool IsSortable() const SIP_OVERRIDE;
    bool IsReorderable() const SIP_OVERRIDE;
    bool IsHidden() const SIP_OVERRIDE;
    bool IsSortKey() const SIP_OVERRIDE;
    bool IsSortOrderAscending() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxSettableHeaderColumn(const sipwxSettableHeaderColumn &);
    sipwxSettableHeaderColumn &operator = (const sipwxSettableHeaderColumn &);

    char sipPyMethods[24];
};

sipwxSettableHeaderColumn::sipwxSettableHeaderColumn(): ::wxSettableHeaderColumn(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxSettableHeaderColumn::sipwxSettableHeaderColumn(const ::wxSettableHeaderColumn& a0): ::wxSettableHeaderColumn(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxSettableHeaderColumn::~sipwxSettableHeaderColumn()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxSettableHeaderColumn::SetSortOrder(bool ascending)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], &sipPySelf, sipName_SettableHeaderColumn, sipName_SetSortOrder);

    if (!sipMeth)
        return;

    extern void sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth, ascending);
}

void sipwxSettableHeaderColumn::SetHidden(bool hidden)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_SetHidden);

    if (!sipMeth)
    {
        ::wxSettableHeaderColumn::SetHidden(hidden);
        return;
    }

    extern void sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth, hidden);
}

void sipwxSettableHeaderColumn::SetReorderable(bool reorderable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_SetReorderable);

    if (!sipMeth)
    {
        ::wxSettableHeaderColumn::SetReorderable(reorderable);
        return;
    }

    extern void sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth, reorderable);
}

void sipwxSettableHeaderColumn::SetSortable(bool sortable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_SetSortable);

    if (!sipMeth)
    {
        ::wxSettableHeaderColumn::SetSortable(sortable);
        return;
    }

    extern void sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth, sortable);
}

void sipwxSettableHeaderColumn::SetResizeable(bool resizable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_SetResizeable);

    if (!sipMeth)
    {
        ::wxSettableHeaderColumn::SetResizeable(resizable);
        return;
    }

    extern void sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth, resizable);
}

void sipwxSettableHeaderColumn::SetFlags(int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], &sipPySelf, sipName_SettableHeaderColumn, sipName_SetFlags);

    if (!sipMeth)
        return;

    extern void sipVH__core_113(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_113(sipGILState, 0, sipPySelf, sipMeth, flags);
}

void sipwxSettableHeaderColumn::SetAlignment(::wxAlignment align)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], &sipPySelf, sipName_SettableHeaderColumn, sipName_SetAlignment);

    if (!sipMeth)
        return;

    extern void sipVH__core_168(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, ::wxAlignment);

    sipVH__core_168(sipGILState, 0, sipPySelf, sipMeth, align);
}

void sipwxSettableHeaderColumn::SetMinWidth(int minWidth)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], &sipPySelf, sipName_SettableHeaderColumn, sipName_SetMinWidth);

    if (!sipMeth)
        return;

    extern void sipVH__core_113(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_113(sipGILState, 0, sipPySelf, sipMeth, minWidth);
}

void sipwxSettableHeaderColumn::SetWidth(int width)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], &sipPySelf, sipName_SettableHeaderColumn, sipName_SetWidth);

    if (!sipMeth)
        return;

    extern void sipVH__core_113(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_113(sipGILState, 0, sipPySelf, sipMeth, width);
}

void sipwxSettableHeaderColumn::SetBitmap(const ::wxBitmapBundle& bitmap)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], &sipPySelf, sipName_SettableHeaderColumn, sipName_SetBitmap);

    if (!sipMeth)
        return;

    extern void sipVH__core_167(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const ::wxBitmapBundle&);

    sipVH__core_167(sipGILState, 0, sipPySelf, sipMeth, bitmap);
}

void sipwxSettableHeaderColumn::SetTitle(const ::wxString& title)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], &sipPySelf, sipName_SettableHeaderColumn, sipName_SetTitle);

    if (!sipMeth)
        return;

    extern void sipVH__core_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const ::wxString&);

    sipVH__core_60(sipGILState, 0, sipPySelf, sipMeth, title);
}

::wxString sipwxSettableHeaderColumn::GetTitle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_SettableHeaderColumn, sipName_GetTitle);

    if (!sipMeth)
        return ::wxString();

    extern ::wxString sipVH__core_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_11(sipGILState, 0, sipPySelf, sipMeth);
}

::wxBitmap sipwxSettableHeaderColumn::GetBitmap() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[12]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_SettableHeaderColumn, sipName_GetBitmap);

    if (!sipMeth)
        return ::wxBitmap();

    extern ::wxBitmap sipVH__core_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_80(sipGILState, 0, sipPySelf, sipMeth);
}

::wxBitmapBundle sipwxSettableHeaderColumn::GetBitmapBundle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetBitmapBundle);

    if (!sipMeth)
        return ::wxSettableHeaderColumn::GetBitmapBundle();

    extern ::wxBitmapBundle sipVH__core_165(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_165(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxSettableHeaderColumn::GetWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_SettableHeaderColumn, sipName_GetWidth);

    if (!sipMeth)
        return 0;

    extern int sipVH__core_112(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_112(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxSettableHeaderColumn::GetMinWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_SettableHeaderColumn, sipName_GetMinWidth);

    if (!sipMeth)
        return 0;

    extern int sipVH__core_112(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_112(sipGILState, 0, sipPySelf, sipMeth);
}

::wxAlignment sipwxSettableHeaderColumn::GetAlignment() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_SettableHeaderColumn, sipName_GetAlignment);

    if (!sipMeth)
        return ::wxALIGN_INVALID;

    extern ::wxAlignment sipVH__core_166(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_166(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxSettableHeaderColumn::GetFlags() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_SettableHeaderColumn, sipName_GetFlags);

    if (!sipMeth)
        return 0;

    extern int sipVH__core_112(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_112(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsResizeable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsResizeable);

    if (!sipMeth)
        return ::wxSettableHeaderColumn::IsResizeable();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsSortable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[19]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsSortable);

    if (!sipMeth)
        return ::wxSettableHeaderColumn::IsSortable();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsReorderable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[20]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsReorderable);

    if (!sipMeth)
        return ::wxSettableHeaderColumn::IsReorderable();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsHidden() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[21]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsHidden);

    if (!sipMeth)
        return ::wxSettableHeaderColumn::IsHidden();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsSortKey() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[22]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_SettableHeaderColumn, sipName_IsSortKey);

    if (!sipMeth)
        return 0;

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsSortOrderAscending() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[23]), const_cast<sipSimpleWrapper **>(&sipPySelf), sipName_SettableHeaderColumn, sipName_IsSortOrderAscending);

    if (!sipMeth)
        return 0;

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetTitle, "SetTitle(title) -> None\n"
"\n"
"Set the text to display in the column header.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetTitle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetTitle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const ::wxString* title;
        int titleState = 0;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, sipType_wxString, &title, &titleState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetTitle);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTitle(*title);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title), sipType_wxString, titleState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetTitle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetBitmap, "SetBitmap(bitmap) -> None\n"
"\n"
"Set the bitmap to be displayed in the column header.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const ::wxBitmapBundle* bitmap;
        int bitmapState = 0;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, sipType_wxBitmapBundle, &bitmap, &bitmapState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetBitmap);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmap(*bitmap);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxBitmapBundle *>(bitmap), sipType_wxBitmapBundle, bitmapState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetWidth, "SetWidth(width) -> None\n"
"\n"
"Set the column width.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int width;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &width))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetWidth);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWidth(width);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetMinWidth, "SetMinWidth(minWidth) -> None\n"
"\n"
"Set the minimal column width.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetMinWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetMinWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int minWidth;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minWidth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &minWidth))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetMinWidth);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMinWidth(minWidth);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetMinWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetAlignment, "SetAlignment(align) -> None\n"
"\n"
"Set the alignment of the column header.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetAlignment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetAlignment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        ::wxAlignment align;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_align,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, sipType_wxAlignment, &align))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetAlignment);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAlignment(align);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetAlignment, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetFlags, "SetFlags(flags) -> None\n"
"\n"
"Set the column flags.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int flags;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetFlags);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlags(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_ChangeFlag, "ChangeFlag(flag, set) -> None\n"
"\n"
"Set or clear the given flag.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_ChangeFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_ChangeFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flag;
        bool set;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
            sipName_set,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bib", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flag, &set))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ChangeFlag(flag, set);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_ChangeFlag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetFlag, "SetFlag(flag) -> None\n"
"\n"
"Set the specified flag for the column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flag;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flag))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlag(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetFlag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_ClearFlag, "ClearFlag(flag) -> None\n"
"\n"
"Clear the specified flag for the column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_ClearFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_ClearFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flag;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flag))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearFlag(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_ClearFlag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_ToggleFlag, "ToggleFlag(flag) -> None\n"
"\n"
"Toggle the specified flag for the column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_ToggleFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_ToggleFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flag;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flag))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ToggleFlag(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_ToggleFlag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetResizeable, "SetResizeable(resizable) -> None\n"
"\n"
"Call this to enable or disable interactive resizing of the column by\n"
"the user.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetResizeable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetResizeable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool resizable;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_resizable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &resizable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxSettableHeaderColumn::SetResizeable(resizable) : sipCpp->SetResizeable(resizable));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetResizeable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetSortable, "SetSortable(sortable) -> None\n"
"\n"
"Allow clicking the column to sort the control contents by the field in\n"
"this column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetSortable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetSortable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool sortable;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sortable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &sortable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxSettableHeaderColumn::SetSortable(sortable) : sipCpp->SetSortable(sortable));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetSortable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetReorderable, "SetReorderable(reorderable) -> None\n"
"\n"
"Allow changing the column order by dragging it.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetReorderable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetReorderable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool reorderable;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_reorderable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &reorderable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxSettableHeaderColumn::SetReorderable(reorderable) : sipCpp->SetReorderable(reorderable));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetReorderable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetHidden, "SetHidden(hidden) -> None\n"
"\n"
"Hide or show the column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetHidden(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetHidden(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool hidden;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_hidden,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &hidden))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxSettableHeaderColumn::SetHidden(hidden) : sipCpp->SetHidden(hidden));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetHidden, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_UnsetAsSortKey, "UnsetAsSortKey() -> None\n"
"\n"
"Don't use this column for sorting.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_UnsetAsSortKey(PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_UnsetAsSortKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxSettableHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UnsetAsSortKey();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_UnsetAsSortKey, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetSortOrder, "SetSortOrder(ascending) -> None\n"
"\n"
"Sets this column as the sort key for the associated control.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetSortOrder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetSortOrder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool ascending;
        ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ascending,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &ascending))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetSortOrder);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSortOrder(ascending);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetSortOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_ToggleSortOrder, "ToggleSortOrder() -> None\n"
"\n"
"Inverses the sort order.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_ToggleSortOrder(PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_ToggleSortOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxSettableHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ToggleSortOrder();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_ToggleSortOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxSettableHeaderColumn(void *, const sipTypeDef *);}
static void *cast_wxSettableHeaderColumn(void *sipCppV, const sipTypeDef *targetType)
{
    ::wxSettableHeaderColumn *sipCpp = reinterpret_cast< ::wxSettableHeaderColumn *>(sipCppV);

    if (targetType == sipType_wxSettableHeaderColumn)
        return sipCppV;

    if (targetType == sipType_wxHeaderColumn)
        return static_cast< ::wxHeaderColumn *>(sipCpp);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxSettableHeaderColumn(void *, int);}
static void release_wxSettableHeaderColumn(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxSettableHeaderColumn *>(sipCppV);
    else
        delete reinterpret_cast< ::wxSettableHeaderColumn *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxSettableHeaderColumn(sipSimpleWrapper *);}
static void dealloc_wxSettableHeaderColumn(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxSettableHeaderColumn *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxSettableHeaderColumn(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxSettableHeaderColumn(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxSettableHeaderColumn(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxSettableHeaderColumn *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxSettableHeaderColumn();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const ::wxSettableHeaderColumn* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxSettableHeaderColumn, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxSettableHeaderColumn(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxSettableHeaderColumn[] = {{257, 255, 1}};


static PyMethodDef methods_wxSettableHeaderColumn[] = {
    {sipName_ChangeFlag, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_ChangeFlag), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_ChangeFlag},
    {sipName_ClearFlag, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_ClearFlag), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_ClearFlag},
    {sipName_SetAlignment, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetAlignment), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetAlignment},
    {sipName_SetBitmap, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetBitmap), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetBitmap},
    {sipName_SetFlag, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetFlag), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetFlag},
    {sipName_SetFlags, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetFlags), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetFlags},
    {sipName_SetHidden, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetHidden), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetHidden},
    {sipName_SetMinWidth, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetMinWidth), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetMinWidth},
    {sipName_SetReorderable, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetReorderable), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetReorderable},
    {sipName_SetResizeable, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetResizeable), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetResizeable},
    {sipName_SetSortOrder, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetSortOrder), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetSortOrder},
    {sipName_SetSortable, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetSortable), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetSortable},
    {sipName_SetTitle, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetTitle), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetTitle},
    {sipName_SetWidth, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_SetWidth), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_SetWidth},
    {sipName_ToggleFlag, SIP_MLMETH_CAST(meth_wxSettableHeaderColumn_ToggleFlag), METH_VARARGS|METH_KEYWORDS, doc_wxSettableHeaderColumn_ToggleFlag},
    {sipName_ToggleSortOrder, meth_wxSettableHeaderColumn_ToggleSortOrder, METH_VARARGS, doc_wxSettableHeaderColumn_ToggleSortOrder},
    {sipName_UnsetAsSortKey, meth_wxSettableHeaderColumn_UnsetAsSortKey, METH_VARARGS, doc_wxSettableHeaderColumn_UnsetAsSortKey}
};

PyDoc_STRVAR(doc_wxSettableHeaderColumn, "Adds methods to set the column attributes to wxHeaderColumn.");


sipClassTypeDef sipTypeDef__core_wxSettableHeaderColumn = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxSettableHeaderColumn,
        SIP_NULLPTR,
        SIP_NULLPTR,
    },
    {
        sipNameNr_SettableHeaderColumn,
        {0, 0, 1},
        17, methods_wxSettableHeaderColumn,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxSettableHeaderColumn,
    -1,
    -1,
    supers_wxSettableHeaderColumn,
    SIP_NULLPTR,
    init_type_wxSettableHeaderColumn,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxSettableHeaderColumn,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxSettableHeaderColumn,
    cast_wxSettableHeaderColumn,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    sizeof (::wxSettableHeaderColumn),
};
