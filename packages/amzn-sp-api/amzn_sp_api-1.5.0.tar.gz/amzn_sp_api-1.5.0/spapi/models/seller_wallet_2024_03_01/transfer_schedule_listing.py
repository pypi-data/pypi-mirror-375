# coding: utf-8

"""
    The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).

    The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.

    The version of the OpenAPI document: 2024-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class TransferScheduleListing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'next_page_token': 'str',
        'transfer_schedules': 'List[TransferSchedule]',
    }

    attribute_map = {
        'next_page_token': 'nextPageToken',
        'transfer_schedules': 'transferSchedules',
    }

    def __init__(self, next_page_token=None, transfer_schedules=None, _configuration=None):  # noqa: E501
        """TransferScheduleListing - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._next_page_token = None
        self._transfer_schedules = None
        self.discriminator = None

        if next_page_token is not None:
            self.next_page_token = next_page_token
        self.transfer_schedules = transfer_schedules

    @property
    def next_page_token(self):
        """Gets the next_page_token of this TransferScheduleListing.  # noqa: E501

        If present, use this pagination token to retrieve the next page of supply sources, if not provided the API will return same response. The field will only be provided when the list is greater than 100.  # noqa: E501

        :return: The next_page_token of this TransferScheduleListing.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this TransferScheduleListing.

        If present, use this pagination token to retrieve the next page of supply sources, if not provided the API will return same response. The field will only be provided when the list is greater than 100.  # noqa: E501

        :param next_page_token: The next_page_token of this TransferScheduleListing.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def transfer_schedules(self):
        """Gets the transfer_schedules of this TransferScheduleListing.  # noqa: E501

        Collection that holds list of Transfer Schedules   # noqa: E501

        :return: The transfer_schedules of this TransferScheduleListing.  # noqa: E501
        :rtype: List[TransferSchedule]
        """
        return self._transfer_schedules

    @transfer_schedules.setter
    def transfer_schedules(self, transfer_schedules):
        """Sets the transfer_schedules of this TransferScheduleListing.

        Collection that holds list of Transfer Schedules   # noqa: E501

        :param transfer_schedules: The transfer_schedules of this TransferScheduleListing.  # noqa: E501
        :type: List[TransferSchedule]
        """
        if self._configuration.client_side_validation and transfer_schedules is None:
            raise ValueError("Invalid value for `transfer_schedules`, must not be `None`")  # noqa: E501

        self._transfer_schedules = transfer_schedules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransferScheduleListing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransferScheduleListing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransferScheduleListing):
            return True

        return self.to_dict() != other.to_dict()
