[project]
name = "mseep-zen-mcp-server"
version = "5.11.1"
description = "AI-powered MCP server with multiple model providers"
requires-python = ">=3.9"
dependencies = [
    "mcp>=1.0.0",
    "google-genai>=1.19.0",
    "openai>=1.55.2",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
]
authors = [
    { name = "mseep", email = "support@skydeck.ai" },
]

[project.scripts]
zen-mcp-server = "server:run"

[project.readme]
content-type = "text/plain"
text = "Package managed by MseeP.ai"

[tool.setuptools]
py-modules = [
    "server",
    "config",
]

[tool.setuptools.packages.find]
include = [
    "tools*",
    "providers*",
    "systemprompts*",
    "utils*",
    "conf*",
]

[tool.setuptools.package-data]
"*" = [
    "conf/*.json",
]

[tool.setuptools.data-files]
conf = [
    "conf/custom_models.json",
]

[tool.black]
line-length = 120
target-version = [
    "py39",
    "py310",
    "py311",
    "py312",
    "py313",
]
include = "\\.pyi?$"
extend-exclude = "/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | \\.zen_venv\n  | venv\n  | _build\n  | buck-out\n  | build\n  | dist\n)/\n"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_glob = [
    "venv/*",
    ".venv/*",
    ".zen_venv/*",
]

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "B",
    "C4",
    "UP",
]
ignore = [
    "E501",
    "B008",
    "C901",
    "B904",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",
]
"tests/*" = [
    "B011",
]
"tests/conftest.py" = [
    "E402",
]

[tool.semantic_release]
version_toml = [
    "pyproject.toml:project.version",
]
branch = "main"
version_source = "tag"
version_pattern = "v(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
major_on_zero = false
build_command = "python -m pip install --upgrade build && python -m build"
dist_path = "dist/"
upload_to_vcs_release = true
upload_to_repository = false
remove_dist = false
commit_version_number = true
commit_message = "chore(release): {version}\n\nAutomatically generated by python-semantic-release"
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = []

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = [
    "feat",
]
patch_tags = [
    "fix",
    "perf",
]

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[build-system]
requires = [
    "setuptools>=45",
    "wheel",
    "setuptools_scm[toml]>=6.2",
]
build-backend = "setuptools.build_meta"
