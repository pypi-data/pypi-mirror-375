# coding: utf-8

"""
    The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).

    The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.

    The version of the OpenAPI document: 2024-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class TransferScheduleInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_start_date': 'datetime',
        'schedule_end_date': 'datetime',
        'schedule_expression': 'ScheduleExpression',
        'schedule_type': 'ScheduleTransferType',
    }

    attribute_map = {
        'schedule_start_date': 'scheduleStartDate',
        'schedule_end_date': 'scheduleEndDate',
        'schedule_expression': 'scheduleExpression',
        'schedule_type': 'scheduleType',
    }

    def __init__(self, schedule_start_date=None, schedule_end_date=None, schedule_expression=None, schedule_type=None, _configuration=None):  # noqa: E501
        """TransferScheduleInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._schedule_start_date = None
        self._schedule_end_date = None
        self._schedule_expression = None
        self._schedule_type = None
        self.discriminator = None

        if schedule_start_date is not None:
            self.schedule_start_date = schedule_start_date
        if schedule_end_date is not None:
            self.schedule_end_date = schedule_end_date
        if schedule_expression is not None:
            self.schedule_expression = schedule_expression
        if schedule_type is not None:
            self.schedule_type = schedule_type

    @property
    def schedule_start_date(self):
        """Gets the schedule_start_date of this TransferScheduleInformation.  # noqa: E501

        Field to specify start date of the scheduled transfer   # noqa: E501

        :return: The schedule_start_date of this TransferScheduleInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._schedule_start_date

    @schedule_start_date.setter
    def schedule_start_date(self, schedule_start_date):
        """Sets the schedule_start_date of this TransferScheduleInformation.

        Field to specify start date of the scheduled transfer   # noqa: E501

        :param schedule_start_date: The schedule_start_date of this TransferScheduleInformation.  # noqa: E501
        :type: datetime
        """

        self._schedule_start_date = schedule_start_date

    @property
    def schedule_end_date(self):
        """Gets the schedule_end_date of this TransferScheduleInformation.  # noqa: E501

        Field to specify end date of the scheduled transfer   # noqa: E501

        :return: The schedule_end_date of this TransferScheduleInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._schedule_end_date

    @schedule_end_date.setter
    def schedule_end_date(self, schedule_end_date):
        """Sets the schedule_end_date of this TransferScheduleInformation.

        Field to specify end date of the scheduled transfer   # noqa: E501

        :param schedule_end_date: The schedule_end_date of this TransferScheduleInformation.  # noqa: E501
        :type: datetime
        """

        self._schedule_end_date = schedule_end_date

    @property
    def schedule_expression(self):
        """Gets the schedule_expression of this TransferScheduleInformation.  # noqa: E501


        :return: The schedule_expression of this TransferScheduleInformation.  # noqa: E501
        :rtype: ScheduleExpression
        """
        return self._schedule_expression

    @schedule_expression.setter
    def schedule_expression(self, schedule_expression):
        """Sets the schedule_expression of this TransferScheduleInformation.


        :param schedule_expression: The schedule_expression of this TransferScheduleInformation.  # noqa: E501
        :type: ScheduleExpression
        """

        self._schedule_expression = schedule_expression

    @property
    def schedule_type(self):
        """Gets the schedule_type of this TransferScheduleInformation.  # noqa: E501


        :return: The schedule_type of this TransferScheduleInformation.  # noqa: E501
        :rtype: ScheduleTransferType
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this TransferScheduleInformation.


        :param schedule_type: The schedule_type of this TransferScheduleInformation.  # noqa: E501
        :type: ScheduleTransferType
        """

        self._schedule_type = schedule_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransferScheduleInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransferScheduleInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransferScheduleInformation):
            return True

        return self.to_dict() != other.to_dict()
