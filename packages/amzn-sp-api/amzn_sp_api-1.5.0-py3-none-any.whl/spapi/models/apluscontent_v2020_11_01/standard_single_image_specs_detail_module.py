# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class StandardSingleImageSpecsDetailModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'headline': 'TextComponent',
        'image': 'ImageComponent',
        'description_headline': 'TextComponent',
        'description_block1': 'StandardTextBlock',
        'description_block2': 'StandardTextBlock',
        'specification_headline': 'TextComponent',
        'specification_list_block': 'StandardHeaderTextListBlock',
        'specification_text_block': 'StandardTextBlock',
    }

    attribute_map = {
        'headline': 'headline',
        'image': 'image',
        'description_headline': 'descriptionHeadline',
        'description_block1': 'descriptionBlock1',
        'description_block2': 'descriptionBlock2',
        'specification_headline': 'specificationHeadline',
        'specification_list_block': 'specificationListBlock',
        'specification_text_block': 'specificationTextBlock',
    }

    def __init__(self, headline=None, image=None, description_headline=None, description_block1=None, description_block2=None, specification_headline=None, specification_list_block=None, specification_text_block=None, _configuration=None):  # noqa: E501
        """StandardSingleImageSpecsDetailModule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._headline = None
        self._image = None
        self._description_headline = None
        self._description_block1 = None
        self._description_block2 = None
        self._specification_headline = None
        self._specification_list_block = None
        self._specification_text_block = None
        self.discriminator = None

        if headline is not None:
            self.headline = headline
        if image is not None:
            self.image = image
        if description_headline is not None:
            self.description_headline = description_headline
        if description_block1 is not None:
            self.description_block1 = description_block1
        if description_block2 is not None:
            self.description_block2 = description_block2
        if specification_headline is not None:
            self.specification_headline = specification_headline
        if specification_list_block is not None:
            self.specification_list_block = specification_list_block
        if specification_text_block is not None:
            self.specification_text_block = specification_text_block

    @property
    def headline(self):
        """Gets the headline of this StandardSingleImageSpecsDetailModule.  # noqa: E501


        :return: The headline of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :rtype: TextComponent
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this StandardSingleImageSpecsDetailModule.


        :param headline: The headline of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :type: TextComponent
        """

        self._headline = headline

    @property
    def image(self):
        """Gets the image of this StandardSingleImageSpecsDetailModule.  # noqa: E501


        :return: The image of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :rtype: ImageComponent
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this StandardSingleImageSpecsDetailModule.


        :param image: The image of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :type: ImageComponent
        """

        self._image = image

    @property
    def description_headline(self):
        """Gets the description_headline of this StandardSingleImageSpecsDetailModule.  # noqa: E501


        :return: The description_headline of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :rtype: TextComponent
        """
        return self._description_headline

    @description_headline.setter
    def description_headline(self, description_headline):
        """Sets the description_headline of this StandardSingleImageSpecsDetailModule.


        :param description_headline: The description_headline of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :type: TextComponent
        """

        self._description_headline = description_headline

    @property
    def description_block1(self):
        """Gets the description_block1 of this StandardSingleImageSpecsDetailModule.  # noqa: E501


        :return: The description_block1 of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :rtype: StandardTextBlock
        """
        return self._description_block1

    @description_block1.setter
    def description_block1(self, description_block1):
        """Sets the description_block1 of this StandardSingleImageSpecsDetailModule.


        :param description_block1: The description_block1 of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :type: StandardTextBlock
        """

        self._description_block1 = description_block1

    @property
    def description_block2(self):
        """Gets the description_block2 of this StandardSingleImageSpecsDetailModule.  # noqa: E501


        :return: The description_block2 of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :rtype: StandardTextBlock
        """
        return self._description_block2

    @description_block2.setter
    def description_block2(self, description_block2):
        """Sets the description_block2 of this StandardSingleImageSpecsDetailModule.


        :param description_block2: The description_block2 of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :type: StandardTextBlock
        """

        self._description_block2 = description_block2

    @property
    def specification_headline(self):
        """Gets the specification_headline of this StandardSingleImageSpecsDetailModule.  # noqa: E501


        :return: The specification_headline of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :rtype: TextComponent
        """
        return self._specification_headline

    @specification_headline.setter
    def specification_headline(self, specification_headline):
        """Sets the specification_headline of this StandardSingleImageSpecsDetailModule.


        :param specification_headline: The specification_headline of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :type: TextComponent
        """

        self._specification_headline = specification_headline

    @property
    def specification_list_block(self):
        """Gets the specification_list_block of this StandardSingleImageSpecsDetailModule.  # noqa: E501


        :return: The specification_list_block of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :rtype: StandardHeaderTextListBlock
        """
        return self._specification_list_block

    @specification_list_block.setter
    def specification_list_block(self, specification_list_block):
        """Sets the specification_list_block of this StandardSingleImageSpecsDetailModule.


        :param specification_list_block: The specification_list_block of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :type: StandardHeaderTextListBlock
        """

        self._specification_list_block = specification_list_block

    @property
    def specification_text_block(self):
        """Gets the specification_text_block of this StandardSingleImageSpecsDetailModule.  # noqa: E501


        :return: The specification_text_block of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :rtype: StandardTextBlock
        """
        return self._specification_text_block

    @specification_text_block.setter
    def specification_text_block(self, specification_text_block):
        """Sets the specification_text_block of this StandardSingleImageSpecsDetailModule.


        :param specification_text_block: The specification_text_block of this StandardSingleImageSpecsDetailModule.  # noqa: E501
        :type: StandardTextBlock
        """

        self._specification_text_block = specification_text_block

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandardSingleImageSpecsDetailModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardSingleImageSpecsDetailModule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StandardSingleImageSpecsDetailModule):
            return True

        return self.to_dict() != other.to_dict()
