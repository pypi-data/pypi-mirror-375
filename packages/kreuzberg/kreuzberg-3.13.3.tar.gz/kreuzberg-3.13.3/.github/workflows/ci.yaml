name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - feat/smart-multiprocessing

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: "pyproject.toml"

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            if [[ "${{ runner.os }}" == "Windows" ]] && [[ -d ".venv" ]]; then
              echo "Removing existing .venv directory on Windows"
              rm -rf .venv
            fi
            uv sync --all-packages --all-extras --dev
          shell: bash

      - name: Load Cached Pre-Commit Dependencies
        id: cached-pre-commit-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Pre-Commit
        run: uv run pre-commit run --show-diff-on-failure --color=always --all-files

  coverage:
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install Python
        uses: actions/setup-python@v6
        id: setup-python
        with:
          python-version: "3.13"

      - name: Cache Python Dependencies
        id: python-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: python-dependencies-ubuntu-latest-3.13-${{ hashFiles('uv.lock') }}
          restore-keys: |
            python-dependencies-ubuntu-latest-3.13-

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            uv sync --all-packages --all-extras --dev
          shell: bash

      - name: Install System Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr tesseract-ocr-deu pandoc
          shell: bash

      - name: Run Tests with Coverage
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            uv run coverage erase
            uv run pytest -s -vvv --cov=kreuzberg --cov-report=lcov:coverage.lcov --cov-report=term --cov-config=pyproject.toml --reruns 2 --reruns-delay 1
            uv run coverage report --precision=2
          shell: bash

      - name: Upload Coverage to DeepSource
        if: always() && github.event_name == 'push'
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
        run: |
          # Install DeepSource CLI
          curl -fsSL https://deepsource.io/cli | sh
          # Upload coverage report
          ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.lcov

      - name: Upload Coverage Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            coverage.lcov
            .coverage
          retention-days: 7

  test:
    needs: coverage
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.10", "3.11", "3.12", "3.13"]
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install Python
        uses: actions/setup-python@v6
        id: setup-python
        with:
          python-version: ${{ matrix.python }}

      - name: Cache Python Dependencies
        id: python-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: python-dependencies-${{ matrix.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            python-dependencies-${{ matrix.os }}-${{ matrix.python }}-

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            if [[ "${{ runner.os }}" == "Windows" ]] && [[ -d ".venv" ]]; then
              echo "Removing existing .venv directory on Windows"
              rm -rf .venv
            fi
            uv sync --all-packages --all-extras --dev
          shell: bash

      - name: Cache Test Artifacts
        uses: actions/cache@v4
        with:
          path: .pytest_cache/
          key: pytest-cache-${{ matrix.os }}-${{ matrix.python }}

      - name: Cache and Install Homebrew (macOS)
        if: runner.os == 'macOS'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            # Using the underlying homebrew commands instead of the action
            brew update || true
            brew install tesseract tesseract-lang pandoc || brew upgrade tesseract tesseract-lang pandoc || true
            brew list tesseract tesseract-lang pandoc
          shell: bash

      - name: Cache and Install APT Packages (Linux)
        if: runner.os == 'Linux'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr tesseract-ocr-deu pandoc
          shell: bash

      - name: Install System Dependencies (Windows)
        if: runner.os == 'Windows'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            choco install -y tesseract pandoc --no-progress
            Write-Output "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            Write-Output "C:\Program Files\Pandoc" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            $env:PATH = "C:\Program Files\Tesseract-OCR;C:\Program Files\Pandoc;" + $env:PATH
            tesseract --version
            pandoc --version
          shell: pwsh

      - name: Run Tests (without coverage)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            uv run pytest -s -vvv --reruns 2 --reruns-delay 1
          shell: bash
