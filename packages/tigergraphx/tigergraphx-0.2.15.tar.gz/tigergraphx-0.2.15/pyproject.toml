[tool.poetry]
name = "tigergraphx"
version = "0.2.15"
description = "TigerGraphX is a high-level Python library offering a unified, Python-native interface for graph databases, advanced analytics, and GraphRAG workflows. Combining the simplicity of NetworkX with the advanced capabilities of TigerGraph, including tgCloud, it empowers Python developers to harness the power of graphs without the need to learn query languages like Cypher or GSQL."
authors = ["Xuanlei Lin <xuanlei.lin@tigergraph.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/tigergraph/tigergraphx"
repository = "https://github.com/tigergraph/tigergraphx"
packages = [{ include = "tigergraphx" }]
keywords = ["tigergraph", "graph database", "graphrag", "machine learning", "graph analytics"]

[tool.poetry.dependencies]
# Core Python Version
python = "<3.13,>=3.10"

# Data Processing
pandas = "^2.2.3"

# Configuration Management
pydantic = "^2.10.1"
pydantic-settings = "^2.6.1"
pyyaml = "^6.0.2"

# Database and Storage
nano-vectordb = "^0.0.4.3"

# Large Language Model (LLM) Utilities
tiktoken = "^0.7.0"
openai = "^1.55.0"
tenacity = "^9.0.0"

# RAG Evaluation
ragas = "^0.2.13"

[tool.poetry.group.dev.dependencies]
# Task Runner
poethepoet = "^0.31.0"

# Testing Frameworks
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-mock = "^3.14.0"
pytest-html = "^4.1.0"
pylint = "^3.3.5"

# Interactive Development
notebook = "^7.4.5"
nest-asyncio = "^1.6.0"
ipywidgets = "^8.1.5"

# GraphRAG Integration
## For Microsoft's GraphRAG
graphrag = "^0.4.0"
## For LightRAG
lightrag-hku = "^1.3.8"
aioboto3 = "^13.2.0"
ollama = "^0.4.4"
torch = "^2.8.0"
transformers = "^4.53.0"
pipmaster = "^0.4.0"
## For Dataset
datasets = "^3.2.0"

# Documentation Generation
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.48"
mkdocstrings-python = "^1.12.2"

# Security patches
tornado = "^6.5"
h11 = "^0.16.0"
langchain-community = "^0.3.27"
setuptools = "^80.9.0"
urllib3 = "^2.5.0"
jinja2 = "^3.1.6"
aiohttp = "^3.12.14"
cryptography = "^44.0.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
# Unit Test
unit_test = {cmd = "pytest -vs ./tests/unit --html=htmlcov/ut-report.html", env = {PYTHONDONTWRITEBYTECODE = "1"}}

# Integration Test
integration_test = {cmd = "pytest -vs ./tests/integration --html=htmlcov/it-report.html", env = {PYTHONDONTWRITEBYTECODE = "1"}}

# Applications
## MSFT's GraphRAG
graphrag_query = "python -m applications.msft_graphrag.query.main"
graphrag_evaluation = "python -m applications.msft_graphrag.query.evaluation"
graphrag_reset = "python -m applications.msft_graphrag.query.reset"
## LightRAG
lightrag_index = "python -m applications.lightrag.index"
lightrag_query = "python -m applications.lightrag.query"
lightrag_evaluation = "python -m applications.lightrag.evaluation"
lightrag_reset = "python -m applications.lightrag.reset"

# Documentation
notebook-to-markdown = "jupyter nbconvert --to markdown docs/getting_started/*.ipynb docs/graphrag/*.ipynb"
