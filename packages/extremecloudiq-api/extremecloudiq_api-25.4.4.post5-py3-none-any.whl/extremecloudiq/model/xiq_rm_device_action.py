# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.4-5
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqRmDeviceAction(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        enum_value_to_name = {
            "ASSIGN_LOCATION": "ASSIGN_LOCATION",
            "GET_TECH_DATA": "GET_TECH_DATA",
            "REBOOT": "REBOOT",
            "RESET_TO_DEFAULT": "RESET_TO_DEFAULT",
            "CLEAR_AUDIT_MISMATCH": "CLEAR_AUDIT_MISMATCH",
            "CHANGE_MGT_STATUS": "CHANGE_MGT_STATUS",
            "ASSIGN_COUNTRY_CODE": "ASSIGN_COUNTRY_CODE",
            "CHANGE_TO_OS_WING": "CHANGE_TO_OS_WING",
            "CHANGE_DEVICE_MODE": "CHANGE_DEVICE_MODE",
            "START_STOP_THREAD_COMMISSIONER": "START_STOP_THREAD_COMMISSIONER",
            "LOCATE_DEVICE": "LOCATE_DEVICE",
            "SSH_ACCESS": "SSH_ACCESS",
            "PROXY_WEB_FOR_SWITCHING": "PROXY_WEB_FOR_SWITCHING",
            "VLAN_PROBE": "VLAN_PROBE",
            "DIAGNOSTICS": "DIAGNOSTICS",
            "SPECTRUM_INTELLIGENCE": "SPECTRUM_INTELLIGENCE",
            "RADIUS_TEST": "RADIUS_TEST",
            "FIRMWARE_UPGRADE": "FIRMWARE_UPGRADE",
            "ASSIGN_NETWORK_POLICY": "ASSIGN_NETWORK_POLICY",
            "ADD_TO_CLOUD_CONFIG_GROUP": "ADD_TO_CLOUD_CONFIG_GROUP",
            "REVERT_DEVICE_TO_TEMPLATE": "REVERT_DEVICE_TO_TEMPLATE",
            "CHANGE_OS": "CHANGE_OS",
            "UPDATE_DEVICE": "UPDATE_DEVICE",
        }
    
    @schemas.classproperty
    def ASSIGN_LOCATION(cls):
        return cls("ASSIGN_LOCATION")
    
    @schemas.classproperty
    def GET_TECH_DATA(cls):
        return cls("GET_TECH_DATA")
    
    @schemas.classproperty
    def REBOOT(cls):
        return cls("REBOOT")
    
    @schemas.classproperty
    def RESET_TO_DEFAULT(cls):
        return cls("RESET_TO_DEFAULT")
    
    @schemas.classproperty
    def CLEAR_AUDIT_MISMATCH(cls):
        return cls("CLEAR_AUDIT_MISMATCH")
    
    @schemas.classproperty
    def CHANGE_MGT_STATUS(cls):
        return cls("CHANGE_MGT_STATUS")
    
    @schemas.classproperty
    def ASSIGN_COUNTRY_CODE(cls):
        return cls("ASSIGN_COUNTRY_CODE")
    
    @schemas.classproperty
    def CHANGE_TO_OS_WING(cls):
        return cls("CHANGE_TO_OS_WING")
    
    @schemas.classproperty
    def CHANGE_DEVICE_MODE(cls):
        return cls("CHANGE_DEVICE_MODE")
    
    @schemas.classproperty
    def START_STOP_THREAD_COMMISSIONER(cls):
        return cls("START_STOP_THREAD_COMMISSIONER")
    
    @schemas.classproperty
    def LOCATE_DEVICE(cls):
        return cls("LOCATE_DEVICE")
    
    @schemas.classproperty
    def SSH_ACCESS(cls):
        return cls("SSH_ACCESS")
    
    @schemas.classproperty
    def PROXY_WEB_FOR_SWITCHING(cls):
        return cls("PROXY_WEB_FOR_SWITCHING")
    
    @schemas.classproperty
    def VLAN_PROBE(cls):
        return cls("VLAN_PROBE")
    
    @schemas.classproperty
    def DIAGNOSTICS(cls):
        return cls("DIAGNOSTICS")
    
    @schemas.classproperty
    def SPECTRUM_INTELLIGENCE(cls):
        return cls("SPECTRUM_INTELLIGENCE")
    
    @schemas.classproperty
    def RADIUS_TEST(cls):
        return cls("RADIUS_TEST")
    
    @schemas.classproperty
    def FIRMWARE_UPGRADE(cls):
        return cls("FIRMWARE_UPGRADE")
    
    @schemas.classproperty
    def ASSIGN_NETWORK_POLICY(cls):
        return cls("ASSIGN_NETWORK_POLICY")
    
    @schemas.classproperty
    def ADD_TO_CLOUD_CONFIG_GROUP(cls):
        return cls("ADD_TO_CLOUD_CONFIG_GROUP")
    
    @schemas.classproperty
    def REVERT_DEVICE_TO_TEMPLATE(cls):
        return cls("REVERT_DEVICE_TO_TEMPLATE")
    
    @schemas.classproperty
    def CHANGE_OS(cls):
        return cls("CHANGE_OS")
    
    @schemas.classproperty
    def UPDATE_DEVICE(cls):
        return cls("UPDATE_DEVICE")
