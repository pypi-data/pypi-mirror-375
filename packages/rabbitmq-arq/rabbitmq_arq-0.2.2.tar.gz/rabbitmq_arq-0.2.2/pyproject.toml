[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rabbitmq_arq"
version = "0.2.2"
description = "一个基于RabbitMQ的任务队列库，提供类似arq的简洁API"
readme = "README.md"
license = "MIT"
authors = [
    {name = "RabbitMQ-ARQ Team", email = "robin528919@gmail.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Framework :: AsyncIO",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "aio-pika>=9.0.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "redis>=4.5.0",  # 默认结果存储后端
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
# 存储后端可选依赖（部分为未来版本计划支持）
mongodb = [
    "pymongo>=4.3.0",          # 未来版本支持
    "motor>=3.2.0",             # 未来版本支持
]
database = [
    "asyncpg>=0.28.0",          # PostgreSQL (未来版本支持)
    "aiomysql>=0.2.0",          # MySQL (未来版本支持)
    "aiosqlite>=0.19.0",        # SQLite (未来版本支持)
]
s3 = [
    "aioboto3>=11.0.0",         # Amazon S3 (未来版本支持)
]
all = [
    "pymongo>=4.3.0",
    "motor>=3.2.0",
    "asyncpg>=0.28.0",
    "aiomysql>=0.2.0", 
    "aiosqlite>=0.19.0",
    "aioboto3>=11.0.0",
]

[project.urls]
Homepage = "https://github.com/Robin528919/rabbitmq-mq"
Repository = "https://github.com/Robin528919/rabbitmq-mq"
Documentation = "https://github.com/Robin528919/rabbitmq-mq#readme"
"Bug Tracker" = "https://github.com/Robin528919/rabbitmq-mq/issues"

[project.scripts]
rabbitmq-arq = "rabbitmq_arq.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["rabbitmq_arq"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=rabbitmq_arq",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "integration: integration tests that require external services",
    "performance: performance tests that may take longer to run",
]

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
] 
