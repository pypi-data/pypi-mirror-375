# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class SetPrepDetailsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketplace_id': 'str',
        'msku_prep_details': 'List[MskuPrepDetailInput]',
    }

    attribute_map = {
        'marketplace_id': 'marketplaceId',
        'msku_prep_details': 'mskuPrepDetails',
    }

    def __init__(self, marketplace_id=None, msku_prep_details=None, _configuration=None):  # noqa: E501
        """SetPrepDetailsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._marketplace_id = None
        self._msku_prep_details = None
        self.discriminator = None

        self.marketplace_id = marketplace_id
        self.msku_prep_details = msku_prep_details

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this SetPrepDetailsRequest.  # noqa: E501

        The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).  # noqa: E501

        :return: The marketplace_id of this SetPrepDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this SetPrepDetailsRequest.

        The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).  # noqa: E501

        :param marketplace_id: The marketplace_id of this SetPrepDetailsRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and marketplace_id is None:
            raise ValueError("Invalid value for `marketplace_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                marketplace_id is not None and len(marketplace_id) > 20):
            raise ValueError("Invalid value for `marketplace_id`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                marketplace_id is not None and len(marketplace_id) < 1):
            raise ValueError("Invalid value for `marketplace_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._marketplace_id = marketplace_id

    @property
    def msku_prep_details(self):
        """Gets the msku_prep_details of this SetPrepDetailsRequest.  # noqa: E501

        A list of MSKUs and related prep details.  # noqa: E501

        :return: The msku_prep_details of this SetPrepDetailsRequest.  # noqa: E501
        :rtype: List[MskuPrepDetailInput]
        """
        return self._msku_prep_details

    @msku_prep_details.setter
    def msku_prep_details(self, msku_prep_details):
        """Sets the msku_prep_details of this SetPrepDetailsRequest.

        A list of MSKUs and related prep details.  # noqa: E501

        :param msku_prep_details: The msku_prep_details of this SetPrepDetailsRequest.  # noqa: E501
        :type: List[MskuPrepDetailInput]
        """
        if self._configuration.client_side_validation and msku_prep_details is None:
            raise ValueError("Invalid value for `msku_prep_details`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                msku_prep_details is not None and len(msku_prep_details) > 100):
            raise ValueError("Invalid value for `msku_prep_details`, number of items must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                msku_prep_details is not None and len(msku_prep_details) < 1):
            raise ValueError("Invalid value for `msku_prep_details`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._msku_prep_details = msku_prep_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetPrepDetailsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetPrepDetailsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetPrepDetailsRequest):
            return True

        return self.to_dict() != other.to_dict()
