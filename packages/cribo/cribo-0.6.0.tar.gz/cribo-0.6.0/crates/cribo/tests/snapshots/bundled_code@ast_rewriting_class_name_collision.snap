---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/ast_rewriting_class_name_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
models = _cribo.types.SimpleNamespace(__name__='models')
"""\nModels module with User and Product classes.\nThese will conflict with entities.py when bundled.\n"""
class User_2:
    """User model for data persistence."""

    def __init__(self, name: str, email: str):
        self.name = name
        self.email = email
        self.id = None

    def __str__(self) -> str:
        return f"Model User(name='{self.name}', email='{self.email}')"
User_2.__module__ = 'models'
User_2.__name__ = 'User'
User_2.__qualname__ = 'User'
class Product_2:
    """Product model for catalog."""

    def __init__(self, name: str, price: float):
        self.name = name
        self.price = price
        self.id = None

    def __str__(self) -> str:
        return f"Model Product(name='{self.name}', price={self.price})"
Product_2.__module__ = 'models'
Product_2.__name__ = 'Product'
Product_2.__qualname__ = 'Product'
models.Product = Product_2
models.User = User_2
entities = _cribo.types.SimpleNamespace(__name__='entities')
"""\nEntities module with User and Product classes.\nThese will conflict with models.py when bundled.\n"""
class User_1:
    """User entity for business logic."""

    def __init__(self, name: str, age: int):
        self.name = name
        self.age = age
        self.active = True

    def __str__(self) -> str:
        return f"Entity User(name='{self.name}', age={self.age})"
User_1.__module__ = 'entities'
User_1.__name__ = 'User'
User_1.__qualname__ = 'User'
class Product_1:
    """Product entity for business logic."""

    def __init__(self, sku: str, name: str):
        self.sku = sku
        self.name = name
        self.available = True

    def __str__(self) -> str:
        return f"Entity Product(sku='{self.sku}', name='{self.name}')"
Product_1.__module__ = 'entities'
Product_1.__name__ = 'Product'
Product_1.__qualname__ = 'Product'
entities.Product = Product_1
entities.User = User_1
"""\nClass name collision test.\nBoth modules define classes with the same names.\n"""
ModelUser = models.User
ModelProduct = models.Product
EntityUser = entities.User
EntityProduct = entities.Product
def main():
    model_user = ModelUser("Alice", "alice@example.com")
    entity_user = EntityUser("Bob", 25)
    model_product = ModelProduct("Widget", 19.99)
    entity_product = EntityProduct("P001", "Gadget")
    print(f"Model User: {model_user}")
    print(f"Entity User: {entity_user}")
    print(f"Model Product: {model_product}")
    print(f"Entity Product: {entity_product}")
    return {"model_user": str(model_user), "entity_user": str(entity_user), "model_product": str(model_product), "entity_product": str(entity_product)}
if __name__ == "__main__":
    result = main()
    print("Result:", result)
