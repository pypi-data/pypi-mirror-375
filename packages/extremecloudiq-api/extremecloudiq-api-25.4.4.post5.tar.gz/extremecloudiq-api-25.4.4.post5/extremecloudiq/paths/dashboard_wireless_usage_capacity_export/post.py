# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from extremecloudiq import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401

from extremecloudiq.model.xiq_sort_order import XiqSortOrder
from extremecloudiq.model.xiq_usage_and_capacity_grid_filter import XiqUsageAndCapacityGridFilter
from extremecloudiq.model.xiq_metric_report import XiqMetricReport

from . import path

# Query params
KeywordSchema = schemas.StrSchema


class SortFieldSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "HOSTNAME": "HOSTNAME",
            "SITE": "SITE",
            "RADIO_2DOT4G_UTILIZATION_SCORE": "RADIO_2DOT4G_UTILIZATION_SCORE",
            "RADIO_5G_UTILIZATION_SCORE": "RADIO_5G_UTILIZATION_SCORE",
            "RADIO_6G_UTILIZATION_SCORE": "RADIO_6G_UTILIZATION_SCORE",
            "WIFI0_RETRY_SCORE": "WIFI0_RETRY_SCORE",
            "WIFI1_RETRY_SCORE": "WIFI1_RETRY_SCORE",
            "WIFI2_RETRY_SCORE": "WIFI2_RETRY_SCORE",
            "WIFI0_PACKET_LOSS": "WIFI0_PACKET_LOSS",
            "WIFI1_PACKET_LOSS": "WIFI1_PACKET_LOSS",
            "WIFI2_PACKET_LOSS": "WIFI2_PACKET_LOSS",
            "ETH0_UNICAST_SCORE": "ETH0_UNICAST_SCORE",
            "ETH0_BROADCAST_SCORE": "ETH0_BROADCAST_SCORE",
            "ETH0_MULTICAST_SCORE": "ETH0_MULTICAST_SCORE",
            "ETH1_UNICAST_SCORE": "ETH1_UNICAST_SCORE",
            "ETH1_BROADCAST_SCORE": "ETH1_BROADCAST_SCORE",
            "ETH1_MULTICAST_SCORE": "ETH1_MULTICAST_SCORE",
            "WIFI0_INTERFERENCE_SCORE": "WIFI0_INTERFERENCE_SCORE",
            "WIFI1_INTERFERENCE_SCORE": "WIFI1_INTERFERENCE_SCORE",
            "WIFI2_INTERFERENCE_SCORE": "WIFI2_INTERFERENCE_SCORE",
            "WIFI0_NOISE": "WIFI0_NOISE",
            "WIFI1_NOISE": "WIFI1_NOISE",
            "WIFI2_NOISE": "WIFI2_NOISE",
            "TOTAL_ETH0_SCORE": "TOTAL_ETH0_SCORE",
            "TOTAL_ETH1_SCORE": "TOTAL_ETH1_SCORE",
        }
    
    @schemas.classproperty
    def HOSTNAME(cls):
        return cls("HOSTNAME")
    
    @schemas.classproperty
    def SITE(cls):
        return cls("SITE")
    
    @schemas.classproperty
    def RADIO_2DOT4G_UTILIZATION_SCORE(cls):
        return cls("RADIO_2DOT4G_UTILIZATION_SCORE")
    
    @schemas.classproperty
    def RADIO_5G_UTILIZATION_SCORE(cls):
        return cls("RADIO_5G_UTILIZATION_SCORE")
    
    @schemas.classproperty
    def RADIO_6G_UTILIZATION_SCORE(cls):
        return cls("RADIO_6G_UTILIZATION_SCORE")
    
    @schemas.classproperty
    def WIFI0_RETRY_SCORE(cls):
        return cls("WIFI0_RETRY_SCORE")
    
    @schemas.classproperty
    def WIFI1_RETRY_SCORE(cls):
        return cls("WIFI1_RETRY_SCORE")
    
    @schemas.classproperty
    def WIFI2_RETRY_SCORE(cls):
        return cls("WIFI2_RETRY_SCORE")
    
    @schemas.classproperty
    def WIFI0_PACKET_LOSS(cls):
        return cls("WIFI0_PACKET_LOSS")
    
    @schemas.classproperty
    def WIFI1_PACKET_LOSS(cls):
        return cls("WIFI1_PACKET_LOSS")
    
    @schemas.classproperty
    def WIFI2_PACKET_LOSS(cls):
        return cls("WIFI2_PACKET_LOSS")
    
    @schemas.classproperty
    def ETH0_UNICAST_SCORE(cls):
        return cls("ETH0_UNICAST_SCORE")
    
    @schemas.classproperty
    def ETH0_BROADCAST_SCORE(cls):
        return cls("ETH0_BROADCAST_SCORE")
    
    @schemas.classproperty
    def ETH0_MULTICAST_SCORE(cls):
        return cls("ETH0_MULTICAST_SCORE")
    
    @schemas.classproperty
    def ETH1_UNICAST_SCORE(cls):
        return cls("ETH1_UNICAST_SCORE")
    
    @schemas.classproperty
    def ETH1_BROADCAST_SCORE(cls):
        return cls("ETH1_BROADCAST_SCORE")
    
    @schemas.classproperty
    def ETH1_MULTICAST_SCORE(cls):
        return cls("ETH1_MULTICAST_SCORE")
    
    @schemas.classproperty
    def WIFI0_INTERFERENCE_SCORE(cls):
        return cls("WIFI0_INTERFERENCE_SCORE")
    
    @schemas.classproperty
    def WIFI1_INTERFERENCE_SCORE(cls):
        return cls("WIFI1_INTERFERENCE_SCORE")
    
    @schemas.classproperty
    def WIFI2_INTERFERENCE_SCORE(cls):
        return cls("WIFI2_INTERFERENCE_SCORE")
    
    @schemas.classproperty
    def WIFI0_NOISE(cls):
        return cls("WIFI0_NOISE")
    
    @schemas.classproperty
    def WIFI1_NOISE(cls):
        return cls("WIFI1_NOISE")
    
    @schemas.classproperty
    def WIFI2_NOISE(cls):
        return cls("WIFI2_NOISE")
    
    @schemas.classproperty
    def TOTAL_ETH0_SCORE(cls):
        return cls("TOTAL_ETH0_SCORE")
    
    @schemas.classproperty
    def TOTAL_ETH1_SCORE(cls):
        return cls("TOTAL_ETH1_SCORE")
SortOrderSchema = XiqSortOrder
UnassignedDevicesSchema = schemas.BoolSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'keyword': typing.Union[KeywordSchema, str, ],
        'sortField': typing.Union[SortFieldSchema, str, ],
        'sortOrder': typing.Union[SortOrderSchema, ],
        'unassigned_devices': typing.Union[UnassignedDevicesSchema, bool, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_keyword = api_client.QueryParameter(
    name="keyword",
    style=api_client.ParameterStyle.FORM,
    schema=KeywordSchema,
    explode=True,
)
request_query_sort_field = api_client.QueryParameter(
    name="sortField",
    style=api_client.ParameterStyle.FORM,
    schema=SortFieldSchema,
    explode=True,
)
request_query_sort_order = api_client.QueryParameter(
    name="sortOrder",
    style=api_client.ParameterStyle.FORM,
    schema=SortOrderSchema,
    explode=True,
)
request_query_unassigned_devices = api_client.QueryParameter(
    name="unassigned_devices",
    style=api_client.ParameterStyle.FORM,
    schema=UnassignedDevicesSchema,
    explode=True,
)
# body param
SchemaForRequestBodyApplicationJson = XiqUsageAndCapacityGridFilter


request_body_xiq_usage_and_capacity_grid_filter = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'Bearer',
]
SchemaFor200ResponseBodyApplicationJson = XiqMetricReport


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _export_to_csv_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: typing_extensions.Literal["application/json"] = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _export_to_csv_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def _export_to_csv_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _export_to_csv_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _export_to_csv_oapg(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = 'application/json',
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Export all Wireless Usage Capacity Data to CSV
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_keyword,
            request_query_sort_field,
            request_query_sort_order,
            request_query_unassigned_devices,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        serialized_data = request_body_xiq_usage_and_capacity_grid_filter.serialize(body, content_type)
        _headers.add('Content-Type', content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class ExportToCsv(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def export_to_csv(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: typing_extensions.Literal["application/json"] = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def export_to_csv(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def export_to_csv(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def export_to_csv(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def export_to_csv(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = 'application/json',
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._export_to_csv_oapg(
            body=body,
            query_params=query_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: typing_extensions.Literal["application/json"] = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = ...,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def post(
        self,
        body: typing.Union[SchemaForRequestBodyApplicationJson,],
        content_type: str = 'application/json',
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._export_to_csv_oapg(
            body=body,
            query_params=query_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


