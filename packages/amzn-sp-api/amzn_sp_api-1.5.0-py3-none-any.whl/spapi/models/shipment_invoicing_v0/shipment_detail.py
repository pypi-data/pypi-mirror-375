# coding: utf-8

"""
    Selling Partner API for Shipment Invoicing

    The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShipmentDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'warehouse_id': 'str',
        'amazon_order_id': 'str',
        'amazon_shipment_id': 'str',
        'purchase_date': 'datetime',
        'shipping_address': 'Address',
        'payment_method_details': 'List[str]',
        'payments': 'List[PaymentInformation]',
        'marketplace_id': 'str',
        'seller_id': 'str',
        'buyer_name': 'str',
        'buyer_county': 'str',
        'buyer_tax_info': 'BuyerTaxInfo',
        'marketplace_tax_info': 'MarketplaceTaxInfo',
        'seller_display_name': 'str',
        'shipment_items': 'List[ShipmentItem]',
    }

    attribute_map = {
        'warehouse_id': 'WarehouseId',
        'amazon_order_id': 'AmazonOrderId',
        'amazon_shipment_id': 'AmazonShipmentId',
        'purchase_date': 'PurchaseDate',
        'shipping_address': 'ShippingAddress',
        'payment_method_details': 'PaymentMethodDetails',
        'payments': 'Payments',
        'marketplace_id': 'MarketplaceId',
        'seller_id': 'SellerId',
        'buyer_name': 'BuyerName',
        'buyer_county': 'BuyerCounty',
        'buyer_tax_info': 'BuyerTaxInfo',
        'marketplace_tax_info': 'MarketplaceTaxInfo',
        'seller_display_name': 'SellerDisplayName',
        'shipment_items': 'ShipmentItems',
    }

    def __init__(self, warehouse_id=None, amazon_order_id=None, amazon_shipment_id=None, purchase_date=None, shipping_address=None, payment_method_details=None, payments=None, marketplace_id=None, seller_id=None, buyer_name=None, buyer_county=None, buyer_tax_info=None, marketplace_tax_info=None, seller_display_name=None, shipment_items=None, _configuration=None):  # noqa: E501
        """ShipmentDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._warehouse_id = None
        self._amazon_order_id = None
        self._amazon_shipment_id = None
        self._purchase_date = None
        self._shipping_address = None
        self._payment_method_details = None
        self._payments = None
        self._marketplace_id = None
        self._seller_id = None
        self._buyer_name = None
        self._buyer_county = None
        self._buyer_tax_info = None
        self._marketplace_tax_info = None
        self._seller_display_name = None
        self._shipment_items = None
        self.discriminator = None

        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if amazon_order_id is not None:
            self.amazon_order_id = amazon_order_id
        if amazon_shipment_id is not None:
            self.amazon_shipment_id = amazon_shipment_id
        if purchase_date is not None:
            self.purchase_date = purchase_date
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if payment_method_details is not None:
            self.payment_method_details = payment_method_details
        if payments is not None:
            self.payments = payments
        if marketplace_id is not None:
            self.marketplace_id = marketplace_id
        if seller_id is not None:
            self.seller_id = seller_id
        if buyer_name is not None:
            self.buyer_name = buyer_name
        if buyer_county is not None:
            self.buyer_county = buyer_county
        if buyer_tax_info is not None:
            self.buyer_tax_info = buyer_tax_info
        if marketplace_tax_info is not None:
            self.marketplace_tax_info = marketplace_tax_info
        if seller_display_name is not None:
            self.seller_display_name = seller_display_name
        if shipment_items is not None:
            self.shipment_items = shipment_items

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ShipmentDetail.  # noqa: E501

        The Amazon-defined identifier for the warehouse.  # noqa: E501

        :return: The warehouse_id of this ShipmentDetail.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ShipmentDetail.

        The Amazon-defined identifier for the warehouse.  # noqa: E501

        :param warehouse_id: The warehouse_id of this ShipmentDetail.  # noqa: E501
        :type: str
        """

        self._warehouse_id = warehouse_id

    @property
    def amazon_order_id(self):
        """Gets the amazon_order_id of this ShipmentDetail.  # noqa: E501

        The Amazon-defined identifier for the order.  # noqa: E501

        :return: The amazon_order_id of this ShipmentDetail.  # noqa: E501
        :rtype: str
        """
        return self._amazon_order_id

    @amazon_order_id.setter
    def amazon_order_id(self, amazon_order_id):
        """Sets the amazon_order_id of this ShipmentDetail.

        The Amazon-defined identifier for the order.  # noqa: E501

        :param amazon_order_id: The amazon_order_id of this ShipmentDetail.  # noqa: E501
        :type: str
        """

        self._amazon_order_id = amazon_order_id

    @property
    def amazon_shipment_id(self):
        """Gets the amazon_shipment_id of this ShipmentDetail.  # noqa: E501

        The Amazon-defined identifier for the shipment.  # noqa: E501

        :return: The amazon_shipment_id of this ShipmentDetail.  # noqa: E501
        :rtype: str
        """
        return self._amazon_shipment_id

    @amazon_shipment_id.setter
    def amazon_shipment_id(self, amazon_shipment_id):
        """Sets the amazon_shipment_id of this ShipmentDetail.

        The Amazon-defined identifier for the shipment.  # noqa: E501

        :param amazon_shipment_id: The amazon_shipment_id of this ShipmentDetail.  # noqa: E501
        :type: str
        """

        self._amazon_shipment_id = amazon_shipment_id

    @property
    def purchase_date(self):
        """Gets the purchase_date of this ShipmentDetail.  # noqa: E501

        The date and time when the order was created.  # noqa: E501

        :return: The purchase_date of this ShipmentDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this ShipmentDetail.

        The date and time when the order was created.  # noqa: E501

        :param purchase_date: The purchase_date of this ShipmentDetail.  # noqa: E501
        :type: datetime
        """

        self._purchase_date = purchase_date

    @property
    def shipping_address(self):
        """Gets the shipping_address of this ShipmentDetail.  # noqa: E501


        :return: The shipping_address of this ShipmentDetail.  # noqa: E501
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this ShipmentDetail.


        :param shipping_address: The shipping_address of this ShipmentDetail.  # noqa: E501
        :type: Address
        """

        self._shipping_address = shipping_address

    @property
    def payment_method_details(self):
        """Gets the payment_method_details of this ShipmentDetail.  # noqa: E501

        The list of payment method details.  # noqa: E501

        :return: The payment_method_details of this ShipmentDetail.  # noqa: E501
        :rtype: List[str]
        """
        return self._payment_method_details

    @payment_method_details.setter
    def payment_method_details(self, payment_method_details):
        """Sets the payment_method_details of this ShipmentDetail.

        The list of payment method details.  # noqa: E501

        :param payment_method_details: The payment_method_details of this ShipmentDetail.  # noqa: E501
        :type: List[str]
        """

        self._payment_method_details = payment_method_details

    @property
    def payments(self):
        """Gets the payments of this ShipmentDetail.  # noqa: E501

        List of payment transactions  # noqa: E501

        :return: The payments of this ShipmentDetail.  # noqa: E501
        :rtype: List[PaymentInformation]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this ShipmentDetail.

        List of payment transactions  # noqa: E501

        :param payments: The payments of this ShipmentDetail.  # noqa: E501
        :type: List[PaymentInformation]
        """

        self._payments = payments

    @property
    def marketplace_id(self):
        """Gets the marketplace_id of this ShipmentDetail.  # noqa: E501

        The identifier for the marketplace where the order was placed.  # noqa: E501

        :return: The marketplace_id of this ShipmentDetail.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_id

    @marketplace_id.setter
    def marketplace_id(self, marketplace_id):
        """Sets the marketplace_id of this ShipmentDetail.

        The identifier for the marketplace where the order was placed.  # noqa: E501

        :param marketplace_id: The marketplace_id of this ShipmentDetail.  # noqa: E501
        :type: str
        """

        self._marketplace_id = marketplace_id

    @property
    def seller_id(self):
        """Gets the seller_id of this ShipmentDetail.  # noqa: E501

        The seller identifier.  # noqa: E501

        :return: The seller_id of this ShipmentDetail.  # noqa: E501
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this ShipmentDetail.

        The seller identifier.  # noqa: E501

        :param seller_id: The seller_id of this ShipmentDetail.  # noqa: E501
        :type: str
        """

        self._seller_id = seller_id

    @property
    def buyer_name(self):
        """Gets the buyer_name of this ShipmentDetail.  # noqa: E501

        The name of the buyer.  # noqa: E501

        :return: The buyer_name of this ShipmentDetail.  # noqa: E501
        :rtype: str
        """
        return self._buyer_name

    @buyer_name.setter
    def buyer_name(self, buyer_name):
        """Sets the buyer_name of this ShipmentDetail.

        The name of the buyer.  # noqa: E501

        :param buyer_name: The buyer_name of this ShipmentDetail.  # noqa: E501
        :type: str
        """

        self._buyer_name = buyer_name

    @property
    def buyer_county(self):
        """Gets the buyer_county of this ShipmentDetail.  # noqa: E501

        The county of the buyer.  # noqa: E501

        :return: The buyer_county of this ShipmentDetail.  # noqa: E501
        :rtype: str
        """
        return self._buyer_county

    @buyer_county.setter
    def buyer_county(self, buyer_county):
        """Sets the buyer_county of this ShipmentDetail.

        The county of the buyer.  # noqa: E501

        :param buyer_county: The buyer_county of this ShipmentDetail.  # noqa: E501
        :type: str
        """

        self._buyer_county = buyer_county

    @property
    def buyer_tax_info(self):
        """Gets the buyer_tax_info of this ShipmentDetail.  # noqa: E501


        :return: The buyer_tax_info of this ShipmentDetail.  # noqa: E501
        :rtype: BuyerTaxInfo
        """
        return self._buyer_tax_info

    @buyer_tax_info.setter
    def buyer_tax_info(self, buyer_tax_info):
        """Sets the buyer_tax_info of this ShipmentDetail.


        :param buyer_tax_info: The buyer_tax_info of this ShipmentDetail.  # noqa: E501
        :type: BuyerTaxInfo
        """

        self._buyer_tax_info = buyer_tax_info

    @property
    def marketplace_tax_info(self):
        """Gets the marketplace_tax_info of this ShipmentDetail.  # noqa: E501


        :return: The marketplace_tax_info of this ShipmentDetail.  # noqa: E501
        :rtype: MarketplaceTaxInfo
        """
        return self._marketplace_tax_info

    @marketplace_tax_info.setter
    def marketplace_tax_info(self, marketplace_tax_info):
        """Sets the marketplace_tax_info of this ShipmentDetail.


        :param marketplace_tax_info: The marketplace_tax_info of this ShipmentDetail.  # noqa: E501
        :type: MarketplaceTaxInfo
        """

        self._marketplace_tax_info = marketplace_tax_info

    @property
    def seller_display_name(self):
        """Gets the seller_display_name of this ShipmentDetail.  # noqa: E501

        The sellerâ€™s friendly name registered in the marketplace.  # noqa: E501

        :return: The seller_display_name of this ShipmentDetail.  # noqa: E501
        :rtype: str
        """
        return self._seller_display_name

    @seller_display_name.setter
    def seller_display_name(self, seller_display_name):
        """Sets the seller_display_name of this ShipmentDetail.

        The sellerâ€™s friendly name registered in the marketplace.  # noqa: E501

        :param seller_display_name: The seller_display_name of this ShipmentDetail.  # noqa: E501
        :type: str
        """

        self._seller_display_name = seller_display_name

    @property
    def shipment_items(self):
        """Gets the shipment_items of this ShipmentDetail.  # noqa: E501

        A list of shipment items.  # noqa: E501

        :return: The shipment_items of this ShipmentDetail.  # noqa: E501
        :rtype: List[ShipmentItem]
        """
        return self._shipment_items

    @shipment_items.setter
    def shipment_items(self, shipment_items):
        """Sets the shipment_items of this ShipmentDetail.

        A list of shipment items.  # noqa: E501

        :param shipment_items: The shipment_items of this ShipmentDetail.  # noqa: E501
        :type: List[ShipmentItem]
        """

        self._shipment_items = shipment_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipmentDetail):
            return True

        return self.to_dict() != other.to_dict()
