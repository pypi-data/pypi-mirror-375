{"version":3,"file":"js/module_users.profile_picture.e0be2007.bundle.js","mappings":"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","sources":["webpack:///indico/modules/users/client/js/ProfilePicture.module.scss?7b43","webpack:///indico/modules/users/client/js/ProfilePicture.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile-picture-selection\":\"users-client-js-___ProfilePicture-module__profile-picture-selection___YxVGi\",\"placeholder\":\"users-client-js-___ProfilePicture-module__placeholder___XTBq-\"};","// This file is part of Indico.\n// Copyright (C) 2002 - 2025 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport previewURL from 'indico-url:users.profile_picture_preview';\nimport saveURL from 'indico-url:users.save_profile_picture';\n\nimport createDecorator from 'final-form-calculate';\nimport PropTypes from 'prop-types';\nimport React, {useState, useCallback} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useDropzone} from 'react-dropzone';\nimport {Form as FinalForm, useField, useFormState} from 'react-final-form';\nimport {Button, Form, Icon, Image, Card} from 'semantic-ui-react';\n\nimport {TooltipIfTruncated} from 'indico/react/components';\nimport {FinalSubmitButton} from 'indico/react/forms';\nimport {Translate, Param} from 'indico/react/i18n';\nimport {indicoAxios, handleAxiosError} from 'indico/utils/axios';\n\nimport './ProfilePicture.module.scss';\n\nfunction ProfilePictureCard({image, text, email, children, source}) {\n  const {\n    input: {onChange, value},\n  } = useField('source');\n\n  const active = value === source;\n  return (\n    <Card\n      color={active ? 'blue' : null}\n      onClick={() => onChange(source)}\n      style={active ? {backgroundColor: '#f5f5f5'} : null}\n    >\n      <Card.Description>\n        {image ? (\n          <Image src={image} circular size=\"tiny\" />\n        ) : (\n          <Icon name=\"question circle outline\" size=\"huge\" styleName=\"placeholder\" />\n        )}\n        {text}\n      </Card.Description>\n      {email && (\n        <TooltipIfTruncated useEventTarget>\n          <Card.Content extra>\n            <Translate>\n              Based on <Param name=\"email\" value={email} />\n            </Translate>\n          </Card.Content>\n        </TooltipIfTruncated>\n      )}\n      {children && <Card.Content extra>{children}</Card.Content>}\n    </Card>\n  );\n}\n\nProfilePictureCard.propTypes = {\n  image: PropTypes.string,\n  text: PropTypes.string.isRequired,\n  email: PropTypes.string,\n  children: PropTypes.node,\n  source: PropTypes.oneOf(['standard', 'identicon', 'gravatar', 'custom']).isRequired,\n};\n\nProfilePictureCard.defaultProps = {\n  image: null,\n  email: null,\n  children: null,\n};\n\nfunction CustomPictureUpload({onFileSelected}) {\n  const {submitting} = useFormState({\n    subscription: {submitting: true},\n  });\n\n  const {\n    input: {onChange},\n  } = useField('file', {allowNull: true});\n\n  const {getRootProps, getInputProps, open} = useDropzone({\n    onDropAccepted: ([file]) => {\n      onFileSelected(file);\n      onChange(file);\n    },\n    multiple: false,\n    noClick: true,\n    noKeyboard: true,\n    accept: ['.png', '.jpg', '.jpeg', '.gif', '.webp'],\n    disabled: submitting,\n  });\n\n  return (\n    <section>\n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        <Button\n          disabled={submitting}\n          type=\"button\"\n          icon=\"upload\"\n          content={Translate.string('Upload')}\n          size=\"small\"\n          onClick={evt => {\n            evt.stopPropagation();\n            open();\n          }}\n        />\n      </div>\n    </section>\n  );\n}\n\nCustomPictureUpload.propTypes = {\n  onFileSelected: PropTypes.func.isRequired,\n};\n\nconst formDecorator = createDecorator({\n  field: 'file',\n  updates: value => (value === null ? {} : {source: 'custom'}),\n});\n\nfunction ProfilePicture({userId, email, source}) {\n  const [previewFile, setPreviewFile] = useState(null);\n  const [hasPreview, setHasPreview] = useState(source === 'custom');\n\n  const userIdArgs = userId !== null ? {user_id: userId} : {};\n\n  const submitPicture = async formData => {\n    const bodyFormData = new FormData();\n    if (formData.source === 'custom') {\n      bodyFormData.append('picture', formData.file);\n    }\n    bodyFormData.append('source', formData.source);\n    const config = {\n      headers: {'content-type': 'multipart/form-data'},\n    };\n    try {\n      await indicoAxios.post(saveURL(userIdArgs), bodyFormData, config);\n    } catch (e) {\n      handleAxiosError(e);\n      return;\n    }\n    location.reload();\n    // never finish submitting to avoid fields being re-enabled\n    await new Promise(() => {});\n  };\n\n  const getPreview = () => {\n    return previewFile\n      ? URL.createObjectURL(previewFile)\n      : previewURL({...userIdArgs, source: 'custom'});\n  };\n\n  const handleFileSelected = useCallback(file => {\n    setPreviewFile(file);\n    setHasPreview(true);\n  }, []);\n\n  const validate = values => {\n    if (values.source === 'custom' && !values.file) {\n      return {source: 'invalid'};\n    }\n    return {};\n  };\n\n  return (\n    <div styleName=\"profile-picture-selection\">\n      <FinalForm\n        onSubmit={submitPicture}\n        initialValues={{file: null, source}}\n        validate={validate}\n        subscription={{}}\n        decorators={[formDecorator]}\n      >\n        {fprops => (\n          <div>\n            <Form onSubmit={fprops.handleSubmit}>\n              <Card.Group itemsPerRow={4} centered>\n                <ProfilePictureCard\n                  image={previewURL({...userIdArgs, source: 'standard'})}\n                  text={Translate.string('System-assigned icon')}\n                  source=\"standard\"\n                />\n                <ProfilePictureCard\n                  image={previewURL({...userIdArgs, source: 'identicon'})}\n                  text=\"Identicon\"\n                  source=\"identicon\"\n                  email={email}\n                />\n                <ProfilePictureCard\n                  image={previewURL({...userIdArgs, source: 'gravatar'})}\n                  text=\"Gravatar\"\n                  source=\"gravatar\"\n                  email={email}\n                />\n                <ProfilePictureCard\n                  image={hasPreview ? getPreview() : null}\n                  text={Translate.string('Custom picture')}\n                  source=\"custom\"\n                >\n                  <CustomPictureUpload onFileSelected={handleFileSelected} />\n                </ProfilePictureCard>\n              </Card.Group>\n              <FinalSubmitButton\n                label={Translate.string('Save changes')}\n                className=\"submit-button\"\n              />\n            </Form>\n          </div>\n        )}\n      </FinalForm>\n    </div>\n  );\n}\n\nProfilePicture.propTypes = {\n  userId: PropTypes.number,\n  email: PropTypes.string.isRequired,\n  source: PropTypes.string.isRequired,\n};\n\nProfilePicture.defaultProps = {\n  userId: null,\n};\n\nwindow.setupPictureSelection = function setupPictureSelection(userId, email, source) {\n  document.addEventListener('DOMContentLoaded', () => {\n    ReactDOM.render(\n      <ProfilePicture userId={userId} email={email} source={source} />,\n      document.querySelector('#profile-picture-selection')\n    );\n  });\n};\n"],"names":["previewURL","_buildFlaskURL","bind","endpoint","rules","args","converters","source","user_id","defaults","trace","data","isDynamic","saveURL","ProfilePictureCard","image","text","email","children","input","onChange","value","useField","active","React","Card","color","onClick","style","backgroundColor","Description","Image","src","circular","size","Icon","name","className","TooltipIfTruncated","useEventTarget","Content","extra","Translate","Param","CustomPictureUpload","onFileSelected","submitting","useFormState","subscription","allowNull","getRootProps","getInputProps","open","useDropzone","onDropAccepted","file","multiple","noClick","noKeyboard","accept","disabled","Button","type","icon","content","string","evt","stopPropagation","propTypes","PropTypes","isRequired","defaultProps","formDecorator","createDecorator","field","updates","ProfilePicture","userId","previewFile","setPreviewFile","useState","hasPreview","setHasPreview","userIdArgs","handleFileSelected","useCallback","FinalForm","onSubmit","async","bodyFormData","FormData","formData","append","config","headers","indicoAxios","post","e","handleAxiosError","location","reload","Promise","initialValues","validate","values","decorators","fprops","Form","handleSubmit","Group","itemsPerRow","centered","URL","createObjectURL","FinalSubmitButton","label","window","setupPictureSelection","document","addEventListener","ReactDOM","querySelector"],"sourceRoot":""}