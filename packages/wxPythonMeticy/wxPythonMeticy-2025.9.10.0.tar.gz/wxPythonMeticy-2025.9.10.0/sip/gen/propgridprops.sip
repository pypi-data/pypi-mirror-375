//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _propgrid.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxPG_PROP_PASSWORD;
const int wxPG_PROP_STATIC_CHOICES;
const int wxPG_PROP_SHOW_FULL_FILENAME;
const int wxPG_PROP_ACTIVE_BTN;
const int wxPG_PROP_USE_CHECKBOX;
const int wxPG_PROP_USE_DCC;
const int wxAEDIALOG_STYLE;
enum wxPGNumericValidationConstants
{
    wxPG_PROPERTY_VALIDATION_ERROR_MESSAGE,
    wxPG_PROPERTY_VALIDATION_SATURATE,
    wxPG_PROPERTY_VALIDATION_WRAP
};

class wxPGInDialogValidator
{
    %Docstring
        PGInDialogValidator() -> None
        
        Creates and manages a temporary wxTextCtrl for validation purposes.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxPGInDialogValidator();

    ~wxPGInDialogValidator();

    bool DoValidate(
        wxPropertyGrid * propGrid,
        wxValidator * validator,
        const wxString & value
    );
    %Docstring
        DoValidate(propGrid, validator, value) -> bool
    %End

};  // end of class wxPGInDialogValidator


class wxStringProperty : wxPGProperty
{
    %Docstring
        StringProperty(label=PG_LABEL, name=PG_LABEL, value='') -> None
        
        Basic property with string value.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxStringProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        const wxString & value = wxEmptyString
    );

    virtual
    ~wxStringProperty();

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

    virtual
    void OnSetValue();
    %Docstring
        OnSetValue() -> None
        
        This is updated so "<composed>" special value can be handled.
    %End

};  // end of class wxStringProperty


class wxNumericProperty : wxPGProperty
{
    %Docstring
        NumericProperty(label, name) -> None
        
        This is an abstract class which serves as a base class for numeric
        properties, like wxIntProperty, wxUIntProperty, wxFloatProperty.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    virtual
    ~wxNumericProperty();

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

    virtual
    wxPGVariant AddSpinStepValue(
        long stepScale
    ) const = 0;
    %Docstring
        AddSpinStepValue(stepScale) -> PGVariant
        
        Returns what would be the new value of the property after adding
        SpinCtrl editor step to the current value.
    %End

    bool UseSpinMotion() const;
    %Docstring
        UseSpinMotion() -> bool
        
        Return true if value can be changed with SpinCtrl editor by moving the
        mouse.
    %End

    private:
        wxNumericProperty();



protected:
    wxNumericProperty(
        const wxString & label,
        const wxString & name
    );

};  // end of class wxNumericProperty


class wxNumericPropertyValidator : wxValidator
{
    %Docstring
        NumericPropertyValidator(numericType, base=10) -> None
        
        A more comprehensive numeric validator class.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    enum NumericType
    {
        Signed,
        Unsigned,
        Float    
    };

    wxNumericPropertyValidator(
        NumericType numericType,
        int base = 10
    );

    virtual
    ~wxNumericPropertyValidator();

    virtual
    bool Validate(
        wxWindow * parent
    );
    %Docstring
        Validate(parent) -> bool
        
        Validates the window contents against the include or exclude lists, depending on the validator style.
    %End

};  // end of class wxNumericPropertyValidator


class wxIntProperty : wxNumericProperty
{
    %Docstring
        IntProperty(label=PG_LABEL, name=PG_LABEL, value=0) -> None
        IntProperty(label, name, value) -> None
        
        Basic property with integer value.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxIntProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        long value = 0
    );

    wxIntProperty(
        const wxString & label,
        const wxString & name,
        const wxLongLong & value
    );

    virtual
    ~wxIntProperty();

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    bool ValidateValue(
        wxPGVariant & value,
        wxPGValidationInfo & validationInfo
    ) const;
    %Docstring
        ValidateValue(value, validationInfo) -> bool
        
        Implement this function in derived class to check the value.
    %End

    virtual
    bool IntToValue(
        wxPGVariant & variant   /Out/,
        int number,
        int argFlags = 0
    ) const;
    %Docstring
        IntToValue(number, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts integer (possibly a choice selection) into wxVariant value
        appropriate for this property.
    %End

    virtual
    wxValidator * DoGetValidator() const;
    %Docstring
        DoGetValidator() -> wx.Validator
        
        Returns pointer to the wxValidator that should be used with the editor
        of this property (NULL for no validator).
    %End

    virtual
    wxPGVariant AddSpinStepValue(
        long stepScale
    ) const;
    %Docstring
        AddSpinStepValue(stepScale) -> PGVariant
        
        Returns what would be the new value of the property after adding
        SpinCtrl editor step to the current value.
    %End

    static
    wxValidator * GetClassValidator();
    %Docstring
        GetClassValidator() -> wx.Validator
    %End

};  // end of class wxIntProperty


class wxUIntProperty : wxNumericProperty
{
    %Docstring
        UIntProperty(label=PG_LABEL, name=PG_LABEL, value=0) -> None
        UIntProperty(label, name, value) -> None
        
        Basic property with unsigned integer value.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxUIntProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        unsigned long value = 0
    );

    wxUIntProperty(
        const wxString & label,
        const wxString & name,
        const wxULongLong & value
    );

    virtual
    ~wxUIntProperty();

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

    virtual
    bool ValidateValue(
        wxPGVariant & value,
        wxPGValidationInfo & validationInfo
    ) const;
    %Docstring
        ValidateValue(value, validationInfo) -> bool
        
        Implement this function in derived class to check the value.
    %End

    virtual
    wxValidator * DoGetValidator() const;
    %Docstring
        DoGetValidator() -> wx.Validator
        
        Returns pointer to the wxValidator that should be used with the editor
        of this property (NULL for no validator).
    %End

    virtual
    bool IntToValue(
        wxPGVariant & variant   /Out/,
        int number,
        int argFlags = 0
    ) const;
    %Docstring
        IntToValue(number, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts integer (possibly a choice selection) into wxVariant value
        appropriate for this property.
    %End

    virtual
    wxPGVariant AddSpinStepValue(
        long stepScale
    ) const;
    %Docstring
        AddSpinStepValue(stepScale) -> PGVariant
        
        Returns what would be the new value of the property after adding
        SpinCtrl editor step to the current value.
    %End

};  // end of class wxUIntProperty


class wxFloatProperty : wxNumericProperty
{
    %Docstring
        FloatProperty(label=PG_LABEL, name=PG_LABEL, value=0.0) -> None
        
        Basic property with double-precision floating point value.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxFloatProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        double value = 0.0
    );

    virtual
    ~wxFloatProperty();

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

    virtual
    bool ValidateValue(
        wxPGVariant & value,
        wxPGValidationInfo & validationInfo
    ) const;
    %Docstring
        ValidateValue(value, validationInfo) -> bool
        
        Implement this function in derived class to check the value.
    %End

    virtual
    wxValidator * DoGetValidator() const;
    %Docstring
        DoGetValidator() -> wx.Validator
        
        Returns pointer to the wxValidator that should be used with the editor
        of this property (NULL for no validator).
    %End

    virtual
    wxPGVariant AddSpinStepValue(
        long stepScale
    ) const;
    %Docstring
        AddSpinStepValue(stepScale) -> PGVariant
        
        Returns what would be the new value of the property after adding
        SpinCtrl editor step to the current value.
    %End

    static
    wxValidator * GetClassValidator();
    %Docstring
        GetClassValidator() -> wx.Validator
    %End

};  // end of class wxFloatProperty


class wxBoolProperty : wxPGProperty
{
    %Docstring
        BoolProperty(label=PG_LABEL, name=PG_LABEL, value=False) -> None
        
        Basic property with boolean value.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxBoolProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        bool value = false
    );

    virtual
    ~wxBoolProperty();

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    bool IntToValue(
        wxPGVariant & variant   /Out/,
        int number,
        int argFlags = 0
    ) const;
    %Docstring
        IntToValue(number, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts integer (possibly a choice selection) into wxVariant value
        appropriate for this property.
    %End

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

};  // end of class wxBoolProperty


class wxEnumProperty : wxPGProperty
{
    %Docstring
        EnumProperty(label, name, choices, value=0) -> None
        EnumProperty(label=PG_LABEL, name=PG_LABEL, labels=[], values=[], value=0) -> None
        
        You can derive custom properties with choices from this class.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxEnumProperty(
        const wxString & label,
        const wxString & name,
        wxPGChoices & choices,
        int value = 0
    );

    wxEnumProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        const wxArrayString & labels = wxArrayString(),
        const wxArrayInt & values = wxArrayInt(),
        int value = 0
    );

    virtual
    ~wxEnumProperty();

    size_t GetItemCount() const;
    %Docstring
        GetItemCount() -> int
    %End

    virtual
    void OnSetValue();
    %Docstring
        OnSetValue() -> None
        
        This virtual function is called after m_value has been set.
    %End

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    bool ValidateValue(
        wxPGVariant & value,
        wxPGValidationInfo & validationInfo
    ) const;
    %Docstring
        ValidateValue(value, validationInfo) -> bool
        
        Implement this function in derived class to check the value.
    %End

    virtual
    bool IntToValue(
        wxPGVariant & variant   /Out/,
        int number,
        int argFlags = 0
    ) const;
    %Docstring
        IntToValue(number, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts integer (possibly a choice selection) into wxVariant value
        appropriate for this property.
    %End

    virtual
    int GetIndexForValue(
        int value
    ) const;
    %Docstring
        GetIndexForValue(value) -> int
    %End

    virtual
    int GetChoiceSelection() const;
    %Docstring
        GetChoiceSelection() -> int
        
        Returns which choice is currently selected.
    %End

    public:


    %Property(name=ChoiceSelection, get=GetChoiceSelection)
    %Property(name=ItemCount, get=GetItemCount)
};  // end of class wxEnumProperty


class wxEditEnumProperty : wxEnumProperty
{
    %Docstring
        EditEnumProperty(label=PG_LABEL, name=PG_LABEL, labels=[], values=[], value='') -> None
        EditEnumProperty(label, name, choices, value='') -> None
        
        wxEnumProperty with wxString value and writable combo box editor.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxEditEnumProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        const wxArrayString & labels = wxArrayString(),
        const wxArrayInt & values = wxArrayInt(),
        const wxString & value = wxEmptyString
    );

    wxEditEnumProperty(
        const wxString & label,
        const wxString & name,
        wxPGChoices & choices,
        const wxString & value = wxEmptyString
    );

    virtual
    ~wxEditEnumProperty();

};  // end of class wxEditEnumProperty


class wxFlagsProperty : wxPGProperty
{
    %Docstring
        FlagsProperty(label, name, choices, value=0) -> None
        FlagsProperty(label=PG_LABEL, name=PG_LABEL, labels=[], values=[], value=0) -> None
        
        Represents a bit set that fits in a long integer.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxFlagsProperty(
        const wxString & label,
        const wxString & name,
        wxPGChoices & choices,
        long value = 0
    );

    wxFlagsProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        const wxArrayString & labels = wxArrayString(),
        const wxArrayInt & values = wxArrayInt(),
        int value = 0
    );

    virtual
    ~wxFlagsProperty();

    virtual
    void OnSetValue();
    %Docstring
        OnSetValue() -> None
        
        This virtual function is called after m_value has been set.
    %End

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags
    ) const;
    %Docstring
        StringToValue(text, argFlags) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    wxPGVariant ChildChanged(
        wxPGVariant & thisValue,
        int childIndex,
        wxPGVariant & childValue
    ) const;
    %Docstring
        ChildChanged(thisValue, childIndex, childValue) -> PGVariant
        
        Called after value of a child property has been altered.
    %End

    virtual
    void RefreshChildren();
    %Docstring
        RefreshChildren() -> None
        
        Refresh values of child properties.
    %End

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

    virtual
    int GetChoiceSelection() const;
    %Docstring
        GetChoiceSelection() -> int
        
        Returns which choice is currently selected.
    %End

    size_t GetItemCount() const;
    %Docstring
        GetItemCount() -> int
    %End

    const wxString & GetLabel(
        size_t ind
    ) const;
    %Docstring
        GetLabel(ind) -> str
    %End

    public:


    %Property(name=ChoiceSelection, get=GetChoiceSelection)
    %Property(name=ItemCount, get=GetItemCount)
};  // end of class wxFlagsProperty


class wxEditorDialogProperty : wxPGProperty
{
    %Docstring
        EditorDialogProperty(label, name) -> None
        
        This is an abstract class which serves as a base class for the
        properties having a button triggering an editor dialog, like e.g.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    virtual
    ~wxEditorDialogProperty();

    virtual
    wxPGEditorDialogAdapter * GetEditorDialog() const;
    %Docstring
        GetEditorDialog() -> PGEditorDialogAdapter
        
        Returns instance of a new wxPGEditorDialogAdapter instance, which is
        used when user presses the (optional) button next to the editor
        control;.
    %End

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

    private:
        wxEditorDialogProperty();


    public:


    %Property(name=EditorDialog, get=GetEditorDialog)

protected:
    wxEditorDialogProperty(
        const wxString & label,
        const wxString & name
    );

    virtual
    bool DisplayEditorDialog(
        wxPropertyGrid * pg,
        wxPGVariant & value
    ) = 0;
    %Docstring
        DisplayEditorDialog(pg, value) -> bool
        
        Shows editor dialog.
    %End

};  // end of class wxEditorDialogProperty


class wxFileProperty : wxEditorDialogProperty
{
    %Docstring
        FileProperty(label=PG_LABEL, name=PG_LABEL, value='') -> None
        
        Like wxLongStringProperty, but the button triggers file selector
        instead.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxFileProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        const wxString & value = wxEmptyString
    );

    virtual
    ~wxFileProperty();

    virtual
    void OnSetValue();
    %Docstring
        OnSetValue() -> None
        
        This virtual function is called after m_value has been set.
    %End

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

    virtual
    wxValidator * DoGetValidator() const;
    %Docstring
        DoGetValidator() -> wx.Validator
        
        Returns pointer to the wxValidator that should be used with the editor
        of this property (NULL for no validator).
    %End

    wxFileName GetFileName() const;
    %Docstring
        GetFileName() -> str
        
        Returns filename to file represented by current value.
    %End

    static
    wxValidator * GetClassValidator();
    %Docstring
        GetClassValidator() -> wx.Validator
    %End

    public:


    %Property(name=FileName, get=GetFileName)

protected:
    virtual
    bool DisplayEditorDialog(
        wxPropertyGrid * pg,
        wxPGVariant & value   /In, Out/
    );
    %Docstring
        DisplayEditorDialog(pg, value) -> Tuple[bool, PGVariant]
        
        Shows editor dialog.
    %End

};  // end of class wxFileProperty


class wxLongStringProperty : wxEditorDialogProperty
{
    %Docstring
        LongStringProperty(label=PG_LABEL, name=PG_LABEL, value='') -> None
        
        Like wxStringProperty, but has a button that triggers a small text
        editor dialog.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxLongStringProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        const wxString & value = wxEmptyString
    );

    virtual
    ~wxLongStringProperty();

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End


protected:
    virtual
    bool DisplayEditorDialog(
        wxPropertyGrid * pg,
        wxPGVariant & value   /In, Out/
    );
    %Docstring
        DisplayEditorDialog(pg, value) -> Tuple[bool, PGVariant]
        
        Shows editor dialog.
    %End

};  // end of class wxLongStringProperty


class wxDirProperty : wxEditorDialogProperty
{
    %Docstring
        DirProperty(label=PG_LABEL, name=PG_LABEL, value='') -> None
        
        Like wxLongStringProperty, but the button triggers directory selector
        instead.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxDirProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        const wxString & value = wxEmptyString
    );

    virtual
    ~wxDirProperty();

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    wxValidator * DoGetValidator() const;
    %Docstring
        DoGetValidator() -> wx.Validator
        
        Returns pointer to the wxValidator that should be used with the editor
        of this property (NULL for no validator).
    %End


protected:
    virtual
    bool DisplayEditorDialog(
        wxPropertyGrid * pg,
        wxPGVariant & value   /In, Out/
    );
    %Docstring
        DisplayEditorDialog(pg, value) -> Tuple[bool, PGVariant]
        
        Shows editor dialog.
    %End

};  // end of class wxDirProperty


class wxArrayStringProperty : wxEditorDialogProperty
{
    %Docstring
        ArrayStringProperty(label=PG_LABEL, name=PG_LABEL, value=[]) -> None
        
        Property that manages a list of strings.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    enum ConversionFlags
    {
        Escape,
        QuoteStrings    
    };

    wxArrayStringProperty(
        const wxString & label = wxPG_LABEL,
        const wxString & name = wxPG_LABEL,
        const wxArrayString & value = wxArrayString()
    );

    virtual
    ~wxArrayStringProperty();

    virtual
    void OnSetValue();
    %Docstring
        OnSetValue() -> None
        
        This virtual function is called after m_value has been set.
    %End

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> str
        
        Converts property value into a text representation.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> Tuple[bool, PGVariant]
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

    virtual
    wxString ConvertArrayToString(
        const wxArrayString & arr,
        const wxUniChar & delimiter
    ) const;
    %Docstring
        ConvertArrayToString(arr, delimiter) -> str
        
        Implement in derived class for custom array-to-string conversion.
    %End

    virtual
    bool OnCustomStringEdit(
        wxWindow * parent,
        wxString & value
    );
    %Docstring
        OnCustomStringEdit(parent, value) -> bool
        
        Shows string editor dialog to edit the individual item.
    %End

    virtual
    wxPGArrayEditorDialog * CreateEditorDialog();
    %Docstring
        CreateEditorDialog() -> PGArrayEditorDialog
        
        Creates wxPGArrayEditorDialog for string editing.
    %End

    static
    wxString ArrayStringToString(
        const wxArrayString & src,
        wxUniChar delimiter,
        int flags
    );
    %Docstring
        ArrayStringToString(src, delimiter, flags) -> str
        
        Generates string based on the contents of wxArrayString src.
    %End


protected:
    virtual
    bool DisplayEditorDialog(
        wxPropertyGrid * pg,
        wxPGVariant & value   /In, Out/
    );
    %Docstring
        DisplayEditorDialog(pg, value) -> Tuple[bool, PGVariant]
        
        Shows editor dialog.
    %End

    virtual
    void GenerateValueAsString();
    %Docstring
        GenerateValueAsString() -> None
        
        Previously this was to be implemented in derived class for array-to-
        string conversion.
    %End

};  // end of class wxArrayStringProperty


class wxPGArrayEditorDialog : wxDialog
{
    %Docstring
        PGArrayEditorDialog() -> None
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxPGArrayEditorDialog();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxPGArrayEditorDialog();

    void Init();
    %Docstring
        Init() -> None
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        const wxString & message,
        const wxString & caption,
        long style = wxAEDIALOG_STYLE,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & sz = wxDefaultSize
    );
    %Docstring
        Create(parent, message, caption, style=AEDIALOG_STYLE, pos=wx.DefaultPosition, sz=wx.DefaultSize) -> bool
    %End

    void EnableCustomNewAction();
    %Docstring
        EnableCustomNewAction() -> None
    %End

    void SetNewButtonText(
        const wxString & text
    );
    %Docstring
        SetNewButtonText(text) -> None
        
        Sets tooltip text for button allowing the user to enter new string.
    %End

    virtual
    void SetDialogValue(
        const wxPGVariant & value
    );
    %Docstring
        SetDialogValue(value) -> None
        
        Set value modified by dialog.
    %End

    virtual
    wxPGVariant GetDialogValue() const;
    %Docstring
        GetDialogValue() -> PGVariant
        
        Return value modified by dialog.
    %End

    virtual
    wxValidator * GetTextCtrlValidator() const;
    %Docstring
        GetTextCtrlValidator() -> wx.Validator
        
        Override to return wxValidator to be used with the wxTextCtrl in
        dialog.
    %End

    bool IsModified() const;
    %Docstring
        IsModified() -> bool
        
        Returns true if array was actually modified.
    %End

    int GetSelection() const;
    %Docstring
        GetSelection() -> int
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=DialogValue, get=GetDialogValue, set=SetDialogValue)
    %Property(name=Selection, get=GetSelection)
    %Property(name=TextCtrlValidator, get=GetTextCtrlValidator)

protected:
    virtual
    wxString ArrayGet(
        size_t index
    ) = 0;
    %Docstring
        ArrayGet(index) -> str
    %End

    virtual
    size_t ArrayGetCount() = 0;
    %Docstring
        ArrayGetCount() -> int
    %End

    virtual
    bool ArrayInsert(
        const wxString & str,
        int index
    ) = 0;
    %Docstring
        ArrayInsert(str, index) -> bool
    %End

    virtual
    bool ArraySet(
        size_t index,
        const wxString & str
    ) = 0;
    %Docstring
        ArraySet(index, str) -> bool
    %End

    virtual
    void ArrayRemoveAt(
        int index
    ) = 0;
    %Docstring
        ArrayRemoveAt(index) -> None
    %End

    virtual
    void ArraySwap(
        size_t first,
        size_t second
    ) = 0;
    %Docstring
        ArraySwap(first, second) -> None
    %End

    virtual
    bool OnCustomNewAction(
        wxString * resString
    );
    %Docstring
        OnCustomNewAction(resString) -> bool
    %End

};  // end of class wxPGArrayEditorDialog


class wxPGArrayStringEditorDialog : wxPGArrayEditorDialog
{
    %Docstring
        PGArrayStringEditorDialog() -> None
    %End
    %TypeHeaderCode
        #include <wx/propgrid/props.h>
    %End

public:
    wxPGArrayStringEditorDialog();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxPGArrayStringEditorDialog();

    void Init();
    %Docstring
        Init() -> None
    %End

    virtual
    void SetDialogValue(
        const wxPGVariant & value
    );
    %Docstring
        SetDialogValue(value) -> None
        
        Set value modified by dialog.
    %End

    virtual
    wxPGVariant GetDialogValue() const;
    %Docstring
        GetDialogValue() -> PGVariant
        
        Return value modified by dialog.
    %End

    void SetCustomButton(
        const wxString & custBtText,
        wxArrayStringProperty * pcc
    );
    %Docstring
        SetCustomButton(custBtText, pcc) -> None
    %End

    virtual
    bool OnCustomNewAction(
        wxString * resString
    );
    %Docstring
        OnCustomNewAction(resString) -> bool
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=DialogValue, get=GetDialogValue, set=SetDialogValue)

protected:
    virtual
    wxString ArrayGet(
        size_t index
    );
    %Docstring
        ArrayGet(index) -> str
    %End

    virtual
    size_t ArrayGetCount();
    %Docstring
        ArrayGetCount() -> int
    %End

    virtual
    bool ArrayInsert(
        const wxString & str,
        int index
    );
    %Docstring
        ArrayInsert(str, index) -> bool
    %End

    virtual
    bool ArraySet(
        size_t index,
        const wxString & str
    );
    %Docstring
        ArraySet(index, str) -> bool
    %End

    virtual
    void ArrayRemoveAt(
        int index
    );
    %Docstring
        ArrayRemoveAt(index) -> None
    %End

    virtual
    void ArraySwap(
        size_t first,
        size_t second
    );
    %Docstring
        ArraySwap(first, second) -> None
    %End

};  // end of class wxPGArrayStringEditorDialog



//---------------------------------------------------------------------------

