# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class NetworkPipe(BaseModel):
    """
    NetworkPipe
    """ # noqa: E501
    xid: StrictStr = Field(description="xecta unique identifier")
    source_network_id: StrictStr = Field(description="SourceNetworkId the pipe belongs to", alias="sourceNetworkId")
    source_id: StrictStr = Field(description="Source ID for the pipe definition. This sourceID enables upsert functionality from client source systems of record", alias="sourceId")
    var_date: datetime = Field(description="Date at which the pipe becomes part of the network. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="date")
    upstream_source_id: StrictStr = Field(description="Network element upstream of the pipe", alias="upstreamSourceId")
    downstream_source_id: StrictStr = Field(description="Network element downstream of the pipe", alias="downstreamSourceId")
    enabled: StrictBool = Field(description="Whether the pipe should participate in the network (false would be the equivalent of a mask in GAP)")
    length: List[Union[StrictFloat, StrictInt]] = Field(description="List of lengths making up the pipe segments (ft). All pipe property lists must be the same length.")
    true_vertical_depth: List[Union[StrictFloat, StrictInt]] = Field(description="List of true vertical depths making up the pipe segments (ft). All pipe property lists must be the same length.", alias="trueVerticalDepth")
    inner_diameter: List[Union[StrictFloat, StrictInt]] = Field(description="List of inner diameters making up the pipe segments (in). All pipe property lists must be the same length.", alias="innerDiameter")
    roughness: List[Union[StrictFloat, StrictInt]] = Field(description="List of absolute roughness values making up the pipe segments, in. All pipe property lists must be the same length.")
    __properties: ClassVar[List[str]] = ["xid", "sourceNetworkId", "sourceId", "date", "upstreamSourceId", "downstreamSourceId", "enabled", "length", "trueVerticalDepth", "innerDiameter", "roughness"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkPipe from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkPipe from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "xid": obj.get("xid"),
            "sourceNetworkId": obj.get("sourceNetworkId"),
            "sourceId": obj.get("sourceId"),
            "date": obj.get("date"),
            "upstreamSourceId": obj.get("upstreamSourceId"),
            "downstreamSourceId": obj.get("downstreamSourceId"),
            "enabled": obj.get("enabled"),
            "length": obj.get("length"),
            "trueVerticalDepth": obj.get("trueVerticalDepth"),
            "innerDiameter": obj.get("innerDiameter"),
            "roughness": obj.get("roughness")
        })
        return _obj


