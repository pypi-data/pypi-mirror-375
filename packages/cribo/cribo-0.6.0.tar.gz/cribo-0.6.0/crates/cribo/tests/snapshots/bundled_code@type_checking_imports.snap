---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/type_checking_imports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
module_a = _cribo.types.SimpleNamespace(__name__='module_a')
"""Module A with a simple function."""
def function_a(value):
    """Process a value."""
    return f"Processed: {value}"
module_a.function_a = function_a
module_b = _cribo.types.SimpleNamespace(__name__='module_b')
"""Module B with a type definition."""
class TypeB:
    """A type that's only used for type hints."""

    def __init__(self, value: str):
        self.value = value

    def __str__(self):
        return self.value
TypeB.__module__ = 'module_b'
"""Test case for TYPE_CHECKING blocks that only contain imports."""
if _cribo.typing.TYPE_CHECKING:
    pass
def use_function(x: "TypeB") -> str:
    """Use the function from module_a with type hint from module_b."""
    return function_a(x)
if __name__ == "__main__":
    print(use_function("test"))
