from _typeshed import Incomplete
from collections.abc import Callable, Iterator
from typing import overload

__all__ = ['Box']

class Box[T]:
    __match_args__: Incomplete
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, item: T) -> None: ...
    def __bool__(self) -> bool: ...
    def __iter__(self) -> Iterator[T]: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def get(self) -> T: ...
    @overload
    def get(self, alt: T) -> T: ...
    def pop(self) -> T: ...
    def push(self, item: T) -> None: ...
    def put(self, item: T) -> None: ...
    def exchange(self, new_item: T) -> T: ...
    def map[U](self, f: Callable[[T], U]) -> Box[U]: ...
    def bind[U](self, f: Callable[[T], 'Box[U]']) -> Box[U]: ...
