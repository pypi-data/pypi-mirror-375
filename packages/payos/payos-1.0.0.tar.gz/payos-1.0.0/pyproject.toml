[project]
name = "payos"
version = "1.0.0"
description = "payOS Python SDK"
readme = "README.md"
requires-python = ">=3.9"
authors = [{ name = "payOS Team", email = "support@payos.vn" }]
keywords = ["payos", "payment", "payos-python", "sdk", "python"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Office/Business :: Financial",
]
dependencies = ["httpx>=0.24.0", "typing-extensions>=4.0.0", "pydantic>=2.11.7"]

[project.urls]
Homepage = "https://payos.vn"
Documentation = "https://payos.vn/docs"
Repository = "https://github.com/payOSHQ/payos-lib-python"
"Bug Tracker" = "https://github.com/payOSHQ/payos-lib-python/issues"

[build-system]
requires = ["uv_build>=0.8.15,<0.9.0"]
build-backend = "uv_build"

[tool.hatch.build.targets.sdist]
include = ["src/payos", "README.md", "LICENSE*"]

[tool.hatch.build.targets.wheel]
packages = ["src/payos"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["payos"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
line-length = 100
target-version = "py39"
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
lint.ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.poe.tasks]
# Development tasks
"format:ruff" = [{ cmd = "ruff format" }]
"check:ruff" = [{ cmd = "ruff check ./src" }]
"fix:ruff" = [{ cmd = "ruff check --fix ./src" }]
"check:importable" = [{ cmd = "python -c 'import payos'" }]
"typecheck" = [{ cmd = "mypy ./src" }]
format = ["fix:ruff", "format:ruff"]
lint = ["check:ruff", "typecheck", "check:importable"]

# Combined tasks
check = ["format", "lint"]
ci = ["lint"]

# Utility tasks
clean = "rm -rf dist/ build/ *.egg-info/ .coverage htmlcov/ .pytest_cache/ .mypy_cache/"
install-dev = "uv sync --group dev"
"sync-version" = [{ cmd = "python scripts/sync-version.py" }]
build = ["sync-version", "clean", { cmd = "uv build --no-sources" }]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-httpx>=0.35.0",
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.17.1",
    "ruff>=0.12.11",
    "poethepoet>=0.37.0",
]
example = ["flask>=3.1.2", "python-dotenv>=1.1.1"]
