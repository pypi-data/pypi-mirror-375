name: Python Package CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dev dependencies
        run: uv sync --dev

      - name: Run pre-commit checks
        run: uv run pre-commit run --all-files

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: uv run pytest

  check_version:
    name: Check Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install helper dependencies
        run: pip install toml packaging

      - name: Check version on PyPI
        shell: python
        run: |
          import json
          import sys
          import urllib.error
          import urllib.request

          import toml
          from packaging.version import Version

          data = toml.load("pyproject.toml")

          if "project" in data:
              proj = data["project"]
          else:
              print("::error::No [project] section found in pyproject.toml")
              sys.exit(1)

          name = proj["name"]
          version = str(Version(proj["version"]))

          print(f"Checking {name} {version} on PyPI...")

          try:
              with urllib.request.urlopen(f"https://pypi.org/pypi/{name}/json") as r:
                  pkg_data = json.load(r)
          except urllib.error.HTTPError:
              print('Package not found on PyPI — safe to publish.')
              sys.exit(0)

          if version in pkg_data.get("releases", {}):
              print(f"::error::Version {version} already exists on PyPI.")
              sys.exit(1)

          print('Version is free — continuing.')

  build_wheel:
    name: Build Wheel
    needs: [lint, check_version, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync

      - name: Build wheel and sdist
        run: uv build

      - name: Extract version
        id: get_version
        run: |
          pip install toml
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ env.VERSION }}
          path: dist/

  publish_wheel:
    name: Publish Wheel
    needs: build_wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Extract version
        id: get_version
        run: |
          pip install toml
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ env.VERSION }}
          path: dist

      - name: Publish to PyPI
        env:
          UV_PUBLISH_USERNAME: __token__
          UV_PUBLISH_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: uv publish
