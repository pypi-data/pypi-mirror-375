---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/ast_rewriting_variable_name_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
constants = _cribo.types.SimpleNamespace(__name__='constants')
"""\nConstants module with global variables.\nThese will conflict with config.py when bundled.\n"""
API_URL_2 = "https://api.constants.com"
VERSION_2 = "1.0.0"
DEFAULT_TIMEOUT = 30
constants.API_URL = API_URL_2
constants.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT
constants.VERSION = VERSION_2
config = _cribo.types.SimpleNamespace(__name__='config')
"""\nConfig module with global variables.\nThese will conflict with constants.py when bundled.\n"""
API_URL_1 = "https://api.config.com"
VERSION_1 = "2.1.0"
MAX_RETRIES = 3
config.API_URL = API_URL_1
config.MAX_RETRIES = MAX_RETRIES
config.VERSION = VERSION_1
"""\nVariable name collision test.\nBoth modules define variables with the same names.\n"""
API_URL = constants.API_URL
VERSION = constants.VERSION
CONFIG_API_URL = config.API_URL
CONFIG_VERSION = config.VERSION
def main():
    print(f"Constants API URL: {API_URL}")
    print(f"Config API URL: {CONFIG_API_URL}")
    print(f"Constants Version: {VERSION}")
    print(f"Config Version: {CONFIG_VERSION}")
    print(f"Default Timeout: {DEFAULT_TIMEOUT}")
    print(f"Max Retries: {MAX_RETRIES}")
    return {"constants_api_url": API_URL, "config_api_url": CONFIG_API_URL, "constants_version": VERSION, "config_version": CONFIG_VERSION, "default_timeout": DEFAULT_TIMEOUT, "max_retries": MAX_RETRIES}
if __name__ == "__main__":
    result = main()
    print("Result:", result)
