# coding: utf-8

"""
    Apollo OpenAPI

    Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from apollo_openapi.api.app_management_api import AppManagementApi


class TestAppManagementApi(unittest.TestCase):
    """AppManagementApi unit test stubs"""

    def setUp(self) -> None:
        self.api = AppManagementApi()

    def tearDown(self) -> None:
        pass

    def test_openapi_v1_apps_app_id_appnamespaces_namespace_name_delete(self) -> None:
        """Test case for openapi_v1_apps_app_id_appnamespaces_namespace_name_delete

        删除AppNamespace
        """
        pass

    def test_openapi_v1_apps_app_id_delete(self) -> None:
        """Test case for openapi_v1_apps_app_id_delete

        删除应用
        """
        pass

    def test_openapi_v1_apps_app_id_env_clusters_get(self) -> None:
        """Test case for openapi_v1_apps_app_id_env_clusters_get

        获取应用的环境集群信息
        """
        pass

    def test_openapi_v1_apps_app_id_envs_env_clusters_cluster_name_namespaces_namespace_name_links_delete(self) -> None:
        """Test case for openapi_v1_apps_app_id_envs_env_clusters_cluster_name_namespaces_namespace_name_links_delete

        删除关联的Namespace
        """
        pass

    def test_openapi_v1_apps_app_id_get(self) -> None:
        """Test case for openapi_v1_apps_app_id_get

        获取单个应用信息
        """
        pass

    def test_openapi_v1_apps_app_id_miss_envs_get(self) -> None:
        """Test case for openapi_v1_apps_app_id_miss_envs_get

        查找缺失的环境
        """
        pass

    def test_openapi_v1_apps_app_id_namespaces_releases_status_get(self) -> None:
        """Test case for openapi_v1_apps_app_id_namespaces_releases_status_get

        获取应用下所有Namespace的发布状态
        """
        pass

    def test_openapi_v1_apps_app_id_navtree_get(self) -> None:
        """Test case for openapi_v1_apps_app_id_navtree_get

        获取应用导航树
        """
        pass

    def test_openapi_v1_apps_app_id_put(self) -> None:
        """Test case for openapi_v1_apps_app_id_put

        更新应用
        """
        pass

    def test_openapi_v1_apps_by_self_get(self) -> None:
        """Test case for openapi_v1_apps_by_self_get

        获取当前Consumer的应用列表（分页）
        """
        pass

    def test_openapi_v1_apps_envs_env_post(self) -> None:
        """Test case for openapi_v1_apps_envs_env_post

        在指定环境创建应用
        """
        pass

    def test_openapi_v1_apps_get(self) -> None:
        """Test case for openapi_v1_apps_get

        获取当前Consumer授权的应用列表
        """
        pass

    def test_openapi_v1_apps_post(self) -> None:
        """Test case for openapi_v1_apps_post

        创建应用
        """
        pass


if __name__ == '__main__':
    unittest.main()
