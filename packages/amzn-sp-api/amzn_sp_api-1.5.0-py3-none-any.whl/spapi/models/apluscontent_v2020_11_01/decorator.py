# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Decorator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'DecoratorType',
        'offset': 'int',
        'length': 'int',
        'depth': 'int',
    }

    attribute_map = {
        'type': 'type',
        'offset': 'offset',
        'length': 'length',
        'depth': 'depth',
    }

    def __init__(self, type=None, offset=None, length=None, depth=None, _configuration=None):  # noqa: E501
        """Decorator - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._offset = None
        self._length = None
        self._depth = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if offset is not None:
            self.offset = offset
        if length is not None:
            self.length = length
        if depth is not None:
            self.depth = depth

    @property
    def type(self):
        """Gets the type of this Decorator.  # noqa: E501


        :return: The type of this Decorator.  # noqa: E501
        :rtype: DecoratorType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Decorator.


        :param type: The type of this Decorator.  # noqa: E501
        :type: DecoratorType
        """

        self._type = type

    @property
    def offset(self):
        """Gets the offset of this Decorator.  # noqa: E501

        The starting value of this decorator within the content string. Use zero (`0`) for the first value.  # noqa: E501

        :return: The offset of this Decorator.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Decorator.

        The starting value of this decorator within the content string. Use zero (`0`) for the first value.  # noqa: E501

        :param offset: The offset of this Decorator.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                offset is not None and offset > 10000):  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                offset is not None and offset < 0):  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")  # noqa: E501

        self._offset = offset

    @property
    def length(self):
        """Gets the length of this Decorator.  # noqa: E501

        The number of content characters to alter with this decorator. Decorators, such as line breaks, can have zero length and fit between characters.  # noqa: E501

        :return: The length of this Decorator.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Decorator.

        The number of content characters to alter with this decorator. Decorators, such as line breaks, can have zero length and fit between characters.  # noqa: E501

        :param length: The length of this Decorator.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                length is not None and length > 10000):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                length is not None and length < 0):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._length = length

    @property
    def depth(self):
        """Gets the depth of this Decorator.  # noqa: E501

        The relative intensity or variation of this decorator. Decorators, such as bullet-points, can have multiple indentation depths.  # noqa: E501

        :return: The depth of this Decorator.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this Decorator.

        The relative intensity or variation of this decorator. Decorators, such as bullet-points, can have multiple indentation depths.  # noqa: E501

        :param depth: The depth of this Decorator.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                depth is not None and depth > 100):  # noqa: E501
            raise ValueError("Invalid value for `depth`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                depth is not None and depth < 0):  # noqa: E501
            raise ValueError("Invalid value for `depth`, must be a value greater than or equal to `0`")  # noqa: E501

        self._depth = depth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Decorator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Decorator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Decorator):
            return True

        return self.to_dict() != other.to_dict()
