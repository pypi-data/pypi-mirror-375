# coding: utf-8

"""
    The Selling Partner API for Transfers.

    The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetPaymentMethodsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_methods': 'List[PaymentMethodDetails]',
    }

    attribute_map = {
        'payment_methods': 'paymentMethods',
    }

    def __init__(self, payment_methods=None, _configuration=None):  # noqa: E501
        """GetPaymentMethodsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._payment_methods = None
        self.discriminator = None

        if payment_methods is not None:
            self.payment_methods = payment_methods

    @property
    def payment_methods(self):
        """Gets the payment_methods of this GetPaymentMethodsResponse.  # noqa: E501

        The list of payment methods with payment method details.  # noqa: E501

        :return: The payment_methods of this GetPaymentMethodsResponse.  # noqa: E501
        :rtype: List[PaymentMethodDetails]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this GetPaymentMethodsResponse.

        The list of payment methods with payment method details.  # noqa: E501

        :param payment_methods: The payment_methods of this GetPaymentMethodsResponse.  # noqa: E501
        :type: List[PaymentMethodDetails]
        """

        self._payment_methods = payment_methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPaymentMethodsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPaymentMethodsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetPaymentMethodsResponse):
            return True

        return self.to_dict() != other.to_dict()
