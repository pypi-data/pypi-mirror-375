# coding: utf-8

"""
    Selling Partner API for Product Type Definitions

    The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](doc:product-type-api-use-case-guide).

    The version of the OpenAPI document: 2020-09-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PropertyGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'property_names': 'List[str]',
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'property_names': 'propertyNames',
    }

    def __init__(self, title=None, description=None, property_names=None, _configuration=None):  # noqa: E501
        """PropertyGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._description = None
        self._property_names = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if property_names is not None:
            self.property_names = property_names

    @property
    def title(self):
        """Gets the title of this PropertyGroup.  # noqa: E501

        The display label of the property group.  # noqa: E501

        :return: The title of this PropertyGroup.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PropertyGroup.

        The display label of the property group.  # noqa: E501

        :param title: The title of this PropertyGroup.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this PropertyGroup.  # noqa: E501

        The description of the property group.  # noqa: E501

        :return: The description of this PropertyGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PropertyGroup.

        The description of the property group.  # noqa: E501

        :param description: The description of this PropertyGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def property_names(self):
        """Gets the property_names of this PropertyGroup.  # noqa: E501

        The names of the schema properties for the property group.  # noqa: E501

        :return: The property_names of this PropertyGroup.  # noqa: E501
        :rtype: List[str]
        """
        return self._property_names

    @property_names.setter
    def property_names(self, property_names):
        """Sets the property_names of this PropertyGroup.

        The names of the schema properties for the property group.  # noqa: E501

        :param property_names: The property_names of this PropertyGroup.  # noqa: E501
        :type: List[str]
        """

        self._property_names = property_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PropertyGroup):
            return True

        return self.to_dict() != other.to_dict()
