name: build-wheels

on:
  push:
    tags:
      - "v*.*.*"        # 打 tag 才會出包並發布
  workflow_dispatch:     # 也可手動觸發

jobs:
  # --- 1) sdist 只需建一次，用 Linux 即可 ---
  sdist:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build sdist
        run: |
          python -m pip install -U build
          python -m build --sdist --outdir dist
      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  # --- 2) 透過矩陣建 wheels ---
  wheels:
    # 用矩陣在 Linux / Windows 出輪子
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install cibuildwheel
        run: python -m pip install -U pip cibuildwheel

      - name: Enable QEMU (Linux only, for aarch64)
        if: runner.os == 'Linux'
        run: docker run --rm --privileged tonistiigi/binfmt --install arm64

      - name: Build wheels (Linux + Windows + macOS)
        env:
          # 依你專案需求調整
          CIBW_BUILD: "cp311-* cp312-* cp313-*"
          CIBW_SKIP: "pp*"                 # 跳過 PyPy（可選）
          CIBW_ENVIRONMENT: 'CFLAGS="-O3"'
          CIBW_TEST_SKIP: "*"              # 若無測試或跨架構先跳過

          # ===== Linux 設定 =====
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux_2_28_x86_64"
          CIBW_MANYLINUX_AARCH64_IMAGE: "quay.io/pypa/manylinux_2_28_aarch64"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: 'auditwheel repair --only-plat -w {dest_dir} {wheel}'

          # ===== Windows 設定 =====
          CIBW_ARCHS_WINDOWS: "AMD64"

          # ===== macOS =====
          # 建議用 universal2（單一 wheel 支援 x86_64+arm64）
          # 若想拆成兩顆則改成 "x86_64 arm64"
          CIBW_ARCHS_MACOS: "universal2"
          # 通常不必設，下行僅在你需要鎖定最低 macOS 版本時啟用
          # CIBW_ENVIRONMENT_MACOS: 'MACOSX_DEPLOYMENT_TARGET=11.0'
        run: cibuildwheel --output-dir wheelhouse

      - name: Upload wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  publish:
    name: Publish to PyPI (token)
    needs: [wheels, sdist]
    if: startsWith(github.ref, 'refs/tags/v')   # 只有打 tag 才發佈
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true      # 把多個 artifact 合併到 dist/

      # 下載 sdist
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist/

      - name: Twine check (optional but recommended)
        run: |
          python -m pip install -U twine
          python -m twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          packages-dir: dist        # 只含 wheels
          password: ${{ secrets.PYPI_API_TOKEN }}
          verify-metadata: false   # ← 關掉舊 Twine 的內建檢查
          attestations: false      # ← 用 token 時關掉，避免警告

      - name: Upload to private PyPI
        env:
          TWINE_REPOSITORY_URL: https://innolux-registry.duckdns.org/pypi/
          TWINE_USERNAME: ${{ secrets.PRIVATE_PYPI_USER }}
          TWINE_PASSWORD: ${{ secrets.PRIVATE_PYPI_PASS }}
        run: twine upload dist/*
