# coding: utf-8

"""
    Selling Partner API for Easy Ship

    Use the Selling Partner API for Easy Ship to build applications for sellers to manage and ship Amazon Easy Ship orders. With this API, you can get available time slots, schedule and reschedule Easy Ship orders, and print shipping labels, invoices, and warranties. To review the differences in Easy Ship operations by marketplace, refer to [Marketplace support](https://developer-docs.amazon.com/sp-api/docs/easyship-api-v2022-03-23-use-case-guide#marketplace-support).

    The version of the OpenAPI document: 2022-03-23
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class CreateScheduledPackagesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scheduled_packages': 'List[Package]',
        'rejected_orders': 'List[RejectedOrder]',
        'printable_documents_url': 'str',
    }

    attribute_map = {
        'scheduled_packages': 'scheduledPackages',
        'rejected_orders': 'rejectedOrders',
        'printable_documents_url': 'printableDocumentsUrl',
    }

    def __init__(self, scheduled_packages=None, rejected_orders=None, printable_documents_url=None, _configuration=None):  # noqa: E501
        """CreateScheduledPackagesResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._scheduled_packages = None
        self._rejected_orders = None
        self._printable_documents_url = None
        self.discriminator = None

        if scheduled_packages is not None:
            self.scheduled_packages = scheduled_packages
        if rejected_orders is not None:
            self.rejected_orders = rejected_orders
        if printable_documents_url is not None:
            self.printable_documents_url = printable_documents_url

    @property
    def scheduled_packages(self):
        """Gets the scheduled_packages of this CreateScheduledPackagesResponse.  # noqa: E501

        A list of packages. Refer to the `Package` object.  # noqa: E501

        :return: The scheduled_packages of this CreateScheduledPackagesResponse.  # noqa: E501
        :rtype: List[Package]
        """
        return self._scheduled_packages

    @scheduled_packages.setter
    def scheduled_packages(self, scheduled_packages):
        """Sets the scheduled_packages of this CreateScheduledPackagesResponse.

        A list of packages. Refer to the `Package` object.  # noqa: E501

        :param scheduled_packages: The scheduled_packages of this CreateScheduledPackagesResponse.  # noqa: E501
        :type: List[Package]
        """
        if (self._configuration.client_side_validation and
                scheduled_packages is not None and len(scheduled_packages) > 100):
            raise ValueError("Invalid value for `scheduled_packages`, number of items must be less than or equal to `100`")  # noqa: E501

        self._scheduled_packages = scheduled_packages

    @property
    def rejected_orders(self):
        """Gets the rejected_orders of this CreateScheduledPackagesResponse.  # noqa: E501

        A list of orders we couldn't scheduled on your behalf. Each element contains the reason and details on the error.  # noqa: E501

        :return: The rejected_orders of this CreateScheduledPackagesResponse.  # noqa: E501
        :rtype: List[RejectedOrder]
        """
        return self._rejected_orders

    @rejected_orders.setter
    def rejected_orders(self, rejected_orders):
        """Sets the rejected_orders of this CreateScheduledPackagesResponse.

        A list of orders we couldn't scheduled on your behalf. Each element contains the reason and details on the error.  # noqa: E501

        :param rejected_orders: The rejected_orders of this CreateScheduledPackagesResponse.  # noqa: E501
        :type: List[RejectedOrder]
        """

        self._rejected_orders = rejected_orders

    @property
    def printable_documents_url(self):
        """Gets the printable_documents_url of this CreateScheduledPackagesResponse.  # noqa: E501

        A pre-signed URL for the zip document containing the shipping labels and the documents enabled for your marketplace.  # noqa: E501

        :return: The printable_documents_url of this CreateScheduledPackagesResponse.  # noqa: E501
        :rtype: str
        """
        return self._printable_documents_url

    @printable_documents_url.setter
    def printable_documents_url(self, printable_documents_url):
        """Sets the printable_documents_url of this CreateScheduledPackagesResponse.

        A pre-signed URL for the zip document containing the shipping labels and the documents enabled for your marketplace.  # noqa: E501

        :param printable_documents_url: The printable_documents_url of this CreateScheduledPackagesResponse.  # noqa: E501
        :type: str
        """

        self._printable_documents_url = printable_documents_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateScheduledPackagesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateScheduledPackagesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateScheduledPackagesResponse):
            return True

        return self.to_dict() != other.to_dict()
