# coding: utf-8

"""
    Apollo OpenAPI

    Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictInt, StrictStr
from typing import Any, Dict, List
from apollo_openapi.models.list_item_diffs import ListItemDiffs
from apollo_openapi.models.namespace_sync_model import NamespaceSyncModel
from apollo_openapi.models.namespace_text_model import NamespaceTextModel
from apollo_openapi.models.open_item_dto import OpenItemDTO
from apollo_openapi.models.open_page_dto_open_item_dto import OpenPageDTOOpenItemDTO
from apollo_openapi.models.openapi_v1_apps_get401_response import OpenapiV1AppsGet401Response
from apollo_openapi.models.openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_validate_post200_response import OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response

from apollo_openapi.api_client import ApiClient, RequestSerialized
from apollo_openapi.api_response import ApiResponse
from apollo_openapi.rest import RESTResponseType


class ItemManagementApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_delete(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        operator: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """通过编码的key删除配置项

        DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param operator:  (required)
        :type operator: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_delete_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            operator=operator,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_delete_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        operator: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """通过编码的key删除配置项

        DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param operator:  (required)
        :type operator: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_delete_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            operator=operator,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_delete_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        operator: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """通过编码的key删除配置项

        DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param operator:  (required)
        :type operator: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_delete_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            operator=operator,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_delete_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        key,
        operator,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if key is not None:
            _path_params['key'] = key
        # process the query parameters
        if operator is not None:
            
            _query_params.append(('operator', operator))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_get(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenItemDTO:
        """通过查询参数获取配置项（支持编码的key）

        GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items?key={key}&encoded={true|false}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_get_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenItemDTO",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_get_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenItemDTO]:
        """通过查询参数获取配置项（支持编码的key）

        GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items?key={key}&encoded={true|false}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_get_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenItemDTO",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_get_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """通过查询参数获取配置项（支持编码的key）

        GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items?key={key}&encoded={true|false}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_get_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenItemDTO",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_get_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if key is not None:
            _path_params['key'] = key
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_put(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        create_if_not_exists: StrictBool,
        open_item_dto: OpenItemDTO,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenapiV1AppsGet401Response:
        """通过编码的key更新配置项

        PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param create_if_not_exists:  (required)
        :type create_if_not_exists: bool
        :param open_item_dto: (required)
        :type open_item_dto: OpenItemDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_put_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            create_if_not_exists=create_if_not_exists,
            open_item_dto=open_item_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_put_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        create_if_not_exists: StrictBool,
        open_item_dto: OpenItemDTO,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenapiV1AppsGet401Response]:
        """通过编码的key更新配置项

        PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param create_if_not_exists:  (required)
        :type create_if_not_exists: bool
        :param open_item_dto: (required)
        :type open_item_dto: OpenItemDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_put_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            create_if_not_exists=create_if_not_exists,
            open_item_dto=open_item_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_put_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        create_if_not_exists: StrictBool,
        open_item_dto: OpenItemDTO,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """通过编码的key更新配置项

        PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param create_if_not_exists:  (required)
        :type create_if_not_exists: bool
        :param open_item_dto: (required)
        :type open_item_dto: OpenItemDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_put_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            create_if_not_exists=create_if_not_exists,
            open_item_dto=open_item_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_encoded_items_key_put_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        key,
        create_if_not_exists,
        open_item_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if key is not None:
            _path_params['key'] = key
        # process the query parameters
        if create_if_not_exists is not None:
            
            _query_params.append(('createIfNotExists', create_if_not_exists))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if open_item_dto is not None:
            _body_params = open_item_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_batch_update_put(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_text_model: NamespaceTextModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenapiV1AppsGet401Response:
        """通过文本批量修改配置项

        PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_text_model: (required)
        :type namespace_text_model: NamespaceTextModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_batch_update_put_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_text_model=namespace_text_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_batch_update_put_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_text_model: NamespaceTextModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenapiV1AppsGet401Response]:
        """通过文本批量修改配置项

        PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_text_model: (required)
        :type namespace_text_model: NamespaceTextModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_batch_update_put_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_text_model=namespace_text_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_batch_update_put_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_text_model: NamespaceTextModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """通过文本批量修改配置项

        PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_text_model: (required)
        :type namespace_text_model: NamespaceTextModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_batch_update_put_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_text_model=namespace_text_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_batch_update_put_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        namespace_text_model,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if namespace_text_model is not None:
            _body_params = namespace_text_model


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_compare_post(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_sync_model: NamespaceSyncModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ListItemDiffs]:
        """对比命名空间配置差异

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_sync_model: (required)
        :type namespace_sync_model: NamespaceSyncModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_compare_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_sync_model=namespace_sync_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ListItemDiffs]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_compare_post_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_sync_model: NamespaceSyncModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ListItemDiffs]]:
        """对比命名空间配置差异

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_sync_model: (required)
        :type namespace_sync_model: NamespaceSyncModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_compare_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_sync_model=namespace_sync_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ListItemDiffs]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_compare_post_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_sync_model: NamespaceSyncModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """对比命名空间配置差异

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_sync_model: (required)
        :type namespace_sync_model: NamespaceSyncModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_compare_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_sync_model=namespace_sync_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ListItemDiffs]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_compare_post_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        namespace_sync_model,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if namespace_sync_model is not None:
            _body_params = namespace_sync_model


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_get(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        page: StrictInt,
        size: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenPageDTOOpenItemDTO:
        """获取命名空间下的配置项列表

        

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param page:  (required)
        :type page: int
        :param size:  (required)
        :type size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_get_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            page=page,
            size=size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenPageDTOOpenItemDTO",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_get_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        page: StrictInt,
        size: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenPageDTOOpenItemDTO]:
        """获取命名空间下的配置项列表

        

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param page:  (required)
        :type page: int
        :param size:  (required)
        :type size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_get_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            page=page,
            size=size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenPageDTOOpenItemDTO",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_get_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        page: StrictInt,
        size: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """获取命名空间下的配置项列表

        

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param page:  (required)
        :type page: int
        :param size:  (required)
        :type size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_get_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            page=page,
            size=size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenPageDTOOpenItemDTO",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_get_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        page,
        size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_delete(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        operator: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """删除配置项

        DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param operator:  (required)
        :type operator: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_delete_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            operator=operator,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_delete_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        operator: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """删除配置项

        DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param operator:  (required)
        :type operator: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_delete_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            operator=operator,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_delete_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        operator: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """删除配置项

        DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param operator:  (required)
        :type operator: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_delete_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            operator=operator,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_delete_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        key,
        operator,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if key is not None:
            _path_params['key'] = key
        # process the query parameters
        if operator is not None:
            
            _query_params.append(('operator', operator))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_get(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenItemDTO:
        """获取单个配置项

        GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_get_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenItemDTO",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_get_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenItemDTO]:
        """获取单个配置项

        GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_get_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenItemDTO",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_get_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """获取单个配置项

        GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_get_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenItemDTO",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_get_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if key is not None:
            _path_params['key'] = key
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_put(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        create_if_not_exists: StrictBool,
        open_item_dto: OpenItemDTO,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenapiV1AppsGet401Response:
        """更新配置项

        PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param create_if_not_exists:  (required)
        :type create_if_not_exists: bool
        :param open_item_dto: (required)
        :type open_item_dto: OpenItemDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_put_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            create_if_not_exists=create_if_not_exists,
            open_item_dto=open_item_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_put_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        create_if_not_exists: StrictBool,
        open_item_dto: OpenItemDTO,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenapiV1AppsGet401Response]:
        """更新配置项

        PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param create_if_not_exists:  (required)
        :type create_if_not_exists: bool
        :param open_item_dto: (required)
        :type open_item_dto: OpenItemDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_put_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            create_if_not_exists=create_if_not_exists,
            open_item_dto=open_item_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_put_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        key: StrictStr,
        create_if_not_exists: StrictBool,
        open_item_dto: OpenItemDTO,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """更新配置项

        PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param key:  (required)
        :type key: str
        :param create_if_not_exists:  (required)
        :type create_if_not_exists: bool
        :param open_item_dto: (required)
        :type open_item_dto: OpenItemDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_put_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            key=key,
            create_if_not_exists=create_if_not_exists,
            open_item_dto=open_item_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
            '404': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_key_put_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        key,
        create_if_not_exists,
        open_item_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        if key is not None:
            _path_params['key'] = key
        # process the query parameters
        if create_if_not_exists is not None:
            
            _query_params.append(('createIfNotExists', create_if_not_exists))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if open_item_dto is not None:
            _body_params = open_item_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_post(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        open_item_dto: OpenItemDTO,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenItemDTO:
        """创建新的配置项

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param open_item_dto: (required)
        :type open_item_dto: OpenItemDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            open_item_dto=open_item_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenItemDTO",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_post_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        open_item_dto: OpenItemDTO,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenItemDTO]:
        """创建新的配置项

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param open_item_dto: (required)
        :type open_item_dto: OpenItemDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            open_item_dto=open_item_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenItemDTO",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_post_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        open_item_dto: OpenItemDTO,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """创建新的配置项

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param open_item_dto: (required)
        :type open_item_dto: OpenItemDTO
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            open_item_dto=open_item_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenItemDTO",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_post_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        open_item_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if open_item_dto is not None:
            _body_params = open_item_dto


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_revert_post(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenapiV1AppsGet401Response:
        """撤销配置项更改

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_revert_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_revert_post_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenapiV1AppsGet401Response]:
        """撤销配置项更改

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_revert_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_revert_post_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """撤销配置项更改

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_revert_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_revert_post_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_sync_post(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_sync_model: NamespaceSyncModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenapiV1AppsGet401Response:
        """同步配置项到多个命名空间

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_sync_model: (required)
        :type namespace_sync_model: NamespaceSyncModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_sync_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_sync_model=namespace_sync_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_sync_post_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_sync_model: NamespaceSyncModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenapiV1AppsGet401Response]:
        """同步配置项到多个命名空间

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_sync_model: (required)
        :type namespace_sync_model: NamespaceSyncModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_sync_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_sync_model=namespace_sync_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_sync_post_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_sync_model: NamespaceSyncModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """同步配置项到多个命名空间

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_sync_model: (required)
        :type namespace_sync_model: NamespaceSyncModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_sync_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_sync_model=namespace_sync_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1AppsGet401Response",
            '400': "OpenapiV1AppsGet401Response",
            '403': "OpenapiV1AppsGet401Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_sync_post_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        namespace_sync_model,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if namespace_sync_model is not None:
            _body_params = namespace_sync_model


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_validate_post(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_text_model: NamespaceTextModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response:
        """验证配置文本语法

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_text_model: (required)
        :type namespace_text_model: NamespaceTextModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_validate_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_text_model=namespace_text_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response",
            '400': "OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_validate_post_with_http_info(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_text_model: NamespaceTextModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response]:
        """验证配置文本语法

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_text_model: (required)
        :type namespace_text_model: NamespaceTextModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_validate_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_text_model=namespace_text_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response",
            '400': "OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_validate_post_without_preload_content(
        self,
        app_id: StrictStr,
        env: StrictStr,
        cluster_name: StrictStr,
        namespace_name: StrictStr,
        namespace_text_model: NamespaceTextModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """验证配置文本语法

        POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate

        :param app_id:  (required)
        :type app_id: str
        :param env:  (required)
        :type env: str
        :param cluster_name:  (required)
        :type cluster_name: str
        :param namespace_name:  (required)
        :type namespace_name: str
        :param namespace_text_model: (required)
        :type namespace_text_model: NamespaceTextModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_validate_post_serialize(
            app_id=app_id,
            env=env,
            cluster_name=cluster_name,
            namespace_name=namespace_name,
            namespace_text_model=namespace_text_model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response",
            '400': "OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _openapi_v1_envs_env_apps_app_id_clusters_cluster_name_namespaces_namespace_name_items_validate_post_serialize(
        self,
        app_id,
        env,
        cluster_name,
        namespace_name,
        namespace_text_model,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['appId'] = app_id
        if env is not None:
            _path_params['env'] = env
        if cluster_name is not None:
            _path_params['clusterName'] = cluster_name
        if namespace_name is not None:
            _path_params['namespaceName'] = namespace_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if namespace_text_model is not None:
            _body_params = namespace_text_model


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


