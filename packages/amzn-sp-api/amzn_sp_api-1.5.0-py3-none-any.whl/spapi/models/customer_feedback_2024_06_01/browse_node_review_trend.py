# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class BrowseNodeReviewTrend(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'topic': 'str',
        'trend_metrics': 'List[BrowseNodeReviewTrendPoint]',
    }

    attribute_map = {
        'topic': 'topic',
        'trend_metrics': 'trendMetrics',
    }

    def __init__(self, topic=None, trend_metrics=None, _configuration=None):  # noqa: E501
        """BrowseNodeReviewTrend - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._topic = None
        self._trend_metrics = None
        self.discriminator = None

        self.topic = topic
        self.trend_metrics = trend_metrics

    @property
    def topic(self):
        """Gets the topic of this BrowseNodeReviewTrend.  # noqa: E501

        The name of the topic.  # noqa: E501

        :return: The topic of this BrowseNodeReviewTrend.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this BrowseNodeReviewTrend.

        The name of the topic.  # noqa: E501

        :param topic: The topic of this BrowseNodeReviewTrend.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")  # noqa: E501

        self._topic = topic

    @property
    def trend_metrics(self):
        """Gets the trend_metrics of this BrowseNodeReviewTrend.  # noqa: E501

        The browse node's review trend metrics for the past six months.  # noqa: E501

        :return: The trend_metrics of this BrowseNodeReviewTrend.  # noqa: E501
        :rtype: List[BrowseNodeReviewTrendPoint]
        """
        return self._trend_metrics

    @trend_metrics.setter
    def trend_metrics(self, trend_metrics):
        """Sets the trend_metrics of this BrowseNodeReviewTrend.

        The browse node's review trend metrics for the past six months.  # noqa: E501

        :param trend_metrics: The trend_metrics of this BrowseNodeReviewTrend.  # noqa: E501
        :type: List[BrowseNodeReviewTrendPoint]
        """
        if self._configuration.client_side_validation and trend_metrics is None:
            raise ValueError("Invalid value for `trend_metrics`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                trend_metrics is not None and len(trend_metrics) > 6):
            raise ValueError("Invalid value for `trend_metrics`, number of items must be less than or equal to `6`")  # noqa: E501

        self._trend_metrics = trend_metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrowseNodeReviewTrend, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrowseNodeReviewTrend):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrowseNodeReviewTrend):
            return True

        return self.to_dict() != other.to_dict()
