"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Frequenz Weather & Forecast API

Copyright:
Copyright 2023 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""

import abc
import collections.abc
import frequenz.api.weather.weather_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class WeatherForecastServiceStub:
    """Service provides operations related to retrieving weather forecasts for
    locations.

    The forecasts are updated regularly, and the service will stream the latest
    available data unless a specific time range is requested.
    !!! note
        Weather forecasts are inherently uncertain and actual conditions may
        vary. Use the data responsibly.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetHistoricalWeatherForecast: grpc.UnaryUnaryMultiCallable[
        frequenz.api.weather.weather_pb2.GetHistoricalWeatherForecastRequest,
        frequenz.api.weather.weather_pb2.GetHistoricalWeatherForecastResponse,
    ]
    """Returns historical weather forecast features for a geo location for a
    specified time range.
    """

    ReceiveLiveWeatherForecast: grpc.UnaryStreamMultiCallable[
        frequenz.api.weather.weather_pb2.ReceiveLiveWeatherForecastRequest,
        frequenz.api.weather.weather_pb2.ReceiveLiveWeatherForecastResponse,
    ]
    """Streams live weather forecast features for a geo location as they become
    available. Initially, the most recent forecast will be streamed.
    """

class WeatherForecastServiceAsyncStub:
    """Service provides operations related to retrieving weather forecasts for
    locations.

    The forecasts are updated regularly, and the service will stream the latest
    available data unless a specific time range is requested.
    !!! note
        Weather forecasts are inherently uncertain and actual conditions may
        vary. Use the data responsibly.
    """

    GetHistoricalWeatherForecast: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.weather.weather_pb2.GetHistoricalWeatherForecastRequest,
        frequenz.api.weather.weather_pb2.GetHistoricalWeatherForecastResponse,
    ]
    """Returns historical weather forecast features for a geo location for a
    specified time range.
    """

    ReceiveLiveWeatherForecast: grpc.aio.UnaryStreamMultiCallable[
        frequenz.api.weather.weather_pb2.ReceiveLiveWeatherForecastRequest,
        frequenz.api.weather.weather_pb2.ReceiveLiveWeatherForecastResponse,
    ]
    """Streams live weather forecast features for a geo location as they become
    available. Initially, the most recent forecast will be streamed.
    """

class WeatherForecastServiceServicer(metaclass=abc.ABCMeta):
    """Service provides operations related to retrieving weather forecasts for
    locations.

    The forecasts are updated regularly, and the service will stream the latest
    available data unless a specific time range is requested.
    !!! note
        Weather forecasts are inherently uncertain and actual conditions may
        vary. Use the data responsibly.
    """

    @abc.abstractmethod
    def GetHistoricalWeatherForecast(
        self,
        request: frequenz.api.weather.weather_pb2.GetHistoricalWeatherForecastRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.weather.weather_pb2.GetHistoricalWeatherForecastResponse, collections.abc.Awaitable[frequenz.api.weather.weather_pb2.GetHistoricalWeatherForecastResponse]]:
        """Returns historical weather forecast features for a geo location for a
        specified time range.
        """

    @abc.abstractmethod
    def ReceiveLiveWeatherForecast(
        self,
        request: frequenz.api.weather.weather_pb2.ReceiveLiveWeatherForecastRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[frequenz.api.weather.weather_pb2.ReceiveLiveWeatherForecastResponse], collections.abc.AsyncIterator[frequenz.api.weather.weather_pb2.ReceiveLiveWeatherForecastResponse]]:
        """Streams live weather forecast features for a geo location as they become
        available. Initially, the most recent forecast will be streamed.
        """

def add_WeatherForecastServiceServicer_to_server(servicer: WeatherForecastServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
