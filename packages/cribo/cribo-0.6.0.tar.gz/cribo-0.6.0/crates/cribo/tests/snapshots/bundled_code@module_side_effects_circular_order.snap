---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/module_side_effects_circular_order/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
my_package_mod_l = _cribo.types.SimpleNamespace(__name__='my_package.mod_l')
my_package = _cribo.types.SimpleNamespace(__name__='my_package', __initializing__=False, __initialized__=False)
my_package.mod_l = my_package_mod_l
LEAF_VALUE = "leaf"
my_package_mod_l.LEAF_VALUE = LEAF_VALUE
my_package_mod_a = _cribo.types.SimpleNamespace(__name__='my_package.mod_a', __initializing__=False, __initialized__=False)
my_package.mod_a = my_package_mod_a
my_package_mod_b = _cribo.types.SimpleNamespace(__name__='my_package.mod_b', __initializing__=False, __initialized__=False)
my_package.mod_b = my_package_mod_b
my_package_mod_c = _cribo.types.SimpleNamespace(__name__='my_package.mod_c', __initializing__=False, __initialized__=False)
my_package.mod_c = my_package_mod_c
def _cribo_init___cribo_c04dc3_my_package(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global my_package_mod_a
    my_package_mod_a = _cribo_init___cribo_e90488_my_package_mod_a(my_package_mod_a)
    mod_a = my_package.mod_a
    self.mod_a = mod_a
    TOP_LEVEL_VAL = mod_a.A_VALUE
    self.TOP_LEVEL_VAL = TOP_LEVEL_VAL
    print(TOP_LEVEL_VAL)
    self.mod_l = my_package_mod_l
    self.mod_l = my_package_mod_l
    self.__initialized__ = True
    self.__initializing__ = False
    return self
my_package.__init__ = _cribo_init___cribo_c04dc3_my_package
def _cribo_init___cribo_e90488_my_package_mod_a(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global my_package_mod_b
    my_package_mod_b = _cribo_init___cribo_d862bd_my_package_mod_b(my_package_mod_b)
    mod_b = my_package.mod_b
    self.mod_b = mod_b
    A_VALUE = f"A -> {mod_b.B_DERIVED_VALUE}"
    self.A_VALUE = A_VALUE
    self.__initialized__ = True
    self.__initializing__ = False
    return self
my_package_mod_a.__init__ = _cribo_init___cribo_e90488_my_package_mod_a
def _cribo_init___cribo_d862bd_my_package_mod_b(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global my_package_mod_c
    my_package_mod_c = _cribo_init___cribo_748052_my_package_mod_c(my_package_mod_c)
    mod_c = my_package.mod_c
    self.mod_c = mod_c
    LEAF_VALUE = my_package_mod_l.LEAF_VALUE
    my_package_mod_b.LEAF_VALUE = LEAF_VALUE
    B_DERIVED_VALUE = mod_c.C_CONSTANT * 2
    self.B_DERIVED_VALUE = B_DERIVED_VALUE

    def get_b_value():
        return f"B using '{LEAF_VALUE}' and derived value '{B_DERIVED_VALUE}'"
    self.get_b_value = get_b_value
    self.__initialized__ = True
    self.__initializing__ = False
    return self
my_package_mod_b.__init__ = _cribo_init___cribo_d862bd_my_package_mod_b
def _cribo_init___cribo_748052_my_package_mod_c(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global my_package_mod_a
    my_package_mod_a = _cribo_init___cribo_e90488_my_package_mod_a(my_package_mod_a)
    mod_a = my_package.mod_a
    self.mod_a = mod_a
    C_CONSTANT = 21
    self.C_CONSTANT = C_CONSTANT

    def get_c_value():
        return f"C with A dependency: {mod_a.A_VALUE}"
    self.get_c_value = get_c_value
    self.__initialized__ = True
    self.__initializing__ = False
    return self
my_package_mod_c.__init__ = _cribo_init___cribo_748052_my_package_mod_c
__cribo_init_result = _cribo_init___cribo_c04dc3_my_package(my_package)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(my_package, attr, getattr(__cribo_init_result, attr))
TOP_LEVEL_VAL = my_package.TOP_LEVEL_VAL
print(f"Result: {TOP_LEVEL_VAL}")
mod_a = my_package.mod_a
mod_b = my_package.mod_b
mod_l = my_package.mod_l
mod_c = my_package.mod_c
