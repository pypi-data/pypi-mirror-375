---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/submodule_imports_parent_function/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
pkg_submodule = _cribo.types.SimpleNamespace(__name__='pkg.submodule', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_dca395_pkg_submodule(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Submodule that becomes a wrapper module due to module-level import from parent."""
    get_base = pkg.get_base
    pkg_submodule.get_base = get_base
    computed_value = f"computed: {get_base()}"
    self.computed_value = computed_value

    def process():
        return computed_value
    self.process = process
    self.__initialized__ = True
    self.__initializing__ = False
    return self
pkg_submodule.__init__ = _cribo_init___cribo_dca395_pkg_submodule
pkg = _cribo.types.SimpleNamespace(__name__='pkg', __initializing__=False, __initialized__=False)
pkg.submodule = pkg_submodule
"""Package __init__ that gets inlined (not wrapped)."""
base_value = "base"
def get_base():
    return base_value
def get_result():
    global pkg_submodule
    pkg_submodule = pkg_submodule.__init__(pkg_submodule)
    globals()['pkg_submodule'] = _cribo_init___cribo_dca395_pkg_submodule(globals()['pkg_submodule'])
    process = pkg.submodule.process
    return pkg.submodule.process()
pkg.base_value = base_value
pkg.get_base = get_base
pkg.get_result = get_result
"""Test where submodule imports function from parent package.\n\nThis test works in Python but fails when bundled because:\n1. pkg.submodule imports get_base from parent at module level\n2. pkg.submodule uses the imported function at module level\n3. The bundler fails to properly initialize pkg.submodule\n4. When get_result() tries to access pkg.submodule.process(), it fails\n"""
print(pkg.get_result())
submodule = pkg.submodule
