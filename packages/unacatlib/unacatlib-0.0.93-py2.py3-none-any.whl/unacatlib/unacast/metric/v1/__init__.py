# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/metric/v1/data_delivery_execution.proto, unacast/metric/v1/dimension.proto, unacast/metric/v1/lens.proto, unacast/metric/v1/lens_service.proto, unacast/metric/v1/metric.proto, unacast/metric/v1/metric_group.proto, unacast/metric/v1/metric_parent.proto, unacast/metric/v1/metric_report.proto, unacast/metric/v1/metric_service.proto, unacast/metric/v1/metric_value.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import unatype as __unatype__
from ...index import v1 as __index_v1__
from ...maps import v1 as __maps_v1__
from ...subscription import v1 as __subscription_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ValueFilterOperator(betterproto.Enum):
    VALUE_FILTER_UNSPECIFIED = 0
    GREATER_THAN_OR_EQUAL_TO = 1


class LabeledFiltersKind(betterproto.Enum):
    UNSPECIFIED = 0
    ADDRESS_COMPONENT = 1
    RELATED_ADDRESS_COMPONENT = 2
    DIMENSION = 3
    FEATURE = 5
    RELATED_FEATURE = 6


class ValidationFlag(betterproto.Enum):
    INVALID = 0
    SKIP_DATA_COMPLETENESS_CHECK = 1


class DimensionCompleteness(betterproto.Enum):
    STRICT = 0
    RELAXED = 1


class Cadence(betterproto.Enum):
    UNSPECIFIED = 0
    DAILY = 1
    WEEKLY = 2
    WEEKLY_MON_SUN = 7
    WEEKLY_TUE_MON = 8
    MONTHLY = 3
    QUARTERLY = 4
    YEARLY = 5
    TRIMONTHLY = 6
    HOURLY = 9


class ValueKind(betterproto.Enum):
    KIND_UNSPECIFIED = 0
    NUMBER = 1
    COUNT = 2
    CATEGORY = 3


class LifecycleStage(betterproto.Enum):
    UNSPECIFIED = 0
    PROTOTYPE = 3
    """Metric under construction"""

    RELEASE_CANDIDATE = 6
    """Metric has data and is available to experimental users"""

    STABLE = 9
    """Metric is part of core offering and widely available"""

    DEPRECATED = 12
    """Metric data production has stopped"""

    ARCHIVED = 15
    """Metric is no longer available to query or subscribe to"""

    DELETED = 18
    """Metric data has been irreversibly been deleted"""


class ColumnKind(betterproto.Enum):
    VALUE = 0
    DISPLAY_NAME = 1
    GEOMETRY = 2


class StepStatus(betterproto.Enum):
    NOT_AVAILABLE = 0
    QUEUED = 4
    STARTED = 8
    OK = 12
    ERROR = 17


@dataclass(eq=False, repr=False)
class Dimension(betterproto.Message):
    name: str = betterproto.string_field(4)
    dimension_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(5)
    id_display_name: str = betterproto.string_field(10)
    description: str = betterproto.string_field(6)
    index_id: str = betterproto.string_field(9)
    index: "__index_v1__.Index" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class DimensionValue(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"dimension_id"`
    """

    value: str = betterproto.string_field(2)
    """
    @exclude
     @inject_tag: `bigquery:"value"`
    """

    display_name: str = betterproto.string_field(3)
    """
    @exclude
     @inject_tag: `bigquery:"display_name"`
    """


@dataclass(eq=False, repr=False)
class DimensionFilter(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    values: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MapFeatureRef(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"layer_id"`
    """

    feature_id: str = betterproto.string_field(3)
    """
    @exclude
     @inject_tag: `bigquery:"feature_id"`
    """


@dataclass(eq=False, repr=False)
class MetricValue(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"metric_id"`
    """

    observation_period: "Period" = betterproto.message_field(3)
    """
    @exclude
     @inject_tag: `bigquery:"observation_period"`
    """

    map_feature_v2: "__maps_v1__.Feature" = betterproto.message_field(9)
    """
    @exclude
     @inject_tag: `bigquery:"map_feature"`
    """

    related_map_feature: "__maps_v1__.Feature" = betterproto.message_field(5)
    """
    @exclude
     @inject_tag: `bigquery:"related_map_feature"`
    """

    dimensions: List["DimensionValue"] = betterproto.message_field(6)
    """
    @exclude
     @inject_tag: `bigquery:"dimensions"`
    """

    values: List["MetricValueValue"] = betterproto.message_field(10)
    """All values for this metric"""

    supporting_values: List["MetricValueValue"] = betterproto.message_field(7)
    """
    Deprecated use values instead
    
     @exclude
     @inject_tag: `bigquery:"supporting_values"`
    """

    value: "MetricValueValue" = betterproto.message_field(2)
    """Deprecated: use values instead. Is same as first element of values"""


@dataclass(eq=False, repr=False)
class MetricValueValue(betterproto.Message):
    name: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"name"`
    """

    unit: str = betterproto.string_field(2)
    """
    @exclude
     @inject_tag: `bigquery:"unit"`
    """

    number: float = betterproto.float_field(9, group="value")
    """
    @exclude
     @inject_tag: `bigquery:"number" json:"number"`
    """

    count: int = betterproto.int64_field(10, group="value")
    """
    @exclude
     @inject_tag: `bigquery:"count" json:"count"`
    """

    category: str = betterproto.string_field(11, group="value")
    """
    @exclude
     @inject_tag: `bigquery:"category"`
    """


@dataclass(eq=False, repr=False)
class Period(betterproto.Message):
    start: "__unatype__.Date" = betterproto.message_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"start_date"`
    """

    end: "__unatype__.Date" = betterproto.message_field(2)
    """
    @exclude
     @inject_tag: `bigquery:"end_date"`
    """


@dataclass(eq=False, repr=False)
class ValueFilter(betterproto.Message):
    value_name: str = betterproto.string_field(1)
    operator: "ValueFilterOperator" = betterproto.enum_field(2)
    numeric_value: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class MetricReport(betterproto.Message):
    """is Deprecated: Read this value from Metric instead"""

    observation_period: "Period" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Lens(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    metric_id: str = betterproto.string_field(3)
    billing_account_id: str = betterproto.string_field(4)
    creator_email: str = betterproto.string_field(5)
    lens_filters: "LensFilters" = betterproto.message_field(6)
    """
    @deprecated use the new labeled_lens_filters for display purposes instead
    """

    labeled_lens_filters: "LabeledFilters" = betterproto.message_field(7)
    lens_stats: "LensStats" = betterproto.message_field(8)
    display_name: str = betterproto.string_field(10)
    description: str = betterproto.string_field(11)
    update_time_string: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class LensFilters(betterproto.Message):
    period_filters: List["Period"] = betterproto.message_field(1)
    dimension_filters: List["DimensionFilter"] = betterproto.message_field(2)
    address_component_filters: List["__maps_v1__.AddressComponentFilter"] = (
        betterproto.message_field(3)
    )
    related_address_component_filters: List["__maps_v1__.AddressComponentFilter"] = (
        betterproto.message_field(5)
    )
    feature_filters: List[str] = betterproto.string_field(4)
    related_feature_filters: List[str] = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class LabeledFilters(betterproto.Message):
    filters: List["LabeledFiltersLabeledFilter"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LabeledFiltersLabeledValue(betterproto.Message):
    value: str = betterproto.string_field(1)
    label: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LabeledFiltersLabeledFilter(betterproto.Message):
    kind: "LabeledFiltersKind" = betterproto.enum_field(1)
    value_ref: "LabeledFiltersLabeledValue" = betterproto.message_field(2)
    values: List["LabeledFiltersLabeledValue"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class LensStats(betterproto.Message):
    features: "LensStatsStats" = betterproto.message_field(1)
    related_features: "LensStatsStats" = betterproto.message_field(2)
    dimensions: "LensStatsStats" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LensStatsStats(betterproto.Message):
    total_count: int = betterproto.int64_field(1)
    filtered_count: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class Metric(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    index_id: str = betterproto.string_field(3)
    index: "__index_v1__.Index" = betterproto.message_field(4)
    lifecycle_stage: "LifecycleStage" = betterproto.enum_field(9)
    version_spec: "VersionSpec" = betterproto.message_field(18)
    """
    @exclude
     @inject_tag: `sql:"type:jsonb"
    """

    metric_parent_id: str = betterproto.string_field(19)
    spec: "MetricSpec" = betterproto.message_field(5)
    """
    @exclude
     @inject_tag: `sql:"type:jsonb" `
    """

    layer_id: str = betterproto.string_field(6)
    layer: "__maps_v1__.Layer" = betterproto.message_field(8)
    related_layer_id: str = betterproto.string_field(12)
    related_layer: "__maps_v1__.Layer" = betterproto.message_field(13)
    """
    @exclude
     @inject_tag: `gorm:"foreignKey:RelatedLayerId;references:Id"`
    """

    dimensions: List["Dimension"] = betterproto.message_field(7)
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    listing: str = betterproto.string_field(11)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(22)
    observation_period: "Period" = betterproto.message_field(23)
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    report: "MetricReport" = betterproto.message_field(14)
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    your_subscription: "__subscription_v1__.SubscriptionStatus" = (
        betterproto.message_field(15)
    )
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    your_lens: "Lens" = betterproto.message_field(17)
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    description: str = betterproto.string_field(16)
    index_update_time: str = betterproto.string_field(20)


@dataclass(eq=False, repr=False)
class MetricSpec(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    related_layer_id: str = betterproto.string_field(2)
    relation_type: str = betterproto.string_field(12)
    """TODO deprecate relation_type"""

    layer_relationship_name: str = betterproto.string_field(13)
    related_layer_relationship_name: str = betterproto.string_field(14)
    cadence: "Cadence" = betterproto.enum_field(4)
    dimensions: List["DimensionSpec"] = betterproto.message_field(5)
    values: List["ValueSpec"] = betterproto.message_field(7)
    value_kind: "ValueKind" = betterproto.enum_field(3)
    unit: str = betterproto.string_field(6)
    tags: List["TagSpec"] = betterproto.message_field(8)
    """TODO could be removed after migration phase"""

    group_memberships: List["GroupMemberSpec"] = betterproto.message_field(9)
    processing_cadence: "Cadence" = betterproto.enum_field(10)
    rolling_observation_window: bool = betterproto.bool_field(11)
    layer_advancement_from_metric_id: str = betterproto.string_field(15)
    validation_flags: List["ValidationFlag"] = betterproto.enum_field(16)
    schema_version: str = betterproto.string_field(17)


@dataclass(eq=False, repr=False)
class GroupMemberSpec(betterproto.Message):
    key: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class VersionSpec(betterproto.Message):
    version: str = betterproto.string_field(1)
    release_notes: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DimensionSpec(betterproto.Message):
    dimension_id: str = betterproto.string_field(1)
    default_value: str = betterproto.string_field(2)
    dimension_completeness: "DimensionCompleteness" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class ValueSpec(betterproto.Message):
    name: str = betterproto.string_field(1)
    value_kind: "ValueKind" = betterproto.enum_field(2)
    unit: str = betterproto.string_field(3)
    display_name: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    supporting_value: bool = betterproto.bool_field(6)
    value_is_nullable: bool = betterproto.bool_field(7)
    """
    allows specifying that a value is nullable
     this is useful for values that are not always present
     it is recommended to add a separate value providing reason to why the value is not present
     null values might be seen downstream as 0 or "" values
     https://coda.io/d/_dK76Oc2iQoX/Data-Producer-Docs_suCU1#_lu1NZ
     Queries and exports will have specific default strategies for including/filtering null values
    """


@dataclass(eq=False, repr=False)
class TagSpec(betterproto.Message):
    """TODO could be removed after migration phase"""

    type: str = betterproto.string_field(1)
    values: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Value(betterproto.Message):
    name: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"name"`
    """

    value: str = betterproto.string_field(2)
    """
    @exclude
     @inject_tag: `bigquery:"value"`
    """


@dataclass(eq=False, repr=False)
class Column(betterproto.Message):
    id: str = betterproto.string_field(1)
    """
    @exclude TODO: Remove from proto (only used internally in unacat codebase)
    """

    type: "ColumnKind" = betterproto.enum_field(2)
    default_name: str = betterproto.string_field(3)
    user_friendly_name: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    format: str = betterproto.string_field(6)
    is_included: bool = betterproto.bool_field(7)
    requires_specific_resource: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class DataSchema(betterproto.Message):
    """Explicit Specification of Columns to be included in Data Delivery"""

    observation_start_column: "Column" = betterproto.message_field(1)
    """
    @exclude TODO: Remove from proto (only used internally in unacat codebase)
    """

    observation_end_column: "Column" = betterproto.message_field(2)
    feature_columns: List["Column"] = betterproto.message_field(3)
    related_feature_columns: List["Column"] = betterproto.message_field(4)
    address_component_columns: List["Column"] = betterproto.message_field(5)
    related_address_component_columns: List["Column"] = betterproto.message_field(6)
    dimension_columns: List["Column"] = betterproto.message_field(7)
    values_columns: List["Column"] = betterproto.message_field(8)
    column_order: List[str] = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class DeleteLensRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    lens_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListLensesRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)
    creator_email_filter: str = betterproto.string_field(3)
    metric_id_filter: List[str] = betterproto.string_field(4)
    page_size: int = betterproto.int32_field(5)
    page_token: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ListLensesResponse(betterproto.Message):
    lenses: List["Lens"] = betterproto.message_field(1)
    response_size: int = betterproto.int32_field(2)
    next_page_token: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class GetLensRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    lens_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateLensRequest(betterproto.Message):
    catalog_id: str = betterproto.string_field(2)
    metric_id: str = betterproto.string_field(3)
    billing_account_id: str = betterproto.string_field(11)
    lens_filters: "LensFilters" = betterproto.message_field(6)
    display_name: str = betterproto.string_field(9)
    description: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class CreateLensResponse(betterproto.Message):
    lens: "Lens" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateMetricRequest(betterproto.Message):
    given_id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    spec: "MetricSpec" = betterproto.message_field(3)
    description: str = betterproto.string_field(4)
    version_spec: "VersionSpec" = betterproto.message_field(5)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class ListMetricValuesRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    feature_filter: List[str] = betterproto.string_field(2)
    dimension_filters: List["DimensionFilter"] = betterproto.message_field(3)
    observation_period_filter: "Period" = betterproto.message_field(4)
    page_size: int = betterproto.int32_field(5)
    page_token: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ListMetricValuesResponse(betterproto.Message):
    values: List["MetricValue"] = betterproto.message_field(1)
    total_size: int = betterproto.int32_field(14)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class MetricParent(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    spec: "MetricParentSpec" = betterproto.message_field(5)
    """
    @exclude
     @inject_tag: `sql:"type:jsonb" `
    """

    metric_versions: List["Metric"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class MetricParentSpec(betterproto.Message):
    tags: List["TagSpec"] = betterproto.message_field(8)
    groups: List[str] = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class DataDeliveryExecution(betterproto.Message):
    id: str = betterproto.string_field(1)
    parent_data_delivery_id: str = betterproto.string_field(3)
    steps: List["DataDeliveryExecutionStep"] = betterproto.message_field(4)
    delivery_start_date: str = betterproto.string_field(5)
    delivery_end_date: str = betterproto.string_field(6)
    update_time_string: str = betterproto.string_field(7)
    create_time_string: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class DataDeliveryExecutionStep(betterproto.Message):
    id: str = betterproto.string_field(1)
    status: "StepStatus" = betterproto.enum_field(2)
    error_message: str = betterproto.string_field(7)
    parent_execution_id: str = betterproto.string_field(9)
    """Todo tag"""

    parent_step_id: str = betterproto.string_field(10)
    update_time_string: str = betterproto.string_field(5)
    create_time_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class MetricGroup(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)
    key: str = betterproto.string_field(3)
    key_display_name: str = betterproto.string_field(4)
    possible_values: "PossibleValues" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PossibleValues(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)


class LensServiceStub(betterproto.ServiceStub):
    async def create_lens(
        self,
        create_lens_request: "CreateLensRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateLensResponse":
        return await self._unary_unary(
            "/unacast.metric.v1.LensService/CreateLens",
            create_lens_request,
            CreateLensResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_lens(
        self,
        get_lens_request: "GetLensRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Lens":
        return await self._unary_unary(
            "/unacast.metric.v1.LensService/GetLens",
            get_lens_request,
            Lens,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_lenses(
        self,
        list_lenses_request: "ListLensesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListLensesResponse":
        return await self._unary_unary(
            "/unacast.metric.v1.LensService/ListLenses",
            list_lenses_request,
            ListLensesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_lens(
        self,
        delete_lens_request: "DeleteLensRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.metric.v1.LensService/DeleteLens",
            delete_lens_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class LensServiceBase(ServiceBase):

    async def create_lens(
        self, create_lens_request: "CreateLensRequest"
    ) -> "CreateLensResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_lens(self, get_lens_request: "GetLensRequest") -> "Lens":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_lenses(
        self, list_lenses_request: "ListLensesRequest"
    ) -> "ListLensesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_lens(
        self, delete_lens_request: "DeleteLensRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_lens(
        self, stream: "grpclib.server.Stream[CreateLensRequest, CreateLensResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_lens(request)
        await stream.send_message(response)

    async def __rpc_get_lens(
        self, stream: "grpclib.server.Stream[GetLensRequest, Lens]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_lens(request)
        await stream.send_message(response)

    async def __rpc_list_lenses(
        self, stream: "grpclib.server.Stream[ListLensesRequest, ListLensesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_lenses(request)
        await stream.send_message(response)

    async def __rpc_delete_lens(
        self,
        stream: "grpclib.server.Stream[DeleteLensRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_lens(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.metric.v1.LensService/CreateLens": grpclib.const.Handler(
                self.__rpc_create_lens,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateLensRequest,
                CreateLensResponse,
            ),
            "/unacast.metric.v1.LensService/GetLens": grpclib.const.Handler(
                self.__rpc_get_lens,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLensRequest,
                Lens,
            ),
            "/unacast.metric.v1.LensService/ListLenses": grpclib.const.Handler(
                self.__rpc_list_lenses,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListLensesRequest,
                ListLensesResponse,
            ),
            "/unacast.metric.v1.LensService/DeleteLens": grpclib.const.Handler(
                self.__rpc_delete_lens,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteLensRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }
