def NonLinearCombineTransform(data=None, object=None, accumulate=None, **generic_arguments):
    """
    DESCRIPTION:
        The NonLinearCombineTransform() function generates a new feature
        by taking a non-linear combination of existing features using the
        parameters from the output of NonLinearCombineFit() function.


    PARAMETERS:
        data:
            Required Argument.
            Specifies the input teradataml DataFrame.
            Types: teradataml DataFrame

        object:
            Required Argument.
            Specifies the teradataml DataFrame containing the fit parameters
            and target columns, generated by the NonLinearCombineFit() function
            or the instance of NonLinearCombineFit.
            Types: teradataml DataFrame or NonLinearCombineFit

        accumulate:
            Optional Argument.
            Specifies the name(s) of input teradataml DataFrame column(s)
            to copy to the output.
            By default, the function copies no input teradataml
            DataFrame columns to the output.
            Types: str OR list of Strings (str)

        **generic_arguments:
            Specifies the generic keyword arguments SQLE functions accept. Below
            are the generic keyword arguments:
                persist:
                    Optional Argument.
                    Specifies whether to persist the results of the
                    function in a table or not. When set to True,
                    results are persisted in a table; otherwise,
                    results are garbage collected at the end of the
                    session.
                    Default Value: False
                    Types: bool
                    
                volatile:
                    Optional Argument.
                    Specifies whether to put the results of the
                    function in a volatile table or not. When set to
                    True, results are stored in a volatile table,
                    otherwise not.
                    Default Value: False
                    Types: bool

            Function allows the user to partition, hash, order or local
            order the input data. These generic arguments are available
            for each argument that accepts teradataml DataFrame as
            input and can be accessed as:
                * "<input_data_arg_name>_partition_column" accepts str or
                  list of str (Strings)
                * "<input_data_arg_name>_hash_column" accepts str or list
                  of str (Strings)
                * "<input_data_arg_name>_order_column" accepts str or list
                  of str (Strings)
                * "local_order_<input_data_arg_name>" accepts boolean
            Note:
                These generic arguments are supported by teradataml if
                the underlying SQL Engine function supports, else an
                exception is raised.
        
    RETURNS:
        Instance of NonLinearCombineTransform.
        Output teradataml DataFrames can be accessed using attribute
        references, such as NonLinearCombineTransformObj.<attribute_name>.
        Output teradataml DataFrame attribute name is:
            result
        

    RAISES:
        TeradataMlException, TypeError, ValueError
        
        
    EXAMPLES:
        # Notes:
        #     1. Get the connection to Vantage to execute the function.
        #     2. One must import the required functions mentioned in
        #        the example from teradataml.
        #     3. Function will raise error if not supported on the Vantage
        #        user is connected to.

        # Load the example data.
        load_example_data("teradataml", "titanic")

        # Create teradataml DataFrame objects.
        titanic = DataFrame.from_table("titanic")
            
        # Check the list of available analytic functions.
        display_analytic_functions()

        # Create model to obtain total cost for passenger using formula
        # ('sibsp' + 'parch' + 1) * 'fare'.
        Fit_out = NonLinearCombineFit(data = titanic,
                                      target_columns = ["sibsp", "parch", "fare"],
                                      formula = "Y=(X0+X1+1)*X2",
                                      result_column = "total_cost")

        # Example 1 : Get the total cost for each passenger.
        NonLinearCombineTransform_out = NonLinearCombineTransform(data=titanic,
                                                                  object=Fit_out,
                                                                  accumulate="passenger")

        # Print the result DataFrame.
        print(NonLinearCombineTransform_out.result)
        
    """
