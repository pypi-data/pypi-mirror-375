# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloReduceOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloReduceOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloReduceOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloReduceOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # StablehloReduceOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloReduceOptions
    def Dimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloReduceOptions
    def DimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloReduceOptions
    def DimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloReduceOptions
    def DimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StablehloReduceOptions
    def BodySubgraphIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(2)
def StablehloReduceOptionsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddDimensions(builder, dimensions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0)
def StablehloReduceOptionsAddDimensions(builder, dimensions):
    """This method is deprecated. Please switch to AddDimensions."""
    return AddDimensions(builder, dimensions)
def StartDimensionsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StablehloReduceOptionsStartDimensionsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDimensionsVector(builder, numElems)
def AddBodySubgraphIndex(builder, bodySubgraphIndex): builder.PrependInt32Slot(1, bodySubgraphIndex, 0)
def StablehloReduceOptionsAddBodySubgraphIndex(builder, bodySubgraphIndex):
    """This method is deprecated. Please switch to AddBodySubgraphIndex."""
    return AddBodySubgraphIndex(builder, bodySubgraphIndex)
def End(builder): return builder.EndObject()
def StablehloReduceOptionsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
try:
    from typing import List
except:
    pass

class StablehloReduceOptionsT(object):

    # StablehloReduceOptionsT
    def __init__(self):
        self.dimensions = None  # type: List[int]
        self.bodySubgraphIndex = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloReduceOptions = StablehloReduceOptions()
        stablehloReduceOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloReduceOptions)

    @classmethod
    def InitFromObj(cls, stablehloReduceOptions):
        x = StablehloReduceOptionsT()
        x._UnPack(stablehloReduceOptions)
        return x

    # StablehloReduceOptionsT
    def _UnPack(self, stablehloReduceOptions):
        if stablehloReduceOptions is None:
            return
        if not stablehloReduceOptions.DimensionsIsNone():
            if np is None:
                self.dimensions = []
                for i in range(stablehloReduceOptions.DimensionsLength()):
                    self.dimensions.append(stablehloReduceOptions.Dimensions(i))
            else:
                self.dimensions = stablehloReduceOptions.DimensionsAsNumpy()
        self.bodySubgraphIndex = stablehloReduceOptions.BodySubgraphIndex()

    # StablehloReduceOptionsT
    def Pack(self, builder):
        if self.dimensions is not None:
            if np is not None and type(self.dimensions) is np.ndarray:
                dimensions = builder.CreateNumpyVector(self.dimensions)
            else:
                StartDimensionsVector(builder, len(self.dimensions))
                for i in reversed(range(len(self.dimensions))):
                    builder.PrependInt64(self.dimensions[i])
                dimensions = builder.EndVector()
        Start(builder)
        if self.dimensions is not None:
            AddDimensions(builder, dimensions)
        AddBodySubgraphIndex(builder, self.bodySubgraphIndex)
        stablehloReduceOptions = End(builder)
        return stablehloReduceOptions
