---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/ast_rewriting_function_name_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
module_a = _cribo.types.SimpleNamespace(__name__='module_a')
"""\nModule A with a process_data function.\nThis will conflict with module_b.process_data when bundled.\n"""
def process_data_2(input_data: str) -> str:
    """Process data in module A's way."""
    return f"Module A processed: {input_data.upper()}"
module_a.process_data = process_data_2
module_b = _cribo.types.SimpleNamespace(__name__='module_b')
"""\nModule B with a process_data function.\nThis will conflict with module_a.process_data when bundled.\n"""
def process_data_1(input_data: str) -> str:
    """Process data in module B's way."""
    return f"Module B processed: {input_data.lower()}"
module_b.process_data = process_data_1
"""\nFunction name collision test.\nBoth modules define a function with the same name.\n"""
process_a = module_a.process_data
process_b = module_b.process_data
def main():
    result_a = process_a("input from A")
    result_b = process_b("input from B")
    print(f"Module A result: {result_a}")
    print(f"Module B result: {result_b}")
    return {"module_a": result_a, "module_b": result_b}
if __name__ == "__main__":
    result = main()
    print("Result:", result)
