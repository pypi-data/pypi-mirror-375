# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class ModelRequestDto(BaseModel):
    """
    ModelRequestDto
    """ # noqa: E501
    model_id: Optional[UUID] = Field(default=None, alias="modelId")
    model_name: Optional[StrictStr] = Field(default=None, alias="modelName")
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    model_type: Optional[StrictStr] = Field(default=None, alias="modelType")
    model_description: Optional[StrictStr] = Field(default=None, alias="modelDescription")
    provider: Optional[StrictStr] = None
    deployment_type: Optional[StrictStr] = Field(default=None, alias="deploymentType")
    endpoint: Optional[StrictStr] = None
    identifier: Optional[StrictStr] = None
    api_key: Optional[StrictStr] = Field(default=None, alias="apiKey")
    endpoint_description: Optional[StrictStr] = Field(default=None, alias="endpointDescription")
    languages: Optional[List[StrictStr]] = None
    tasks: Optional[List[StrictStr]] = None
    license: Optional[StrictStr] = None
    readme: Optional[StrictStr] = None
    model_size: Optional[StrictStr] = Field(default=None, alias="modelSize")
    quantization: Optional[StrictBool] = None
    user_id: Optional[UUID] = Field(default=None, alias="userId")
    __properties: ClassVar[List[str]] = ["modelId", "modelName", "displayName", "modelType", "modelDescription", "provider", "deploymentType", "endpoint", "identifier", "apiKey", "endpointDescription", "languages", "tasks", "license", "readme", "modelSize", "quantization", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "modelId": obj.get("modelId"),
            "modelName": obj.get("modelName"),
            "displayName": obj.get("displayName"),
            "modelType": obj.get("modelType"),
            "modelDescription": obj.get("modelDescription"),
            "provider": obj.get("provider"),
            "deploymentType": obj.get("deploymentType"),
            "endpoint": obj.get("endpoint"),
            "identifier": obj.get("identifier"),
            "apiKey": obj.get("apiKey"),
            "endpointDescription": obj.get("endpointDescription"),
            "languages": obj.get("languages"),
            "tasks": obj.get("tasks"),
            "license": obj.get("license"),
            "readme": obj.get("readme"),
            "modelSize": obj.get("modelSize"),
            "quantization": obj.get("quantization"),
            "userId": obj.get("userId")
        })
        return _obj


