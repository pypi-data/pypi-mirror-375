from django.conf import settings
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass, field
from pathlib import Path
import json

def default_custom_headers() -> List[str]:
    """Default custom headers for generated TypeScript file."""
    return [
        '// Generated by django-typescript-api',
        '// DO NOT EDIT THIS FILE DIRECTLY',
        '',
        '/* eslint-disable */',
        '// @ts-nocheck',
        ''
    ]

@dataclass
class TypeScriptAPIConfig:
    """Singleton configuration class for django-typescript-api."""
    
    # Default configuration
    OUTPUT_PATH: Path = Path('frontend/src/api/generated.ts')
    BASE_INDENTATION: str = '  '
    DEFAULT_HTTP_CLIENT: str = 'fetch'
    APPS_TO_INCLUDE: Optional[List[str]] = None
    TYPE_MAPPINGS: Dict[str, str] = field(default_factory=dict)
    INCLUDE_DOCS: bool = True
    INCLUDE_VALIDATORS: bool = True
    GENERATE_INDEX_FILE: bool = False
    EXPORT_STRATEGY: str = 'named'  # 'named' or 'default'
    CUSTOM_HEADERS: List[str] = field(default_factory=default_custom_headers)
    
    def __post_init__(self):
        """Load configuration from Django settings."""
        self._load_from_django_settings()
    
    def _load_from_django_settings(self):
        """Load configuration from Django settings."""
        django_config = getattr(settings, 'DJANGO_TYPESCRIPT_API', {})
        
        # Update configuration from Django settings
        for key, value in django_config.items():
            if hasattr(self, key):
                # Handle special cases
                if key == 'OUTPUT_PATH' and isinstance(value, str):
                    setattr(self, key, Path(value))
                elif key == 'CUSTOM_HEADERS' and isinstance(value, list):
                    setattr(self, key, value)
                elif key == 'CUSTOM_HEADERS' and isinstance(value, str):
                    setattr(self, key, [value])
                else:
                    setattr(self, key, value)
        
        # Ensure OUTPUT_PATH is a Path object
        if isinstance(self.OUTPUT_PATH, str):
            self.OUTPUT_PATH = Path(self.OUTPUT_PATH)

# Global configuration instance
config = TypeScriptAPIConfig()

def reload_config():
    """Reload configuration from Django settings."""
    global config
    config = TypeScriptAPIConfig()