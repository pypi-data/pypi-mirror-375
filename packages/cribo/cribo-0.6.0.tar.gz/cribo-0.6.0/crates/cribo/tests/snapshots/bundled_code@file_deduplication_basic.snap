---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/file_deduplication_basic/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
app_utils = _cribo.types.SimpleNamespace(__name__='app.utils')
app = _cribo.types.SimpleNamespace(__name__='app', __initializing__=False, __initialized__=False)
app.utils = app_utils
def get_name():
    return "app.utils"
def helper():
    return "I am from app.utils"
app_utils.get_name = get_name
app_utils.helper = helper
app_utils = app_utils
mod = _cribo.types.SimpleNamespace(get_name=get_name, helper=helper)
print(f"Direct import: {app.utils.get_name()}")
print(f"From import: {app_utils.get_name()}")
print(f"Importlib: {get_name()}")
assert app.utils.helper() == app_utils.helper() == helper()
print("SUCCESS: All imports reference the same module!")
utils = app.utils
