# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class StandardComparisonTableModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_columns': 'List[StandardComparisonProductBlock]',
        'metric_row_labels': 'List[PlainTextItem]',
    }

    attribute_map = {
        'product_columns': 'productColumns',
        'metric_row_labels': 'metricRowLabels',
    }

    def __init__(self, product_columns=None, metric_row_labels=None, _configuration=None):  # noqa: E501
        """StandardComparisonTableModule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._product_columns = None
        self._metric_row_labels = None
        self.discriminator = None

        if product_columns is not None:
            self.product_columns = product_columns
        if metric_row_labels is not None:
            self.metric_row_labels = metric_row_labels

    @property
    def product_columns(self):
        """Gets the product_columns of this StandardComparisonTableModule.  # noqa: E501


        :return: The product_columns of this StandardComparisonTableModule.  # noqa: E501
        :rtype: List[StandardComparisonProductBlock]
        """
        return self._product_columns

    @product_columns.setter
    def product_columns(self, product_columns):
        """Sets the product_columns of this StandardComparisonTableModule.


        :param product_columns: The product_columns of this StandardComparisonTableModule.  # noqa: E501
        :type: List[StandardComparisonProductBlock]
        """
        if (self._configuration.client_side_validation and
                product_columns is not None and len(product_columns) > 6):
            raise ValueError("Invalid value for `product_columns`, number of items must be less than or equal to `6`")  # noqa: E501
        if (self._configuration.client_side_validation and
                product_columns is not None and len(product_columns) < 0):
            raise ValueError("Invalid value for `product_columns`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._product_columns = product_columns

    @property
    def metric_row_labels(self):
        """Gets the metric_row_labels of this StandardComparisonTableModule.  # noqa: E501


        :return: The metric_row_labels of this StandardComparisonTableModule.  # noqa: E501
        :rtype: List[PlainTextItem]
        """
        return self._metric_row_labels

    @metric_row_labels.setter
    def metric_row_labels(self, metric_row_labels):
        """Sets the metric_row_labels of this StandardComparisonTableModule.


        :param metric_row_labels: The metric_row_labels of this StandardComparisonTableModule.  # noqa: E501
        :type: List[PlainTextItem]
        """
        if (self._configuration.client_side_validation and
                metric_row_labels is not None and len(metric_row_labels) > 10):
            raise ValueError("Invalid value for `metric_row_labels`, number of items must be less than or equal to `10`")  # noqa: E501
        if (self._configuration.client_side_validation and
                metric_row_labels is not None and len(metric_row_labels) < 0):
            raise ValueError("Invalid value for `metric_row_labels`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._metric_row_labels = metric_row_labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandardComparisonTableModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardComparisonTableModule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StandardComparisonTableModule):
            return True

        return self.to_dict() != other.to_dict()
