# coding: utf-8

"""
    Selling Partner API for Orders

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ItemBuyerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buyer_customized_info': 'BuyerCustomizedInfoDetail',
        'gift_wrap_price': 'Money',
        'gift_wrap_tax': 'Money',
        'gift_message_text': 'str',
        'gift_wrap_level': 'str',
    }

    attribute_map = {
        'buyer_customized_info': 'BuyerCustomizedInfo',
        'gift_wrap_price': 'GiftWrapPrice',
        'gift_wrap_tax': 'GiftWrapTax',
        'gift_message_text': 'GiftMessageText',
        'gift_wrap_level': 'GiftWrapLevel',
    }

    def __init__(self, buyer_customized_info=None, gift_wrap_price=None, gift_wrap_tax=None, gift_message_text=None, gift_wrap_level=None, _configuration=None):  # noqa: E501
        """ItemBuyerInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._buyer_customized_info = None
        self._gift_wrap_price = None
        self._gift_wrap_tax = None
        self._gift_message_text = None
        self._gift_wrap_level = None
        self.discriminator = None

        if buyer_customized_info is not None:
            self.buyer_customized_info = buyer_customized_info
        if gift_wrap_price is not None:
            self.gift_wrap_price = gift_wrap_price
        if gift_wrap_tax is not None:
            self.gift_wrap_tax = gift_wrap_tax
        if gift_message_text is not None:
            self.gift_message_text = gift_message_text
        if gift_wrap_level is not None:
            self.gift_wrap_level = gift_wrap_level

    @property
    def buyer_customized_info(self):
        """Gets the buyer_customized_info of this ItemBuyerInfo.  # noqa: E501


        :return: The buyer_customized_info of this ItemBuyerInfo.  # noqa: E501
        :rtype: BuyerCustomizedInfoDetail
        """
        return self._buyer_customized_info

    @buyer_customized_info.setter
    def buyer_customized_info(self, buyer_customized_info):
        """Sets the buyer_customized_info of this ItemBuyerInfo.


        :param buyer_customized_info: The buyer_customized_info of this ItemBuyerInfo.  # noqa: E501
        :type: BuyerCustomizedInfoDetail
        """

        self._buyer_customized_info = buyer_customized_info

    @property
    def gift_wrap_price(self):
        """Gets the gift_wrap_price of this ItemBuyerInfo.  # noqa: E501


        :return: The gift_wrap_price of this ItemBuyerInfo.  # noqa: E501
        :rtype: Money
        """
        return self._gift_wrap_price

    @gift_wrap_price.setter
    def gift_wrap_price(self, gift_wrap_price):
        """Sets the gift_wrap_price of this ItemBuyerInfo.


        :param gift_wrap_price: The gift_wrap_price of this ItemBuyerInfo.  # noqa: E501
        :type: Money
        """

        self._gift_wrap_price = gift_wrap_price

    @property
    def gift_wrap_tax(self):
        """Gets the gift_wrap_tax of this ItemBuyerInfo.  # noqa: E501


        :return: The gift_wrap_tax of this ItemBuyerInfo.  # noqa: E501
        :rtype: Money
        """
        return self._gift_wrap_tax

    @gift_wrap_tax.setter
    def gift_wrap_tax(self, gift_wrap_tax):
        """Sets the gift_wrap_tax of this ItemBuyerInfo.


        :param gift_wrap_tax: The gift_wrap_tax of this ItemBuyerInfo.  # noqa: E501
        :type: Money
        """

        self._gift_wrap_tax = gift_wrap_tax

    @property
    def gift_message_text(self):
        """Gets the gift_message_text of this ItemBuyerInfo.  # noqa: E501

        A gift message provided by the buyer.  **Note**: This attribute is only available for MFN (fulfilled by seller) orders.  # noqa: E501

        :return: The gift_message_text of this ItemBuyerInfo.  # noqa: E501
        :rtype: str
        """
        return self._gift_message_text

    @gift_message_text.setter
    def gift_message_text(self, gift_message_text):
        """Sets the gift_message_text of this ItemBuyerInfo.

        A gift message provided by the buyer.  **Note**: This attribute is only available for MFN (fulfilled by seller) orders.  # noqa: E501

        :param gift_message_text: The gift_message_text of this ItemBuyerInfo.  # noqa: E501
        :type: str
        """

        self._gift_message_text = gift_message_text

    @property
    def gift_wrap_level(self):
        """Gets the gift_wrap_level of this ItemBuyerInfo.  # noqa: E501

        The gift wrap level specified by the buyer.  # noqa: E501

        :return: The gift_wrap_level of this ItemBuyerInfo.  # noqa: E501
        :rtype: str
        """
        return self._gift_wrap_level

    @gift_wrap_level.setter
    def gift_wrap_level(self, gift_wrap_level):
        """Sets the gift_wrap_level of this ItemBuyerInfo.

        The gift wrap level specified by the buyer.  # noqa: E501

        :param gift_wrap_level: The gift_wrap_level of this ItemBuyerInfo.  # noqa: E501
        :type: str
        """

        self._gift_wrap_level = gift_wrap_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemBuyerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemBuyerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemBuyerInfo):
            return True

        return self.to_dict() != other.to_dict()
