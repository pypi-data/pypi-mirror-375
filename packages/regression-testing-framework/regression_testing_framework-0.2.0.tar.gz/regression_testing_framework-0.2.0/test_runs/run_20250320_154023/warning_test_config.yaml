# Test configuration to verify warning handling behavior
base_command: /bin/bash

# Simple successful command for baseline comparison
simple_success:
  base_command: /bin/bash
  params:
    - -c
    - "echo 'This command will succeed'"

# Python command that generates a UserWarning but exits with code 0
python_warning_success:
  base_command: python3
  params:
    - -c
    - "import warnings; warnings.warn('This is a test warning', UserWarning); print('Command completed successfully')"
  timeout: 10

# Python command that generates a DeprecationWarning
python_deprecation_warning:
  base_command: python3
  params:
    - -c
    - "import warnings; warnings.warn('This feature is deprecated', DeprecationWarning); print('Command still completed successfully')"
  timeout: 10

# Command that generates multiple warnings
multiple_warnings:
  base_command: python3
  params:
    - -c
    - "import warnings; warnings.warn('Warning 1', UserWarning); warnings.warn('Warning 2', RuntimeWarning); print('Multiple warnings but still success')"
  timeout: 10

# Command that writes directly to stderr
stderr_warning:
  base_command: python3
  params:
    - -c
    - "import sys; sys.stderr.write('Warning: something might be wrong\\n'); print('Written directly to stderr but not an error')"
  timeout: 10

# This should fail for comparison (non-zero exit code)
expected_failure:
  base_command: python3
  params:
    - -c
    - "import sys; print('This will exit with failure'); sys.exit(1)"
  timeout: 10