# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloTransposeOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloTransposeOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloTransposeOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloTransposeOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # StablehloTransposeOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloTransposeOptions
    def Permutation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloTransposeOptions
    def PermutationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloTransposeOptions
    def PermutationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloTransposeOptions
    def PermutationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def StablehloTransposeOptionsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddPermutation(builder, permutation): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permutation), 0)
def StablehloTransposeOptionsAddPermutation(builder, permutation):
    """This method is deprecated. Please switch to AddPermutation."""
    return AddPermutation(builder, permutation)
def StartPermutationVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StablehloTransposeOptionsStartPermutationVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPermutationVector(builder, numElems)
def End(builder): return builder.EndObject()
def StablehloTransposeOptionsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
try:
    from typing import List
except:
    pass

class StablehloTransposeOptionsT(object):

    # StablehloTransposeOptionsT
    def __init__(self):
        self.permutation = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloTransposeOptions = StablehloTransposeOptions()
        stablehloTransposeOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloTransposeOptions)

    @classmethod
    def InitFromObj(cls, stablehloTransposeOptions):
        x = StablehloTransposeOptionsT()
        x._UnPack(stablehloTransposeOptions)
        return x

    # StablehloTransposeOptionsT
    def _UnPack(self, stablehloTransposeOptions):
        if stablehloTransposeOptions is None:
            return
        if not stablehloTransposeOptions.PermutationIsNone():
            if np is None:
                self.permutation = []
                for i in range(stablehloTransposeOptions.PermutationLength()):
                    self.permutation.append(stablehloTransposeOptions.Permutation(i))
            else:
                self.permutation = stablehloTransposeOptions.PermutationAsNumpy()

    # StablehloTransposeOptionsT
    def Pack(self, builder):
        if self.permutation is not None:
            if np is not None and type(self.permutation) is np.ndarray:
                permutation = builder.CreateNumpyVector(self.permutation)
            else:
                StartPermutationVector(builder, len(self.permutation))
                for i in reversed(range(len(self.permutation))):
                    builder.PrependInt64(self.permutation[i])
                permutation = builder.EndVector()
        Start(builder)
        if self.permutation is not None:
            AddPermutation(builder, permutation)
        stablehloTransposeOptions = End(builder)
        return stablehloTransposeOptions
