{#- OZI
# ozi/templates/project.meson.build
# SPDX-License-Identifier: MIT-0
-#}
project(
    '{{ project.name }}',
{%- if project.enable_cython %}
    'cython',
{%- endif %}
    default_options: ['warning_level=3'],
    license: '{{ project.license_expression }}',
    license_files: ['{{ project.license_file }}'],
    meson_version: '>=1.1.0',
    version: run_command(
        'python3',
        [
            '-c',
            'from setuptools_scm import get_version;print(get_version(normalize=False, fallback_version="%OZIBUILDVERSION%"))',
        ],
        check: true,
    ).stdout().strip(),
)
# BEGIN setup
fs = import('fs')
pymod = import('python')
python_dependencies = get_option('python-dependencies')
python = pymod.find_installation()
project_name = meson.project_name()
root_files = [
{%- for required_root_dist in spec.python.pkg.required.root %}
    '{{ required_root_dist }}',
{%- endfor %}
]
# END setup

# BEGIN config MESON_BUILD_ROOT/pyproject.toml
pyproject_config = configuration_data()
pyproject_config.set('VCS_TAG', '@VCS_TAG@')
pyproject_config.set(
    'PYTHON_VERSION_DIST',
    'py' + ''.join(python.language_version().split('.')),
)
configure_file(
    input: 'pyproject.toml',
    output: 'pyproject.toml',
    configuration: pyproject_config
)
vcs_tag(input: 'pyproject.toml', output: 'pyproject.orig.toml')
# END config MESON_BUILD_ROOT/pyproject.toml

# BEGIN install
foreach source : root_files
    if source not in ['pyproject.toml', '.gitignore', 'README', 'CHANGELOG.md']
        fs.copyfile(source)
    elif source == 'README'
        fs.copyfile(source, 'README.{{ project.long_description_content_type }}')
    endif
endforeach
subdir('{{ project.name|underscorify|lower }}')
subdir('tests')
root_children = ['ozi.phony']
foreach child: root_children
    if child != 'ozi.phony'
        subdir(child)
    endif
endforeach
if false
    executable('root_files', root_files)
    executable('root_children', root_children)
endif
if not meson.is_subproject()
    dev = subproject('ozi')
    foreach var : get_option('variables')
        name = var.replace('-', '_')
        set_variable(name, dev.get_variable(name))
    endforeach
    deps = run_command(python, '-c', dev.get_variable('install_dependencies'), check: true).stdout().strip().split('$$')
    if deps[0] != ''
        if find_program('uv', disabler: true).found()
            meson.add_postconf_script('uv', 'venv', 'venv')
        else
            meson.add_postconf_script(dev.get_variable('pip'), 'install', 'virtualenv')
            meson.add_postconf_script('virtualenv', 'venv')
        endif
        meson.add_postconf_script(dev.get_variable('pip'), 'install', deps)
    endif
endif
# END install
