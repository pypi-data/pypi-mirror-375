# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch

from multiconn_archicad.models.official.commands import (
    CreateAttributeFoldersParameters,
CreateAttributeFoldersResult,
DeleteAttributeFoldersParameters,
DeleteAttributeFoldersResult,
DeleteAttributesParameters,
DeleteAttributesResult,
GetActivePenTablesResult,
GetAttributeFolderStructureParameters,
GetAttributeFolderStructureResult,
GetAttributeFoldersParameters,
GetAttributeFoldersResult,
GetAttributesIndicesParameters,
GetAttributesIndicesResult,
GetBuildingMaterialAttributesParameters,
GetBuildingMaterialAttributesResult,
GetCompositeAttributesParameters,
GetCompositeAttributesResult,
GetFillAttributesParameters,
GetFillAttributesResult,
GetLayerAttributesParameters,
GetLayerAttributesResult,
GetLayerCombinationAttributesParameters,
GetLayerCombinationAttributesResult,
GetLineAttributesParameters,
GetLineAttributesResult,
GetPenTableAttributesParameters,
GetPenTableAttributesResult,
GetProfileAttributePreviewParameters,
GetProfileAttributePreviewResult,
GetProfileAttributesParameters,
GetProfileAttributesResult,
GetSurfaceAttributesParameters,
GetSurfaceAttributesResult,
GetZoneCategoryAttributesParameters,
GetZoneCategoryAttributesResult,
MoveAttributesAndFoldersParameters,
RenameAttributeFoldersParameters,
RenameAttributeFoldersResult
)


log = logging.getLogger()

def create_attribute_folders(port: int, params: CreateAttributeFoldersParameters) -> CreateAttributeFoldersResult:
    """
    Creates attribute folders. To create a folder, its full path has to be provided. The command will create all folders along the path, if they do not exist.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.CreateAttributeFolders",
            parameters=params.model_dump(mode='json')
        )
        return CreateAttributeFoldersResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for CreateAttributeFolders result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing CreateAttributeFolders on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    create_attribute_folders,
    name="attributes_create_attribute_folders",
    title="CreateAttributeFolders",
    description="Creates attribute folders. To create a folder, its full path has to be provided. The command will create all folders along the path, if they do not exist.",
    params_model=CreateAttributeFoldersParameters,
    result_model=CreateAttributeFoldersResult
)


def delete_attribute_folders(port: int, params: DeleteAttributeFoldersParameters) -> DeleteAttributeFoldersResult:
    """
    Deletes attribute folders and all the deletable attributes and folders it contains. To delete a folder, its identifier has to be provided.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.DeleteAttributeFolders",
            parameters=params.model_dump(mode='json')
        )
        return DeleteAttributeFoldersResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for DeleteAttributeFolders result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing DeleteAttributeFolders on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    delete_attribute_folders,
    name="attributes_delete_attribute_folders",
    title="DeleteAttributeFolders",
    description="Deletes attribute folders and all the deletable attributes and folders it contains. To delete a folder, its identifier has to be provided.",
    params_model=DeleteAttributeFoldersParameters,
    result_model=DeleteAttributeFoldersResult
)


def delete_attributes(port: int, params: DeleteAttributesParameters) -> DeleteAttributesResult:
    """
    Deletes attributes.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.DeleteAttributes",
            parameters=params.model_dump(mode='json')
        )
        return DeleteAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for DeleteAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing DeleteAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    delete_attributes,
    name="attributes_delete_attributes",
    title="DeleteAttributes",
    description="Deletes attributes.",
    params_model=DeleteAttributesParameters,
    result_model=DeleteAttributesResult
)


def get_active_pen_tables(port: int) -> GetActivePenTablesResult:
    """
    Returns the model view and layout book pen table identifiers.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetActivePenTables",
            parameters={}
        )
        return GetActivePenTablesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetActivePenTables result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetActivePenTables on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_active_pen_tables,
    name="attributes_get_active_pen_tables",
    title="GetActivePenTables",
    description="Returns the model view and layout book pen table identifiers.",
    params_model=None,
    result_model=GetActivePenTablesResult
)


def get_attribute_folder_structure(port: int, params: GetAttributeFolderStructureParameters) -> GetAttributeFolderStructureResult:
    """
    Returns the detailed folder structure for the attributes of a given type. If the path is not given, the root folder will be returned
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetAttributeFolderStructure",
            parameters=params.model_dump(mode='json')
        )
        return GetAttributeFolderStructureResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetAttributeFolderStructure result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAttributeFolderStructure on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_attribute_folder_structure,
    name="attributes_get_attribute_folder_structure",
    title="GetAttributeFolderStructure",
    description="Returns the detailed folder structure for the attributes of a given type. If the path is not given, the root folder will be returned",
    params_model=GetAttributeFolderStructureParameters,
    result_model=GetAttributeFolderStructureResult
)


def get_attribute_folders(port: int, params: GetAttributeFoldersParameters) -> GetAttributeFoldersResult:
    """
    Returns the detailed attribute folders identified by their Ids.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetAttributeFolders",
            parameters=params.model_dump(mode='json')
        )
        return GetAttributeFoldersResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetAttributeFolders result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAttributeFolders on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_attribute_folders,
    name="attributes_get_attribute_folders",
    title="GetAttributeFolders",
    description="Returns the detailed attribute folders identified by their Ids.",
    params_model=GetAttributeFoldersParameters,
    result_model=GetAttributeFoldersResult
)


def get_attributes_indices(port: int, params: GetAttributesIndicesParameters) -> GetAttributesIndicesResult:
    """
    Returns the requested indices and guids of attributes.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetAttributesIndices",
            parameters=params.model_dump(mode='json')
        )
        return GetAttributesIndicesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetAttributesIndices result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetAttributesIndices on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_attributes_indices,
    name="attributes_get_attributes_indices",
    title="GetAttributesIndices",
    description="Returns the requested indices and guids of attributes.",
    params_model=GetAttributesIndicesParameters,
    result_model=GetAttributesIndicesResult
)


def get_building_material_attributes(port: int, params: GetBuildingMaterialAttributesParameters) -> GetBuildingMaterialAttributesResult:
    """
    Returns the detailed building material attributes identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetBuildingMaterialAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetBuildingMaterialAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetBuildingMaterialAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetBuildingMaterialAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_building_material_attributes,
    name="attributes_get_building_material_attributes",
    title="GetBuildingMaterialAttributes",
    description="Returns the detailed building material attributes identified by their GUIDs.",
    params_model=GetBuildingMaterialAttributesParameters,
    result_model=GetBuildingMaterialAttributesResult
)


def get_composite_attributes(port: int, params: GetCompositeAttributesParameters) -> GetCompositeAttributesResult:
    """
    Returns the detailed composite attributes identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetCompositeAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetCompositeAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetCompositeAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetCompositeAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_composite_attributes,
    name="attributes_get_composite_attributes",
    title="GetCompositeAttributes",
    description="Returns the detailed composite attributes identified by their GUIDs.",
    params_model=GetCompositeAttributesParameters,
    result_model=GetCompositeAttributesResult
)


def get_fill_attributes(port: int, params: GetFillAttributesParameters) -> GetFillAttributesResult:
    """
    Returns the detailed fill attributes identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetFillAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetFillAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetFillAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetFillAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_fill_attributes,
    name="attributes_get_fill_attributes",
    title="GetFillAttributes",
    description="Returns the detailed fill attributes identified by their GUIDs.",
    params_model=GetFillAttributesParameters,
    result_model=GetFillAttributesResult
)


def get_layer_attributes(port: int, params: GetLayerAttributesParameters) -> GetLayerAttributesResult:
    """
    Returns the detailed layer attributes identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetLayerAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetLayerAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetLayerAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetLayerAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_layer_attributes,
    name="attributes_get_layer_attributes",
    title="GetLayerAttributes",
    description="Returns the detailed layer attributes identified by their GUIDs.",
    params_model=GetLayerAttributesParameters,
    result_model=GetLayerAttributesResult
)


def get_layer_combination_attributes(port: int, params: GetLayerCombinationAttributesParameters) -> GetLayerCombinationAttributesResult:
    """
    Returns the detailed layer combination attributes identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetLayerCombinationAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetLayerCombinationAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetLayerCombinationAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetLayerCombinationAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_layer_combination_attributes,
    name="attributes_get_layer_combination_attributes",
    title="GetLayerCombinationAttributes",
    description="Returns the detailed layer combination attributes identified by their GUIDs.",
    params_model=GetLayerCombinationAttributesParameters,
    result_model=GetLayerCombinationAttributesResult
)


def get_line_attributes(port: int, params: GetLineAttributesParameters) -> GetLineAttributesResult:
    """
    Returns the detailed line attributes identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetLineAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetLineAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetLineAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetLineAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_line_attributes,
    name="attributes_get_line_attributes",
    title="GetLineAttributes",
    description="Returns the detailed line attributes identified by their GUIDs.",
    params_model=GetLineAttributesParameters,
    result_model=GetLineAttributesResult
)


def get_pen_table_attributes(port: int, params: GetPenTableAttributesParameters) -> GetPenTableAttributesResult:
    """
    Returns the detailed pen table attributes (including their pens) identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetPenTableAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetPenTableAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetPenTableAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetPenTableAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_pen_table_attributes,
    name="attributes_get_pen_table_attributes",
    title="GetPenTableAttributes",
    description="Returns the detailed pen table attributes (including their pens) identified by their GUIDs.",
    params_model=GetPenTableAttributesParameters,
    result_model=GetPenTableAttributesResult
)


def get_profile_attribute_preview(port: int, params: GetProfileAttributePreviewParameters) -> GetProfileAttributePreviewResult:
    """
    Returns the preview image of each requested profile attribute in a base64 string format.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetProfileAttributePreview",
            parameters=params.model_dump(mode='json')
        )
        return GetProfileAttributePreviewResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetProfileAttributePreview result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetProfileAttributePreview on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_profile_attribute_preview,
    name="attributes_get_profile_attribute_preview",
    title="GetProfileAttributePreview",
    description="Returns the preview image of each requested profile attribute in a base64 string format.",
    params_model=GetProfileAttributePreviewParameters,
    result_model=GetProfileAttributePreviewResult
)


def get_profile_attributes(port: int, params: GetProfileAttributesParameters) -> GetProfileAttributesResult:
    """
    Returns the detailed profile attributes identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetProfileAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetProfileAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetProfileAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetProfileAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_profile_attributes,
    name="attributes_get_profile_attributes",
    title="GetProfileAttributes",
    description="Returns the detailed profile attributes identified by their GUIDs.",
    params_model=GetProfileAttributesParameters,
    result_model=GetProfileAttributesResult
)


def get_surface_attributes(port: int, params: GetSurfaceAttributesParameters) -> GetSurfaceAttributesResult:
    """
    Returns the detailed surface attributes identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetSurfaceAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetSurfaceAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetSurfaceAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetSurfaceAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_surface_attributes,
    name="attributes_get_surface_attributes",
    title="GetSurfaceAttributes",
    description="Returns the detailed surface attributes identified by their GUIDs.",
    params_model=GetSurfaceAttributesParameters,
    result_model=GetSurfaceAttributesResult
)


def get_zone_category_attributes(port: int, params: GetZoneCategoryAttributesParameters) -> GetZoneCategoryAttributesResult:
    """
    Returns the detailed zone category attributes identified by their GUIDs.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetZoneCategoryAttributes",
            parameters=params.model_dump(mode='json')
        )
        return GetZoneCategoryAttributesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetZoneCategoryAttributes result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetZoneCategoryAttributes on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_zone_category_attributes,
    name="attributes_get_zone_category_attributes",
    title="GetZoneCategoryAttributes",
    description="Returns the detailed zone category attributes identified by their GUIDs.",
    params_model=GetZoneCategoryAttributesParameters,
    result_model=GetZoneCategoryAttributesResult
)


def move_attributes_and_folders(port: int, params: MoveAttributesAndFoldersParameters) -> None:
    """
    Moves attributes and attribute folders.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_command(
            command="API.MoveAttributesAndFolders",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for MoveAttributesAndFolders result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing MoveAttributesAndFolders on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    move_attributes_and_folders,
    name="attributes_move_attributes_and_folders",
    title="MoveAttributesAndFolders",
    description="Moves attributes and attribute folders.",
    params_model=MoveAttributesAndFoldersParameters,
    result_model=None
)


def rename_attribute_folders(port: int, params: RenameAttributeFoldersParameters) -> RenameAttributeFoldersResult:
    """
    Rename attribute folder.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.RenameAttributeFolders",
            parameters=params.model_dump(mode='json')
        )
        return RenameAttributeFoldersResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for RenameAttributeFolders result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing RenameAttributeFolders on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    rename_attribute_folders,
    name="attributes_rename_attribute_folders",
    title="RenameAttributeFolders",
    description="Rename attribute folder.",
    params_model=RenameAttributeFoldersParameters,
    result_model=RenameAttributeFoldersResult
)
