# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ChildAsinMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'most_mentions': 'ChildAsinMentionMetrics',
        'least_mentions': 'ChildAsinMentionMetrics',
    }

    attribute_map = {
        'most_mentions': 'mostMentions',
        'least_mentions': 'leastMentions',
    }

    def __init__(self, most_mentions=None, least_mentions=None, _configuration=None):  # noqa: E501
        """ChildAsinMetrics - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._most_mentions = None
        self._least_mentions = None
        self.discriminator = None

        if most_mentions is not None:
            self.most_mentions = most_mentions
        if least_mentions is not None:
            self.least_mentions = least_mentions

    @property
    def most_mentions(self):
        """Gets the most_mentions of this ChildAsinMetrics.  # noqa: E501


        :return: The most_mentions of this ChildAsinMetrics.  # noqa: E501
        :rtype: ChildAsinMentionMetrics
        """
        return self._most_mentions

    @most_mentions.setter
    def most_mentions(self, most_mentions):
        """Sets the most_mentions of this ChildAsinMetrics.


        :param most_mentions: The most_mentions of this ChildAsinMetrics.  # noqa: E501
        :type: ChildAsinMentionMetrics
        """

        self._most_mentions = most_mentions

    @property
    def least_mentions(self):
        """Gets the least_mentions of this ChildAsinMetrics.  # noqa: E501


        :return: The least_mentions of this ChildAsinMetrics.  # noqa: E501
        :rtype: ChildAsinMentionMetrics
        """
        return self._least_mentions

    @least_mentions.setter
    def least_mentions(self, least_mentions):
        """Sets the least_mentions of this ChildAsinMetrics.


        :param least_mentions: The least_mentions of this ChildAsinMetrics.  # noqa: E501
        :type: ChildAsinMentionMetrics
        """

        self._least_mentions = least_mentions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChildAsinMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChildAsinMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChildAsinMetrics):
            return True

        return self.to_dict() != other.to_dict()
