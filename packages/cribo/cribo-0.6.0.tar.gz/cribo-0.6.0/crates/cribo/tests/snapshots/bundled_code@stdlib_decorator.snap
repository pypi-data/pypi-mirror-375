---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_decorator/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypackage_utils = _cribo.types.SimpleNamespace(__name__='mypackage.utils', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_7c69fc_mypackage_utils(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Utils module with contextlib decorator.\n\nThis module must have side effects to become a wrapper module,\nand uses contextlib as a decorator which should be preserved in\nthe init function but currently isn't.\n"""
    contextlib = _cribo.contextlib
    self.contextlib = contextlib
    self.contextlib = contextlib
    os = _cribo.os
    self.os = os
    self.os = os
    tempfile = _cribo.tempfile
    self.tempfile = tempfile
    self.tempfile = tempfile
    print("Loading utils module")

    @_cribo.contextlib.contextmanager
    def atomic_open(filename):
        """Write a file atomically using contextlib decorator."""
        print(f"Opening {filename}")
        tmp_descriptor, tmp_name = _cribo.tempfile.mkstemp(dir=_cribo.os.path.dirname(filename))
        try:
            with _cribo.os.fdopen(tmp_descriptor, "wb") as tmp_handler:
                yield tmp_handler
            _cribo.os.replace(tmp_name, filename)
        except BaseException:
            _cribo.os.remove(tmp_name)
            raise
    self.atomic_open = atomic_open
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypackage_utils.__init__ = _cribo_init___cribo_7c69fc_mypackage_utils
mypackage = _cribo.types.SimpleNamespace(__name__='mypackage', __initializing__=False, __initialized__=False)
mypackage.utils = mypackage_utils
def _cribo_init___cribo_41b947_mypackage(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global mypackage_utils
    """Package init file."""
    mypackage_utils = _cribo_init___cribo_7c69fc_mypackage_utils(mypackage_utils)
    utils = mypackage.utils
    self.utils = utils
    print("Loading mypackage")
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypackage.__init__ = _cribo_init___cribo_41b947_mypackage
"""Test contextlib import missing in wrapper module init functions.\n\nThis test reproduces the bug found when bundling requests where contextlib\nis used as @contextlib.contextmanager decorator but not imported in the\ngenerated init function for wrapper modules with side effects.\n"""
__cribo_init_result = _cribo_init___cribo_41b947_mypackage(mypackage)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypackage, attr, getattr(__cribo_init_result, attr))
utils = mypackage.utils
with utils.atomic_open("test.txt") as f:
    f.write(b"test")
print("Success")
