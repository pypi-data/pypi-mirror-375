# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/access/storage_access.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import catalog as _catalog__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class StorageOwner(betterproto.Enum):
    UNSPECIFIED = 0
    ADMIN = 1
    USER = 2


@dataclass(eq=False, repr=False)
class CreateStorageAccessResourceResponse(betterproto.Message):
    storage_access: "StorageAccess" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateStorageAccessResourceRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    operator_email: str = betterproto.string_field(3)
    s3_bucket: "S3Bucket" = betterproto.message_field(6, group="storage")
    """BigQueryDataset big_query_dataset = 5;"""

    gcp_user: "GcpUser" = betterproto.message_field(18, group="users_config")
    aws_user: "AwsUser" = betterproto.message_field(19, group="users_config")


@dataclass(eq=False, repr=False)
class DeleteStorageAccessRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    storage_access_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GcpUser(betterproto.Message):
    iam_user: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class AwsUser(betterproto.Message):
    aws_users_arn: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class BigQueryDataset(betterproto.Message):
    project_id: str = betterproto.string_field(1)
    dataset_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class S3Bucket(betterproto.Message):
    bucket: str = betterproto.string_field(1)
    region: str = betterproto.string_field(2)
    path: str = betterproto.string_field(3)
    access_key: str = betterproto.string_field(4)
    """
    Access and Secret keys are optional, and not recommended to be used.
     Has been added to support legacy clients migrating from Lift.
    """

    secret_key: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class RegisterStorageAccessExternalResourceRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    operator_email: str = betterproto.string_field(2)
    s3_bucket: "S3Bucket" = betterproto.message_field(4, group="storage")
    gcs_bucket: "_catalog__.GcsDestination" = betterproto.message_field(
        5, group="storage"
    )
    azure_blob_storage: "_catalog__.AzureDestination" = betterproto.message_field(
        6, group="storage"
    )
    big_query_dataset: "BigQueryDataset" = betterproto.message_field(7, group="storage")


@dataclass(eq=False, repr=False)
class RegisterStorageAccessExternalResourceResponse(betterproto.Message):
    storage_access: "StorageAccess" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetResourcePolicyRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    s3_bucket: "S3Bucket" = betterproto.message_field(4, group="storage")


@dataclass(eq=False, repr=False)
class GetResourcePolicyResponse(betterproto.Message):
    policy: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListStorageAccessRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListStorageAccessResponse(betterproto.Message):
    storage_access: List["StorageAccess"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StorageAccess(betterproto.Message):
    id: str = betterproto.string_field(11)
    billing_account_id: str = betterproto.string_field(1)
    storage_config_type: "_catalog__.DestinationConfigType" = betterproto.enum_field(2)
    storage_config_json: str = betterproto.string_field(3)
    create_time_string: str = betterproto.string_field(7)
    processing_log: str = betterproto.string_field(9)
    owner: "StorageOwner" = betterproto.enum_field(10)


class StorageAccessServiceStub(betterproto.ServiceStub):
    async def create_storage_access_resource(
        self,
        create_storage_access_resource_request: "CreateStorageAccessResourceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateStorageAccessResourceResponse":
        return await self._unary_unary(
            "/unacast.v2.access.StorageAccessService/CreateStorageAccessResource",
            create_storage_access_resource_request,
            CreateStorageAccessResourceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_storage_access_external_resource(
        self,
        register_storage_access_external_resource_request: "RegisterStorageAccessExternalResourceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RegisterStorageAccessExternalResourceResponse":
        return await self._unary_unary(
            "/unacast.v2.access.StorageAccessService/RegisterStorageAccessExternalResource",
            register_storage_access_external_resource_request,
            RegisterStorageAccessExternalResourceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_resource_access_to_allow_uc_delivery(
        self,
        get_resource_policy_request: "GetResourcePolicyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetResourcePolicyResponse":
        return await self._unary_unary(
            "/unacast.v2.access.StorageAccessService/GetResourceAccessToAllowUCDelivery",
            get_resource_policy_request,
            GetResourcePolicyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_storage_access_resources(
        self,
        list_storage_access_request: "ListStorageAccessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListStorageAccessResponse":
        return await self._unary_unary(
            "/unacast.v2.access.StorageAccessService/ListStorageAccessResources",
            list_storage_access_request,
            ListStorageAccessResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_storage_access_resource(
        self,
        delete_storage_access_request: "DeleteStorageAccessRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.v2.access.StorageAccessService/DeleteStorageAccessResource",
            delete_storage_access_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class StorageAccessServiceBase(ServiceBase):

    async def create_storage_access_resource(
        self,
        create_storage_access_resource_request: "CreateStorageAccessResourceRequest",
    ) -> "CreateStorageAccessResourceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_storage_access_external_resource(
        self,
        register_storage_access_external_resource_request: "RegisterStorageAccessExternalResourceRequest",
    ) -> "RegisterStorageAccessExternalResourceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_resource_access_to_allow_uc_delivery(
        self, get_resource_policy_request: "GetResourcePolicyRequest"
    ) -> "GetResourcePolicyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_storage_access_resources(
        self, list_storage_access_request: "ListStorageAccessRequest"
    ) -> "ListStorageAccessResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_storage_access_resource(
        self, delete_storage_access_request: "DeleteStorageAccessRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_storage_access_resource(
        self,
        stream: "grpclib.server.Stream[CreateStorageAccessResourceRequest, CreateStorageAccessResourceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_storage_access_resource(request)
        await stream.send_message(response)

    async def __rpc_register_storage_access_external_resource(
        self,
        stream: "grpclib.server.Stream[RegisterStorageAccessExternalResourceRequest, RegisterStorageAccessExternalResourceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.register_storage_access_external_resource(request)
        await stream.send_message(response)

    async def __rpc_get_resource_access_to_allow_uc_delivery(
        self,
        stream: "grpclib.server.Stream[GetResourcePolicyRequest, GetResourcePolicyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_resource_access_to_allow_uc_delivery(request)
        await stream.send_message(response)

    async def __rpc_list_storage_access_resources(
        self,
        stream: "grpclib.server.Stream[ListStorageAccessRequest, ListStorageAccessResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_storage_access_resources(request)
        await stream.send_message(response)

    async def __rpc_delete_storage_access_resource(
        self,
        stream: "grpclib.server.Stream[DeleteStorageAccessRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_storage_access_resource(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.access.StorageAccessService/CreateStorageAccessResource": grpclib.const.Handler(
                self.__rpc_create_storage_access_resource,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateStorageAccessResourceRequest,
                CreateStorageAccessResourceResponse,
            ),
            "/unacast.v2.access.StorageAccessService/RegisterStorageAccessExternalResource": grpclib.const.Handler(
                self.__rpc_register_storage_access_external_resource,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterStorageAccessExternalResourceRequest,
                RegisterStorageAccessExternalResourceResponse,
            ),
            "/unacast.v2.access.StorageAccessService/GetResourceAccessToAllowUCDelivery": grpclib.const.Handler(
                self.__rpc_get_resource_access_to_allow_uc_delivery,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetResourcePolicyRequest,
                GetResourcePolicyResponse,
            ),
            "/unacast.v2.access.StorageAccessService/ListStorageAccessResources": grpclib.const.Handler(
                self.__rpc_list_storage_access_resources,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListStorageAccessRequest,
                ListStorageAccessResponse,
            ),
            "/unacast.v2.access.StorageAccessService/DeleteStorageAccessResource": grpclib.const.Handler(
                self.__rpc_delete_storage_access_resource,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteStorageAccessRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }
