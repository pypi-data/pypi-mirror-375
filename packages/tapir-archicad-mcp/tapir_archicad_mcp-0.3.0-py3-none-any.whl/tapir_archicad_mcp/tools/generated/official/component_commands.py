# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch

from multiconn_archicad.models.official.commands import (
    GetComponentsOfElementsParameters,
GetComponentsOfElementsResult,
GetPropertyValuesOfElementComponentsParameters,
GetPropertyValuesOfElementComponentsResult
)


log = logging.getLogger()

def get_components_of_elements(port: int, params: GetComponentsOfElementsParameters) -> GetComponentsOfElementsResult:
    """
    Returns the identifier of every component for a list of elements. The order of the returned list is the same as the given elements.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetComponentsOfElements",
            parameters=params.model_dump(mode='json')
        )
        return GetComponentsOfElementsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetComponentsOfElements result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetComponentsOfElements on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_components_of_elements,
    name="components_get_components_of_elements",
    title="GetComponentsOfElements",
    description="Returns the identifier of every component for a list of elements. The order of the returned list is the same as the given elements.",
    params_model=GetComponentsOfElementsParameters,
    result_model=GetComponentsOfElementsResult
)


def get_property_values_of_element_components(port: int, params: GetPropertyValuesOfElementComponentsParameters) -> GetPropertyValuesOfElementComponentsResult:
    """
    Returns the property values of the components for the given property.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.GetPropertyValuesOfElementComponents",
            parameters=params.model_dump(mode='json')
        )
        return GetPropertyValuesOfElementComponentsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetPropertyValuesOfElementComponents result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetPropertyValuesOfElementComponents on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    get_property_values_of_element_components,
    name="components_get_property_values_of_element_components",
    title="GetPropertyValuesOfElementComponents",
    description="Returns the property values of the components for the given property.",
    params_model=GetPropertyValuesOfElementComponentsParameters,
    result_model=GetPropertyValuesOfElementComponentsResult
)
