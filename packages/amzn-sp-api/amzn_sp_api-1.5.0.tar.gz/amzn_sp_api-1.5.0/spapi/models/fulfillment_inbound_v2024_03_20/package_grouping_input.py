# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PackageGroupingInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boxes': 'List[BoxInput]',
        'packing_group_id': 'str',
        'shipment_id': 'str',
    }

    attribute_map = {
        'boxes': 'boxes',
        'packing_group_id': 'packingGroupId',
        'shipment_id': 'shipmentId',
    }

    def __init__(self, boxes=None, packing_group_id=None, shipment_id=None, _configuration=None):  # noqa: E501
        """PackageGroupingInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._boxes = None
        self._packing_group_id = None
        self._shipment_id = None
        self.discriminator = None

        self.boxes = boxes
        if packing_group_id is not None:
            self.packing_group_id = packing_group_id
        if shipment_id is not None:
            self.shipment_id = shipment_id

    @property
    def boxes(self):
        """Gets the boxes of this PackageGroupingInput.  # noqa: E501

        Box level information being provided.  # noqa: E501

        :return: The boxes of this PackageGroupingInput.  # noqa: E501
        :rtype: List[BoxInput]
        """
        return self._boxes

    @boxes.setter
    def boxes(self, boxes):
        """Sets the boxes of this PackageGroupingInput.

        Box level information being provided.  # noqa: E501

        :param boxes: The boxes of this PackageGroupingInput.  # noqa: E501
        :type: List[BoxInput]
        """
        if self._configuration.client_side_validation and boxes is None:
            raise ValueError("Invalid value for `boxes`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                boxes is not None and len(boxes) > 5000):
            raise ValueError("Invalid value for `boxes`, number of items must be less than or equal to `5000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                boxes is not None and len(boxes) < 1):
            raise ValueError("Invalid value for `boxes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._boxes = boxes

    @property
    def packing_group_id(self):
        """Gets the packing_group_id of this PackageGroupingInput.  # noqa: E501

        The ID of the `packingGroup` that packages are grouped according to. The `PackingGroupId` can only be provided before placement confirmation, and it must belong to the confirmed `PackingOption`. One of `ShipmentId` or `PackingGroupId` must be provided with every request.  # noqa: E501

        :return: The packing_group_id of this PackageGroupingInput.  # noqa: E501
        :rtype: str
        """
        return self._packing_group_id

    @packing_group_id.setter
    def packing_group_id(self, packing_group_id):
        """Sets the packing_group_id of this PackageGroupingInput.

        The ID of the `packingGroup` that packages are grouped according to. The `PackingGroupId` can only be provided before placement confirmation, and it must belong to the confirmed `PackingOption`. One of `ShipmentId` or `PackingGroupId` must be provided with every request.  # noqa: E501

        :param packing_group_id: The packing_group_id of this PackageGroupingInput.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                packing_group_id is not None and len(packing_group_id) > 38):
            raise ValueError("Invalid value for `packing_group_id`, length must be less than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                packing_group_id is not None and len(packing_group_id) < 38):
            raise ValueError("Invalid value for `packing_group_id`, length must be greater than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                packing_group_id is not None and not re.search(r'^[a-zA-Z0-9-]*$', packing_group_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `packing_group_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9-]*$/`")  # noqa: E501

        self._packing_group_id = packing_group_id

    @property
    def shipment_id(self):
        """Gets the shipment_id of this PackageGroupingInput.  # noqa: E501

        The ID of the shipment that packages are grouped according to. The `ShipmentId` can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of `ShipmentId` or `PackingGroupId` must be provided with every request.  # noqa: E501

        :return: The shipment_id of this PackageGroupingInput.  # noqa: E501
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this PackageGroupingInput.

        The ID of the shipment that packages are grouped according to. The `ShipmentId` can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of `ShipmentId` or `PackingGroupId` must be provided with every request.  # noqa: E501

        :param shipment_id: The shipment_id of this PackageGroupingInput.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                shipment_id is not None and len(shipment_id) > 38):
            raise ValueError("Invalid value for `shipment_id`, length must be less than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shipment_id is not None and len(shipment_id) < 38):
            raise ValueError("Invalid value for `shipment_id`, length must be greater than or equal to `38`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shipment_id is not None and not re.search(r'^[a-zA-Z0-9-]*$', shipment_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `shipment_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9-]*$/`")  # noqa: E501

        self._shipment_id = shipment_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageGroupingInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageGroupingInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageGroupingInput):
            return True

        return self.to_dict() != other.to_dict()
