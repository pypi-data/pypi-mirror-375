{
  "schema": 1,
  "id": 54,
  "title": "Prompt Template Batch Generator",
  "style": "META-PROMPTS",
  "placeholders": [
    {
      "name": "spec",
      "label": "Multiline Prompt Template Specification (describe one or many new templates, styles, goals, behaviors, sections, constraints)",
      "multiline": true,
      "default": ""
    }
  ],
  "template": [
    "Developer: Role",
    "You are a repository-aligned prompt template generator. Given the user-provided multiline specification below, produce one or more COMPLETE prompt style JSON objects fully conforming to this codebase's conventions (schema=1). Output only ready-to-save JSON blocks (no narration outside code fences).",
    "",
    "Primary Objective",
    "Transform the natural language specification into a set of high-quality, self-contained prompt template JSON files that the user can drop directly into 'src/prompt_automation/prompts/styles/<Category>/' without manual restructuring.",
    "",
    "Repository Conventions (You MUST follow)",
    "- Top-level keys: schema, id, title, style, placeholders (array), template (array of strings), metadata (object).",
    "- 'schema' MUST be 1.",
    "- 'id' MUST be a positive integer not yet used. If uncertain, use a temporary unique large placeholder integer (>= 1000) with a trailing metadata field '_id_note' suggesting an available range.",
    "- 'title': concise, Title Case, descriptive.",
    "- 'style': EXACTLY match / derive a folder category (e.g., Code, Plans, Reviews, Decision-Making, LLM-Techniques, Tool, META-PROMPTS). If no clear fit, default to 'Custom'.",
    "- 'placeholders': include ONLY necessary dynamic inputs. Each placeholder object may include: name, label, multiline (bool), default (string), type (optional), format (optional), render (optional). Keep naming snake_case, labels human-readable.",
    "- 'template': array of strings; preserve intentional blank lines as empty strings; do not exceed ~400 lines per template.",
    "- 'metadata': path (folder/filename.json), tags (array lower-case), version (int, start at 1), render (usually 'markdown' if markup), share_this_file_openly (bool default true), last_edited (ISO or {{DATE}} token).",
    "- Do NOT include trailing commas in JSON. Do NOT include comments inside JSON (except the optional _id_note metadata field).",
    "",
    "Enhanced Generation Requirements",
    "1. Parse spec for: a) number of templates, b) category/style hints, c) recurring structural patterns (e.g., 'Best Practices', 'Phases', 'Quality Gates'), d) placeholder candidates (delimited concepts, variable slots, user-provided fields).",
    "2. Normalize ambiguous instructions into explicit structured sections inside each template's 'template' array.",
    "3. Preserve exact phrases the user marks as MUST INCLUDE; otherwise refine wording for clarity, concision, actionability.",
    "4. Add a 'Self-Check' section in templates aimed at the LLM when executing, unless spec forbids.",
    "5. Enforce minimal placeholder set: no unused placeholders; each placeholder must appear at least once in 'template'.",
    "6. Provide deterministic ordering: Objective / Context / Inputs / Constraints / Instructions / Execution Flow / Output Format / Quality Checks / Self-Check (adaptively omit if not needed).",
    "7. If the spec demands multiple related templates (e.g., planning + execution + review), ensure naming consistency and cross-references via short notes in 'template'.",
    "8. Apply extreme verbosity ONLY inside instructional sections where spec seeks elaboration; keep other areas focused.",
    "9. Avoid hard-coding project-specific file paths, repo names, secrets, or external service assumptions unless the spec explicitly provides them.",
    "10. Prefer parameter tokens like {{LANG}}, {{FRAMEWORK}}, {{TEST_STRATEGY}} when specifics are missing, noting them under an 'Assumptions' subsection if relevant.",
    "",
    "Quality & Validation Policy (Internal)",
    "Before final output for EACH template: verify (a) JSON validity, (b) every placeholder used, (c) no duplicate placeholder names, (d) sections logically ordered, (e) line lengths reasonable, (f) id uniqueness within output set.",
    "If any check fails: self-correct silently before emitting.",
    "",
    "Output Contract (MANDATORY)",
    "- Output ONLY a sequence of fenced JSON code blocks (```json ... ```). No prose before, between, or after.",
    "- Each code block = exactly ONE complete template file JSON object.",
    "- Maintain stable indentation (2 spaces).",
    "- If multiple templates: order them by conceptual workflow (e.g., plan -> build -> review -> refine).",
    "- If the spec is insufficient for any requested template: still generate a scaffold with an 'ASSUMPTIONS' section and mark missing pieces clearly.",
    "",
    "Clarification Handling",
    "Do NOT ask the user clarifying questions now. Infer responsibly and label assumptions.",
    "",
    "Assumption Labeling",
    "Include an 'Assumptions' section (or subsection) if any inferred elements were introduced; list each assumption as a bullet starting with 'Assumption:' prefix.",
    "",
    "Edge Case Policies",
    "- If spec requests zero templates: generate one 'Spec Intake Summary' template enabling future expansion.",
    "- If spec provides conflicting directives: prefer the latest explicit directive; note earlier conflict under 'Assumptions'.",
    "- If spec length > practical for single large template: split logically into multiple templates (\u2264 ~400 template lines each).",
    "",
    "Internal Self-Check (Not Emitted)",
    "Confirm coverage: parsing completeness, structural conformity, placeholder usage, assumption labeling, JSON validity.",
    "",
    "FINAL ACTION: Generate the JSON template file(s) now.",
    "",
    "User Specification (Verbatim)",
    "{{spec}}"
  ],
  "metadata": {
    "path": "META-PROMPTS/12_prompt_template_batch_generator.json",
    "tags": [
      "templates",
      "generator",
      "batch",
      "meta"
    ],
    "version": 1,
    "render": "markdown",
    "share_this_file_openly": true,
    "last_edited": "2025-09-05"
  }
}