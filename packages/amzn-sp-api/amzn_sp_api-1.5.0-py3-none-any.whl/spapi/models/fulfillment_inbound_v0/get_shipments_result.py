# coding: utf-8

"""
    Selling Partner API for Fulfillment Inbound

    The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class GetShipmentsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_data': 'List[InboundShipmentInfo]',
        'next_token': 'str',
    }

    attribute_map = {
        'shipment_data': 'ShipmentData',
        'next_token': 'NextToken',
    }

    def __init__(self, shipment_data=None, next_token=None, _configuration=None):  # noqa: E501
        """GetShipmentsResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._shipment_data = None
        self._next_token = None
        self.discriminator = None

        if shipment_data is not None:
            self.shipment_data = shipment_data
        if next_token is not None:
            self.next_token = next_token

    @property
    def shipment_data(self):
        """Gets the shipment_data of this GetShipmentsResult.  # noqa: E501

        A list of inbound shipment information.  # noqa: E501

        :return: The shipment_data of this GetShipmentsResult.  # noqa: E501
        :rtype: List[InboundShipmentInfo]
        """
        return self._shipment_data

    @shipment_data.setter
    def shipment_data(self, shipment_data):
        """Sets the shipment_data of this GetShipmentsResult.

        A list of inbound shipment information.  # noqa: E501

        :param shipment_data: The shipment_data of this GetShipmentsResult.  # noqa: E501
        :type: List[InboundShipmentInfo]
        """

        self._shipment_data = shipment_data

    @property
    def next_token(self):
        """Gets the next_token of this GetShipmentsResult.  # noqa: E501

        When present and not empty, pass this string token in the next request to return the next response page.  # noqa: E501

        :return: The next_token of this GetShipmentsResult.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetShipmentsResult.

        When present and not empty, pass this string token in the next request to return the next response page.  # noqa: E501

        :param next_token: The next_token of this GetShipmentsResult.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetShipmentsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetShipmentsResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetShipmentsResult):
            return True

        return self.to_dict() != other.to_dict()
