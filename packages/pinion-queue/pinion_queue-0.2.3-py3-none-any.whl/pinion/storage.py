from __future__ import annotations

from typing import Protocol, runtime_checkable

from .types import Job


@runtime_checkable
class Storage(Protocol):
    def enqueue(self, job: Job) -> None: ...
    def dequeue(self, timeout: float | None = None) -> Job | None: ...
    def mark_done(self, job: Job) -> None: ...
    def mark_failed(self, job: Job, exc: Exception) -> None: ...
    def size(self) -> int: ...
    # Heartbeat and reaping
    def heartbeat(self, job: Job) -> None: ...
    def reap_stale(self, visibility_timeout: float) -> int: ...
    # Dead letter queue
    def dead_letter(self, job: Job, exc: Exception) -> None: ...

