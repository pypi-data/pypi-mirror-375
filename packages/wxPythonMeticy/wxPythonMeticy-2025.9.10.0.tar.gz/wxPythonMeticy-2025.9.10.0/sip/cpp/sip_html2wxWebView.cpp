/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.12.0
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_html2.h"
        #include <wx/webview.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/validate.h>
        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/versioninfo.h>
        #include <wx/webview.h>
        #include <wx/stream.h>
        #include <wx/webview.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
        
                #if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
                #include <wx/msw/webview_ie.h>
                #include <wx/msw/registry.h>
        
                bool _do_MSWSetEmulationLevel(wxWebViewIE_EmulationLevel level)
                {
                    wxString programName;
                    wxPyBLOCK_THREADS(
                        programName = Py2wxString(PySys_GetObject("executable")));
                    programName = programName.AfterLast('\\');
        
                    // Registry key where emulation level for programs are set
                    static const wxChar* IE_EMULATION_KEY =
                        wxT("SOFTWARE\\Microsoft\\Internet Explorer\\Main")
                        wxT("\\FeatureControl\\FEATURE_BROWSER_EMULATION");
        
                    wxRegKey key(wxRegKey::HKCU, IE_EMULATION_KEY);
                    if ( !key.Exists() )
                    {
                        wxLogWarning(_("Failed to find web view emulation level in the registry"));
                        return false;
                    }
                    if ( level != wxWEBVIEWIE_EMU_DEFAULT )
                    {
                        if ( !key.SetValue(programName, level) )
                        {
                            wxLogWarning(_("Failed to set web view to modern emulation level"));
                            return false;
                        }
                    }
                    else
                    {
                        if ( !key.DeleteValue(programName) )
                        {
                            wxLogWarning(_("Failed to reset web view to standard emulation level"));
                            return false;
                        }
                    }
                    return true;
                }
                #endif
    PyObject* _wxWebView_GetBackwardHistory(wxWebView* self)
    {
        wxPyThreadBlocker blocker;
        PyObject* result = PyList_New(0);
        wxVector<wxSharedPtr<wxWebViewHistoryItem> >  vector = self->GetBackwardHistory();
        for (size_t idx=0; idx < vector.size(); idx++) {
            PyObject* obj;
            wxWebViewHistoryItem* item = new wxWebViewHistoryItem(*vector[idx].get());
            obj = wxPyConstructObject((void*)item, "wxWebViewHistoryItem", true);
            PyList_Append(result, obj);
            Py_DECREF(obj);
        }
        return result;
    }
    PyObject* _wxWebView_GetForwardHistory(wxWebView* self)
    {
        wxPyThreadBlocker blocker;
        PyObject* result = PyList_New(0);
        wxVector<wxSharedPtr<wxWebViewHistoryItem> >  vector = self->GetForwardHistory();
        for (size_t idx=0; idx < vector.size(); idx++) {
            PyObject* obj;
            wxWebViewHistoryItem* item = new wxWebViewHistoryItem(*vector[idx].get());
            obj = wxPyConstructObject((void*)item, "wxWebViewHistoryItem", true);
            PyList_Append(result, obj);
            Py_DECREF(obj);
        }
        return result;
    }
    bool _wxWebView_MSWSetEmulationLevel(wxWebViewIE_EmulationLevel level)
    {
        #if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
            return _do_MSWSetEmulationLevel(level);
        #else
            return false;
        #endif
    }
    bool _wxWebView_MSWSetModernEmulationLevel(bool modernLevel)
    {
        #if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
            return _do_MSWSetEmulationLevel(modernLevel ? wxWEBVIEWIE_EMU_IE8
                                                        : wxWEBVIEWIE_EMU_DEFAULT);
        #else
            return false;
        #endif
    }


PyDoc_STRVAR(doc_wxWebView_RunScript, "RunScript(javascript) -> Tuple[bool, str]\n"
"\n"
"Runs the given JavaScript code.");

extern "C" {static PyObject *meth_wxWebView_RunScript(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_RunScript(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* javascript;
        int javascriptState = 0;
        ::wxString* output;
        const ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_javascript,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxString, &javascript, &javascriptState))
        {
            bool sipRes;
            output = new ::wxString();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->RunScript(*javascript, output);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(javascript), sipType_wxString, javascriptState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0, "(bN)", sipRes, output, sipType_wxString, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_RunScript, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_RunScriptAsync, "RunScriptAsync(javascript, clientData=None) -> None\n"
"\n"
"Runs the given JavaScript code asynchronously and returns the result\n"
"via a wxEVT_WEBVIEW_SCRIPT_RESULT.");

extern "C" {static PyObject *meth_wxWebView_RunScriptAsync(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_RunScriptAsync(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* javascript;
        int javascriptState = 0;
        void* clientData = 0;
        const ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_javascript,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|v", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxString, &javascript, &javascriptState, &clientData))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RunScriptAsync(*javascript, clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(javascript), sipType_wxString, javascriptState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_RunScriptAsync, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_AddScriptMessageHandler, "AddScriptMessageHandler(name) -> bool\n"
"\n"
"Add a script message handler with the given name.");

extern "C" {static PyObject *meth_wxWebView_AddScriptMessageHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_AddScriptMessageHandler(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* name;
        int nameState = 0;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxString, &name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddScriptMessageHandler(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_AddScriptMessageHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_RemoveScriptMessageHandler, "RemoveScriptMessageHandler(name) -> bool\n"
"\n"
"Remove a script message handler with the given name that was\n"
"previously added via AddScriptMessageHandler().");

extern "C" {static PyObject *meth_wxWebView_RemoveScriptMessageHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_RemoveScriptMessageHandler(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* name;
        int nameState = 0;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxString, &name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->RemoveScriptMessageHandler(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_RemoveScriptMessageHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_AddUserScript, "AddUserScript(javascript, injectionTime=WEBVIEW_INJECT_AT_DOCUMENT_START) -> bool\n"
"\n"
"Injects the specified script into the webpage's content.");

extern "C" {static PyObject *meth_wxWebView_AddUserScript(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_AddUserScript(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* javascript;
        int javascriptState = 0;
        ::wxWebViewUserScriptInjectionTime injectionTime = wxWEBVIEW_INJECT_AT_DOCUMENT_START;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_javascript,
            sipName_injectionTime,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxString, &javascript, &javascriptState, sipType_wxWebViewUserScriptInjectionTime, &injectionTime))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddUserScript(*javascript, injectionTime);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(javascript), sipType_wxString, javascriptState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_AddUserScript, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_RemoveAllUserScripts, "RemoveAllUserScripts() -> None\n"
"\n"
"Removes all user scripts from the web view.");

extern "C" {static PyObject *meth_wxWebView_RemoveAllUserScripts(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_RemoveAllUserScripts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RemoveAllUserScripts();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_RemoveAllUserScripts, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_CanCopy, "CanCopy() -> bool\n"
"\n"
"Returns true if the current selection can be copied.");

extern "C" {static PyObject *meth_wxWebView_CanCopy(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_CanCopy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanCopy();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_CanCopy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_CanCut, "CanCut() -> bool\n"
"\n"
"Returns true if the current selection can be cut.");

extern "C" {static PyObject *meth_wxWebView_CanCut(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_CanCut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanCut();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_CanCut, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_CanPaste, "CanPaste() -> bool\n"
"\n"
"Returns true if data can be pasted.");

extern "C" {static PyObject *meth_wxWebView_CanPaste(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_CanPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanPaste();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_CanPaste, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Copy, "Copy() -> None\n"
"\n"
"Copies the current selection.");

extern "C" {static PyObject *meth_wxWebView_Copy(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Copy();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Copy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Cut, "Cut() -> None\n"
"\n"
"Cuts the current selection.");

extern "C" {static PyObject *meth_wxWebView_Cut(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Cut();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Cut, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Paste, "Paste() -> None\n"
"\n"
"Pastes the current data.");

extern "C" {static PyObject *meth_wxWebView_Paste(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Paste();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Paste, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_EnableContextMenu, "EnableContextMenu(enable=True) -> None\n"
"\n"
"Enable or disable the right click context menu.");

extern "C" {static PyObject *meth_wxWebView_EnableContextMenu(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_EnableContextMenu(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxWebView, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableContextMenu(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_EnableContextMenu, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_IsContextMenuEnabled, "IsContextMenuEnabled() -> bool\n"
"\n"
"Returns true if a context menu will be shown on right click.");

extern "C" {static PyObject *meth_wxWebView_IsContextMenuEnabled(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_IsContextMenuEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsContextMenuEnabled();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_IsContextMenuEnabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_EnableAccessToDevTools, "EnableAccessToDevTools(enable=True) -> None\n"
"\n"
"Enable or disable access to dev tools for the user.");

extern "C" {static PyObject *meth_wxWebView_EnableAccessToDevTools(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_EnableAccessToDevTools(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxWebView, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableAccessToDevTools(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_EnableAccessToDevTools, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_IsAccessToDevToolsEnabled, "IsAccessToDevToolsEnabled() -> bool\n"
"\n"
"Returns true if dev tools are available to the user.");

extern "C" {static PyObject *meth_wxWebView_IsAccessToDevToolsEnabled(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_IsAccessToDevToolsEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsAccessToDevToolsEnabled();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_IsAccessToDevToolsEnabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_SetUserAgent, "SetUserAgent(userAgent) -> bool\n"
"\n"
"Specify a custom user agent string for the web view.");

extern "C" {static PyObject *meth_wxWebView_SetUserAgent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_SetUserAgent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* userAgent;
        int userAgentState = 0;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_userAgent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxString, &userAgent, &userAgentState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetUserAgent(*userAgent);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(userAgent), sipType_wxString, userAgentState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_SetUserAgent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetUserAgent, "GetUserAgent() -> str\n"
"\n"
"Returns the current user agent string for the web view.");

extern "C" {static PyObject *meth_wxWebView_GetUserAgent(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetUserAgent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxString(sipCpp->GetUserAgent());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxString, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetUserAgent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_CanGoBack, "CanGoBack() -> bool\n"
"\n"
"Returns true if it is possible to navigate backward in the history of\n"
"visited pages.");

extern "C" {static PyObject *meth_wxWebView_CanGoBack(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_CanGoBack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanGoBack();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_CanGoBack, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_CanGoForward, "CanGoForward() -> bool\n"
"\n"
"Returns true if it is possible to navigate forward in the history of\n"
"visited pages.");

extern "C" {static PyObject *meth_wxWebView_CanGoForward(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_CanGoForward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanGoForward();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_CanGoForward, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_ClearHistory, "ClearHistory() -> None\n"
"\n"
"Clear the history, this will also remove the visible page.");

extern "C" {static PyObject *meth_wxWebView_ClearHistory(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_ClearHistory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearHistory();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_ClearHistory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_EnableHistory, "EnableHistory(enable=True) -> None\n"
"\n"
"Enable or disable the history.");

extern "C" {static PyObject *meth_wxWebView_EnableHistory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_EnableHistory(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxWebView, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableHistory(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_EnableHistory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetBackwardHistory, "GetBackwardHistory() -> Any\n"
"\n"
"Returns a list of items in the back history.");

extern "C" {static PyObject *meth_wxWebView_GetBackwardHistory(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetBackwardHistory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWebView_GetBackwardHistory(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetBackwardHistory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetForwardHistory, "GetForwardHistory() -> Any\n"
"\n"
"Returns a list of items in the forward history.");

extern "C" {static PyObject *meth_wxWebView_GetForwardHistory(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetForwardHistory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWebView_GetForwardHistory(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetForwardHistory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GoBack, "GoBack() -> None\n"
"\n"
"Navigate back in the history of visited pages.");

extern "C" {static PyObject *meth_wxWebView_GoBack(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GoBack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GoBack();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GoBack, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GoForward, "GoForward() -> None\n"
"\n"
"Navigate forward in the history of visited pages.");

extern "C" {static PyObject *meth_wxWebView_GoForward(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GoForward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GoForward();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GoForward, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_ClearSelection, "ClearSelection() -> None\n"
"\n"
"Clears the current selection.");

extern "C" {static PyObject *meth_wxWebView_ClearSelection(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_ClearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_ClearSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_DeleteSelection, "DeleteSelection() -> None\n"
"\n"
"Deletes the current selection.");

extern "C" {static PyObject *meth_wxWebView_DeleteSelection(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_DeleteSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_DeleteSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetSelectedSource, "GetSelectedSource() -> str\n"
"\n"
"Returns the currently selected source, if any.");

extern "C" {static PyObject *meth_wxWebView_GetSelectedSource(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetSelectedSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxString(sipCpp->GetSelectedSource());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxString, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetSelectedSource, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetSelectedText, "GetSelectedText() -> str\n"
"\n"
"Returns the currently selected text, if any.");

extern "C" {static PyObject *meth_wxWebView_GetSelectedText(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxString(sipCpp->GetSelectedText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxString, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetSelectedText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_HasSelection, "HasSelection() -> bool\n"
"\n"
"Returns true if there is a current selection.");

extern "C" {static PyObject *meth_wxWebView_HasSelection(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_HasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_HasSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_SelectAll, "SelectAll() -> None\n"
"\n"
"Selects the entire page.");

extern "C" {static PyObject *meth_wxWebView_SelectAll(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_SelectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SelectAll();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_SelectAll, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_CanRedo, "CanRedo() -> bool\n"
"\n"
"Returns true if there is an action to redo.");

extern "C" {static PyObject *meth_wxWebView_CanRedo(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_CanRedo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanRedo();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_CanRedo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_CanUndo, "CanUndo() -> bool\n"
"\n"
"Returns true if there is an action to undo.");

extern "C" {static PyObject *meth_wxWebView_CanUndo(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_CanUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanUndo();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_CanUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Redo, "Redo() -> None\n"
"\n"
"Redos the last action.");

extern "C" {static PyObject *meth_wxWebView_Redo(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Redo();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Redo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Undo, "Undo() -> None\n"
"\n"
"Undos the last action.");

extern "C" {static PyObject *meth_wxWebView_Undo(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Undo();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Undo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Find, "Find(text, flags=WEBVIEW_FIND_DEFAULT) -> int\n"
"\n"
"Finds a phrase on the current page and if found, the control will scroll the phrase into view and select it.");

extern "C" {static PyObject *meth_wxWebView_Find(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Find(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* text;
        int textState = 0;
        ::wxWebViewFindFlags flags = wxWEBVIEW_FIND_DEFAULT;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxString, &text, &textState, sipType_wxWebViewFindFlags, &flags))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Find(*text, flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text), sipType_wxString, textState);

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Find, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_CanSetZoomType, "CanSetZoomType(type) -> bool\n"
"\n"
"Retrieve whether the current HTML engine supports a zoom type.");

extern "C" {static PyObject *meth_wxWebView_CanSetZoomType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_CanSetZoomType(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebViewZoomType type;
        const ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxWebViewZoomType, &type))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanSetZoomType(type);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_CanSetZoomType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetZoom, "GetZoom() -> WebViewZoom\n"
"\n"
"Get the zoom level of the page.");

extern "C" {static PyObject *meth_wxWebView_GetZoom(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxWebViewZoom sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetZoom();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxWebViewZoom);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetZoom, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetZoomFactor, "GetZoomFactor() -> float\n"
"\n"
"Get the zoom factor of the page.");

extern "C" {static PyObject *meth_wxWebView_GetZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            float sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetZoomFactor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetZoomFactor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetZoomType, "GetZoomType() -> WebViewZoomType\n"
"\n"
"Get how the zoom factor is currently interpreted.");

extern "C" {static PyObject *meth_wxWebView_GetZoomType(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetZoomType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxWebViewZoomType sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetZoomType();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxWebViewZoomType);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetZoomType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_SetZoom, "SetZoom(zoom) -> None\n"
"\n"
"Set the zoom level of the page.");

extern "C" {static PyObject *meth_wxWebView_SetZoom(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_SetZoom(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebViewZoom zoom;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_zoom,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxWebViewZoom, &zoom))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetZoom(zoom);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_SetZoom, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_SetZoomFactor, "SetZoomFactor(zoom) -> None\n"
"\n"
"Set the zoom factor of the page.");

extern "C" {static PyObject *meth_wxWebView_SetZoomFactor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_SetZoomFactor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float zoom;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_zoom,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bf", &sipSelf, sipType_wxWebView, &sipCpp, &zoom))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetZoomFactor(zoom);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_SetZoomFactor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_SetZoomType, "SetZoomType(zoomType) -> None\n"
"\n"
"Set how to interpret the zoom factor.");

extern "C" {static PyObject *meth_wxWebView_SetZoomType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_SetZoomType(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebViewZoomType zoomType;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_zoomType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxWebViewZoomType, &zoomType))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetZoomType(zoomType);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_SetZoomType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Create, "Create(parent, id=wx.ID_ANY, url=WebViewDefaultURLStr, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, name=WebViewNameStr) -> bool\n"
"\n"
"Creation function for two-step creation.");

extern "C" {static PyObject *meth_wxWebView_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWindow* parent;
        ::wxWindowID id = wxID_ANY;
        const ::wxString& urldef = wxWebViewDefaultURLStr;
        const ::wxString* url = &urldef;
        int urlState = 0;
        const ::wxPoint& posdef = wxDefaultPosition;
        const ::wxPoint* pos = &posdef;
        int posState = 0;
        const ::wxSize& sizedef = wxDefaultSize;
        const ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;
        const ::wxString& namedef = wxWebViewNameStr;
        const ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_url,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1J1lJ1", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxString, &url, &urlState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString, &name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent, id, *url, *pos, *size, style, *name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxString *>(url), sipType_wxString, urlState);
            sipReleaseType(const_cast< ::wxPoint *>(pos), sipType_wxPoint, posState);
            sipReleaseType(const_cast< ::wxSize *>(size), sipType_wxSize, sizeState);
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetCurrentTitle, "GetCurrentTitle() -> str\n"
"\n"
"Get the title of the current web page, or its URL/path if title is not\n"
"available.");

extern "C" {static PyObject *meth_wxWebView_GetCurrentTitle(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetCurrentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxString(sipCpp->GetCurrentTitle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxString, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetCurrentTitle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetCurrentURL, "GetCurrentURL() -> str\n"
"\n"
"Get the URL of the currently displayed document.");

extern "C" {static PyObject *meth_wxWebView_GetCurrentURL(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetCurrentURL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxString(sipCpp->GetCurrentURL());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxString, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetCurrentURL, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetNativeBackend, "GetNativeBackend() -> Any\n"
"\n"
"Return the pointer to the native backend used by this control.");

extern "C" {static PyObject *meth_wxWebView_GetNativeBackend(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetNativeBackend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            void*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetNativeBackend();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetNativeBackend, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetPageSource, "GetPageSource() -> str\n"
"\n"
"Get the HTML source code of the currently displayed document.");

extern "C" {static PyObject *meth_wxWebView_GetPageSource(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetPageSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxString(sipCpp->GetPageSource());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxString, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetPageSource, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetPageText, "GetPageText() -> str\n"
"\n"
"Get the text of the current page.");

extern "C" {static PyObject *meth_wxWebView_GetPageText(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetPageText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxString(sipCpp->GetPageText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxString, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetPageText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_IsBusy, "IsBusy() -> bool\n"
"\n"
"Returns whether the web control is currently busy (e.g. loading a\n"
"page).");

extern "C" {static PyObject *meth_wxWebView_IsBusy(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_IsBusy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsBusy();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_IsBusy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_IsEditable, "IsEditable() -> bool\n"
"\n"
"Returns whether the web control is currently editable.");

extern "C" {static PyObject *meth_wxWebView_IsEditable(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_IsEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEditable();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_IsEditable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_LoadURL, "LoadURL(url) -> None\n"
"\n"
"Load a web page from a URL.");

extern "C" {static PyObject *meth_wxWebView_LoadURL(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_LoadURL(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* url;
        int urlState = 0;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_url,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxString, &url, &urlState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->LoadURL(*url);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(url), sipType_wxString, urlState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_LoadURL, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Print, "Print() -> None\n"
"\n"
"Opens a print dialog so that the user may print the currently\n"
"displayed page.");

extern "C" {static PyObject *meth_wxWebView_Print(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Print(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Print();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Print, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_RegisterHandler, "RegisterHandler(handler) -> None\n"
"\n"
"Registers a custom scheme handler.");

extern "C" {static PyObject *meth_wxWebView_RegisterHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_RegisterHandler(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebViewHandler* handler;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxWebViewHandler, &handler))
        {
        sipCpp->RegisterHandler(wxSharedPtr<wxWebViewHandler>(handler));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_RegisterHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Reload, "Reload(flags=WEBVIEW_RELOAD_DEFAULT) -> None\n"
"\n"
"Reload the currently displayed URL.");

extern "C" {static PyObject *meth_wxWebView_Reload(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Reload(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebViewReloadFlags flags = wxWEBVIEW_RELOAD_DEFAULT;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxWebViewReloadFlags, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Reload(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Reload, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_SetEditable, "SetEditable(enable=True) -> None\n"
"\n"
"Set the editable property of the web control.");

extern "C" {static PyObject *meth_wxWebView_SetEditable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_SetEditable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxWebView, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetEditable(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_SetEditable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_SetPage, "SetPage(html, baseUrl) -> None\n"
"SetPage(html, baseUrl) -> None\n"
"\n"
"Set the displayed page source to the contents of the given string.\n"
"");

extern "C" {static PyObject *meth_wxWebView_SetPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_SetPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* html;
        int htmlState = 0;
        const ::wxString* baseUrl;
        int baseUrlState = 0;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_html,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxString, &html, &htmlState, sipType_wxString, &baseUrl, &baseUrlState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPage(*html, *baseUrl);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(html), sipType_wxString, htmlState);
            sipReleaseType(const_cast< ::wxString *>(baseUrl), sipType_wxString, baseUrlState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        ::wxInputStream* html;
        int htmlState = 0;
        ::wxString* baseUrl;
        int baseUrlState = 0;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_html,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxInputStream, &html, &htmlState, sipType_wxString, &baseUrl, &baseUrlState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPage(*html, *baseUrl);
            Py_END_ALLOW_THREADS
            sipReleaseType(html, sipType_wxInputStream, htmlState);
            sipReleaseType(baseUrl, sipType_wxString, baseUrlState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_SetPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Stop, "Stop() -> None\n"
"\n"
"Stop the current page loading process, if any.");

extern "C" {static PyObject *meth_wxWebView_Stop(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Stop();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Stop, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_New, "New(backend=WebViewBackendDefault) -> WebView\n"
"New(parent, id=wx.ID_ANY, url=WebViewDefaultURLStr, pos=wx.DefaultPosition, size=wx.DefaultSize, backend=WebViewBackendDefault, style=0, name=WebViewNameStr) -> WebView\n"
"\n"
"Factory function to create a new wxWebView with two-step creation,\n"
"wxWebView::Create should be called on the returned object.\n"
"");

extern "C" {static PyObject *meth_wxWebView_New(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_New(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString& backenddef = wxWebViewBackendDefault;
        const ::wxString* backend = &backenddef;
        int backendState = 0;

        static const char *sipKwdList[] = {
            sipName_backend,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J1", sipType_wxString, &backend, &backendState))
        {
            ::wxWebView*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = ::wxWebView::New(*backend);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(backend), sipType_wxString, backendState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxWebView, SIP_NULLPTR);
        }
    }

    {
        ::wxWindow* parent;
        ::wxWindowID id = wxID_ANY;
        const ::wxString& urldef = wxWebViewDefaultURLStr;
        const ::wxString* url = &urldef;
        int urlState = 0;
        const ::wxPoint& posdef = wxDefaultPosition;
        const ::wxPoint* pos = &posdef;
        int posState = 0;
        const ::wxSize& sizedef = wxDefaultSize;
        const ::wxSize* size = &sizedef;
        int sizeState = 0;
        const ::wxString& backenddef = wxWebViewBackendDefault;
        const ::wxString* backend = &backenddef;
        int backendState = 0;
        long style = 0;
        const ::wxString& namedef = wxWebViewNameStr;
        const ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_url,
            sipName_pos,
            sipName_size,
            sipName_backend,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "JH|iJ1J1J1J1lJ1", sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxString, &url, &urlState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, sipType_wxString, &backend, &backendState, &style, sipType_wxString, &name, &nameState))
        {
            ::wxWebView*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = ::wxWebView::New(parent, id, *url, *pos, *size, *backend, style, *name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(url), sipType_wxString, urlState);
            sipReleaseType(const_cast< ::wxPoint *>(pos), sipType_wxPoint, posState);
            sipReleaseType(const_cast< ::wxSize *>(size), sipType_wxSize, sizeState);
            sipReleaseType(const_cast< ::wxString *>(backend), sipType_wxString, backendState);
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxWebView, (PyObject *)sipOwner);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_New, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_RegisterFactory, "RegisterFactory(backend, factory) -> None\n"
"\n"
"Allows the registering of new backend for wxWebView.");

extern "C" {static PyObject *meth_wxWebView_RegisterFactory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_RegisterFactory(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* backend;
        int backendState = 0;
        ::wxWebViewFactory* factory;

        static const char *sipKwdList[] = {
            sipName_backend,
            sipName_factory,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1J:", sipType_wxString, &backend, &backendState, sipType_wxWebViewFactory, &factory))
        {
        wxWebView::RegisterFactory(*backend, wxSharedPtr<wxWebViewFactory>(factory));
            sipReleaseType(const_cast< ::wxString *>(backend), sipType_wxString, backendState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_RegisterFactory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_IsBackendAvailable, "IsBackendAvailable(backend) -> bool\n"
"\n"
"Allows to check if a specific backend is currently available.");

extern "C" {static PyObject *meth_wxWebView_IsBackendAvailable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_IsBackendAvailable(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString* backend;
        int backendState = 0;

        static const char *sipKwdList[] = {
            sipName_backend,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxString, &backend, &backendState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = ::wxWebView::IsBackendAvailable(*backend);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(backend), sipType_wxString, backendState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_IsBackendAvailable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetBackendVersionInfo, "GetBackendVersionInfo(backend=WebViewBackendDefault) -> wx.VersionInfo\n"
"\n"
"Retrieve the version information about the backend implementation.");

extern "C" {static PyObject *meth_wxWebView_GetBackendVersionInfo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetBackendVersionInfo(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const ::wxString& backenddef = wxWebViewBackendDefault;
        const ::wxString* backend = &backenddef;
        int backendState = 0;

        static const char *sipKwdList[] = {
            sipName_backend,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J1", sipType_wxString, &backend, &backendState))
        {
            ::wxVersionInfo*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxVersionInfo(::wxWebView::GetBackendVersionInfo(*backend));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(backend), sipType_wxString, backendState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxVersionInfo, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetBackendVersionInfo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxWebView_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxPoint((sipSelfWasArg ? sipCpp->::wxWebView::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxPoint, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetClientAreaOrigin, doc_wxWebView_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxWebView_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Validate, doc_wxWebView_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxWebView_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_TransferDataToWindow, doc_wxWebView_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxWebView_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_TransferDataFromWindow, doc_wxWebView_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxWebView_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxWebView::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_InitDialog, doc_wxWebView_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxWebView_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_AcceptsFocus, doc_wxWebView_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxWebView_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_AcceptsFocusRecursively, doc_wxWebView_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxWebView_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_AcceptsFocusFromKeyboard, doc_wxWebView_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_AddChild, "AddChild(self, child: Optional[WindowBase])");

extern "C" {static PyObject *meth_wxWebView_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWindowBase* child;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxWebView::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_AddChild, doc_wxWebView_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_RemoveChild, "RemoveChild(self, child: Optional[WindowBase])");

extern "C" {static PyObject *meth_wxWebView_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWindowBase* child;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxWebView::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_RemoveChild, doc_wxWebView_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxWebView_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxWebView::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_InheritAttributes, doc_wxWebView_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxWebView_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_ShouldInheritColours, doc_wxWebView_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxWebView_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxWebView::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_OnInternalIdle, doc_wxWebView_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Optional[Window]");

extern "C" {static PyObject *meth_wxWebView_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes, sipType_wxWindow, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetMainWindowOfCompositeControl, doc_wxWebView_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxWebView_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxWebView, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::InformFirstDirection(direction, size, availableOtherDir) : sipCpp->InformFirstDirection(direction, size, availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_InformFirstDirection, doc_wxWebView_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxWebView_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxWebView, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxWebView::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_SetCanFocus, doc_wxWebView_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxWebView_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_Destroy, doc_wxWebView_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxWebView_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const ::wxValidator* validator;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxWebView, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxWebView::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_SetValidator, doc_wxWebView_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetValidator, "GetValidator(self) -> Optional[Validator]");

extern "C" {static PyObject *meth_wxWebView_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        ::wxWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWebView, &sipCpp))
        {
            ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->::wxWebView::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes, sipType_wxValidator, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetValidator, doc_wxWebView_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxWebView_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
        ::wxWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxWebView, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->::wxWebView::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_EnableVisibleFocus, doc_wxWebView_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxWebView_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
            ::wxVisualAttributes*sipRes;
        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new ::wxVisualAttributes(::wxWebView::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes, sipType_wxVisualAttributes, SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_MSWSetEmulationLevel, "MSWSetEmulationLevel(level=WEBVIEWIE_EMU_IE11) -> bool\n"
"\n"
"Sets emulation level.");

extern "C" {static PyObject *meth_wxWebView_MSWSetEmulationLevel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_MSWSetEmulationLevel(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        ::wxWebViewIE_EmulationLevel level = wxWEBVIEWIE_EMU_IE11;

        static const char *sipKwdList[] = {
            sipName_level,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWebViewIE_EmulationLevel, &level))
        {
            bool sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWebView_MSWSetEmulationLevel(level);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_MSWSetEmulationLevel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWebView_MSWSetModernEmulationLevel, "MSWSetModernEmulationLevel(modernLevel=True) -> bool");

extern "C" {static PyObject *meth_wxWebView_MSWSetModernEmulationLevel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWebView_MSWSetModernEmulationLevel(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool modernLevel = 1;

        static const char *sipKwdList[] = {
            sipName_modernLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|b", &modernLevel))
        {
            bool sipRes = 0;
            int sipIsErr = 0;

            if (sipDeprecated(sipName_WebView, sipName_MSWSetModernEmulationLevel) < 0)
                return SIP_NULLPTR;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWebView_MSWSetModernEmulationLevel(modernLevel);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_WebView, sipName_MSWSetModernEmulationLevel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxWebView(void *, const sipTypeDef *);}
static void *cast_wxWebView(void *sipCppV, const sipTypeDef *targetType)
{
    ::wxWebView *sipCpp = reinterpret_cast< ::wxWebView *>(sipCppV);

    if (targetType == sipType_wxWebView)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_wxControl)->ctd_cast(static_cast< ::wxControl *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxWebView(void *, int);}
static void release_wxWebView(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxWebView *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxWebView(sipSimpleWrapper *);}
static void dealloc_wxWebView(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxWebView(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxWebView[] = {{2, 0, 1}};


static PyMethodDef methods_wxWebView[] = {
    {sipName_AcceptsFocus, meth_wxWebView_AcceptsFocus, METH_VARARGS, doc_wxWebView_AcceptsFocus},
    {sipName_AcceptsFocusFromKeyboard, meth_wxWebView_AcceptsFocusFromKeyboard, METH_VARARGS, doc_wxWebView_AcceptsFocusFromKeyboard},
    {sipName_AcceptsFocusRecursively, meth_wxWebView_AcceptsFocusRecursively, METH_VARARGS, doc_wxWebView_AcceptsFocusRecursively},
    {sipName_AddChild, SIP_MLMETH_CAST(meth_wxWebView_AddChild), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_AddChild},
    {sipName_AddScriptMessageHandler, SIP_MLMETH_CAST(meth_wxWebView_AddScriptMessageHandler), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_AddScriptMessageHandler},
    {sipName_AddUserScript, SIP_MLMETH_CAST(meth_wxWebView_AddUserScript), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_AddUserScript},
    {sipName_CanCopy, meth_wxWebView_CanCopy, METH_VARARGS, doc_wxWebView_CanCopy},
    {sipName_CanCut, meth_wxWebView_CanCut, METH_VARARGS, doc_wxWebView_CanCut},
    {sipName_CanGoBack, meth_wxWebView_CanGoBack, METH_VARARGS, doc_wxWebView_CanGoBack},
    {sipName_CanGoForward, meth_wxWebView_CanGoForward, METH_VARARGS, doc_wxWebView_CanGoForward},
    {sipName_CanPaste, meth_wxWebView_CanPaste, METH_VARARGS, doc_wxWebView_CanPaste},
    {sipName_CanRedo, meth_wxWebView_CanRedo, METH_VARARGS, doc_wxWebView_CanRedo},
    {sipName_CanSetZoomType, SIP_MLMETH_CAST(meth_wxWebView_CanSetZoomType), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_CanSetZoomType},
    {sipName_CanUndo, meth_wxWebView_CanUndo, METH_VARARGS, doc_wxWebView_CanUndo},
    {sipName_ClearHistory, meth_wxWebView_ClearHistory, METH_VARARGS, doc_wxWebView_ClearHistory},
    {sipName_ClearSelection, meth_wxWebView_ClearSelection, METH_VARARGS, doc_wxWebView_ClearSelection},
    {sipName_Copy, meth_wxWebView_Copy, METH_VARARGS, doc_wxWebView_Copy},
    {sipName_Create, SIP_MLMETH_CAST(meth_wxWebView_Create), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_Create},
    {sipName_Cut, meth_wxWebView_Cut, METH_VARARGS, doc_wxWebView_Cut},
    {sipName_DeleteSelection, meth_wxWebView_DeleteSelection, METH_VARARGS, doc_wxWebView_DeleteSelection},
    {sipName_Destroy, meth_wxWebView_Destroy, METH_VARARGS, doc_wxWebView_Destroy},
    {sipName_EnableAccessToDevTools, SIP_MLMETH_CAST(meth_wxWebView_EnableAccessToDevTools), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_EnableAccessToDevTools},
    {sipName_EnableContextMenu, SIP_MLMETH_CAST(meth_wxWebView_EnableContextMenu), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_EnableContextMenu},
    {sipName_EnableHistory, SIP_MLMETH_CAST(meth_wxWebView_EnableHistory), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_EnableHistory},
    {sipName_EnableVisibleFocus, SIP_MLMETH_CAST(meth_wxWebView_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_EnableVisibleFocus},
    {sipName_Find, SIP_MLMETH_CAST(meth_wxWebView_Find), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_Find},
    {sipName_GetBackendVersionInfo, SIP_MLMETH_CAST(meth_wxWebView_GetBackendVersionInfo), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_GetBackendVersionInfo},
    {sipName_GetBackwardHistory, meth_wxWebView_GetBackwardHistory, METH_VARARGS, doc_wxWebView_GetBackwardHistory},
    {sipName_GetClassDefaultAttributes, SIP_MLMETH_CAST(meth_wxWebView_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_GetClassDefaultAttributes},
    {sipName_GetClientAreaOrigin, meth_wxWebView_GetClientAreaOrigin, METH_VARARGS, doc_wxWebView_GetClientAreaOrigin},
    {sipName_GetCurrentTitle, meth_wxWebView_GetCurrentTitle, METH_VARARGS, doc_wxWebView_GetCurrentTitle},
    {sipName_GetCurrentURL, meth_wxWebView_GetCurrentURL, METH_VARARGS, doc_wxWebView_GetCurrentURL},
    {sipName_GetForwardHistory, meth_wxWebView_GetForwardHistory, METH_VARARGS, doc_wxWebView_GetForwardHistory},
    {sipName_GetMainWindowOfCompositeControl, meth_wxWebView_GetMainWindowOfCompositeControl, METH_VARARGS, doc_wxWebView_GetMainWindowOfCompositeControl},
    {sipName_GetNativeBackend, meth_wxWebView_GetNativeBackend, METH_VARARGS, doc_wxWebView_GetNativeBackend},
    {sipName_GetPageSource, meth_wxWebView_GetPageSource, METH_VARARGS, doc_wxWebView_GetPageSource},
    {sipName_GetPageText, meth_wxWebView_GetPageText, METH_VARARGS, doc_wxWebView_GetPageText},
    {sipName_GetSelectedSource, meth_wxWebView_GetSelectedSource, METH_VARARGS, doc_wxWebView_GetSelectedSource},
    {sipName_GetSelectedText, meth_wxWebView_GetSelectedText, METH_VARARGS, doc_wxWebView_GetSelectedText},
    {sipName_GetUserAgent, meth_wxWebView_GetUserAgent, METH_VARARGS, doc_wxWebView_GetUserAgent},
    {sipName_GetValidator, meth_wxWebView_GetValidator, METH_VARARGS, doc_wxWebView_GetValidator},
    {sipName_GetZoom, meth_wxWebView_GetZoom, METH_VARARGS, doc_wxWebView_GetZoom},
    {sipName_GetZoomFactor, meth_wxWebView_GetZoomFactor, METH_VARARGS, doc_wxWebView_GetZoomFactor},
    {sipName_GetZoomType, meth_wxWebView_GetZoomType, METH_VARARGS, doc_wxWebView_GetZoomType},
    {sipName_GoBack, meth_wxWebView_GoBack, METH_VARARGS, doc_wxWebView_GoBack},
    {sipName_GoForward, meth_wxWebView_GoForward, METH_VARARGS, doc_wxWebView_GoForward},
    {sipName_HasSelection, meth_wxWebView_HasSelection, METH_VARARGS, doc_wxWebView_HasSelection},
    {sipName_InformFirstDirection, SIP_MLMETH_CAST(meth_wxWebView_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_InformFirstDirection},
    {sipName_InheritAttributes, meth_wxWebView_InheritAttributes, METH_VARARGS, doc_wxWebView_InheritAttributes},
    {sipName_InitDialog, meth_wxWebView_InitDialog, METH_VARARGS, doc_wxWebView_InitDialog},
    {sipName_IsAccessToDevToolsEnabled, meth_wxWebView_IsAccessToDevToolsEnabled, METH_VARARGS, doc_wxWebView_IsAccessToDevToolsEnabled},
    {sipName_IsBackendAvailable, SIP_MLMETH_CAST(meth_wxWebView_IsBackendAvailable), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_IsBackendAvailable},
    {sipName_IsBusy, meth_wxWebView_IsBusy, METH_VARARGS, doc_wxWebView_IsBusy},
    {sipName_IsContextMenuEnabled, meth_wxWebView_IsContextMenuEnabled, METH_VARARGS, doc_wxWebView_IsContextMenuEnabled},
    {sipName_IsEditable, meth_wxWebView_IsEditable, METH_VARARGS, doc_wxWebView_IsEditable},
    {sipName_LoadURL, SIP_MLMETH_CAST(meth_wxWebView_LoadURL), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_LoadURL},
    {sipName_MSWSetEmulationLevel, SIP_MLMETH_CAST(meth_wxWebView_MSWSetEmulationLevel), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_MSWSetEmulationLevel},
    {sipName_MSWSetModernEmulationLevel, SIP_MLMETH_CAST(meth_wxWebView_MSWSetModernEmulationLevel), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_MSWSetModernEmulationLevel},
    {sipName_New, SIP_MLMETH_CAST(meth_wxWebView_New), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_New},
    {sipName_OnInternalIdle, meth_wxWebView_OnInternalIdle, METH_VARARGS, doc_wxWebView_OnInternalIdle},
    {sipName_Paste, meth_wxWebView_Paste, METH_VARARGS, doc_wxWebView_Paste},
    {sipName_Print, meth_wxWebView_Print, METH_VARARGS, doc_wxWebView_Print},
    {sipName_Redo, meth_wxWebView_Redo, METH_VARARGS, doc_wxWebView_Redo},
    {sipName_RegisterFactory, SIP_MLMETH_CAST(meth_wxWebView_RegisterFactory), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_RegisterFactory},
    {sipName_RegisterHandler, SIP_MLMETH_CAST(meth_wxWebView_RegisterHandler), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_RegisterHandler},
    {sipName_Reload, SIP_MLMETH_CAST(meth_wxWebView_Reload), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_Reload},
    {sipName_RemoveAllUserScripts, meth_wxWebView_RemoveAllUserScripts, METH_VARARGS, doc_wxWebView_RemoveAllUserScripts},
    {sipName_RemoveChild, SIP_MLMETH_CAST(meth_wxWebView_RemoveChild), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_RemoveChild},
    {sipName_RemoveScriptMessageHandler, SIP_MLMETH_CAST(meth_wxWebView_RemoveScriptMessageHandler), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_RemoveScriptMessageHandler},
    {sipName_RunScript, SIP_MLMETH_CAST(meth_wxWebView_RunScript), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_RunScript},
    {sipName_RunScriptAsync, SIP_MLMETH_CAST(meth_wxWebView_RunScriptAsync), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_RunScriptAsync},
    {sipName_SelectAll, meth_wxWebView_SelectAll, METH_VARARGS, doc_wxWebView_SelectAll},
    {sipName_SetCanFocus, SIP_MLMETH_CAST(meth_wxWebView_SetCanFocus), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_SetCanFocus},
    {sipName_SetEditable, SIP_MLMETH_CAST(meth_wxWebView_SetEditable), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_SetEditable},
    {sipName_SetPage, SIP_MLMETH_CAST(meth_wxWebView_SetPage), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_SetPage},
    {sipName_SetUserAgent, SIP_MLMETH_CAST(meth_wxWebView_SetUserAgent), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_SetUserAgent},
    {sipName_SetValidator, SIP_MLMETH_CAST(meth_wxWebView_SetValidator), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_SetValidator},
    {sipName_SetZoom, SIP_MLMETH_CAST(meth_wxWebView_SetZoom), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_SetZoom},
    {sipName_SetZoomFactor, SIP_MLMETH_CAST(meth_wxWebView_SetZoomFactor), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_SetZoomFactor},
    {sipName_SetZoomType, SIP_MLMETH_CAST(meth_wxWebView_SetZoomType), METH_VARARGS|METH_KEYWORDS, doc_wxWebView_SetZoomType},
    {sipName_ShouldInheritColours, meth_wxWebView_ShouldInheritColours, METH_VARARGS, doc_wxWebView_ShouldInheritColours},
    {sipName_Stop, meth_wxWebView_Stop, METH_VARARGS, doc_wxWebView_Stop},
    {sipName_TransferDataFromWindow, meth_wxWebView_TransferDataFromWindow, METH_VARARGS, doc_wxWebView_TransferDataFromWindow},
    {sipName_TransferDataToWindow, meth_wxWebView_TransferDataToWindow, METH_VARARGS, doc_wxWebView_TransferDataToWindow},
    {sipName_Undo, meth_wxWebView_Undo, METH_VARARGS, doc_wxWebView_Undo},
    {sipName_Validate, meth_wxWebView_Validate, METH_VARARGS, doc_wxWebView_Validate}
};

sipVariableDef variables_wxWebView[] = {
    {PropertyVariable, sipName_ZoomType, &methods_wxWebView[43], &methods_wxWebView[79], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ZoomFactor, &methods_wxWebView[42], &methods_wxWebView[78], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Zoom, &methods_wxWebView[41], &methods_wxWebView[77], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_UserAgent, &methods_wxWebView[39], &methods_wxWebView[75], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SelectedText, &methods_wxWebView[38], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SelectedSource, &methods_wxWebView[37], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_PageText, &methods_wxWebView[36], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_PageSource, &methods_wxWebView[35], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_NativeBackend, &methods_wxWebView[34], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ForwardHistory, &methods_wxWebView[32], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CurrentURL, &methods_wxWebView[31], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CurrentTitle, &methods_wxWebView[30], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BackwardHistory, &methods_wxWebView[27], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxWebView, "This control may be used to render web (HTML / CSS / javascript)\n"
"documents.");


sipClassTypeDef sipTypeDef__html2_wxWebView = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxWebView,
        SIP_NULLPTR,
        SIP_NULLPTR,
    },
    {
        sipNameNr_WebView,
        {0, 0, 1},
        86, methods_wxWebView,
        0, SIP_NULLPTR,
        13, variables_wxWebView,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxWebView,
    -1,
    -1,
    supers_wxWebView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxWebView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxWebView,
    cast_wxWebView,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    0,
};
