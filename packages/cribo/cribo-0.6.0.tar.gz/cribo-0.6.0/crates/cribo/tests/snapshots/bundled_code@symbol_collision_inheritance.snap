---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/symbol_collision_inheritance/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
auth_module = _cribo.types.SimpleNamespace(__name__='auth_module')
"""Module with classes that will have naming collision."""
class AuthBase:
    """Base authentication class."""

    def __init__(self):
        self.type = "base"

    def __repr__(self):
        return f"<{self.__class__.__name__}>"
AuthBase.__module__ = 'auth_module'
class HTTPBasicAuth_2(AuthBase):
    """Basic HTTP authentication."""

    def __init__(self, username, password):
        super().__init__()
        self.username = username
        self.password = password
        self.type = "basic"

    def __repr__(self):
        return f"<HTTPBasicAuth user={self.username}>"
HTTPBasicAuth_2.__module__ = 'auth_module'
HTTPBasicAuth_2.__name__ = 'HTTPBasicAuth'
HTTPBasicAuth_2.__qualname__ = 'HTTPBasicAuth'
class HTTPProxyAuth(HTTPBasicAuth_2):
    """Proxy HTTP authentication - inherits from HTTPBasicAuth."""

    def __init__(self, username, password):
        super().__init__(username, password)
        self.type = "proxy"

    def __repr__(self):
        return f"<HTTPProxyAuth user={self.username}>"
HTTPProxyAuth.__module__ = 'auth_module'
def make_auth(auth_type, username, password):
    """Factory function that uses the classes."""
    if auth_type == "basic":
        return HTTPBasicAuth_2(username, password)
    elif auth_type == "proxy":
        return HTTPProxyAuth(username, password)
    else:
        return AuthBase()
auth_module.AuthBase = AuthBase
auth_module.HTTPBasicAuth = HTTPBasicAuth_2
auth_module.HTTPProxyAuth = HTTPProxyAuth
auth_module.make_auth = make_auth
colliding_module = _cribo.types.SimpleNamespace(__name__='colliding_module')
"""Another module that exports HTTPBasicAuth to create a collision."""
class HTTPBasicAuth_1:
    """Different implementation of HTTPBasicAuth to create collision."""

    def __init__(self, token):
        self.token = token
        self.type = "token"

    def __repr__(self):
        return f"<HTTPBasicAuth(token) token={self.token[:4]}...>"
HTTPBasicAuth_1.__module__ = 'colliding_module'
HTTPBasicAuth_1.__name__ = 'HTTPBasicAuth'
HTTPBasicAuth_1.__qualname__ = 'HTTPBasicAuth'
colliding_module.HTTPBasicAuth = HTTPBasicAuth_1
"""Test symbol collision with class inheritance."""
HTTPBasicAuth = auth_module.HTTPBasicAuth
proxy_auth = HTTPProxyAuth("user", "pass")
print(f"Created HTTPProxyAuth: {proxy_auth}")
print(f"HTTPProxyAuth.__bases__: {HTTPProxyAuth.__bases__}")
auth = make_auth("proxy", "user2", "pass2")
print(f"Factory created auth: {auth}")
print("âœ“ All tests passed")
