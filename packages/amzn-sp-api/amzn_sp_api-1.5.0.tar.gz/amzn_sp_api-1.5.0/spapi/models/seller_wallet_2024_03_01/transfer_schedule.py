# coding: utf-8

"""
    The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).

    The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.

    The version of the OpenAPI document: 2024-03-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class TransferSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transfer_schedule_id': 'str',
        'transaction_type': 'TransactionType',
        'transaction_source_account': 'TransactionAccount',
        'transaction_destination_account': 'TransactionAccount',
        'transfer_schedule_status': 'TransferScheduleStatus',
        'transfer_schedule_information': 'TransferScheduleInformation',
        'payment_preference': 'PaymentPreference',
        'transfer_schedule_failures': 'List[TransferScheduleFailures]',
    }

    attribute_map = {
        'transfer_schedule_id': 'transferScheduleId',
        'transaction_type': 'transactionType',
        'transaction_source_account': 'transactionSourceAccount',
        'transaction_destination_account': 'transactionDestinationAccount',
        'transfer_schedule_status': 'transferScheduleStatus',
        'transfer_schedule_information': 'transferScheduleInformation',
        'payment_preference': 'paymentPreference',
        'transfer_schedule_failures': 'transferScheduleFailures',
    }

    def __init__(self, transfer_schedule_id=None, transaction_type=None, transaction_source_account=None, transaction_destination_account=None, transfer_schedule_status=None, transfer_schedule_information=None, payment_preference=None, transfer_schedule_failures=None, _configuration=None):  # noqa: E501
        """TransferSchedule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._transfer_schedule_id = None
        self._transaction_type = None
        self._transaction_source_account = None
        self._transaction_destination_account = None
        self._transfer_schedule_status = None
        self._transfer_schedule_information = None
        self._payment_preference = None
        self._transfer_schedule_failures = None
        self.discriminator = None

        self.transfer_schedule_id = transfer_schedule_id
        self.transaction_type = transaction_type
        if transaction_source_account is not None:
            self.transaction_source_account = transaction_source_account
        self.transaction_destination_account = transaction_destination_account
        self.transfer_schedule_status = transfer_schedule_status
        self.transfer_schedule_information = transfer_schedule_information
        if payment_preference is not None:
            self.payment_preference = payment_preference
        self.transfer_schedule_failures = transfer_schedule_failures

    @property
    def transfer_schedule_id(self):
        """Gets the transfer_schedule_id of this TransferSchedule.  # noqa: E501

        The unique identifier provided by Amazon to the scheduled transfer   # noqa: E501

        :return: The transfer_schedule_id of this TransferSchedule.  # noqa: E501
        :rtype: str
        """
        return self._transfer_schedule_id

    @transfer_schedule_id.setter
    def transfer_schedule_id(self, transfer_schedule_id):
        """Sets the transfer_schedule_id of this TransferSchedule.

        The unique identifier provided by Amazon to the scheduled transfer   # noqa: E501

        :param transfer_schedule_id: The transfer_schedule_id of this TransferSchedule.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and transfer_schedule_id is None:
            raise ValueError("Invalid value for `transfer_schedule_id`, must not be `None`")  # noqa: E501

        self._transfer_schedule_id = transfer_schedule_id

    @property
    def transaction_type(self):
        """Gets the transaction_type of this TransferSchedule.  # noqa: E501


        :return: The transaction_type of this TransferSchedule.  # noqa: E501
        :rtype: TransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this TransferSchedule.


        :param transaction_type: The transaction_type of this TransferSchedule.  # noqa: E501
        :type: TransactionType
        """
        if self._configuration.client_side_validation and transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def transaction_source_account(self):
        """Gets the transaction_source_account of this TransferSchedule.  # noqa: E501


        :return: The transaction_source_account of this TransferSchedule.  # noqa: E501
        :rtype: TransactionAccount
        """
        return self._transaction_source_account

    @transaction_source_account.setter
    def transaction_source_account(self, transaction_source_account):
        """Sets the transaction_source_account of this TransferSchedule.


        :param transaction_source_account: The transaction_source_account of this TransferSchedule.  # noqa: E501
        :type: TransactionAccount
        """

        self._transaction_source_account = transaction_source_account

    @property
    def transaction_destination_account(self):
        """Gets the transaction_destination_account of this TransferSchedule.  # noqa: E501


        :return: The transaction_destination_account of this TransferSchedule.  # noqa: E501
        :rtype: TransactionAccount
        """
        return self._transaction_destination_account

    @transaction_destination_account.setter
    def transaction_destination_account(self, transaction_destination_account):
        """Sets the transaction_destination_account of this TransferSchedule.


        :param transaction_destination_account: The transaction_destination_account of this TransferSchedule.  # noqa: E501
        :type: TransactionAccount
        """
        if self._configuration.client_side_validation and transaction_destination_account is None:
            raise ValueError("Invalid value for `transaction_destination_account`, must not be `None`")  # noqa: E501

        self._transaction_destination_account = transaction_destination_account

    @property
    def transfer_schedule_status(self):
        """Gets the transfer_schedule_status of this TransferSchedule.  # noqa: E501


        :return: The transfer_schedule_status of this TransferSchedule.  # noqa: E501
        :rtype: TransferScheduleStatus
        """
        return self._transfer_schedule_status

    @transfer_schedule_status.setter
    def transfer_schedule_status(self, transfer_schedule_status):
        """Sets the transfer_schedule_status of this TransferSchedule.


        :param transfer_schedule_status: The transfer_schedule_status of this TransferSchedule.  # noqa: E501
        :type: TransferScheduleStatus
        """
        if self._configuration.client_side_validation and transfer_schedule_status is None:
            raise ValueError("Invalid value for `transfer_schedule_status`, must not be `None`")  # noqa: E501

        self._transfer_schedule_status = transfer_schedule_status

    @property
    def transfer_schedule_information(self):
        """Gets the transfer_schedule_information of this TransferSchedule.  # noqa: E501


        :return: The transfer_schedule_information of this TransferSchedule.  # noqa: E501
        :rtype: TransferScheduleInformation
        """
        return self._transfer_schedule_information

    @transfer_schedule_information.setter
    def transfer_schedule_information(self, transfer_schedule_information):
        """Sets the transfer_schedule_information of this TransferSchedule.


        :param transfer_schedule_information: The transfer_schedule_information of this TransferSchedule.  # noqa: E501
        :type: TransferScheduleInformation
        """
        if self._configuration.client_side_validation and transfer_schedule_information is None:
            raise ValueError("Invalid value for `transfer_schedule_information`, must not be `None`")  # noqa: E501

        self._transfer_schedule_information = transfer_schedule_information

    @property
    def payment_preference(self):
        """Gets the payment_preference of this TransferSchedule.  # noqa: E501


        :return: The payment_preference of this TransferSchedule.  # noqa: E501
        :rtype: PaymentPreference
        """
        return self._payment_preference

    @payment_preference.setter
    def payment_preference(self, payment_preference):
        """Sets the payment_preference of this TransferSchedule.


        :param payment_preference: The payment_preference of this TransferSchedule.  # noqa: E501
        :type: PaymentPreference
        """

        self._payment_preference = payment_preference

    @property
    def transfer_schedule_failures(self):
        """Gets the transfer_schedule_failures of this TransferSchedule.  # noqa: E501

        Collection that holds Transfer Schedules that has been cancelled or failed due to certain reasons.   # noqa: E501

        :return: The transfer_schedule_failures of this TransferSchedule.  # noqa: E501
        :rtype: List[TransferScheduleFailures]
        """
        return self._transfer_schedule_failures

    @transfer_schedule_failures.setter
    def transfer_schedule_failures(self, transfer_schedule_failures):
        """Sets the transfer_schedule_failures of this TransferSchedule.

        Collection that holds Transfer Schedules that has been cancelled or failed due to certain reasons.   # noqa: E501

        :param transfer_schedule_failures: The transfer_schedule_failures of this TransferSchedule.  # noqa: E501
        :type: List[TransferScheduleFailures]
        """
        if self._configuration.client_side_validation and transfer_schedule_failures is None:
            raise ValueError("Invalid value for `transfer_schedule_failures`, must not be `None`")  # noqa: E501

        self._transfer_schedule_failures = transfer_schedule_failures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransferSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransferSchedule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransferSchedule):
            return True

        return self.to_dict() != other.to_dict()
