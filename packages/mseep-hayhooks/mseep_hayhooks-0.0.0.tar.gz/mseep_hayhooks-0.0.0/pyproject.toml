[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "mseep-hayhooks"
dynamic = [
    "version",
]
description = "Grab and deploy Haystack pipelines"
requires-python = ">=3.9,<3.13"
license = "Apache-2.0"
keywords = []
authors = [
    { name = "mseep", email = "support@skydeck.ai" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "haystack-ai>=2.11.0",
    "fastapi[standard]",
    "typer",
    "uvicorn",
    "rich",
    "requests",
    "python-multipart",
    "loguru",
    "pydantic-settings",
    "python-dotenv",
    "docstring-parser",
]

[project.readme]
content-type = "text/plain"
text = "Package managed by MseeP.ai"

[project.optional-dependencies]
mcp = [
    "mcp>=1.8.0 ; python_version >= '3.10'",
]

[project.urls]
Documentation = "https://github.com/deepset-ai/hayhooks#readme"
Issues = "https://github.com/deepset-ai/hayhooks/issues"
Source = "https://github.com/deepset-ai/hayhooks"

[project.scripts]
hayhooks = "hayhooks.cli:hayhooks_cli"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
installer = "uv"
dependencies = [
    "ruff",
]

[tool.hatch.envs.default.scripts]
fmt = "ruff check --fix {args} && ruff format {args}"
fmt-check = "ruff check {args} && ruff format --check {args}"

[tool.hatch.envs.test]
features = [
    "mcp",
]
extra-dependencies = [
    "qdrant-haystack",
    "trafilatura",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "mypy",
    "pip",
]

[tool.hatch.envs.test.scripts]
unit = "pytest -vv -m 'not integration' {args:tests}"
integration = "pytest -vv -m integration {args:tests}"
all = "pytest -vv {args:tests}"
all-cov = "all --cov=hayhooks"
types = "mypy --install-types --non-interactive --cache-dir=.mypy_cache/ {args:src/hayhooks}"

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_incomplete_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = false

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
ignore_errors = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
    "ASYNC",
    "C4",
    "C90",
    "EXE",
    "F",
    "INT",
    "PERF",
    "PL",
    "Q",
    "SIM",
    "SLOT",
    "T10",
    "W",
    "YTT",
    "D209",
    "D205",
    "D213",
    "D419",
]
ignore = [
    "FBT001",
    "FBT002",
    "N806",
    "PERF203",
    "PLC0415",
    "S101",
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "B017",
    "ARG001",
    "ARG002",
    "D102",
    "D103",
    "D205",
    "FBT003",
    "PLR2004",
    "S101",
    "TID252",
]

[tool.coverage.run]
source_pkgs = [
    "hayhooks",
]
branch = true
parallel = true
omit = []

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
addopts = "--strict-markers"
filterwarnings = [
    "ignore::UserWarning",
]
asyncio_mode = "auto"
log_cli = true
markers = [
    "unit: unit tests",
    "integration: integration tests",
    "asyncio: mark a test as an asyncio coroutine",
    "mcp: tests that require the MCP package",
]
