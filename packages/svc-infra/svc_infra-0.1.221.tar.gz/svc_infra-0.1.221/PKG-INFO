Metadata-Version: 2.3
Name: svc-infra
Version: 0.1.221
Summary: Infrastructure for building and deploying prod-ready services
License: MIT
Keywords: fastapi,sqlalchemy,alembic,auth,infra,async,pydantic
Author: Ali Khatami
Author-email: aliikhatami94@gmail.com
Requires-Python: >=3.11,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Framework :: FastAPI
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Typing :: Typed
Provides-Extra: duckdb
Provides-Extra: metrics
Provides-Extra: mssql
Provides-Extra: mysql
Provides-Extra: pg
Provides-Extra: pg2
Provides-Extra: redshift
Provides-Extra: snowflake
Provides-Extra: sqlite
Requires-Dist: ai-infra (>=0.1.63,<0.2.0)
Requires-Dist: aiosqlite (>=0.20.0,<0.21.0) ; extra == "sqlite"
Requires-Dist: alembic (>=1.13.2,<2.0.0)
Requires-Dist: asyncpg (>=0.30.0,<0.31.0) ; extra == "pg"
Requires-Dist: authlib (>=1.6.2,<2.0.0)
Requires-Dist: duckdb (>=1.1.3,<2.0.0) ; extra == "duckdb"
Requires-Dist: email-validator (>=2.2.0,<3.0.0)
Requires-Dist: fastapi (>=0.116.1,<0.117.0)
Requires-Dist: fastapi-users-db-sqlalchemy (>=7.0.0,<8.0.0)
Requires-Dist: fastapi-users[oauth] (>=14.0.1,<15.0.0)
Requires-Dist: greenlet (>=3,<4)
Requires-Dist: httpx (>=0.28.1,<0.29.0)
Requires-Dist: httpx-oauth (>=0.16.1,<0.17.0)
Requires-Dist: mcp (>=1.13.0,<2.0.0)
Requires-Dist: motor (>=3.7.1,<4.0.0)
Requires-Dist: mysqlclient (>=2.2.4,<3.0.0) ; extra == "mysql"
Requires-Dist: opentelemetry-exporter-otlp (>=1.36.0,<2.0.0)
Requires-Dist: opentelemetry-instrumentation-fastapi (>=0.57b0,<0.58)
Requires-Dist: opentelemetry-instrumentation-httpx (>=0.57b0,<0.58)
Requires-Dist: opentelemetry-instrumentation-requests (>=0.57b0,<0.58)
Requires-Dist: opentelemetry-instrumentation-sqlalchemy (>=0.57b0,<0.58)
Requires-Dist: opentelemetry-propagator-b3 (>=1.36.0,<2.0.0)
Requires-Dist: opentelemetry-sdk (>=1.36.0,<2.0.0)
Requires-Dist: passlib[bcrypt] (>=1.7.4,<2.0.0)
Requires-Dist: pre-commit (>=4.3.0,<5.0.0)
Requires-Dist: prometheus-client (>=0.22.1,<0.23.0) ; extra == "metrics"
Requires-Dist: psycopg2-binary (>=2.9.10,<3.0.0) ; extra == "pg2"
Requires-Dist: psycopg[binary] (>=3.2.10,<4.0.0) ; extra == "pg"
Requires-Dist: pydantic-settings (>=2.10.1,<3.0.0)
Requires-Dist: pymysql (>=1.1.1,<2.0.0) ; extra == "mysql"
Requires-Dist: pyodbc (>=5.1.0,<6.0.0) ; extra == "mssql"
Requires-Dist: python-dotenv (>=1.1.1,<2.0.0)
Requires-Dist: redshift-connector (>=2.0.918,<3.0.0) ; extra == "redshift"
Requires-Dist: snowflake-connector-python (>=3.12.0,<4.0.0) ; extra == "snowflake"
Requires-Dist: sqlalchemy[asyncio] (>=2.0.43,<3.0.0)
Requires-Dist: typer (>=0.16.1,<0.17.0)
Project-URL: Documentation, https://github.com/your-org/svc-infra#readme
Project-URL: Homepage, https://github.com/your-org/svc-infra
Project-URL: Issues, https://github.com/your-org/svc-infra/issues
Project-URL: Repository, https://github.com/your-org/svc-infra
Description-Content-Type: text/markdown

# svc-infra

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![FastAPI](https://img.shields.io/badge/FastAPI-0.116+-green.svg)](https://fastapi.tiangolo.com/)

Infrastructure library for building and deploying production-ready services with FastAPI, SQLAlchemy, authentication, observability, and more.

## Features

### **Core Infrastructure**
- **FastAPI Integration**: Pre-configured FastAPI application with middleware, error handling, and routing
- **Database Support**: Multiple database backends (PostgreSQL, MySQL, SQLite, SQL Server, Snowflake, DuckDB)
- **Authentication**: OAuth integration with FastAPI-Users
- **CLI Tools**: Command-line interface for database migrations, scaffolding, and observability
- **Observability**: OpenTelemetry tracing, Prometheus metrics, and Grafana dashboards
- **MCP Integration**: Model Context Protocol support for AI integrations

### **Database Management**
- **SQL**: SQLAlchemy 2.0 with async support
- **Migrations**: Alembic integration for database schema management
- **NoSQL**: MongoDB support with Motor
- **Multi-database**: Support for multiple database connections

### **Authentication & Authorization**
- OAuth providers integration
- User management with FastAPI-Users
- Secure password hashing with bcrypt
- Email validation
- JWT token handling

### **Observability**
- OpenTelemetry distributed tracing
- Prometheus metrics collection
- Grafana dashboard templates
- Request/response logging
- Error tracking and monitoring

## Installation

### Basic Installation

```bash
pip install svc-infra
```

### With Database Extras

```bash
# PostgreSQL (v3)
pip install svc-infra[pg]

# PostgreSQL (v2)
pip install svc-infra[pg2]

# SQLite
pip install svc-infra[sqlite]

# MySQL
pip install svc-infra[mysql]

# SQL Server
pip install svc-infra[mssql]

# Snowflake
pip install svc-infra[snowflake]

# DuckDB
pip install svc-infra[duckdb]

# All databases
pip install svc-infra[pg,sqlite,mysql,mssql,snowflake,duckdb]
```

### With Metrics Support

```bash
pip install svc-infra[metrics]
```

## Quick Start

### 1. Create a FastAPI Application

```python
from fastapi import FastAPI
from svc_infra.api.fastapi import create_app
from svc_infra.app.settings import AppSettings

# Create your app settings
settings = AppSettings()

# Create the FastAPI app with svc-infra
app = create_app(settings)

@app.get("/")
async def root():
    return {"message": "Hello from svc-infra!"}
```

### 2. Database Setup

```python
from svc_infra.db.sql import setup_database

# Setup database connection
await setup_database(settings.database_url)
```

### 3. Add Authentication

```python
from svc_infra.auth import add_auth

# Add authentication to your FastAPI app
add_auth(app, settings)
```

### 4. CLI Usage

The library provides a CLI for common tasks:

```bash
# Database migrations
svc-infra alembic init
svc-infra alembic migrate "Initial migration"
svc-infra alembic upgrade

# Generate database scaffolding
svc-infra sql scaffold --table users --model User

# Observability setup
svc-infra obs setup
```

## Configuration

### Environment Variables

Create a `.env` file or set environment variables:

```env
# Database
DATABASE_URL=postgresql+asyncpg://user:pass@localhost/db

# Authentication
SECRET_KEY=your-secret-key
OAUTH_CLIENT_ID=your-oauth-client-id
OAUTH_CLIENT_SECRET=your-oauth-client-secret

# Observability
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
PROMETHEUS_PORT=8000
```

### Settings Class

```python
from svc_infra.app.settings import AppSettings

settings = AppSettings(
    database_url="postgresql+asyncpg://user:pass@localhost/db",
    secret_key="your-secret-key",
    debug=True
)
```

## Project Structure

```
svc-infra/
├── src/svc_infra/
│   ├── api/           # FastAPI integration and middleware
│   ├── app/           # Application settings and configuration
│   ├── auth/          # Authentication and authorization
│   ├── cli/           # Command-line interface
│   ├── db/            # Database connections and utilities
│   ├── mcp/           # Model Context Protocol integration
│   └── observability/ # Monitoring, metrics, and tracing
├── tests/             # Test suite
└── pyproject.toml     # Project configuration
```

## Database Support

### Supported Databases

| Database | Driver | Extra | Connection String Example |
|----------|--------|-------|--------------------------|
| PostgreSQL (v3) | asyncpg/psycopg | `[pg]` | `postgresql+asyncpg://user:pass@host/db` |
| PostgreSQL (v2) | psycopg2 | `[pg2]` | `postgresql://user:pass@host/db` |
| SQLite | aiosqlite | `[sqlite]` | `sqlite+aiosqlite:///path/to/db.sqlite` |
| MySQL | pymysql | `[mysql]` | `mysql+pymysql://user:pass@host/db` |
| SQL Server | pyodbc | `[mssql]` | `mssql+pyodbc://user:pass@host/db` |
| Snowflake | snowflake | `[snowflake]` | `snowflake://user:pass@account/db` |
| DuckDB | duckdb | `[duckdb]` | `duckdb:///path/to/db.duckdb` |

## Authentication

### OAuth Providers

The library supports multiple OAuth providers through FastAPI-Users:

- Google
- GitHub
- Microsoft
- Discord
- And more...

### Example OAuth Setup

```python
from svc_infra.auth.providers import setup_oauth_providers

oauth_providers = setup_oauth_providers({
    "google": {
        "client_id": "your-google-client-id",
        "client_secret": "your-google-client-secret"
    }
})
```

## Observability

### Tracing

OpenTelemetry tracing is automatically configured for:
- FastAPI requests
- SQLAlchemy database operations
- HTTP client requests (httpx, requests)

### Metrics

Prometheus metrics are collected for:
- Request duration and count
- Database query performance
- Custom business metrics

### Dashboards

Pre-built Grafana dashboards are included for:
- API performance monitoring
- Database metrics
- System health checks

## CLI Commands

| Command | Description |
|---------|-------------|
| `svc-infra alembic init` | Initialize Alembic migrations |
| `svc-infra alembic migrate <message>` | Create new migration |
| `svc-infra alembic upgrade` | Apply migrations |
| `svc-infra sql scaffold` | Generate database models and schemas |
| `svc-infra obs setup` | Setup observability stack |

## Development

### Prerequisites

- Python 3.11+
- Poetry (for dependency management)

### Setup Development Environment

```bash
# Clone the repository
git clone https://github.com/your-org/svc-infra.git
cd svc-infra

# Install dependencies
poetry install --all-extras

# Install pre-commit hooks
pre-commit install

# Run tests
poetry run pytest
```

### Running Tests

```bash
# Run all tests
poetry run pytest

# Run with coverage
poetry run pytest --cov=svc_infra

# Run specific test file
poetry run pytest tests/auth/test_providers.py
```

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Add tests for your changes
5. Run the test suite (`poetry run pytest`)
6. Commit your changes (`git commit -m 'Add amazing feature'`)
7. Push to the branch (`git push origin feature/amazing-feature`)
8. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Changelog

See [CHANGELOG.md](CHANGELOG.md) for a list of changes in each version.

## Support

-  **Email**: aliikhatami94@gmail.com
-  **Issues**: [GitHub Issues](https://github.com/your-org/svc-infra/issues)
-  **Documentation**: [GitHub README](https://github.com/your-org/svc-infra#readme)

---

**Built️ for production-ready Python services**

