# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
import datetime as dt
from .lambda_architecture import LambdaArchitecture
from .lambda_vpc_config import LambdaVpcConfig
from .lambda_package_type import LambdaPackageType
from .lambda_logging_config import LambdaLoggingConfig
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class LambdaFunction(UniversalBaseModel):
    name: str = pydantic.Field(alias="Name")
    arn: str = pydantic.Field(alias="Arn")
    description: typing.Optional[str] = pydantic.Field(alias="Description", default=None)
    region: str = pydantic.Field(alias="Region")
    role_arn: str = pydantic.Field(alias="RoleArn")
    revision_id: str = pydantic.Field(alias="RevisionId")
    runtime: str = pydantic.Field(alias="Runtime")
    handler: str = pydantic.Field(alias="Handler")
    code_size_in_bytes: int = pydantic.Field(alias="CodeSizeInBytes")
    timeout_in_seconds: int = pydantic.Field(alias="TimeoutInSeconds")
    memory_size_in_mb: int = pydantic.Field(alias="MemorySizeInMb")
    ephemeral_storage_in_mb: int = pydantic.Field(alias="EphemeralStorageInMb")
    last_modified: dt.datetime = pydantic.Field(alias="LastModified")
    code_sha_256: typing.Optional[str] = pydantic.Field(alias="CodeSha256", default=None)
    architectures: typing.List[LambdaArchitecture] = pydantic.Field(alias="Architectures")
    vpc: typing.Optional[LambdaVpcConfig] = pydantic.Field(alias="Vpc", default=None)
    package_type: LambdaPackageType = pydantic.Field(alias="PackageType")
    logging_config: typing.Optional[LambdaLoggingConfig] = pydantic.Field(alias="LoggingConfig", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
