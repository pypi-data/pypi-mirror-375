#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>
#include <pybind11/numpy.h>

#include "DasLib/DasLib.h"
#include "glue_code_DasLib.h"

namespace py = pybind11;



void py_init_module_das_lib(py::module& m)
{
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:BoxedTypes>    ////////////////////
    auto pyClassBoxedBool =
        py::class_<BoxedBool>
            (m, "BoxedBool", "")
        .def_readwrite("value", &BoxedBool::value, "")
        .def(py::init<bool>(),
            py::arg("v") = false)
        .def("__repr__",
            &BoxedBool::__repr__)
        ;
    ////////////////////    </generated_from:BoxedTypes>    ////////////////////


    ////////////////////    <generated_from:amalgamation.h>    ////////////////////
    m.def("sub",
        DasLib::sub, py::arg("a"), py::arg("b"));


    m.def("add",
        DasLib::Add, py::arg("a"), py::arg("b"));

    m.def("switch_bool",
        [](BoxedBool & v)
        {
            auto SwitchBool_adapt_modifiable_immutable = [](BoxedBool & v)
            {
                bool & v_boxed_value = v.value;

                DasLib::SwitchBool(v_boxed_value);
            };w

            SwitchBool_adapt_modifiable_immutable(v);
        },
        py::arg("v"),
        "In this example, the parameter v will be \"Boxed\" into a \"BoxedBool\"");
    ////////////////////    </generated_from:amalgamation.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
