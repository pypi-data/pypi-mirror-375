# coding: utf-8

"""
    CyborgDB Service

    REST API for CyborgDB: The Confidential Vector Database

    The version of the OpenAPI document: 0.12.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TrainRequest(BaseModel):
    """
    Request model for training an index.  Attributes:     n_lists (Optional[int]): Number of lists/clusters for the index. Default is auto.     batch_size (Optional[int]): Size of each batch for training. Default is 2048.     max_iters (Optional[int]): Maximum iterations for training. Default is 100.     tolerance (Optional[float]): Convergence tolerance for training. Default is 1e-6.     max_memory (Optional[int]): Maximum memory (MB) usage during training. Default is 0 (no limit).
    """ # noqa: E501
    index_key: StrictStr = Field(description="32-byte encryption key as hex string")
    index_name: StrictStr = Field(description="ID name")
    n_lists: Optional[StrictInt] = None
    batch_size: Optional[StrictInt] = None
    max_iters: Optional[StrictInt] = None
    tolerance: Optional[Union[StrictFloat, StrictInt]] = None
    max_memory: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["index_key", "index_name", "n_lists", "batch_size", "max_iters", "tolerance", "max_memory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrainRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if n_lists (nullable) is None
        # and model_fields_set contains the field
        if self.n_lists is None and "n_lists" in self.model_fields_set:
            _dict['n_lists'] = None

        # set to None if batch_size (nullable) is None
        # and model_fields_set contains the field
        if self.batch_size is None and "batch_size" in self.model_fields_set:
            _dict['batch_size'] = None

        # set to None if max_iters (nullable) is None
        # and model_fields_set contains the field
        if self.max_iters is None and "max_iters" in self.model_fields_set:
            _dict['max_iters'] = None

        # set to None if tolerance (nullable) is None
        # and model_fields_set contains the field
        if self.tolerance is None and "tolerance" in self.model_fields_set:
            _dict['tolerance'] = None

        # set to None if max_memory (nullable) is None
        # and model_fields_set contains the field
        if self.max_memory is None and "max_memory" in self.model_fields_set:
            _dict['max_memory'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrainRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index_key": obj.get("index_key"),
            "index_name": obj.get("index_name"),
            "n_lists": obj.get("n_lists"),
            "batch_size": obj.get("batch_size"),
            "max_iters": obj.get("max_iters"),
            "tolerance": obj.get("tolerance"),
            "max_memory": obj.get("max_memory")
        })
        return _obj


