# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/iam/v1/iam_service.proto, unacast/iam/v1/iam_user.proto, unacast/iam/v1/key_manager.proto, unacast/iam/v1/user_info.proto, unacast/iam/v1/user_role.proto, unacast/iam/v1/user_role_service.proto
# plugin: python-betterproto
# This file has been @generated
import warnings
from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class KeyType(betterproto.Enum):
    UNSPECIFIED = 0
    DEVELOPER = 1
    SERVER = 2


class CatalogRole(betterproto.Enum):
    UNSPECIFIED = 0
    DATA_OPERATOR = 1
    SALES_OPERATOR = 2
    OPERATOR_ADMIN = 3
    QUERY_USER = 4
    DATA_DELIVERY_USER = 5
    DATA_DELIVERY_OPERATOR = 6
    DATA_PRODUCTION_USER = 7
    DATA_PRODUCTION_OPERATOR = 8
    IAM_USER = 9
    IAM_OPERATOR = 10
    SOLUTION_SPECIALIST = 11
    USER = 15
    EXPERIMENTAL = 16
    ADMIN = 20


class AuthenticationFlow(betterproto.Enum):
    INVALID = 0
    TOKEN = 1
    API_KEY = 2


class AuthenticateStatus(betterproto.Enum):
    AUTHENTICATE_INVALID = 0
    AUTHENTICATE_DENY = 1
    AUTHENTICATE_GRANT = 2


@dataclass(eq=False, repr=False)
class CreateKeyRequest(betterproto.Message):
    display_name: str = betterproto.string_field(1)
    billing_account: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateDeveloperKeyRequest(betterproto.Message):
    display_name: str = betterproto.string_field(1)
    billing_account: str = betterproto.string_field(2)
    expiry_time: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CreateServerKeyRequest(betterproto.Message):
    display_name: str = betterproto.string_field(1)
    billing_account: str = betterproto.string_field(2)
    expiry_time: str = betterproto.string_field(3)
    cidr_ranges: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CreateKeyResponse(betterproto.Message):
    key: "Key" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListKeysRequest(betterproto.Message):
    billing_account: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListKeysResponse(betterproto.Message):
    keys: List["Key"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ValidateKeyRequest(betterproto.Message):
    key_value: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ValidateKeyResponse(betterproto.Message):
    key: "Key" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RevokeKeyRequest(betterproto.Message):
    key_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Key(betterproto.Message):
    name: str = betterproto.string_field(1)
    display_name: str = betterproto.string_field(2)
    billing_account: str = betterproto.string_field(3)
    created_by: str = betterproto.string_field(4)
    key_value: str = betterproto.string_field(5)
    create_time: str = betterproto.string_field(6)
    expiry_time: str = betterproto.string_field(7)
    type: str = betterproto.string_field(8)
    cidr_ranges: List[str] = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class UserInfo(betterproto.Message):
    uid: str = betterproto.string_field(1)
    display_name: str = betterproto.string_field(4)
    email: str = betterproto.string_field(5)
    photo_url: str = betterproto.string_field(6)
    create_time: datetime = betterproto.message_field(9)
    last_login_time: datetime = betterproto.message_field(10)
    last_refresh_time: datetime = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class UserRoles(betterproto.Message):
    catalog_roles: Dict[str, "CatalogRoleList"] = betterproto.map_field(
        21, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class CatalogRoleList(betterproto.Message):
    roles: List["CatalogRole"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class GetCatalogListingsRequest(betterproto.Message):
    catalog_roles: List["CatalogRole"] = betterproto.enum_field(1)
    catalog_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetCatalogListingsResponse(betterproto.Message):
    listings: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class NewUserRolesRequest(betterproto.Message):
    catalog_ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class NewUserRolesResponse(betterproto.Message):
    user_roles: "UserRoles" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class IamUser(betterproto.Message):
    id: str = betterproto.string_field(1)
    firebase_id: str = betterproto.string_field(2)
    email: str = betterproto.string_field(5)
    company_name: str = betterproto.string_field(3)
    full_name: str = betterproto.string_field(8)
    claims: "UserClaims" = betterproto.message_field(6)
    user_info: "UserInfo" = betterproto.message_field(7)
    """
    @exclude
     @inject_tag: `gorm:"-"`
    """

    create_time_string: str = betterproto.string_field(9)
    settings: "UserSettings" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class UserSettings(betterproto.Message):
    preferred_billing_account_id: str = betterproto.string_field(1)
    user_object: str = betterproto.string_field(3)
    hide_feedback_form_until: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class UserClaims(betterproto.Message):
    claim_strings: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AuthenticateInternalRequest(betterproto.Message):
    flow: "AuthenticationFlow" = betterproto.enum_field(1)
    audience: str = betterproto.string_field(2)
    token: str = betterproto.string_field(3)
    optimized: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class AuthenticateInternalDeny(betterproto.Message):
    code: int = betterproto.uint32_field(1)
    message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AuthenticateInternalGrant(betterproto.Message):
    role: "CatalogRole" = betterproto.enum_field(1)
    user: "IamUser" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AuthenticateInternalResponse(betterproto.Message):
    type: "AuthenticationFlow" = betterproto.enum_field(1)
    status: "AuthenticateStatus" = betterproto.enum_field(2)
    deny: "AuthenticateInternalDeny" = betterproto.message_field(5, group="data")
    grant: "AuthenticateInternalGrant" = betterproto.message_field(6, group="data")


@dataclass(eq=False, repr=False)
class UpdateUserSettingsRequest(betterproto.Message):
    email: str = betterproto.string_field(1)
    user_settings: "UserSettings" = betterproto.message_field(2)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class CreateUserRequest(betterproto.Message):
    email: str = betterproto.string_field(2)
    company_name: str = betterproto.string_field(3)
    full_name: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetUserRequest(betterproto.Message):
    uid: str = betterproto.string_field(1)
    email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListUsersRequest(betterproto.Message):
    filter: "ListUserFilter" = betterproto.message_field(5)
    page_token: str = betterproto.string_field(13)
    page_size: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class ListUsersResponse(betterproto.Message):
    users: List["IamUser"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class AppendClaimsRequest(betterproto.Message):
    uid: str = betterproto.string_field(1)
    email: str = betterproto.string_field(2)
    claims: List[str] = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class RevokeClaimsRequest(betterproto.Message):
    uid: str = betterproto.string_field(1)
    email: str = betterproto.string_field(2)
    claims: List[str] = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class ListUserFilter(betterproto.Message):
    include_claims: List[str] = betterproto.string_field(1)


class KeyManagerStub(betterproto.ServiceStub):
    async def create_key(
        self,
        create_key_request: "CreateKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateKeyResponse":
        return await self._unary_unary(
            "/unacast.iam.v1.KeyManager/CreateKey",
            create_key_request,
            CreateKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_developer_key(
        self,
        create_developer_key_request: "CreateDeveloperKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateKeyResponse":
        return await self._unary_unary(
            "/unacast.iam.v1.KeyManager/CreateDeveloperKey",
            create_developer_key_request,
            CreateKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_server_key(
        self,
        create_server_key_request: "CreateServerKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateKeyResponse":
        return await self._unary_unary(
            "/unacast.iam.v1.KeyManager/CreateServerKey",
            create_server_key_request,
            CreateKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_keys(
        self,
        list_keys_request: "ListKeysRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListKeysResponse":
        return await self._unary_unary(
            "/unacast.iam.v1.KeyManager/ListKeys",
            list_keys_request,
            ListKeysResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validate_key(
        self,
        validate_key_request: "ValidateKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ValidateKeyResponse":
        return await self._unary_unary(
            "/unacast.iam.v1.KeyManager/ValidateKey",
            validate_key_request,
            ValidateKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_key(
        self,
        revoke_key_request: "RevokeKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.iam.v1.KeyManager/RevokeKey",
            revoke_key_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class UserRoleServiceStub(betterproto.ServiceStub):
    async def get_new_user_roles(
        self,
        new_user_roles_request: "NewUserRolesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "NewUserRolesResponse":
        return await self._unary_unary(
            "/unacast.iam.v1.UserRoleService/GetNewUserRoles",
            new_user_roles_request,
            NewUserRolesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_catalog_listings(
        self,
        get_catalog_listings_request: "GetCatalogListingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCatalogListingsResponse":
        warnings.warn(
            "UserRoleService.get_catalog_listings is deprecated", DeprecationWarning
        )

        return await self._unary_unary(
            "/unacast.iam.v1.UserRoleService/GetCatalogListings",
            get_catalog_listings_request,
            GetCatalogListingsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class IamServiceStub(betterproto.ServiceStub):
    async def authenticate(
        self,
        authenticate_internal_request: "AuthenticateInternalRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AuthenticateInternalResponse":
        return await self._unary_unary(
            "/unacast.iam.v1.IamService/Authenticate",
            authenticate_internal_request,
            AuthenticateInternalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user(
        self,
        get_user_request: "GetUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IamUser":
        return await self._unary_unary(
            "/unacast.iam.v1.IamService/GetUser",
            get_user_request,
            IamUser,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_user(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IamUser":
        return await self._unary_unary(
            "/unacast.iam.v1.IamService/GetCurrentUser",
            betterproto_lib_google_protobuf_empty,
            IamUser,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_users(
        self,
        list_users_request: "ListUsersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListUsersResponse":
        return await self._unary_unary(
            "/unacast.iam.v1.IamService/ListUsers",
            list_users_request,
            ListUsersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def append_claims(
        self,
        append_claims_request: "AppendClaimsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IamUser":
        return await self._unary_unary(
            "/unacast.iam.v1.IamService/AppendClaims",
            append_claims_request,
            IamUser,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_claims(
        self,
        revoke_claims_request: "RevokeClaimsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IamUser":
        return await self._unary_unary(
            "/unacast.iam.v1.IamService/RevokeClaims",
            revoke_claims_request,
            IamUser,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_user(
        self,
        create_user_request: "CreateUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IamUser":
        return await self._unary_unary(
            "/unacast.iam.v1.IamService/CreateUser",
            create_user_request,
            IamUser,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_user_settings(
        self,
        update_user_settings_request: "UpdateUserSettingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IamUser":
        return await self._unary_unary(
            "/unacast.iam.v1.IamService/UpdateUserSettings",
            update_user_settings_request,
            IamUser,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class KeyManagerBase(ServiceBase):

    async def create_key(
        self, create_key_request: "CreateKeyRequest"
    ) -> "CreateKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_developer_key(
        self, create_developer_key_request: "CreateDeveloperKeyRequest"
    ) -> "CreateKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_server_key(
        self, create_server_key_request: "CreateServerKeyRequest"
    ) -> "CreateKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_keys(
        self, list_keys_request: "ListKeysRequest"
    ) -> "ListKeysResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def validate_key(
        self, validate_key_request: "ValidateKeyRequest"
    ) -> "ValidateKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def revoke_key(
        self, revoke_key_request: "RevokeKeyRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_key(
        self, stream: "grpclib.server.Stream[CreateKeyRequest, CreateKeyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_key(request)
        await stream.send_message(response)

    async def __rpc_create_developer_key(
        self,
        stream: "grpclib.server.Stream[CreateDeveloperKeyRequest, CreateKeyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_developer_key(request)
        await stream.send_message(response)

    async def __rpc_create_server_key(
        self, stream: "grpclib.server.Stream[CreateServerKeyRequest, CreateKeyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_server_key(request)
        await stream.send_message(response)

    async def __rpc_list_keys(
        self, stream: "grpclib.server.Stream[ListKeysRequest, ListKeysResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_keys(request)
        await stream.send_message(response)

    async def __rpc_validate_key(
        self, stream: "grpclib.server.Stream[ValidateKeyRequest, ValidateKeyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.validate_key(request)
        await stream.send_message(response)

    async def __rpc_revoke_key(
        self,
        stream: "grpclib.server.Stream[RevokeKeyRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.revoke_key(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.iam.v1.KeyManager/CreateKey": grpclib.const.Handler(
                self.__rpc_create_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateKeyRequest,
                CreateKeyResponse,
            ),
            "/unacast.iam.v1.KeyManager/CreateDeveloperKey": grpclib.const.Handler(
                self.__rpc_create_developer_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateDeveloperKeyRequest,
                CreateKeyResponse,
            ),
            "/unacast.iam.v1.KeyManager/CreateServerKey": grpclib.const.Handler(
                self.__rpc_create_server_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateServerKeyRequest,
                CreateKeyResponse,
            ),
            "/unacast.iam.v1.KeyManager/ListKeys": grpclib.const.Handler(
                self.__rpc_list_keys,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListKeysRequest,
                ListKeysResponse,
            ),
            "/unacast.iam.v1.KeyManager/ValidateKey": grpclib.const.Handler(
                self.__rpc_validate_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                ValidateKeyRequest,
                ValidateKeyResponse,
            ),
            "/unacast.iam.v1.KeyManager/RevokeKey": grpclib.const.Handler(
                self.__rpc_revoke_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                RevokeKeyRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }


class UserRoleServiceBase(ServiceBase):

    async def get_new_user_roles(
        self, new_user_roles_request: "NewUserRolesRequest"
    ) -> "NewUserRolesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_catalog_listings(
        self, get_catalog_listings_request: "GetCatalogListingsRequest"
    ) -> "GetCatalogListingsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_new_user_roles(
        self, stream: "grpclib.server.Stream[NewUserRolesRequest, NewUserRolesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_new_user_roles(request)
        await stream.send_message(response)

    async def __rpc_get_catalog_listings(
        self,
        stream: "grpclib.server.Stream[GetCatalogListingsRequest, GetCatalogListingsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_catalog_listings(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.iam.v1.UserRoleService/GetNewUserRoles": grpclib.const.Handler(
                self.__rpc_get_new_user_roles,
                grpclib.const.Cardinality.UNARY_UNARY,
                NewUserRolesRequest,
                NewUserRolesResponse,
            ),
            "/unacast.iam.v1.UserRoleService/GetCatalogListings": grpclib.const.Handler(
                self.__rpc_get_catalog_listings,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCatalogListingsRequest,
                GetCatalogListingsResponse,
            ),
        }


class IamServiceBase(ServiceBase):

    async def authenticate(
        self, authenticate_internal_request: "AuthenticateInternalRequest"
    ) -> "AuthenticateInternalResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user(self, get_user_request: "GetUserRequest") -> "IamUser":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_current_user(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "IamUser":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_users(
        self, list_users_request: "ListUsersRequest"
    ) -> "ListUsersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def append_claims(
        self, append_claims_request: "AppendClaimsRequest"
    ) -> "IamUser":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def revoke_claims(
        self, revoke_claims_request: "RevokeClaimsRequest"
    ) -> "IamUser":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_user(self, create_user_request: "CreateUserRequest") -> "IamUser":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_user_settings(
        self, update_user_settings_request: "UpdateUserSettingsRequest"
    ) -> "IamUser":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_authenticate(
        self,
        stream: "grpclib.server.Stream[AuthenticateInternalRequest, AuthenticateInternalResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.authenticate(request)
        await stream.send_message(response)

    async def __rpc_get_user(
        self, stream: "grpclib.server.Stream[GetUserRequest, IamUser]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user(request)
        await stream.send_message(response)

    async def __rpc_get_current_user(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, IamUser]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_current_user(request)
        await stream.send_message(response)

    async def __rpc_list_users(
        self, stream: "grpclib.server.Stream[ListUsersRequest, ListUsersResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_users(request)
        await stream.send_message(response)

    async def __rpc_append_claims(
        self, stream: "grpclib.server.Stream[AppendClaimsRequest, IamUser]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.append_claims(request)
        await stream.send_message(response)

    async def __rpc_revoke_claims(
        self, stream: "grpclib.server.Stream[RevokeClaimsRequest, IamUser]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.revoke_claims(request)
        await stream.send_message(response)

    async def __rpc_create_user(
        self, stream: "grpclib.server.Stream[CreateUserRequest, IamUser]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_user(request)
        await stream.send_message(response)

    async def __rpc_update_user_settings(
        self, stream: "grpclib.server.Stream[UpdateUserSettingsRequest, IamUser]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_user_settings(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.iam.v1.IamService/Authenticate": grpclib.const.Handler(
                self.__rpc_authenticate,
                grpclib.const.Cardinality.UNARY_UNARY,
                AuthenticateInternalRequest,
                AuthenticateInternalResponse,
            ),
            "/unacast.iam.v1.IamService/GetUser": grpclib.const.Handler(
                self.__rpc_get_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserRequest,
                IamUser,
            ),
            "/unacast.iam.v1.IamService/GetCurrentUser": grpclib.const.Handler(
                self.__rpc_get_current_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                IamUser,
            ),
            "/unacast.iam.v1.IamService/ListUsers": grpclib.const.Handler(
                self.__rpc_list_users,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListUsersRequest,
                ListUsersResponse,
            ),
            "/unacast.iam.v1.IamService/AppendClaims": grpclib.const.Handler(
                self.__rpc_append_claims,
                grpclib.const.Cardinality.UNARY_UNARY,
                AppendClaimsRequest,
                IamUser,
            ),
            "/unacast.iam.v1.IamService/RevokeClaims": grpclib.const.Handler(
                self.__rpc_revoke_claims,
                grpclib.const.Cardinality.UNARY_UNARY,
                RevokeClaimsRequest,
                IamUser,
            ),
            "/unacast.iam.v1.IamService/CreateUser": grpclib.const.Handler(
                self.__rpc_create_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateUserRequest,
                IamUser,
            ),
            "/unacast.iam.v1.IamService/UpdateUserSettings": grpclib.const.Handler(
                self.__rpc_update_user_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateUserSettingsRequest,
                IamUser,
            ),
        }
