[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kepler-downloader-dr25"
dynamic = ["version"]
description = "A comprehensive toolkit for downloading and filtering Kepler DR25 FITS files from NASA's MAST archive"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
authors = [
    {name = "akira921x", email = "noreply@use-github-issues.com"}
]
maintainers = [
    {name = "akira921x", email = "noreply@use-github-issues.com"}
]
keywords = [
    "kepler",
    "nasa",
    "astronomy",
    "exoplanet",
    "fits",
    "mast",
    "telescope",
    "space",
    "data",
    "download"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Astronomy",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]

dependencies = [
    "requests>=2.31.0",
    "astroquery>=0.4.6",
    "astropy>=5.0",
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "tqdm>=4.65.0",
    "redis>=4.5.0",
]

[project.urls]
Homepage = "https://github.com/akira921x/Kepler-Downloader-DR25"
Documentation = "https://github.com/akira921x/Kepler-Downloader-DR25/blob/main/README.md"
Repository = "https://github.com/akira921x/Kepler-Downloader-DR25"
"Bug Reports" = "https://github.com/akira921x/Kepler-Downloader-DR25/issues"

[project.scripts]
kepler-download = "kepler_downloader_dr25.downloader:main"
kepler-filter = "kepler_downloader_dr25.filter:main"
kepler-rebuild-db = "kepler_downloader_dr25.utils.rebuild_database:main"
kepler-check-missing = "kepler_downloader_dr25.utils.check_missing_kics:main"
kepler-stats = "kepler_downloader_dr25.utils.generate_stats:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "tox>=4.0",
    "build>=0.10",
    "twine>=4.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["kepler_downloader_dr25*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
kepler_downloader_dr25 = ["*.md", "*.txt"]

[tool.setuptools.dynamic]
version = {attr = "kepler_downloader_dr25._version.__version__"}

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 120
target-version = "py310"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.isort]
profile = "black"
line_length = 120

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=kepler_downloader_dr25",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["kepler_downloader_dr25"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py310,py311,py312,py313,lint,type
isolated_build = True

[testenv]
deps =
    pytest>=7.0
    pytest-cov>=4.0
    pytest-mock>=3.10
commands =
    pytest {posargs}

[testenv:lint]
deps =
    black>=23.0
    ruff>=0.1.0
commands =
    black --check .
    ruff check .

[testenv:type]
deps =
    mypy>=1.0
    types-requests
commands =
    mypy kepler_downloader_dr25

[testenv:format]
deps =
    black>=23.0
    ruff>=0.1.0
commands =
    black .
    ruff check --fix .
"""