# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.




build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - python --version  # For debugging
    - echo "Installing the code..."
    - pip install .
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests..."
    # required for pyside6
    - apt update && apt install -y ffmpeg libsm6 libxext6 libegl1
    - pip install .
    - pip install pytest
    - python -m pytest
    - echo "Test done"

# deploy job based on https://docs.pypi.org/trusted-publishers/using-a-publisher/#gitlab-cicd 
deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  when: manual
  id_tokens:
    PYPI_ID_TOKEN:
      aud: pypi
  script:
    - apt update && apt install -y jq 
    - pip install twine build id
    - python -m build
    # Retrieve the OIDC token from GitLab CI/CD, and exchange it for a PyPI API token
    - oidc_token=$(python -m id PYPI)
    - resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\":\"${oidc_token}\"}")
    - api_token=$(jq --raw-output '.token' <<< "${resp}")
    - twine upload -u __token__ -p "${api_token}" dist/*
