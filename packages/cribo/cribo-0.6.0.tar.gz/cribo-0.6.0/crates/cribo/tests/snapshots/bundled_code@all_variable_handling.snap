---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/all_variable_handling/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
simple_module = _cribo.types.SimpleNamespace(__name__='simple_module')
def public_func():
    """A public function that should be exported."""
    return "Hello from public_func"
CONSTANT = 42
simple_module.__all__ = ['public_func', 'CONSTANT']
simple_module.public_func = public_func
simple_module.CONSTANT = CONSTANT
nested_package_utils = _cribo.types.SimpleNamespace(__name__='nested_package.utils')
nested_package = _cribo.types.SimpleNamespace(__name__='nested_package', __initializing__=False, __initialized__=False)
nested_package.utils = nested_package_utils
def helper_func():
    """Helper function used by other modules"""
    return "helper result"
nested_package_utils.helper_func = helper_func
nested_package_submodule = _cribo.types.SimpleNamespace(__name__='nested_package.submodule')
nested_package.submodule = nested_package_submodule
def sub_function():
    """Function from submodule"""
    return "Hello from submodule"
SUB_CONSTANT = "submodule_value"
nested_package_submodule.__all__ = ['sub_function', 'SUB_CONSTANT']
nested_package_submodule.sub_function = sub_function
nested_package_submodule.SUB_CONSTANT = SUB_CONSTANT
def exported_from_init():
    """Function exported from package __init__.py"""
    return f"From init, using helper: {helper_func()}"
nested_package.exported_from_init = exported_from_init
conflict_module = _cribo.types.SimpleNamespace(__name__='conflict_module')
message_1 = "from conflict_module"
SHARED_NAME = "conflict_module_version"
conflict_module.message = message_1
message = conflict_module.message
print("Testing simple module exports:")
print(f"public_func() = {public_func()}")
print(f"CONSTANT = {CONSTANT}")
print("\nTesting nested package exports:")
print(f"exported_from_init() = {exported_from_init()}")
print(f"sub_function() = {sub_function()}")
print("\nTesting conflict resolution:")
print(f"message = {message}")
print(f"\n'public_func' in simple_module.__all__ = {'public_func' in simple_module.__all__}")
print(f"'CONSTANT' in simple_module.__all__ = {'CONSTANT' in simple_module.__all__}")
sub = nested_package.submodule
print(f"\n'sub_function' in submodule.__all__ = {'sub_function' in sub.__all__}")
