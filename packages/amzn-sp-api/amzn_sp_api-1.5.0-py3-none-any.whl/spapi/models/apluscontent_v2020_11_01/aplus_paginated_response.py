# coding: utf-8

"""
    Selling Partner API for A+ Content Management

    Use the A+ Content API to build applications that help selling partners add rich marketing content to their Amazon product detail pages. Selling partners can use A+ content to share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners use content modules to add images and text.

    The version of the OpenAPI document: 2020-11-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class AplusPaginatedResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'warnings': 'List[Error]',
        'next_page_token': 'str',
    }

    attribute_map = {
        'warnings': 'warnings',
        'next_page_token': 'nextPageToken',
    }

    def __init__(self, warnings=None, next_page_token=None, _configuration=None):  # noqa: E501
        """AplusPaginatedResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._warnings = None
        self._next_page_token = None
        self.discriminator = None

        if warnings is not None:
            self.warnings = warnings
        if next_page_token is not None:
            self.next_page_token = next_page_token

    @property
    def warnings(self):
        """Gets the warnings of this AplusPaginatedResponse.  # noqa: E501

        A set of messages to the user, such as warnings or comments.  # noqa: E501

        :return: The warnings of this AplusPaginatedResponse.  # noqa: E501
        :rtype: List[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this AplusPaginatedResponse.

        A set of messages to the user, such as warnings or comments.  # noqa: E501

        :param warnings: The warnings of this AplusPaginatedResponse.  # noqa: E501
        :type: List[Error]
        """

        self._warnings = warnings

    @property
    def next_page_token(self):
        """Gets the next_page_token of this AplusPaginatedResponse.  # noqa: E501

        A token that you use to fetch a specific page when there are multiple pages of results.  # noqa: E501

        :return: The next_page_token of this AplusPaginatedResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this AplusPaginatedResponse.

        A token that you use to fetch a specific page when there are multiple pages of results.  # noqa: E501

        :param next_page_token: The next_page_token of this AplusPaginatedResponse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                next_page_token is not None and len(next_page_token) < 1):
            raise ValueError("Invalid value for `next_page_token`, length must be greater than or equal to `1`")  # noqa: E501

        self._next_page_token = next_page_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AplusPaginatedResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AplusPaginatedResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AplusPaginatedResponse):
            return True

        return self.to_dict() != other.to_dict()
