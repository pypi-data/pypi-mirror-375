name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI'
        required: false
        default: 'false'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools_scm

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-install:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install wheel
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl

    - name: Test import
      run: |
        python -c "
        import docling_onnx_models
        print(f'Successfully imported docling_onnx_models version: {docling_onnx_models.__version__}')
        
        from docling_onnx_models.common import get_optimal_providers
        providers = get_optimal_providers('auto')
        print(f'Available providers: {providers}')
        "

  publish-test:
    if: github.event.inputs.test_pypi == 'true'
    needs: [build, test-install]
    runs-on: ubuntu-latest
    environment: test-pypi

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

  publish:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, test-install]
    runs-on: ubuntu-latest
    environment: pypi

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: publish
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Get tag name
      id: get_tag
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ steps.get_tag.outputs.TAG_NAME }}
        body: |
          ## What's Changed
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Installation
          
          ```bash
          pip install docling-onnx-models==${{ steps.get_tag.outputs.TAG_NAME }}
          ```
          
          ## Verification
          
          ```python
          import docling_onnx_models
          print(docling_onnx_models.__version__)
          ```
        draft: false
        prerelease: ${{ contains(steps.get_tag.outputs.TAG_NAME, 'a') || contains(steps.get_tag.outputs.TAG_NAME, 'b') || contains(steps.get_tag.outputs.TAG_NAME, 'rc') }}