---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/wildcard_all_setattr/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
package__subpackage_module_a = _cribo.types.SimpleNamespace(__name__='package._subpackage.module_a')
package = _cribo.types.SimpleNamespace(__name__='package', __initializing__=False, __initialized__=False)
package__subpackage = _cribo.types.SimpleNamespace(__name__='package._subpackage', __initializing__=False, __initialized__=False, __path__=[])
package._subpackage = package__subpackage
package__subpackage.module_a = package__subpackage_module_a
"""Module A with MyClass."""
class MyClass:
    """A class exported through wildcards."""

    def __init__(self):
        self.value = "from module_a"
MyClass.__module__ = 'package._subpackage.module_a'
package__subpackage_module_a.MyClass = MyClass
package__subpackage_module_b = _cribo.types.SimpleNamespace(__name__='package._subpackage.module_b')
package__subpackage.module_b = package__subpackage_module_b
"""Module B with my_function."""
def my_function():
    """A function exported through wildcards."""
    return "from module_b"
package__subpackage_module_b.my_function = my_function
def _cribo_init___cribo_cca96f_package(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Package using wildcard imports and setattr pattern like httpx."""
    __cribo_init_result = _cribo_init___cribo_66c36f_package__subpackage(package__subpackage)
    for attr in dir(__cribo_init_result):
        if not attr.startswith('_'):
            setattr(package._subpackage, attr, getattr(__cribo_init_result, attr))
    MyClass = package._subpackage.MyClass
    package.MyClass = MyClass
    my_function = package._subpackage.my_function
    package.my_function = my_function
    __all__ = ["MyClass", "my_function"]
    __locals = vars(package)
    self.__locals = __locals
    for __name in __all__:
        if not __name.startswith("__"):
            setattr(__locals[__name], "__module__", "package")
    self.__initialized__ = True
    self.__initializing__ = False
    return self
package.__init__ = _cribo_init___cribo_cca96f_package
def _cribo_init___cribo_66c36f_package__subpackage(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    self.MyClass = package__subpackage_module_a.MyClass
    self.my_function = package__subpackage_module_b.my_function
    """Subpackage that re-exports from modules using wildcards."""
    self.module_b = package__subpackage_module_b
    self.module_a = package__subpackage_module_a
    self.module_b = package__subpackage_module_b
    self.module_a = package__subpackage_module_a
    self.__initialized__ = True
    self.__initializing__ = False
    return self
package__subpackage.__init__ = _cribo_init___cribo_66c36f_package__subpackage
"""Test wildcard imports with __all__ and setattr pattern."""
__cribo_init_result = _cribo_init___cribo_cca96f_package(package)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(package, attr, getattr(__cribo_init_result, attr))
MyClass = package.MyClass
my_function = package.my_function
obj = MyClass()
print(f"MyClass instance value: {obj.value}")
print(f"my_function result: {my_function()}")
print("Success!")
