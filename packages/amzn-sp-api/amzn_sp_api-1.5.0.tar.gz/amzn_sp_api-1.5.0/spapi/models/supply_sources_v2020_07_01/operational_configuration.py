# coding: utf-8

"""
    Selling Partner API for Supply Sources

    Manage configurations and capabilities of seller supply sources.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class OperationalConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_details': 'ContactDetails',
        'throughput_config': 'ThroughputConfig',
        'operating_hours_by_day': 'OperatingHoursByDay',
        'handling_time': 'Duration',
    }

    attribute_map = {
        'contact_details': 'contactDetails',
        'throughput_config': 'throughputConfig',
        'operating_hours_by_day': 'operatingHoursByDay',
        'handling_time': 'handlingTime',
    }

    def __init__(self, contact_details=None, throughput_config=None, operating_hours_by_day=None, handling_time=None, _configuration=None):  # noqa: E501
        """OperationalConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contact_details = None
        self._throughput_config = None
        self._operating_hours_by_day = None
        self._handling_time = None
        self.discriminator = None

        if contact_details is not None:
            self.contact_details = contact_details
        if throughput_config is not None:
            self.throughput_config = throughput_config
        if operating_hours_by_day is not None:
            self.operating_hours_by_day = operating_hours_by_day
        if handling_time is not None:
            self.handling_time = handling_time

    @property
    def contact_details(self):
        """Gets the contact_details of this OperationalConfiguration.  # noqa: E501


        :return: The contact_details of this OperationalConfiguration.  # noqa: E501
        :rtype: ContactDetails
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this OperationalConfiguration.


        :param contact_details: The contact_details of this OperationalConfiguration.  # noqa: E501
        :type: ContactDetails
        """

        self._contact_details = contact_details

    @property
    def throughput_config(self):
        """Gets the throughput_config of this OperationalConfiguration.  # noqa: E501


        :return: The throughput_config of this OperationalConfiguration.  # noqa: E501
        :rtype: ThroughputConfig
        """
        return self._throughput_config

    @throughput_config.setter
    def throughput_config(self, throughput_config):
        """Sets the throughput_config of this OperationalConfiguration.


        :param throughput_config: The throughput_config of this OperationalConfiguration.  # noqa: E501
        :type: ThroughputConfig
        """

        self._throughput_config = throughput_config

    @property
    def operating_hours_by_day(self):
        """Gets the operating_hours_by_day of this OperationalConfiguration.  # noqa: E501


        :return: The operating_hours_by_day of this OperationalConfiguration.  # noqa: E501
        :rtype: OperatingHoursByDay
        """
        return self._operating_hours_by_day

    @operating_hours_by_day.setter
    def operating_hours_by_day(self, operating_hours_by_day):
        """Sets the operating_hours_by_day of this OperationalConfiguration.


        :param operating_hours_by_day: The operating_hours_by_day of this OperationalConfiguration.  # noqa: E501
        :type: OperatingHoursByDay
        """

        self._operating_hours_by_day = operating_hours_by_day

    @property
    def handling_time(self):
        """Gets the handling_time of this OperationalConfiguration.  # noqa: E501


        :return: The handling_time of this OperationalConfiguration.  # noqa: E501
        :rtype: Duration
        """
        return self._handling_time

    @handling_time.setter
    def handling_time(self, handling_time):
        """Sets the handling_time of this OperationalConfiguration.


        :param handling_time: The handling_time of this OperationalConfiguration.  # noqa: E501
        :type: Duration
        """

        self._handling_time = handling_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperationalConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationalConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperationalConfiguration):
            return True

        return self.to_dict() != other.to_dict()
