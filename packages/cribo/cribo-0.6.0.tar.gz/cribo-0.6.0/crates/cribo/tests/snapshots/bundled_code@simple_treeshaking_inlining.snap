---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/simple_treeshaking_inlining/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
speaking = _cribo.types.SimpleNamespace(__name__='speaking')
class PersonTitle(_cribo.enum.Enum):
    MR = "Mr."
    MRS = "Mrs."
    MS = "Ms."
    DR = "Dr."
    PROF = "Prof."
PersonTitle.__module__ = 'speaking'
class Person:

    def __init__(self, name: str, title: PersonTitle):
        self.name = name
        self.title = title

    def greet(self) -> str:
        return f"{self.title.value} {self.name}"
Person.__module__ = 'speaking'
def create_ms(name: str) -> Person:
    return Person(name, PersonTitle.MS)
ALICE_NAME = "Alice"
class Phrase(_cribo.typing.TypedDict):
    what: str
    whom: Person
Phrase.__module__ = 'speaking'
def say(phrase: Phrase) -> str:
    return f"{phrase['what']} {phrase['whom'].greet()}"
speaking.ALICE_NAME = ALICE_NAME
speaking.Person = Person
speaking.PersonTitle = PersonTitle
speaking.Phrase = Phrase
speaking.create_ms = create_ms
speaking.say = say
def main() -> None:
    print(say({"what": "Hello", "whom": create_ms(ALICE_NAME)}))
if __name__ == "__main__":
    main()
