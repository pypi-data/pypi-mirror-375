---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_name_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypackage_abc = _cribo.types.SimpleNamespace(__name__='mypackage.abc')
mypackage = _cribo.types.SimpleNamespace(__name__='mypackage', __initializing__=False, __initialized__=False)
mypackage.abc = mypackage_abc
"""Local module named 'abc' - should not be confused with stdlib abc."""
class MyClass:
    """A class defined in the local abc module."""

    def __init__(self):
        self.value = "local_abc_class"

    def __str__(self):
        return f"MyClass({self.value})"
MyClass.__module__ = 'mypackage.abc'
mypackage_abc.MyClass = MyClass
mypackage_pretty = _cribo.types.SimpleNamespace(__name__='mypackage.pretty')
mypackage.pretty = mypackage_pretty
"""Module that imports from local abc module."""
def format_object(obj: MyClass) -> str:
    """Format an object from the local abc module."""
    return f"Formatted: {obj}"
mypackage_pretty.format_object = format_object
"""Test case for modules with same name as stdlib modules."""
result = format_object(MyClass())
print(f"Result: {result}")
pretty = mypackage.pretty
abc = mypackage.abc
