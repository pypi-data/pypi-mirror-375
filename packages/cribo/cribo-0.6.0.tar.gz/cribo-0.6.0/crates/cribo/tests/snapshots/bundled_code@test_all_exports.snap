---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/test_all_exports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
utils = _cribo.types.SimpleNamespace(__name__='utils')
"""\nUtility module that demonstrates __all__ handling.\nOnly exports helper_function and UtilityClass, not _internal_function.\n"""
def helper_function():
    """A public helper function."""
    return "helper_result"
class UtilityClass:
    """A utility class that should be exposed."""

    def __init__(self, value):
        self.value = value

    def get_value(self):
        return self.value
UtilityClass.__module__ = 'utils'
utils.helper_function = helper_function
utils.UtilityClass = UtilityClass
"""\nTest fixture for __all__ handling in bundled modules.\nThis tests that modules with __all__ only expose listed symbols.\n"""
def main():
    """Test that only exported symbols are accessible."""
    result = helper_function()
    util = UtilityClass("test")
    print("Helper result:", result)
    print("Utility value:", util.get_value())
    return "test_all_exports_complete"
if __name__ == "__main__":
    result = main()
    print(result)
