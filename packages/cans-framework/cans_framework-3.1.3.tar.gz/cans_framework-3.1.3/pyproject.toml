[build-system]
requires = [
    "setuptools>=45",
    "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "cans-framework"
version = "3.1.3"
description = "A production-ready deep learning framework for causal inference on structured, textual, and heterogeneous data"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Durai Rajamanickam", email = "durai@infinidatum.net"}
]
maintainers = [
    {name = "Durai Rajamanickam", email = "durai@infinidatum.net"}
]
keywords = [
    "causal-inference", 
    "deep-learning", 
    "graph-neural-networks", 
    "transformers", 
    "counterfactual", 
    "treatment-effects",
    "machine-learning",
    "pytorch",
    "bert",
    "gnn",
    "causal-ai",
    "econometrics",
    "statistics"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Environment :: GPU :: NVIDIA CUDA",
    "Natural Language :: English",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.38.0",
    "torch-geometric>=2.3.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "tqdm>=4.66.0",
    "networkx>=3.1",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "scipy>=1.11.0",
    "statsmodels>=0.14.0",
    "PyYAML>=6.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "requests>=2.31.0",
    "passlib[bcrypt]>=1.7.0",
    "PyJWT>=2.8.0"
]

[project.urls]
Homepage = "https://github.com/rdmurugan/cans-framework"
Documentation = "https://github.com/rdmurugan/cans-framework#readme"
Repository = "https://github.com/rdmurugan/cans-framework"
"Bug Reports" = "https://github.com/rdmurugan/cans-framework/issues"
Changelog = "https://github.com/rdmurugan/cans-framework/releases"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.990",
    "pre-commit>=2.20.0",
    "bandit>=1.7.0",
]
api = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "requests>=2.31.0",
    "passlib[bcrypt]>=1.7.0",
    "PyJWT>=2.8.0",
    "aiohttp>=3.8.0",
]
mcp = [
    "model-context-protocol>=0.1.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinxcontrib-napoleon>=0.7",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.4.0",
    "ipykernel>=6.15.0",
    "ipywidgets>=8.0.0",
    "nbconvert>=7.0.0",
]
visualization = [
    "plotly>=5.15.0",
    "seaborn>=0.12.0",
    "matplotlib>=3.7.0",
    "graphviz>=0.20.0",
]
gpu = [
    "torch>=2.0.0",
    "torch-geometric>=2.3.0",
]
all = [
    "cans-framework[dev,docs,notebooks,visualization]"
]

[project.scripts]
cans = "cans.cli:main_cli"
cans-validate = "cans.cli:validate_assumptions_cli"
cans-evaluate = "cans.cli:evaluate_model_cli"
cans-analyze = "cans.cli:analyze_causal_cli"
cans-server = "cans.api.server:start_server"
cans-mcp = "cans.api.mcp_server:main"
cans-tutorials = "cans.tutorials:setup_tutorials"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["cans*"]
exclude = ["tests*", "examples*", "docs*"]

[tool.setuptools.package-data]
cans = [
    "data/*.json",
    "data/*.csv", 
    "config/*.yaml",
    "config/*.yml",
    "tutorials/*.md",
    "tutorials/*.py",
    "tutorials/examples/*.csv",
    "tutorials/examples/*.json",
    "py.typed"
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["cans"]
known_third_party = ["torch", "transformers", "sklearn", "numpy", "pandas"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "network: marks tests that require network access",
]

# Coverage configuration
[tool.coverage.run]
source = ["cans"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "sklearn.*",
    "scipy.*",
    "networkx.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
]
ignore_missing_imports = true

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]