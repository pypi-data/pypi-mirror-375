# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ScopeOfWork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asin': 'str',
        'title': 'str',
        'quantity': 'int',
        'required_skills': 'List[str]',
    }

    attribute_map = {
        'asin': 'asin',
        'title': 'title',
        'quantity': 'quantity',
        'required_skills': 'requiredSkills',
    }

    def __init__(self, asin=None, title=None, quantity=None, required_skills=None, _configuration=None):  # noqa: E501
        """ScopeOfWork - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asin = None
        self._title = None
        self._quantity = None
        self._required_skills = None
        self.discriminator = None

        if asin is not None:
            self.asin = asin
        if title is not None:
            self.title = title
        if quantity is not None:
            self.quantity = quantity
        if required_skills is not None:
            self.required_skills = required_skills

    @property
    def asin(self):
        """Gets the asin of this ScopeOfWork.  # noqa: E501

        The Amazon Standard Identification Number (ASIN) of the service job.  # noqa: E501

        :return: The asin of this ScopeOfWork.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this ScopeOfWork.

        The Amazon Standard Identification Number (ASIN) of the service job.  # noqa: E501

        :param asin: The asin of this ScopeOfWork.  # noqa: E501
        :type: str
        """

        self._asin = asin

    @property
    def title(self):
        """Gets the title of this ScopeOfWork.  # noqa: E501

        The title of the service job.  # noqa: E501

        :return: The title of this ScopeOfWork.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScopeOfWork.

        The title of the service job.  # noqa: E501

        :param title: The title of this ScopeOfWork.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def quantity(self):
        """Gets the quantity of this ScopeOfWork.  # noqa: E501

        The number of service jobs.  # noqa: E501

        :return: The quantity of this ScopeOfWork.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ScopeOfWork.

        The number of service jobs.  # noqa: E501

        :param quantity: The quantity of this ScopeOfWork.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def required_skills(self):
        """Gets the required_skills of this ScopeOfWork.  # noqa: E501

        A list of skills required to perform the job.  # noqa: E501

        :return: The required_skills of this ScopeOfWork.  # noqa: E501
        :rtype: List[str]
        """
        return self._required_skills

    @required_skills.setter
    def required_skills(self, required_skills):
        """Sets the required_skills of this ScopeOfWork.

        A list of skills required to perform the job.  # noqa: E501

        :param required_skills: The required_skills of this ScopeOfWork.  # noqa: E501
        :type: List[str]
        """

        self._required_skills = required_skills

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScopeOfWork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScopeOfWork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScopeOfWork):
            return True

        return self.to_dict() != other.to_dict()
