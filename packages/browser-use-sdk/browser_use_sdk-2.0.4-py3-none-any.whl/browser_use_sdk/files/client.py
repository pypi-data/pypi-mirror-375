# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.task_output_file_response import TaskOutputFileResponse
from ..types.upload_file_presigned_url_response import UploadFilePresignedUrlResponse
from .raw_client import AsyncRawFilesClient, RawFilesClient
from .types.upload_file_request_content_type import UploadFileRequestContentType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFilesClient
        """
        return self._raw_client

    def user_upload_file_presigned_url(
        self,
        session_id: str,
        *,
        file_name: str,
        content_type: UploadFileRequestContentType,
        size_bytes: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadFilePresignedUrlResponse:
        """
        Generate a secure presigned URL for uploading files that AI agents can use during tasks.

        Parameters
        ----------
        session_id : str

        file_name : str
            The name of the file to upload

        content_type : UploadFileRequestContentType
            The content type of the file to upload

        size_bytes : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadFilePresignedUrlResponse
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.files.user_upload_file_presigned_url(
            session_id="session_id",
            file_name="fileName",
            content_type="image/jpg",
            size_bytes=1,
        )
        """
        _response = self._raw_client.user_upload_file_presigned_url(
            session_id,
            file_name=file_name,
            content_type=content_type,
            size_bytes=size_bytes,
            request_options=request_options,
        )
        return _response.data

    def get_task_output_file_presigned_url(
        self, task_id: str, file_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TaskOutputFileResponse:
        """
        Get secure download URL for an output file generated by the AI agent.

        Parameters
        ----------
        task_id : str

        file_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskOutputFileResponse
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.files.get_task_output_file_presigned_url(
            task_id="task_id",
            file_id="file_id",
        )
        """
        _response = self._raw_client.get_task_output_file_presigned_url(
            task_id, file_id, request_options=request_options
        )
        return _response.data


class AsyncFilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFilesClient
        """
        return self._raw_client

    async def user_upload_file_presigned_url(
        self,
        session_id: str,
        *,
        file_name: str,
        content_type: UploadFileRequestContentType,
        size_bytes: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadFilePresignedUrlResponse:
        """
        Generate a secure presigned URL for uploading files that AI agents can use during tasks.

        Parameters
        ----------
        session_id : str

        file_name : str
            The name of the file to upload

        content_type : UploadFileRequestContentType
            The content type of the file to upload

        size_bytes : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadFilePresignedUrlResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.files.user_upload_file_presigned_url(
                session_id="session_id",
                file_name="fileName",
                content_type="image/jpg",
                size_bytes=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_upload_file_presigned_url(
            session_id,
            file_name=file_name,
            content_type=content_type,
            size_bytes=size_bytes,
            request_options=request_options,
        )
        return _response.data

    async def get_task_output_file_presigned_url(
        self, task_id: str, file_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TaskOutputFileResponse:
        """
        Get secure download URL for an output file generated by the AI agent.

        Parameters
        ----------
        task_id : str

        file_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskOutputFileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.files.get_task_output_file_presigned_url(
                task_id="task_id",
                file_id="file_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_task_output_file_presigned_url(
            task_id, file_id, request_options=request_options
        )
        return _response.data
