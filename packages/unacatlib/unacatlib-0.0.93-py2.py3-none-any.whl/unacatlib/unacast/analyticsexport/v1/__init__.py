# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/analyticsexport/v1/analytics_export.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class AccountRow(betterproto.Message):
    id: str = betterproto.string_field(1)
    display_name: str = betterproto.string_field(2)
    created_at: str = betterproto.string_field(3)
    kind: str = betterproto.string_field(4)
    member_count: int = betterproto.int64_field(5)


class AnalyticsExportStub(betterproto.ServiceStub):
    async def export_accounts(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.analyticsexport.v1.AnalyticsExport/ExportAccounts",
            betterproto_lib_google_protobuf_empty,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class AnalyticsExportBase(ServiceBase):

    async def export_accounts(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_export_accounts(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.export_accounts(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.analyticsexport.v1.AnalyticsExport/ExportAccounts": grpclib.const.Handler(
                self.__rpc_export_accounts,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                betterproto_lib_google_protobuf.Empty,
            ),
        }
