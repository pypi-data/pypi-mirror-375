# coding: utf-8

"""
    Selling Partner API for Orders

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class AutomatedShippingSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_automated_shipping_settings': 'bool',
        'automated_carrier': 'str',
        'automated_ship_method': 'str',
    }

    attribute_map = {
        'has_automated_shipping_settings': 'HasAutomatedShippingSettings',
        'automated_carrier': 'AutomatedCarrier',
        'automated_ship_method': 'AutomatedShipMethod',
    }

    def __init__(self, has_automated_shipping_settings=None, automated_carrier=None, automated_ship_method=None, _configuration=None):  # noqa: E501
        """AutomatedShippingSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._has_automated_shipping_settings = None
        self._automated_carrier = None
        self._automated_ship_method = None
        self.discriminator = None

        if has_automated_shipping_settings is not None:
            self.has_automated_shipping_settings = has_automated_shipping_settings
        if automated_carrier is not None:
            self.automated_carrier = automated_carrier
        if automated_ship_method is not None:
            self.automated_ship_method = automated_ship_method

    @property
    def has_automated_shipping_settings(self):
        """Gets the has_automated_shipping_settings of this AutomatedShippingSettings.  # noqa: E501

        When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order.  # noqa: E501

        :return: The has_automated_shipping_settings of this AutomatedShippingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._has_automated_shipping_settings

    @has_automated_shipping_settings.setter
    def has_automated_shipping_settings(self, has_automated_shipping_settings):
        """Sets the has_automated_shipping_settings of this AutomatedShippingSettings.

        When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order.  # noqa: E501

        :param has_automated_shipping_settings: The has_automated_shipping_settings of this AutomatedShippingSettings.  # noqa: E501
        :type: bool
        """

        self._has_automated_shipping_settings = has_automated_shipping_settings

    @property
    def automated_carrier(self):
        """Gets the automated_carrier of this AutomatedShippingSettings.  # noqa: E501

        Auto-generated carrier for SSA orders.  # noqa: E501

        :return: The automated_carrier of this AutomatedShippingSettings.  # noqa: E501
        :rtype: str
        """
        return self._automated_carrier

    @automated_carrier.setter
    def automated_carrier(self, automated_carrier):
        """Sets the automated_carrier of this AutomatedShippingSettings.

        Auto-generated carrier for SSA orders.  # noqa: E501

        :param automated_carrier: The automated_carrier of this AutomatedShippingSettings.  # noqa: E501
        :type: str
        """

        self._automated_carrier = automated_carrier

    @property
    def automated_ship_method(self):
        """Gets the automated_ship_method of this AutomatedShippingSettings.  # noqa: E501

        Auto-generated ship method for SSA orders.  # noqa: E501

        :return: The automated_ship_method of this AutomatedShippingSettings.  # noqa: E501
        :rtype: str
        """
        return self._automated_ship_method

    @automated_ship_method.setter
    def automated_ship_method(self, automated_ship_method):
        """Sets the automated_ship_method of this AutomatedShippingSettings.

        Auto-generated ship method for SSA orders.  # noqa: E501

        :param automated_ship_method: The automated_ship_method of this AutomatedShippingSettings.  # noqa: E501
        :type: str
        """

        self._automated_ship_method = automated_ship_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomatedShippingSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomatedShippingSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomatedShippingSettings):
            return True

        return self.to_dict() != other.to_dict()
