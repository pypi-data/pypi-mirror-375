[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "smoothglue_file_uploader"
version = "1.0.4"
dependencies = [
    "django>=4.2",
    "minio>=7.2.16",
    "boto3>=1.34.92",
    "PyJWT>=2.10.1",
    "markdown>=3.5.2",
    "drf-spectacular>=0.26.5",
    "drf-spectacular-sidecar>=2025.3.1"
]
description = "SmoothGlue GuC2 File Uploader: a Django app providing secure, pluggable uploads to S3, MinIO, or local storage with validation, checksums, and post-processing. Built for regulated and edge environments from the ground up."
readme = "README.md"
requires-python = ">= 3.12"
authors = [
    { name = "SmoothGlue" },
]

[tool.setuptools]
packages = ["smoothglue.file_uploader", "smoothglue.file_uploader.migrations", "smoothglue.file_uploader.storage_providers"]

[project.urls]
Homepage = "https://braingu.com/solutions/smoothglue/"


[tool.poetry]
name = "smoothglue-file-uploader"
version = "1.0.4"
description = "SmoothGlue GuC2 File Uploader: a Django app providing secure, pluggable uploads to S3, MinIO, or local storage with validation, checksums, and post-processing. Built for regulated and edge environments from the ground up."
authors = ["BrainGu <smoothglue@braingu.com>"]
maintainers = ["BrainGu <smoothglue@braingu.com>"]
license = "Proprietary"
readme = "README.md"
homepage = "https://braingu.com/solutions/smoothglue/"
keywords = [
    "Interoperability",
    "API Integration",
    "Edge Computing",
    "Application Framework",
    "Data-Driven Development",
    "Django",
    "File Upload"
]
packages = [
    { include = "smoothglue" },
]

[tool.poetry.dependencies]
python = "^3.12"
django-cors-headers = "^4.3.0"
Django = ">=4.2.18,<6.0.0"
djangorestframework = "^3.14.0"
django-filter = "^23.3"
django-json-widget = "^1.1.1"
drf-spectacular = "^0.28.0"
drf-spectacular-sidecar = "^2025.3.1"
PyJWT = "^2.8.0"
cffi = "1.16.0"
boto3 = "1.40.22"
minio = "7.2.16"
pyproject-hooks = "1.2.0"

[tool.poetry.group.dev.dependencies]
coverage = { extras = ["toml"], version = "^7.3.2" }
pylint-django = "^2.5.5"
flake8 = "^7.0.0"
ipython = "^9.0.0"
pre-commit = "^4.0.0"
isort = "^6.0.0"
black = "25.1.0"
pylint = "^3.2.5"
pylint-plugin-utils = "^0.9.0"
pytest-django = "^4.9.0"
pytest-asyncio = "^1.0.0"
pylint-gitlab = "^2.0.1"

[tool.poetry.urls]
issues = "https://braingu.com/support"

[tool.black]
line-length = 100
exclude = '''
/(
    .cache
    | venv
    | smoothglue/authentication/migrations
)/
'''

[tool.pylint.main]
load-plugins = ["pylint_django"]
django-settings-module = "django_settings"
ignore-paths = [
    "^.*\\.cache\\/.*$",
    "^.*python_packages\\/.*$",
    "^.*resources\\/.*$",
    "^.*tests\\/.*$",
    "^.*migrations\\/.*$",
    "^.*venv\\/.*$"
]
ignore = ["venv", ".vscode", ".cache"]
extension-pkg-whitelist = ["math", "_datetime"]
recursive = true
fail-under = 10
max-attributes = 15
no-docstring-rgx = "(?:^_|^[Tt]est.+|Mock.+)"


[tool.pylint.design]
max-parents = 15
exclude-too-few-public-methods = ["abc.ABC"]

[tool.pylint.typecheck]
ignored-classes = ["Client", "WSGIRequest"]

[tool.pylint."messages control"]
disable = [
    "C0103",
    "C0114",
    "C0115",
    "C0116",
    "C0201",
    "C0209",
    "C0330",
    "E0012",
    "E1101",
    "R0903",
    "R1725z",
    "W0212",
    "W0511",
    "W0613",
    "W0718",
    "duplicate-code",
    "invalid-name",
    "missing-docstring",
    "pointless-string-statement"
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.reports]
output-format = "colorized"
reports = false
score = true


[tool.coverage.run]
include = [
    "smoothglue/*",
]
command_line = "loadtests.py"

[tool.coverage.report]
exclude_also = [
    "class DefaultUploadProcessor",
    "class DefaultValidator",
    "class TestValidator",
    "class TestPostProcessor",
    # ignore abstract base classes
    "class .+\\((?:abc\\.)?ABC\\)",
    # ignore storage provider initalizers
    "def init_minio_client",
    "def init_s3_client"
]

[tool.pytest.ini_options]
python_files = ["test_*.py"]
addopts = "-ra -s"
