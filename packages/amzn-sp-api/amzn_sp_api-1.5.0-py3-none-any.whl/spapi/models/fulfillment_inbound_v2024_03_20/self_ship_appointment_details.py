# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class SelfShipAppointmentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appointment_id': 'float',
        'appointment_slot_time': 'AppointmentSlotTime',
        'appointment_status': 'str',
    }

    attribute_map = {
        'appointment_id': 'appointmentId',
        'appointment_slot_time': 'appointmentSlotTime',
        'appointment_status': 'appointmentStatus',
    }

    def __init__(self, appointment_id=None, appointment_slot_time=None, appointment_status=None, _configuration=None):  # noqa: E501
        """SelfShipAppointmentDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._appointment_id = None
        self._appointment_slot_time = None
        self._appointment_status = None
        self.discriminator = None

        if appointment_id is not None:
            self.appointment_id = appointment_id
        if appointment_slot_time is not None:
            self.appointment_slot_time = appointment_slot_time
        if appointment_status is not None:
            self.appointment_status = appointment_status

    @property
    def appointment_id(self):
        """Gets the appointment_id of this SelfShipAppointmentDetails.  # noqa: E501

        Identifier for appointment.  # noqa: E501

        :return: The appointment_id of this SelfShipAppointmentDetails.  # noqa: E501
        :rtype: float
        """
        return self._appointment_id

    @appointment_id.setter
    def appointment_id(self, appointment_id):
        """Sets the appointment_id of this SelfShipAppointmentDetails.

        Identifier for appointment.  # noqa: E501

        :param appointment_id: The appointment_id of this SelfShipAppointmentDetails.  # noqa: E501
        :type: float
        """

        self._appointment_id = appointment_id

    @property
    def appointment_slot_time(self):
        """Gets the appointment_slot_time of this SelfShipAppointmentDetails.  # noqa: E501


        :return: The appointment_slot_time of this SelfShipAppointmentDetails.  # noqa: E501
        :rtype: AppointmentSlotTime
        """
        return self._appointment_slot_time

    @appointment_slot_time.setter
    def appointment_slot_time(self, appointment_slot_time):
        """Sets the appointment_slot_time of this SelfShipAppointmentDetails.


        :param appointment_slot_time: The appointment_slot_time of this SelfShipAppointmentDetails.  # noqa: E501
        :type: AppointmentSlotTime
        """

        self._appointment_slot_time = appointment_slot_time

    @property
    def appointment_status(self):
        """Gets the appointment_status of this SelfShipAppointmentDetails.  # noqa: E501

        Status of the appointment.  # noqa: E501

        :return: The appointment_status of this SelfShipAppointmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._appointment_status

    @appointment_status.setter
    def appointment_status(self, appointment_status):
        """Sets the appointment_status of this SelfShipAppointmentDetails.

        Status of the appointment.  # noqa: E501

        :param appointment_status: The appointment_status of this SelfShipAppointmentDetails.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                appointment_status is not None and len(appointment_status) > 1024):
            raise ValueError("Invalid value for `appointment_status`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                appointment_status is not None and len(appointment_status) < 1):
            raise ValueError("Invalid value for `appointment_status`, length must be greater than or equal to `1`")  # noqa: E501

        self._appointment_status = appointment_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SelfShipAppointmentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelfShipAppointmentDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelfShipAppointmentDetails):
            return True

        return self.to_dict() != other.to_dict()
