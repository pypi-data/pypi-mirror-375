"""Unit tests for tresto.core.file_header module."""

import textwrap
from pathlib import Path
from tempfile import TemporaryDirectory
from unittest.mock import patch

import pytest

from tresto.core.file_header import FileHeader, TrestoFileHeaderCorrupted


class TestFileHeader:
    """Test cases for FileHeader class."""

    def test_init(self) -> None:
        """Test FileHeader initialization."""
        header = FileHeader(
            test_name="example_test",
            test_description="This is a test",
            created_date="2024-01-15",
            content="import os\n\ndef test():\n    pass",
        )
        assert header.test_name == "example_test"
        assert header.test_description == "This is a test"
        assert header.created_date == "2024-01-15"
        assert header.content == "import os\n\ndef test():\n    pass"

    def test_init_with_default_date(self) -> None:
        """Test FileHeader initialization with default date."""
        header = FileHeader(test_name="example_test", test_description="This is a test", content="import os")
        # Should have today's date in YYYY-MM-DD format
        import re

        assert re.match(r"\d{4}-\d{2}-\d{2}", header.created_date)

    @patch("tresto.core.file_header.__version__", "1.2.3")
    def test_to_docstring(self) -> None:
        """Test docstring generation."""
        header = FileHeader(
            test_name="my_test", test_description="Test description", created_date="2024-01-15", content="test content"
        )
        docstring = header.to_docstring()

        expected = (
            "Generated by Tresto v1.2.3\n\n"
            "Test name: my_test\n"
            "Test description: Test description\n"
            "Created Date: 2024-01-15"
        )
        assert docstring == expected

    def test_write_to_file_new_file(self) -> None:
        """Test writing header to a new file."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"
            content = "import os\n\ndef test_function():\n    pass"
            header = FileHeader(
                test_name="test_example", test_description="Example test", created_date="2024-01-15", content=content
            )

            header.write_to_file(file_path)

            result = file_path.read_text()
            assert result.startswith('"""Generated by Tresto v')
            assert "Test name: test_example" in result
            assert "Test description: Example test" in result
            assert "Created Date: 2024-01-15" in result
            assert "import os" in result
            assert "def test_function():" in result

    def test_write_to_file_replace_existing_docstring(self) -> None:
        """Test replacing existing module docstring."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"

            content_with_docstring = textwrap.dedent('''\
                """Old docstring
                This should be replaced.
                """

                import sys

                def my_function():
                    return True
                ''')

            header = FileHeader(
                test_name="test_replace",
                test_description="Replace test",
                created_date="2024-01-15",
                content=content_with_docstring,
            )

            header.write_to_file(file_path)
            result = file_path.read_text()

            # Should not contain old docstring
            assert "Old docstring" not in result
            assert "This should be replaced" not in result

            # Should contain new header
            assert "Generated by Tresto v" in result
            assert "Test name: test_replace" in result

            # Should preserve code
            assert "import sys" in result
            assert "def my_function():" in result

    def test_write_to_file_single_quotes_docstring(self) -> None:
        """Test replacing docstring with single quotes."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"

            content_with_single_quotes = textwrap.dedent("""\
                '''Old single quote docstring'''

                def function():
                    pass
                """)

            header = FileHeader(
                test_name="test_single",
                test_description="Single quotes test",
                created_date="2024-01-15",
                content=content_with_single_quotes,
            )

            header.write_to_file(file_path)
            result = file_path.read_text()

            assert "Old single quote docstring" not in result
            assert "Test name: test_single" in result
            assert "def function():" in result

    def test_read_from_file_valid_header(self) -> None:
        """Test reading valid header from file."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"

            content = textwrap.dedent('''\
                """Generated by Tresto v1.0.0

                Test name: example_test
                Test description: This is an example test
                Created Date: 2024-01-15
                """

                import unittest

                class TestExample(unittest.TestCase):
                    pass
                ''')

            file_path.write_text(content)
            header = FileHeader.read_from_file(file_path)

            assert header.test_name == "example_test"
            assert header.test_description == "This is an example test"
            assert header.created_date == "2024-01-15"
            assert "import unittest" in header.content
            assert "class TestExample" in header.content
            # Should not contain the header docstring in content
            assert "Generated by Tresto" not in header.content

    def test_read_from_file_nonexistent_file(self) -> None:
        """Test reading from nonexistent file raises error."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "nonexistent.py"

            with pytest.raises(TrestoFileHeaderCorrupted, match="File does not exist"):
                FileHeader.read_from_file(file_path)

    def test_read_from_file_no_docstring(self) -> None:
        """Test reading file without docstring raises error."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"
            file_path.write_text("import os\n\ndef test():\n    pass")

            with pytest.raises(TrestoFileHeaderCorrupted, match="No module docstring found"):
                FileHeader.read_from_file(file_path)

    def test_read_from_file_invalid_header_format(self) -> None:
        """Test reading file with invalid header format raises error."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"

            content = textwrap.dedent('''\
                """This is not a Tresto header
                Just a regular docstring
                """

                def test():
                    pass
                ''')

            file_path.write_text(content)

            with pytest.raises(TrestoFileHeaderCorrupted, match="Invalid header format"):
                FileHeader.read_from_file(file_path)

    def test_read_from_file_missing_test_name(self) -> None:
        """Test reading file with missing test name raises error."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"

            content = textwrap.dedent('''\
                """Generated by Tresto v1.0.0

                Test description: Missing test name
                Created Date: 2024-01-15
                """
                ''')

            file_path.write_text(content)

            with pytest.raises(TrestoFileHeaderCorrupted, match="Missing 'Test name' field"):
                FileHeader.read_from_file(file_path)

    def test_read_from_file_missing_test_description(self) -> None:
        """Test reading file with missing test description raises error."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"

            content = textwrap.dedent('''\
                """Generated by Tresto v1.0.0

                Test name: example_test
                Created Date: 2024-01-15
                """
                ''')

            file_path.write_text(content)

            with pytest.raises(TrestoFileHeaderCorrupted, match="Missing 'Test description' field"):
                FileHeader.read_from_file(file_path)

    def test_read_from_file_missing_created_date(self) -> None:
        """Test reading file with missing created date raises error."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"

            content = textwrap.dedent('''\
                """Generated by Tresto v1.0.0

                Test name: example_test
                Test description: Missing date
                """
                ''')

            file_path.write_text(content)

            with pytest.raises(TrestoFileHeaderCorrupted, match="Missing 'Created Date' field"):
                FileHeader.read_from_file(file_path)

    def test_remove_module_docstring_triple_double_quotes(self) -> None:
        """Test removing docstring with triple double quotes."""
        content = textwrap.dedent('''\
            """This is a docstring"""

            import os
            def func():
                pass
            ''')

        result = FileHeader._remove_module_docstring(content)
        expected = "import os\ndef func():\n    pass\n"
        assert result == expected

    def test_remove_module_docstring_triple_single_quotes(self) -> None:
        """Test removing docstring with triple single quotes."""
        content = textwrap.dedent("""\
            '''This is a docstring'''

            import sys
            """)

        result = FileHeader._remove_module_docstring(content)
        assert result == "import sys\n"

    def test_remove_module_docstring_multiline(self) -> None:
        """Test removing multiline docstring."""
        content = textwrap.dedent('''\
            """This is a
            multiline
            docstring"""

            def function():
                """This should remain"""
                pass
            ''')

        result = FileHeader._remove_module_docstring(content)
        assert "This is a" not in result
        assert "multiline" not in result
        assert "docstring" not in result
        assert "def function():" in result
        assert "This should remain" in result  # Function docstring should remain

    def test_remove_module_docstring_no_docstring(self) -> None:
        """Test removing docstring when none exists."""
        content = "import os\n\ndef func():\n    pass"
        result = FileHeader._remove_module_docstring(content)
        assert result == content

    def test_extract_module_docstring_triple_double_quotes(self) -> None:
        """Test extracting docstring with triple double quotes."""
        content = textwrap.dedent('''\
            """This is the docstring
            with multiple lines"""

            import os
            ''')

        result = FileHeader._extract_module_docstring(content)
        assert result == "This is the docstring\nwith multiple lines"

    def test_extract_module_docstring_triple_single_quotes(self) -> None:
        """Test extracting docstring with triple single quotes."""
        content = textwrap.dedent("""\
            '''Single quote docstring'''

            def func():
                pass
            """)

        result = FileHeader._extract_module_docstring(content)
        assert result == "Single quote docstring"

    def test_extract_module_docstring_no_docstring(self) -> None:
        """Test extracting docstring when none exists."""
        content = "import os\n\ndef func():\n    pass"
        result = FileHeader._extract_module_docstring(content)
        assert result is None

    def test_extract_module_docstring_with_whitespace(self) -> None:
        """Test extracting docstring with leading whitespace."""
        content = textwrap.dedent('''\
               """Docstring with whitespace"""

            import os
            ''')

        result = FileHeader._extract_module_docstring(content)
        assert result == "Docstring with whitespace"

    def test_parse_header_docstring_valid(self) -> None:
        """Test parsing valid header docstring."""
        docstring = textwrap.dedent("""\
            Generated by Tresto v1.0.0

            Test name: my_test
            Test description: This is my test
            Created Date: 2024-01-15""")

        header = FileHeader._parse_header_docstring(docstring)
        assert header.test_name == "my_test"
        assert header.test_description == "This is my test"
        assert header.created_date == "2024-01-15"
        assert header.content == ""  # Should be empty from _parse_header_docstring

    def test_parse_header_docstring_with_extra_whitespace(self) -> None:
        """Test parsing header with extra whitespace and empty lines."""
        docstring = textwrap.dedent("""\
              Generated by Tresto v2.0.0  

              Test name:   spaced_test   
              Test description:   Test with spaces   
              Created Date:   2024-01-16   

              """)

        header = FileHeader._parse_header_docstring(docstring)
        assert header.test_name == "spaced_test"
        assert header.test_description == "Test with spaces"
        assert header.created_date == "2024-01-16"

    def test_round_trip_write_and_read(self) -> None:
        """Test writing and then reading back produces the same header."""
        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"

            content = "import unittest\n\nclass MyTest(unittest.TestCase):\n    pass"
            original_header = FileHeader(
                test_name="round_trip_test",
                test_description="Test round trip functionality",
                created_date="2024-01-15",
                content=content,
            )

            original_header.write_to_file(file_path)

            read_header = FileHeader.read_from_file(file_path)

            assert read_header.test_name == original_header.test_name
            assert read_header.test_description == original_header.test_description
            assert read_header.created_date == original_header.created_date

            # Verify content is preserved (without leading whitespace from docstring removal)
            assert "import unittest" in read_header.content
            assert "class MyTest" in read_header.content

    def test_content_persistence_through_operations(self) -> None:
        """Test that content is properly handled through various operations."""
        original_content = textwrap.dedent('''\
            import os
            import sys

            def test_function():
                """Function docstring should be preserved."""
                return True

            class TestClass:
                def method(self):
                    pass
            ''')

        header = FileHeader(
            test_name="content_test",
            test_description="Test content handling",
            created_date="2024-01-15",
            content=original_content,
        )

        with TemporaryDirectory() as tmpdir:
            file_path = Path(tmpdir) / "test_file.py"

            # Write and read back
            header.write_to_file(file_path)
            read_header = FileHeader.read_from_file(file_path)

            # Content should be preserved
            assert "import os" in read_header.content
            assert "import sys" in read_header.content
            assert "def test_function():" in read_header.content
            assert "Function docstring should be preserved" in read_header.content
            assert "class TestClass:" in read_header.content
            assert "def method(self):" in read_header.content


class TestTrestoFileHeaderCorrupted:
    """Test cases for TrestoFileHeaderCorrupted exception."""

    def test_exception_inheritance(self) -> None:
        """Test that TrestoFileHeaderCorrupted inherits from ValueError."""
        assert issubclass(TrestoFileHeaderCorrupted, ValueError)

    def test_exception_with_message(self) -> None:
        """Test creating exception with custom message."""
        exc = TrestoFileHeaderCorrupted("Custom error message")
        assert str(exc) == "Custom error message"
