# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ItemDelivery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'estimated_delivery_date': 'datetime',
        'item_delivery_promise': 'ItemDeliveryPromise',
    }

    attribute_map = {
        'estimated_delivery_date': 'estimatedDeliveryDate',
        'item_delivery_promise': 'itemDeliveryPromise',
    }

    def __init__(self, estimated_delivery_date=None, item_delivery_promise=None, _configuration=None):  # noqa: E501
        """ItemDelivery - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._estimated_delivery_date = None
        self._item_delivery_promise = None
        self.discriminator = None

        if estimated_delivery_date is not None:
            self.estimated_delivery_date = estimated_delivery_date
        if item_delivery_promise is not None:
            self.item_delivery_promise = item_delivery_promise

    @property
    def estimated_delivery_date(self):
        """Gets the estimated_delivery_date of this ItemDelivery.  # noqa: E501

        The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.  # noqa: E501

        :return: The estimated_delivery_date of this ItemDelivery.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_delivery_date

    @estimated_delivery_date.setter
    def estimated_delivery_date(self, estimated_delivery_date):
        """Sets the estimated_delivery_date of this ItemDelivery.

        The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.  # noqa: E501

        :param estimated_delivery_date: The estimated_delivery_date of this ItemDelivery.  # noqa: E501
        :type: datetime
        """

        self._estimated_delivery_date = estimated_delivery_date

    @property
    def item_delivery_promise(self):
        """Gets the item_delivery_promise of this ItemDelivery.  # noqa: E501


        :return: The item_delivery_promise of this ItemDelivery.  # noqa: E501
        :rtype: ItemDeliveryPromise
        """
        return self._item_delivery_promise

    @item_delivery_promise.setter
    def item_delivery_promise(self, item_delivery_promise):
        """Sets the item_delivery_promise of this ItemDelivery.


        :param item_delivery_promise: The item_delivery_promise of this ItemDelivery.  # noqa: E501
        :type: ItemDeliveryPromise
        """

        self._item_delivery_promise = item_delivery_promise

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemDelivery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemDelivery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemDelivery):
            return True

        return self.to_dict() != other.to_dict()
