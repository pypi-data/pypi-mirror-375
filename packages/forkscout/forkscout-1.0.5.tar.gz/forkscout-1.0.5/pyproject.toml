[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "forkscout"
version = "1.0.5"
description = "Forkscout: Powerful GitHub repository fork analysis tool that discovers valuable features across forks, ranks them by impact, and can create pull requests to integrate improvements back to upstream projects"
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
authors = [
    {name = "Roman Medvedev", email = "pypi@romavm.dev"}
]
maintainers = [
    {name = "Roman Medvedev", email = "pypi@romavm.dev"}
]
keywords = [
    "github",
    "fork",
    "analysis",
    "repository",
    "git",
    "code-analysis",
    "feature-discovery",
    "pull-request",
    "automation",
    "developer-tools",
    "productivity",
    "workflow",
    "open-source",
    "collaboration",
    "code-quality"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Environment :: Console",
    "Natural Language :: English",
    "Typing :: Typed"
]
requires-python = ">=3.12"
dependencies = [
    "httpx>=0.25.0",
    "click>=8.1.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pyyaml>=6.0.0",
    "rich>=13.7.0",
    "asyncio-throttle>=1.0.2",
    "aiosqlite>=0.19.0",
    "openai>=1.101.0",
    "gitpython>=3.1.45",
    "aiohttp>=3.12.15",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.1.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "respx>=0.20.0",
    "psutil>=5.9.0",
]

[project.scripts]
forkscout = "forkscout.cli:cli"

[project.urls]
Homepage = "https://github.com/Romamo/forkscout"
Repository = "https://github.com/Romamo/forkscout"
Documentation = "https://github.com/Romamo/forkscout#readme"
Issues = "https://github.com/Romamo/forkscout/issues"
Changelog = "https://github.com/Romamo/forkscout/releases"
"Bug Reports" = "https://github.com/Romamo/forkscout/issues"
"Feature Requests" = "https://github.com/Romamo/forkscout/issues"
"Source Code" = "https://github.com/Romamo/forkscout"

[tool.hatch.build.targets.wheel]
packages = ["src/forkscout"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]
exclude = [
    "/.git",
    "/.github",
    "/.kiro",
    "/.mypy_cache",
    "/.pytest_cache",
    "/.ruff_cache",
    "/.venv",
    "/htmlcov",
    "/__pycache__",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".DS_Store",
    "*.egg-info",
    "/build",
    "/dist",
    "/dev-artifacts",
    "/demo",
    "/demos",
    "/docs",
    "/reports",
    "/scripts",
    "forkscout.log",
    "forkscout_cache.db",
    ".coverage",
    ".env",
    ".forkscout_session.json.backup"
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
unfixable = [
    "F841", # Remove unused variables
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "S101"]
"src/forkscout/cli.py" = ["ARG001"]  # CLI functions have unused args by design

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-m 'not billable and not online and not slow' --tb=short -v --timeout=300"
testpaths = ["tests"]
timeout = 300
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "unit: Unit tests with mocks and isolated components",
    "integration: Integration tests with real local systems", 
    "online: Online tests with real external APIs (free)",
    "billable: Billable tests with paid external APIs",
    "contract: API contract and schema tests",
    "e2e: End-to-end tests with complete workflows",
    "performance: Performance and benchmarking tests",
    "slow: Tests that take longer to run",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
    "psutil>=7.0.0",
    "pytest-asyncio>=1.1.0",
    "pytest-timeout>=2.4.0",
    "respx>=0.22.0",
    "twine>=6.2.0",
]
