# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/maps/v1/address_component.proto, unacast/maps/v1/feature.proto, unacast/maps/v1/layer.proto, unacast/maps/v1/map_service.proto
# plugin: python-betterproto
# This file has been @generated
import warnings
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import unatype as __unatype__
from ...index import v1 as __index_v1__
from ...v2 import metric as __v2_metric__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ComponentKind(betterproto.Enum):
    FREE_FORM_UNSPECIFIED = 0
    MAP = 1
    TAXONOMY = 2
    COUNT = 3


class LayerKind(betterproto.Enum):
    INDEXED = 0
    H3 = 1
    SERIES_MEMBER = 2


@dataclass(eq=False, repr=False)
class AddressComponent(betterproto.Message):
    component: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `gorm:"primary_key"`
    """

    catalog_id: str = betterproto.string_field(2)
    kind: "ComponentKind" = betterproto.enum_field(3)
    map_layer_id: str = betterproto.string_field(4)
    short_name: str = betterproto.string_field(7)
    display_name: str = betterproto.string_field(8)
    id_display_name: str = betterproto.string_field(5)
    index_id: str = betterproto.string_field(9)
    description: str = betterproto.string_field(10)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(6)
    index: "__index_v1__.Index" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class AddressComponentValue(betterproto.Message):
    component: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)
    short_name: str = betterproto.string_field(3)
    """
    @exclude
     @inject_tag: `bigquery:"short_name"`
    """

    display_name: str = betterproto.string_field(4)
    """
    @exclude
     @inject_tag: `bigquery:"display_name"`
    """


@dataclass(eq=False, repr=False)
class AddressComponentFilter(betterproto.Message):
    component: str = betterproto.string_field(1)
    values: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Feature(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    """
    @exclude
     @inject_tag: `bigquery:"layer_id"`
    """

    feature_id: str = betterproto.string_field(3)
    """
    @exclude
     @inject_tag: `bigquery:"feature_id"`
    """

    name: str = betterproto.string_field(4)
    geo: str = betterproto.string_field(6)
    point: str = betterproto.string_field(8)
    polygon: str = betterproto.string_field(9)
    address_components: List["AddressComponentValue"] = betterproto.message_field(7)
    """
    @exclude
     @inject_tag: `bigquery:"address_components"`
    """

    came_into_existence: str = betterproto.string_field(10)
    ceased_to_exist: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class MapLayerSeries(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    spec: "LayerSpec" = betterproto.message_field(5)
    revisions: List["MapLayerRevision"] = betterproto.message_field(6)
    current_revision: "MapLayerRevision" = betterproto.message_field(7)
    in_publish_revision: "MapLayerRevision" = betterproto.message_field(8)
    created_time: str = betterproto.string_field(9)
    created_by: str = betterproto.string_field(10)
    country: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class MapLayerRevision(betterproto.Message):
    revision: str = betterproto.string_field(2)
    """string map_series_id = 1;"""

    layer_id: str = betterproto.string_field(4)
    """
    Layer layer = 3; // or just LayerID, at least needed for indexing data.
    """


@dataclass(eq=False, repr=False)
class Layer(betterproto.Message):
    id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)
    address_components: List["AddressComponent"] = betterproto.message_field(4)
    """
    @exclude
     @inject_tag: `gorm:"many2many:layer_address_components;"`
    """

    index_id: str = betterproto.string_field(5)
    index: "__index_v1__.Index" = betterproto.message_field(6)
    display_name: str = betterproto.string_field(7)
    description: str = betterproto.string_field(8)
    availability: "__unatype__.AvailabilityKind" = betterproto.enum_field(10)
    layer_kind: "LayerKind" = betterproto.enum_field(9)
    spec: "LayerSpec" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class LayerSpec(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    address_components: List["AddressComponentValueSpec"] = betterproto.message_field(2)
    feature_display_name: str = betterproto.string_field(5)
    feature_description: str = betterproto.string_field(6)
    feature_kind_display_name: str = betterproto.string_field(7)
    attribution: str = betterproto.string_field(9)
    version: str = betterproto.string_field(10)
    advancement_from_layer_id: str = betterproto.string_field(11)
    requires_explicit_access: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class AddressComponentValueSpec(betterproto.Message):
    component: str = betterproto.string_field(1)
    allow_empty_values: bool = betterproto.bool_field(10)
    requires_specific_resource: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class GetLayerRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListLayersRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListLayersResponse(betterproto.Message):
    layers: List["Layer"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListFeaturesRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)
    address_component_filter: List["AddressComponentFilter"] = (
        betterproto.message_field(2)
    )
    page_size: int = betterproto.int32_field(3)
    page_token: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ListFeaturesResponse(betterproto.Message):
    features: List["Feature"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(2)
    total_size: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class ListAddressComponentsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListAddressComponentsResponse(betterproto.Message):
    address_components: List["AddressComponent"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetAvailableDataColumnsRequest(betterproto.Message):
    layer_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAvailableDataColumnsResponse(betterproto.Message):
    available_columns: List["__v2_metric__.DataColumn"] = betterproto.message_field(1)


class MapServiceStub(betterproto.ServiceStub):
    async def get_layer(
        self,
        get_layer_request: "GetLayerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Layer":
        warnings.warn("MapService.get_layer is deprecated", DeprecationWarning)

        return await self._unary_unary(
            "/unacast.maps.v1.MapService/GetLayer",
            get_layer_request,
            Layer,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_layers(
        self,
        list_layers_request: "ListLayersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListLayersResponse":
        warnings.warn("MapService.list_layers is deprecated", DeprecationWarning)

        return await self._unary_unary(
            "/unacast.maps.v1.MapService/ListLayers",
            list_layers_request,
            ListLayersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_features(
        self,
        list_features_request: "ListFeaturesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListFeaturesResponse":
        warnings.warn("MapService.list_features is deprecated", DeprecationWarning)

        return await self._unary_unary(
            "/unacast.maps.v1.MapService/ListFeatures",
            list_features_request,
            ListFeaturesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_address_components(
        self,
        list_address_components_request: "ListAddressComponentsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListAddressComponentsResponse":
        return await self._unary_unary(
            "/unacast.maps.v1.MapService/ListAddressComponents",
            list_address_components_request,
            ListAddressComponentsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_available_data_columns(
        self,
        get_available_data_columns_request: "GetAvailableDataColumnsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAvailableDataColumnsResponse":
        return await self._unary_unary(
            "/unacast.maps.v1.MapService/GetAvailableDataColumns",
            get_available_data_columns_request,
            GetAvailableDataColumnsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MapServiceBase(ServiceBase):

    async def get_layer(self, get_layer_request: "GetLayerRequest") -> "Layer":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_layers(
        self, list_layers_request: "ListLayersRequest"
    ) -> "ListLayersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_features(
        self, list_features_request: "ListFeaturesRequest"
    ) -> "ListFeaturesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_address_components(
        self, list_address_components_request: "ListAddressComponentsRequest"
    ) -> "ListAddressComponentsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_available_data_columns(
        self, get_available_data_columns_request: "GetAvailableDataColumnsRequest"
    ) -> "GetAvailableDataColumnsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_layer(
        self, stream: "grpclib.server.Stream[GetLayerRequest, Layer]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_layer(request)
        await stream.send_message(response)

    async def __rpc_list_layers(
        self, stream: "grpclib.server.Stream[ListLayersRequest, ListLayersResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_layers(request)
        await stream.send_message(response)

    async def __rpc_list_features(
        self, stream: "grpclib.server.Stream[ListFeaturesRequest, ListFeaturesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_features(request)
        await stream.send_message(response)

    async def __rpc_list_address_components(
        self,
        stream: "grpclib.server.Stream[ListAddressComponentsRequest, ListAddressComponentsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_address_components(request)
        await stream.send_message(response)

    async def __rpc_get_available_data_columns(
        self,
        stream: "grpclib.server.Stream[GetAvailableDataColumnsRequest, GetAvailableDataColumnsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_available_data_columns(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.maps.v1.MapService/GetLayer": grpclib.const.Handler(
                self.__rpc_get_layer,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLayerRequest,
                Layer,
            ),
            "/unacast.maps.v1.MapService/ListLayers": grpclib.const.Handler(
                self.__rpc_list_layers,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListLayersRequest,
                ListLayersResponse,
            ),
            "/unacast.maps.v1.MapService/ListFeatures": grpclib.const.Handler(
                self.__rpc_list_features,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListFeaturesRequest,
                ListFeaturesResponse,
            ),
            "/unacast.maps.v1.MapService/ListAddressComponents": grpclib.const.Handler(
                self.__rpc_list_address_components,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListAddressComponentsRequest,
                ListAddressComponentsResponse,
            ),
            "/unacast.maps.v1.MapService/GetAvailableDataColumns": grpclib.const.Handler(
                self.__rpc_get_available_data_columns,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAvailableDataColumnsRequest,
                GetAvailableDataColumnsResponse,
            ),
        }
