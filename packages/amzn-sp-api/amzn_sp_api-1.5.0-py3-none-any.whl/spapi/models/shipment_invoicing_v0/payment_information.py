# coding: utf-8

"""
    Selling Partner API for Shipment Invoicing

    The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PaymentInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_method': 'PaymentMethodEnum',
        'acquirer_id': 'str',
        'card_brand': 'str',
        'payment_value': 'Money',
        'authorization_code': 'str',
    }

    attribute_map = {
        'payment_method': 'PaymentMethod',
        'acquirer_id': 'AcquirerId',
        'card_brand': 'CardBrand',
        'payment_value': 'PaymentValue',
        'authorization_code': 'AuthorizationCode',
    }

    def __init__(self, payment_method=None, acquirer_id=None, card_brand=None, payment_value=None, authorization_code=None, _configuration=None):  # noqa: E501
        """PaymentInformation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._payment_method = None
        self._acquirer_id = None
        self._card_brand = None
        self._payment_value = None
        self._authorization_code = None
        self.discriminator = None

        if payment_method is not None:
            self.payment_method = payment_method
        if acquirer_id is not None:
            self.acquirer_id = acquirer_id
        if card_brand is not None:
            self.card_brand = card_brand
        if payment_value is not None:
            self.payment_value = payment_value
        if authorization_code is not None:
            self.authorization_code = authorization_code

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentInformation.  # noqa: E501


        :return: The payment_method of this PaymentInformation.  # noqa: E501
        :rtype: PaymentMethodEnum
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentInformation.


        :param payment_method: The payment_method of this PaymentInformation.  # noqa: E501
        :type: PaymentMethodEnum
        """

        self._payment_method = payment_method

    @property
    def acquirer_id(self):
        """Gets the acquirer_id of this PaymentInformation.  # noqa: E501

        Government ID of acquirer  # noqa: E501

        :return: The acquirer_id of this PaymentInformation.  # noqa: E501
        :rtype: str
        """
        return self._acquirer_id

    @acquirer_id.setter
    def acquirer_id(self, acquirer_id):
        """Sets the acquirer_id of this PaymentInformation.

        Government ID of acquirer  # noqa: E501

        :param acquirer_id: The acquirer_id of this PaymentInformation.  # noqa: E501
        :type: str
        """

        self._acquirer_id = acquirer_id

    @property
    def card_brand(self):
        """Gets the card_brand of this PaymentInformation.  # noqa: E501

        Credit card brand (if payment method is CreditCard)  # noqa: E501

        :return: The card_brand of this PaymentInformation.  # noqa: E501
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this PaymentInformation.

        Credit card brand (if payment method is CreditCard)  # noqa: E501

        :param card_brand: The card_brand of this PaymentInformation.  # noqa: E501
        :type: str
        """

        self._card_brand = card_brand

    @property
    def payment_value(self):
        """Gets the payment_value of this PaymentInformation.  # noqa: E501


        :return: The payment_value of this PaymentInformation.  # noqa: E501
        :rtype: Money
        """
        return self._payment_value

    @payment_value.setter
    def payment_value(self, payment_value):
        """Sets the payment_value of this PaymentInformation.


        :param payment_value: The payment_value of this PaymentInformation.  # noqa: E501
        :type: Money
        """

        self._payment_value = payment_value

    @property
    def authorization_code(self):
        """Gets the authorization_code of this PaymentInformation.  # noqa: E501

        Authorization code for this payment  # noqa: E501

        :return: The authorization_code of this PaymentInformation.  # noqa: E501
        :rtype: str
        """
        return self._authorization_code

    @authorization_code.setter
    def authorization_code(self, authorization_code):
        """Sets the authorization_code of this PaymentInformation.

        Authorization code for this payment  # noqa: E501

        :param authorization_code: The authorization_code of this PaymentInformation.  # noqa: E501
        :type: str
        """

        self._authorization_code = authorization_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentInformation):
            return True

        return self.to_dict() != other.to_dict()
