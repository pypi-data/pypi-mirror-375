# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.4.4-5
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqRadsecProxy(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The configuration of RADSEC proxy
    """


    class MetaOapg:
        required = {
            "operator_name",
            "format_type",
            "update_time",
            "create_time",
            "operator_name_type",
            "name",
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            name = schemas.StrSchema
        
            @staticmethod
            def format_type() -> typing.Type['XiqRadiusProxyFormatType']:
                return XiqRadiusProxyFormatType
            
            
            class operator_name_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "WBAID": "WBAID",
                    }
                
                @schemas.classproperty
                def WBAID(cls):
                    return cls("WBAID")
            operator_name = schemas.StrSchema
            org_id = schemas.Int64Schema
            description = schemas.StrSchema
            enable_inject_operator_name_attribute = schemas.BoolSchema
            
            
            class realms(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqRadsecProxyRealm']:
                        return XiqRadsecProxyRealm
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqRadsecProxyRealm'], typing.List['XiqRadsecProxyRealm']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'realms':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqRadsecProxyRealm':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "name": name,
                "format_type": format_type,
                "operator_name_type": operator_name_type,
                "operator_name": operator_name,
                "org_id": org_id,
                "description": description,
                "enable_inject_operator_name_attribute": enable_inject_operator_name_attribute,
                "realms": realms,
            }
    
    operator_name: MetaOapg.properties.operator_name
    format_type: 'XiqRadiusProxyFormatType'
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    operator_name_type: MetaOapg.properties.operator_name_type
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format_type"]) -> 'XiqRadiusProxyFormatType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator_name_type"]) -> MetaOapg.properties.operator_name_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator_name"]) -> MetaOapg.properties.operator_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_inject_operator_name_attribute"]) -> MetaOapg.properties.enable_inject_operator_name_attribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["realms"]) -> MetaOapg.properties.realms: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "format_type", "operator_name_type", "operator_name", "org_id", "description", "enable_inject_operator_name_attribute", "realms", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format_type"]) -> 'XiqRadiusProxyFormatType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator_name_type"]) -> MetaOapg.properties.operator_name_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator_name"]) -> MetaOapg.properties.operator_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_inject_operator_name_attribute"]) -> typing.Union[MetaOapg.properties.enable_inject_operator_name_attribute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["realms"]) -> typing.Union[MetaOapg.properties.realms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "format_type", "operator_name_type", "operator_name", "org_id", "description", "enable_inject_operator_name_attribute", "realms", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        operator_name: typing.Union[MetaOapg.properties.operator_name, str, ],
        format_type: 'XiqRadiusProxyFormatType',
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        operator_name_type: typing.Union[MetaOapg.properties.operator_name_type, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        enable_inject_operator_name_attribute: typing.Union[MetaOapg.properties.enable_inject_operator_name_attribute, bool, schemas.Unset] = schemas.unset,
        realms: typing.Union[MetaOapg.properties.realms, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqRadsecProxy':
        return super().__new__(
            cls,
            *_args,
            operator_name=operator_name,
            format_type=format_type,
            update_time=update_time,
            create_time=create_time,
            operator_name_type=operator_name_type,
            name=name,
            id=id,
            org_id=org_id,
            description=description,
            enable_inject_operator_name_attribute=enable_inject_operator_name_attribute,
            realms=realms,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_radius_proxy_format_type import XiqRadiusProxyFormatType
from extremecloudiq.model.xiq_radsec_proxy_realm import XiqRadsecProxyRealm
