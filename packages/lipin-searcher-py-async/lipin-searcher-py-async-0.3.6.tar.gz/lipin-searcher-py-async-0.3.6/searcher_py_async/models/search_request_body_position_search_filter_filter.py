# coding: utf-8

"""
    searcher

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.3.6
    Contact: kaka@cingta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SearchRequestBodyPositionSearchFilterFilter(BaseModel):
    """
    SearchRequestBodyPositionSearchFilterFilter
    """ # noqa: E501
    city: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    province: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    edu_level: Optional[List[Annotated[int, Field(strict=True, ge=0)]]] = None
    work_exp: Optional[List[Annotated[int, Field(strict=True, ge=0)]]] = None
    salary_min: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    salary_max: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    salary_range: Optional[List[Annotated[int, Field(strict=True, ge=0)]]] = None
    cp_type: Optional[List[Annotated[int, Field(strict=True, ge=0)]]] = None
    cp_scale: Optional[List[Annotated[int, Field(strict=True, ge=0)]]] = None
    company: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    pos_type: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    pos_type_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["city", "province", "edu_level", "work_exp", "salary_min", "salary_max", "salary_range", "cp_type", "cp_scale", "company", "pos_type", "pos_type_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRequestBodyPositionSearchFilterFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if pos_type_name (nullable) is None
        # and model_fields_set contains the field
        if self.pos_type_name is None and "pos_type_name" in self.model_fields_set:
            _dict['pos_type_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRequestBodyPositionSearchFilterFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "province": obj.get("province"),
            "edu_level": obj.get("edu_level"),
            "work_exp": obj.get("work_exp"),
            "salary_min": obj.get("salary_min"),
            "salary_max": obj.get("salary_max"),
            "salary_range": obj.get("salary_range"),
            "cp_type": obj.get("cp_type"),
            "cp_scale": obj.get("cp_scale"),
            "company": obj.get("company"),
            "pos_type": obj.get("pos_type"),
            "pos_type_name": obj.get("pos_type_name")
        })
        return _obj


