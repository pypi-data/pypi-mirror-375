# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class UoM(str, Enum):
    """
    UoM
    """

    """
    allowed enum values
    """
    PERCENT = 'PERCENT'
    SIXTY_FOURTHS = 'SIXTY_FOURTHS'
    DEGREES = 'DEGREES'
    RADIANS = 'RADIANS'
    PPM = 'PPM'
    RB_PER_DAY = 'RB_PER_DAY'
    INVERSE_PSI = 'INVERSE_PSI'
    PSI = 'PSI'
    PSIG = 'PSIG'
    PSIA = 'PSIA'
    PSIA_PER_BARREL = 'PSIA_PER_BARREL'
    PSIA_PER_SCF = 'PSIA_PER_SCF'
    PSIA_PER_MSCF = 'PSIA_PER_MSCF'
    PSIA_PER_MMSCF = 'PSIA_PER_MMSCF'
    KPAA = 'KPAA'
    KPAG = 'KPAG'
    BAR = 'BAR'
    BAR_PER_METER = 'BAR_PER_METER'
    BARG = 'BARG'
    BARA = 'BARA'
    BARA_PER_BARREL = 'BARA_PER_BARREL'
    BARA_PER_SCF = 'BARA_PER_SCF'
    BARA_PER_MSCF = 'BARA_PER_MSCF'
    BARA_PER_MMSCF = 'BARA_PER_MMSCF'
    BARA_PER_M3 = 'BARA_PER_M3'
    BARA_PER_E3_M3 = 'BARA_PER_E3M3'
    INVERSE_BAR = 'INVERSE_BAR'
    PSI_PER_FOOT = 'PSI_PER_FOOT'
    PSI_PER_METER = 'PSI_PER_METER'
    STB_PER_DAY = 'STB_PER_DAY'
    STB_PER_DAY_PER_PSIA = 'STB_PER_DAY_PER_PSIA'
    STB_PER_MMSCF = 'STB_PER_MMSCF'
    CUBIC_METER_PER_DAY = 'CUBIC_METER_PER_DAY'
    BBL = 'BBL'
    SCF = 'SCF'
    SCF_PER_DAY = 'SCF_PER_DAY'
    SCF_PER_STB = 'SCF_PER_STB'
    MSCF = 'MSCF'
    MMSCF = 'MMSCF'
    MSCF_PER_DAY = 'MSCF_PER_DAY'
    MSCF_PER_STB = 'MSCF_PER_STB'
    MMSCF_PER_STB = 'MMSCF_PER_STB'
    MMSCF_PER_DAY = 'MMSCF_PER_DAY'
    MSCF_PER_DAY_PER_PSIA = 'MSCF_PER_DAY_PER_PSIA'
    MMSCF_PER_DAY_PER_PSIA = 'MMSCF_PER_DAY_PER_PSIA'
    M3 = 'M3'
    M3_PER_DAY = 'M3_PER_DAY'
    M3_PER_M3 = 'M3_PER_M3'
    M3_PER_E3_M3 = 'M3_PER_E3M3'
    M3_PER_DAY_PER_KPAA = 'M3_PER_DAY_PER_KPAA'
    M3_PER_DAY_PER_BARA = 'M3_PER_DAY_PER_BARA'
    E3M3 = 'E3M3'
    E3_M3_PER_DAY = 'E3M3_PER_DAY'
    E3_M3_PER_M3 = 'E3M3_PER_M3'
    E3_M3_PER_DAY_PER_KPAA = 'E3M3_PER_DAY_PER_KPAA'
    E3_M3_PER_DAY_PER_BARA = 'E3M3_PER_DAY_PER_BARA'
    KPA = 'KPA'
    KPA_PER_METER = 'KPA_PER_METER'
    KPAA_PER_M3 = 'KPAA_PER_M3'
    KPAA_PER_E3_M3 = 'KPAA_PER_E3M3'
    INVERSE_KPA = 'INVERSE_KPA'
    RM3_PER_DAY = 'RM3_PER_DAY'
    FARENHEIT = 'FARENHEIT'
    CELSIUS = 'CELSIUS'
    STB = 'STB'
    FEET = 'FEET'
    INCHES = 'INCHES'
    METERS = 'METERS'
    MILLIMETERS = 'MILLIMETERS'
    KILOMETERS = 'KILOMETERS'
    DARCY = 'DARCY'
    MILLIDARCY_METERS = 'MILLIDARCY_METERS'
    MILLIDARCY_FEET = 'MILLIDARCY_FEET'
    POUNDS_HOUR = 'POUNDS_HOUR'
    GRAMS_PER_SECOND = 'GRAMS_PER_SECOND'
    HP = 'HP'
    HZ = 'HZ'
    AMPS = 'AMPS'
    VOLTS = 'VOLTS'
    SPM = 'SPM'
    RPM = 'RPM'
    HOURS = 'HOURS'
    LBF = 'LBF'
    LBF_FEET = 'LBF_FEET'
    NEWTON_METERS = 'NEWTON_METERS'
    GRAVITATIONAL_CONSTANT = 'GRAVITATIONAL_CONSTANT'
    FEET_PER_SECOND = 'FEET_PER_SECOND'
    METERS_PER_SECOND = 'METERS_PER_SECOND'
    USD_PER_STB = 'USD_PER_STB'
    USD_PER_SCF = 'USD_PER_SCF'
    USD_PER_MSCF = 'USD_PER_MSCF'
    USD_PER_KWH = 'USD_PER_KWH'
    USD_PER_M3 = 'USD_PER_M3'
    USD_PER_E3_M3 = 'USD_PER_E3M3'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UoM from a JSON string"""
        return cls(json.loads(json_str))


