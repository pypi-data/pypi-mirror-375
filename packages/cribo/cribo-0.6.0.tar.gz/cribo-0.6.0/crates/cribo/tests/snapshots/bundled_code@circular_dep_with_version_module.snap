---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/circular_dep_with_version_module/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
package___version__ = _cribo.types.SimpleNamespace(__name__='package.__version__')
package = _cribo.types.SimpleNamespace(__name__='package', __initializing__=False, __initialized__=False)
package.__version__ = package___version__
"""Version information for the package"""
__version__ = "1.0.0"
__title__ = "Test Package"
package___version__.__title__ = __title__
package___version__.__version__ = __version__
package_module_a = _cribo.types.SimpleNamespace(__name__='package.module_a', __initializing__=False, __initialized__=False)
package.module_a = package_module_a
def _cribo_init___cribo_a4c23d_package(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global package_module_a
    """Package with circular dependency and __version__ import"""
    __version__ = package___version__.__version__
    package.__version__ = __version__
    __title__ = package___version__.__title__
    package.__title__ = __title__
    package_module_a = _cribo_init___cribo_cc4906_package_module_a(package_module_a)
    func_a = package_module_a.func_a
    self.func_a = func_a
    self.func_a = func_a

    def package_func():
        return func_a() + " from package"
    self.package_func = package_func
    print(f"Package initialized with version {__version__}")
    self.__version__ = __version__
    self.__title__ = __title__
    self.__initialized__ = True
    self.__initializing__ = False
    return self
package.__init__ = _cribo_init___cribo_a4c23d_package
def _cribo_init___cribo_cc4906_package_module_a(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    """Module A that creates circular dependency"""

    def func_a():
        package_func = package.package_func
        return "func_a"
    self.func_a = func_a

    def another_func():
        return "another"
    self.another_func = another_func
    self.__initialized__ = True
    self.__initializing__ = False
    return self
package_module_a.__init__ = _cribo_init___cribo_cc4906_package_module_a
"""Test case for circular dependency with __version__ module import"""
__cribo_init_result = _cribo_init___cribo_a4c23d_package(package)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(package, attr, getattr(__cribo_init_result, attr))
print(f"Package version: {package.__version__}")
print(f"Package title: {package.__title__}")
print("Success!")
module_a = package.module_a
