"""
üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è django-hlsfield

–°–æ–¥–µ—Ä–∂–∏—Ç utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è upload_to –ø—É—Ç–µ–π
- –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
- –†–∞–±–æ—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Django

–ê–≤—Ç–æ—Ä: akula993
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import hashlib
import os
import re
import uuid
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Union
from unittest.mock import Mock

from django.core.files.base import File
from django.core.files.storage import default_storage
from django.utils.text import slugify


# ==============================================================================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–£–¢–ï–ô –î–õ–Ø UPLOAD_TO
# ==============================================================================


def video_upload_to(instance, filename: str) -> str:
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è upload_to –¥–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤.

    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: videos/{uuid8}/{filename}

    Args:
        instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
        filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    Returns:
        str: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞

    Example:
        video = VideoField(upload_to=video_upload_to)
    """
    stem, ext = os.path.splitext(filename)
    folder = uuid.uuid4().hex[:8]  # 8-—Å–∏–º–≤–æ–ª—å–Ω—ã–π UUID
    clean_filename = slugify(stem)[:50] + ext.lower()  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è
    return f"videos/{folder}/{clean_filename}"


def date_based_upload_to(instance, filename: str) -> str:
    """
    Upload_to –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è.

    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: videos/2025/01/15/{uuid4}/{filename}

    Args:
        instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
        filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    Returns:
        str: –ü—É—Ç—å —Å –¥–∞—Ç–æ–π
    """
    now = datetime.now()
    stem, ext = os.path.splitext(filename)
    folder = uuid.uuid4().hex[:8]
    clean_filename = slugify(stem)[:50] + ext.lower()

    return f"videos/{now.year:04d}/{now.month:02d}/{now.day:02d}/{folder}/{clean_filename}"


def user_based_upload_to(instance, filename: str) -> str:
    """
    Upload_to –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: videos/users/{user_id}/{uuid8}/{filename}

    Args:
        instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ —Å user –∏–ª–∏ owner –ø–æ–ª–µ–º
        filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    Returns:
        str: –ü—É—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    stem, ext = os.path.splitext(filename)
    folder = uuid.uuid4().hex[:8]
    clean_filename = slugify(stem)[:50] + ext.lower()

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
    user_id = "anonymous"

    if hasattr(instance, "user") and instance.user:
        user_id = str(instance.user.id)
    elif hasattr(instance, "owner") and instance.owner:
        user_id = str(instance.owner.id)
    elif hasattr(instance, "created_by") and instance.created_by:
        user_id = str(instance.created_by.id)

    return f"videos/users/{user_id}/{folder}/{clean_filename}"


def content_type_upload_to(instance, filename: str) -> str:
    """
    Upload_to –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: videos/{content_type}/{uuid8}/{filename}
    –ì–¥–µ content_type –º–æ–∂–µ—Ç –±—ã—Ç—å: movies, lessons, ads, etc.

    Args:
        instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
        filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    Returns:
        str: –ü—É—Ç—å —Å —Ç–∏–ø–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    stem, ext = os.path.splitext(filename)
    folder = uuid.uuid4().hex[:8]
    clean_filename = slugify(stem)[:50] + ext.lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –º–æ–¥–µ–ª–∏
    content_type = "general"

    if hasattr(instance, "content_type") and instance.content_type:
        content_type = slugify(instance.content_type)
    elif hasattr(instance, "category") and instance.category:
        content_type = slugify(instance.category)
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
        model_name = instance._meta.model_name.lower()
        content_type = {
            "movie": "movies",
            "lesson": "lessons",
            "tutorial": "tutorials",
            "advertisement": "ads",
            "course": "courses",
        }.get(model_name, "general")

    return f"videos/{content_type}/{folder}/{clean_filename}"


def get_video_upload_path(instance=None, filename: str = None, strategy: str = "uuid") -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ upload –ø—É—Ç–µ–π.

    Args:
        instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        filename: –ò–º—è —Ñ–∞–π–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞–ø–∫–∏)
        strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è ('uuid', 'date', 'user', 'content')

    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å

    Example:
        path = get_video_upload_path(strategy='date')
        video = VideoField(upload_to=lambda i, f: get_video_upload_path(i, f, 'user'))
    """

    strategies = {
        "uuid": video_upload_to,
        "date": date_based_upload_to,
        "user": user_based_upload_to,
        "content": content_type_upload_to,
    }

    if strategy not in strategies:
        strategy = "uuid"

    upload_func = strategies[strategy]
    if instance is None:
        instance = Mock()
        instance._meta = Mock()
        instance._meta.model_name = "default"
    # –ï—Å–ª–∏ filename –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
    if filename is None:
        filename = f"temp_{uuid.uuid4().hex[:8]}.mp4"

    return upload_func(instance, filename)


# ==============================================================================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–´–• –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¢–û–†–û–í
# ==============================================================================


def generate_video_id(length: int = 8) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–∏–¥–µ–æ.

    Args:
        length: –î–ª–∏–Ω–∞ ID (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 —Å–∏–º–≤–æ–ª–æ–≤)

    Returns:
        str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID

    Example:
        video_id = generate_video_id()  # "a1b2c3d4"
    """
    return uuid.uuid4().hex[:length]


def generate_secure_video_id(seed_data: Union[str, bytes] = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π ID –¥–ª—è –≤–∏–¥–µ–æ.

    Args:
        seed_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    Returns:
        str: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π ID
    """
    if seed_data is None:
        seed_data = f"{uuid.uuid4()}{datetime.now().isoformat()}"

    if isinstance(seed_data, str):
        seed_data = seed_data.encode("utf-8")

    return hashlib.sha256(seed_data).hexdigest()[:16]


def generate_content_hash(file_path: Union[str, Path], chunk_size: int = 8192) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        chunk_size: –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è

    Returns:
        str: SHA256 —Ö—ç—à —Ñ–∞–π–ª–∞
    """
    hash_sha256 = hashlib.sha256()

    with open(file_path, "rb") as f:
        while chunk := f.read(chunk_size):
            hash_sha256.update(chunk)

    return hash_sha256.hexdigest()


# ==============================================================================
# –†–ê–ë–û–¢–ê –° –ú–ï–¢–ê–î–ê–ù–ù–´–ú–ò
# ==============================================================================


def extract_filename_metadata(filename: str) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.

    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞

    Returns:
        dict: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

    Example:
        meta = extract_filename_metadata("movie_1920x1080_30fps.mp4")
        # {'width': 1920, 'height': 1080, 'fps': 30, 'title': 'movie'}
    """
    metadata = {"title": "", "width": None, "height": None, "fps": None}

    # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    stem = Path(filename).stem

    # –ò—â–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (1920x1080, 1280x720, etc.)
    import re

    resolution_match = re.search(r"(\d{3,4})x(\d{3,4})", stem)
    if resolution_match:
        metadata["width"] = int(resolution_match.group(1))
        metadata["height"] = int(resolution_match.group(2))
        # –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        stem = re.sub(r"_?\d{3,4}x\d{3,4}_?", "_", stem)

    # –ò—â–µ–º FPS (30fps, 60fps, etc.)
    fps_match = re.search(r"(\d+)fps", stem, re.IGNORECASE)
    if fps_match:
        metadata["fps"] = int(fps_match.group(1))
        stem = re.sub(r"_?\d+fps_?", "_", stem, flags=re.IGNORECASE)

    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    title = re.sub(r"[_\-]+", " ", stem).strip()
    title = re.sub(r"\s+", " ", title)  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    metadata["title"] = title.title() if title else "Untitled"

    return metadata


def combine_video_metadata(*metadata_dicts: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä–µ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.

    Args:
        *metadata_dicts: –°–ª–æ–≤–∞—Ä–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É - –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)

    Returns:
        dict: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    """
    combined = {}

    # –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ø–æ—Ä—è–¥–æ–∫ - –ù–ï reverse, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–µ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    for meta in metadata_dicts:
        combined.update({k: v for k, v in meta.items() if v is not None})

    return combined


def sanitize_metadata(metadata: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û—á–∏—â–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.

    Args:
        metadata: –ò—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

    Returns:
        dict: –û—á–∏—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    """
    sanitized = {}

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    numeric_fields = ["width", "height", "duration", "fps", "bitrate"]
    for field in numeric_fields:
        if field in metadata:
            try:
                value = float(metadata[field])
                if value > 0 and value < 1e6:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
                    sanitized[field] = int(value) if field != "duration" else value
            except (ValueError, TypeError):
                pass

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è
    string_fields = ["title", "codec", "format"]
    for field in string_fields:
        if field in metadata and isinstance(metadata[field], str):
            # –û—á–∏—â–∞–µ–º –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_value = re.sub(r'[<>"\']', "", str(metadata[field]))[:100]
            if clean_value.strip():
                sanitized[field] = clean_value.strip()

    return sanitized


# ==============================================================================
# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï
# ==============================================================================


def format_duration(seconds: Union[int, float]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.

    Args:
        seconds: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    Example:
        format_duration(3661)  # "1:01:01"
        format_duration(125)   # "2:05"
    """
    if not isinstance(seconds, (int, float)) or seconds < 0:
        return "0:00"

    seconds = int(seconds)
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60

    if hours > 0:
        return f"{hours}:{minutes:02d}:{secs:02d}"
    else:
        return f"{minutes}:{secs:02d}"


def format_file_size(bytes_size: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.

    Args:
        bytes_size: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    Example:
        format_file_size(1536000)  # "1.5 MB"
    """
    if bytes_size < 0:
        return "0 B"

    units = ["B", "KB", "MB", "GB", "TB"]
    size = float(bytes_size)
    unit_index = 0

    while size >= 1024 and unit_index < len(units) - 1:
        size /= 1024
        unit_index += 1

    if unit_index == 0:
        return f"{int(size)} {units[unit_index]}"
    else:
        return f"{size:.1f} {units[unit_index]}"


def format_bitrate(bps: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∏—Ç—Ä–µ–π—Ç –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.

    Args:
        bps: –ë–∏—Ç—Ä–µ–π—Ç –≤ –±–∏—Ç–∞—Ö –≤ —Å–µ–∫—É–Ω–¥—É

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç

    Example:
        format_bitrate(2500000)  # "2.5 Mbps"
    """
    if bps < 0:
        return "0 bps"

    if bps >= 1_000_000:
        return f"{bps / 1_000_000:.1f} Mbps"
    elif bps >= 1_000:
        # –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        kbps = bps / 1_000
        return f"{kbps:.1f} Kbps"  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É is_integer()
    else:
        return f"{bps} bps"


def format_video_info(metadata: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤ –∫—Ä–∞—Ç–∫—É—é —Å—Ç—Ä–æ–∫—É.

    Args:
        metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ

    Returns:
        str: –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    Example:
        info = format_video_info(meta)  # "1920√ó1080, 5:23, 2.5 Mbps"
    """
    parts = []

    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if "width" in metadata and "height" in metadata:
        parts.append(f"{metadata['width']}√ó{metadata['height']}")

    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if "duration" in metadata:
        parts.append(format_duration(metadata["duration"]))

    # –ë–∏—Ç—Ä–µ–π—Ç
    if "bitrate" in metadata:
        parts.append(format_bitrate(metadata["bitrate"]))

    # FPS
    if "fps" in metadata:
        parts.append(f"{metadata['fps']} fps")

    return ", ".join(parts) if parts else "No info"


# ==============================================================================
# –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò –ò STORAGE
# ==============================================================================


def ensure_directory_exists(path: Union[str, Path], storage=None) -> bool:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

    Args:
        path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        storage: Django storage (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é default_storage)

    Returns:
        bool: True –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    if storage is None:
        storage = default_storage

    path_str = str(path)

    try:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ storage
        if hasattr(storage, "path"):
            try:
                full_path = Path(storage.path(path_str))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if full_path.exists() and full_path.is_dir():
                    return True
                    
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å
                full_path.mkdir(parents=True, exist_ok=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
                if full_path.exists() and full_path.is_dir():
                    return True
                    
                # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                parent_dir = full_path.parent
                if parent_dir.exists() and parent_dir.is_dir():
                    # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã
                    return True
                    
            except (OSError, NotImplementedError):
                # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ storage.path() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                pass

        # –î–ª—è –æ–±–ª–∞—á–Ω—ã—Ö storage - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è "–ø–∞–ø–∫–∏"
        test_file = f"{path_str.rstrip('/')}/._directory_marker"
        if not storage.exists(test_file):
            from io import BytesIO
            storage.save(test_file, BytesIO(b''))
        
        return True

    except Exception:
        return False


def clean_filename(filename: str, max_length: int = 100) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.

    Args:
        filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

    Returns:
        str: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    stem = Path(filename).stem
    suffix = Path(filename).suffix

    # –û—á–∏—â–∞–µ–º –∏–º—è
    clean_stem = re.sub(r"[^\w\s\-_.]", "", stem)  # –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    clean_stem = re.sub(r"[-\s_]+", "_", clean_stem)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    clean_stem = clean_stem.strip("_.")  # –£–±–∏—Ä–∞–µ–º —Å –∫—Ä–∞–µ–≤

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    max_stem_length = max_length - len(suffix)
    if len(clean_stem) > max_stem_length:
        clean_stem = clean_stem[:max_stem_length].rstrip("_.")

    # –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—É—Å—Ç—ã–º, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
    if not clean_stem:
        clean_stem = f"file_{uuid.uuid4().hex[:8]}"

    return clean_stem + suffix.lower()


def get_file_extension_info(filename: str) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é.

    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞

    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —Ñ–∞–π–ª–∞
    """
    extension = Path(filename).suffix.lower()

    # –ö–∞—Ä—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    extension_map = {
        ".mp4": {
            "type": "video/mp4",
            "container": "MP4",
            "streaming_friendly": True,
            "quality": "high",
            "compression": "good",
        },
        ".mov": {
            "type": "video/quicktime",
            "container": "QuickTime",
            "streaming_friendly": True,
            "quality": "high",
            "compression": "variable",
        },
        ".avi": {
            "type": "video/x-msvideo",
            "container": "AVI",
            "streaming_friendly": False,
            "quality": "variable",
            "compression": "variable",
        },
        ".webm": {
            "type": "video/webm",
            "container": "WebM",
            "streaming_friendly": True,
            "quality": "high",
            "compression": "excellent",
        },
        ".mkv": {
            "type": "video/x-matroska",
            "container": "Matroska",
            "streaming_friendly": False,
            "quality": "high",
            "compression": "variable",
        },
    }

    info = extension_map.get(
        extension,
        {
            "type": "video/unknown",
            "container": "Unknown",
            "streaming_friendly": False,
            "quality": "unknown",
            "compression": "unknown",
        },
    )

    info["extension"] = extension
    return info


# ==============================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° DJANGO
# ==============================================================================


def get_model_video_fields(model_class) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö video –ø–æ–ª–µ–π –≤ –º–æ–¥–µ–ª–∏.

    Args:
        model_class: –ö–ª–∞—Å—Å Django –º–æ–¥–µ–ª–∏

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω video –ø–æ–ª–µ–π
    """
    from .fields import VideoField, HLSVideoField, DASHVideoField, AdaptiveVideoField

    video_field_types = (VideoField, HLSVideoField, DASHVideoField, AdaptiveVideoField)
    video_fields = []

    for field in model_class._meta.fields:
        if isinstance(field, video_field_types):
            video_fields.append(field.name)

    return video_fields


def get_video_field_metadata(instance, field_name: str) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è video –ø–æ–ª—è.

    Args:
        instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
        field_name: –ò–º—è video –ø–æ–ª—è

    Returns:
        dict: –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    """
    field = instance._meta.get_field(field_name)
    video_file = getattr(instance, field_name)

    if not video_file:
        return {}

    metadata = {}

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if hasattr(video_file, "name") and video_file.name:
        metadata["filename"] = Path(video_file.name).name
        metadata["path"] = video_file.name

    # URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    if hasattr(video_file, "url"):
        try:
            metadata["url"] = video_file.url
        except Exception:
            pass

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤
    if hasattr(video_file, "metadata"):
        try:
            file_metadata = video_file.metadata()
            metadata.update(file_metadata)
        except Exception:
            pass

    # HLS/DASH URLs
    if hasattr(video_file, "master_url"):
        try:
            hls_url = video_file.master_url()
            if hls_url:
                metadata["hls_url"] = hls_url
        except Exception:
            pass

    if hasattr(video_file, "dash_url"):
        try:
            dash_url = video_file.dash_url()
            if dash_url:
                metadata["dash_url"] = dash_url
        except Exception:
            pass

    # –ü—Ä–µ–≤—å—é
    if hasattr(video_file, "preview_url"):
        try:
            preview_url = video_file.preview_url()
            if preview_url:
                metadata["preview_url"] = preview_url
        except Exception:
            pass

    return metadata


def create_video_upload_to_function(strategy: str = "uuid", **kwargs):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è upload_to —Ñ—É–Ω–∫—Ü–∏–π.

    Args:
        strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    Returns:
        callable: –§—É–Ω–∫—Ü–∏—è upload_to

    Example:
        upload_func = create_video_upload_to_function('user')
        video = VideoField(upload_to=upload_func)
    """

    def upload_to_function(instance, filename):
        return get_video_upload_path(instance, filename, strategy)

    upload_to_function.strategy = strategy
    upload_to_function.kwargs = kwargs

    return upload_to_function


# ==============================================================================
# –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
# ==============================================================================

__all__ = [
    # Upload_to —Ñ—É–Ω–∫—Ü–∏–∏
    "video_upload_to",
    "date_based_upload_to",
    "user_based_upload_to",
    "content_type_upload_to",
    "get_video_upload_path",
    "create_video_upload_to_function",
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
    "generate_video_id",
    "generate_secure_video_id",
    "generate_content_hash",
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    "extract_filename_metadata",
    "combine_video_metadata",
    "sanitize_metadata",
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    "format_duration",
    "format_file_size",
    "format_bitrate",
    "format_video_info",
    # –§–∞–π–ª—ã
    "ensure_directory_exists",
    "clean_filename",
    "get_file_extension_info",
    # Django –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    "get_model_video_fields",
    "get_video_field_metadata",
]
