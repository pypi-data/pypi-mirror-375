Metadata-Version: 2.3
Name: fidi-common-libraries
Version: 1.3.20
Summary: Bibliotecas compartilhadas entre os projetos da FIDI
License: MIT
Keywords: fidi,aws,utils,database,logger
Author: Vander Loto
Author-email: vander.loto@datametria.io
Requires-Python: >=3.11,<4.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: boto3 (>=1.34.0,<2.0.0)
Requires-Dist: botocore (>=1.34.0,<2.0.0)
Requires-Dist: numpy (>=2.3.1,<3.0.0)
Requires-Dist: opencv-python (>=4.8.0,<5.0.0)
Requires-Dist: oracledb (>=3.2.0,<4.0.0)
Requires-Dist: pandas (>=2.3.1,<3.0.0)
Requires-Dist: pillow (>=10.0.0,<11.0.0)
Requires-Dist: psutil (>=7.0.0,<8.0.0)
Requires-Dist: psycopg2 (>=2.9.10,<3.0.0)
Requires-Dist: pygetwindow (>=0.0.9,<0.0.10)
Requires-Dist: pynput (>=1.8.1,<2.0.0)
Requires-Dist: pyodbc (>=5.2.0,<6.0.0)
Requires-Dist: python-dotenv (>=1.0.0,<2.0.0)
Requires-Dist: pywinauto (>=0.6.8,<0.7.0)
Requires-Dist: pyyaml (>=6.0.2,<7.0.0)
Requires-Dist: sqlalchemy (>=2.0.41,<3.0.0)
Project-URL: Changelog, https://github.com/exolyze/FIDI-common-libraries/releases
Project-URL: Documentation, https://github.com/exolyze/FIDI-common-libraries/README.md
Project-URL: Homepage, https://github.com/exolyze/FIDI-common-libraries
Project-URL: Repository, https://github.com/exolyze/FIDI-common-libraries
Description-Content-Type: text/markdown

# FIDI Common Libraries

<div align="center">

**Bibliotecas compartilhadas para automa√ß√£o e integra√ß√£o nos projetos FIDI**

[![Build Status](https://img.shields.io/badge/build-passing-brightgreen)](https://github.com/exolyze/FIDI-common-libraries)
[![Coverage](https://img.shields.io/badge/coverage-85%25-brightgreen)](https://github.com/exolyze/FIDI-common-libraries)
[![License](https://img.shields.io/badge/license-MIT-blue)](LICENSE)
[![Version](https://img.shields.io/badge/version-1.3.20-blue)](docs/releases/v1.3.20.md)
[![Python](https://img.shields.io/badge/python-3.9%2B-blue)](https://python.org)

[üìñ Documenta√ß√£o](docs/) ‚Ä¢ [üîß Funcionalidades](docs/features/) ‚Ä¢ [üèóÔ∏è Arquitetura](docs/architecture/) ‚Ä¢ [üêõ Issues](https://github.com/exolyze/FIDI-common-libraries/issues)

</div>

---

## üìã √çndice

- [Sobre o Projeto](#-sobre-o-projeto)
- [Funcionalidades](#-funcionalidades)
- [Tecnologias](#-tecnologias)
- [Pr√©-requisitos](#-pr√©-requisitos)
- [Instala√ß√£o](#-instala√ß√£o)
- [Uso](#-uso)
- [Configura√ß√£o](#-configura√ß√£o)
- [Testes](#-testes)
- [Contribui√ß√£o](#-contribui√ß√£o)
- [Roadmap](#-roadmap)
- [Licen√ßa](#-licen√ßa)
- [Contato](#-contato)
- [Agradecimentos](#-agradecimentos)

---

## üéØ Sobre o Projeto

### Vis√£o Geral

O FIDI Common Libraries √© um conjunto abrangente de bibliotecas Python reutiliz√°veis desenvolvidas para padronizar e acelerar o desenvolvimento de solu√ß√µes de automa√ß√£o, integra√ß√£o com AWS e processamento de dados nos projetos da FIDI. O projeto segue rigorosamente as melhores pr√°ticas de desenvolvimento Python, incluindo Poetry para gerenciamento de depend√™ncias, Pywinauto para automa√ß√£o de UI e arquitetura modular para m√°xima reutiliza√ß√£o.

### Objetivos

- **Objetivo Principal**: Fornecer bibliotecas padronizadas e reutiliz√°veis para automa√ß√£o e integra√ß√£o
- **Objetivos Espec√≠ficos**:
  - Padronizar opera√ß√µes de banco de dados multi-SGBD
  - Simplificar integra√ß√µes com servi√ßos AWS
  - Automatizar interfaces gr√°ficas do sistema TOTVS RM
  - Centralizar gerenciamento de configura√ß√µes e par√¢metros

### Benef√≠cios

- ‚úÖ **Reutiliza√ß√£o**: Componentes padronizados reduzem duplica√ß√£o de c√≥digo
- ‚úÖ **Qualidade**: Cobertura de testes superior a 85% garante confiabilidade
- ‚úÖ **Produtividade**: Acelera desenvolvimento com componentes prontos
- ‚úÖ **Manutenibilidade**: Arquitetura modular facilita manuten√ß√£o e evolu√ß√£o

---

## ‚ö° Funcionalidades

### Principais

- üóÑÔ∏è **M√≥dulo Data**: Opera√ß√µes robustas de banco de dados multi-SGBD (Oracle, PostgreSQL, SQL Server)
- ‚òÅÔ∏è **M√≥dulo AWS**: Clientes padronizados para SQS, SNS, Lambda, S3 com configura√ß√£o centralizada
- üñ•Ô∏è **M√≥dulo UI**: Automa√ß√£o completa de interfaces gr√°ficas TOTVS RM com Pywinauto
- ‚öôÔ∏è **M√≥dulo Config**: Gerenciamento inteligente de par√¢metros com cache e convers√£o autom√°tica

### Funcionalidades Avan√ßadas

<details>
<summary>Clique para expandir</summary>

- **Logging Estruturado**: Sistema de logs multi-SGBD com metadados enriquecidos
- **Constantes Padronizadas**: Sistema de status com convers√£o autom√°tica entre tipos
- **Inspetor de UI**: Ferramenta avan√ßada para an√°lise e mapeamento de elementos de interface
- **Navega√ß√£o Adaptativa**: Sistema inteligente de navega√ß√£o em interfaces com retry autom√°tico
- **Execu√ß√£o de Procedures**: Classes especializadas para execu√ß√£o robusta de procedures de banco

</details>

---

## üõ†Ô∏è Tecnologias

### Stack Principal

| Categoria | Tecnologia | Vers√£o | Descri√ß√£o |
|-----------|------------|--------|-----------|
| **Linguagem** | Python | 3.9+ | Linguagem principal do projeto |
| **Gerenciador** | Poetry | 1.4+ | Gerenciamento de depend√™ncias e empacotamento |
| **UI Automation** | Pywinauto | 0.6+ | Automa√ß√£o de interfaces gr√°ficas Windows |
| **AWS SDK** | Boto3 | 1.26+ | Integra√ß√£o com servi√ßos AWS |
| **Database** | Multiple | - | Oracle (oracledb), PostgreSQL (psycopg2), SQL Server (pyodbc) |

### Depend√™ncias Principais

```toml
[tool.poetry.dependencies]
python = "^3.9"
pywinauto = "^0.6.8"
boto3 = "^1.26.0"
oracledb = "^1.4.0"
psycopg2-binary = "^2.9.0"
pyodbc = "^4.0.39"
pyyaml = "^6.0"
requests = "^2.28.0"
```

### Arquitetura

```mermaid
graph TB
    A[Aplica√ß√£o Cliente] --> B[FIDI Common Libraries]
    B --> C[M√≥dulo Data]
    B --> D[M√≥dulo AWS]
    B --> E[M√≥dulo UI]
    B --> F[M√≥dulo Config]
    C --> G[Oracle/PostgreSQL/SQL Server]
    D --> H[SQS/SNS/Lambda/S3]
    E --> I[TOTVS RM]
    F --> J[Banco de Par√¢metros]
```

---

## üìã Pr√©-requisitos

### Requisitos do Sistema

- **Sistema Operacional**: Windows 10/11 (para automa√ß√£o UI)
- **Mem√≥ria RAM**: 4 GB m√≠nimo, 8 GB recomendado
- **Espa√ßo em Disco**: 2 GB dispon√≠vel
- **Rede**: Conex√£o com internet para depend√™ncias e AWS

### Software Necess√°rio

- **Python**: 3.9 ou superior - [Download](https://python.org/downloads/)
- **Poetry**: 1.4 ou superior - [Instala√ß√£o](https://python-poetry.org/docs/#installation)
- **Git**: Para clonagem do reposit√≥rio - [Download](https://git-scm.com/)

### Verifica√ß√£o de Pr√©-requisitos

```bash
# Verificar vers√µes instaladas
python --version
poetry --version
git --version
```

---

## üöÄ Instala√ß√£o

### Instala√ß√£o R√°pida

```bash
# Clone o reposit√≥rio
git clone https://github.com/exolyze/FIDI-common-libraries.git
cd FIDI-common-libraries

# Instale as depend√™ncias
poetry install

# Ative o ambiente virtual
poetry shell
```

### Instala√ß√£o como Depend√™ncia

```bash
# Instalar via Poetry (recomendado)
poetry add git+https://github.com/exolyze/FIDI-common-libraries.git

# Ou via pip
pip install git+https://github.com/exolyze/FIDI-common-libraries.git
```

### Instala√ß√£o Detalhada

<details>
<summary>Clique para ver instru√ß√µes detalhadas</summary>

#### 1. Clone o Reposit√≥rio

```bash
git clone https://github.com/exolyze/FIDI-common-libraries.git
cd FIDI-common-libraries
```

#### 2. Configure o Ambiente

```bash
# Instale o Poetry se n√£o tiver
curl -sSL https://install.python-poetry.org | python3 -

# Configure o Poetry para criar venv no projeto
poetry config virtualenvs.in-project true
```

#### 3. Instale as Depend√™ncias

```bash
# Instale depend√™ncias de produ√ß√£o e desenvolvimento
poetry install

# Apenas depend√™ncias de produ√ß√£o
poetry install --no-dev
```

#### 4. Configure Vari√°veis de Ambiente

```bash
# Copie o arquivo de exemplo
cp .env.example .env

# Edite as configura√ß√µes
nano .env
```

#### 5. Configure Hooks de Desenvolvimento

```bash
# Instale pre-commit hooks
poetry run pre-commit install

# Execute verifica√ß√µes
poetry run pre-commit run --all-files
```

</details>

### Verifica√ß√£o da Instala√ß√£o

```bash
# Teste a importa√ß√£o
poetry run python -c "import fidi_common_libraries; print('Instala√ß√£o OK!')"

# Execute os testes
poetry run pytest
```

---

## üíª Uso

### In√≠cio R√°pido

1. **Instale a biblioteca**: Siga as instru√ß√µes de [instala√ß√£o](#-instala√ß√£o)
2. **Configure vari√°veis**: Defina as vari√°veis de ambiente necess√°rias
3. **Importe m√≥dulos**: Use os m√≥dulos conforme sua necessidade
4. **Explore exemplos**: Veja os casos de uso abaixo

### Guia do Usu√°rio

### M√≥dulo Data - Opera√ß√µes de Banco

```python
from fidi_common_libraries.data.db_data import (
    DatabaseConfig, DatabaseQuery, ProcessosRpaInserter, ProcessosRpaUpdater,
    ProcedureExecutor, ProcedureHelpers
)
from datetime import datetime

# Configura√ß√£o do banco
db_config = DatabaseConfig.from_env('RPA_')  # Usa vari√°veis RPA_DB_SERVER, etc.

# Inserir registro
inserter = ProcessosRpaInserter(db_config)
registro_id = inserter.insert(
    ambiente="PRD",
    produto="FIDI-ferias",
    versao="1.0.0",
    chapa="123456",
    statusexecucao="NOVO"
)

# Consulta segura
query = DatabaseQuery(db_config)
results = query.execute_query(
    "SELECT * FROM processosrpa WHERE statusexecucao = :status",
    {"status": "NOVO"}
)

# Execu√ß√£o de procedures
executor = ProcedureExecutor(db_config)

# Procedure sem retorno
success = executor.execute_procedure_no_result("sp_update_status", ["ATIVO", 123])

# Procedure que retorna valor √∫nico
next_id = executor.execute_procedure_single_value("sp_get_next_id", ["processosrpa"])

# Procedure que retorna boolean
is_valid = executor.execute_procedure_boolean_result("sp_validate_record", [123])

# Procedure que retorna m√∫ltiplas linhas
reports = executor.execute_procedure_multiple_rows("sp_get_daily_reports", ["2024-01-01"])

# Helpers para procedures comuns
helpers = ProcedureHelpers(db_config)
cleanup_count = helpers.cleanup_old_data("temp_table", 30)
system_status = helpers.get_system_status()
```

### M√≥dulo Config - Gerenciamento de Par√¢metros

```python
from fidi_common_libraries.config.parametros import Parametros

# Inicializar o gerenciador de par√¢metros
params = Parametros(ambiente="HML", produto="FIDI-ferias")

# Obter um par√¢metro
url_api = params.get_parametro("URL_API", default="https://api.exemplo.com")

# Obter par√¢metros por grupo
config_email = params.get_parametros_por_grupo("Email")

# Obter par√¢metros por categorias espec√≠ficas
config_ti = params.get_parametros_por_grupo("TI")  # Configura√ß√µes t√©cnicas
config_negocio = params.get_parametros_por_grupo("Negocio")  # Configura√ß√µes de neg√≥cio
config_produto = params.get_parametros_por_grupo("Produto")  # Configura√ß√µes do produto

# Atualizar um par√¢metro
params.atualizar_parametro("TIMEOUT_API", 30)
```

### M√≥dulo Utils - Logging e Status

```python
from fidi_common_libraries.utils.logger import registrar_log_banco
from fidi_common_libraries.constants.status import HubStatus, DBStatus, LogStatus, convert_status
import pyodbc

# Conex√£o com banco
conn = pyodbc.connect(connection_string)

# Registrar log (detecta automaticamente o tipo de banco)
registrar_log_banco(
    conn=conn,
    ambiente="PRD",
    produto="FIDI-ferias",
    versao="1.0.0",
    nivel="INFO",
    modulo="main",
    processo="processamento",
    acao="inicio",
    lote="LOTE001",
    mensagem="Processo iniciado",
    usuario="sistema",
    status_execucao=LogStatus.SUCESSO,
    hostname="server01",
    ip_origem="192.168.1.100"
)

# Usar constantes de status
status_db = DBStatus.NOVO
status_log = convert_status(status_db, 'db', 'log')
```

### M√≥dulo AWS - Clientes Padronizados

```python
from fidi_common_libraries.aws.common_aws import AWSClientFactory, AWSConfig, create_message_with_metadata

# Configura√ß√£o AWS
config = AWSConfig.from_env()  # Usa vari√°veis AWS_REGION, AWS_ACCESS_KEY_ID, etc.
factory = AWSClientFactory(config)

# Cliente SQS
sqs = factory.get_sqs_client()
message_id = sqs.send_message(
    queue_url="https://sqs.sa-east-1.amazonaws.com/123456789/my-queue",
    message={"data": "test"},
    message_attributes={"Type": {"StringValue": "ProcessData", "DataType": "String"}}
)
```

### M√≥dulo UI - Automa√ß√£o de Interfaces Gr√°ficas

```python
from fidi_common_libraries.ui import RMApplication, ElementFinder, UIInteractions, UIWaits, LocatorService

# Conectar ou iniciar aplica√ß√£o RM
app = RMApplication()
app.connect_or_start()  # Conecta se existir ou inicia nova inst√¢ncia

# Aguardar aplica√ß√£o ficar pronta
app.wait_for_application_ready(timeout=60)

# Obter janela principal ou TOTVS
main_window = app.get_main_window()
totvs_window = app.get_totvs_window()

# Navega√ß√£o autom√°tica no sistema RM
from fidi_common_libraries.ui import RMNavigator, LocatorMode
navigator = RMNavigator(app.app, main_window)
success, button_text = navigator.navigate_to_element(
    {"title": "Encargos", "control_type": "TabItem"},
    {"title": "Contabiliza√ß√£o", "control_type": "Pane"},
    {"title": "Gera√ß√£o dos Encargos", "control_type": "Button"}
)

# Login automatizado no sistema RM
from fidi_common_libraries.ui import RMStartLogin, LocatorService
locator_service = LocatorService("locators.yaml")
login_manager = RMStartLogin(locator_service)
success, rm_app = login_manager.start_and_login("HML", "FIDI-ferias")

# Sele√ß√£o de ambiente no login
from fidi_common_libraries.ui import RMLoginEnvSelector
env_selector = RMLoginEnvSelector(login_window, locator_service)
success, alias = env_selector.select_environment("HML", "FIDI-ferias")

# Conex√£o dupla (win32 + uia) para an√°lise
from fidi_common_libraries.ui import RMDualConnect
connector = RMDualConnect(output_dir="locators_output")
success, info = connector.connect_dual()

# Monitoramento de progresso de processos RM
from fidi_common_libraries.ui import RMProgressMonitor
monitor = RMProgressMonitor(parent_element, "timer_auto_id")
result = monitor.monitor_until_stable(max_timeout=300)

# Navega√ß√£o adaptativa com retry autom√°tico
from fidi_common_libraries.ui import RMAdaptNavigator
navigator = RMAdaptNavigator(parent_element)
element = navigator.navigate_to_element(title="Salvar", control_type="Button")

# Fechamento de janelas e aplica√ß√£o RM
from fidi_common_libraries.ui import RMClose
closer = RMClose(main_window)

# Fechar janela atual
success = closer.close_window()

# Fechar aplica√ß√£o completa
success = closer.close_application()

# Navega√ß√£o e sele√ß√£o da Planilha Net
from fidi_common_libraries.ui import RMPlanilhaNet

# Op√ß√£o 1: Processo completo autom√°tico (recomendado)
planilha_net = RMPlanilhaNet(main_window, app, "PLAN001")  # Executa automaticamente

# Op√ß√£o 2: Execu√ß√£o manual passo a passo
planilha_net = RMPlanilhaNet(main_window)
success = planilha_net.navigate_filters(app, timeout=60)
success = planilha_net.select_planilha("PLAN001")

# Op√ß√£o 3: Processo completo via m√©todo
planilha_net = RMPlanilhaNet(main_window)
success = planilha_net.execute_full_process(app, "PLAN001")

# Usar servi√ßo de locators para elementos
locator_service = LocatorService("locators.yaml", mode=LocatorMode.PYWINAUTO)
login_criteria = locator_service.get_non_null_attributes("login_button")

# Encontrar elemento com crit√©rios robustos
finder = ElementFinder()
button = finder.find_element(
    parent=main_window,
    primary_criteria=login_criteria,
    fallback_criteria=[{"auto_id": "btnSave"}]
)

# Interagir com elementos de forma segura
interactions = UIInteractions()
interactions.safe_click(button)

# Aguardar elementos ou condi√ß√µes
waits = UIWaits()
waits.wait_for_element_ready(button, timeout=10)

# Inspe√ß√£o de elementos UI (ferramenta de desenvolvimento)
from fidi_common_libraries.ui.utils.inspector import UIElementInspectorAdvanced
inspector = UIElementInspectorAdvanced()
inspector.connect_to_application(window_title="TOTVS")
inspector.start_assisted_navigation()  # Navega√ß√£o assistida com overlay visual

# Fechar aplica√ß√£o quando terminar
app.close_application()  # Fecha apenas se foi iniciada por n√≥s

# Configura√ß√£o AWS
config = AWSConfig.from_env()  # Usa vari√°veis AWS_REGION, AWS_ACCESS_KEY_ID, etc.
factory = AWSClientFactory(config)

# Cliente SQS
sqs = factory.get_sqs_client()
message_id = sqs.send_message(
    queue_url="https://sqs.sa-east-1.amazonaws.com/123456789/my-queue",
    message={"data": "test"},
    message_attributes={"Type": {"StringValue": "ProcessData", "DataType": "String"}}
)

# Cliente SNS
sns = factory.get_sns_client()
sns.publish_message(
    topic_arn="arn:aws:sns:sa-east-1:123456789:my-topic",
    message=create_message_with_metadata({"event": "process_completed"}),
    subject="Processo Finalizado"
)

# Cliente Lambda
lambda_client = factory.get_lambda_client()
result = lambda_client.invoke_function(
    function_name="my-function",
    payload={"action": "process", "data": "test"}
)

# Cliente S3
s3 = factory.get_s3_client()
s3.upload_file("/path/to/file.txt", "my-bucket", "uploads/file.txt")
```

---

## ‚öôÔ∏è Configura√ß√£o

### Vari√°veis de Ambiente

```bash
# Configura√ß√µes de banco de dados
RPA_DB_SERVER=servidor-banco
RPA_DB_DATABASE=nome-banco
RPA_DB_USERNAME=usuario
RPA_DB_PASSWORD=senha
RPA_DB_DRIVER=ODBC Driver 17 for SQL Server

# Configura√ß√µes AWS
AWS_REGION=sa-east-1
AWS_ACCESS_KEY_ID=sua-access-key
AWS_SECRET_ACCESS_KEY=sua-secret-key

# Configura√ß√µes de aplica√ß√£o
APP_ENVIRONMENT=PRD
APP_PRODUTO=FIDI-comum
APP_VERSAO=1.3.13

# Configura√ß√µes de UI
UI_TIMEOUT_DEFAULT=30
UI_SCREENSHOT_ON_ERROR=true
UI_LOG_LEVEL=INFO
```

### Arquivo de Configura√ß√£o

```yaml
# config/ui_config.yaml
ui:
  timeouts:
    default: 30
    long: 60
    short: 10
  
  screenshots:
    enabled: true
    path: "screenshots/"
    format: "png"
  
  locators:
    mode: "pywinauto"
    file: "locators.yaml"
```

---

## üß™ Testes

### Executar Testes

```bash
# Todos os testes
poetry run pytest

# Testes unit√°rios
poetry run pytest tests/unit/

# Testes de integra√ß√£o
poetry run pytest tests/integration/

# Testes e2e
poetry run pytest tests/e2e/

# Cobertura de testes
poetry run pytest --cov=src --cov-report=html
```

### Estrutura de Testes

```
tests/
‚îú‚îÄ‚îÄ unit/           # Testes unit√°rios
‚îÇ   ‚îú‚îÄ‚îÄ test_data/
‚îÇ   ‚îú‚îÄ‚îÄ test_aws/
‚îÇ   ‚îú‚îÄ‚îÄ test_ui/
‚îÇ   ‚îî‚îÄ‚îÄ test_config/
‚îú‚îÄ‚îÄ integration/    # Testes de integra√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ test_database/
‚îÇ   ‚îú‚îÄ‚îÄ test_aws_services/
‚îÇ   ‚îî‚îÄ‚îÄ test_ui_automation/
‚îú‚îÄ‚îÄ e2e/           # Testes end-to-end
‚îÇ   ‚îî‚îÄ‚îÄ test_full_workflows/
‚îú‚îÄ‚îÄ fixtures/      # Dados de teste
‚îî‚îÄ‚îÄ conftest.py    # Configura√ß√µes pytest
```

### M√©tricas de Qualidade

- **Cobertura de Testes**: ![Coverage](https://img.shields.io/badge/coverage-85%25-brightgreen)
- **Qualidade do C√≥digo**: ![Quality](https://img.shields.io/badge/quality-A-green)
- **Vulnerabilidades**: ![Security](https://img.shields.io/badge/vulnerabilities-0-green)

---

## ü§ù Contribui√ß√£o

Contribui√ß√µes s√£o sempre bem-vindas! Veja como voc√™ pode ajudar:

### Como Contribuir

1. **Fork** o projeto
2. **Crie** uma branch para sua feature (`git checkout -b feature/AmazingFeature`)
3. **Commit** suas mudan√ßas (`git commit -m 'Add some AmazingFeature'`)
4. **Push** para a branch (`git push origin feature/AmazingFeature`)
5. **Abra** um Pull Request

### Diretrizes

- Siga as diretrizes estabelecidas em `.amazonq/rules/`
- Mantenha a cobertura de testes acima de 85%
- Execute os pre-commit hooks antes de fazer commit
- Atualize a documenta√ß√£o conforme necess√°rio
- Use mensagens de commit descritivas

### Tipos de Contribui√ß√£o

- üêõ **Bug Reports**: Reporte bugs usando [GitHub Issues](https://github.com/exolyze/FIDI-common-libraries/issues)
- üí° **Feature Requests**: Sugira novas funcionalidades
- üìñ **Documenta√ß√£o**: Melhore a documenta√ß√£o
- üß™ **Testes**: Adicione ou melhore testes
- üé® **Refatora√ß√£o**: Melhore a qualidade do c√≥digo

### Qualidade de C√≥digo

```bash
# Formata√ß√£o autom√°tica
poetry run black src/ tests/

# Linting
poetry run flake8 src/ tests/

# Verifica√ß√£o de tipos
poetry run mypy src/

# An√°lise de seguran√ßa
poetry run bandit -r src/
```

---

## üó∫Ô∏è Roadmap

### Vers√£o Atual: 1.3.20

- ‚úÖ M√≥dulo Data com suporte multi-SGBD
- ‚úÖ M√≥dulo AWS com clientes padronizados
- ‚úÖ M√≥dulo UI com automa√ß√£o TOTVS RM completa
- ‚úÖ Sistema de configura√ß√£o e par√¢metros
- ‚úÖ Documenta√ß√£o padronizada com templates
- ‚úÖ RM Single Connect para conex√µes robustas

### Pr√≥ximas Vers√µes

#### v1.4.0 - Q2 2024
- üîÑ Suporte a MongoDB no m√≥dulo Data
- üîÑ Integra√ß√£o com Azure Services
- üìã M√≥dulo de relat√≥rios automatizados
- üìã Dashboard de monitoramento

#### v1.5.0 - Q3 2024
- üìã Suporte a automa√ß√£o web (Selenium)
- üìã Integra√ß√£o com APIs REST gen√©ricas
- üí° Sistema de cache distribu√≠do
- üí° M√©tricas e observabilidade

### Backlog

- üí° Suporte a containers Docker
- üí° Integra√ß√£o com Kubernetes
- üî¨ Machine Learning para automa√ß√£o inteligente
- üî¨ An√°lise preditiva de falhas

Veja o [Product Backlog](docs/product/product-backlog.md) para mais detalhes.

---

## üìä Status do Projeto

### M√©tricas

| M√©trica | Valor |
|---------|-------|
| **Linhas de C√≥digo** | ~15.000 |
| **M√≥dulos** | 5 principais |
| **Classes** | 25+ |
| **Cobertura de Testes** | 85%+ |
| **Vers√£o Atual** | 1.3.20 |

### Atividade Recente

- üìÖ **√öltimo Release**: 08/09/2025 - v1.3.20
- üîÑ **√öltimo Commit**: 08/09/2025
- üêõ **Issues Resolvidas**: 2 esta semana
- üöÄ **Features Adicionadas**: 0 este m√™s

---

## üìÑ Licen√ßa

Este projeto est√° licenciado sob a Licen√ßa MIT - veja o arquivo [LICENSE](LICENSE) para detalhes.

### Resumo da Licen√ßa

- ‚úÖ **Uso Comercial**: Permitido
- ‚úÖ **Modifica√ß√£o**: Permitida
- ‚úÖ **Distribui√ß√£o**: Permitida
- ‚úÖ **Uso Privado**: Permitido
- ‚ùå **Responsabilidade**: N√£o assumida
- ‚ùå **Garantia**: N√£o fornecida

---

## üìû Contato

### Equipe de Desenvolvimento

- **Tech Lead & Maintainer**: Vander Loto - [vander.loto@datametria.io]
- **Development Team**: DATAMETRIA Engineering - [dev@datametria.io]
- **Product Owner**: DATAMETRIA - [produto@datametria.io]

### Canais de Suporte

- üìß **Email**: [vander.loto@datametria.io]
- üêõ **Issues**: [GitHub Issues](https://github.com/exolyze/FIDI-common-libraries/issues)
- üìñ **Documenta√ß√£o**: [docs/](docs/)

### Links do Projeto

- üè† **Homepage**: [https://datametria.io]
- üìñ **Documenta√ß√£o**: [docs/](docs/)
- üêõ **Issues**: [GitHub Issues](https://github.com/exolyze/FIDI-common-libraries/issues)
- üöÄ **Releases**: [GitHub Releases](https://github.com/exolyze/FIDI-common-libraries/releases)

---

## üôè Agradecimentos

### Contribuidores

Obrigado a todas as pessoas que contribu√≠ram para este projeto:

- DATAMETRIA Engineering
- DATAMETRIA Engineering
- Usu√°rios que reportaram bugs e sugeriram melhorias

### Inspira√ß√µes e Refer√™ncias

- **Pywinauto**: Biblioteca fundamental para automa√ß√£o de UI Windows
- **Poetry**: Gerenciador moderno de depend√™ncias Python
- **AWS SDK**: Integra√ß√£o robusta com servi√ßos AWS
- **TOTVS RM**: Sistema ERP que motivou o desenvolvimento do m√≥dulo UI

### Tecnologias e Bibliotecas

Agradecemos √†s comunidades open source das tecnologias utilizadas:

- [Python](https://python.org) - Linguagem de programa√ß√£o
- [Poetry](https://python-poetry.org) - Gerenciamento de depend√™ncias
- [Pywinauto](https://pywinauto.readthedocs.io) - Automa√ß√£o de UI
- [Boto3](https://boto3.amazonaws.com) - AWS SDK para Python
- [Pytest](https://pytest.org) - Framework de testes

---

<div align="center">

**Feito com ‚ù§Ô∏è pela equipe DATAMETRIA**

‚≠ê **Se este projeto te ajudou, considere dar uma estrela!** ‚≠ê

### üìö Documenta√ß√£o Completa

| Categoria | Documentos |
|-----------|------------|
| **Guias Principais** | [INSTALL.md](INSTALL.md) ‚Ä¢ [CHANGELOG.md](CHANGELOG.md) ‚Ä¢ [STATUS_ATUAL.md](STATUS_ATUAL.md) |
| **Release Notes** | [√çndice de Releases](docs/releases/README.md) ‚Ä¢ [√öltima Release](docs/releases/v1.3.20.md) |
| **Deployment** | [Deployment Guide](docs/deployment/deployment-guide.md) |
| **Funcionalidades** | [Data Module](docs/features/data-module-guide.md) ‚Ä¢ [UI Module](docs/features/ui-module-guide.md) ‚Ä¢ [RM Automation](docs/features/rm-automation-guide.md) |
| **Navega√ß√£o RM** | [RM Navigator](docs/features/rm-navigator-guide.md) ‚Ä¢ [RM Adapt Navigator](docs/features/rm-adapt-navigator-guide.md) ‚Ä¢ [RM Single Connect](docs/features/rm-single-connect-guide.md) |
| **Utilit√°rios** | [UI Inspector](docs/features/ui-inspector-guide.md) ‚Ä¢ [Locator Service](docs/features/locator-service-guide.md) ‚Ä¢ [Logging Framework](docs/features/logging-framework-guide.md) |
| **Refer√™ncias** | [Class References](docs/class-references/) ‚Ä¢ [Technical Specs](docs/technical-specifications/) |
| **Arquitetura** | [ADR-0001](docs/architecture/adr-0001-use-pywinauto-for-ui-automation.md) |
| **Produto** | [Product Backlog](docs/product/product-backlog.md) |

</div>
