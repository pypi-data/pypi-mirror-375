# coding: utf-8

"""
    Selling Partner API for Finances

    The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class RemovalShipmentItemAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'removal_shipment_item_id': 'str',
        'tax_collection_model': 'str',
        'fulfillment_network_sku': 'str',
        'adjusted_quantity': 'int',
        'revenue_adjustment': 'Currency',
        'tax_amount_adjustment': 'Currency',
        'tax_withheld_adjustment': 'Currency',
    }

    attribute_map = {
        'removal_shipment_item_id': 'RemovalShipmentItemId',
        'tax_collection_model': 'TaxCollectionModel',
        'fulfillment_network_sku': 'FulfillmentNetworkSKU',
        'adjusted_quantity': 'AdjustedQuantity',
        'revenue_adjustment': 'RevenueAdjustment',
        'tax_amount_adjustment': 'TaxAmountAdjustment',
        'tax_withheld_adjustment': 'TaxWithheldAdjustment',
    }

    def __init__(self, removal_shipment_item_id=None, tax_collection_model=None, fulfillment_network_sku=None, adjusted_quantity=None, revenue_adjustment=None, tax_amount_adjustment=None, tax_withheld_adjustment=None, _configuration=None):  # noqa: E501
        """RemovalShipmentItemAdjustment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._removal_shipment_item_id = None
        self._tax_collection_model = None
        self._fulfillment_network_sku = None
        self._adjusted_quantity = None
        self._revenue_adjustment = None
        self._tax_amount_adjustment = None
        self._tax_withheld_adjustment = None
        self.discriminator = None

        if removal_shipment_item_id is not None:
            self.removal_shipment_item_id = removal_shipment_item_id
        if tax_collection_model is not None:
            self.tax_collection_model = tax_collection_model
        if fulfillment_network_sku is not None:
            self.fulfillment_network_sku = fulfillment_network_sku
        if adjusted_quantity is not None:
            self.adjusted_quantity = adjusted_quantity
        if revenue_adjustment is not None:
            self.revenue_adjustment = revenue_adjustment
        if tax_amount_adjustment is not None:
            self.tax_amount_adjustment = tax_amount_adjustment
        if tax_withheld_adjustment is not None:
            self.tax_withheld_adjustment = tax_withheld_adjustment

    @property
    def removal_shipment_item_id(self):
        """Gets the removal_shipment_item_id of this RemovalShipmentItemAdjustment.  # noqa: E501

        An identifier for an item in a removal shipment.  # noqa: E501

        :return: The removal_shipment_item_id of this RemovalShipmentItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._removal_shipment_item_id

    @removal_shipment_item_id.setter
    def removal_shipment_item_id(self, removal_shipment_item_id):
        """Sets the removal_shipment_item_id of this RemovalShipmentItemAdjustment.

        An identifier for an item in a removal shipment.  # noqa: E501

        :param removal_shipment_item_id: The removal_shipment_item_id of this RemovalShipmentItemAdjustment.  # noqa: E501
        :type: str
        """

        self._removal_shipment_item_id = removal_shipment_item_id

    @property
    def tax_collection_model(self):
        """Gets the tax_collection_model of this RemovalShipmentItemAdjustment.  # noqa: E501

        The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.  # noqa: E501

        :return: The tax_collection_model of this RemovalShipmentItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._tax_collection_model

    @tax_collection_model.setter
    def tax_collection_model(self, tax_collection_model):
        """Sets the tax_collection_model of this RemovalShipmentItemAdjustment.

        The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.  # noqa: E501

        :param tax_collection_model: The tax_collection_model of this RemovalShipmentItemAdjustment.  # noqa: E501
        :type: str
        """

        self._tax_collection_model = tax_collection_model

    @property
    def fulfillment_network_sku(self):
        """Gets the fulfillment_network_sku of this RemovalShipmentItemAdjustment.  # noqa: E501

        The Amazon fulfillment network SKU for the item.  # noqa: E501

        :return: The fulfillment_network_sku of this RemovalShipmentItemAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_network_sku

    @fulfillment_network_sku.setter
    def fulfillment_network_sku(self, fulfillment_network_sku):
        """Sets the fulfillment_network_sku of this RemovalShipmentItemAdjustment.

        The Amazon fulfillment network SKU for the item.  # noqa: E501

        :param fulfillment_network_sku: The fulfillment_network_sku of this RemovalShipmentItemAdjustment.  # noqa: E501
        :type: str
        """

        self._fulfillment_network_sku = fulfillment_network_sku

    @property
    def adjusted_quantity(self):
        """Gets the adjusted_quantity of this RemovalShipmentItemAdjustment.  # noqa: E501

        Adjusted quantity of removal shipmentItemAdjustment items.  # noqa: E501

        :return: The adjusted_quantity of this RemovalShipmentItemAdjustment.  # noqa: E501
        :rtype: int
        """
        return self._adjusted_quantity

    @adjusted_quantity.setter
    def adjusted_quantity(self, adjusted_quantity):
        """Sets the adjusted_quantity of this RemovalShipmentItemAdjustment.

        Adjusted quantity of removal shipmentItemAdjustment items.  # noqa: E501

        :param adjusted_quantity: The adjusted_quantity of this RemovalShipmentItemAdjustment.  # noqa: E501
        :type: int
        """

        self._adjusted_quantity = adjusted_quantity

    @property
    def revenue_adjustment(self):
        """Gets the revenue_adjustment of this RemovalShipmentItemAdjustment.  # noqa: E501


        :return: The revenue_adjustment of this RemovalShipmentItemAdjustment.  # noqa: E501
        :rtype: Currency
        """
        return self._revenue_adjustment

    @revenue_adjustment.setter
    def revenue_adjustment(self, revenue_adjustment):
        """Sets the revenue_adjustment of this RemovalShipmentItemAdjustment.


        :param revenue_adjustment: The revenue_adjustment of this RemovalShipmentItemAdjustment.  # noqa: E501
        :type: Currency
        """

        self._revenue_adjustment = revenue_adjustment

    @property
    def tax_amount_adjustment(self):
        """Gets the tax_amount_adjustment of this RemovalShipmentItemAdjustment.  # noqa: E501


        :return: The tax_amount_adjustment of this RemovalShipmentItemAdjustment.  # noqa: E501
        :rtype: Currency
        """
        return self._tax_amount_adjustment

    @tax_amount_adjustment.setter
    def tax_amount_adjustment(self, tax_amount_adjustment):
        """Sets the tax_amount_adjustment of this RemovalShipmentItemAdjustment.


        :param tax_amount_adjustment: The tax_amount_adjustment of this RemovalShipmentItemAdjustment.  # noqa: E501
        :type: Currency
        """

        self._tax_amount_adjustment = tax_amount_adjustment

    @property
    def tax_withheld_adjustment(self):
        """Gets the tax_withheld_adjustment of this RemovalShipmentItemAdjustment.  # noqa: E501


        :return: The tax_withheld_adjustment of this RemovalShipmentItemAdjustment.  # noqa: E501
        :rtype: Currency
        """
        return self._tax_withheld_adjustment

    @tax_withheld_adjustment.setter
    def tax_withheld_adjustment(self, tax_withheld_adjustment):
        """Sets the tax_withheld_adjustment of this RemovalShipmentItemAdjustment.


        :param tax_withheld_adjustment: The tax_withheld_adjustment of this RemovalShipmentItemAdjustment.  # noqa: E501
        :type: Currency
        """

        self._tax_withheld_adjustment = tax_withheld_adjustment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemovalShipmentItemAdjustment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemovalShipmentItemAdjustment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RemovalShipmentItemAdjustment):
            return True

        return self.to_dict() != other.to_dict()
