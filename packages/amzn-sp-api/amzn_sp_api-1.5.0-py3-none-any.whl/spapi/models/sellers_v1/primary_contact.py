# coding: utf-8

"""
    The Selling Partner API for Sellers

    The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PrimaryContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'address': 'Address',
        'non_latin_name': 'str',
    }

    attribute_map = {
        'name': 'name',
        'address': 'address',
        'non_latin_name': 'nonLatinName',
    }

    def __init__(self, name=None, address=None, non_latin_name=None, _configuration=None):  # noqa: E501
        """PrimaryContact - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._address = None
        self._non_latin_name = None
        self.discriminator = None

        self.name = name
        self.address = address
        if non_latin_name is not None:
            self.non_latin_name = non_latin_name

    @property
    def name(self):
        """Gets the name of this PrimaryContact.  # noqa: E501

        The full name of the seller's primary contact.  # noqa: E501

        :return: The name of this PrimaryContact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrimaryContact.

        The full name of the seller's primary contact.  # noqa: E501

        :param name: The name of this PrimaryContact.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def address(self):
        """Gets the address of this PrimaryContact.  # noqa: E501


        :return: The address of this PrimaryContact.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PrimaryContact.


        :param address: The address of this PrimaryContact.  # noqa: E501
        :type: Address
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def non_latin_name(self):
        """Gets the non_latin_name of this PrimaryContact.  # noqa: E501

        The non-Latin script version of the primary contact's name, if applicable.  # noqa: E501

        :return: The non_latin_name of this PrimaryContact.  # noqa: E501
        :rtype: str
        """
        return self._non_latin_name

    @non_latin_name.setter
    def non_latin_name(self, non_latin_name):
        """Sets the non_latin_name of this PrimaryContact.

        The non-Latin script version of the primary contact's name, if applicable.  # noqa: E501

        :param non_latin_name: The non_latin_name of this PrimaryContact.  # noqa: E501
        :type: str
        """

        self._non_latin_name = non_latin_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrimaryContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrimaryContact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrimaryContact):
            return True

        return self.to_dict() != other.to_dict()
