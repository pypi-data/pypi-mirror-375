[project]
name = "whatsapp-sdk"
version = "0.2.0"
description = "A comprehensive synchronous Python SDK for WhatsApp Business Cloud API following Meta's official documentation"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Alejandro Velez", email = "alejandro-243@hotmail.com" }
]
maintainers = [
    { name = "Alejandro Velez", email = "alejandro-243@hotmail.com" }
]
requires-python = ">=3.8"
keywords = ["whatsapp", "whatsapp-business", "sdk", "api", "meta", "cloud-api", "messaging", "chatbot", "business-messaging"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Typing :: Typed",
    "Natural Language :: English",
    "Natural Language :: Spanish",
]
dependencies = [
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "cryptography>=41.0.0",
    "python-dotenv>=1.0.0",
    "typing-extensions>=4.8.0; python_version < '3.10'",
]

[project.optional-dependencies]
fastapi = [
    "fastapi>=0.100.0",
    "python-multipart>=0.0.6",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/alejandrovelez243/whatsapp-sdk"
Documentation = "https://whatsapp-sdk.readthedocs.io"
Repository = "https://github.com/alejandrovelez243/whatsapp-sdk"
"Bug Tracker" = "https://github.com/alejandrovelez243/whatsapp-sdk/issues"
"Changelog" = "https://github.com/alejandrovelez243/whatsapp-sdk/blob/main/CHANGELOG.md"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 100
target-version = "py38"
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "C90",  # mccabe complexity
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected (needed for tests)
    "ARG002", # unused method argument (needed for overrides)
    "PLW0603", # global statement usage
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["whatsapp_sdk"]
combine-as-imports = true
force-wrap-aliases = true

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'

[tool.mypy]
python_version = "3.9"
strict = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=whatsapp_sdk",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/whatsapp_sdk"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
