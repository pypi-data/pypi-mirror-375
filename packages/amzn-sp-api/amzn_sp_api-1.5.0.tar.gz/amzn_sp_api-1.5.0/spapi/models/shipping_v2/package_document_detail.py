# coding: utf-8

"""
    Amazon Shipping API

    The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.

    The version of the OpenAPI document: v2
    Contact: swa-api-core@amazon.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class PackageDocumentDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_client_reference_id': 'str',
        'package_documents': 'List[PackageDocument]',
        'tracking_id': 'str',
    }

    attribute_map = {
        'package_client_reference_id': 'packageClientReferenceId',
        'package_documents': 'packageDocuments',
        'tracking_id': 'trackingId',
    }

    def __init__(self, package_client_reference_id=None, package_documents=None, tracking_id=None, _configuration=None):  # noqa: E501
        """PackageDocumentDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._package_client_reference_id = None
        self._package_documents = None
        self._tracking_id = None
        self.discriminator = None

        self.package_client_reference_id = package_client_reference_id
        self.package_documents = package_documents
        if tracking_id is not None:
            self.tracking_id = tracking_id

    @property
    def package_client_reference_id(self):
        """Gets the package_client_reference_id of this PackageDocumentDetail.  # noqa: E501

        A client provided unique identifier for a package being shipped. This value should be saved by the client to pass as a parameter to the getShipmentDocuments operation.  # noqa: E501

        :return: The package_client_reference_id of this PackageDocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._package_client_reference_id

    @package_client_reference_id.setter
    def package_client_reference_id(self, package_client_reference_id):
        """Sets the package_client_reference_id of this PackageDocumentDetail.

        A client provided unique identifier for a package being shipped. This value should be saved by the client to pass as a parameter to the getShipmentDocuments operation.  # noqa: E501

        :param package_client_reference_id: The package_client_reference_id of this PackageDocumentDetail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and package_client_reference_id is None:
            raise ValueError("Invalid value for `package_client_reference_id`, must not be `None`")  # noqa: E501

        self._package_client_reference_id = package_client_reference_id

    @property
    def package_documents(self):
        """Gets the package_documents of this PackageDocumentDetail.  # noqa: E501

        A list of documents related to a package.  # noqa: E501

        :return: The package_documents of this PackageDocumentDetail.  # noqa: E501
        :rtype: List[PackageDocument]
        """
        return self._package_documents

    @package_documents.setter
    def package_documents(self, package_documents):
        """Sets the package_documents of this PackageDocumentDetail.

        A list of documents related to a package.  # noqa: E501

        :param package_documents: The package_documents of this PackageDocumentDetail.  # noqa: E501
        :type: List[PackageDocument]
        """
        if self._configuration.client_side_validation and package_documents is None:
            raise ValueError("Invalid value for `package_documents`, must not be `None`")  # noqa: E501

        self._package_documents = package_documents

    @property
    def tracking_id(self):
        """Gets the tracking_id of this PackageDocumentDetail.  # noqa: E501

        The carrier generated identifier for a package in a purchased shipment.  # noqa: E501

        :return: The tracking_id of this PackageDocumentDetail.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this PackageDocumentDetail.

        The carrier generated identifier for a package in a purchased shipment.  # noqa: E501

        :param tracking_id: The tracking_id of this PackageDocumentDetail.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageDocumentDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageDocumentDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageDocumentDetail):
            return True

        return self.to_dict() != other.to_dict()
