# coding: utf-8

"""
    Selling Partner API for Merchant Fulfillment

    With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShippingOfferingFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_packing_slip_with_label': 'bool',
        'include_complex_shipping_options': 'bool',
        'carrier_will_pick_up': 'CarrierWillPickUpOption',
        'delivery_experience': 'DeliveryExperienceOption',
    }

    attribute_map = {
        'include_packing_slip_with_label': 'IncludePackingSlipWithLabel',
        'include_complex_shipping_options': 'IncludeComplexShippingOptions',
        'carrier_will_pick_up': 'CarrierWillPickUp',
        'delivery_experience': 'DeliveryExperience',
    }

    def __init__(self, include_packing_slip_with_label=None, include_complex_shipping_options=None, carrier_will_pick_up=None, delivery_experience=None, _configuration=None):  # noqa: E501
        """ShippingOfferingFilter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._include_packing_slip_with_label = None
        self._include_complex_shipping_options = None
        self._carrier_will_pick_up = None
        self._delivery_experience = None
        self.discriminator = None

        if include_packing_slip_with_label is not None:
            self.include_packing_slip_with_label = include_packing_slip_with_label
        if include_complex_shipping_options is not None:
            self.include_complex_shipping_options = include_complex_shipping_options
        if carrier_will_pick_up is not None:
            self.carrier_will_pick_up = carrier_will_pick_up
        if delivery_experience is not None:
            self.delivery_experience = delivery_experience

    @property
    def include_packing_slip_with_label(self):
        """Gets the include_packing_slip_with_label of this ShippingOfferingFilter.  # noqa: E501

        When true, include a packing slip with the label.  # noqa: E501

        :return: The include_packing_slip_with_label of this ShippingOfferingFilter.  # noqa: E501
        :rtype: bool
        """
        return self._include_packing_slip_with_label

    @include_packing_slip_with_label.setter
    def include_packing_slip_with_label(self, include_packing_slip_with_label):
        """Sets the include_packing_slip_with_label of this ShippingOfferingFilter.

        When true, include a packing slip with the label.  # noqa: E501

        :param include_packing_slip_with_label: The include_packing_slip_with_label of this ShippingOfferingFilter.  # noqa: E501
        :type: bool
        """

        self._include_packing_slip_with_label = include_packing_slip_with_label

    @property
    def include_complex_shipping_options(self):
        """Gets the include_complex_shipping_options of this ShippingOfferingFilter.  # noqa: E501

        When true, include complex shipping options.  # noqa: E501

        :return: The include_complex_shipping_options of this ShippingOfferingFilter.  # noqa: E501
        :rtype: bool
        """
        return self._include_complex_shipping_options

    @include_complex_shipping_options.setter
    def include_complex_shipping_options(self, include_complex_shipping_options):
        """Sets the include_complex_shipping_options of this ShippingOfferingFilter.

        When true, include complex shipping options.  # noqa: E501

        :param include_complex_shipping_options: The include_complex_shipping_options of this ShippingOfferingFilter.  # noqa: E501
        :type: bool
        """

        self._include_complex_shipping_options = include_complex_shipping_options

    @property
    def carrier_will_pick_up(self):
        """Gets the carrier_will_pick_up of this ShippingOfferingFilter.  # noqa: E501


        :return: The carrier_will_pick_up of this ShippingOfferingFilter.  # noqa: E501
        :rtype: CarrierWillPickUpOption
        """
        return self._carrier_will_pick_up

    @carrier_will_pick_up.setter
    def carrier_will_pick_up(self, carrier_will_pick_up):
        """Sets the carrier_will_pick_up of this ShippingOfferingFilter.


        :param carrier_will_pick_up: The carrier_will_pick_up of this ShippingOfferingFilter.  # noqa: E501
        :type: CarrierWillPickUpOption
        """

        self._carrier_will_pick_up = carrier_will_pick_up

    @property
    def delivery_experience(self):
        """Gets the delivery_experience of this ShippingOfferingFilter.  # noqa: E501


        :return: The delivery_experience of this ShippingOfferingFilter.  # noqa: E501
        :rtype: DeliveryExperienceOption
        """
        return self._delivery_experience

    @delivery_experience.setter
    def delivery_experience(self, delivery_experience):
        """Sets the delivery_experience of this ShippingOfferingFilter.


        :param delivery_experience: The delivery_experience of this ShippingOfferingFilter.  # noqa: E501
        :type: DeliveryExperienceOption
        """

        self._delivery_experience = delivery_experience

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShippingOfferingFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShippingOfferingFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShippingOfferingFilter):
            return True

        return self.to_dict() != other.to_dict()
