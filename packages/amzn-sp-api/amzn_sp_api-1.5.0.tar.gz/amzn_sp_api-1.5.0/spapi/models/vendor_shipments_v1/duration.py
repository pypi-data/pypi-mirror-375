# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Duration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration_unit': 'str',
        'duration_value': 'int',
    }

    attribute_map = {
        'duration_unit': 'durationUnit',
        'duration_value': 'durationValue',
    }

    def __init__(self, duration_unit=None, duration_value=None, _configuration=None):  # noqa: E501
        """Duration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._duration_unit = None
        self._duration_value = None
        self.discriminator = None

        self.duration_unit = duration_unit
        self.duration_value = duration_value

    @property
    def duration_unit(self):
        """Gets the duration_unit of this Duration.  # noqa: E501

        Unit for duration.  # noqa: E501

        :return: The duration_unit of this Duration.  # noqa: E501
        :rtype: str
        """
        return self._duration_unit

    @duration_unit.setter
    def duration_unit(self, duration_unit):
        """Sets the duration_unit of this Duration.

        Unit for duration.  # noqa: E501

        :param duration_unit: The duration_unit of this Duration.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and duration_unit is None:
            raise ValueError("Invalid value for `duration_unit`, must not be `None`")  # noqa: E501
        allowed_values = ["Days", "Months"]  # noqa: E501
        if (self._configuration.client_side_validation and
                duration_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `duration_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(duration_unit, allowed_values)
            )

        self._duration_unit = duration_unit

    @property
    def duration_value(self):
        """Gets the duration_value of this Duration.  # noqa: E501

        Value for the duration in terms of the durationUnit.  # noqa: E501

        :return: The duration_value of this Duration.  # noqa: E501
        :rtype: int
        """
        return self._duration_value

    @duration_value.setter
    def duration_value(self, duration_value):
        """Sets the duration_value of this Duration.

        Value for the duration in terms of the durationUnit.  # noqa: E501

        :param duration_value: The duration_value of this Duration.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and duration_value is None:
            raise ValueError("Invalid value for `duration_value`, must not be `None`")  # noqa: E501

        self._duration_value = duration_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Duration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Duration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Duration):
            return True

        return self.to_dict() != other.to_dict()
