# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/catalog/v3alpha/query.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import unatype as __unatype__
from .. import v3 as _v3__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class FileDownloadFormat(betterproto.Enum):
    UNSPECIFIED = 0
    CSV = 1
    JSON = 2
    AVRO = 3
    PARQUET = 4


@dataclass(eq=False, repr=False)
class FileDownloadRequest(betterproto.Message):
    """
    File download is the method used for extracting data from a list records query to file

     The method returns a list of signed urls where the data can be downloaded from.
     Supported file types are CSV
     A maximum of 100 million rows can be extracted to file for a request.
    """

    data_reference_name: str = betterproto.string_field(1)
    """
    Data reference name
    
     Required. The data reference to query.
     Find data references you have access to with the ListDataReferences method or through the UI.
     
     Example: "ml_visitation.foot_traffic_month"
    """

    fields: List["_v3__.Field"] = betterproto.message_field(2)
    """
    Fields
     
     Optional. If not specified, default fields will be returned.
     
     Use DataReference methods or field_definitions in the response to see which fields are available.
     Example: ["location_id", "visits_p50", "visits_sum"]
    """

    filters: List["__unatype__.FilterClause"] = betterproto.message_field(3)
    """
    Filters
     
     Optional. If not specified, no filters will be applied.
     
     Find fields and supported operators in field_definitions in the response or through use of DataReference methods.
     Example: [{"field": "location_id", "operator": "==", "value": "222-222@8f2-tyn-49z"}]
    """

    options: "_v3__.Options" = betterproto.message_field(4)
    """
    Options
     
     Optional. If not specified, default options will be applied.
    """

    billing_context: str = betterproto.string_field(13)
    """
    Billing context
     
     Optional. Only applicable in advanced cases when not using API key.
    """

    format: "FileDownloadFormat" = betterproto.enum_field(14)
    """
    Format
     e.g. CSV, JSON, AVRO, PARQUET
     Optional. If not specified, the default format will be used.
    """


@dataclass(eq=False, repr=False)
class FileDownloadResponse(betterproto.Message):
    download_id: str = betterproto.string_field(1)
    """
    Download id
    
     Id of the download.
    """

    file_urls: List[str] = betterproto.string_field(2)
    """
    File urls
    
     List of signed urls to download the newly created files from.
    """

    expires_at: str = betterproto.string_field(3)
    """
    Expires at
    
     RFC3339 UTC string of when the download will expire.
    """


@dataclass(eq=False, repr=False)
class ListRecordsStatistics(betterproto.Message):
    """
    List records statistics

     Single set of statistics for a given observation date.
    """

    observation_date: str = betterproto.string_field(1)
    """
    Observation date
    
     The observation date the statistics apply to.
    """

    total_rows: int = betterproto.int64_field(2)
    """
    Total rows
    
     Total number of rows for the observation date.
    """

    unique_location_ids: int = betterproto.int64_field(3)
    """
    Distinct location ids
    
     Total number of distinct location ids for the observation date.
    """


@dataclass(eq=False, repr=False)
class ListRecordsStatisticsResponse(betterproto.Message):
    """
    List records statistics response

     Used to get statistics about a list records query.
    """

    statistics: List["ListRecordsStatistics"] = betterproto.message_field(1)
    """
    Statistics
    
     List of statistics for the observation date.
    """


@dataclass(eq=False, repr=False)
class GetLayerStatsRequest(betterproto.Message):
    data_reference_name: str = betterproto.string_field(1)
    """
    Data reference name
    
     Required. The data reference to query.
    """

    observation_date: str = betterproto.string_field(2)
    """
    Observation date
    
     The observation date the statistics apply to.
    """

    filters: List["__unatype__.FilterClause"] = betterproto.message_field(3)
    """
    Filters
    
     Optional. If not specified, no filters will be applied.
    """

    options: "_v3__.Options" = betterproto.message_field(4)
    """
    Options
    
     Optional. If not specified, default options will be applied.
    """

    dimensions: List[str] = betterproto.string_field(5)
    """
    Stat dimensions
    
     Optional. If not specified, no dimensions will be applied.
    
     Dimensions are the fields to get statistics for
    """

    billing_context: str = betterproto.string_field(13)
    """
    Billing context
    
     Optional. Only applicable in advanced cases when not using API key.
    """


@dataclass(eq=False, repr=False)
class GetLayerStatsResponse(betterproto.Message):
    location_count: int = betterproto.int64_field(1)
    """
    Location Count
    
     Total number of locations for the observation date.
    """

    stats: List["Stat"] = betterproto.message_field(2)
    """
    Stats
    
     List of statistics for the observation date.
    """


@dataclass(eq=False, repr=False)
class Stat(betterproto.Message):
    name: str = betterproto.string_field(1)
    """
    Name
    
     The name of the statistic
    """

    distinct_count: int = betterproto.int64_field(2)
    """
    Value
    
     The value of the statistic
    """


class CatalogQueryStub(betterproto.ServiceStub):
    async def file_download(
        self,
        file_download_request: "FileDownloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FileDownloadResponse":
        return await self._unary_unary(
            "/unacast.catalog.v3alpha.CatalogQuery/FileDownload",
            file_download_request,
            FileDownloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_records_statistics(
        self,
        v3_list_records_request: "_v3__.ListRecordsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListRecordsStatisticsResponse":
        return await self._unary_unary(
            "/unacast.catalog.v3alpha.CatalogQuery/ListRecordsStatistics",
            v3_list_records_request,
            ListRecordsStatisticsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_layer_stats(
        self,
        get_layer_stats_request: "GetLayerStatsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetLayerStatsResponse":
        return await self._unary_unary(
            "/unacast.catalog.v3alpha.CatalogQuery/GetLayerStats",
            get_layer_stats_request,
            GetLayerStatsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CatalogQueryBase(ServiceBase):

    async def file_download(
        self, file_download_request: "FileDownloadRequest"
    ) -> "FileDownloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_records_statistics(
        self, v3_list_records_request: "_v3__.ListRecordsRequest"
    ) -> "ListRecordsStatisticsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_layer_stats(
        self, get_layer_stats_request: "GetLayerStatsRequest"
    ) -> "GetLayerStatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_file_download(
        self, stream: "grpclib.server.Stream[FileDownloadRequest, FileDownloadResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.file_download(request)
        await stream.send_message(response)

    async def __rpc_list_records_statistics(
        self,
        stream: "grpclib.server.Stream[_v3__.ListRecordsRequest, ListRecordsStatisticsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_records_statistics(request)
        await stream.send_message(response)

    async def __rpc_get_layer_stats(
        self,
        stream: "grpclib.server.Stream[GetLayerStatsRequest, GetLayerStatsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_layer_stats(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.catalog.v3alpha.CatalogQuery/FileDownload": grpclib.const.Handler(
                self.__rpc_file_download,
                grpclib.const.Cardinality.UNARY_UNARY,
                FileDownloadRequest,
                FileDownloadResponse,
            ),
            "/unacast.catalog.v3alpha.CatalogQuery/ListRecordsStatistics": grpclib.const.Handler(
                self.__rpc_list_records_statistics,
                grpclib.const.Cardinality.UNARY_UNARY,
                _v3__.ListRecordsRequest,
                ListRecordsStatisticsResponse,
            ),
            "/unacast.catalog.v3alpha.CatalogQuery/GetLayerStats": grpclib.const.Handler(
                self.__rpc_get_layer_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLayerStatsRequest,
                GetLayerStatsResponse,
            ),
        }
