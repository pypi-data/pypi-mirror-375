[build-system]
requires = [
	"setuptools >= 61",
	"setuptools_scm",
	"wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "lyscripts"
description = "Package to interact with lymphatic progression data and models."
authors = [
	{name = "Roman Ludwig", email = "roman.ludwig@usz.ch"}
]
readme = "README.md"
requires-python = ">=3.10"
keywords = ["scripts", "lymph", "inference"]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "numpy",
    "pandas",
    "emcee",
    "h5py",
    "tables",
    "matplotlib",
    "corner",
    "scipy",
    "xlrd",
    "rich",
    "rich-argparse",
    "pyyaml",
    "lymph-model >= 1.3.3",
    "deprecated",
    "joblib",
    "pydantic",
    "pydantic-settings >= 2.7.0, != 2.9.1, != 2.9.0",
    "numpydantic",
    "loguru",
    "fastapi",
    "uvicorn",
    "lydata >= 0.4.0",
]
dynamic = ["version"]

[project.urls]
source = "https://github.com/lycosystem/lyscripts"
documentation = "https://lyscripts.readthedocs.io"

[project.optional-dependencies]
docs = [
    "sphinx",
    "sphinx-book-theme",
    "sphinx-autodoc-typehints",
    "sphinxcontrib-programoutput",
    "myst_parser",
    "autodoc_pydantic",
]
tests = [
    "pytest",
    "pytest-cov",
    "pytest-mpl",
]
dev = [
    "pre-commit",
    "git-cliff",
]

[project.scripts]
lyscripts = "lyscripts:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"lyscripts" = [
    "src/lyscripts/data/collect/collector.js",
    "src/lyscripts/data/collect/index.html",
]

[tool.setuptools_scm]
write_to = "src/lyscripts/_version.py"
local_scheme = "no-local-version"

[tool.pytest.ini_options]
testpaths = "."

[tool.ruff.lint]
select = ["E", "F", "W", "B", "C", "R", "U", "D", "I", "S", "T", "A", "N", "COM", "FURB", "NPY", "UP"]
ignore = ["D409"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"{tests,docs}/*" = [
    "D103",
    "E402",
    "S101",
    "S603",
    "S607",
]

[tool.coverage.paths]
source = [
    "src/",
    "**/site-packages/",
]

[tool.coverage.run]
relative_files = true

# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[tool.git-cliff.changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for c in commits %}
        - {% if c.breaking %}âš  **BREAKING** {% endif -%}
        {% if c.scope %}(**{{ c.scope }}**) {% endif -%}
        {{ c.message | upper_first }}.
        {%- if c.footers %}{% for f in c.footers %}{% if not f.breaking %} {{ f.token }} [{{ f.value }}].{% endif %}{% endfor %}{% endif %}
        {%- if c.body %}\\
        {{ c.body | indent(prefix="  ", first=True) }}
        {% endif -%}
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^docs", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# limit the number of commits included in the changelog.
# limit_commits = 42
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
