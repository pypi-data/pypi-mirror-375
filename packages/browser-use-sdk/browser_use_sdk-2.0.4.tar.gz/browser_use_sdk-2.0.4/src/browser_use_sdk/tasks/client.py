# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.supported_ll_ms import SupportedLlMs
from ..types.task_created_response import TaskCreatedResponse
from ..types.task_list_response import TaskListResponse
from ..types.task_log_file_response import TaskLogFileResponse
from ..types.task_status import TaskStatus
from ..types.task_update_action import TaskUpdateAction
from ..types.task_view import TaskView
from .raw_client import AsyncRawTasksClient, RawTasksClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TasksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTasksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTasksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTasksClient
        """
        return self._raw_client

    def list_tasks(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        session_id: typing.Optional[str] = None,
        filter_by: typing.Optional[TaskStatus] = None,
        after: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TaskListResponse:
        """
        Get paginated list of AI agent tasks with optional filtering by session and status.

        Parameters
        ----------
        page_size : typing.Optional[int]

        page_number : typing.Optional[int]

        session_id : typing.Optional[str]

        filter_by : typing.Optional[TaskStatus]

        after : typing.Optional[dt.datetime]

        before : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskListResponse
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.tasks.list_tasks()
        """
        _response = self._raw_client.list_tasks(
            page_size=page_size,
            page_number=page_number,
            session_id=session_id,
            filter_by=filter_by,
            after=after,
            before=before,
            request_options=request_options,
        )
        return _response.data

    def create_task(
        self,
        *,
        task: str,
        llm: typing.Optional[SupportedLlMs] = OMIT,
        start_url: typing.Optional[str] = OMIT,
        max_steps: typing.Optional[int] = OMIT,
        structured_output: typing.Optional[str] = OMIT,
        session_id: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        secrets: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        allowed_domains: typing.Optional[typing.Sequence[str]] = OMIT,
        highlight_elements: typing.Optional[bool] = OMIT,
        flash_mode: typing.Optional[bool] = OMIT,
        thinking: typing.Optional[bool] = OMIT,
        vision: typing.Optional[bool] = OMIT,
        system_prompt_extension: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TaskCreatedResponse:
        """
        You can either:
        1. Start a new task (auto creates a new simple session)
        2. Start a new task in an existing session (you can create a custom session before starting the task and reuse it for follow-up tasks)

        Parameters
        ----------
        task : str
            The task prompt/instruction for the agent.

        llm : typing.Optional[SupportedLlMs]
            The LLM model to use for the agent.

        start_url : typing.Optional[str]
            The URL to start the task from.

        max_steps : typing.Optional[int]
            Maximum number of steps the agent can take before stopping.

        structured_output : typing.Optional[str]
            The stringified JSON schema for the structured output.

        session_id : typing.Optional[str]
            The ID of the session where the task will run.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[str]]]
            The metadata for the task.

        secrets : typing.Optional[typing.Dict[str, typing.Optional[str]]]
            The secrets for the task.

        allowed_domains : typing.Optional[typing.Sequence[str]]
            The allowed domains for the task.

        highlight_elements : typing.Optional[bool]
            Tells the agent to highlight interactive elements on the page.

        flash_mode : typing.Optional[bool]
            Whether agent flash mode is enabled.

        thinking : typing.Optional[bool]
            Whether agent thinking mode is enabled.

        vision : typing.Optional[bool]
            Whether agent vision capabilities are enabled.

        system_prompt_extension : typing.Optional[str]
            Optional extension to the agent system prompt.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskCreatedResponse
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.tasks.create_task(
            task="task",
        )
        """
        _response = self._raw_client.create_task(
            task=task,
            llm=llm,
            start_url=start_url,
            max_steps=max_steps,
            structured_output=structured_output,
            session_id=session_id,
            metadata=metadata,
            secrets=secrets,
            allowed_domains=allowed_domains,
            highlight_elements=highlight_elements,
            flash_mode=flash_mode,
            thinking=thinking,
            vision=vision,
            system_prompt_extension=system_prompt_extension,
            request_options=request_options,
        )
        return _response.data

    def get_task(self, task_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> TaskView:
        """
        Get detailed task information including status, progress, steps, and file outputs.

        Parameters
        ----------
        task_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskView
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.tasks.get_task(
            task_id="task_id",
        )
        """
        _response = self._raw_client.get_task(task_id, request_options=request_options)
        return _response.data

    def update_task(
        self, task_id: str, *, action: TaskUpdateAction, request_options: typing.Optional[RequestOptions] = None
    ) -> TaskView:
        """
        Control task execution with stop, pause, resume, or stop task and session actions.

        Parameters
        ----------
        task_id : str

        action : TaskUpdateAction
            The action to perform on the task

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskView
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.tasks.update_task(
            task_id="task_id",
            action="stop",
        )
        """
        _response = self._raw_client.update_task(task_id, action=action, request_options=request_options)
        return _response.data

    def get_task_logs(
        self, task_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TaskLogFileResponse:
        """
        Get secure download URL for task execution logs with step-by-step details.

        Parameters
        ----------
        task_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskLogFileResponse
            Successful Response

        Examples
        --------
        from browser_use_sdk import BrowserUse

        client = BrowserUse(
            api_key="YOUR_API_KEY",
        )
        client.tasks.get_task_logs(
            task_id="task_id",
        )
        """
        _response = self._raw_client.get_task_logs(task_id, request_options=request_options)
        return _response.data


class AsyncTasksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTasksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTasksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTasksClient
        """
        return self._raw_client

    async def list_tasks(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        session_id: typing.Optional[str] = None,
        filter_by: typing.Optional[TaskStatus] = None,
        after: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TaskListResponse:
        """
        Get paginated list of AI agent tasks with optional filtering by session and status.

        Parameters
        ----------
        page_size : typing.Optional[int]

        page_number : typing.Optional[int]

        session_id : typing.Optional[str]

        filter_by : typing.Optional[TaskStatus]

        after : typing.Optional[dt.datetime]

        before : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskListResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tasks.list_tasks()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_tasks(
            page_size=page_size,
            page_number=page_number,
            session_id=session_id,
            filter_by=filter_by,
            after=after,
            before=before,
            request_options=request_options,
        )
        return _response.data

    async def create_task(
        self,
        *,
        task: str,
        llm: typing.Optional[SupportedLlMs] = OMIT,
        start_url: typing.Optional[str] = OMIT,
        max_steps: typing.Optional[int] = OMIT,
        structured_output: typing.Optional[str] = OMIT,
        session_id: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        secrets: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        allowed_domains: typing.Optional[typing.Sequence[str]] = OMIT,
        highlight_elements: typing.Optional[bool] = OMIT,
        flash_mode: typing.Optional[bool] = OMIT,
        thinking: typing.Optional[bool] = OMIT,
        vision: typing.Optional[bool] = OMIT,
        system_prompt_extension: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TaskCreatedResponse:
        """
        You can either:
        1. Start a new task (auto creates a new simple session)
        2. Start a new task in an existing session (you can create a custom session before starting the task and reuse it for follow-up tasks)

        Parameters
        ----------
        task : str
            The task prompt/instruction for the agent.

        llm : typing.Optional[SupportedLlMs]
            The LLM model to use for the agent.

        start_url : typing.Optional[str]
            The URL to start the task from.

        max_steps : typing.Optional[int]
            Maximum number of steps the agent can take before stopping.

        structured_output : typing.Optional[str]
            The stringified JSON schema for the structured output.

        session_id : typing.Optional[str]
            The ID of the session where the task will run.

        metadata : typing.Optional[typing.Dict[str, typing.Optional[str]]]
            The metadata for the task.

        secrets : typing.Optional[typing.Dict[str, typing.Optional[str]]]
            The secrets for the task.

        allowed_domains : typing.Optional[typing.Sequence[str]]
            The allowed domains for the task.

        highlight_elements : typing.Optional[bool]
            Tells the agent to highlight interactive elements on the page.

        flash_mode : typing.Optional[bool]
            Whether agent flash mode is enabled.

        thinking : typing.Optional[bool]
            Whether agent thinking mode is enabled.

        vision : typing.Optional[bool]
            Whether agent vision capabilities are enabled.

        system_prompt_extension : typing.Optional[str]
            Optional extension to the agent system prompt.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskCreatedResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tasks.create_task(
                task="task",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_task(
            task=task,
            llm=llm,
            start_url=start_url,
            max_steps=max_steps,
            structured_output=structured_output,
            session_id=session_id,
            metadata=metadata,
            secrets=secrets,
            allowed_domains=allowed_domains,
            highlight_elements=highlight_elements,
            flash_mode=flash_mode,
            thinking=thinking,
            vision=vision,
            system_prompt_extension=system_prompt_extension,
            request_options=request_options,
        )
        return _response.data

    async def get_task(self, task_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> TaskView:
        """
        Get detailed task information including status, progress, steps, and file outputs.

        Parameters
        ----------
        task_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tasks.get_task(
                task_id="task_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_task(task_id, request_options=request_options)
        return _response.data

    async def update_task(
        self, task_id: str, *, action: TaskUpdateAction, request_options: typing.Optional[RequestOptions] = None
    ) -> TaskView:
        """
        Control task execution with stop, pause, resume, or stop task and session actions.

        Parameters
        ----------
        task_id : str

        action : TaskUpdateAction
            The action to perform on the task

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskView
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tasks.update_task(
                task_id="task_id",
                action="stop",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_task(task_id, action=action, request_options=request_options)
        return _response.data

    async def get_task_logs(
        self, task_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TaskLogFileResponse:
        """
        Get secure download URL for task execution logs with step-by-step details.

        Parameters
        ----------
        task_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskLogFileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browser_use_sdk import AsyncBrowserUse

        client = AsyncBrowserUse(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tasks.get_task_logs(
                task_id="task_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_task_logs(task_id, request_options=request_options)
        return _response.data
