# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class AdditionalLocationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AS_INSTRUCTED = 'AS_INSTRUCTED'
    CARPORT = 'CARPORT'
    CUSTOMER_PICKUP = 'CUSTOMER_PICKUP'
    DECK = 'DECK'
    DOOR_PERSON = 'DOOR_PERSON'
    FRONT_DESK = 'FRONT_DESK'
    FRONT_DOOR = 'FRONT_DOOR'
    GARAGE = 'GARAGE'
    GUARD = 'GUARD'
    MAIL_ROOM = 'MAIL_ROOM'
    MAIL_SLOT = 'MAIL_SLOT'
    MAILBOX = 'MAILBOX'
    MC_BOY = 'MC_BOY'
    MC_GIRL = 'MC_GIRL'
    MC_MAN = 'MC_MAN'
    MC_WOMAN = 'MC_WOMAN'
    NEIGHBOR = 'NEIGHBOR'
    OFFICE = 'OFFICE'
    OUTBUILDING = 'OUTBUILDING'
    PATIO = 'PATIO'
    PORCH = 'PORCH'
    REAR_DOOR = 'REAR_DOOR'
    RECEPTIONIST = 'RECEPTIONIST'
    RECEIVER = 'RECEIVER'
    SECURE_LOCATION = 'SECURE_LOCATION'
    SIDE_DOOR = 'SIDE_DOOR'

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """AdditionalLocationInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalLocationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalLocationInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdditionalLocationInfo):
            return True

        return self.to_dict() != other.to_dict()
