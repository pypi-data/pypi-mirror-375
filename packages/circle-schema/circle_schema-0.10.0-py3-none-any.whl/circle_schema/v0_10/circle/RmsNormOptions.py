# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RmsNormOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RmsNormOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRmsNormOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RmsNormOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # RmsNormOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RmsNormOptions
    def Epsilon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(1)
def RmsNormOptionsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddEpsilon(builder, epsilon): builder.PrependFloat32Slot(0, epsilon, 0.0)
def RmsNormOptionsAddEpsilon(builder, epsilon):
    """This method is deprecated. Please switch to AddEpsilon."""
    return AddEpsilon(builder, epsilon)
def End(builder): return builder.EndObject()
def RmsNormOptionsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)

class RmsNormOptionsT(object):

    # RmsNormOptionsT
    def __init__(self):
        self.epsilon = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rmsNormOptions = RmsNormOptions()
        rmsNormOptions.Init(buf, pos)
        return cls.InitFromObj(rmsNormOptions)

    @classmethod
    def InitFromObj(cls, rmsNormOptions):
        x = RmsNormOptionsT()
        x._UnPack(rmsNormOptions)
        return x

    # RmsNormOptionsT
    def _UnPack(self, rmsNormOptions):
        if rmsNormOptions is None:
            return
        self.epsilon = rmsNormOptions.Epsilon()

    # RmsNormOptionsT
    def Pack(self, builder):
        Start(builder)
        AddEpsilon(builder, self.epsilon)
        rmsNormOptions = End(builder)
        return rmsNormOptions
