# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.time_series_measurement import TimeSeriesMeasurement
from openapi_client.models.uo_m import UoM
from typing import Optional, Set
from typing_extensions import Self

class TimeSeries(BaseModel):
    """
    TimeSeries
    """ # noqa: E501
    xid: StrictStr
    well_xid: StrictStr = Field(alias="wellXid")
    source_id: StrictStr = Field(alias="sourceId")
    measurement: TimeSeriesMeasurement
    unit: UoM
    first_date: Optional[datetime] = Field(default=None, alias="firstDate")
    first_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="firstValue")
    last_date: Optional[datetime] = Field(default=None, alias="lastDate")
    last_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lastValue")
    __properties: ClassVar[List[str]] = ["xid", "wellXid", "sourceId", "measurement", "unit", "firstDate", "firstValue", "lastDate", "lastValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeSeries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if first_date (nullable) is None
        # and model_fields_set contains the field
        if self.first_date is None and "first_date" in self.model_fields_set:
            _dict['firstDate'] = None

        # set to None if first_value (nullable) is None
        # and model_fields_set contains the field
        if self.first_value is None and "first_value" in self.model_fields_set:
            _dict['firstValue'] = None

        # set to None if last_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_date is None and "last_date" in self.model_fields_set:
            _dict['lastDate'] = None

        # set to None if last_value (nullable) is None
        # and model_fields_set contains the field
        if self.last_value is None and "last_value" in self.model_fields_set:
            _dict['lastValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeSeries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "xid": obj.get("xid"),
            "wellXid": obj.get("wellXid"),
            "sourceId": obj.get("sourceId"),
            "measurement": obj.get("measurement"),
            "unit": obj.get("unit"),
            "firstDate": obj.get("firstDate"),
            "firstValue": obj.get("firstValue"),
            "lastDate": obj.get("lastDate"),
            "lastValue": obj.get("lastValue")
        })
        return _obj


