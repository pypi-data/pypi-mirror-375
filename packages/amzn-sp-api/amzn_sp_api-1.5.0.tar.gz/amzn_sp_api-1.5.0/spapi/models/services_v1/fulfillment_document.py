# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FulfillmentDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_destination_id': 'str',
        'content_sha256': 'str',
    }

    attribute_map = {
        'upload_destination_id': 'uploadDestinationId',
        'content_sha256': 'contentSha256',
    }

    def __init__(self, upload_destination_id=None, content_sha256=None, _configuration=None):  # noqa: E501
        """FulfillmentDocument - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._upload_destination_id = None
        self._content_sha256 = None
        self.discriminator = None

        if upload_destination_id is not None:
            self.upload_destination_id = upload_destination_id
        if content_sha256 is not None:
            self.content_sha256 = content_sha256

    @property
    def upload_destination_id(self):
        """Gets the upload_destination_id of this FulfillmentDocument.  # noqa: E501

        The identifier of the upload destination. Get this value by calling the `createServiceDocumentUploadDestination` operation of the Services API.  # noqa: E501

        :return: The upload_destination_id of this FulfillmentDocument.  # noqa: E501
        :rtype: str
        """
        return self._upload_destination_id

    @upload_destination_id.setter
    def upload_destination_id(self, upload_destination_id):
        """Sets the upload_destination_id of this FulfillmentDocument.

        The identifier of the upload destination. Get this value by calling the `createServiceDocumentUploadDestination` operation of the Services API.  # noqa: E501

        :param upload_destination_id: The upload_destination_id of this FulfillmentDocument.  # noqa: E501
        :type: str
        """

        self._upload_destination_id = upload_destination_id

    @property
    def content_sha256(self):
        """Gets the content_sha256 of this FulfillmentDocument.  # noqa: E501

        Sha256 hash of the file content. This value is used to determine if the file has been corrupted or tampered with during transit.  # noqa: E501

        :return: The content_sha256 of this FulfillmentDocument.  # noqa: E501
        :rtype: str
        """
        return self._content_sha256

    @content_sha256.setter
    def content_sha256(self, content_sha256):
        """Sets the content_sha256 of this FulfillmentDocument.

        Sha256 hash of the file content. This value is used to determine if the file has been corrupted or tampered with during transit.  # noqa: E501

        :param content_sha256: The content_sha256 of this FulfillmentDocument.  # noqa: E501
        :type: str
        """

        self._content_sha256 = content_sha256

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FulfillmentDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FulfillmentDocument):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FulfillmentDocument):
            return True

        return self.to_dict() != other.to_dict()
