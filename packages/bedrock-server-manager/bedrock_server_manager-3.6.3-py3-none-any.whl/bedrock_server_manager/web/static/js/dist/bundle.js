(()=>{var $=(n,e)=>()=>(n&&(e=n(n=0)),e);var he=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports);function c(n,e="info"){let t="showStatusMessage";console.log(`${t}: Displaying message (Type: ${e}): "${n}"`);let s=document.getElementById("status-message-area");if(!s){console.warn(`${t}: Element '#status-message-area' not found. Falling back to standard alert.`),alert(`${e.toUpperCase()}: ${n}`);return}s.className=`message-box message-${e}`,s.textContent=n,s.style.transition="",s.style.opacity="1";let a=Date.now()+Math.random();s.dataset.currentMessageId=a,console.debug(`${t}: Set message content and visibility for messageId ${a}.`),setTimeout(()=>{s.dataset.currentMessageId===String(a)?(console.debug(`${t}: Initiating fade-out for messageId ${a} ("${n}").`),s.style.transition="opacity 0.5s ease-out",s.style.opacity="0",setTimeout(()=>{s.dataset.currentMessageId===String(a)&&s.style.opacity==="0"?(console.debug(`${t}: Clearing content for messageId ${a} after fade.`),s.textContent="",s.className="message-box",s.style.transition="",delete s.dataset.currentMessageId):console.debug(`${t}: Aborting final clear for messageId ${a} - message changed or fade interrupted.`)},500)):console.debug(`${t}: Aborting fade-out for messageId ${a} - a newer message was displayed.`)},5e3)}async function v(n,e,t="POST",s=null,a=null,i=!1){let r="sendServerActionRequest";console.debug(`${r}: Initiating request - Server: '${n||"N/A"}', Path: '${e}', Method: ${t}, SuppressSuccess: ${i}`),s&&console.debug(`${r}: Request Body:`,s),a&&console.debug(`${r}: Associated Button:`,a);let g;if(/^(?:[a-z]+:)?\/\//i.test(e))g=e,console.debug(`${r}: Using absolute URL: ${g}`);else if(e.startsWith("/"))g=e,console.debug(`${r}: Using absolute URL: ${g}`);else if(n&&n.trim())g=`/api/server/${n}/${e}`,console.debug(`${r}: Using relative URL for server '${n}': ${g}`);else{let d="Invalid arguments: 'serverName' is required for relative action paths.";return console.error(`${r}: ${d}`),c(d,"error"),a&&(a.disabled=!1),!1}console.debug(`${r}: Preparing fetch request to ${g} (Method: ${t})`),a&&(console.debug(`${r}: Disabling button.`),a.disabled=!0),i||c(`Processing action at ${g}...`,"info");let u={method:t.toUpperCase(),headers:{Accept:"application/json"}},b=localStorage.getItem("jwt_token");b?(u.headers.Authorization=`Bearer ${b}`,console.debug(`${r}: Added JWT to Authorization header.`)):console.debug(`${r}: No JWT found in localStorage.`);let l=["POST","PUT","PATCH","DELETE"].includes(u.method);if(s&&l)try{u.body=JSON.stringify(s),u.headers["Content-Type"]="application/json",console.debug(`${r}: Added JSON body and Content-Type header.`)}catch(d){let f=`Failed to stringify request body: ${d.message}`;return console.error(`${r}: ${f}`,s),c(f,"error"),a&&(a.disabled=!1),!1}else s&&!l?console.warn(`${r}: Body provided for HTTP method '${u.method}' which typically does not support it. Body ignored.`):console.debug(`${r}: No request body provided or method does not support it.`);let o=null,m=!1;try{console.debug(`${r}: Executing fetch(${g}, ...)`);let d=await fetch(g,u);if(console.log(`${r}: Response received - Status: ${d.status}, OK: ${d.ok}`),m=d.ok,d.status===204)console.log(`${r}: Received 204 No Content. Treating as success.`),o={status:"success",message:`Action at ${g} successful (No Content).`};else{let f=d.headers.get("content-type");if(console.debug(`${r}: Response Content-Type: ${f}`),f&&f.includes("application/json"))console.debug(`${r}: Parsing JSON response body...`),o=await d.json(),console.debug(`${r}: Parsed JSON response:`,o);else{console.debug(`${r}: Response not JSON. Reading as text...`);let h=await d.text();if(console.warn(`${r}: Received non-JSON response (Status: ${d.status}). Body (truncated): ${h.substring(0,500)}`),!m)o={status:"error",message:`Request failed (Status ${d.status}): ${h.substring(0,200)}${h.length>200?"...":""}`},console.debug(`${r}: Created error object from text response.`);else{let p=`Request to ${g} succeeded (Status ${d.status}) but returned unexpected content type: ${f}. Check server logs.`;return console.warn(`${r}: ${p}`),c(p,"warning"),!1}}}if(m){if(console.debug(`${r}: HTTP request successful (Status: ${d.status}). Checking application status in response...`),o&&o.status==="success"){let f=o.message||`Action at ${g} completed successfully.`;console.info(`${r}: Application success. Message: "${f}"`),i||c(f,"success")}else if(o&&o.status==="confirm_needed")console.info(`${r}: Application status 'confirm_needed'. Returning data for confirmation handling.`);else if(e!=="/api/account"&&e!=="/api/themes"){let f=o?.status||"unknown",h=o?.message||`Action at ${g} reported status: ${f}.`;console.warn(`${r}: HTTP success but application status is '${f}'. Message: ${h}`),c(h,"warning")}}else{let f=o?.message||`Request failed with status ${d.status}`;if(console.error(`${r}: HTTP Error - Status: ${d.status}, Message: "${f}"`),d.status===400&&o?.errors&&typeof o.errors=="object"){c(f||"Validation failed. Please check fields.","error");let h=document.getElementById("validation-error-area"),p=[];Object.entries(o.errors).forEach(([w,I])=>{let S=document.querySelector(`.validation-error[data-field="${w}"]`);S?S.textContent=I:p.push(`<strong>${w}:</strong> ${I}`)}),h&&p.length>0&&(h.innerHTML=p.join("<br>"))}else if(d.status===400&&f.toLowerCase().includes("csrf token")){let h="Security token error. Please refresh the page and try again.";console.error(`${r}: CSRF Token Error detected.`),c(h,"error")}else c(f,"error");return!1}}catch(d){let f=`Network or processing error during action at ${g}: ${d.message}`;return console.error(`${r}: Fetch failed - ${f}`,d),c(f,"error"),a&&(a.disabled=!1),!1}finally{console.debug(`${r}: Finally block executing. httpSuccess=${m}, responseData.status=${o?.status}`),a&&(o?.status!=="confirm_needed"?a.disabled?(console.debug(`${r}: Re-enabling button in finally block.`),a.disabled=!1):console.debug(`${r}: Button was already enabled in finally block.`):console.debug(`${r}: Button remains disabled due to 'confirm_needed' status.`))}return console.debug(`${r}: Returning response data object (or false if HTTP error occurred):`,o),m?o:!1}var E=$(()=>{});function A(){let n="getSelectedServer";console.debug(`${n}: Attempting to get selected server from #server-select dropdown.`);let e=document.getElementById("server-select");if(!e){let s="Internal page error: Server selection dropdown element ('#server-select') not found.";return console.error(`${n}: ${s}`),c(s,"error"),null}let t=e.value;if(console.debug(`${n}: Value from dropdown: "${t}"`),!t||t===""){let s="Please select a server from the dropdown list first.";return console.warn(`${n}: ${s}`),c(s,"warning"),null}return console.debug(`${n}: Returning selected server name: '${t}'`),t}function C(n){let e="startServer";console.log(`${e}: Action triggered.`),console.debug(`${e}: Button Element:`,n);let t=A();if(t){let s="start",a="POST";console.log(`${e}: Attempting to start server '${t}' via API call to ${s}...`),v(t,s,a,null,n),console.log(`${e}: API request initiated for '${t}' (asynchronous).`)}else console.warn(`${e}: Action aborted because no server was selected.`)}function x(n){let e="stopServer";console.log(`${e}: Action triggered.`),console.debug(`${e}: Button Element:`,n);let t=A();if(t){let s="stop",a="POST";console.log(`${e}: Attempting to stop server '${t}' via API call to ${s}...`),v(t,s,a,null,n),console.log(`${e}: API request initiated for '${t}' (asynchronous).`)}else console.warn(`${e}: Action aborted because no server was selected.`)}function M(n){let e="restartServer";console.log(`${e}: Action triggered.`),console.debug(`${e}: Button Element:`,n);let t=A();if(t){let s="restart",a="POST";console.log(`${e}: Attempting to restart server '${t}' via API call to ${s}...`),v(t,s,a,null,n),console.log(`${e}: API request initiated for '${t}' (asynchronous).`)}else console.warn(`${e}: Action aborted because no server was selected.`)}function N(n){let e="promptCommand";console.log(`${e}: Action triggered.`),console.debug(`${e}: Button Element:`,n);let t=A();if(!t){console.warn(`${e}: Action aborted because no server was selected.`);return}console.debug(`${e}: Prompting user for command input for server '${t}'.`);let s=prompt(`Enter command to send to server '${t}':`);if(s===null){console.log(`${e}: Command input cancelled by user.`),c("Command input cancelled.","info");return}let a=s.trim();if(console.debug(`${e}: User entered command: "${s}", Trimmed: "${a}"`),a===""){console.warn(`${e}: Command is empty after trimming.`),c("Command cannot be empty.","warning");return}let i="send_command",r="POST",g={command:a};console.debug(`${e}: Constructed request body:`,g),console.log(`${e}: Attempting to send command '${a}' to server '${t}' via API call to ${i}...`),v(t,i,r,g,n),console.log(`${e}: API request initiated for '${t}' (asynchronous).`)}function R(n,e){let t="deleteServer";if(console.log(`${t}: Action triggered for server: '${e}'`),console.debug(`${t}: Button Element:`,n),!e||typeof e!="string"||!e.trim()){let i="Internal error: Server name is missing or invalid for delete action.";console.error(`${t}: ${i}`),c(i,"error");return}let s=e.trim();console.debug(`${t}: Prompting user for delete confirmation for server '${s}'.`);let a=`Are you absolutely sure you want to delete ALL data for server '${s}'?

This includes installation, configuration, and backups and cannot be undone!`;confirm(a)?(console.log(`${t}: Deletion confirmed by user for '${s}'. Sending API request...`),v(s,"delete","DELETE",null,n),console.log(`${t}: API request initiated for '${s}' (asynchronous).`)):(console.log(`${t}: Deletion cancelled by user for '${s}'.`),c("Deletion cancelled.","info"))}function q(n,e){let t="triggerServerUpdate";if(console.log(`${t}: Action triggered for server: '${e}'`),console.debug(`${t}: Button Element:`,n),!e||typeof e!="string"||!e.trim()){let r="Internal error: Server name is missing or invalid for update action.";console.error(`${t}: ${r}`),c(r,"error");return}let s=e.trim(),a="update",i="POST";console.log(`${t}: Attempting to update server '${s}' via API call to ${a}...`),v(s,a,i,null,n),console.log(`${t}: API request initiated for '${s}' (asynchronous).`)}var B=$(()=>{E()});function _(){let n="DashboardManager";console.log(`${n}: Initializing all dashboard interactivity.`);let e=6e4,t=document.getElementById("server-select"),s=document.querySelectorAll(".server-selection-section .action-buttons-group button"),a=document.querySelectorAll(".server-dependent-actions"),i=document.getElementById("server-card-list"),r=document.getElementById("no-servers-message");if(!t||!i||!r){if(console.error(`${n}: A critical element for the dashboard is missing. Functionality may be impaired.`),typeof c=="function")c("Dashboard Error: Critical page elements missing.","error");else{let l=document.querySelector("body");l&&l.insertAdjacentHTML("afterbegin",'<p style="color:red; text-align:center; padding:10px; background:lightyellow; border:1px solid red;">Critical Dashboard Error: Page elements missing.</p>')}return}function g(l){let o=l&&l!=="",m=o?encodeURIComponent(l):"";s.forEach(d=>d.disabled=!o),a.forEach(d=>{let f=d.querySelector('span[id^="selected-server-"]'),h=d.querySelectorAll(".action-button, .action-link");f&&(f.textContent=o?l:"(No server selected)",f.style.fontStyle=o?"normal":"italic"),h.forEach(p=>{if(p.disabled=!o,p.tagName==="A"&&p.id&&o){let w="#";switch(p.id){case"config-link-properties":w=`/server/${m}/configure_properties`;break;case"config-link-allowlist":w=`/server/${m}/configure_allowlist`;break;case"config-link-permissions":w=`/server/${m}/configure_permissions`;break;case"config-link-monitor":w=`/server/${m}/monitor`;break;case"config-link-service":w=`/server/${m}/configure_service`;break;case"task-scheduler-menu":w=`/server/${m}/scheduler`;break;case"content-link-world":w=`/server/${m}/install_world`;break;case"content-link-addon":w=`/server/${m}/install_addon`;break;case"backup-link-menu":w=`/server/${m}/backup`;break;case"restore-link-menu":w=`/server/${m}/restore`;break;default:console.warn(`${n}: No URL map for link ID '${p.id}'.`),w="#";break}p.href=w}else p.tagName==="A"&&!o&&(p.href="#")})})}function y(l){let o=document.createElement("div");o.className="server-card",o.dataset.serverName=l.name;let m=encodeURIComponent(l.name),d=l.status||"UNKNOWN",f=l.version||"N/A";return o.innerHTML=`
        <div class="server-card-thumbnail">
            <img src="/api/server/${m}/world/icon" alt="${l.name} World Icon" class="world-icon-img">
        </div>
        <div class="server-card-info">
            <h3>${l.name}</h3>
            <p><span class="info-label">Status:</span> <span class="status-text status-${d.toLowerCase()}">${d.toUpperCase()}</span></p>
            <p><span class="info-label">Version:</span> <span class="version-text">${f}</span></p>
            <p><span class="info-label">Players:</span> <span class="player-count-text">${l.player_count}</span></p>
        </div>
        <div class="server-card-actions">
            <a href="/servers/${m}/settings" class="action-link" title="Server Settings">Settings</a>
        </div>`,o}function u(l){let o=t.value;if(t.innerHTML="",l.length===0){let m=new Option("-- No Servers Installed --","");m.disabled=!0,t.add(m),t.disabled=!0,t.title="No servers available"}else t.add(new Option("-- Select a Server --","")),l.forEach(m=>t.add(new Option(m.name,m.name))),t.disabled=!1,t.title="Select a server";t.value=o,t.value!==o&&t.dispatchEvent(new Event("change"))}async function b(){try{let l=await v(null,"/api/servers","GET",null,null,!0);if(!l||l.status!=="success"||!Array.isArray(l.servers)){console.warn(`${n}: API call to /api/servers did not return success or valid server data. Message:`,l?.message),typeof c=="function"&&!(l&&l.message&&l.status==="error")&&c("Failed to update dashboard: Could not retrieve server list.","warning");return}let o=l.servers,m=new Map(o.map(h=>[h.name,h])),d=i.querySelectorAll(".server-card"),f=new Set(Array.from(d).map(h=>h.dataset.serverName));d.forEach(h=>{let p=h.dataset.serverName;if(m.has(p)){let w=m.get(p),I=encodeURIComponent(w.name),S=w.status||"UNKNOWN",k=w.version||"N/A";h.innerHTML=`
                    <div class="server-card-thumbnail">
                        <img src="/api/server/${I}/world/icon" alt="${w.name} World Icon" class="world-icon-img">
                    </div>
                    <div class="server-card-info">
                        <h3>${w.name}</h3>
                        <p><span class="info-label">Status:</span> <span class="status-text status-${S.toLowerCase()}">${S.toUpperCase()}</span></p>
                        <p><span class="info-label">Version:</span> <span class="version-text">${k}</span></p>
                        <p><span class="info-label">Players:</span> <span class="player-count-text">${w.player_count}</span></p>
                    </div>
                    <div class="server-card-actions">
                        <a href="/servers/${I}/settings" class="action-link" title="Server Settings">Settings</a>
                    </div>`}else h.remove()}),o.forEach(h=>{f.has(h.name)||i.appendChild(y(h))}),u(o),r.style.display=o.length===0?"block":"none"}catch(l){console.error(`${n}: Client-side error during dashboard update:`,l),typeof c=="function"&&c(`Dashboard update error: ${l.message}`,"error")}}t.addEventListener("change",l=>{g(l.target.value)}),document.getElementById("start-server-btn")?.addEventListener("click",l=>C(l.currentTarget)),document.getElementById("stop-server-btn")?.addEventListener("click",l=>x(l.currentTarget)),document.getElementById("restart-server-btn")?.addEventListener("click",l=>M(l.currentTarget)),document.getElementById("prompt-command-btn")?.addEventListener("click",l=>N(l.currentTarget)),document.getElementById("update-server-btn")?.addEventListener("click",l=>q(l.currentTarget,t.value)),document.getElementById("delete-server-btn")?.addEventListener("click",l=>R(l.currentTarget,t.value)),b(),setInterval(b,e),console.log(`${n}: Initialization complete. Polling every ${e}ms.`)}var O=$(()=>{E();B()});function be(){v(null,"/api/account","GET",null,null,!0).then(n=>{n&&(document.getElementById("full_name").value=n.full_name||"",document.getElementById("email").value=n.email||"")})}function we(){let n=document.getElementById("change-password-form"),e=n.elements.current_password.value,t=n.elements.new_password.value,s=n.elements.confirm_new_password.value;if(t!==s){c("New passwords do not match.","error");return}v(null,"/api/account/change-password","POST",{current_password:e,new_password:t}).then(i=>{i&&i.status==="success"&&n.reset()})}function $e(){let n=document.getElementById("profile-form"),e=n.elements.full_name.value,t=n.elements.email.value;v(null,"/api/account/profile","POST",{full_name:e,email:t})}function U(){be();let n=document.getElementById("theme-select");n&&(v(null,"/api/themes","GET",null,null,!0).then(i=>{i&&Object.keys(i).forEach(g=>{let y=document.createElement("option");y.value=g,y.textContent=g.charAt(0).toUpperCase()+g.slice(1),n.appendChild(y)});let r=n.dataset.currentTheme;r&&(n.value=r)}),n.addEventListener("change",async i=>{let r=i.target.value,g=document.getElementById("theme-stylesheet");if(g){let y=await v(null,"/api/themes","GET",null,null,!0);y&&(g.href=y[r])}await v(null,"/api/account/theme","POST",{theme:r},null)}));let e=document.querySelectorAll(".sidebar-nav .nav-link"),t=document.querySelectorAll(".main-content .content-section");e.forEach(i=>{i.addEventListener("click",r=>{if(!i.getAttribute("data-target"))return;r.preventDefault();let g=i.getAttribute("data-target");e.forEach(u=>u.classList.remove("active")),t.forEach(u=>u.classList.remove("active")),i.classList.add("active");let y=document.getElementById(g);y&&y.classList.add("active")})});let s=document.getElementById("change-password-form");s&&s.addEventListener("submit",i=>{i.preventDefault(),we()});let a=document.getElementById("profile-form");a&&a.addEventListener("submit",i=>{i.preventDefault(),$e()})}var D=$(()=>{E()});function z(){let n="AllowlistManager";console.log(`${n}: Initializing allowlist page.`);let e=document.querySelector("p[data-server-name]"),t=null;if(e&&e.dataset.serverName)t=e.dataset.serverName,console.log(`${n}: Found server name: '${t}'`);else{console.error(`${n}: Could not find server name.`),c("Critical page error: Could not determine server context.","error");return}async function s(y){let u="addAllowlistPlayers";console.log(`${u}: Initiated. Server: ${t}`),console.debug(`${u}: Button Element:`,y);let b=document.getElementById("player-names-add"),l=document.getElementById("ignore-limit-add");if(!b||!l){let p="Required 'add player' form elements not found.";console.error(`${u}: ${p}`),c(`Internal page error: ${p}`,"error");return}let m=b.value.split(`
`).map(p=>p.trim()).filter(p=>p.length>0);if(m.length===0){let p="No player names entered.";console.warn(`${u}: ${p}`),c(p,"warning");return}let d=l.checked,h=await v(t,"allowlist/add","POST",{players:m,ignoresPlayerLimit:d},y);if(h&&h.status==="success"){let p=h.message||"Players processed.";c(p,"success"),b.value="",await a()}}async function a(){let y="fetchAndUpdateAllowlistDisplay";console.log(`${y}: Initiating for server: ${t}`);let u=document.getElementById("current-allowlist-display");if(!u){console.error(`${y}: Target display element not found.`),c("Internal page error: Allowlist display area not found.","error");return}u.innerHTML="<li><i>Loading allowlist...</i></li>";try{let b=await v(t,"allowlist/get","GET",null,null,!0);if(u.innerHTML="",b&&b.status==="success"&&Array.isArray(b.players)){let l=b.players;l.length>0?l.forEach(o=>{let m=document.createElement("li");m.className="allowlist-player-item",m.innerHTML=`
                            <span class="player-name">${o.name||"Unnamed Player"}</span>
                            <span class="player-meta"> (Ignores Limit: ${o.ignoresPlayerLimit?"Yes":"No"})</span>
                        `;let d=document.createElement("button");d.type="button",d.textContent="Remove",d.className="action-button remove-button danger-button",d.title=`Remove ${o.name||"this player"}`,o.name?d.dataset.playerName=o.name:d.disabled=!0,m.appendChild(d),u.appendChild(m)}):u.innerHTML="<li><i>No players currently in allowlist.</i></li>"}else{let l=`Could not refresh allowlist: ${b.message||"API returned an error."}`;c(l,"error")}}catch(b){console.error(`${y}: Unexpected error:`,b),c(`Client-side error updating allowlist: ${b.message}`,"error"),u.innerHTML='<li><i style="color: red;">Error updating display.</i></li>'}}async function i(y,u){if(!confirm(`Are you sure you want to remove '${u}' from the allowlist?`)){c("Player removal cancelled.","info");return}let l=await v(t,"allowlist/remove","DELETE",{players:[u]},y);l&&l.status==="success"&&(await a(),c(l.message||`Player ${u} processed.`,"success"))}let r=document.getElementById("add-allowlist-players-btn");r&&r.addEventListener("click",()=>s(r));let g=document.getElementById("current-allowlist-display");g&&g.addEventListener("click",y=>{let u=y.target;u.classList.contains("remove-button")&&u.dataset.playerName&&i(u,u.dataset.playerName)}),a()}var F=$(()=>{E()});function H(){let n=document.getElementById("login-form");n&&n.addEventListener("submit",e=>{e.preventDefault();let t=n.querySelector('button[type="submit"]');Ee(t)})}async function Ee(n){let e="handleLoginAttempt";console.log(`${e}: Initiated.`);let t=document.getElementById("username"),s=document.getElementById("password");if(!t||!s){console.error(`${e}: Login form elements not found.`),c("Internal page error: Login form elements missing.","error");return}let a=t.value.trim(),i=s.value;if(!a){c("Username is required.","warning"),t.focus();return}if(!i){c("Password is required.","warning"),s.focus();return}n&&(n.disabled=!0),c("Attempting login...","info");let r=new FormData;r.append("username",a),r.append("password",i);try{let g=await fetch("/auth/token",{method:"POST",body:r,headers:{Accept:"application/json"}}),y=await g.json();if(g.ok&&y.access_token){y.access_token&&localStorage.setItem("jwt_token",y.access_token),c(y.message||"Login successful! Redirecting...","success");let u=new URLSearchParams(window.location.search).get("next");setTimeout(()=>{window.location.href=u||"/"},500)}else{let u=y.detail||y.message||"Login failed.";c(u,"error"),s&&(s.value=""),n&&(n.disabled=!1)}}catch(g){let y=`Network or processing error during login: ${g.message}`;c(y,"error"),s&&(s.value=""),n&&(n.disabled=!1)}}var j=$(()=>{E()});function G(n,e,t){if(console.log(`triggerBackup: Initiated. Server: '${e}', Type: '${t}'`),t==="all"){let r=`Perform a full backup (world + config) for server '${e}'?`;if(!confirm(r)){c("Full backup cancelled.","info");return}}let a={backup_type:t},i=`/api/server/${e}/backup/action`;v(null,i,"POST",a,n)}function L(n,e,t){if(console.log(`triggerSpecificConfigBackup: Initiated. Server: '${e}', File: '${t}'`),!t||!t.trim()){c("Internal error: No filename provided.","error");return}let a={backup_type:"config",file_to_backup:t.trim()},i=`/api/server/${e}/backup/action`;v(null,i,"POST",a,n)}function Se(n,e,t,s){if(console.log(`triggerRestore: Initiated. Server: '${e}', Type: '${t}', File: '${s}'`),!s||!s.trim()){c("Internal error: No backup file path provided.","error");return}let r=`Are you sure you want to restore backup '${s.trim().split(/[\\/]/).pop()}' for server '${e}'? This will OVERWRITE current data!`;if(!confirm(r)){c("Restore operation cancelled.","info");return}let g={restore_type:t.toLowerCase(),backup_file:s.trim()},y=`/api/server/${e}/restore/action`;v(null,y,"POST",g,n)}function Ie(n,e){console.log(`triggerRestoreAll: Initiated for server: '${e}'`);let s=`Are you sure you want to restore ALL latest backups for server '${e}'? This will OVERWRITE current world and configuration files!`;if(!confirm(s)){c("Restore All operation cancelled.","info");return}let a={restore_type:"all",backup_file:null},i=`/api/server/${e}/restore/action`;v(null,i,"POST",a,n)}async function T(n,e,t){let s="handleSelectBackupType";console.log(`${s}: Initiated for server '${e}', type '${t}'.`);let a={restore_type:t},i=`/api/server/${e}/restore/select_backup_type`;try{let r=await v(null,i,"POST",a,n);r&&r.status==="success"&&r.redirect_url?window.location.href=r.redirect_url:r&&r.message&&c(r.message,r.status==="success"?"success":"error")}catch(r){console.error(`${s}: Unexpected error: ${r.message}`,r),c("An unexpected error occurred.","error"),n&&(n.disabled=!1)}}function W(){console.log("Backup/Restore page script loaded.");let e=document.getElementById("backup-restore-page")?.dataset.serverName;document.getElementById("backup-world-btn")?.addEventListener("click",t=>G(t.currentTarget,e,"world")),document.getElementById("backup-all-btn")?.addEventListener("click",t=>G(t.currentTarget,e,"all")),document.getElementById("select-world-backup-btn")?.addEventListener("click",t=>T(t.currentTarget,e,"world")),document.getElementById("select-properties-backup-btn")?.addEventListener("click",t=>T(t.currentTarget,e,"properties")),document.getElementById("select-allowlist-backup-btn")?.addEventListener("click",t=>T(t.currentTarget,e,"allowlist")),document.getElementById("select-permissions-backup-btn")?.addEventListener("click",t=>T(t.currentTarget,e,"permissions")),document.getElementById("restore-all-btn")?.addEventListener("click",t=>Ie(t.currentTarget,e)),document.getElementById("backup-allowlist-btn")?.addEventListener("click",t=>L(t.currentTarget,e,"allowlist.json")),document.getElementById("backup-permissions-btn")?.addEventListener("click",t=>L(t.currentTarget,e,"permissions.json")),document.getElementById("backup-properties-btn")?.addEventListener("click",t=>L(t.currentTarget,e,"server.properties")),document.querySelectorAll(".restore-backup-btn").forEach(t=>{t.addEventListener("click",s=>{let a=s.currentTarget,i=a.dataset.restoreType,r=a.dataset.backupPath;Se(a,e,i,r)})})}var V=$(()=>{E()});function Ae(n,e,t){let a=`Install world '${t.split(/[\\/]/).pop()||t}' for server '${e}'?

WARNING: This will permanently REPLACE the current world data!`;if(!confirm(a)){c("World installation cancelled.","info");return}let i={filename:t},r=`/api/server/${e}/world/install`;v(null,r,"POST",i,n)}async function Te(n,e){let t=`/api/server/${e}/world/export`,s=await v(null,t,"POST",null,n);s&&s.status==="success"&&(c(s.message+" Refreshing list...","success"),setTimeout(()=>{window.location.reload()},2e3))}async function Pe(n,e){if(!confirm(`WARNING: Reset the current world for server '${e}'?`)){c("World reset cancelled.","info");return}let t=`/api/server/${e}/world/reset`;await v(null,t,"DELETE",null,n)}function Be(n,e,t){let a=`Install addon '${t.split(/[\\/]/).pop()||t}' for server '${e}'?`;if(!confirm(a)){c("Addon installation cancelled.","info");return}let i={filename:t},r=`/api/server/${e}/addon/install`;v(null,r,"POST",i,n)}function J(){console.log("Content management page script loaded.");let e=document.getElementById("content-management-page")?.dataset.serverName;document.getElementById("export-world-btn")?.addEventListener("click",t=>Te(t.currentTarget,e)),document.getElementById("reset-world-btn")?.addEventListener("click",t=>Pe(t.currentTarget,e)),document.querySelectorAll(".install-addon-btn").forEach(t=>{t.addEventListener("click",s=>{let a=s.currentTarget,i=a.dataset.addonPath;Be(a,e,i)})}),document.querySelectorAll(".import-world-btn").forEach(t=>{t.addEventListener("click",s=>{let a=s.currentTarget,i=a.dataset.worldPath;Ae(a,e,i)})})}var Q=$(()=>{E()});function P(){let n=document.getElementById("validation-error-area");n&&(n.innerHTML="",n.style.display="none"),document.querySelectorAll(".validation-error").forEach(e=>e.textContent="")}function Z(n){let e=n?.next_step_url,t=n?.message||"Server installed successfully!";e?(c(`${t} Proceeding to configuration...`,"success"),setTimeout(()=>window.location.href=e,1500)):c("Server installed, but next step URL is missing.","warning")}function Y(n,e){let t=setInterval(async()=>{try{let s=await fetch(`/api/tasks/status/${n}`);if(!s.ok){clearInterval(t),c(`Error checking task status: ${s.statusText}`,"error");return}let a=await s.json();a.status==="success"?(clearInterval(t),e?e(a.result):c(a.message||"Task completed successfully.","success")):a.status==="error"?(clearInterval(t),c(`Task failed: ${a.message}`,"error")):a.message&&c(`Task in progress: ${a.message}`,"info")}catch(s){clearInterval(t),c(`Error polling task status: ${s.message}`,"error")}},2e3)}async function Ce(n){let e=document.getElementById("install-server-name"),t=document.getElementById("install-server-version"),s=e.value.trim(),a=t.value.trim()||"LATEST";if(!s)return c("Server name cannot be empty.","warning");if(!/^[a-zA-Z0-9_-]+$/.test(s))return c("Server name has invalid characters.","error");P();let i={server_name:s,server_version:a,overwrite:!1};a.toUpperCase()==="CUSTOM"&&(i.server_zip_path=document.getElementById("custom-zip-selector").value);let r=await v(null,"/api/server/install","POST",i,n);if(r)if(r.status==="confirm_needed")if(confirm(r.message)){let g=await v(null,"/api/server/install","POST",{...i,overwrite:!0},n);g&&g.status==="pending"&&Y(g.task_id,Z)}else c("Installation cancelled.","info"),n&&(n.disabled=!1);else r.status==="pending"&&Y(r.task_id,Z)}async function xe(n,e,t){let s={};document.querySelectorAll('.properties-config-section .form-input, .properties-config-section .toggle-input, .properties-config-section input[type="hidden"]').forEach(r=>{r.name&&(r.type==="checkbox"&&r.classList.contains("toggle-input")?r.checked&&(s[r.name.replace("-cb","")]="true"):r.type==="hidden"?r.disabled||(s[r.name]=r.value):r.classList.contains("toggle-input")||(s[r.name]=r.value))}),P();let i=await v(null,`/api/server/${e}/properties/set`,"POST",{properties:s},n);if(i&&i.status==="success"){let r=i.message||"Properties saved.";t?(c(`${r} Proceeding to Allowlist...`,"success"),setTimeout(()=>window.location.href=`/server/${encodeURIComponent(e)}/configure_allowlist?new_install=True`,1500)):c(r,"success")}}async function Me(){let n=document.getElementById("permissions-loader"),e=document.getElementById("permissions-table-body"),t=document.getElementById("install-config-page"),s=t?.dataset.serverName;if(!e||!s){console.error("Required elements for loading permissions not found.");return}try{let a=await v(s,"permissions/get","GET",null,null,!0);if(e.innerHTML="",a&&a.status==="success"&&a.data&&a.data.permissions&&Array.isArray(a.data.permissions)){let i=document.getElementById("player-row-template"),r=document.getElementById("no-players-row-template");if(a.data.permissions.length>0)a.data.permissions.forEach(g=>{let y=i.content.cloneNode(!0);y.querySelector(".player-name").textContent=g.name,y.querySelector(".player-xuid").textContent=g.xuid;let u=y.querySelector(".permission-select");u.dataset.xuid=g.xuid,u.value=g.permission_level,e.appendChild(y)});else{let g=r.content.cloneNode(!0);e.appendChild(g)}t&&(t.style.display="block")}else c(a?.message||"Failed to load permissions.","error")}catch(a){c(`Client-side error loading permissions: ${a.message}`,"error")}finally{n&&(n.style.display="none")}}async function Ne(n,e,t){let s=Array.from(document.querySelectorAll("select.permission-select")).map(i=>({xuid:i.dataset.xuid,name:i.closest("tr").querySelector(".player-name").textContent.trim(),permission_level:i.value}));P();let a=await v(null,`/api/server/${e}/permissions/set`,"PUT",{permissions:s},n);if(a&&a.status==="success"){let i=a.message||"Permissions saved.";t?(c(`${i} Proceeding to Service Config...`,"success"),setTimeout(()=>window.location.href=`/server/${encodeURIComponent(e)}/configure_service?new_install=True`,1500)):c(i,"success")}}async function Re(n,e,t,s){let a={autoupdate:document.getElementById("service-autoupdate-cb").checked,autostart:document.getElementById("service-autostart-cb").checked},i=s&&document.getElementById("service-start-server").checked;P();let r=await v(null,`/api/server/${e}/service/update`,"POST",a,n);if(r&&["success","success_with_warning"].includes(r.status)){let g=r.message||"Service settings saved.";if(i){c(`${g} Starting server...`,"info");let y=await v(e,"start","POST",null,n);y&&y.status==="success"?(c("Server started! Installation complete. Redirecting...","success"),setTimeout(()=>window.location.href="/",2e3)):c(`Settings saved, but server failed to start: ${y?.message||"Unknown error"}`,"warning")}else s?(c(`${g} Installation complete! Redirecting...`,"success"),setTimeout(()=>window.location.href="/",1500)):c(g,"success")}}function X(){console.log("Install/config page script loaded.");let n=document.getElementById("install-config-page"),e=n?.dataset.serverName,t=n?.dataset.isNewInstall==="true",s=n?.dataset.os;if(document.getElementById("install-server-btn")?.addEventListener("click",u=>Ce(u.currentTarget)),document.getElementById("save-permissions-btn")?.addEventListener("click",u=>Ne(u.currentTarget,e,t)),document.getElementById("submit-properties-btn")?.addEventListener("click",u=>xe(u.currentTarget,e,t)),document.getElementById("save-service-settings-btn")?.addEventListener("click",u=>Re(u.currentTarget,e,s,t)),new URLSearchParams(window.location.search).has("in_setup")){let u=document.getElementById("setup-banner-container");u&&(u.innerHTML=`
            <div class="setup-banner">
                <h3>Step 3: Install a Server</h3>
                <p>
                    Install and configure your first Bedrock Server. This will include setting server.properties, allowlist, and other files.
                </p>
                <a href="/" class="action-button">Skip</a>
            </div>
        `)}document.querySelectorAll(".segmented-control").forEach(u=>{let b=document.getElementById(u.dataset.inputId);b&&u.querySelectorAll(".segment").forEach(l=>{l.addEventListener("click",o=>{o.preventDefault(),b.value=l.dataset.value,u.querySelectorAll(".segment").forEach(m=>m.classList.remove("active")),l.classList.add("active")})})}),document.querySelectorAll(".toggle-input").forEach(u=>{let b=u.closest(".form-group-toggle-container")?.querySelector(`.toggle-hidden-false[name="${u.name.replace("-cb","")}"]`);if(b){let l=()=>b.disabled=u.checked;u.addEventListener("change",l),l()}});let a=(u,b)=>{let l=document.getElementById(u);l&&(l.value=b)},i=(u,b)=>{let l=document.getElementById(u);l&&(l.checked=String(b).toLowerCase()==="true",l.dispatchEvent(new Event("change")))},r=(u,b)=>{let l=document.getElementById(u),o=document.querySelector(`[data-input-id="${u}"]`);if(l&&o){l.value=b,o.querySelectorAll(".segment").forEach(d=>d.classList.remove("active"));let m=o.querySelector(`.segment[data-value="${b}"]`);m&&m.classList.add("active")}};function g(u){let b={"server-name":{id:"server-name",type:"input"},"level-name":{id:"level-name",type:"input"},gamemode:{id:"gamemode-hidden",type:"segment"},difficulty:{id:"difficulty-hidden",type:"segment"},"allow-cheats":{id:"allow-cheats-cb",type:"toggle"},"max-players":{id:"max-players",type:"input"},"level-seed":{id:"level-seed",type:"input"},"server-port":{id:"server-port",type:"input"},"server-portv6":{id:"server-portv6",type:"input"},"enable-lan-visibility":{id:"enable-lan-visibility-cb",type:"toggle"},"allow-list":{id:"allow-list-cb",type:"toggle"},"default-player-permission-level":{id:"default-player-permission-level-hidden",type:"segment"},"view-distance":{id:"view-distance",type:"input"},"tick-distance":{id:"tick-distance",type:"input"},"online-mode":{id:"online-mode-cb",type:"toggle"},"texturepack-required":{id:"texturepack-required-cb",type:"toggle"}};for(let l in u)if(Object.prototype.hasOwnProperty.call(u,l)&&b[l]){let o=b[l],m=u[l];if(m===void 0)continue;switch(o.type){case"input":a(o.id,m);break;case"toggle":i(o.id,m);break;case"segment":r(o.id,m);break}}}async function y(){let u=document.getElementById("properties-loader"),b=document.getElementById("properties-form-container");try{let l=await v(e,"properties/get","GET",null,null);l&&l.status==="success"&&l.properties?(g(l.properties),b&&(b.style.display="block")):c(l?.message||"Failed to load server properties.","error")}catch(l){c(`Client-side error loading properties: ${l.message}`,"error")}finally{u&&(u.style.display="none")}}document.getElementById("properties-form-container")&&y(),document.getElementById("permissions-table-body")&&Me()}var K=$(()=>{E()});function ee(){let n="PluginManagerUI",e=document.getElementById("plugin-list"),t=document.getElementById("plugin-item-template"),s=document.getElementById("no-plugins-template"),a=document.getElementById("load-error-template"),i=document.getElementById("plugin-loader"),r=document.getElementById("reload-plugins-btn");if(!e||!t||!s||!a||!i||!r){console.error(`${n}: Critical page elements missing.`),e&&(e.innerHTML="<li>Page setup error.</li>");return}if(new URLSearchParams(window.location.search).has("in_setup")){let l=document.getElementById("setup-banner-container");l&&(l.innerHTML=`
        <div class="setup-banner">
            <h3>Step 2: Plugin Management</h3>
            <p>
                Here you can manage plugins. Reload plugins to apply any changes.<br>
                <strong>Note:</strong> Any plugins that add new FastAPI routes (such as the content_uploader_plugin) will require a server restart to take effect.
            </p>
            <a href="/install?in_setup=true" class="action-button">Continue to Server Installation</a>
        </div>
      `)}r.addEventListener("click",y);async function y(){r.disabled=!0;let l=r.innerHTML;r.innerHTML='<div class="spinner-small"></div> Reloading...';try{let o=await v(null,"/api/plugins/reload","PUT",null,r);o&&o.status==="success"&&await u()}finally{r.innerHTML=l,r.disabled&&(r.disabled=!1)}}async function u(){i.style.display="flex",e.querySelectorAll("li:not(#plugin-loader)").forEach(l=>l.remove());try{let l=await v(null,"/api/plugins","GET",null,null,!0);if(i.style.display="none",l&&l.status==="success"){let o=l.data;o&&Object.keys(o).length>0?Object.keys(o).sort((m,d)=>m.toLowerCase().localeCompare(d.toLowerCase())).forEach(m=>{let d=o[m],f=t.content.cloneNode(!0);f.querySelector(".plugin-name").textContent=m,f.querySelector(".plugin-version").textContent=`v${d.version||"N/A"}`;let h=f.querySelector(".plugin-toggle-switch");h.checked=d.enabled,h.dataset.pluginName=m,h.addEventListener("change",b),e.appendChild(f)}):e.appendChild(s.content.cloneNode(!0))}else e.appendChild(a.content.cloneNode(!0))}catch(l){i.style.display="none",e.appendChild(a.content.cloneNode(!0)),c(`Unexpected error fetching plugin data: ${l.message}`,"error")}}async function b(l){let o=l.target,m=o.dataset.pluginName,d=o.checked,f=await v(null,`/api/plugins/${m}`,"POST",{enabled:d},o);(!f||f.status!=="success")&&(o.checked=!d)}u(),console.log(`${n}: Plugin management page initialized.`)}var te=$(()=>{E()});function ne(){let n=document.getElementById("settings-form-container"),e=document.getElementById("settings-sidebar"),t=document.getElementById("reload-settings-btn"),s=document.getElementById("settings-loader"),a=document.getElementById("settings-form-section");if(!a||!n||!e||!t||!s){console.error("manage_settings.js: Critical elements not found.");return}if(new URLSearchParams(window.location.search).has("in_setup")){let o=document.getElementById("setup-banner-container");o&&(o.innerHTML=`
        <div class="setup-banner">
            <h3>Step 1: Global Settings</h3>
            <p>
                Modify the global settings for your Bedrock Server Manager instance. Reload the settings after making changes to apply them.<br>
                <strong>Note:</strong> Some settings may require a server restart to take effect.
            </p>
            <a href="/plugins?in_setup=true" class="action-button">Continue to Plugin Setup</a>
        </div>
      `)}let r=o=>{s.style.display=o?"block":"none",a.style.display=o?"none":"block",o&&(n.innerHTML="",e.innerHTML="")},g=o=>{r(!1),a.style.display="none",c(o,"error")},y=o=>{n.innerHTML="",e.innerHTML="";let m=0;Object.keys(o).sort().forEach(d=>{if(typeof o[d]!="object"||o[d]===null)return;let f=document.createElement("fieldset");f.id=`category-${d}`;let h=document.createElement("legend");h.textContent=d.charAt(0).toUpperCase()+d.slice(1),f.appendChild(h);let p=document.createElement("a");p.href=`#category-${d}`,p.className="nav-link",p.textContent=h.textContent,p.addEventListener("click",I=>{I.preventDefault(),document.querySelectorAll(".settings-nav .nav-link").forEach(S=>S.classList.remove("active")),p.classList.add("active"),f.scrollIntoView({behavior:"smooth"})}),e.appendChild(p);let w=0;Object.keys(o[d]).sort().forEach(I=>{let S=u(`${d}.${I}`,I,o[d][I]);S&&(f.appendChild(S),w++)}),w>0&&(n.appendChild(f),m+=w)}),m===0&&g("No configurable settings.")},u=(o,m,d)=>{let f=document.createElement("div");f.className="form-group";let h=document.createElement("label");h.htmlFor=o,h.textContent=(m.charAt(0).toUpperCase()+m.slice(1)).replace(/_/g," ");let p;if(typeof d=="boolean"){f.classList.add("form-group-toggle-container"),p=document.createElement("input"),p.type="checkbox",p.checked=d,p.className="toggle-input";let w=document.createElement("label");w.htmlFor=o,w.className="toggle-switch",f.append(h,p,w)}else f.appendChild(h),p=document.createElement("input"),p.className="form-input",Array.isArray(d)?(p.type="text",p.value=d.join(", "),p.placeholder="comma, separated, list"):(p.type=typeof d=="number"?"number":"text",p.value=d),f.appendChild(p);return p.id=o,p.name=o,p.addEventListener("change",b),f};async function b(o){let m=o.target,d=m.type==="checkbox"?m.checked:m.type==="number"?parseFloat(m.value):m.value;m.placeholder==="comma, separated, list"&&(d=d.split(",").map(f=>f.trim()).filter(Boolean)),await v(null,"/api/settings","POST",{key:m.name,value:d},null)}t.addEventListener("click",async()=>{if(confirm("Discard unsaved changes and reload from file?")){let o=await v(null,"/api/settings/reload","POST",null,t);o&&o.status==="success"&&await l()}});let l=async()=>{r(!0);try{let o=await v(null,"/api/settings","GET",null,null,!0);o&&o.status==="success"&&o.settings?y(o.settings):g(o?.message||"Error loading settings.")}catch(o){g(`Client-side error: ${o.message}`)}finally{r(!1)}};l()}var se=$(()=>{E()});function re(){let n=document.getElementById("settings-form-container"),e=document.getElementById("settings-sidebar"),t=document.getElementById("settings-loader"),s=document.getElementById("settings-form-section");if(!s||!n||!e||!t){console.error("server_settings.js: Critical elements not found.");return}let i=(()=>{let o=window.location.pathname.split("/"),m=o.indexOf("servers")+1;return o.length>m?o[m]:null})();if(!i){g("Could not determine server name from URL.");return}let r=o=>{t.style.display=o?"block":"none",s.style.display=o?"none":"block",o&&(n.innerHTML="",e.innerHTML="")},g=o=>{r(!1),s.style.display="none",c(o,"error")},y=o=>{n.innerHTML="",e.innerHTML="";let m=0;["server_info","settings","custom"].forEach(f=>{if(!o.hasOwnProperty(f)||typeof o[f]!="object"||o[f]===null)return;let h=document.createElement("fieldset");h.id=`category-${f}`;let p=document.createElement("legend");p.textContent=f.charAt(0).toUpperCase()+f.slice(1),h.appendChild(p);let w=document.createElement("a");w.href=`#category-${f}`,w.className="nav-link",w.textContent=p.textContent,w.addEventListener("click",S=>{S.preventDefault(),document.querySelectorAll(".sidebar-nav .nav-link").forEach(k=>k.classList.remove("active")),w.classList.add("active"),h.scrollIntoView({behavior:"smooth"})}),e.appendChild(w);let I=0;Object.keys(o[f]).sort().forEach(S=>{let k=u(`${f}.${S}`,S,o[f][S]);k&&(h.appendChild(k),I++)}),I>0&&(n.appendChild(h),m+=I)}),m===0&&g("No configurable settings found for this server.")},u=(o,m,d)=>{let f=document.createElement("div");f.className="form-group";let h=document.createElement("label");h.htmlFor=o,h.textContent=(m.charAt(0).toUpperCase()+m.slice(1)).replace(/_/g," ");let p;if(typeof d=="boolean"){f.classList.add("form-group-toggle-container"),p=document.createElement("input"),p.type="checkbox",p.checked=d,p.className="toggle-input";let w=document.createElement("label");w.htmlFor=o,w.className="toggle-switch",f.append(h,p,w)}else f.appendChild(h),p=document.createElement("input"),p.className="form-input",Array.isArray(d)?(p.type="text",p.value=d.join(", "),p.placeholder="comma, separated, list"):(p.type=typeof d=="number"?"number":"text",p.value=d),f.appendChild(p);return p.id=o,p.name=o,p.addEventListener("change",b),f};async function b(o){let m=o.target,d=m.type==="checkbox"?m.checked:m.type==="number"?parseFloat(m.value):m.value;m.placeholder==="comma, separated, list"&&(d=d.split(",").map(f=>f.trim()).filter(Boolean)),await v(null,`/api/servers/${i}/settings`,"POST",{key:m.name,value:d},null)}(async()=>{r(!0);try{let o=await v(null,`/api/servers/${i}/settings`,"GET",null,null,!0);o&&o.status==="success"&&o.settings?y(o.settings):g(o?.message||"Error loading server settings.")}catch(o){g(`Client-side error: ${o.message}`)}finally{r(!1)}})()}var oe=$(()=>{E()});function ae(){let n=document.getElementById("status-info");if(!n){console.error("Monitor page error: #status-info element not found.");return}let e=n.dataset.serverName;if(!e){n.textContent="Configuration Error: Server name missing.",c("Could not initialize monitoring: server name not found on page.","error");return}let t=null;async function s(){try{let a=await v(e,"process_info","GET",null,null,!0);if(a&&a.status==="success"&&a.data?.process_info){let i=a.data.process_info;n.textContent=`
PID          : ${i.pid??"N/A"}
CPU Usage    : ${i.cpu_percent!=null?i.cpu_percent.toFixed(1)+"%":"N/A"}
Memory Usage : ${i.memory_mb!=null?i.memory_mb.toFixed(1)+" MB":"N/A"}
Uptime       : ${i.uptime??"N/A"}
                `.trim()}else a&&a.status==="error"?n.textContent=`Error: ${a.message||"API error."}`:n.textContent="Server Status: STOPPED or process info not found."}catch(a){n.textContent=`Client-side error: ${a.message}`,c(`Client-side error fetching status: ${a.message}`,"error"),t&&clearInterval(t)}}s(),t=setInterval(s,2e3),window.addEventListener("beforeunload",()=>{t&&clearInterval(t)}),console.log(`Monitoring started for server: ${e}`)}var ie=$(()=>{E()});function le(){let n=document.querySelectorAll(".sidebar-nav .nav-link"),e=document.querySelectorAll(".main-content .content-section"),t=document.querySelectorAll(".sidebar-nav .has-submenu");if(n.length===0){console.warn("Sidebar navigation links not found.");return}function s(i){i.preventDefault();let r=i.currentTarget,g=r.dataset.target;if(!g)return;let y=document.getElementById(g);if(y){n.forEach(b=>b.classList.remove("active")),e.forEach(b=>b.classList.remove("active")),r.classList.add("active"),y.classList.add("active");let u=r.closest(".submenu");if(u){u.style.maxHeight=u.scrollHeight+"px";let b=u.previousElementSibling;b&&b.classList.contains("has-submenu")&&b.classList.add("active")}}}function a(i){i.preventDefault();let g=i.currentTarget.nextElementSibling;g&&g.classList.contains("submenu")&&(g.style.maxHeight=g.style.maxHeight?null:g.scrollHeight+"px")}n.forEach(i=>{i.dataset.target&&i.addEventListener("click",s)}),t.forEach(i=>{i.addEventListener("click",a)}),n.length>0&&n[0].dataset.target&&n[0].click(),console.log("Sidebar navigation initialized.")}var ce=$(()=>{});function de(){let n=new URLSearchParams(window.location.search),e=n.get("message"),t=n.get("category");if(e){typeof c=="function"?c(e,t):console.warn("showStatusMessage function not found. Cannot display message from URL.");let s=new URL(window.location.href);s.searchParams.delete("message"),s.searchParams.delete("category"),window.history.replaceState({},document.title,s.toString())}}var ue=$(()=>{E()});function _e(n){navigator.clipboard.writeText(n).then(()=>{alert("Copied to clipboard")},e=>{alert("Could not copy text: ",e)})}function Oe(){let n=document.getElementById("generate-token-form"),e=new FormData(n),t=Object.fromEntries(e.entries());v(null,"/register/generate-token","POST",t).then(s=>{s&&s.status==="success"&&(window.location.href=s.redirect_url)})}function Ue(n){confirm("Are you sure you want to disable this user?")&&v(null,`/users/${n}/disable`,"POST").then(e=>{e&&e.status==="success"&&window.location.reload()})}function De(n){confirm("Are you sure you want to enable this user?")&&v(null,`/users/${n}/enable`,"POST").then(e=>{e&&e.status==="success"&&window.location.reload()})}function ze(n){confirm("Are you sure you want to delete this user?")&&v(null,`/users/${n}/delete`,"POST").then(e=>{e&&e.status==="success"&&window.location.reload()})}function Fe(n){let t={role:document.getElementById(`role-${n}`).value};v(null,`/users/${n}/role`,"POST",t).then(s=>{s&&s.status==="success"&&window.location.reload()})}function me(){document.getElementById("generate-token-btn")?.addEventListener("click",Oe),document.querySelectorAll(".copy-link-btn").forEach(n=>{n.addEventListener("click",e=>{_e(e.currentTarget.dataset.link)})}),document.querySelectorAll(".update-role-btn").forEach(n=>{n.addEventListener("click",e=>{Fe(e.currentTarget.dataset.userId)})}),document.querySelectorAll(".disable-user-btn").forEach(n=>{n.addEventListener("click",e=>{Ue(e.currentTarget.dataset.userId)})}),document.querySelectorAll(".enable-user-btn").forEach(n=>{n.addEventListener("click",e=>{De(e.currentTarget.dataset.userId)})}),document.querySelectorAll(".delete-user-btn").forEach(n=>{n.addEventListener("click",e=>{ze(e.currentTarget.dataset.userId)})})}var ge=$(()=>{E()});function He(){let n=document.getElementById("register-form"),e=document.getElementById("username").value,t=document.getElementById("password").value,s=document.getElementById("confirm_password").value;if(!e||!t||!s){c("All fields are required.","error");return}if(t!==s){c("Passwords do not match.","error");return}let a=new FormData(n),i=Object.fromEntries(a.entries()),r=document.getElementById("register-form").dataset.token;v(null,`/register/${r}`,"POST",i).then(g=>{g&&g.status==="success"&&(window.location.href=g.redirect_url)})}function pe(){let n=document.getElementById("register-form");n&&n.addEventListener("submit",e=>{e.preventDefault(),He()})}var fe=$(()=>{E()});function je(){let n=document.getElementById("setup-form"),e=document.getElementById("username").value,t=document.getElementById("password").value,s=document.getElementById("confirm_password").value;if(!e||!t||!s){c("All fields are required.","error");return}if(t!==s){c("Passwords do not match.","error");return}let a=new FormData(n),i=Object.fromEntries(a.entries());v(null,"/setup/create-first-user","POST",i).then(r=>{r&&r.status==="success"&&(window.location.href=r.redirect_url)})}function ve(){let n=document.getElementById("setup-form");n&&n.addEventListener("submit",e=>{e.preventDefault(),je()})}var ye=$(()=>{E()});var Ge=he(()=>{B();O();D();F();j();V();Q();K();te();se();oe();ie();ce();ue();ge();fe();ye();document.addEventListener("DOMContentLoaded",()=>{le(),de(),document.getElementById("server-card-list")?_():document.getElementById("change-password-form")?U():document.getElementById("current-allowlist-display")?z():document.getElementById("login-form")?H():document.getElementById("backup-restore-page")?W():document.getElementById("content-management-page")?J():document.getElementById("install-config-page")?X():document.getElementById("plugin-list")?ee():document.getElementById("settings-form-container")?window.location.pathname.startsWith("/servers/")?re():ne():document.getElementById("status-info")?ae():document.getElementById("user-management-section")?me():document.getElementById("register-form")?pe():document.getElementById("setup-form")&&ve(),console.log("main.js loaded and initialized")})});Ge();})();
//# sourceMappingURL=bundle.js.map
