# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Appointment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appointment_id': 'str',
        'appointment_status': 'str',
        'appointment_time': 'AppointmentTime',
        'assigned_technicians': 'List[Technician]',
        'rescheduled_appointment_id': 'str',
        'poa': 'Poa',
    }

    attribute_map = {
        'appointment_id': 'appointmentId',
        'appointment_status': 'appointmentStatus',
        'appointment_time': 'appointmentTime',
        'assigned_technicians': 'assignedTechnicians',
        'rescheduled_appointment_id': 'rescheduledAppointmentId',
        'poa': 'poa',
    }

    def __init__(self, appointment_id=None, appointment_status=None, appointment_time=None, assigned_technicians=None, rescheduled_appointment_id=None, poa=None, _configuration=None):  # noqa: E501
        """Appointment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._appointment_id = None
        self._appointment_status = None
        self._appointment_time = None
        self._assigned_technicians = None
        self._rescheduled_appointment_id = None
        self._poa = None
        self.discriminator = None

        if appointment_id is not None:
            self.appointment_id = appointment_id
        if appointment_status is not None:
            self.appointment_status = appointment_status
        if appointment_time is not None:
            self.appointment_time = appointment_time
        if assigned_technicians is not None:
            self.assigned_technicians = assigned_technicians
        if rescheduled_appointment_id is not None:
            self.rescheduled_appointment_id = rescheduled_appointment_id
        if poa is not None:
            self.poa = poa

    @property
    def appointment_id(self):
        """Gets the appointment_id of this Appointment.  # noqa: E501

        The appointment identifier.  # noqa: E501

        :return: The appointment_id of this Appointment.  # noqa: E501
        :rtype: str
        """
        return self._appointment_id

    @appointment_id.setter
    def appointment_id(self, appointment_id):
        """Sets the appointment_id of this Appointment.

        The appointment identifier.  # noqa: E501

        :param appointment_id: The appointment_id of this Appointment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                appointment_id is not None and len(appointment_id) > 100):
            raise ValueError("Invalid value for `appointment_id`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                appointment_id is not None and len(appointment_id) < 5):
            raise ValueError("Invalid value for `appointment_id`, length must be greater than or equal to `5`")  # noqa: E501

        self._appointment_id = appointment_id

    @property
    def appointment_status(self):
        """Gets the appointment_status of this Appointment.  # noqa: E501

        The status of the appointment.  # noqa: E501

        :return: The appointment_status of this Appointment.  # noqa: E501
        :rtype: str
        """
        return self._appointment_status

    @appointment_status.setter
    def appointment_status(self, appointment_status):
        """Sets the appointment_status of this Appointment.

        The status of the appointment.  # noqa: E501

        :param appointment_status: The appointment_status of this Appointment.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                appointment_status not in allowed_values):
            raise ValueError(
                "Invalid value for `appointment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(appointment_status, allowed_values)
            )

        self._appointment_status = appointment_status

    @property
    def appointment_time(self):
        """Gets the appointment_time of this Appointment.  # noqa: E501


        :return: The appointment_time of this Appointment.  # noqa: E501
        :rtype: AppointmentTime
        """
        return self._appointment_time

    @appointment_time.setter
    def appointment_time(self, appointment_time):
        """Sets the appointment_time of this Appointment.


        :param appointment_time: The appointment_time of this Appointment.  # noqa: E501
        :type: AppointmentTime
        """

        self._appointment_time = appointment_time

    @property
    def assigned_technicians(self):
        """Gets the assigned_technicians of this Appointment.  # noqa: E501

        A list of technicians assigned to the service job.  # noqa: E501

        :return: The assigned_technicians of this Appointment.  # noqa: E501
        :rtype: List[Technician]
        """
        return self._assigned_technicians

    @assigned_technicians.setter
    def assigned_technicians(self, assigned_technicians):
        """Sets the assigned_technicians of this Appointment.

        A list of technicians assigned to the service job.  # noqa: E501

        :param assigned_technicians: The assigned_technicians of this Appointment.  # noqa: E501
        :type: List[Technician]
        """
        if (self._configuration.client_side_validation and
                assigned_technicians is not None and len(assigned_technicians) < 1):
            raise ValueError("Invalid value for `assigned_technicians`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._assigned_technicians = assigned_technicians

    @property
    def rescheduled_appointment_id(self):
        """Gets the rescheduled_appointment_id of this Appointment.  # noqa: E501

        The appointment identifier.  # noqa: E501

        :return: The rescheduled_appointment_id of this Appointment.  # noqa: E501
        :rtype: str
        """
        return self._rescheduled_appointment_id

    @rescheduled_appointment_id.setter
    def rescheduled_appointment_id(self, rescheduled_appointment_id):
        """Sets the rescheduled_appointment_id of this Appointment.

        The appointment identifier.  # noqa: E501

        :param rescheduled_appointment_id: The rescheduled_appointment_id of this Appointment.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                rescheduled_appointment_id is not None and len(rescheduled_appointment_id) > 100):
            raise ValueError("Invalid value for `rescheduled_appointment_id`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                rescheduled_appointment_id is not None and len(rescheduled_appointment_id) < 5):
            raise ValueError("Invalid value for `rescheduled_appointment_id`, length must be greater than or equal to `5`")  # noqa: E501

        self._rescheduled_appointment_id = rescheduled_appointment_id

    @property
    def poa(self):
        """Gets the poa of this Appointment.  # noqa: E501


        :return: The poa of this Appointment.  # noqa: E501
        :rtype: Poa
        """
        return self._poa

    @poa.setter
    def poa(self, poa):
        """Sets the poa of this Appointment.


        :param poa: The poa of this Appointment.  # noqa: E501
        :type: Poa
        """

        self._poa = poa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Appointment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Appointment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Appointment):
            return True

        return self.to_dict() != other.to_dict()
