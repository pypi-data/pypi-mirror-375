{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "0",
  "json_content_version": "1",
  "function_name": "read_nos",
  "function_version": "1.0",
  "function_type": "table_operator",
  "function_alias_name": "read_nos",
  "function_r_name": "read.nos",
  "short_description": "This function enables access to external files in JSON, CSV, or Parquet format.",
  "long_description": "This function enables access to external files in JSON, CSV, or Parquet format. You must have the EXECUTE FUNCTION privilege on TD_SYSFNLIB.READ_NOS.",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByAny"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "input",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the teradataml DataFrame containing the input data.",
      "description": "Specifies the table containing the input data.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    }
  ],
  "argument_clauses": [
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "LOCATION",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the location value, which is a Uniform Resource Identifier (URI) pointing to the data in the external object storage system. The location value includes the following components:\nAmazon S3: /connector/bucket.endpoint/[key_prefix].\nAzure Blob storage and Azure Data Lake Storage Gen2: /connector/container.endpoint/[key_prefix].\nGoogle Cloud Storage: /connector/endpoint/bucket/[key_prefix].\nconnector: Identifies the type of external storage system where the data is located. Teradata requires the storage location to start with the following for all external storage locations:\nAmazon S3 storage location must begin with /S3 or /s3\nAzure Blob storage location (including Azure Data Lake Storage Gen2 in Blob Interop Mode) must begin with /AZ or /az\nGoogle Cloud Storage location must begin with /GS or /gs.\nendpoint: A URL that identifies the system-specific entry point for the external object storage system.\nbucket (Amazon S3, Google Cloud Storage) or container (Azure Blob storage and Azure Data Lake Storage Gen2): A container that logically groups stored objects in the external storage system.\nkey_prefix: Identifies one or more objects in the logical organization of the bucket data. Because it is a key prefix, not an actual directory path, the key prefix may match one or more objects in the external storage. For example, the key prefix '/fabrics/cotton/colors/b/' would match objects: /fabrics/cotton/colors/blue, /fabrics/cotton/colors/brown, and /fabrics/cotton/colors/black. If there were organization levels below those, such as /fabrics/cotton/colors/blue/shirts, the same key prefix would gather those objects too.\nNote: Vantage validates only the first file it encounters from the location key prefix.\nFor example, this location value might specify all objects on an Amazon cloud storage system for the month of December, 2001:\nlocation = '/S3/YOUR-BUCKET.s3.amazonaws.com/csv/US-Crimes/csv-files/2001/Dec/'\nconnector: S3, bucket: YOUR-BUCKET, endpoint:s3.amazonaws.com, key_prefix: csv/US-Crimes/csv-files/2001/Dec/\nThis location could specify an individual storage object (or file), Day1.csv:\nlocation = '/S3/YOUR-BUCKET.s3.amazonaws.com/csv/US-Crimes/csv-files/2001/Dec/Day1.csv'\nconnector: S3, bucket: YOUR-BUCKET, endpoint:s3.amazonaws.com, key_prefix: csv/US-Crimes/csv-files/2001/Dec/Day11.csv\nThis location specifies an entire container in an Azure external object store (Azure Blob storage or Azure Data Lake Storage Gen2). The container may contain multiple file objects:\nlocation = '/AZ/YOUR-STORAGE-ACCOUNT.blob.core.windows.net/nos-csv-data'\nconnector: AZ, bucket: YOUR-STORAGE-ACCOUNT, endpoint: blob.core.windows.net, key_prefix: nos-csv-data\nThis is an example of a Google Cloud Storage location:\nconnector: GS, bucket: YOUR-BUCKET, endpoint: storage.googleapis.com, key_prefix: CSVDATA/RIVERS/rivers.csv",
      "description": "Specifies the location value, which is a Uniform Resource Identifier (URI) pointing to the data in the external object storage system. The location value includes the following components:\nAmazon S3: /connector/bucket.endpoint/[key_prefix].\nAzure Blob storage and Azure Data Lake Storage Gen2: /connector/container.endpoint/[key_prefix].\nGoogle Cloud Storage: /connector/endpoint/bucket/[key_prefix].\nconnector: Identifies the type of external storage system where the data is located. Teradata requires the storage location to start with the following for all external storage locations:\nAmazon S3 storage location must begin with /S3 or /s3\nAzure Blob storage location (including Azure Data Lake Storage Gen2 in Blob Interop Mode) must begin with /AZ or /az\nGoogle Cloud Storage location must begin with /GS or /gs.\nendpoint: A URL that identifies the system-specific entry point for the external object storage system.\nbucket (Amazon S3, Google Cloud Storage) or container (Azure Blob storage and Azure Data Lake Storage Gen2): A container that logically groups stored objects in the external storage system.\nkey_prefix: Identifies one or more objects in the logical organization of the bucket data. Because it is a key prefix, not an actual directory path, the key prefix may match one or more objects in the external storage. For example, the key prefix '/fabrics/cotton/colors/b/' would match objects: /fabrics/cotton/colors/blue, /fabrics/cotton/colors/brown, and /fabrics/cotton/colors/black. If there were organization levels below those, such as /fabrics/cotton/colors/blue/shirts, the same key prefix would gather those objects too.\nNote: Vantage validates only the first file it encounters from the location key prefix.\nFor example, this location value might specify all objects on an Amazon cloud storage system for the month of December, 2001:\nlocation = '/S3/YOUR-BUCKET.s3.amazonaws.com/csv/US-Crimes/csv-files/2001/Dec/'\nconnector: S3, bucket: YOUR-BUCKET, endpoint:s3.amazonaws.com, key_prefix: csv/US-Crimes/csv-files/2001/Dec/\nThis location could specify an individual storage object (or file), Day1.csv:\nlocation = '/S3/YOUR-BUCKET.s3.amazonaws.com/csv/US-Crimes/csv-files/2001/Dec/Day1.csv'\nconnector: S3, bucket: YOUR-BUCKET, endpoint:s3.amazonaws.com, key_prefix: csv/US-Crimes/csv-files/2001/Dec/Day11.csv\nThis location specifies an entire container in an Azure external object store (Azure Blob storage or Azure Data Lake Storage Gen2). The container may contain multiple file objects:\nlocation = '/AZ/YOUR-STORAGE-ACCOUNT.blob.core.windows.net/nos-csv-data'\nconnector: AZ, bucket: YOUR-STORAGE-ACCOUNT, endpoint: blob.core.windows.net, key_prefix: nos-csv-data\nThis is an example of a Google Cloud Storage location:\nconnector: GS, bucket: YOUR-BUCKET, endpoint: storage.googleapis.com, key_prefix: CSVDATA/RIVERS/rivers.csv",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "location",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "AUTHORIZATION",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the authorization for accessing external storage. On any platform, you can specify an authorization object ([DatabaseName.]AuthorizationObjectName). You must have the EXECUTE privilege on AuthorizationObjectName. On Amazon S3 and Azure Blob storage and Azure Data Lake Storage Gen2, you can specify either an authorization object or a string in JSON format. The string specifies the USER (identification) and PASSWORD (secret_key) for accessing external storage. The following table shows the supported credentials for USER and PASSWORD (used in the CREATE AUTHORIZATION command):\n\nSystem/Scheme                       |USER                           |PASSWORD\nAWS                                 |Access Key ID                  |Access Key Secret\nAzure / Shared Key                  |Storage Account Name           |Storage Account Key\nAzure Shared Access Signature (SAS) |Storage Account Name           |Account SAS Token\nGoogle Cloud (S3 interop mode)      |Access Key ID                  |Access Key Secret\nGoogle Cloud (native)               |Client Email                   |Private Key\nOn-premises object stores           |Access Key ID                  |Access Key Secret\nPublic access object stores         |<empty string>                 |<empty string>\n                                    |Enclose the empty string in    |Enclose the empty string in\n                                    |single straight quotes: USER ''| single straight quotes: PASSWORD ''\nIf you use a function mapping to define a wrapper for READ_NOS, you can specify the authorization in the function mapping. Note that [ INVOKER | DEFINER ] TRUSTED must be used with function mapping. If you are using AWS IAM credentials, you can omit the AUTHORIZATION clause. When accessing GCS, Advanced SQL Engine uses either the S3-compatible connector or the native Google connector, depending on the user credentials.",
      "description": "Specifies the authorization for accessing external storage. On any platform, you can specify an authorization object ([DatabaseName.]AuthorizationObjectName). You must have the EXECUTE privilege on AuthorizationObjectName. On Amazon S3 and Azure Blob storage and Azure Data Lake Storage Gen2, you can specify either an authorization object or a string in JSON format. The string specifies the USER (identification) and PASSWORD (secret_key) for accessing external storage. The following table shows the supported credentials for USER and PASSWORD (used in the CREATE AUTHORIZATION command):\n\nSystem/Scheme                       |USER                           |PASSWORD\nAWS                                 |Access Key ID                  |Access Key Secret\nAzure / Shared Key                  |Storage Account Name           |Storage Account Key\nAzure Shared Access Signature (SAS) |Storage Account Name           |Account SAS Token\nGoogle Cloud (S3 interop mode)      |Access Key ID                  |Access Key Secret\nGoogle Cloud (native)               |Client Email                   |Private Key\nOn-premises object stores           |Access Key ID                  |Access Key Secret\nPublic access object stores         |<empty string>                 |<empty string>\n                                    |Enclose the empty string in    |Enclose the empty string in\n                                    |single straight quotes: USER ''| single straight quotes: PASSWORD ''\nIf you use a function mapping to define a wrapper for READ_NOS, you can specify the authorization in the function mapping. Note that [ INVOKER | DEFINER ] TRUSTED must be used with function mapping. If you are using AWS IAM credentials, you can omit the AUTHORIZATION clause. When accessing GCS, Advanced SQL Engine uses either the S3-compatible connector or the native Google connector, depending on the user credentials.",
      "datatype": ["STRING", "JSON"],
      "allowsLists": false,
      "rName": "authorization",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "permittedValues": ["NOSREAD_RECORD", "NOSREAD_KEYS", "NOSREAD_SCHEMA", "NOSREAD_PARQUET_SCHEMA"],
      "defaultValue": "NOSREAD_RECORD",
      "isOutputColumn": false,
      "name": "RETURNTYPE",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the format in which data is returned.\nNOSREAD_RECORD: Returns one row for each external record along with its metadata. This is the default. Access external records by specifying one of the following:\n* Input table and location and an empty table. For CSV, you can include a schema definition.\n* Input table with a row for each external file. For CSV, this method does not support a schema definition.\nFor an empty single-column input table, do the following:\n* Define an input table with a single column, Payload, with the appropriate data type: JSON and DATASET with a Storage Format of CSV. This column determines the output Payload column return type.\n* For location, specify the filepath.\nFor a multiple-column input table, define an input table with the following columns:\n* Location VARCHAR(2048) CHARACTER SET UNICODE\n* ObjectVersionID VARCHAR(1024) CHARACTER SET UNICODE\n* ObjectVersionID VARCHAR(1024) CHARACTER SET UNICODE\n* OffsetIntoObject BIGINT\n* ObjectLength BIGINT\n* Payload JSON or VARCHAR for CSV\nThis table can be populated using the output of the NOSREAD_KEYS return type.\nNOSREAD_KEYS: Retrieve the list of files from the path specified in the LOCATION USING clause. A schema definition is not necessary. Returns: Location, ObjectVersionID, ObjectTimeStamp, ObjectLength, size of external file.",
      "description": "Specifies the format in which data is returned.\nNOSREAD_RECORD: Returns one row for each external record along with its metadata. This is the default. Access external records by specifying one of the following:\n* Input table and location and an empty table. For CSV, you can include a schema definition.\n* Input table with a row for each external file. For CSV, this method does not support a schema definition.\nFor an empty single-column input table, do the following:\n* Define an input table with a single column, Payload, with the appropriate data type: JSON and DATASET with a Storage Format of CSV. This column determines the output Payload column return type.\n* For location, specify the filepath.\nFor a multiple-column input table, define an input table with the following columns:\n* Location VARCHAR(2048) CHARACTER SET UNICODE\n* ObjectVersionID VARCHAR(1024) CHARACTER SET UNICODE\n* ObjectVersionID VARCHAR(1024) CHARACTER SET UNICODE\n* OffsetIntoObject BIGINT\n* ObjectLength BIGINT\n* Payload JSON or VARCHAR for CSV\nThis table can be populated using the output of the NOSREAD_KEYS return type.\nNOSREAD_KEYS: Retrieve the list of files from the path specified in the LOCATION USING clause. A schema definition is not necessary. Returns: Location, ObjectVersionID, ObjectTimeStamp, ObjectLength, size of external file.", 
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "return.type",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "permittedValues": [],
      "defaultValue": 1.0,
      "lowerBound": 0.0,
      "upperBound": 1.0,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "isOutputColumn": false,
      "name": "SAMPLE_PERC",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the percentage of rows to retrieve from the external storage repository when return.type is NOSREAD_RECORD. The valid range of values is from '0.0' to '1.0', where '1.0' represents 100% of the rows. The default value is 1.0.",
      "description": "Specifies the percentage of rows to retrieve from the external storage repository when return.type is NOSREAD_RECORD. The valid range of values is from '0.0' to '1.0', where '1.0' represents 100% of the rows. The default value is 1.0.",
      "datatype": "DOUBLE PRECISION",
      "allowsLists": false,
      "rName": "sample.perc",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": ["PARQUET", "TEXTFILE"],
      "defaultValue": "TEXTFILE",
      "isOutputColumn": false,
      "name": "STOREDAS",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the formatting style of the external data.\nPARQUET means the external data is formatted as Parquet. This is a required parameter for Parquet data.\nTEXTFILE means the external data uses a text-based format, such as CSV or JSON.\nThe default is TEXTFILE.",
      "description": "Specifies the formatting style of the external data.\nPARQUET means the external data is formatted as Parquet. This is a required parameter for Parquet data.\nTEXTFILE means the external data uses a text-based format, such as CSV or JSON.\nThe default is TEXTFILE.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "stored.as",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "SCANPCT",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the percentage of data to scans to discover the schema.",
      "description": "Specifies the percentage of data to scans to discover the schema.",
      "datatype": "DOUBLE PRECISION",
      "allowsLists": false,
      "rName": "scan.pct",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "permittedValues": [],
      "defaultValue": false,
      "isOutputColumn": false,
      "name": "MANIFEST",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the location value points to a manifest file (a file containing a list of files to read) or object name. The object name can include the full path or a partial path. It must identify a single file containing the manifest. Note: The individual entries within the manifest file must show complete paths. Below is an example of a manifest file that contains a list of entries to locations in JSON format\n{\n  \"entries\": [\n      {\"url\":\"s3://nos-core-us-east-1/UNICODE/JSON/mln-key/data-10/data-8_9_02-10.json\"},\n      {\"url\":\"s3://nos-core-us-east-1/UNICODE/JSON/mln-key/data-10/data-8_9_02-101.json\"},\n      {\"url\":\"s3://nos-core-us-east-1/UNICODE/JSON/mln-key/data-10/data-10-01/data-8_9_02-102.json\"},\n      {\"url\":\"s3://nos-core-us-east-1/UNICODE/JSON/mln-key/data-10/data-10-01/data-8_9_02-103.json\"}\n   ]\n}",
      "description": "Specifies whether the LOCATION value points to a manifest file (a file containing a list of files to read) or object name. The object name can include the full path or a partial path. It must identify a single file containing the manifest. Note: The individual entries within the manifest file must show complete paths. Below is an example of a manifest file that contains a list of entries to locations in JSON format\n{\n  \"entries\": [\n      {\"url\":\"s3://nos-core-us-east-1/UNICODE/JSON/mln-key/data-10/data-8_9_02-10.json\"},\n      {\"url\":\"s3://nos-core-us-east-1/UNICODE/JSON/mln-key/data-10/data-8_9_02-101.json\"},\n      {\"url\":\"s3://nos-core-us-east-1/UNICODE/JSON/mln-key/data-10/data-10-01/data-8_9_02-102.json\"},\n      {\"url\":\"s3://nos-core-us-east-1/UNICODE/JSON/mln-key/data-10/data-10-01/data-8_9_02-103.json\"}\n   ]\n}",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "manifest",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "permittedValues": ["DELTALAKE"],
      "isOutputColumn": false,
      "name": "TABLE_FORMAT",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the table format of the tables specified in manifest file.",
      "description": "Specifies the table format of the tables specified in manifest file.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "table.format",
      "langName": "table_format",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "ROWFORMAT",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the encoding format of the external row, for example:\nrow.format = '{\"field_delimiter\":\",\", \"record_delimiter\":\"\n\", \"character_set\":\"LATIN\"}'.\nSpecify row_format using JSON format. It can include only the three keys shown above. Key names and values are case-specific, except for the value for \"character_set\", which can use any combination of letter cases.\nThe row.format character set specification must be compatible with character set of the Payload column. Do not specify row.format for Parquet format data. For a JSON column, these are the default values:\nUNICODE: row.format = '{\"record_delimiter\":\"\n\", \"character_set\":\"UTF8\"}'\nLATIN: row.format = '{\"record_delimiter\":\"\n\", \"character_set\":\"LATIN\"}'\nFor a CSV column, these are the default values:\nUNICODE: row.format = '{\"character_set\":\"UTF8\"}'\nThis is the default if you do not specify an input table for read.nos.\nLATIN: row.format = '{\"character_set\":\"LATIN\"}'\nYou can specify the following options:\nfield_delimiter-> The default is ',' (comma). You can also specify a custom field delimiter, such as tab '\t'.\nrecord_delimiter-> New line feed character: '\n'. A line feed (\n) is the only acceptable record delimiter.\ncharacter_set -> 'UTF8' or 'LATIN'. If you do not specify a row.format or payload column, Vantage assumes UTF8 Unicode.",
      "description": "Specifies the encoding format of the external row, for example:\nROWFORMAT('{\"field_delimiter\":\",\", \"record_delimiter\":\"\n\", \"character_set\":\"LATIN\"}').\nSpecify ROWFORMAT using JSON format. It can include only the three keys shown above. Key names and values are case-specific, except for the value for \"character_set\", which can use any combination of letter cases.\nThe ROWFORMAT character set specification must be compatible with character set of the Payload column. Do not specify ROWFORMAT for Parquet format data. For a JSON column, these are the default values:\nUNICODE: ROWFORMAT('{\"record_delimiter\":\"\n\", \"character_set\":\"UTF8\"}')\nLATIN: ROWFORMAT('{\"record_delimiter\":\"\n\", \"character_set\":\"LATIN\"}')\nFor a CSV column, these are the default values:\nUNICODE: ROWFORMAT('{\"character_set\":\"UTF8\"}')\nThis is the default if you do not specify an input table for READ_NOS.\nLATIN: ROWFORMAT('{\"character_set\":\"LATIN\"}')\nYou can specify the following options:\nfield_delimiter-> The default is ',' (comma). You can also specify a custom field delimiter, such as tab '\t'.\nrecord_delimiter-> New line feed character: '\n'. A line feed (\n) is the only acceptable record delimiter.\ncharacter_set -> 'UTF8' or 'LATIN'. If you do not specify a ROWFORMAT or payload column, Vantage assumes UTF8 Unicode.",
      "datatype": ["STRING", "JSON"],
      "allowsLists": false,
      "rName": "row.format",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "permittedValues": [],
      "defaultValue": true,
      "isOutputColumn": false,
      "name": "HEADER",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the first row of data in an input CSV file is interpreted as column headings for the subsequent rows of data. Use this parameter only when a CSV input file is not associated with a separate schema object that defines columns for the CSV data. The value for header can be 'True' or 'False'. The default is 'True'.",
      "description": "Specifies whether the first row of data in an input CSV file is interpreted as column headings for the subsequent rows of data. Use this parameter only when a CSV input file is not associated with a separate schema object that defines columns for the CSV data. The value for HEADER can be 'TRUE' or 'FALSE'. The default is 'TRUE'.",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "header",
      "useInR": true,
      "rOrderNum": 11
    }
  ]
}