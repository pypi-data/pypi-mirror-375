# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.context import multi_conn_instance
from tapir_archicad_mcp.tools.tool_registry import register_tool_for_dispatch

from multiconn_archicad.models.official.commands import (
    IsAddOnCommandAvailableParameters,
IsAddOnCommandAvailableResult
)


log = logging.getLogger()

def is_add_on_command_available(port: int, params: IsAddOnCommandAvailableParameters) -> IsAddOnCommandAvailableResult:
    """
    Checks if the command is available or not.
    """
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_command(
            command="API.IsAddOnCommandAvailable",
            parameters=params.model_dump(mode='json')
        )
        return IsAddOnCommandAvailableResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for IsAddOnCommandAvailable result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing IsAddOnCommandAvailable on port {port}: {e}")
        raise e


register_tool_for_dispatch(
    is_add_on_command_available,
    name="dev_is_add_on_command_available",
    title="IsAddOnCommandAvailable",
    description="Checks if the command is available or not.",
    params_model=IsAddOnCommandAvailableParameters,
    result_model=IsAddOnCommandAvailableResult
)
