"""convert time to utc

Revision ID: c867b432fc6a
Revises: c077798e06b9
Create Date: 2024-05-16 15:23:08.946190

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text
from datetime import timezone, datetime

# revision identifiers, used by Alembic.
revision: str = 'c867b432fc6a'
down_revision: Union[str, None] = 'c077798e06b9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_context().bind
    # for datasets
    res = bind.execute(text("SELECT datasets.id, datasets.collected FROM datasets;"""))
    for row in res:
        if row[1] is not None:
            bind.execute(text(f"""UPDATE datasets SET collected = '{datetime.fromisoformat(row[1]).astimezone(timezone.utc).replace(tzinfo=None).isoformat(' ')}' WHERE id = {row[0]};"""))
    
    # for files
    res = bind.execute(text("SELECT files.id, files.collected FROM files;"""))
    for row in res:
        if row[1] is not None:
            bind.execute(text(f"""UPDATE files SET collected = '{datetime.fromisoformat(row[1]).astimezone(timezone.utc).replace(tzinfo=None).isoformat(' ')}' WHERE id = {row[0]};"""))
    
    # for users
    res = bind.execute(text("SELECT users.id, users.disable_on FROM users"))
    for row in res:
        if row[1] is not None:
            bind.execute(text(f"""UPDATE users SET disable_on = '{datetime.fromisoformat(row[1]).astimezone(timezone.utc).replace(tzinfo=None).isoformat(' ')}' WHERE id = {row[0]};"""))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
