Metadata-Version: 2.4
Name: anpseisearch
Version: 0.1.1
Summary: Ferramenta para extra√ß√£o de dados de processos no SEI da ANP
Author: Igor Carvalho Ramos Leal
Author-email: igorcarvalhh@gmail.com
License: MIT
Keywords: sei,anp,processos,busca
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: beautifulsoup4
Requires-Dist: lxml
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Dynamic: license-file

# üìö Biblioteca `anpseisearch`

A biblioteca **`anpseisearch`** foi desenvolvida para permitir consultas automatizadas de processos e documentos no **SEI da ANP** (Ag√™ncia Nacional do Petr√≥leo, G√°s Natural e Biocombust√≠veis). Ela permite que voc√™ busque protocolos, documentos e processos usando **filtros detalhados**, retornando os resultados de forma organizada em listas de registros com informa√ß√µes como protocolo, descri√ß√£o, unidade, data e link direto para o processo/documento.

Esta biblioteca √© especialmente √∫til para profissionais ou pesquisadores que precisam monitorar processos ou extrair dados do SEI de maneira r√°pida e automatizada, sem precisar acessar manualmente o sistema.

## 1Ô∏è‚É£ Pr√©-requisitos

Antes de come√ßar a usar a biblioteca, √© necess√°rio **instalar o Python**, que √© a linguagem de programa√ß√£o em que a biblioteca foi desenvolvida. Tamb√©m precisaremos do **pip**, que √© a ferramenta que permite instalar bibliotecas no Python.

### a) Instalar Python

1. Acesse o site oficial do Python: [https://www.python.org/downloads/](https://www.python.org/downloads/)
2. Baixe a vers√£o mais recente recomendada para o seu sistema operacional (Windows, macOS ou Linux).
3. Durante a instala√ß√£o, **certifique-se de marcar a op√ß√£o "Add Python to PATH"**, pois isso permitir√° que voc√™ execute comandos do Python a partir do terminal ou prompt de comando.
4. Conclua a instala√ß√£o seguindo as instru√ß√µes da tela.

Para confirmar se o Python foi instalado corretamente, abra o terminal (no Windows, digite `cmd`; no macOS ou Linux, abra o Terminal) e execute:

```bash
python --version
```

Voc√™ dever√° ver uma resposta semelhante a:

```
Python 3.11.6
```

Se voc√™ receber uma mensagem de erro, o Python n√£o est√° corretamente instalado ou o PATH n√£o foi configurado. Nesse caso, revise o passo 3 da instala√ß√£o.


### b) Instalar pip

O **pip** normalmente √© instalado junto com o Python. Para verificar se ele est√° dispon√≠vel, execute no terminal:

```bash
pip --version
```

Voc√™ dever√° ver algo semelhante a:

```
pip 23.2.1 from ...
```

Caso o pip n√£o esteja instalado, siga as instru√ß√µes oficiais para instal√°-lo: [https://pip.pypa.io/en/stable/installation/](https://pip.pypa.io/en/stable/installation/)

O pip √© necess√°rio porque ele permite instalar a biblioteca `anpseisearch` e suas depend√™ncias automaticamente.

---

## 2Ô∏è‚É£ Instalar a biblioteca `anpseisearch`

A biblioteca pode ser instalada via PyPI

Se a biblioteca estiver dispon√≠vel no reposit√≥rio oficial do Python, voc√™ pode instalar com um √∫nico comando:

```bash
pip install anpseisearch
```

Esse comando far√° o download da biblioteca e de todas as depend√™ncias necess√°rias.

## 3Ô∏è‚É£ Como usar a biblioteca

A biblioteca funciona em tr√™s etapas principais: **criar o pesquisador**, **definir filtros de pesquisa** e **executar a pesquisa**.
A seguir, apresentamos um exemplo **completo** que utiliza m√∫ltiplos filtros.

```python
from anpseisearch import SeiRegisterSearcher, SeiProcessSearchError

# Criar a inst√¢ncia do pesquisador
searcher = SeiRegisterSearcher()

# Definir os filtros da pesquisa
filters = {
    "numero_protocolo_sei": "5288361",
    "texto_pesquisa": "Fiscaliza√ß√£o de contratos",
    "incluir_processos": True,
    "incluir_documentos_gerados": True,
    "incluir_documentos_recebidos": False,
    "tipo_processo": "Aquisi√ß√£o de Bens e Servi√ßos: Licita√ß√£o",
    "tipo_documento": "Acordo de Coopera√ß√£o T√©cnica",
    "data_inicio": "2025-09-05",
    "data_fim": "2025-09-07",
}

# Aplicar os filtros
searcher.set_filters(filters)

# Executar a pesquisa e capturar resultados
try:
    resultados = searcher.execute_search(page=0, rows_per_page=50)
    for r in resultados:
        print(f"Protocolo: {r['protocolo']}")
        print(f"Descri√ß√£o: {r['descricao']}")
        print(f"Unidade: {r['unidade']}")
        print(f"Data: {r['data']}")
        print(f"Link: {r['link']}")
        print("-" * 40)
except SeiProcessSearchError as e:
    print("Erro na consulta ao SEI:", e)
```

### üîπ Explica√ß√£o detalhada de cada parte do c√≥digo

#### Importar e criar a inst√¢ncia do pesquisador

```python
from anpseisearch import SeiRegisterSearcher, SeiProcessSearchError
searcher = SeiRegisterSearcher()
```

* `SeiRegisterSearcher` ‚Üí √© a classe principal da biblioteca. Ela encapsula toda a l√≥gica de busca, montagem de filtros e parsing dos resultados.
* `SeiProcessSearchError` ‚Üí exce√ß√£o personalizada que ser√° lan√ßada caso a requisi√ß√£o ao SEI falhe.
* `searcher = SeiRegisterSearcher()` ‚Üí cria uma inst√¢ncia do pesquisador com os par√¢metros padr√£o, pronta para receber filtros e executar a pesquisa.

#### Definir filtros

```python
filters = {
    "numero_protocolo_sei": "5288361",
    "texto_pesquisa": "Fiscaliza√ß√£o de contratos",
    "incluir_processos": True,
    "incluir_documentos_gerados": True,
    "incluir_documentos_recebidos": False,
    "tipo_processo": "Aquisi√ß√£o de Bens e Servi√ßos: Licita√ß√£o",
    "tipo_documento": "Acordo de Coopera√ß√£o T√©cnica",
    "data_inicio": "2025-09-05",
    "data_fim": "2025-09-07",
}
```

* **`numero_protocolo_sei`** ‚Üí filtra pelo n√∫mero do protocolo exato.
* **`texto_pesquisa`** ‚Üí pesquisa por palavras-chave no conte√∫do do processo/documento.
* **Filtros booleanos (`incluir_processos`, etc.)** ‚Üí definem se voc√™ quer incluir processos, documentos gerados ou recebidos. O `True` indica que deseja incluir, `False` que n√£o deseja incluir.
* **`tipo_processo` e `tipo_documento`** ‚Üí filtram apenas os registros daquele tipo espec√≠fico. Os valores devem existir nos arquivos `process_ids.json` e `document_ids.json`.
* **`data_inicio` e `data_fim`** ‚Üí definem o intervalo de datas da pesquisa. Devem estar no formato `YYYY-MM-DD` e s√£o obrigat√≥rios para pesquisas temporais.

```python
searcher.set_filters(filters)
```

* Aplica os filtros definidos ao objeto pesquisador.
* Constr√≥i automaticamente o campo `partialfields` que ser√° usado para filtrar apenas os registros relevantes no SEI.
* Converte filtros booleanos nos c√≥digos esperados pelo SEI (`P`, `G`, `R`).
* Substitui os nomes dos tipos de processo e documento pelos IDs correspondentes.

#### Executar a pesquisa e processar resultados

```python
resultados = searcher.execute_search(page=0, rows_per_page=50)
```

* `page` ‚Üí n√∫mero da p√°gina da pesquisa. Come√ßa em `0` para a primeira p√°gina.
* `rows_per_page` ‚Üí n√∫mero de resultados que deseja retornar por p√°gina.

O m√©todo retorna uma **lista de dicion√°rios**, onde cada dicion√°rio representa um registro encontrado:

```python
{
    "protocolo": "1234567",
    "descricao": "Aquisi√ß√£o de equipamentos - Fiscaliza√ß√£o",
    "unidade": "GAB/ANP",
    "data": "05/09/2025",
    "link": "https://sei.anp.gov.br/sei/controlador.php?...",
}
```

#### Exibir os resultados

```python
for r in resultados:
    print(f"Protocolo: {r['protocolo']}")
    print(f"Descri√ß√£o: {r['descricao']}")
    print(f"Unidade: {r['unidade']}")
    print(f"Data: {r['data']}")
    print(f"Link: {r['link']}")
    print("-" * 40)
```

* Percorre cada registro retornado e exibe as informa√ß√µes de forma organizada.
* Facilita a leitura dos resultados e permite identificar rapidamente protocolos, datas e links para acesso direto.

#### Tratamento de erros

```python
except SeiProcessSearchError as e:
    print("Erro na consulta ao SEI:", e)
```

* Captura falhas na requisi√ß√£o HTTP ou erros do SEI.
* Evita que o programa quebre e permite exibir uma mensagem clara sobre o problema.

## Observa√ß√µes importantes

1. As datas (`data_inicio` e `data_fim`) s√£o obrigat√≥rias e devem estar no formato `YYYY-MM-DD`.
2. O campo `partialfields` √© gerado automaticamente com base nos filtros preenchidos, e somente os filtros preenchidos s√£o inclu√≠dos na query.
3. Se n√£o houver resultados para a pesquisa, a biblioteca retorna uma lista vazia `[]`.
4. Valores incorretos para `tipo_processo` ou `tipo_documento` ser√£o ignorados, portanto verifique os arquivos `process_ids.json` e `document_ids.json` antes de definir os filtros.

### üîó Links √∫teis

* [SEI ANP](https://sei.anp.gov.br)
* [Documenta√ß√£o oficial do Python](https://docs.python.org/3/)
* [Instala√ß√£o do pip](https://pip.pypa.io/en/stable/installation/)
