# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DailyProductionInput(BaseModel):
    """
    DailyProductionInput
    """ # noqa: E501
    uwi: Annotated[str, Field(strict=True, max_length=16)] = Field(description="UWI of the well in which the production was recorded")
    var_date: datetime = Field(description="Production date. Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="date")
    oil_rate: Union[StrictFloat, StrictInt] = Field(description="Oil Rate, STB/d", alias="oilRate")
    gas_rate: Union[StrictFloat, StrictInt] = Field(description="Gas Rate, Mscf/d", alias="gasRate")
    water_rate: Union[StrictFloat, StrictInt] = Field(description="Water Rate, STB/d", alias="waterRate")
    tubing_pressure: Union[StrictFloat, StrictInt] = Field(description="Tubing Pressure, psig", alias="tubingPressure")
    choke: Optional[StrictInt] = Field(default=None, description="Choke opening, % or 64ths")
    gauge_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downhole gauge pressure (NOT ESP or SRP Intake), psig", alias="gaugePressure")
    wellhead_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Wellhead temperature, degF", alias="wellheadTemperature")
    gauge_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downhole gauge temperature, degF", alias="gaugeTemperature")
    casing_pressure: Union[StrictFloat, StrictInt] = Field(description="Casing pressure, psig", alias="casingPressure")
    line_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Line pressure, psig", alias="linePressure")
    gas_lift_injection_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gas lift injection rate, Mscf/d", alias="gasLiftInjectionRate")
    esp_frequency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ESP frequency, hz", alias="espFrequency")
    esp_intake_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ESP intake pressure, psig", alias="espIntakePressure")
    esp_amps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ESP amps, amperes", alias="espAmps")
    esp_volts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ESP voltage, volts", alias="espVolts")
    esp_discharge_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ESP discharge pressure, psig", alias="espDischargePressure")
    esp_motor_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ESP motor temperature, degF", alias="espMotorTemperature")
    esp_vibration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ESP vibration, g", alias="espVibration")
    srp_strokes_per_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="SRP strokes per minute, spm", alias="srpStrokesPerMin")
    srp_intake_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="SRP intake pressure, psig", alias="srpIntakePressure")
    srp_fluid_load: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="SRP fluid load, lbf", alias="srpFluidLoad")
    srp_fillage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="SRP fillage, %", alias="srpFillage")
    downtime_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Downtime hours (0 - 24), hours", alias="downtimeHours")
    downtime_code: Optional[StrictStr] = Field(default=None, description="Downtime code, reason, or description", alias="downtimeCode")
    water_injection_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="FOR WATER INJECTORS, water injection rate, STB/d", alias="waterInjectionRate")
    gas_injection_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="FOR GAS INJECTORS (not gas lift), gas injection rate, Mscf/d", alias="gasInjectionRate")
    is_annular_flow: Optional[StrictBool] = Field(default=None, description="Whether that day's production is through the annulus instead of tubing. For gas lifted wells, this is discovered automatically", alias="isAnnularFlow")
    pcp_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="PCP speed (for PCP wells), RPM", alias="pcpSpeed")
    pcp_torque: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="PCP torque (for PCP wells), lbf-ft", alias="pcpTorque")
    pcp_intake_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="PCP intake pressure (for PCP wells), psig", alias="pcpIntakePressure")
    pcp_discharge_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="PCP intake pressure (for PCP wells), psig", alias="pcpDischargePressure")
    __properties: ClassVar[List[str]] = ["uwi", "date", "oilRate", "gasRate", "waterRate", "tubingPressure", "choke", "gaugePressure", "wellheadTemperature", "gaugeTemperature", "casingPressure", "linePressure", "gasLiftInjectionRate", "espFrequency", "espIntakePressure", "espAmps", "espVolts", "espDischargePressure", "espMotorTemperature", "espVibration", "srpStrokesPerMin", "srpIntakePressure", "srpFluidLoad", "srpFillage", "downtimeHours", "downtimeCode", "waterInjectionRate", "gasInjectionRate", "isAnnularFlow", "pcpSpeed", "pcpTorque", "pcpIntakePressure", "pcpDischargePressure"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DailyProductionInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if choke (nullable) is None
        # and model_fields_set contains the field
        if self.choke is None and "choke" in self.model_fields_set:
            _dict['choke'] = None

        # set to None if gauge_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.gauge_pressure is None and "gauge_pressure" in self.model_fields_set:
            _dict['gaugePressure'] = None

        # set to None if wellhead_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.wellhead_temperature is None and "wellhead_temperature" in self.model_fields_set:
            _dict['wellheadTemperature'] = None

        # set to None if gauge_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.gauge_temperature is None and "gauge_temperature" in self.model_fields_set:
            _dict['gaugeTemperature'] = None

        # set to None if line_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.line_pressure is None and "line_pressure" in self.model_fields_set:
            _dict['linePressure'] = None

        # set to None if gas_lift_injection_rate (nullable) is None
        # and model_fields_set contains the field
        if self.gas_lift_injection_rate is None and "gas_lift_injection_rate" in self.model_fields_set:
            _dict['gasLiftInjectionRate'] = None

        # set to None if esp_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.esp_frequency is None and "esp_frequency" in self.model_fields_set:
            _dict['espFrequency'] = None

        # set to None if esp_intake_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.esp_intake_pressure is None and "esp_intake_pressure" in self.model_fields_set:
            _dict['espIntakePressure'] = None

        # set to None if esp_amps (nullable) is None
        # and model_fields_set contains the field
        if self.esp_amps is None and "esp_amps" in self.model_fields_set:
            _dict['espAmps'] = None

        # set to None if esp_volts (nullable) is None
        # and model_fields_set contains the field
        if self.esp_volts is None and "esp_volts" in self.model_fields_set:
            _dict['espVolts'] = None

        # set to None if esp_discharge_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.esp_discharge_pressure is None and "esp_discharge_pressure" in self.model_fields_set:
            _dict['espDischargePressure'] = None

        # set to None if esp_motor_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.esp_motor_temperature is None and "esp_motor_temperature" in self.model_fields_set:
            _dict['espMotorTemperature'] = None

        # set to None if esp_vibration (nullable) is None
        # and model_fields_set contains the field
        if self.esp_vibration is None and "esp_vibration" in self.model_fields_set:
            _dict['espVibration'] = None

        # set to None if srp_strokes_per_min (nullable) is None
        # and model_fields_set contains the field
        if self.srp_strokes_per_min is None and "srp_strokes_per_min" in self.model_fields_set:
            _dict['srpStrokesPerMin'] = None

        # set to None if srp_intake_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.srp_intake_pressure is None and "srp_intake_pressure" in self.model_fields_set:
            _dict['srpIntakePressure'] = None

        # set to None if srp_fluid_load (nullable) is None
        # and model_fields_set contains the field
        if self.srp_fluid_load is None and "srp_fluid_load" in self.model_fields_set:
            _dict['srpFluidLoad'] = None

        # set to None if srp_fillage (nullable) is None
        # and model_fields_set contains the field
        if self.srp_fillage is None and "srp_fillage" in self.model_fields_set:
            _dict['srpFillage'] = None

        # set to None if downtime_hours (nullable) is None
        # and model_fields_set contains the field
        if self.downtime_hours is None and "downtime_hours" in self.model_fields_set:
            _dict['downtimeHours'] = None

        # set to None if downtime_code (nullable) is None
        # and model_fields_set contains the field
        if self.downtime_code is None and "downtime_code" in self.model_fields_set:
            _dict['downtimeCode'] = None

        # set to None if water_injection_rate (nullable) is None
        # and model_fields_set contains the field
        if self.water_injection_rate is None and "water_injection_rate" in self.model_fields_set:
            _dict['waterInjectionRate'] = None

        # set to None if gas_injection_rate (nullable) is None
        # and model_fields_set contains the field
        if self.gas_injection_rate is None and "gas_injection_rate" in self.model_fields_set:
            _dict['gasInjectionRate'] = None

        # set to None if is_annular_flow (nullable) is None
        # and model_fields_set contains the field
        if self.is_annular_flow is None and "is_annular_flow" in self.model_fields_set:
            _dict['isAnnularFlow'] = None

        # set to None if pcp_speed (nullable) is None
        # and model_fields_set contains the field
        if self.pcp_speed is None and "pcp_speed" in self.model_fields_set:
            _dict['pcpSpeed'] = None

        # set to None if pcp_torque (nullable) is None
        # and model_fields_set contains the field
        if self.pcp_torque is None and "pcp_torque" in self.model_fields_set:
            _dict['pcpTorque'] = None

        # set to None if pcp_intake_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.pcp_intake_pressure is None and "pcp_intake_pressure" in self.model_fields_set:
            _dict['pcpIntakePressure'] = None

        # set to None if pcp_discharge_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.pcp_discharge_pressure is None and "pcp_discharge_pressure" in self.model_fields_set:
            _dict['pcpDischargePressure'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DailyProductionInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uwi": obj.get("uwi"),
            "date": obj.get("date"),
            "oilRate": obj.get("oilRate") if obj.get("oilRate") is not None else 0.0,
            "gasRate": obj.get("gasRate") if obj.get("gasRate") is not None else 0.0,
            "waterRate": obj.get("waterRate") if obj.get("waterRate") is not None else 0.0,
            "tubingPressure": obj.get("tubingPressure") if obj.get("tubingPressure") is not None else 0.0,
            "choke": obj.get("choke"),
            "gaugePressure": obj.get("gaugePressure"),
            "wellheadTemperature": obj.get("wellheadTemperature"),
            "gaugeTemperature": obj.get("gaugeTemperature"),
            "casingPressure": obj.get("casingPressure") if obj.get("casingPressure") is not None else 0.0,
            "linePressure": obj.get("linePressure"),
            "gasLiftInjectionRate": obj.get("gasLiftInjectionRate"),
            "espFrequency": obj.get("espFrequency"),
            "espIntakePressure": obj.get("espIntakePressure"),
            "espAmps": obj.get("espAmps"),
            "espVolts": obj.get("espVolts"),
            "espDischargePressure": obj.get("espDischargePressure"),
            "espMotorTemperature": obj.get("espMotorTemperature"),
            "espVibration": obj.get("espVibration"),
            "srpStrokesPerMin": obj.get("srpStrokesPerMin"),
            "srpIntakePressure": obj.get("srpIntakePressure"),
            "srpFluidLoad": obj.get("srpFluidLoad"),
            "srpFillage": obj.get("srpFillage"),
            "downtimeHours": obj.get("downtimeHours") if obj.get("downtimeHours") is not None else 0.0,
            "downtimeCode": obj.get("downtimeCode"),
            "waterInjectionRate": obj.get("waterInjectionRate"),
            "gasInjectionRate": obj.get("gasInjectionRate"),
            "isAnnularFlow": obj.get("isAnnularFlow"),
            "pcpSpeed": obj.get("pcpSpeed"),
            "pcpTorque": obj.get("pcpTorque"),
            "pcpIntakePressure": obj.get("pcpIntakePressure"),
            "pcpDischargePressure": obj.get("pcpDischargePressure")
        })
        return _obj


