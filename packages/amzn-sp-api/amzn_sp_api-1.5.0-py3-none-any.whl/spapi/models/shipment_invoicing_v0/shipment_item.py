# coding: utf-8

"""
    Selling Partner API for Shipment Invoicing

    The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShipmentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asin': 'str',
        'seller_sku': 'str',
        'order_item_id': 'str',
        'title': 'str',
        'quantity_ordered': 'float',
        'item_price': 'Money',
        'shipping_price': 'Money',
        'gift_wrap_price': 'Money',
        'shipping_discount': 'Money',
        'promotion_discount': 'Money',
        'serial_numbers': 'List[str]',
    }

    attribute_map = {
        'asin': 'ASIN',
        'seller_sku': 'SellerSKU',
        'order_item_id': 'OrderItemId',
        'title': 'Title',
        'quantity_ordered': 'QuantityOrdered',
        'item_price': 'ItemPrice',
        'shipping_price': 'ShippingPrice',
        'gift_wrap_price': 'GiftWrapPrice',
        'shipping_discount': 'ShippingDiscount',
        'promotion_discount': 'PromotionDiscount',
        'serial_numbers': 'SerialNumbers',
    }

    def __init__(self, asin=None, seller_sku=None, order_item_id=None, title=None, quantity_ordered=None, item_price=None, shipping_price=None, gift_wrap_price=None, shipping_discount=None, promotion_discount=None, serial_numbers=None, _configuration=None):  # noqa: E501
        """ShipmentItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asin = None
        self._seller_sku = None
        self._order_item_id = None
        self._title = None
        self._quantity_ordered = None
        self._item_price = None
        self._shipping_price = None
        self._gift_wrap_price = None
        self._shipping_discount = None
        self._promotion_discount = None
        self._serial_numbers = None
        self.discriminator = None

        if asin is not None:
            self.asin = asin
        if seller_sku is not None:
            self.seller_sku = seller_sku
        if order_item_id is not None:
            self.order_item_id = order_item_id
        if title is not None:
            self.title = title
        if quantity_ordered is not None:
            self.quantity_ordered = quantity_ordered
        if item_price is not None:
            self.item_price = item_price
        if shipping_price is not None:
            self.shipping_price = shipping_price
        if gift_wrap_price is not None:
            self.gift_wrap_price = gift_wrap_price
        if shipping_discount is not None:
            self.shipping_discount = shipping_discount
        if promotion_discount is not None:
            self.promotion_discount = promotion_discount
        if serial_numbers is not None:
            self.serial_numbers = serial_numbers

    @property
    def asin(self):
        """Gets the asin of this ShipmentItem.  # noqa: E501

        The Amazon Standard Identification Number (ASIN) of the item.  # noqa: E501

        :return: The asin of this ShipmentItem.  # noqa: E501
        :rtype: str
        """
        return self._asin

    @asin.setter
    def asin(self, asin):
        """Sets the asin of this ShipmentItem.

        The Amazon Standard Identification Number (ASIN) of the item.  # noqa: E501

        :param asin: The asin of this ShipmentItem.  # noqa: E501
        :type: str
        """

        self._asin = asin

    @property
    def seller_sku(self):
        """Gets the seller_sku of this ShipmentItem.  # noqa: E501

        The seller SKU of the item.  # noqa: E501

        :return: The seller_sku of this ShipmentItem.  # noqa: E501
        :rtype: str
        """
        return self._seller_sku

    @seller_sku.setter
    def seller_sku(self, seller_sku):
        """Sets the seller_sku of this ShipmentItem.

        The seller SKU of the item.  # noqa: E501

        :param seller_sku: The seller_sku of this ShipmentItem.  # noqa: E501
        :type: str
        """

        self._seller_sku = seller_sku

    @property
    def order_item_id(self):
        """Gets the order_item_id of this ShipmentItem.  # noqa: E501

        The Amazon-defined identifier for the order item.  # noqa: E501

        :return: The order_item_id of this ShipmentItem.  # noqa: E501
        :rtype: str
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """Sets the order_item_id of this ShipmentItem.

        The Amazon-defined identifier for the order item.  # noqa: E501

        :param order_item_id: The order_item_id of this ShipmentItem.  # noqa: E501
        :type: str
        """

        self._order_item_id = order_item_id

    @property
    def title(self):
        """Gets the title of this ShipmentItem.  # noqa: E501

        The name of the item.  # noqa: E501

        :return: The title of this ShipmentItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ShipmentItem.

        The name of the item.  # noqa: E501

        :param title: The title of this ShipmentItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def quantity_ordered(self):
        """Gets the quantity_ordered of this ShipmentItem.  # noqa: E501

        The number of items ordered.  # noqa: E501

        :return: The quantity_ordered of this ShipmentItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity_ordered

    @quantity_ordered.setter
    def quantity_ordered(self, quantity_ordered):
        """Sets the quantity_ordered of this ShipmentItem.

        The number of items ordered.  # noqa: E501

        :param quantity_ordered: The quantity_ordered of this ShipmentItem.  # noqa: E501
        :type: float
        """

        self._quantity_ordered = quantity_ordered

    @property
    def item_price(self):
        """Gets the item_price of this ShipmentItem.  # noqa: E501


        :return: The item_price of this ShipmentItem.  # noqa: E501
        :rtype: Money
        """
        return self._item_price

    @item_price.setter
    def item_price(self, item_price):
        """Sets the item_price of this ShipmentItem.


        :param item_price: The item_price of this ShipmentItem.  # noqa: E501
        :type: Money
        """

        self._item_price = item_price

    @property
    def shipping_price(self):
        """Gets the shipping_price of this ShipmentItem.  # noqa: E501


        :return: The shipping_price of this ShipmentItem.  # noqa: E501
        :rtype: Money
        """
        return self._shipping_price

    @shipping_price.setter
    def shipping_price(self, shipping_price):
        """Sets the shipping_price of this ShipmentItem.


        :param shipping_price: The shipping_price of this ShipmentItem.  # noqa: E501
        :type: Money
        """

        self._shipping_price = shipping_price

    @property
    def gift_wrap_price(self):
        """Gets the gift_wrap_price of this ShipmentItem.  # noqa: E501


        :return: The gift_wrap_price of this ShipmentItem.  # noqa: E501
        :rtype: Money
        """
        return self._gift_wrap_price

    @gift_wrap_price.setter
    def gift_wrap_price(self, gift_wrap_price):
        """Sets the gift_wrap_price of this ShipmentItem.


        :param gift_wrap_price: The gift_wrap_price of this ShipmentItem.  # noqa: E501
        :type: Money
        """

        self._gift_wrap_price = gift_wrap_price

    @property
    def shipping_discount(self):
        """Gets the shipping_discount of this ShipmentItem.  # noqa: E501


        :return: The shipping_discount of this ShipmentItem.  # noqa: E501
        :rtype: Money
        """
        return self._shipping_discount

    @shipping_discount.setter
    def shipping_discount(self, shipping_discount):
        """Sets the shipping_discount of this ShipmentItem.


        :param shipping_discount: The shipping_discount of this ShipmentItem.  # noqa: E501
        :type: Money
        """

        self._shipping_discount = shipping_discount

    @property
    def promotion_discount(self):
        """Gets the promotion_discount of this ShipmentItem.  # noqa: E501


        :return: The promotion_discount of this ShipmentItem.  # noqa: E501
        :rtype: Money
        """
        return self._promotion_discount

    @promotion_discount.setter
    def promotion_discount(self, promotion_discount):
        """Sets the promotion_discount of this ShipmentItem.


        :param promotion_discount: The promotion_discount of this ShipmentItem.  # noqa: E501
        :type: Money
        """

        self._promotion_discount = promotion_discount

    @property
    def serial_numbers(self):
        """Gets the serial_numbers of this ShipmentItem.  # noqa: E501

        The list of serial numbers.  # noqa: E501

        :return: The serial_numbers of this ShipmentItem.  # noqa: E501
        :rtype: List[str]
        """
        return self._serial_numbers

    @serial_numbers.setter
    def serial_numbers(self, serial_numbers):
        """Sets the serial_numbers of this ShipmentItem.

        The list of serial numbers.  # noqa: E501

        :param serial_numbers: The serial_numbers of this ShipmentItem.  # noqa: E501
        :type: List[str]
        """

        self._serial_numbers = serial_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipmentItem):
            return True

        return self.to_dict() != other.to_dict()
