# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.fluid_type import FluidType
from openapi_client.models.lift_type import LiftType
from openapi_client.models.well_status import WellStatus
from openapi_client.models.well_type import WellType
from typing import Optional, Set
from typing_extensions import Self

class WellInput(BaseModel):
    """
    WellInput
    """ # noqa: E501
    source_id: Annotated[str, Field(strict=True, max_length=100)] = Field(description="Well sourceId (commonly OpenWells or WellView ID - used to link to other construction data)", alias="sourceId")
    uwi: StrictStr = Field(description="Well UWI (commonly the API number - used to link to daily production)")
    name: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Well Name")
    group1: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Group 1 - used for primary group navigation in the application ")
    group2: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Group 2 - used for secondary sorting in the well tree and grouping in the application NOTE: This field has been deprecated and will be removed in January 2026.  Please use area, centralFacility, tankBattery, route, pad, platform to organize the well. ")
    group3: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Group 3 - used for secondary sorting in the well tree and grouping in the application NOTE: This field has been deprecated and will be removed in January 2026.  Please use area, centralFacility, tankBattery, route, pad, platform to organize the well. ")
    area: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Sub-area of a field/asset defined by group1")
    central_facility: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Central facility into which the well flows", alias="centralFacility")
    tank_battery: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Tank battery into which the well flows", alias="tankBattery")
    route: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Route on which the well is located")
    pad: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Pad (if applicable) on which the well is located")
    platform: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Platform (if applicable) to which the well flows")
    type: Optional[WellType] = WellType.PRODUCER
    fluid: Optional[FluidType] = FluidType.OIL
    lift_type: Optional[LiftType] = Field(default=LiftType.NATURAL_FLOW, alias="liftType")
    lat: Union[StrictFloat, StrictInt] = Field(description="Surface latitude in WGS84, decimal degrees")
    lon: Union[StrictFloat, StrictInt] = Field(description="Surface longitude in WGS84, decimal degrees")
    middle_lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional middle coordinate (for maps). Frequently the lateral heel coordinates.", alias="middleLat")
    middle_lon: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional middle coordinate (for maps). Frequently the lateral heel coordinates.", alias="middleLon")
    mud_line: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mud line for offshore wells, ft", alias="mudLine")
    status: Optional[WellStatus] = None
    bottomhole_lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="bottomholeLat")
    bottomhole_lon: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="bottomholeLon")
    __properties: ClassVar[List[str]] = ["sourceId", "uwi", "name", "group1", "group2", "group3", "area", "centralFacility", "tankBattery", "route", "pad", "platform", "type", "fluid", "liftType", "lat", "lon", "middleLat", "middleLon", "mudLine", "status", "bottomholeLat", "bottomholeLon"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WellInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if group1 (nullable) is None
        # and model_fields_set contains the field
        if self.group1 is None and "group1" in self.model_fields_set:
            _dict['group1'] = None

        # set to None if group2 (nullable) is None
        # and model_fields_set contains the field
        if self.group2 is None and "group2" in self.model_fields_set:
            _dict['group2'] = None

        # set to None if group3 (nullable) is None
        # and model_fields_set contains the field
        if self.group3 is None and "group3" in self.model_fields_set:
            _dict['group3'] = None

        # set to None if area (nullable) is None
        # and model_fields_set contains the field
        if self.area is None and "area" in self.model_fields_set:
            _dict['area'] = None

        # set to None if central_facility (nullable) is None
        # and model_fields_set contains the field
        if self.central_facility is None and "central_facility" in self.model_fields_set:
            _dict['centralFacility'] = None

        # set to None if tank_battery (nullable) is None
        # and model_fields_set contains the field
        if self.tank_battery is None and "tank_battery" in self.model_fields_set:
            _dict['tankBattery'] = None

        # set to None if route (nullable) is None
        # and model_fields_set contains the field
        if self.route is None and "route" in self.model_fields_set:
            _dict['route'] = None

        # set to None if pad (nullable) is None
        # and model_fields_set contains the field
        if self.pad is None and "pad" in self.model_fields_set:
            _dict['pad'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if middle_lat (nullable) is None
        # and model_fields_set contains the field
        if self.middle_lat is None and "middle_lat" in self.model_fields_set:
            _dict['middleLat'] = None

        # set to None if middle_lon (nullable) is None
        # and model_fields_set contains the field
        if self.middle_lon is None and "middle_lon" in self.model_fields_set:
            _dict['middleLon'] = None

        # set to None if mud_line (nullable) is None
        # and model_fields_set contains the field
        if self.mud_line is None and "mud_line" in self.model_fields_set:
            _dict['mudLine'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if bottomhole_lat (nullable) is None
        # and model_fields_set contains the field
        if self.bottomhole_lat is None and "bottomhole_lat" in self.model_fields_set:
            _dict['bottomholeLat'] = None

        # set to None if bottomhole_lon (nullable) is None
        # and model_fields_set contains the field
        if self.bottomhole_lon is None and "bottomhole_lon" in self.model_fields_set:
            _dict['bottomholeLon'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WellInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceId": obj.get("sourceId"),
            "uwi": obj.get("uwi"),
            "name": obj.get("name"),
            "group1": obj.get("group1"),
            "group2": obj.get("group2"),
            "group3": obj.get("group3"),
            "area": obj.get("area"),
            "centralFacility": obj.get("centralFacility"),
            "tankBattery": obj.get("tankBattery"),
            "route": obj.get("route"),
            "pad": obj.get("pad"),
            "platform": obj.get("platform"),
            "type": obj.get("type") if obj.get("type") is not None else WellType.PRODUCER,
            "fluid": obj.get("fluid") if obj.get("fluid") is not None else FluidType.OIL,
            "liftType": obj.get("liftType") if obj.get("liftType") is not None else LiftType.NATURAL_FLOW,
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "middleLat": obj.get("middleLat"),
            "middleLon": obj.get("middleLon"),
            "mudLine": obj.get("mudLine"),
            "status": obj.get("status"),
            "bottomholeLat": obj.get("bottomholeLat"),
            "bottomholeLon": obj.get("bottomholeLon")
        })
        return _obj


