# automatically generated by the FlatBuffers compiler, do not modify

# namespace: circle

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloDynamicSliceOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloDynamicSliceOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloDynamicSliceOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloDynamicSliceOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x49\x52\x30", size_prefixed=size_prefixed)

    # StablehloDynamicSliceOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloDynamicSliceOptions
    def SliceSizes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloDynamicSliceOptions
    def SliceSizesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloDynamicSliceOptions
    def SliceSizesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloDynamicSliceOptions
    def SliceSizesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def Start(builder): builder.StartObject(1)
def StablehloDynamicSliceOptionsStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSliceSizes(builder, sliceSizes): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sliceSizes), 0)
def StablehloDynamicSliceOptionsAddSliceSizes(builder, sliceSizes):
    """This method is deprecated. Please switch to AddSliceSizes."""
    return AddSliceSizes(builder, sliceSizes)
def StartSliceSizesVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StablehloDynamicSliceOptionsStartSliceSizesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSliceSizesVector(builder, numElems)
def End(builder): return builder.EndObject()
def StablehloDynamicSliceOptionsEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
try:
    from typing import List
except:
    pass

class StablehloDynamicSliceOptionsT(object):

    # StablehloDynamicSliceOptionsT
    def __init__(self):
        self.sliceSizes = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloDynamicSliceOptions = StablehloDynamicSliceOptions()
        stablehloDynamicSliceOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloDynamicSliceOptions)

    @classmethod
    def InitFromObj(cls, stablehloDynamicSliceOptions):
        x = StablehloDynamicSliceOptionsT()
        x._UnPack(stablehloDynamicSliceOptions)
        return x

    # StablehloDynamicSliceOptionsT
    def _UnPack(self, stablehloDynamicSliceOptions):
        if stablehloDynamicSliceOptions is None:
            return
        if not stablehloDynamicSliceOptions.SliceSizesIsNone():
            if np is None:
                self.sliceSizes = []
                for i in range(stablehloDynamicSliceOptions.SliceSizesLength()):
                    self.sliceSizes.append(stablehloDynamicSliceOptions.SliceSizes(i))
            else:
                self.sliceSizes = stablehloDynamicSliceOptions.SliceSizesAsNumpy()

    # StablehloDynamicSliceOptionsT
    def Pack(self, builder):
        if self.sliceSizes is not None:
            if np is not None and type(self.sliceSizes) is np.ndarray:
                sliceSizes = builder.CreateNumpyVector(self.sliceSizes)
            else:
                StartSliceSizesVector(builder, len(self.sliceSizes))
                for i in reversed(range(len(self.sliceSizes))):
                    builder.PrependInt64(self.sliceSizes[i])
                sliceSizes = builder.EndVector()
        Start(builder)
        if self.sliceSizes is not None:
            AddSliceSizes(builder, sliceSizes)
        stablehloDynamicSliceOptions = End(builder)
        return stablehloDynamicSliceOptions
