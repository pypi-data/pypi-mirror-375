# coding: utf-8

"""
    The Selling Partner API for CustomerFeedback

    The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.

    The version of the OpenAPI document: 2024-06-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ItemReviewSubtopic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subtopic': 'str',
        'metrics': 'ItemReviewSubtopicMetrics',
        'review_snippets': 'List[str]',
    }

    attribute_map = {
        'subtopic': 'subtopic',
        'metrics': 'metrics',
        'review_snippets': 'reviewSnippets',
    }

    def __init__(self, subtopic=None, metrics=None, review_snippets=None, _configuration=None):  # noqa: E501
        """ItemReviewSubtopic - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subtopic = None
        self._metrics = None
        self._review_snippets = None
        self.discriminator = None

        self.subtopic = subtopic
        self.metrics = metrics
        if review_snippets is not None:
            self.review_snippets = review_snippets

    @property
    def subtopic(self):
        """Gets the subtopic of this ItemReviewSubtopic.  # noqa: E501

        The name of the subtopic.  # noqa: E501

        :return: The subtopic of this ItemReviewSubtopic.  # noqa: E501
        :rtype: str
        """
        return self._subtopic

    @subtopic.setter
    def subtopic(self, subtopic):
        """Sets the subtopic of this ItemReviewSubtopic.

        The name of the subtopic.  # noqa: E501

        :param subtopic: The subtopic of this ItemReviewSubtopic.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and subtopic is None:
            raise ValueError("Invalid value for `subtopic`, must not be `None`")  # noqa: E501

        self._subtopic = subtopic

    @property
    def metrics(self):
        """Gets the metrics of this ItemReviewSubtopic.  # noqa: E501


        :return: The metrics of this ItemReviewSubtopic.  # noqa: E501
        :rtype: ItemReviewSubtopicMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ItemReviewSubtopic.


        :param metrics: The metrics of this ItemReviewSubtopic.  # noqa: E501
        :type: ItemReviewSubtopicMetrics
        """
        if self._configuration.client_side_validation and metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    @property
    def review_snippets(self):
        """Gets the review_snippets of this ItemReviewSubtopic.  # noqa: E501

        A list of up to three snippets from reviews that contain the subtopic. This value is `null` if there aren't enough review snippets for the subtopic.  # noqa: E501

        :return: The review_snippets of this ItemReviewSubtopic.  # noqa: E501
        :rtype: List[str]
        """
        return self._review_snippets

    @review_snippets.setter
    def review_snippets(self, review_snippets):
        """Sets the review_snippets of this ItemReviewSubtopic.

        A list of up to three snippets from reviews that contain the subtopic. This value is `null` if there aren't enough review snippets for the subtopic.  # noqa: E501

        :param review_snippets: The review_snippets of this ItemReviewSubtopic.  # noqa: E501
        :type: List[str]
        """
        if (self._configuration.client_side_validation and
                review_snippets is not None and len(review_snippets) > 3):
            raise ValueError("Invalid value for `review_snippets`, number of items must be less than or equal to `3`")  # noqa: E501

        self._review_snippets = review_snippets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemReviewSubtopic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemReviewSubtopic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemReviewSubtopic):
            return True

        return self.to_dict() != other.to_dict()
