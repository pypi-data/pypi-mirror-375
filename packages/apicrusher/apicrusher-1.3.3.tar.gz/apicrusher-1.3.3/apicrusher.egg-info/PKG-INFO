Metadata-Version: 2.4
Name: apicrusher
Version: 1.3.3
Summary: Cut AI API costs by 63-99% with intelligent routing
Home-page: https://github.com/yourusername/apicrusher
Author: APICrusher
Author-email: hello@apicrusher.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.28.0
Requires-Dist: redis>=4.5.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# APICrusher - Cut AI API Costs by 63-99%

Stop bleeding money on AI APIs. APICrusher automatically routes requests to the cheapest capable model and caches responses, cutting costs by 63-99% with just 2 lines of code.

## üöÄ Quick Start

```bash
# Python 3.8+ required
# Use a virtual environment (recommended for all Python packages)
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

pip install apicrusher
```

## üìã Important Installation Notes

### Virtual Environment Required
Modern Python systems require virtual environments for pip packages:
```bash
# If you see "externally-managed-environment" error:
python3 -m venv venv
source venv/bin/activate
pip install apicrusher
```

### API Keys Required
APICrusher optimizes your existing AI API calls. You need:
1. **Your AI provider API key** (OpenAI, Anthropic, etc.) - Keep using your existing keys
2. **An APICrusher optimization key** from [apicrusher.com](https://apicrusher.com) - Enables cost optimization

### How It Works
APICrusher is a smart proxy layer. You keep your existing API keys. We analyze each request and route it to the optimal model. Your API keys never leave your server.

## üíª Basic Usage

```python
# Before (expensive)
from openai import OpenAI
client = OpenAI(api_key="sk-...")  # Your OpenAI key

# After (63-99% cheaper)
from apicrusher import OpenAI
client = OpenAI(
    api_key="sk-...",              # Your existing OpenAI key
    apicrusher_key="apc_live_..."  # Add optimization key
)

# Your code stays exactly the same
response = client.chat.completions.create(
    model="gpt-4",
    messages=[{"role": "user", "content": "Hello!"}]
)
```

## üí∞ How Much Can You Save?

### Single Provider vs Cross-Provider
- **Single Provider** (e.g., just OpenAI): 70-85% savings
- **Cross-Provider** (e.g., OpenAI + Anthropic): Up to 99% savings

| Your Current Usage | Monthly Cost | With APICrusher | You Save |
|-------------------|--------------|-----------------|----------|
| GPT-4 for everything | $1,000 | $180 | $820 (82%) |
| Mixed GPT-4/3.5 | $500 | $95 | $405 (81%) |
| Heavy API usage | $5,000 | $750 | $4,250 (85%) |
| Long conversations | $2,000 | $340 | $1,660 (83%) |

## üéØ Features

### Cross-Provider Optimization (NEW in v1.3.0)

Get 99% savings by routing between providers:

```python
from apicrusher import OpenAI

client = OpenAI(
    api_key="sk-...",                    # Your OpenAI key
    anthropic_api_key="sk-ant-...",      # Optional: Add for 99% savings
    google_api_key="...",                # Optional: Add Google key
    apicrusher_key="apc_live_..."    
)

# Simple GPT-4 queries now route to Claude Haiku automatically (99% cheaper)
# Complex queries stay on GPT-4 to preserve quality
```

### Universal Provider Support
Works with ALL major AI providers:
- OpenAI (GPT-5, GPT-4, GPT-4o, GPT-3.5, O1)
- Anthropic (Claude 3.5, Claude Opus 4.1)
- Google (Gemini 1.5, Gemini 2.0)
- Groq, Cohere, Meta, Mistral, and more

### Intelligent Model Routing
- Simple queries ‚Üí Cheap models (gpt-4o-mini)
- Complex queries ‚Üí Premium models (GPT-4)
- Automatic quality preservation

### Smart Caching
- Deduplicates identical requests
- Redis + in-memory fallback
- 33% average cache hit rate

### üÜï Context Compression (NEW!)
**Stop paying to reprocess the same conversation 50 times:**

```python
# Enable context compression for long conversations
response = client.chat.completions.create(
    model="gpt-4",
    messages=conversation_history,  # 50 messages = 15,000 tokens normally
    compress_context=True  # Reduces to ~3,000 tokens automatically
)

# Features:
# - Summarizes older messages while preserving key decisions
# - Removes duplicate context automatically  
# - Compresses code blocks by 40-60%
# - Sends only deltas for continuing conversations
# - Preserves last 3 messages in full for accuracy
```

**Context Compression Savings Example:**
- Normal 20-message conversation: 150,000 tokens ($2.25)
- With compression: 35,000 tokens ($0.52)
- **Savings: 77% on long conversations**

### Analytics & Reporting
```python
# Get detailed savings report
client.print_savings_summary()

# Output:
# üí∏ Total Saved: $127.43
# üìû Total Calls: 1,432
# üíæ Cache Hit Rate: 34.2%
# ‚ö° Optimization Rate: 91.3%
```

## üîß Advanced Usage

### Multi-Provider Setup
```python
from apicrusher import OpenAI

client = OpenAI(
    openai_api_key="sk-...",
    anthropic_api_key="sk-ant-...",
    google_api_key="...",
    apicrusher_key="apc_..."
)

# Automatically routes to cheapest provider
response = client.chat.completions.create(
    model="gpt-4",  # Will use gpt-4o-mini if appropriate
    messages=[{"role": "user", "content": "Format this date: 2024-01-01"}]
)
```

### Context Compression Options
```python
# Fine-tune compression behavior
response = client.chat.completions.create(
    model="gpt-4",
    messages=long_conversation,
    compress_context=True,
    compression_threshold=10,  # Start compressing after 10 messages
    preserve_recent=5  # Keep last 5 messages uncompressed
)
```

### Manual Optimization Control
```python
# Force specific model
response = client.chat.completions.create(
    model="gpt-4o-mini",  # Use this exact model
    messages=messages,
    skip_optimization=True  # Bypass routing logic
)
```

## üìä Real-World Results

Based on actual customer usage:

- **E-commerce company**: Reduced costs from $8,400/mo to $1,260/mo (85% savings)
- **SaaS startup**: Cut API bills from $3,200/mo to $480/mo (85% savings)  
- **AI coding assistant**: Dropped from $12,000/mo to $2,400/mo (80% savings)

## üõ°Ô∏è Security & Privacy

- **Your API keys stay local** - Never sent to our servers
- **No prompt logging** - Your data remains private
- **Open source** - Audit the code yourself
- **SOC2 compliant** - Enterprise-ready security

## üöÄ Getting Started

1. **Install**: `pip install apicrusher`
2. **Get your key**: Sign up at [apicrusher.com](https://apicrusher.com)
3. **Add 2 lines**: Replace your import and add your key
4. **Save money**: Watch your costs drop by 63-99%

## üí∞ Pricing

- **Free Trial**: 7 days, no credit card required
- **Professional**: $99/month (pays for itself in hours)
- **Enterprise**: Custom pricing for high-volume usage

Most customers save 10-50x the subscription cost in the first month.

## ü§ù Support

- Email: hello@apicrusher.com
- Documentation: [apicrusher.com/docs](https://apicrusher.com/docs)
- GitHub: [github.com/apicrusher/apicrusher](https://github.com/apicrusher/apicrusher)

## License

MIT License - Use it however you want.

---

**Stop bleeding money on AI APIs. Start saving with APICrusher today.**

[Get Your Key ‚Üí](https://apicrusher.com)
