# coding: utf-8

"""
    Selling Partner API for Services

    With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class RangeCapacity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity_type': 'CapacityType',
        'slots': 'List[RangeSlot]',
    }

    attribute_map = {
        'capacity_type': 'capacityType',
        'slots': 'slots',
    }

    def __init__(self, capacity_type=None, slots=None, _configuration=None):  # noqa: E501
        """RangeCapacity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._capacity_type = None
        self._slots = None
        self.discriminator = None

        if capacity_type is not None:
            self.capacity_type = capacity_type
        if slots is not None:
            self.slots = slots

    @property
    def capacity_type(self):
        """Gets the capacity_type of this RangeCapacity.  # noqa: E501


        :return: The capacity_type of this RangeCapacity.  # noqa: E501
        :rtype: CapacityType
        """
        return self._capacity_type

    @capacity_type.setter
    def capacity_type(self, capacity_type):
        """Sets the capacity_type of this RangeCapacity.


        :param capacity_type: The capacity_type of this RangeCapacity.  # noqa: E501
        :type: CapacityType
        """

        self._capacity_type = capacity_type

    @property
    def slots(self):
        """Gets the slots of this RangeCapacity.  # noqa: E501

        Array of capacity slots in range slot format.  # noqa: E501

        :return: The slots of this RangeCapacity.  # noqa: E501
        :rtype: List[RangeSlot]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this RangeCapacity.

        Array of capacity slots in range slot format.  # noqa: E501

        :param slots: The slots of this RangeCapacity.  # noqa: E501
        :type: List[RangeSlot]
        """

        self._slots = slots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RangeCapacity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RangeCapacity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RangeCapacity):
            return True

        return self.to_dict() != other.to_dict()
