[build-system]
requires = ["hatchling>=1.12.0"]
build-backend = "hatchling.build"

[project]
name = "py-superops"
description = "Python client library for the SuperOps GraphQL API with async support, type safety, and comprehensive error handling"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Aaron Sachs", email = "aaron@wyre.com" }
]
maintainers = [
    { name = "Aaron Sachs", email = "aaron@wyre.com" }
]
keywords = [
    "superops",
    "api",
    "graphql",
    "msp",
    "rmm",
    "psa",
    "client-library",
    "async"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Office/Business",
    "Typing :: Typed"
]
dynamic = ["version"]
requires-python = ">=3.8"

dependencies = [
    "httpx>=0.24.0,<1.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "typing-extensions>=4.0.0; python_version < '3.10'",
    # Async HTTP for attachments
    "aiohttp>=3.8.0,<4.0.0",
    "aiofiles>=23.0.0,<24.0.0",
    # CLI dependencies
    "click>=8.0.0,<9.0.0",
    "rich>=13.0.0,<14.0.0"
]

[project.optional-dependencies]
yaml = ["PyYAML>=6.0.0"]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.0.0",  # Parallel test execution
    "respx>=0.20.0",
    "black>=22.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",  # Modern linter/formatter
    "flake8>=5.0.0",
    "flake8-bugbear>=23.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-simplify>=0.21.0",
    "flake8-bandit>=4.1.0",
    "flake8-pytest-style>=1.7.0",
    "mypy>=1.0.0",
    "pydocstyle[toml]>=6.3.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0",
    "pip-audit>=2.6.0",  # Additional security scanning
    "semgrep>=1.45.0",  # Static analysis
    "pre-commit>=2.20.0",
    "tox>=4.0.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "pip-licenses>=4.3.0",  # License compliance
    "cyclonedx-bom>=4.0.0",  # SBOM generation
    "licensecheck>=2023.1.1",  # License checking
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
    "python-semantic-release>=8.0.0"  # Automated releases
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0"
]
examples = [
    "asyncio-mqtt>=0.13.0",
    "aiofiles>=22.1.0",
    "rich>=13.0.0"
]

[project.urls]
Homepage = "https://github.com/asachs01/py-superops"
Documentation = "https://py-superops.readthedocs.io"
Repository = "https://github.com/asachs01/py-superops.git"
Issues = "https://github.com/asachs01/py-superops/issues"
Changelog = "https://github.com/asachs01/py-superops/blob/main/CHANGELOG.md"

[project.scripts]
superops-cli = "py_superops.cli:main"

[tool.hatch.version]
path = "src/py_superops/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/py_superops"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
    "pyproject.toml"
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*", "*/.venv/*"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "yaml.*"
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=py_superops",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "network: marks tests that require network access"
]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/"
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Flake8 configuration (in setup.cfg format for compatibility)
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    ".tox",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv"
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D"
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

# pydocstyle configuration
[tool.pydocstyle]
convention = "google"
inherit = false
match = "(?!test_).*\\.py"

# Safety configuration for dependency scanning
[tool.safety]
ignore = []  # List of CVE IDs to ignore if needed
continue-on-error = false

# Ruff configuration (modern alternative to flake8)
[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "S",   # flake8-bandit
    "PT",  # flake8-pytest-style
    "PL",  # pylint
    "RUF", # Ruff-specific rules
]
ignore = [
    "E203",  # Whitespace before ':'
    "E501",  # Line too long (handled by black)
    "W503",  # Line break before binary operator
    "S101",  # Use of assert detected
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "D"]  # Allow asserts, magic values, no docstrings in tests
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"examples/*" = ["D", "S105", "T201"]  # No docstrings, allow hardcoded passwords/prints in examples

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["py_superops"]
force-single-line = false

# Tox configuration for testing across environments
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310,py311,py312,lint,type,security,docs
isolated_build = true

[testenv]
deps = -e.[dev]
commands =
    pytest {posargs}

[testenv:lint]
deps = -e.[dev]
commands =
    black --check src/ tests/
    isort --check-only src/ tests/
    flake8 src/ tests/

[testenv:type]
deps = -e.[dev]
commands = mypy src/

[testenv:security]
deps = -e.[dev]
commands =
    bandit -r src/
    safety check

[testenv:docs]
deps = -e.[docs]
commands =
    sphinx-build -b html docs docs/_build/html
"""

# Semantic release configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variable = "src/py_superops/__init__.py:__version__"
build_command = "python -m build"
upload_to_pypi = true
upload_to_release = true
hvcs = "github"
commit_author = "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
