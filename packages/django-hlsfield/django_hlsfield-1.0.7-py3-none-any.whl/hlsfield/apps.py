"""
üé¨ Django App –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è django-hlsfield

–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Django:
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (FFmpeg)
- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
- –í—ã–ø–æ–ª–Ω—è–µ—Ç health checks

–ê–≤—Ç–æ—Ä: akula993
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import logging
import os
import shutil
from pathlib import Path
from typing import List

from django.apps import AppConfig
from django.conf import settings
from django.core.checks import Error, Warning as CheckWarning, register, Tags

logger = logging.getLogger(__name__)


class HLSFieldConfig(AppConfig):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è django-hlsfield"""

    default_auto_field = "django.db.models.AutoField"
    name = "hlsfield"
    verbose_name = "HLS Video Fields"

    def ready(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        try:
            from . import signals  # noqa
        except ImportError:
            pass

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ debug
        if settings.DEBUG:
            self._print_version_info()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º system checks
        register(check_ffmpeg_availability, Tags.compatibility)
        register(check_hlsfield_settings, Tags.compatibility)
        register(check_storage_configuration, Tags.compatibility)

        logger.info("django-hlsfield application ready")

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞–∫–µ—Ç–∞"""

        from . import defaults

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º logger –¥–ª—è –ø–∞–∫–µ—Ç–∞
        hlsfield_logger = logging.getLogger("hlsfield")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if defaults.VERBOSE_LOGGING or settings.DEBUG:
            hlsfield_logger.setLevel(logging.DEBUG)
        else:
            hlsfield_logger.setLevel(logging.INFO)

        # –î–æ–±–∞–≤–ª—è–µ–º handler –µ—Å–ª–∏ –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ
        if not hlsfield_logger.handlers and not logging.getLogger().handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                "[%(asctime)s] %(name)s.%(levelname)s: %(message)s", datefmt="%H:%M:%S"
            )
            handler.setFormatter(formatter)
            hlsfield_logger.addHandler(handler)

    def _print_version_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ debug —Ä–µ–∂–∏–º–µ"""

        try:
            from . import __version__
            from . import defaults

            info_lines = [
                f"üìπ django-hlsfield v{__version__} loaded",
                f"   FFmpeg: {defaults.FFMPEG}",
                f"   Segments: {defaults.SEGMENT_DURATION}s",
                f"   Qualities: {len(defaults.DEFAULT_LADDER)}",
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Celery
            try:
                import celery

                info_lines.append(f"   Celery: {celery.__version__}")
            except ImportError:
                info_lines.append("   Celery: not available")

            logger.info("\n".join(info_lines))

        except Exception as e:
            logger.debug(f"Could not print version info: {e}")


# ==============================================================================
# DJANGO SYSTEM CHECKS
# ==============================================================================


def check_ffmpeg_availability(app_configs, **kwargs) -> List[Error]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg –∏ FFprobe"""

    from . import defaults

    errors = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
    if not shutil.which(defaults.FFMPEG):
        errors.append(
            Error(
                "FFmpeg not found",
                hint=(
                    f'FFmpeg binary not found at "{defaults.FFMPEG}". '
                    "Install FFmpeg or set HLSFIELD_FFMPEG setting to correct path."
                ),
                obj="hlsfield.ffmpeg",
                id="hlsfield.E001",
            )
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFprobe
    if not shutil.which(defaults.FFPROBE):
        errors.append(
            Error(
                "FFprobe not found",
                hint=(
                    f'FFprobe binary not found at "{defaults.FFPROBE}". '
                    "Install FFmpeg or set HLSFIELD_FFPROBE setting to correct path."
                ),
                obj="hlsfield.ffprobe",
                id="hlsfield.E002",
            )
        )

    return errors


def check_hlsfield_settings(app_configs, **kwargs) -> List[CheckWarning]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ django-hlsfield"""

    from . import defaults

    warnings = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ—Å—Ç–Ω–∏—Ü—É –∫–∞—á–µ—Å—Ç–≤
    try:
        from .fields import validate_ladder

        validate_ladder(defaults.DEFAULT_LADDER)
    except Exception as e:
        warnings.append(
            CheckWarning(
                f"Invalid DEFAULT_LADDER configuration: {e}",
                hint="Check HLSFIELD_DEFAULT_LADDER setting format",
                obj="hlsfield.settings",
                id="hlsfield.W001",
            )
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if defaults.SEGMENT_DURATION < 2 or defaults.SEGMENT_DURATION > 60:
        warnings.append(
            CheckWarning(
                f"SEGMENT_DURATION ({defaults.SEGMENT_DURATION}s) outside recommended range 2-60s",
                hint="Very short or long segments may cause playback issues",
                obj="hlsfield.settings",
                id="hlsfield.W002",
            )
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if defaults.MAX_FILE_SIZE > 10 * 1024**3:  # > 10GB
        warnings.append(
            CheckWarning(
                f"MAX_FILE_SIZE ({defaults.MAX_FILE_SIZE / (1024 ** 3):.1f}GB) is very large",
                hint="Large files may cause memory issues during processing",
                obj="hlsfield.settings",
                id="hlsfield.W003",
            )
        )

    return warnings


def check_storage_configuration(app_configs, **kwargs) -> List[CheckWarning]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ storage"""

    from django.core.exceptions import ImproperlyConfigured

    warnings = []

    try:
        from django.conf import settings

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MEDIA_ROOT –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if hasattr(settings, "DEFAULT_FILE_STORAGE"):
            if "FileSystemStorage" in settings.DEFAULT_FILE_STORAGE:
                media_root = getattr(settings, "MEDIA_ROOT", "")

                if not media_root:
                    warnings.append(
                        CheckWarning(
                            "MEDIA_ROOT not set with FileSystemStorage",
                            hint="Set MEDIA_ROOT for file uploads to work properly",
                            obj="django.settings",
                            id="hlsfield.W004",
                        )
                    )
                elif not os.path.exists(media_root):
                    warnings.append(
                        CheckWarning(
                            f"MEDIA_ROOT directory does not exist: {media_root}",
                            hint="Create the directory or update MEDIA_ROOT setting",
                            obj="django.settings",
                            id="hlsfield.W005",
                        )
                    )
                elif not os.access(media_root, os.W_OK):
                    warnings.append(
                        CheckWarning(
                            f"MEDIA_ROOT is not writable: {media_root}",
                            hint="Check directory permissions",
                            obj="django.settings",
                            id="hlsfield.W006",
                        )
                    )

    except (ImportError, ImproperlyConfigured):
        # Django –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        pass

    return warnings


# ==============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú
# ==============================================================================


class HLSFieldReadyState:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    _ready = False
    _checks_passed = True
    _errors = []

    @classmethod
    def mark_ready(cls):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–µ"""
        cls._ready = True

    @classmethod
    def is_ready(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return cls._ready and cls._checks_passed

    @classmethod
    def add_error(cls, error: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        cls._errors.append(error)
        cls._checks_passed = False

    @classmethod
    def get_errors(cls) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫"""
        return cls._errors.copy()


# ==============================================================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ò–ì–†–ê–¶–ò–ò (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
# ==============================================================================


def auto_create_media_directories():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""

    if not hasattr(settings, "MEDIA_ROOT") or not settings.MEDIA_ROOT:
        return

    media_root = Path(settings.MEDIA_ROOT)

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    directories = [
        media_root / "videos",
        media_root / "videos" / "hls",
        media_root / "videos" / "dash",
        media_root / "videos" / "previews",
    ]

    created = []
    for directory in directories:
        try:
            if not directory.exists():
                directory.mkdir(parents=True, exist_ok=True)
                created.append(str(directory))
        except Exception as e:
            logger.warning(f"Could not create directory {directory}: {e}")

    if created:
        logger.info(f"Created media directories: {', '.join(created)}")


# ==============================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° DJANGO DEBUG TOOLBAR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ==============================================================================


def setup_debug_toolbar_panels():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª–∏ –≤ Django Debug Toolbar –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ"""

    try:
        from debug_toolbar.settings import CONFIG

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à—É –ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if "hlsfield.debug.VideoProcessingPanel" not in CONFIG["SHOW_TOOLBAR_CALLBACK"]:
            pass  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –≤ debug.py

    except ImportError:
        pass  # Debug toolbar –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω


# ==============================================================================
# –°–ò–ì–ù–ê–õ–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
# ==============================================================================

# –í –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ signals.py –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
# from django.db.models.signals import post_migrate
# from django.dispatch import receiver
#
# @receiver(post_migrate, sender=HLSFieldConfig)
# def create_media_directories(sender, **kwargs):
#     """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π"""
#     auto_create_media_directories()
