"""
# Пакет NLPF StateMachine.

*Фреймворк для удобного написания сценариев для голосовых ассистентов Салют на Python.*

В основе своей фреймворк имеет [SmartApp Framework](https://github.com/sberdevices/smart_app_framework),
он же **NLP Framework** или **NLPF**.

![sber](static/assistant.png){:.sber-icon style="width: 100px"}

## Основные понятия
### Canvas App
--- web-приложение с голосовым управлением.
([документация](https://developers.sber.ru/docs/ru/salute/basics/canvasapp),
[видео на youtube](https://www.youtube.com/watch?v=2_AbcyfzHTo&t=0s))

### Фронт
--- JS-вёрстка, которая крутится на клиенте. (девайс, мобильное приложение, ...)

#### Экран (или страница)
--- Раздел приложения, ограниченный конкретной логикой.

**Примеры экранов:**

* Промо-экран;
* Экран авторизации;
* Экран корзины;
* ...

### Запрос (message)
--- Сообщение, которое прилетает в нашу систему.

Все запросы/ответы описываются в виде [pydantic моделей](https://pydantic-docs.helpmanual.io/).
Подробнее все модели можно посмотреть в разделе `nlpf_statemachine.models`.

**Запросы могут быть разные:**

* Голосовой запрос от пользователя (Создаётся объект наследние `nlpf_statemachine.models.MessageToSkill`);
* ServerAction --- событие, прилетевшее с фронта
  (Создаётся объект наследник `nlpf_statemachine.models.ServerActionMessage`);
* Интеграцонные сообщения --- события, прилетевшие от интеграций, памяти ассистента, сторонних систем
  (наследник `nlpf_statemachine.models.IntegrationMessage`);

### Слот
--- Параметр в голосовом запросе. Это может быть город, время, любая другая структурированная информация, которую может
сказать пользователь.

### Форма
--- Набор слотов, извлечённых из запроса.

Подробнее про экшены можно посмотреть в разделе `nlpf_statemachine.kit.form`.


### Событие (event)
--- любое событие, которое произошло в системе, на что наше приложение может отреагировать. *Определяется из запроса!*

**Примеры событий**

* У пользователя есть потребность (интент), он выражает её вербально.
  К нам прилетает запрос `nlpf_statemachine.models.MessageToSkill`.
  Из него мы можем определить интент, который, в свою очередь, и является событием;
* Прилетел `nlpf_statemachine.models.ServerActionMessage` с фронта;
* В системе сработал таймер; (этот тоже `nlpf_statemachine.models.ServerActionMessage`)
* Произошёл таймаут --- прилетел запрос `nlpf_statemachine.models.LocalTimeout`.
* ...

Как правило событие можно описать конкретным ключом (строкой).

### Классификатор
--- объект, который может из запроса определить конкретное событие, которое произошло.
    То есть вернуть его ключ.

Подробнее про классификаторы можно посмотреть в разделе `nlpf_statemachine.kit.classifier`.

### Экшен (Action)
--- обработчик конкертного запроса.

Подробнее про экшены можно посмотреть в разделе `nlpf_statemachine.kit.actions`.


### Сценарий (Scenario)
--- коллекция классификаторов, экшенов, форм.

Подробнее про экшены можно посмотреть в разделе `nlpf_statemachine.kit.scenario`.

### Контекстный менеджер.
--- объект, отвечающий за основную логику работы приложения.

Подробнее про экшены можно посмотреть в разделе `nlpf_statemachine.kit.context_manager`.
"""

__version__ = "2.4.0rc6"

__all__ = [
    __version__,
]
