# coding: utf-8

"""
    Selling Partner API for Orders

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class DeliveryPreferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drop_off_location': 'str',
        'preferred_delivery_time': 'PreferredDeliveryTime',
        'other_attributes': 'List[OtherDeliveryAttributes]',
        'address_instructions': 'str',
    }

    attribute_map = {
        'drop_off_location': 'DropOffLocation',
        'preferred_delivery_time': 'PreferredDeliveryTime',
        'other_attributes': 'OtherAttributes',
        'address_instructions': 'AddressInstructions',
    }

    def __init__(self, drop_off_location=None, preferred_delivery_time=None, other_attributes=None, address_instructions=None, _configuration=None):  # noqa: E501
        """DeliveryPreferences - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._drop_off_location = None
        self._preferred_delivery_time = None
        self._other_attributes = None
        self._address_instructions = None
        self.discriminator = None

        if drop_off_location is not None:
            self.drop_off_location = drop_off_location
        if preferred_delivery_time is not None:
            self.preferred_delivery_time = preferred_delivery_time
        if other_attributes is not None:
            self.other_attributes = other_attributes
        if address_instructions is not None:
            self.address_instructions = address_instructions

    @property
    def drop_off_location(self):
        """Gets the drop_off_location of this DeliveryPreferences.  # noqa: E501

        Drop-off location selected by the customer.  # noqa: E501

        :return: The drop_off_location of this DeliveryPreferences.  # noqa: E501
        :rtype: str
        """
        return self._drop_off_location

    @drop_off_location.setter
    def drop_off_location(self, drop_off_location):
        """Sets the drop_off_location of this DeliveryPreferences.

        Drop-off location selected by the customer.  # noqa: E501

        :param drop_off_location: The drop_off_location of this DeliveryPreferences.  # noqa: E501
        :type: str
        """

        self._drop_off_location = drop_off_location

    @property
    def preferred_delivery_time(self):
        """Gets the preferred_delivery_time of this DeliveryPreferences.  # noqa: E501


        :return: The preferred_delivery_time of this DeliveryPreferences.  # noqa: E501
        :rtype: PreferredDeliveryTime
        """
        return self._preferred_delivery_time

    @preferred_delivery_time.setter
    def preferred_delivery_time(self, preferred_delivery_time):
        """Sets the preferred_delivery_time of this DeliveryPreferences.


        :param preferred_delivery_time: The preferred_delivery_time of this DeliveryPreferences.  # noqa: E501
        :type: PreferredDeliveryTime
        """

        self._preferred_delivery_time = preferred_delivery_time

    @property
    def other_attributes(self):
        """Gets the other_attributes of this DeliveryPreferences.  # noqa: E501

        Enumerated list of miscellaneous delivery attributes associated with the shipping address.  # noqa: E501

        :return: The other_attributes of this DeliveryPreferences.  # noqa: E501
        :rtype: List[OtherDeliveryAttributes]
        """
        return self._other_attributes

    @other_attributes.setter
    def other_attributes(self, other_attributes):
        """Sets the other_attributes of this DeliveryPreferences.

        Enumerated list of miscellaneous delivery attributes associated with the shipping address.  # noqa: E501

        :param other_attributes: The other_attributes of this DeliveryPreferences.  # noqa: E501
        :type: List[OtherDeliveryAttributes]
        """

        self._other_attributes = other_attributes

    @property
    def address_instructions(self):
        """Gets the address_instructions of this DeliveryPreferences.  # noqa: E501

        Building instructions, nearby landmark or navigation instructions.  # noqa: E501

        :return: The address_instructions of this DeliveryPreferences.  # noqa: E501
        :rtype: str
        """
        return self._address_instructions

    @address_instructions.setter
    def address_instructions(self, address_instructions):
        """Sets the address_instructions of this DeliveryPreferences.

        Building instructions, nearby landmark or navigation instructions.  # noqa: E501

        :param address_instructions: The address_instructions of this DeliveryPreferences.  # noqa: E501
        :type: str
        """

        self._address_instructions = address_instructions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeliveryPreferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryPreferences):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeliveryPreferences):
            return True

        return self.to_dict() != other.to_dict()
