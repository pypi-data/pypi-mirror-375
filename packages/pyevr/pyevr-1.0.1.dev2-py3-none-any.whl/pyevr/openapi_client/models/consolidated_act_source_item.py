# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei õnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.certificate_claim import CertificateClaim
from pyevr.openapi_client.models.holding_base_type import HoldingBaseType
from pyevr.openapi_client.models.previous_owner import PreviousOwner
from pyevr.openapi_client.models.shipment_assortment import ShipmentAssortment


class ConsolidatedActSourceItem(BaseModel):
    """
    ConsolidatedActSourceItem
    """  # noqa: E501

    property_name: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(
        default=None, alias="propertyName"
    )
    cadaster: Annotated[str, Field(min_length=1, strict=True, max_length=500)] = Field(
        description="Katastritunnus"
    )
    compartment: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="Kvartal"
    )
    assortment: ShipmentAssortment
    amount: StrictInt = Field(description="Kogus")
    unit_code: Annotated[str, Field(min_length=1, strict=True, max_length=10)] = Field(
        description="[Mõõtühiku kood](#operation/MeasurementUnits_List)",
        alias="unitCode",
    )
    holding_base_type: HoldingBaseType = Field(alias="holdingBaseType")
    forest_notice_number: Optional[
        Annotated[str, Field(strict=True, max_length=500)]
    ] = Field(
        default=None, description="Metsateatise number", alias="forestNoticeNumber"
    )
    contract_number: Optional[Annotated[str, Field(strict=True, max_length=500)]] = (
        Field(default=None, description="Dokumendi number", alias="contractNumber")
    )
    contract_date: Optional[datetime] = Field(
        default=None, description="Dokumendi kuupäev", alias="contractDate"
    )
    certificate: Optional[CertificateClaim] = None
    previous_owner: Optional[PreviousOwner] = Field(default=None, alias="previousOwner")
    __properties: ClassVar[List[str]] = [
        "propertyName",
        "cadaster",
        "compartment",
        "assortment",
        "amount",
        "unitCode",
        "holdingBaseType",
        "forestNoticeNumber",
        "contractNumber",
        "contractDate",
        "certificate",
        "previousOwner",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsolidatedActSourceItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assortment
        if self.assortment:
            _dict["assortment"] = self.assortment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of certificate
        if self.certificate:
            _dict["certificate"] = self.certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_owner
        if self.previous_owner:
            _dict["previousOwner"] = self.previous_owner.to_dict()
        # set to None if property_name (nullable) is None
        # and model_fields_set contains the field
        if self.property_name is None and "property_name" in self.model_fields_set:
            _dict["propertyName"] = None

        # set to None if compartment (nullable) is None
        # and model_fields_set contains the field
        if self.compartment is None and "compartment" in self.model_fields_set:
            _dict["compartment"] = None

        # set to None if forest_notice_number (nullable) is None
        # and model_fields_set contains the field
        if (
            self.forest_notice_number is None
            and "forest_notice_number" in self.model_fields_set
        ):
            _dict["forestNoticeNumber"] = None

        # set to None if contract_number (nullable) is None
        # and model_fields_set contains the field
        if self.contract_number is None and "contract_number" in self.model_fields_set:
            _dict["contractNumber"] = None

        # set to None if contract_date (nullable) is None
        # and model_fields_set contains the field
        if self.contract_date is None and "contract_date" in self.model_fields_set:
            _dict["contractDate"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsolidatedActSourceItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "propertyName": obj.get("propertyName"),
                "cadaster": obj.get("cadaster"),
                "compartment": obj.get("compartment"),
                "assortment": ShipmentAssortment.from_dict(obj["assortment"])
                if obj.get("assortment") is not None
                else None,
                "amount": obj.get("amount"),
                "unitCode": obj.get("unitCode"),
                "holdingBaseType": obj.get("holdingBaseType"),
                "forestNoticeNumber": obj.get("forestNoticeNumber"),
                "contractNumber": obj.get("contractNumber"),
                "contractDate": obj.get("contractDate"),
                "certificate": CertificateClaim.from_dict(obj["certificate"])
                if obj.get("certificate") is not None
                else None,
                "previousOwner": PreviousOwner.from_dict(obj["previousOwner"])
                if obj.get("previousOwner") is not None
                else None,
            }
        )
        return _obj
