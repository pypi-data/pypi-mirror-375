from typing import IO, Any, Self, TextIO

from rich.console import Console
from rich.status import Status

from bear_dereth.constants.enums.log_level import LogLevel
from bear_dereth.tools.logger.config import ConsoleOptions, CustomTheme, LoggerConfig
from bear_dereth.tools.logger.protocols.handler import Handler
from bear_dereth.tools.logger.protocols.printer import BasePrinter

class BearLogger[T: TextIO | IO](BasePrinter):
    name: str | None
    config: LoggerConfig
    console_options: ConsoleOptions
    level: LogLevel
    theme: CustomTheme
    handlers: list[Handler[Any]]
    _console: Console

    def __init__(
        self,
        name: str | None = None,
        config: LoggerConfig | None = None,
        console_options: ConsoleOptions = ...,
        level: LogLevel | str | int | None = None,
        custom_theme: CustomTheme | None = None,
        handlers: list[Handler[Any]] | None = None,
        file: T | None = None,
        **kwargs,
    ) -> None: ...
    # Handler management methods
    def add_handler(self, handler: Handler[Any]) -> None: ...
    def remove_handler(self, handler: Handler[Any]) -> None: ...
    def clear_handlers(self) -> None: ...
    def has_handlers(self) -> bool: ...

    # Core logging methods (dynamically created based on theme)
    def info(self, msg: object, **kwargs: Any) -> None: ...
    def warning(self, msg: object, **kwargs: Any) -> None: ...
    def error(self, msg: object, **kwargs: Any) -> None: ...
    def debug(self, msg: object, **kwargs: Any) -> None: ...
    def success(self, msg: object, **kwargs: Any) -> None: ...
    def failure(self, msg: object, **kwargs: Any) -> None: ...
    def exception(self, msg: object, **kwargs: Any) -> None: ...

    # Rich integration methods
    def print_json(self, json: str | None = None, data: Any = None, **kwargs: Any) -> None: ...
    def inspect(self, obj: object, **kwargs: Any) -> None: ...
    def log(self, msg: object, **kwargs: Any) -> None: ...
    def status(self, status: str, **kwargs: Any) -> Status: ...

    # Resource management
    def close(self) -> None: ...
    def flush(self) -> None: ...

    # File property
    @property
    def file(self) -> T: ...
    @file.setter
    def file(self, new_file: T) -> None: ...

    # Context manager
    def __enter__(self) -> Self: ...
    def __exit__(self, exc_type: object, exc_value: object, traceback: object) -> None: ...
