# coding: utf-8

"""
    CyborgDB Service

    REST API for CyborgDB: The Confidential Vector Database

    The version of the OpenAPI document: 0.12.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class QueryRequest(BaseModel):
    """
    Request model for performing a similarity search in the encrypted index.  Inherits:     IndexOperationRequest: Includes `index_name` and `index_key`.  Attributes:     query_vectors (Optional[List[float]]): The vector used for the similarity search.     query_contents (Optional[str]): Text-based content used for semantic search.     top_k (Optional[int]): Number of nearest neighbors to return for each query. Defaults to 100.     n_probes (Optional[int]): Number of lists to probe during the query. Defaults to auto.     greedy (Optional[bool]): Whether to use greedy search. Defaults to False.     filters (Optional[Dict[str, Any]]): JSON-like dictionary specifying metadata filters. Defaults to {}.     include (List[str]): List of additional fields to include in the response. Defaults to `[\"distance\", \"metadata\"]`.
    """ # noqa: E501
    index_key: StrictStr = Field(description="32-byte encryption key as hex string")
    index_name: StrictStr = Field(description="ID name")
    query_vectors: Optional[List[Union[StrictFloat, StrictInt]]] = None
    query_contents: Optional[StrictStr] = None
    top_k: Optional[StrictInt] = None
    n_probes: Optional[StrictInt] = None
    greedy: Optional[StrictBool] = None
    filters: Optional[Dict[str, Any]] = None
    include: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["index_key", "index_name", "query_vectors", "query_contents", "top_k", "n_probes", "greedy", "filters", "include"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if query_vectors (nullable) is None
        # and model_fields_set contains the field
        if self.query_vectors is None and "query_vectors" in self.model_fields_set:
            _dict['query_vectors'] = None

        # set to None if query_contents (nullable) is None
        # and model_fields_set contains the field
        if self.query_contents is None and "query_contents" in self.model_fields_set:
            _dict['query_contents'] = None

        # set to None if top_k (nullable) is None
        # and model_fields_set contains the field
        if self.top_k is None and "top_k" in self.model_fields_set:
            _dict['top_k'] = None

        # set to None if n_probes (nullable) is None
        # and model_fields_set contains the field
        if self.n_probes is None and "n_probes" in self.model_fields_set:
            _dict['n_probes'] = None

        # set to None if greedy (nullable) is None
        # and model_fields_set contains the field
        if self.greedy is None and "greedy" in self.model_fields_set:
            _dict['greedy'] = None

        # set to None if filters (nullable) is None
        # and model_fields_set contains the field
        if self.filters is None and "filters" in self.model_fields_set:
            _dict['filters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index_key": obj.get("index_key"),
            "index_name": obj.get("index_name"),
            "query_vectors": obj.get("query_vectors"),
            "query_contents": obj.get("query_contents"),
            "top_k": obj.get("top_k"),
            "n_probes": obj.get("n_probes"),
            "greedy": obj.get("greedy"),
            "filters": obj.get("filters"),
            "include": obj.get("include")
        })
        return _obj


