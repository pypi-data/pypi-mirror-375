;##################################################################
; Define encoder loss protection
; Original Author: Alan Greer
; Used variables: P400..497,mxx84,85,86 defined
;
; P401 = 0 Encoder loss off for axis 1
; P401 = 1 Encoder loss on for axis 1
;##################################################################

; Turn encoder loss protection on or off
P401 = 1  ; Pre-DCM Slit (Inner)
P402 = 1  ; Pre-DCM Slit (Outer)
P403 = 1  ; Pre-DCM Slit (Upper)
P404 = 1  ; Pre-DCM Slit (Lower)
P405 = 1  ; DCM Bragg
P406 = 1  ; DCM Bragg velocity encoder
P407 = 0  ; Not used
P408 = 1  ; DCM Pitch
P409 = 1  ; DCM Roll
P410 = 1  ; DCM Perp
P411 = 1  ; Pre-HFM QBPM
P412 = 1  ; Pre-HFM Slit (Inner) 
P413 = 1  ; Pre-HFM Slit (Outer)
P414 = 1  ; Pre-HFM Slit (Upper)
P415 = 1  ; Pre-HFM Slit (Lower)
P416 = 0  ; Not used
P417 = 1  ; HFM Jack 1
P418 = 1  ; HFM Jack 2
P419 = 1  ; HFM Jack 3
P420 = 1  ; Pre-VFM QBPM
P421 = 1  ; Pre-VFM Slit (Inner)
P422 = 1  ; Pre-VFM Slit (Outer)
P423 = 1  ; Pre-VFM Slit (Upper)
P424 = 1  ; Pre-VFM Slit (Lower)
P425 = 1  ; VFM Jack 1
P426 = 1  ; VFM Jack 2
P427 = 1  ; VFM Jack 3
P428 = 0  ; Post-VFM QBPM (no encoder)
P429 = 1  ; HFM Translation 1
P430 = 1  ; HFM Translation 2
P431 = 1  ; VFM Translation 1
P432 = 1  ; VFM Translation 2

; Memory locations for encoder loss bit
ms0,i21  = $6488C8DCC0A1
ms0,i22  = $6488C9DCC0A2
ms0,i23  = $6488CADCC0A3
ms0,i24  = $6488CBDCC0A5
ms0,i25  = $6488CCDCC0A6
ms0,i26  = $6488CDDCC0A7
ms0,i27  = $6488CEDCC0A9
ms0,i28  = $6488CFDCC0AA
ms0,i29  = $6498C8DCC0AB
ms0,i30  = $6498C9DCC0AD
ms0,i31  = $6498CADCC0AE
ms0,i32  = $6498CBDCC0AF
ms0,i33  = $6498CCDCC0B1
ms0,i34  = $6498CDDCC0B2
ms0,i35  = $6498CEDCC0B3
ms0,i36  = $6498CFDCC0B5
ms32,i21 = $6488C8DCC0A1
ms32,i22 = $6488C9DCC0A2
ms32,i23 = $6488CADCC0A3
ms32,i24 = $6488CBDCC0A5
ms32,i25 = $6488CCDCC0A6
ms32,i26 = $6488CDDCC0A7
ms32,i27 = $6488CEDCC0A9
ms32,i28 = $6488CFDCC0AA
ms32,i29 = $6498C8DCC0AB
ms32,i30 = $6498C9DCC0AD
ms32,i31 = $6498CADCC0AE
ms32,i32 = $6498CBDCC0AF
ms32,i33 = $6498CCDCC0B1
ms32,i34 = $6498CDDCC0B2
ms32,i35 = $6498CEDCC0B3
ms32,i36 = $6498CFDCC0B5

; i19 controls how often the transfer lines (below) are read
ms0,i19=$4
ms32,i19=$4

; i20 sets up 16-bit data transfer lines between
; expansion cards and UMAC macro card.
ms0,i20=$FFFF
ms32,i20=$FFFF

; Configure IO, enable all nodes
ms0,i975  = $CCC
ms32,i975 = $CCC

; Configure I-variables to enable MACRO station nodes
ms0,i996  = $FBFFF
ms32,i996 = $2FBFFF

; Macro IC0 and IC2 Node Activate Control
i6841 = $FFFFF
i6941 = $2FFFFF

; Set up the M-variable definitions to point to
; the encoder loss memory locations
m184->X:$78421,13
m284->X:$78422,13
m384->X:$78423,13
m484->X:$78425,13
m584->X:$78426,13
m684->X:$78427,13
m784->X:$78429,13
m884->X:$7842A,13
m984->X:$7842B,13
m1084->X:$7842D,13
m1184->X:$7842E,13
m1284->X:$7842F,13
m1384->X:$78431,13
m1484->X:$78432,13
m1584->X:$78433,13
m1684->X:$78435,13
m1784->X:$7A421,13
m1884->X:$7A422,13
m1984->X:$7A423,13
m2084->X:$7A425,13
m2184->X:$7A426,13
m2284->X:$7A427,13
m2384->X:$7A429,13
m2484->X:$7A42A,13
m2584->X:$7A42B,13
m2684->X:$7A42D,13
m2784->X:$7A42E,13
m2884->X:$7A42F,13
m2984->X:$7A431,13
m3084->X:$7A432,13
m3184->X:$7A433,13
m3284->X:$7A435,13

; used for storing current axis number
#define axis_number              P400

; use axis_number to calculate the P variable to look in to see
; if encoder loss protection is turned on on this axis
#define encoder_detection        P(P400 + 400)

; m variable pointing at the memory location showing if the encoder is present
#define encoder_loss_bit         M(P400*100 + 84)

; m variable pointing at the CS number (-1) for the motor
#define coord_system_number      M(P400*100 + 85)

; m variable saying if the motor is in a CS
#define in_coord_system          M(P400*100 + 86)

; this is the flag that is set if encoder is lost
; needs to be reset by EPICS when encoder is restored
#define encoder_lost_flag        P(P400+464)
P465..496=0

; this is the old following error limit
#define saved_fe_limit           P(P400+432)

; this is the actual following error limit
#define following_error_limit    I(P400*100 + 11)

; define some kill commands
#define abort_coordinate_move    &COMMAND"A"
#define kill_axis                &COMMAND"K"

; Set up the M-variables to look for the CS number
m185->Y:$0000C0,20,4
m285->Y:$000140,20,4
m385->Y:$0001C0,20,4
m485->Y:$000240,20,4
m585->Y:$0002C0,20,4
m685->Y:$000340,20,4
m785->Y:$0003C0,20,4
m885->Y:$000440,20,4
m985->Y:$0004C0,20,4
m1085->Y:$000540,20,4
m1185->Y:$0005C0,20,4
m1285->Y:$000640,20,4
m1385->Y:$0006C0,20,4
m1485->Y:$000740,20,4
m1585->Y:$0007C0,20,4
m1685->Y:$000840,20,4
m1785->Y:$0008C0,20,4
m1885->Y:$000940,20,4
m1985->Y:$0009C0,20,4
m2085->Y:$000A40,20,4
m2185->Y:$000AC0,20,4
m2285->Y:$000B40,20,4
m2385->Y:$000BC0,20,4
m2485->Y:$000C40,20,4
m2585->Y:$000CC0,20,4
m2685->Y:$000D40,20,4
m2785->Y:$000DC0,20,4
m2885->Y:$000E40,20,4
m2985->Y:$000EC0,20,4
m3085->Y:$000F40,20,4
m3185->Y:$000FC0,20,4
m3285->Y:$001040,20,4

; Set up the M-variables to see if the motor is in a CS
m186->Y:$0000C0,15,1
m286->Y:$000140,15,1
m386->Y:$0001C0,15,1
m486->Y:$000240,15,1
m586->Y:$0002C0,15,1
m686->Y:$000340,15,1
m786->Y:$0003C0,15,1
m886->Y:$000440,15,1
m986->Y:$0004C0,15,1
m1086->Y:$000540,15,1
m1186->Y:$0005C0,15,1
m1286->Y:$000640,15,1
m1386->Y:$0006C0,15,1
m1486->Y:$000740,15,1
m1586->Y:$0007C0,15,1
m1686->Y:$000840,15,1
m1786->Y:$0008C0,15,1
m1886->Y:$000940,15,1
m1986->Y:$0009C0,15,1
m2086->Y:$000A40,15,1
m2186->Y:$000AC0,15,1
m2286->Y:$000B40,15,1
m2386->Y:$000BC0,15,1
m2486->Y:$000C40,15,1
m2586->Y:$000CC0,15,1
m2686->Y:$000D40,15,1
m2786->Y:$000DC0,15,1
m2886->Y:$000E40,15,1
m2986->Y:$000EC0,15,1
m3086->Y:$000F40,15,1
m3186->Y:$000FC0,15,1
m3286->Y:$001040,15,1


;**********************************************************
;
; Encoder loss detection PLC.  This checks if the encoder
; is lost for each axis.  If it is, it kills the axis,
; sets the following error to 1/16th of a count and aborts
; any coordinate system move that this axis belongs to.
;
; If the encoder is recovered and the latch reset (P(364+axis_number)=0)
; then the following error will be set back to its orginal
; value
;
;**********************************************************
OPEN PLC 4
CLEAR

axis_number = 1
; Loop through all axis
WHILE(axis_number < 33)
        ; Is encoder loss turned on for this axis
        IF(encoder_detection = 1)
                ; Encoder loss is on so check
                ; 1) If the loss bit is set to zero
                ; 2) If the lost flag is set to zero
                IF(encoder_loss_bit=0 AND encoder_lost_flag=0)
                        ; Encoder loss detected
                        ; If the following error limit is sensible
                        ; then save it for future reference
                        IF(following_error_limit != 1)
                                saved_fe_limit = following_error_limit
                        ENDIF
                        ; Set the lost flag true
                        encoder_lost_flag=1
                        ; Check to see if there is a coordinate system
                        ; for this axis that needs aborting
                        IF(in_coord_system > 0)
                                ; Abort any coordinate system motion
                                P497 = coord_system_number + 1
                                ADDRESS&P497
                                abort_coordinate_move
                        ENDIF
                        ; Kill the specific axis
                        ADDRESS#axis_number
                        kill_axis
                ENDIF
        ENDIF

        ; Check if the encoder lost flag is set
        IF(encoder_lost_flag = 1)
                ; Encoder has been lost so set the following
                ; error for this axis to 1/16th count
                following_error_limit = 1
        ENDIF

        IF(encoder_lost_flag = 0 AND following_error_limit = 1)
                IF(saved_fe_limit > 1)
                        following_error_limit = saved_fe_limit
                ENDIF
        ENDIF

        axis_number=axis_number+1
ENDWHILE

CLOSE

ENABLE PLC4
