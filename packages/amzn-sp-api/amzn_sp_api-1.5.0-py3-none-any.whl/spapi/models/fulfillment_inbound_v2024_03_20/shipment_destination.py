# coding: utf-8

"""
    The Selling Partner API for FBA inbound operations.

    The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

    The version of the OpenAPI document: 2024-03-20
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShipmentDestination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'Address',
        'destination_type': 'str',
        'warehouse_id': 'str',
    }

    attribute_map = {
        'address': 'address',
        'destination_type': 'destinationType',
        'warehouse_id': 'warehouseId',
    }

    def __init__(self, address=None, destination_type=None, warehouse_id=None, _configuration=None):  # noqa: E501
        """ShipmentDestination - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._destination_type = None
        self._warehouse_id = None
        self.discriminator = None

        if address is not None:
            self.address = address
        self.destination_type = destination_type
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id

    @property
    def address(self):
        """Gets the address of this ShipmentDestination.  # noqa: E501


        :return: The address of this ShipmentDestination.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ShipmentDestination.


        :param address: The address of this ShipmentDestination.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def destination_type(self):
        """Gets the destination_type of this ShipmentDestination.  # noqa: E501

        The type of destination for this shipment. Possible values: `AMAZON_OPTIMIZED`, `AMAZON_WAREHOUSE`.  # noqa: E501

        :return: The destination_type of this ShipmentDestination.  # noqa: E501
        :rtype: str
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this ShipmentDestination.

        The type of destination for this shipment. Possible values: `AMAZON_OPTIMIZED`, `AMAZON_WAREHOUSE`.  # noqa: E501

        :param destination_type: The destination_type of this ShipmentDestination.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and destination_type is None:
            raise ValueError("Invalid value for `destination_type`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                destination_type is not None and len(destination_type) > 1024):
            raise ValueError("Invalid value for `destination_type`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                destination_type is not None and len(destination_type) < 1):
            raise ValueError("Invalid value for `destination_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._destination_type = destination_type

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ShipmentDestination.  # noqa: E501

        The warehouse that the shipment should be sent to. This can be empty if the destination type is `AMAZON_OPTIMIZED`.  # noqa: E501

        :return: The warehouse_id of this ShipmentDestination.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ShipmentDestination.

        The warehouse that the shipment should be sent to. This can be empty if the destination type is `AMAZON_OPTIMIZED`.  # noqa: E501

        :param warehouse_id: The warehouse_id of this ShipmentDestination.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                warehouse_id is not None and len(warehouse_id) > 1024):
            raise ValueError("Invalid value for `warehouse_id`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                warehouse_id is not None and len(warehouse_id) < 1):
            raise ValueError("Invalid value for `warehouse_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._warehouse_id = warehouse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentDestination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentDestination):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipmentDestination):
            return True

        return self.to_dict() != other.to_dict()
