# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.v4_workflows_setup_post_request_location import V4WorkflowsSetupPostRequestLocation
from openapi_client.models.v4_workflows_setup_post_request_monitoring import V4WorkflowsSetupPostRequestMonitoring
from typing import Optional, Set
from typing_extensions import Self

class V4WorkflowsSetupPostRequest(BaseModel):
    """
    V4WorkflowsSetupPostRequest
    """ # noqa: E501
    link: Optional[StrictStr] = Field(default=None, description="The link for the workflow")
    entity: Optional[StrictStr] = Field(default=None, description="The entity type for the workflow")
    job_id: Optional[StrictStr] = Field(default=None, description="The job identifier", alias="jobId")
    interval: Optional[StrictStr] = Field(default=None, description="The interval for the workflow")
    tags: Optional[List[StrictStr]] = Field(default=None, description="The tags for the workflow")
    schedules: Optional[List[StrictStr]] = Field(default=None, description="The schedules for the workflow")
    location: Optional[V4WorkflowsSetupPostRequestLocation] = None
    monitoring: Optional[V4WorkflowsSetupPostRequestMonitoring] = None
    limit: Optional[StrictInt] = Field(default=None, description="The limit on the number of records")
    __properties: ClassVar[List[str]] = ["link", "entity", "jobId", "interval", "tags", "schedules", "location", "monitoring", "limit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V4WorkflowsSetupPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitoring
        if self.monitoring:
            _dict['monitoring'] = self.monitoring.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V4WorkflowsSetupPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "link": obj.get("link"),
            "entity": obj.get("entity"),
            "jobId": obj.get("jobId"),
            "interval": obj.get("interval"),
            "tags": obj.get("tags"),
            "schedules": obj.get("schedules"),
            "location": V4WorkflowsSetupPostRequestLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "monitoring": V4WorkflowsSetupPostRequestMonitoring.from_dict(obj["monitoring"]) if obj.get("monitoring") is not None else None,
            "limit": obj.get("limit")
        })
        return _obj


