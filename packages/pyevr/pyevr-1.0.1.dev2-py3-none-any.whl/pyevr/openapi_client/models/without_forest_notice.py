# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei Ãµnnestu klienti genereerida.

The version of the OpenAPI document: 1.35.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import ConfigDict, Field
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.eudr_number import EudrNumber
from pyevr.openapi_client.models.holding_base import HoldingBase


class WithoutForestNotice(HoldingBase):
    """
    WithoutForestNotice
    """  # noqa: E501

    cadaster: Annotated[str, Field(min_length=1, strict=True, max_length=500)] = Field(
        description="Katastritunnus"
    )
    compartment: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="Kvartal"
    )
    forest_allocation_number: Optional[
        Annotated[str, Field(strict=True, max_length=200)]
    ] = Field(default=None, description="Metsaeraldis", alias="forestAllocationNumber")
    __properties: ClassVar[List[str]] = [
        "eudrNumbers",
        "type",
        "cadaster",
        "compartment",
        "forestAllocationNumber",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WithoutForestNotice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in eudr_numbers (list)
        _items = []
        if self.eudr_numbers:
            for _item_eudr_numbers in self.eudr_numbers:
                if _item_eudr_numbers:
                    _items.append(_item_eudr_numbers.to_dict())
            _dict["eudrNumbers"] = _items
        # set to None if eudr_numbers (nullable) is None
        # and model_fields_set contains the field
        if self.eudr_numbers is None and "eudr_numbers" in self.model_fields_set:
            _dict["eudrNumbers"] = None

        # set to None if compartment (nullable) is None
        # and model_fields_set contains the field
        if self.compartment is None and "compartment" in self.model_fields_set:
            _dict["compartment"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WithoutForestNotice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "eudrNumbers": [
                    EudrNumber.from_dict(_item) for _item in obj["eudrNumbers"]
                ]
                if obj.get("eudrNumbers") is not None
                else None,
                "type": obj.get("type"),
                "cadaster": obj.get("cadaster"),
                "compartment": obj.get("compartment"),
                "forestAllocationNumber": obj.get("forestAllocationNumber"),
            }
        )
        return _obj
