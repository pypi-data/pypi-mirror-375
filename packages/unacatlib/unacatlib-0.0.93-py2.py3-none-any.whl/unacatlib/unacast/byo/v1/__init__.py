# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/byo/v1/byo_metric_producer_service.proto, unacast/byo/v1/byo_service.proto, unacast/byo/v1/local_byo_worker_invocation_service.proto, unacast/byo/v1/poi_collection_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import unatype as __unatype__
from ...metric import v1 as __metric_v1__
from ...v2 import (
    access as __v2_access__,
    byo_external as __v2_byo_external__,
    metric as __v2_metric__,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class Region(betterproto.Enum):
    NOT_DEFINED = 0
    US = 1
    NON_US = 2


class ReportType(betterproto.Enum):
    ONE_TIME = 0
    RECURRING = 1


class ReportStatus(betterproto.Enum):
    Undefined = 0
    Pending = 1
    Running = 2
    Delayed = 6
    Succeeded = 3
    Failed = 4
    Archived = 5


@dataclass(eq=False, repr=False)
class LatLonToPolygonRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    point_radii: List["PointRadius"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class LatLonToPolygonResponse(betterproto.Message):
    pois: List["PointOfInterestFromLookup"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ScheduleReportRefreshRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    extend_to: "__unatype__.Date" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RefreshReportRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    report_id: str = betterproto.string_field(2)
    extend_to: "__unatype__.Date" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ValidateGeometryRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    poi_collection_reference: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class ListMetricsRequest(betterproto.Message):
    regions: List["Region"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class ListMetricsResponse(betterproto.Message):
    metric_refs_regions: List["MetricReferenceForRegion"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class StoredCollectionVersion(betterproto.Message):
    """Public API version of domain.PublishedCollectionVersion"""

    version_id: str = betterproto.string_field(1)
    version_name: str = betterproto.string_field(2)
    collection_id: str = betterproto.string_field(3)
    storage_reference: str = betterproto.string_field(4)
    item_count: int = betterproto.int32_field(5)
    created_time: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class GetStoredCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_version_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetStoredCollectionResponse(betterproto.Message):
    version: "StoredCollectionVersion" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateStoredCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    pois: List["PointOfInterest"] = betterproto.message_field(1)
    foreign_collection_id: str = betterproto.string_field(4)
    display_name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CreateStoredCollectionResponse(betterproto.Message):
    collection_reference_combined: str = betterproto.string_field(1)
    collection_version_id: str = betterproto.string_field(2)
    storage_reference: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class InitChunkedCollectionUploadRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class InitChunkedCollectionUploadResponse(betterproto.Message):
    chunk_ref: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class AppendCollectionChunkRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    chunk_ref: str = betterproto.string_field(2)
    pois: List["PointOfInterest"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class AppendCollectionChunkResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CreateStoredCollectionFromChunksRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    chunk_ref: str = betterproto.string_field(2)
    foreign_collection_id: str = betterproto.string_field(4)
    display_name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CreateReportFromStoredCollectionRequest(betterproto.Message):
    report_type: "ReportType" = betterproto.enum_field(8)
    report_name: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)
    observation_period: "Period" = betterproto.message_field(3)
    metric_refs: List["MetricReference"] = betterproto.message_field(5)
    client_name: str = betterproto.string_field(6)
    poi_collection_reference: str = betterproto.string_field(7)
    region: "Region" = betterproto.enum_field(9)


@dataclass(eq=False, repr=False)
class StopRecurringReportRequest(betterproto.Message):
    report_id: str = betterproto.string_field(1)
    billing_context: str = betterproto.string_field(2)
    end_date: "__unatype__.Date" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class StopRecurringReportResponse(betterproto.Message):
    report_details: "ReportDetails" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReadMetricReportRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    report_id: str = betterproto.string_field(3)
    metric_id: str = betterproto.string_field(5)
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class MetricReferenceForRegion(betterproto.Message):
    region: "Region" = betterproto.enum_field(1)
    metric_refs: List["MetricReference"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MetricReference(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    metric_category: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Period(betterproto.Message):
    start: "__unatype__.Date" = betterproto.message_field(1)
    end: "__unatype__.Date" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PointOfInterest(betterproto.Message):
    name: str = betterproto.string_field(1)
    polygon: "MultiPolygon" = betterproto.message_field(4)
    centroid_lat: float = betterproto.double_field(6)
    centroid_lon: float = betterproto.double_field(7)


@dataclass(eq=False, repr=False)
class PointOfInterestFromLookup(betterproto.Message):
    name: str = betterproto.string_field(1)
    polygon: "MultiPolygon" = betterproto.message_field(2)
    area_contruction_method: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MultiPolygon(betterproto.Message):
    polygons: List["Polygon"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Polygon(betterproto.Message):
    rings: List["PolygonRing"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PolygonRing(betterproto.Message):
    coordinates: List["Coordinate"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Coordinate(betterproto.Message):
    lon: str = betterproto.string_field(1)
    lat: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PrepareReportResponse(betterproto.Message):
    metrics_on_pois: List["PreparedMetricOnPois"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PreparedMetricOnPois(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    result_token: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ListReportsRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    created_by_filter: List[str] = betterproto.string_field(3)
    created_after_filter: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ListReportsResponse(betterproto.Message):
    reports: List["ReportDetails"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReportDetailsRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(2)
    report_id: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ReportDetails(betterproto.Message):
    report_type: "ReportType" = betterproto.enum_field(13)
    report_id: str = betterproto.string_field(1)
    report_name: str = betterproto.string_field(2)
    client_name: str = betterproto.string_field(12)
    report_status: "ReportStatus" = betterproto.enum_field(3)
    error_message: str = betterproto.string_field(17)
    created_by: str = betterproto.string_field(4)
    created_time: int = betterproto.int64_field(5)
    expiry_time: int = betterproto.int64_field(6)
    item_count: int = betterproto.int64_field(14)
    storage_reference: str = betterproto.string_field(15)
    observation_period: "Period" = betterproto.message_field(7)
    region: "Region" = betterproto.enum_field(8)
    metrics: List[str] = betterproto.string_field(9)
    results: List["ReportDetailsMetricResult"] = betterproto.message_field(16)
    billing_context: str = betterproto.string_field(10)
    poi_collection_reference: str = betterproto.string_field(11)
    metric_statuses: List["MetricStatus"] = betterproto.message_field(18)


@dataclass(eq=False, repr=False)
class ReportDetailsMetricResult(betterproto.Message):
    metric: str = betterproto.string_field(1)
    storage_reference: str = betterproto.string_field(2)
    unacat_catalog_id: str = betterproto.string_field(3)
    unacat_metric_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MetricStatus(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    status: "__v2_byo_external__.MetricStatus" = betterproto.enum_field(2)
    status_reason: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReportValidation(betterproto.Message):
    csv_result: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MetricOnPois(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    csv_result: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MetricValuesOnPois(betterproto.Message):
    metric_version: "__v2_metric__.MetricVersion" = betterproto.message_field(1)
    """ReportID + MetricID ?"""

    values: List["__v2_metric__.MetricValue"] = betterproto.message_field(2)
    next_page_token: str = betterproto.string_field(14)
    metric_status: "__unatype__.MetricDataProductionStatus" = betterproto.enum_field(15)
    metric_status_reason: str = betterproto.string_field(16)


@dataclass(eq=False, repr=False)
class PointRadius(betterproto.Message):
    name: str = betterproto.string_field(1)
    coordinate: "Coordinate" = betterproto.message_field(2)
    fallback_radius: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class DraftReport(betterproto.Message):
    report_id: str = betterproto.string_field(1)
    info: str = betterproto.string_field(2)
    details: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class DraftReportInfo(betterproto.Message):
    report_id: str = betterproto.string_field(1)
    info: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListDraftReportsResponse(betterproto.Message):
    reports: List["DraftReportInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DraftReportIdentifier(betterproto.Message):
    report_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class LocationSetFileRequest(betterproto.Message):
    bacc: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    location_set_file_ref: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Nothing(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CreateNewCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    region: "Region" = betterproto.enum_field(2)
    name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CreateNewCollectionResponse(betterproto.Message):
    collection_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PoiGeometry(betterproto.Message):
    circle: "PoiGeometryPointWithRadius" = betterproto.message_field(
        1, group="geometry"
    )
    polygon: "PoiGeometryPolygon" = betterproto.message_field(2, group="geometry")
    multi_polygon: "PoiGeometryMultiPolygon" = betterproto.message_field(
        3, group="geometry"
    )
    error: "PoiGeometryError" = betterproto.message_field(4, group="geometry")


@dataclass(eq=False, repr=False)
class PoiGeometryPointWithRadius(betterproto.Message):
    centroid: "Coordinate" = betterproto.message_field(1)
    radius: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class PoiGeometryPolygon(betterproto.Message):
    rings: List["PolygonRing"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PoiGeometryMultiPolygon(betterproto.Message):
    polygons: List["Polygon"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PoiGeometryError(betterproto.Message):
    message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PoiDetailsBasic(betterproto.Message):
    collection_id: str = betterproto.string_field(1)
    poi_id: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    centroid: "Coordinate" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class NewBasedOnLatLon(betterproto.Message):
    name: str = betterproto.string_field(1)
    centroid: "Coordinate" = betterproto.message_field(2)
    fallback_radius: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class NewBasedOnGeometry(betterproto.Message):
    name: str = betterproto.string_field(1)
    geometry: "PoiGeometry" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AddPoisBasedOnLatLonRequest(betterproto.Message):
    collection_id: str = betterproto.string_field(1)
    pois: List["NewBasedOnLatLon"] = betterproto.message_field(2)
    fallback_radius: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class AddPoisBasedOnGeometryRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    pois: List["NewBasedOnGeometry"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AddPoisResponse(betterproto.Message):
    pois: List["PoiDetailsBasic"] = betterproto.message_field(1)
    errors: List["AddPoisResponsePoisError"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AddPoisResponsePoisError(betterproto.Message):
    error: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AddAddressResponse(betterproto.Message):
    pois: List["PoiDetailsBasic"] = betterproto.message_field(1)
    errors: List["AddAddressResponseAddressError"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AddAddressResponseAddressError(betterproto.Message):
    error: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetCollectionResponse(betterproto.Message):
    collections: List["PoiCollectionData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PoiCollectionData(betterproto.Message):
    collection_id: str = betterproto.string_field(1)
    created_by: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    created_time: int = betterproto.int64_field(4)
    last_publish_time: int = betterproto.int64_field(5)
    item_count: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class UpdatePoiRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    poi_id: str = betterproto.string_field(3)
    name: str = betterproto.string_field(4)
    geometry: "PoiGeometry" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class RemovePoiRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    poi_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetPoiCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetPoiCollectionResponse(betterproto.Message):
    collection: "PoiCollectionData" = betterproto.message_field(1)
    items: List["PoiItem"] = betterproto.message_field(2)
    """items is returned if the collection has less than 1000 items"""


@dataclass(eq=False, repr=False)
class PoiItem(betterproto.Message):
    collection_id: str = betterproto.string_field(1)
    poi_id: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    centroid_lat: float = betterproto.double_field(4)
    centroid_lon: float = betterproto.double_field(5)
    geometry_data: "PoiGeometry" = betterproto.message_field(6)
    country_code: str = betterproto.string_field(7)
    updated_by: str = betterproto.string_field(8)
    updated_time: int = betterproto.int64_field(9)
    geometry_type: int = betterproto.int32_field(10)
    creation_method: "CreationMethod" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class CreationMethod(betterproto.Message):
    type: int = betterproto.int32_field(1)
    address_lookup_value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetPoiItemRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    poi_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PublishCollectionVersionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PublishCollectionVersionResponse(betterproto.Message):
    collection_version_id: str = betterproto.string_field(1)
    storage_reference: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DeleteCollectionRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Address(betterproto.Message):
    name: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    radius: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class AddPoisBasedOnAddressRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)
    addresses: List["Address"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CollectionAsGeoJsonRequest(betterproto.Message):
    billing_context: str = betterproto.string_field(1)
    collection_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CollectionAsGeoJsonResponse(betterproto.Message):
    geo_json: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class ValidateAddressFileRequest(betterproto.Message):
    storage: "__v2_access__.RegisterStorageAccessExternalResourceRequest" = (
        betterproto.message_field(1)
    )
    filename: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ValidateAddressFileResponse(betterproto.Message):
    file_is_valid: bool = betterproto.bool_field(1)
    error: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AddressFileRequest(betterproto.Message):
    storage: "__v2_access__.RegisterStorageAccessExternalResourceRequest" = (
        betterproto.message_field(1)
    )
    filename: str = betterproto.string_field(2)
    collection_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetProduceMetricJobRequest(betterproto.Message):
    job_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ProduceMetricJob(betterproto.Message):
    """
    Message distributed to the service that will produce the metric. Can also be re-fetched by calling `GetProduceMetricJob`
    """

    job_id: str = betterproto.string_field(1)
    geometry_ref: str = betterproto.string_field(2)
    country: str = betterproto.string_field(3)
    start_date: str = betterproto.string_field(4)
    end_date: str = betterproto.string_field(5)
    metric_model: str = betterproto.string_field(7)
    metric_process_id: str = betterproto.string_field(8)
    metric_cadence: str = betterproto.string_field(10)
    period_length: int = betterproto.int32_field(14)
    delivery_destination: "ProduceMetricJobCatalogDestination" = (
        betterproto.message_field(9)
    )
    delivery_inbox: str = betterproto.string_field(11)
    priority: str = betterproto.string_field(12)
    status: "ProduceMetricJobStatus" = betterproto.message_field(13)
    time_interval: "__metric_v1__.Cadence" = betterproto.enum_field(15)
    time_resolution: "__unatype__.TimeResolution" = betterproto.enum_field(16)
    via_polygons: List["MultiPolygon"] = betterproto.message_field(17)


@dataclass(eq=False, repr=False)
class ProduceMetricJobCatalogDestination(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    metric_id: str = betterproto.string_field(2)
    is_changeset: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ProduceMetricJobPolygon(betterproto.Message):
    points: List["ProduceMetricJobLatLng"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ProduceMetricJobLatLng(betterproto.Message):
    lat: float = betterproto.double_field(1)
    lng: float = betterproto.double_field(2)


@dataclass(eq=False, repr=False)
class ProduceMetricJobStatus(betterproto.Message):
    current_status: "__unatype__.MetricDataProductionStatus" = betterproto.enum_field(1)
    status_service: str = betterproto.string_field(2)
    status_reason: str = betterproto.string_field(3)
    timestamp: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ListProduceMetricJobsRequest(betterproto.Message):
    job_status_filter: str = betterproto.string_field(1)
    billing_account_filter: str = betterproto.string_field(2)
    """
    If set, only jobs with the given status will be returned. If not set, all jobs will be returned. See `MetricProductionStatusUpdate.status` for possible values
    """

    metric_model_filter: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ListProduceMetricJobsResponse(betterproto.Message):
    jobs: List["ProduceMetricJob"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AlertLongRunningProduceMetricJobsRequest(betterproto.Message):
    long_running_job_threshold_hours: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class AlertLongRunningProduceMetricJobsResponse(betterproto.Message):
    jobs: List["ProduceMetricJob"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AlertZombieProduceMetricJobsRequest(betterproto.Message):
    zombie_job_threshold_hours: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class AlertZombieProduceMetricJobsResponse(betterproto.Message):
    jobs: List["ProduceMetricJob"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ProcessProduceMetricJobResultsRequest(betterproto.Message):
    job_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MetricProductionStatusUpdate(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    timestamp: str = betterproto.string_field(2)
    service_ref: str = betterproto.string_field(3)
    rejected: "MetricProductionStatusUpdateRejected" = betterproto.message_field(
        4, group="status"
    )
    started: "MetricProductionStatusUpdateStarted" = betterproto.message_field(
        5, group="status"
    )
    delayed: "MetricProductionStatusUpdateDelayed" = betterproto.message_field(
        9, group="status"
    )
    produced: "MetricProductionStatusUpdateProduced" = betterproto.message_field(
        8, group="status"
    )
    finished: "MetricProductionStatusUpdateFinished" = betterproto.message_field(
        6, group="status"
    )
    failed: "MetricProductionStatusUpdateFailed" = betterproto.message_field(
        7, group="status"
    )


@dataclass(eq=False, repr=False)
class MetricProductionStatusUpdateRejected(betterproto.Message):
    """
    The metric job is being rejected by the producer. Similar to retruning a 400 Invalid Argument on a REST-API
    """

    reason: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MetricProductionStatusUpdateStarted(betterproto.Message):
    """
    The metric job has been picked up and accepted by the received system, and processing will begin
    """

    pass


@dataclass(eq=False, repr=False)
class MetricProductionStatusUpdateDelayed(betterproto.Message):
    """
    The service are in some fail-state on producing the metric, but will retry after manual intervention
    """

    error_reason: str = betterproto.string_field(1)
    error_message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MetricProductionStatusUpdateProduced(betterproto.Message):
    """
    The metric has been produced and are delivered to the provided InboxTable
    """

    metric_process_revision: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MetricProductionStatusUpdateFinished(betterproto.Message):
    """
    The metric has been produced and are successfully indexed to the Catalog Destination
    """

    metric_process_revision: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MetricProductionStatusUpdateFailed(betterproto.Message):
    """The metric job have failed and the service have given up"""

    error_reason: str = betterproto.string_field(1)
    error_message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetMetricProductionStatusRequest(betterproto.Message):
    metric_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetMetricProductionStatusResponse(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    status: "ProduceMetricJobStatus" = betterproto.message_field(2)
    jobs: List["ProduceMetricJob"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RestartProduceMetricJobRequest(betterproto.Message):
    job_id: str = betterproto.string_field(1)
    reason: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RecreateReadModelsOfProductionJobsRequest(betterproto.Message):
    only_consider_jobs_created_after: str = betterproto.string_field(1)
    only_consider_job_ids: List[str] = betterproto.string_field(2)


class ByoServiceStub(betterproto.ServiceStub):
    async def get_stored_collection(
        self,
        get_stored_collection_request: "GetStoredCollectionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStoredCollectionResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/GetStoredCollection",
            get_stored_collection_request,
            GetStoredCollectionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_stored_collection(
        self,
        create_stored_collection_request: "CreateStoredCollectionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateStoredCollectionResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateStoredCollection",
            create_stored_collection_request,
            CreateStoredCollectionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def init_chunked_collection_upload(
        self,
        init_chunked_collection_upload_request: "InitChunkedCollectionUploadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "InitChunkedCollectionUploadResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/InitChunkedCollectionUpload",
            init_chunked_collection_upload_request,
            InitChunkedCollectionUploadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def append_collection_chunk(
        self,
        append_collection_chunk_request: "AppendCollectionChunkRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AppendCollectionChunkResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/AppendCollectionChunk",
            append_collection_chunk_request,
            AppendCollectionChunkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_stored_collection_from_chunks(
        self,
        create_stored_collection_from_chunks_request: "CreateStoredCollectionFromChunksRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateStoredCollectionResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/CreateStoredCollectionFromChunks",
            create_stored_collection_from_chunks_request,
            CreateStoredCollectionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def prepare_report_from_stored_collection(
        self,
        create_report_from_stored_collection_request: "CreateReportFromStoredCollectionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ReportDetails":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/PrepareReportFromStoredCollection",
            create_report_from_stored_collection_request,
            ReportDetails,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_recurring_report(
        self,
        stop_recurring_report_request: "StopRecurringReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "StopRecurringReportResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/StopRecurringReport",
            stop_recurring_report_request,
            StopRecurringReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def read_metric_report(
        self,
        read_metric_report_request: "ReadMetricReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MetricOnPois":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ReadMetricReport",
            read_metric_report_request,
            MetricOnPois,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def read_metric_report2(
        self,
        read_metric_report_request: "ReadMetricReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MetricValuesOnPois":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ReadMetricReport2",
            read_metric_report_request,
            MetricValuesOnPois,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_reports(
        self,
        list_reports_request: "ListReportsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListReportsResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListReports",
            list_reports_request,
            ListReportsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_report_details(
        self,
        report_details_request: "ReportDetailsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ReportDetails":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/GetReportDetails",
            report_details_request,
            ReportDetails,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def read_report_validation(
        self,
        report_details_request: "ReportDetailsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ReportValidation":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ReadReportValidation",
            report_details_request,
            ReportValidation,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def archive_metric_report(
        self,
        report_details_request: "ReportDetailsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ArchiveMetricReport",
            report_details_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_metrics(
        self,
        list_metrics_request: "ListMetricsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListMetricsResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListMetrics",
            list_metrics_request,
            ListMetricsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def lat_lon_to_polygon(
        self,
        lat_lon_to_polygon_request: "LatLonToPolygonRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LatLonToPolygonResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/LatLonToPolygon",
            lat_lon_to_polygon_request,
            LatLonToPolygonResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def lat_lon_to_polygon_international(
        self,
        lat_lon_to_polygon_request: "LatLonToPolygonRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LatLonToPolygonResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/LatLonToPolygonInternational",
            lat_lon_to_polygon_request,
            LatLonToPolygonResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def lat_lon_to_polygon_us(
        self,
        lat_lon_to_polygon_request: "LatLonToPolygonRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LatLonToPolygonResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/LatLonToPolygonUS",
            lat_lon_to_polygon_request,
            LatLonToPolygonResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validate_geometry(
        self,
        validate_geometry_request: "ValidateGeometryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ValidateGeometry",
            validate_geometry_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_draft_reports(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListDraftReportsResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/ListDraftReports",
            betterproto_lib_google_protobuf_empty,
            ListDraftReportsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_draft_report(
        self,
        draft_report_identifier: "DraftReportIdentifier",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DraftReport":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/GetDraftReport",
            draft_report_identifier,
            DraftReport,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def store_draft_report(
        self,
        draft_report: "DraftReport",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/StoreDraftReport",
            draft_report,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_draft_report(
        self,
        draft_report_identifier: "DraftReportIdentifier",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.ByoService/DeleteDraftReport",
            draft_report_identifier,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PoiCollectionServiceStub(betterproto.ServiceStub):
    async def create_new_collection(
        self,
        create_new_collection_request: "CreateNewCollectionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateNewCollectionResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/CreateNewCollection",
            create_new_collection_request,
            CreateNewCollectionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_pois_based_on_geometry(
        self,
        add_pois_based_on_geometry_request: "AddPoisBasedOnGeometryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddPoisResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/AddPoisBasedOnGeometry",
            add_pois_based_on_geometry_request,
            AddPoisResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_pois_based_on_address(
        self,
        add_pois_based_on_address_request: "AddPoisBasedOnAddressRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddAddressResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/AddPoisBasedOnAddress",
            add_pois_based_on_address_request,
            AddAddressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_poi(
        self,
        update_poi_request: "UpdatePoiRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Nothing":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/UpdatePoi",
            update_poi_request,
            Nothing,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_poi(
        self,
        remove_poi_request: "RemovePoiRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Nothing":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/RemovePoi",
            remove_poi_request,
            Nothing,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_collections_based_on_billing_context(
        self,
        get_collection_request: "GetCollectionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCollectionResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/GetCollectionsBasedOnBillingContext",
            get_collection_request,
            GetCollectionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_poi_collection(
        self,
        get_poi_collection_request: "GetPoiCollectionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPoiCollectionResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/GetPOICollection",
            get_poi_collection_request,
            GetPoiCollectionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_poi_item(
        self,
        get_poi_item_request: "GetPoiItemRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PoiItem":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/GetPOIItem",
            get_poi_item_request,
            PoiItem,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def publish_collection_version(
        self,
        publish_collection_version_request: "PublishCollectionVersionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PublishCollectionVersionResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/PublishCollectionVersion",
            publish_collection_version_request,
            PublishCollectionVersionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_collection(
        self,
        delete_collection_request: "DeleteCollectionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Nothing":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/DeleteCollection",
            delete_collection_request,
            Nothing,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def collection_as_geo_json(
        self,
        collection_as_geo_json_request: "CollectionAsGeoJsonRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CollectionAsGeoJsonResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/CollectionAsGeoJSON",
            collection_as_geo_json_request,
            CollectionAsGeoJsonResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def validate_address_file(
        self,
        validate_address_file_request: "ValidateAddressFileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ValidateAddressFileResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/ValidateAddressFile",
            validate_address_file_request,
            ValidateAddressFileResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ingest_addresses(
        self,
        add_pois_based_on_address_request: "AddPoisBasedOnAddressRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Nothing":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/IngestAddresses",
            add_pois_based_on_address_request,
            Nothing,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ingest_address_file(
        self,
        address_file_request: "AddressFileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Nothing":
        return await self._unary_unary(
            "/unacast.byo.v1.PoiCollectionService/IngestAddressFile",
            address_file_request,
            Nothing,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MetricProductionOrchestrationServiceStub(betterproto.ServiceStub):
    async def get_produce_metric_job(
        self,
        get_produce_metric_job_request: "GetProduceMetricJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ProduceMetricJob":
        return await self._unary_unary(
            "/unacast.byo.v1.MetricProductionOrchestrationService/GetProduceMetricJob",
            get_produce_metric_job_request,
            ProduceMetricJob,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_metric_production_status(
        self,
        metric_production_status_update: "MetricProductionStatusUpdate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.MetricProductionOrchestrationService/UpdateMetricProductionStatus",
            metric_production_status_update,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_produce_metric_jobs(
        self,
        list_produce_metric_jobs_request: "ListProduceMetricJobsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListProduceMetricJobsResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.MetricProductionOrchestrationService/ListProduceMetricJobs",
            list_produce_metric_jobs_request,
            ListProduceMetricJobsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_metric_production_status(
        self,
        get_metric_production_status_request: "GetMetricProductionStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMetricProductionStatusResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.MetricProductionOrchestrationService/GetMetricProductionStatus",
            get_metric_production_status_request,
            GetMetricProductionStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def restart_metric_production_job(
        self,
        restart_produce_metric_job_request: "RestartProduceMetricJobRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.MetricProductionOrchestrationService/RestartMetricProductionJob",
            restart_produce_metric_job_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def recreate_read_models_of_production_jobs(
        self,
        recreate_read_models_of_production_jobs_request: "RecreateReadModelsOfProductionJobsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.MetricProductionOrchestrationService/RecreateReadModelsOfProductionJobs",
            recreate_read_models_of_production_jobs_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def alert_long_running_produce_metric_jobs(
        self,
        alert_long_running_produce_metric_jobs_request: "AlertLongRunningProduceMetricJobsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AlertLongRunningProduceMetricJobsResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.MetricProductionOrchestrationService/AlertLongRunningProduceMetricJobs",
            alert_long_running_produce_metric_jobs_request,
            AlertLongRunningProduceMetricJobsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def process_produce_metric_job_results(
        self,
        process_produce_metric_job_results_request: "ProcessProduceMetricJobResultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.MetricProductionOrchestrationService/ProcessProduceMetricJobResults",
            process_produce_metric_job_results_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MetricProductionSupervisorServiceStub(betterproto.ServiceStub):
    async def alert_zombie_produce_metric_jobs(
        self,
        alert_zombie_produce_metric_jobs_request: "AlertZombieProduceMetricJobsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AlertZombieProduceMetricJobsResponse":
        return await self._unary_unary(
            "/unacast.byo.v1.MetricProductionSupervisorService/AlertZombieProduceMetricJobs",
            alert_zombie_produce_metric_jobs_request,
            AlertZombieProduceMetricJobsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class LocalByoWorkerInvocationServiceStub(betterproto.ServiceStub):
    async def do_process_report(
        self,
        report_details_request: "ReportDetailsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ReportDetails":
        return await self._unary_unary(
            "/unacast.byo.v1.LocalByoWorkerInvocationService/DoProcessReport",
            report_details_request,
            ReportDetails,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def do_verify_report_completion(
        self,
        report_details_request: "ReportDetailsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ReportDetails":
        return await self._unary_unary(
            "/unacast.byo.v1.LocalByoWorkerInvocationService/DoVerifyReportCompletion",
            report_details_request,
            ReportDetails,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def do_process_addresses(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.LocalByoWorkerInvocationService/DoProcessAddresses",
            betterproto_lib_google_protobuf_empty,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def do_process_location_set_file(
        self,
        location_set_file_request: "LocationSetFileRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.LocalByoWorkerInvocationService/DoProcessLocationSetFile",
            location_set_file_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def schedule_report_refresh(
        self,
        schedule_report_refresh_request: "ScheduleReportRefreshRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.LocalByoWorkerInvocationService/ScheduleReportRefresh",
            schedule_report_refresh_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def refresh_report(
        self,
        refresh_report_request: "RefreshReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.byo.v1.LocalByoWorkerInvocationService/RefreshReport",
            refresh_report_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ByoServiceBase(ServiceBase):

    async def get_stored_collection(
        self, get_stored_collection_request: "GetStoredCollectionRequest"
    ) -> "GetStoredCollectionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_stored_collection(
        self, create_stored_collection_request: "CreateStoredCollectionRequest"
    ) -> "CreateStoredCollectionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def init_chunked_collection_upload(
        self,
        init_chunked_collection_upload_request: "InitChunkedCollectionUploadRequest",
    ) -> "InitChunkedCollectionUploadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def append_collection_chunk(
        self, append_collection_chunk_request: "AppendCollectionChunkRequest"
    ) -> "AppendCollectionChunkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_stored_collection_from_chunks(
        self,
        create_stored_collection_from_chunks_request: "CreateStoredCollectionFromChunksRequest",
    ) -> "CreateStoredCollectionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def prepare_report_from_stored_collection(
        self,
        create_report_from_stored_collection_request: "CreateReportFromStoredCollectionRequest",
    ) -> "ReportDetails":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_recurring_report(
        self, stop_recurring_report_request: "StopRecurringReportRequest"
    ) -> "StopRecurringReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def read_metric_report(
        self, read_metric_report_request: "ReadMetricReportRequest"
    ) -> "MetricOnPois":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def read_metric_report2(
        self, read_metric_report_request: "ReadMetricReportRequest"
    ) -> "MetricValuesOnPois":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_reports(
        self, list_reports_request: "ListReportsRequest"
    ) -> "ListReportsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_report_details(
        self, report_details_request: "ReportDetailsRequest"
    ) -> "ReportDetails":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def read_report_validation(
        self, report_details_request: "ReportDetailsRequest"
    ) -> "ReportValidation":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def archive_metric_report(
        self, report_details_request: "ReportDetailsRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_metrics(
        self, list_metrics_request: "ListMetricsRequest"
    ) -> "ListMetricsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def lat_lon_to_polygon(
        self, lat_lon_to_polygon_request: "LatLonToPolygonRequest"
    ) -> "LatLonToPolygonResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def lat_lon_to_polygon_international(
        self, lat_lon_to_polygon_request: "LatLonToPolygonRequest"
    ) -> "LatLonToPolygonResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def lat_lon_to_polygon_us(
        self, lat_lon_to_polygon_request: "LatLonToPolygonRequest"
    ) -> "LatLonToPolygonResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def validate_geometry(
        self, validate_geometry_request: "ValidateGeometryRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_draft_reports(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "ListDraftReportsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_draft_report(
        self, draft_report_identifier: "DraftReportIdentifier"
    ) -> "DraftReport":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def store_draft_report(
        self, draft_report: "DraftReport"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_draft_report(
        self, draft_report_identifier: "DraftReportIdentifier"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_stored_collection(
        self,
        stream: "grpclib.server.Stream[GetStoredCollectionRequest, GetStoredCollectionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stored_collection(request)
        await stream.send_message(response)

    async def __rpc_create_stored_collection(
        self,
        stream: "grpclib.server.Stream[CreateStoredCollectionRequest, CreateStoredCollectionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_stored_collection(request)
        await stream.send_message(response)

    async def __rpc_init_chunked_collection_upload(
        self,
        stream: "grpclib.server.Stream[InitChunkedCollectionUploadRequest, InitChunkedCollectionUploadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.init_chunked_collection_upload(request)
        await stream.send_message(response)

    async def __rpc_append_collection_chunk(
        self,
        stream: "grpclib.server.Stream[AppendCollectionChunkRequest, AppendCollectionChunkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.append_collection_chunk(request)
        await stream.send_message(response)

    async def __rpc_create_stored_collection_from_chunks(
        self,
        stream: "grpclib.server.Stream[CreateStoredCollectionFromChunksRequest, CreateStoredCollectionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_stored_collection_from_chunks(request)
        await stream.send_message(response)

    async def __rpc_prepare_report_from_stored_collection(
        self,
        stream: "grpclib.server.Stream[CreateReportFromStoredCollectionRequest, ReportDetails]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.prepare_report_from_stored_collection(request)
        await stream.send_message(response)

    async def __rpc_stop_recurring_report(
        self,
        stream: "grpclib.server.Stream[StopRecurringReportRequest, StopRecurringReportResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_recurring_report(request)
        await stream.send_message(response)

    async def __rpc_read_metric_report(
        self, stream: "grpclib.server.Stream[ReadMetricReportRequest, MetricOnPois]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.read_metric_report(request)
        await stream.send_message(response)

    async def __rpc_read_metric_report2(
        self,
        stream: "grpclib.server.Stream[ReadMetricReportRequest, MetricValuesOnPois]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.read_metric_report2(request)
        await stream.send_message(response)

    async def __rpc_list_reports(
        self, stream: "grpclib.server.Stream[ListReportsRequest, ListReportsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_reports(request)
        await stream.send_message(response)

    async def __rpc_get_report_details(
        self, stream: "grpclib.server.Stream[ReportDetailsRequest, ReportDetails]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_report_details(request)
        await stream.send_message(response)

    async def __rpc_read_report_validation(
        self, stream: "grpclib.server.Stream[ReportDetailsRequest, ReportValidation]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.read_report_validation(request)
        await stream.send_message(response)

    async def __rpc_archive_metric_report(
        self,
        stream: "grpclib.server.Stream[ReportDetailsRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.archive_metric_report(request)
        await stream.send_message(response)

    async def __rpc_list_metrics(
        self, stream: "grpclib.server.Stream[ListMetricsRequest, ListMetricsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_metrics(request)
        await stream.send_message(response)

    async def __rpc_lat_lon_to_polygon(
        self,
        stream: "grpclib.server.Stream[LatLonToPolygonRequest, LatLonToPolygonResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.lat_lon_to_polygon(request)
        await stream.send_message(response)

    async def __rpc_lat_lon_to_polygon_international(
        self,
        stream: "grpclib.server.Stream[LatLonToPolygonRequest, LatLonToPolygonResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.lat_lon_to_polygon_international(request)
        await stream.send_message(response)

    async def __rpc_lat_lon_to_polygon_us(
        self,
        stream: "grpclib.server.Stream[LatLonToPolygonRequest, LatLonToPolygonResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.lat_lon_to_polygon_us(request)
        await stream.send_message(response)

    async def __rpc_validate_geometry(
        self,
        stream: "grpclib.server.Stream[ValidateGeometryRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.validate_geometry(request)
        await stream.send_message(response)

    async def __rpc_list_draft_reports(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, ListDraftReportsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_draft_reports(request)
        await stream.send_message(response)

    async def __rpc_get_draft_report(
        self, stream: "grpclib.server.Stream[DraftReportIdentifier, DraftReport]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_draft_report(request)
        await stream.send_message(response)

    async def __rpc_store_draft_report(
        self,
        stream: "grpclib.server.Stream[DraftReport, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.store_draft_report(request)
        await stream.send_message(response)

    async def __rpc_delete_draft_report(
        self,
        stream: "grpclib.server.Stream[DraftReportIdentifier, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_draft_report(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.byo.v1.ByoService/GetStoredCollection": grpclib.const.Handler(
                self.__rpc_get_stored_collection,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStoredCollectionRequest,
                GetStoredCollectionResponse,
            ),
            "/unacast.byo.v1.ByoService/CreateStoredCollection": grpclib.const.Handler(
                self.__rpc_create_stored_collection,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateStoredCollectionRequest,
                CreateStoredCollectionResponse,
            ),
            "/unacast.byo.v1.ByoService/InitChunkedCollectionUpload": grpclib.const.Handler(
                self.__rpc_init_chunked_collection_upload,
                grpclib.const.Cardinality.UNARY_UNARY,
                InitChunkedCollectionUploadRequest,
                InitChunkedCollectionUploadResponse,
            ),
            "/unacast.byo.v1.ByoService/AppendCollectionChunk": grpclib.const.Handler(
                self.__rpc_append_collection_chunk,
                grpclib.const.Cardinality.UNARY_UNARY,
                AppendCollectionChunkRequest,
                AppendCollectionChunkResponse,
            ),
            "/unacast.byo.v1.ByoService/CreateStoredCollectionFromChunks": grpclib.const.Handler(
                self.__rpc_create_stored_collection_from_chunks,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateStoredCollectionFromChunksRequest,
                CreateStoredCollectionResponse,
            ),
            "/unacast.byo.v1.ByoService/PrepareReportFromStoredCollection": grpclib.const.Handler(
                self.__rpc_prepare_report_from_stored_collection,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateReportFromStoredCollectionRequest,
                ReportDetails,
            ),
            "/unacast.byo.v1.ByoService/StopRecurringReport": grpclib.const.Handler(
                self.__rpc_stop_recurring_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                StopRecurringReportRequest,
                StopRecurringReportResponse,
            ),
            "/unacast.byo.v1.ByoService/ReadMetricReport": grpclib.const.Handler(
                self.__rpc_read_metric_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReadMetricReportRequest,
                MetricOnPois,
            ),
            "/unacast.byo.v1.ByoService/ReadMetricReport2": grpclib.const.Handler(
                self.__rpc_read_metric_report2,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReadMetricReportRequest,
                MetricValuesOnPois,
            ),
            "/unacast.byo.v1.ByoService/ListReports": grpclib.const.Handler(
                self.__rpc_list_reports,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListReportsRequest,
                ListReportsResponse,
            ),
            "/unacast.byo.v1.ByoService/GetReportDetails": grpclib.const.Handler(
                self.__rpc_get_report_details,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReportDetailsRequest,
                ReportDetails,
            ),
            "/unacast.byo.v1.ByoService/ReadReportValidation": grpclib.const.Handler(
                self.__rpc_read_report_validation,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReportDetailsRequest,
                ReportValidation,
            ),
            "/unacast.byo.v1.ByoService/ArchiveMetricReport": grpclib.const.Handler(
                self.__rpc_archive_metric_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReportDetailsRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.byo.v1.ByoService/ListMetrics": grpclib.const.Handler(
                self.__rpc_list_metrics,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListMetricsRequest,
                ListMetricsResponse,
            ),
            "/unacast.byo.v1.ByoService/LatLonToPolygon": grpclib.const.Handler(
                self.__rpc_lat_lon_to_polygon,
                grpclib.const.Cardinality.UNARY_UNARY,
                LatLonToPolygonRequest,
                LatLonToPolygonResponse,
            ),
            "/unacast.byo.v1.ByoService/LatLonToPolygonInternational": grpclib.const.Handler(
                self.__rpc_lat_lon_to_polygon_international,
                grpclib.const.Cardinality.UNARY_UNARY,
                LatLonToPolygonRequest,
                LatLonToPolygonResponse,
            ),
            "/unacast.byo.v1.ByoService/LatLonToPolygonUS": grpclib.const.Handler(
                self.__rpc_lat_lon_to_polygon_us,
                grpclib.const.Cardinality.UNARY_UNARY,
                LatLonToPolygonRequest,
                LatLonToPolygonResponse,
            ),
            "/unacast.byo.v1.ByoService/ValidateGeometry": grpclib.const.Handler(
                self.__rpc_validate_geometry,
                grpclib.const.Cardinality.UNARY_UNARY,
                ValidateGeometryRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.byo.v1.ByoService/ListDraftReports": grpclib.const.Handler(
                self.__rpc_list_draft_reports,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                ListDraftReportsResponse,
            ),
            "/unacast.byo.v1.ByoService/GetDraftReport": grpclib.const.Handler(
                self.__rpc_get_draft_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                DraftReportIdentifier,
                DraftReport,
            ),
            "/unacast.byo.v1.ByoService/StoreDraftReport": grpclib.const.Handler(
                self.__rpc_store_draft_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                DraftReport,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.byo.v1.ByoService/DeleteDraftReport": grpclib.const.Handler(
                self.__rpc_delete_draft_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                DraftReportIdentifier,
                betterproto_lib_google_protobuf.Empty,
            ),
        }


class PoiCollectionServiceBase(ServiceBase):

    async def create_new_collection(
        self, create_new_collection_request: "CreateNewCollectionRequest"
    ) -> "CreateNewCollectionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_pois_based_on_geometry(
        self, add_pois_based_on_geometry_request: "AddPoisBasedOnGeometryRequest"
    ) -> "AddPoisResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_pois_based_on_address(
        self, add_pois_based_on_address_request: "AddPoisBasedOnAddressRequest"
    ) -> "AddAddressResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_poi(self, update_poi_request: "UpdatePoiRequest") -> "Nothing":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_poi(self, remove_poi_request: "RemovePoiRequest") -> "Nothing":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_collections_based_on_billing_context(
        self, get_collection_request: "GetCollectionRequest"
    ) -> "GetCollectionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_poi_collection(
        self, get_poi_collection_request: "GetPoiCollectionRequest"
    ) -> "GetPoiCollectionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_poi_item(
        self, get_poi_item_request: "GetPoiItemRequest"
    ) -> "PoiItem":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def publish_collection_version(
        self, publish_collection_version_request: "PublishCollectionVersionRequest"
    ) -> "PublishCollectionVersionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_collection(
        self, delete_collection_request: "DeleteCollectionRequest"
    ) -> "Nothing":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def collection_as_geo_json(
        self, collection_as_geo_json_request: "CollectionAsGeoJsonRequest"
    ) -> "CollectionAsGeoJsonResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def validate_address_file(
        self, validate_address_file_request: "ValidateAddressFileRequest"
    ) -> "ValidateAddressFileResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ingest_addresses(
        self, add_pois_based_on_address_request: "AddPoisBasedOnAddressRequest"
    ) -> "Nothing":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ingest_address_file(
        self, address_file_request: "AddressFileRequest"
    ) -> "Nothing":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_new_collection(
        self,
        stream: "grpclib.server.Stream[CreateNewCollectionRequest, CreateNewCollectionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_new_collection(request)
        await stream.send_message(response)

    async def __rpc_add_pois_based_on_geometry(
        self,
        stream: "grpclib.server.Stream[AddPoisBasedOnGeometryRequest, AddPoisResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_pois_based_on_geometry(request)
        await stream.send_message(response)

    async def __rpc_add_pois_based_on_address(
        self,
        stream: "grpclib.server.Stream[AddPoisBasedOnAddressRequest, AddAddressResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_pois_based_on_address(request)
        await stream.send_message(response)

    async def __rpc_update_poi(
        self, stream: "grpclib.server.Stream[UpdatePoiRequest, Nothing]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_poi(request)
        await stream.send_message(response)

    async def __rpc_remove_poi(
        self, stream: "grpclib.server.Stream[RemovePoiRequest, Nothing]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_poi(request)
        await stream.send_message(response)

    async def __rpc_get_collections_based_on_billing_context(
        self,
        stream: "grpclib.server.Stream[GetCollectionRequest, GetCollectionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_collections_based_on_billing_context(request)
        await stream.send_message(response)

    async def __rpc_get_poi_collection(
        self,
        stream: "grpclib.server.Stream[GetPoiCollectionRequest, GetPoiCollectionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_poi_collection(request)
        await stream.send_message(response)

    async def __rpc_get_poi_item(
        self, stream: "grpclib.server.Stream[GetPoiItemRequest, PoiItem]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_poi_item(request)
        await stream.send_message(response)

    async def __rpc_publish_collection_version(
        self,
        stream: "grpclib.server.Stream[PublishCollectionVersionRequest, PublishCollectionVersionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.publish_collection_version(request)
        await stream.send_message(response)

    async def __rpc_delete_collection(
        self, stream: "grpclib.server.Stream[DeleteCollectionRequest, Nothing]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_collection(request)
        await stream.send_message(response)

    async def __rpc_collection_as_geo_json(
        self,
        stream: "grpclib.server.Stream[CollectionAsGeoJsonRequest, CollectionAsGeoJsonResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.collection_as_geo_json(request)
        await stream.send_message(response)

    async def __rpc_validate_address_file(
        self,
        stream: "grpclib.server.Stream[ValidateAddressFileRequest, ValidateAddressFileResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.validate_address_file(request)
        await stream.send_message(response)

    async def __rpc_ingest_addresses(
        self, stream: "grpclib.server.Stream[AddPoisBasedOnAddressRequest, Nothing]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.ingest_addresses(request)
        await stream.send_message(response)

    async def __rpc_ingest_address_file(
        self, stream: "grpclib.server.Stream[AddressFileRequest, Nothing]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.ingest_address_file(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.byo.v1.PoiCollectionService/CreateNewCollection": grpclib.const.Handler(
                self.__rpc_create_new_collection,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateNewCollectionRequest,
                CreateNewCollectionResponse,
            ),
            "/unacast.byo.v1.PoiCollectionService/AddPoisBasedOnGeometry": grpclib.const.Handler(
                self.__rpc_add_pois_based_on_geometry,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddPoisBasedOnGeometryRequest,
                AddPoisResponse,
            ),
            "/unacast.byo.v1.PoiCollectionService/AddPoisBasedOnAddress": grpclib.const.Handler(
                self.__rpc_add_pois_based_on_address,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddPoisBasedOnAddressRequest,
                AddAddressResponse,
            ),
            "/unacast.byo.v1.PoiCollectionService/UpdatePoi": grpclib.const.Handler(
                self.__rpc_update_poi,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdatePoiRequest,
                Nothing,
            ),
            "/unacast.byo.v1.PoiCollectionService/RemovePoi": grpclib.const.Handler(
                self.__rpc_remove_poi,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemovePoiRequest,
                Nothing,
            ),
            "/unacast.byo.v1.PoiCollectionService/GetCollectionsBasedOnBillingContext": grpclib.const.Handler(
                self.__rpc_get_collections_based_on_billing_context,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCollectionRequest,
                GetCollectionResponse,
            ),
            "/unacast.byo.v1.PoiCollectionService/GetPOICollection": grpclib.const.Handler(
                self.__rpc_get_poi_collection,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPoiCollectionRequest,
                GetPoiCollectionResponse,
            ),
            "/unacast.byo.v1.PoiCollectionService/GetPOIItem": grpclib.const.Handler(
                self.__rpc_get_poi_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPoiItemRequest,
                PoiItem,
            ),
            "/unacast.byo.v1.PoiCollectionService/PublishCollectionVersion": grpclib.const.Handler(
                self.__rpc_publish_collection_version,
                grpclib.const.Cardinality.UNARY_UNARY,
                PublishCollectionVersionRequest,
                PublishCollectionVersionResponse,
            ),
            "/unacast.byo.v1.PoiCollectionService/DeleteCollection": grpclib.const.Handler(
                self.__rpc_delete_collection,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteCollectionRequest,
                Nothing,
            ),
            "/unacast.byo.v1.PoiCollectionService/CollectionAsGeoJSON": grpclib.const.Handler(
                self.__rpc_collection_as_geo_json,
                grpclib.const.Cardinality.UNARY_UNARY,
                CollectionAsGeoJsonRequest,
                CollectionAsGeoJsonResponse,
            ),
            "/unacast.byo.v1.PoiCollectionService/ValidateAddressFile": grpclib.const.Handler(
                self.__rpc_validate_address_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                ValidateAddressFileRequest,
                ValidateAddressFileResponse,
            ),
            "/unacast.byo.v1.PoiCollectionService/IngestAddresses": grpclib.const.Handler(
                self.__rpc_ingest_addresses,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddPoisBasedOnAddressRequest,
                Nothing,
            ),
            "/unacast.byo.v1.PoiCollectionService/IngestAddressFile": grpclib.const.Handler(
                self.__rpc_ingest_address_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddressFileRequest,
                Nothing,
            ),
        }


class MetricProductionOrchestrationServiceBase(ServiceBase):

    async def get_produce_metric_job(
        self, get_produce_metric_job_request: "GetProduceMetricJobRequest"
    ) -> "ProduceMetricJob":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_metric_production_status(
        self, metric_production_status_update: "MetricProductionStatusUpdate"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_produce_metric_jobs(
        self, list_produce_metric_jobs_request: "ListProduceMetricJobsRequest"
    ) -> "ListProduceMetricJobsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_metric_production_status(
        self, get_metric_production_status_request: "GetMetricProductionStatusRequest"
    ) -> "GetMetricProductionStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def restart_metric_production_job(
        self, restart_produce_metric_job_request: "RestartProduceMetricJobRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def recreate_read_models_of_production_jobs(
        self,
        recreate_read_models_of_production_jobs_request: "RecreateReadModelsOfProductionJobsRequest",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def alert_long_running_produce_metric_jobs(
        self,
        alert_long_running_produce_metric_jobs_request: "AlertLongRunningProduceMetricJobsRequest",
    ) -> "AlertLongRunningProduceMetricJobsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def process_produce_metric_job_results(
        self,
        process_produce_metric_job_results_request: "ProcessProduceMetricJobResultsRequest",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_produce_metric_job(
        self,
        stream: "grpclib.server.Stream[GetProduceMetricJobRequest, ProduceMetricJob]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_produce_metric_job(request)
        await stream.send_message(response)

    async def __rpc_update_metric_production_status(
        self,
        stream: "grpclib.server.Stream[MetricProductionStatusUpdate, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_metric_production_status(request)
        await stream.send_message(response)

    async def __rpc_list_produce_metric_jobs(
        self,
        stream: "grpclib.server.Stream[ListProduceMetricJobsRequest, ListProduceMetricJobsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_produce_metric_jobs(request)
        await stream.send_message(response)

    async def __rpc_get_metric_production_status(
        self,
        stream: "grpclib.server.Stream[GetMetricProductionStatusRequest, GetMetricProductionStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_metric_production_status(request)
        await stream.send_message(response)

    async def __rpc_restart_metric_production_job(
        self,
        stream: "grpclib.server.Stream[RestartProduceMetricJobRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.restart_metric_production_job(request)
        await stream.send_message(response)

    async def __rpc_recreate_read_models_of_production_jobs(
        self,
        stream: "grpclib.server.Stream[RecreateReadModelsOfProductionJobsRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.recreate_read_models_of_production_jobs(request)
        await stream.send_message(response)

    async def __rpc_alert_long_running_produce_metric_jobs(
        self,
        stream: "grpclib.server.Stream[AlertLongRunningProduceMetricJobsRequest, AlertLongRunningProduceMetricJobsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alert_long_running_produce_metric_jobs(request)
        await stream.send_message(response)

    async def __rpc_process_produce_metric_job_results(
        self,
        stream: "grpclib.server.Stream[ProcessProduceMetricJobResultsRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.process_produce_metric_job_results(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.byo.v1.MetricProductionOrchestrationService/GetProduceMetricJob": grpclib.const.Handler(
                self.__rpc_get_produce_metric_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetProduceMetricJobRequest,
                ProduceMetricJob,
            ),
            "/unacast.byo.v1.MetricProductionOrchestrationService/UpdateMetricProductionStatus": grpclib.const.Handler(
                self.__rpc_update_metric_production_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                MetricProductionStatusUpdate,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.byo.v1.MetricProductionOrchestrationService/ListProduceMetricJobs": grpclib.const.Handler(
                self.__rpc_list_produce_metric_jobs,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListProduceMetricJobsRequest,
                ListProduceMetricJobsResponse,
            ),
            "/unacast.byo.v1.MetricProductionOrchestrationService/GetMetricProductionStatus": grpclib.const.Handler(
                self.__rpc_get_metric_production_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMetricProductionStatusRequest,
                GetMetricProductionStatusResponse,
            ),
            "/unacast.byo.v1.MetricProductionOrchestrationService/RestartMetricProductionJob": grpclib.const.Handler(
                self.__rpc_restart_metric_production_job,
                grpclib.const.Cardinality.UNARY_UNARY,
                RestartProduceMetricJobRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.byo.v1.MetricProductionOrchestrationService/RecreateReadModelsOfProductionJobs": grpclib.const.Handler(
                self.__rpc_recreate_read_models_of_production_jobs,
                grpclib.const.Cardinality.UNARY_UNARY,
                RecreateReadModelsOfProductionJobsRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.byo.v1.MetricProductionOrchestrationService/AlertLongRunningProduceMetricJobs": grpclib.const.Handler(
                self.__rpc_alert_long_running_produce_metric_jobs,
                grpclib.const.Cardinality.UNARY_UNARY,
                AlertLongRunningProduceMetricJobsRequest,
                AlertLongRunningProduceMetricJobsResponse,
            ),
            "/unacast.byo.v1.MetricProductionOrchestrationService/ProcessProduceMetricJobResults": grpclib.const.Handler(
                self.__rpc_process_produce_metric_job_results,
                grpclib.const.Cardinality.UNARY_UNARY,
                ProcessProduceMetricJobResultsRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }


class MetricProductionSupervisorServiceBase(ServiceBase):

    async def alert_zombie_produce_metric_jobs(
        self,
        alert_zombie_produce_metric_jobs_request: "AlertZombieProduceMetricJobsRequest",
    ) -> "AlertZombieProduceMetricJobsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_alert_zombie_produce_metric_jobs(
        self,
        stream: "grpclib.server.Stream[AlertZombieProduceMetricJobsRequest, AlertZombieProduceMetricJobsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.alert_zombie_produce_metric_jobs(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.byo.v1.MetricProductionSupervisorService/AlertZombieProduceMetricJobs": grpclib.const.Handler(
                self.__rpc_alert_zombie_produce_metric_jobs,
                grpclib.const.Cardinality.UNARY_UNARY,
                AlertZombieProduceMetricJobsRequest,
                AlertZombieProduceMetricJobsResponse,
            ),
        }


class LocalByoWorkerInvocationServiceBase(ServiceBase):

    async def do_process_report(
        self, report_details_request: "ReportDetailsRequest"
    ) -> "ReportDetails":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def do_verify_report_completion(
        self, report_details_request: "ReportDetailsRequest"
    ) -> "ReportDetails":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def do_process_addresses(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def do_process_location_set_file(
        self, location_set_file_request: "LocationSetFileRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def schedule_report_refresh(
        self, schedule_report_refresh_request: "ScheduleReportRefreshRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def refresh_report(
        self, refresh_report_request: "RefreshReportRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_do_process_report(
        self, stream: "grpclib.server.Stream[ReportDetailsRequest, ReportDetails]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.do_process_report(request)
        await stream.send_message(response)

    async def __rpc_do_verify_report_completion(
        self, stream: "grpclib.server.Stream[ReportDetailsRequest, ReportDetails]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.do_verify_report_completion(request)
        await stream.send_message(response)

    async def __rpc_do_process_addresses(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.do_process_addresses(request)
        await stream.send_message(response)

    async def __rpc_do_process_location_set_file(
        self,
        stream: "grpclib.server.Stream[LocationSetFileRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.do_process_location_set_file(request)
        await stream.send_message(response)

    async def __rpc_schedule_report_refresh(
        self,
        stream: "grpclib.server.Stream[ScheduleReportRefreshRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.schedule_report_refresh(request)
        await stream.send_message(response)

    async def __rpc_refresh_report(
        self,
        stream: "grpclib.server.Stream[RefreshReportRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.refresh_report(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.byo.v1.LocalByoWorkerInvocationService/DoProcessReport": grpclib.const.Handler(
                self.__rpc_do_process_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReportDetailsRequest,
                ReportDetails,
            ),
            "/unacast.byo.v1.LocalByoWorkerInvocationService/DoVerifyReportCompletion": grpclib.const.Handler(
                self.__rpc_do_verify_report_completion,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReportDetailsRequest,
                ReportDetails,
            ),
            "/unacast.byo.v1.LocalByoWorkerInvocationService/DoProcessAddresses": grpclib.const.Handler(
                self.__rpc_do_process_addresses,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.byo.v1.LocalByoWorkerInvocationService/DoProcessLocationSetFile": grpclib.const.Handler(
                self.__rpc_do_process_location_set_file,
                grpclib.const.Cardinality.UNARY_UNARY,
                LocationSetFileRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.byo.v1.LocalByoWorkerInvocationService/ScheduleReportRefresh": grpclib.const.Handler(
                self.__rpc_schedule_report_refresh,
                grpclib.const.Cardinality.UNARY_UNARY,
                ScheduleReportRefreshRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.byo.v1.LocalByoWorkerInvocationService/RefreshReport": grpclib.const.Handler(
                self.__rpc_refresh_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                RefreshReportRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
        }
