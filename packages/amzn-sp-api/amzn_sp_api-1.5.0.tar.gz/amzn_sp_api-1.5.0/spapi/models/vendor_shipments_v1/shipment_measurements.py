# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShipmentMeasurements(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gross_shipment_weight': 'Weight',
        'shipment_volume': 'Volume',
        'carton_count': 'int',
        'pallet_count': 'int',
    }

    attribute_map = {
        'gross_shipment_weight': 'grossShipmentWeight',
        'shipment_volume': 'shipmentVolume',
        'carton_count': 'cartonCount',
        'pallet_count': 'palletCount',
    }

    def __init__(self, gross_shipment_weight=None, shipment_volume=None, carton_count=None, pallet_count=None, _configuration=None):  # noqa: E501
        """ShipmentMeasurements - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._gross_shipment_weight = None
        self._shipment_volume = None
        self._carton_count = None
        self._pallet_count = None
        self.discriminator = None

        if gross_shipment_weight is not None:
            self.gross_shipment_weight = gross_shipment_weight
        if shipment_volume is not None:
            self.shipment_volume = shipment_volume
        if carton_count is not None:
            self.carton_count = carton_count
        if pallet_count is not None:
            self.pallet_count = pallet_count

    @property
    def gross_shipment_weight(self):
        """Gets the gross_shipment_weight of this ShipmentMeasurements.  # noqa: E501


        :return: The gross_shipment_weight of this ShipmentMeasurements.  # noqa: E501
        :rtype: Weight
        """
        return self._gross_shipment_weight

    @gross_shipment_weight.setter
    def gross_shipment_weight(self, gross_shipment_weight):
        """Sets the gross_shipment_weight of this ShipmentMeasurements.


        :param gross_shipment_weight: The gross_shipment_weight of this ShipmentMeasurements.  # noqa: E501
        :type: Weight
        """

        self._gross_shipment_weight = gross_shipment_weight

    @property
    def shipment_volume(self):
        """Gets the shipment_volume of this ShipmentMeasurements.  # noqa: E501


        :return: The shipment_volume of this ShipmentMeasurements.  # noqa: E501
        :rtype: Volume
        """
        return self._shipment_volume

    @shipment_volume.setter
    def shipment_volume(self, shipment_volume):
        """Sets the shipment_volume of this ShipmentMeasurements.


        :param shipment_volume: The shipment_volume of this ShipmentMeasurements.  # noqa: E501
        :type: Volume
        """

        self._shipment_volume = shipment_volume

    @property
    def carton_count(self):
        """Gets the carton_count of this ShipmentMeasurements.  # noqa: E501

        Number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments.  # noqa: E501

        :return: The carton_count of this ShipmentMeasurements.  # noqa: E501
        :rtype: int
        """
        return self._carton_count

    @carton_count.setter
    def carton_count(self, carton_count):
        """Sets the carton_count of this ShipmentMeasurements.

        Number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments.  # noqa: E501

        :param carton_count: The carton_count of this ShipmentMeasurements.  # noqa: E501
        :type: int
        """

        self._carton_count = carton_count

    @property
    def pallet_count(self):
        """Gets the pallet_count of this ShipmentMeasurements.  # noqa: E501

        Number of pallets present in the shipment. Provide the palletCount only for palletized shipments.  # noqa: E501

        :return: The pallet_count of this ShipmentMeasurements.  # noqa: E501
        :rtype: int
        """
        return self._pallet_count

    @pallet_count.setter
    def pallet_count(self, pallet_count):
        """Sets the pallet_count of this ShipmentMeasurements.

        Number of pallets present in the shipment. Provide the palletCount only for palletized shipments.  # noqa: E501

        :param pallet_count: The pallet_count of this ShipmentMeasurements.  # noqa: E501
        :type: int
        """

        self._pallet_count = pallet_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentMeasurements, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentMeasurements):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShipmentMeasurements):
            return True

        return self.to_dict() != other.to_dict()
