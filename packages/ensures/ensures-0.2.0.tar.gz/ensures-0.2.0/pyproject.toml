[project]
name = "ensures"
version = "0.2.0"
authors = [
  { name="Bruno Dantas", email="4422988+brunodantas@users.noreply.github.com" },
]
description = "Design by Contract with Functional Programming"
readme = "README.md"
requires-python = ">=3.10"
dependencies = []
classifiers = [
    "Development Status :: 3 - Alpha"
]
license = "GPL-3.0-or-later"
license-files = ["LICEN[CS]E*"]

[project.urls]
Homepage = "https://github.com/brunodantas/ensures"
Issues = "https://github.com/brunodantas/ensures/issues"

[build-system]
requires = ["uv_build >= 0.7.19, <0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pytest>=8.4.2",
    "pytest-cov>=6.0.0",
    "ruff>=0.12.12",
]

[tool.pytest.ini_options]
testpaths = ["src"]
python_files = ["test_*.py", "*_test.py", "tests.py"]
addopts = "-v --tb=short"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
check_untyped_defs = true

# More lenient settings for now
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "B", "C4", "PIE", "PYI", "Q"]
ignore = ["S101"]  # Allow assert statements (needed for pytest)

[tool.ruff.lint.per-file-ignores]
"**/tests.py" = ["S101", "E501"]  # Allow assert statements and long lines in tests
"**/test_*.py" = ["S101", "E501"]  # Allow assert statements and long lines in tests
"examples.py" = ["E501"]  # Allow long lines in examples
"Untitled-*.ipynb" = ["F401", "I001", "E501"]  # Allow unused imports and unsorted imports in notebooks

[tool.coverage.run]
source = ["src"]
omit = ["*/tests.py", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
