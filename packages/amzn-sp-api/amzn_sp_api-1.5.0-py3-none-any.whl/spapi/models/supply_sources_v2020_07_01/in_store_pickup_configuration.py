# coding: utf-8

"""
    Selling Partner API for Supply Sources

    Manage configurations and capabilities of seller supply sources.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class InStorePickupConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_supported': 'bool',
        'parking_configuration': 'ParkingConfiguration',
    }

    attribute_map = {
        'is_supported': 'isSupported',
        'parking_configuration': 'parkingConfiguration',
    }

    def __init__(self, is_supported=None, parking_configuration=None, _configuration=None):  # noqa: E501
        """InStorePickupConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_supported = None
        self._parking_configuration = None
        self.discriminator = None

        if is_supported is not None:
            self.is_supported = is_supported
        if parking_configuration is not None:
            self.parking_configuration = parking_configuration

    @property
    def is_supported(self):
        """Gets the is_supported of this InStorePickupConfiguration.  # noqa: E501

        When true, in-store pickup is supported by the supply source (default: `isSupported` value in `PickupChannel`).  # noqa: E501

        :return: The is_supported of this InStorePickupConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_supported

    @is_supported.setter
    def is_supported(self, is_supported):
        """Sets the is_supported of this InStorePickupConfiguration.

        When true, in-store pickup is supported by the supply source (default: `isSupported` value in `PickupChannel`).  # noqa: E501

        :param is_supported: The is_supported of this InStorePickupConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_supported = is_supported

    @property
    def parking_configuration(self):
        """Gets the parking_configuration of this InStorePickupConfiguration.  # noqa: E501


        :return: The parking_configuration of this InStorePickupConfiguration.  # noqa: E501
        :rtype: ParkingConfiguration
        """
        return self._parking_configuration

    @parking_configuration.setter
    def parking_configuration(self, parking_configuration):
        """Sets the parking_configuration of this InStorePickupConfiguration.


        :param parking_configuration: The parking_configuration of this InStorePickupConfiguration.  # noqa: E501
        :type: ParkingConfiguration
        """

        self._parking_configuration = parking_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InStorePickupConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InStorePickupConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InStorePickupConfiguration):
            return True

        return self.to_dict() != other.to_dict()
