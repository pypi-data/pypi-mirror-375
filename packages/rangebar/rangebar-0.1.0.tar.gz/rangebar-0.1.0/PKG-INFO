Metadata-Version: 2.4
Name: rangebar
Version: 0.1.0
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Rust
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Requires-Dist: numpy>=1.24.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: pyarrow>=12.0.0
Requires-Dist: httpx>=0.24.0
Requires-Dist: platformdirs>=3.0.0
Requires-Dist: binance-historical-data>=0.1.0
Requires-Dist: click>=8.2.1
Requires-Dist: pytest>=7.0.0 ; extra == 'test'
Requires-Dist: hypothesis>=6.0.0 ; extra == 'test'
Requires-Dist: pytest-benchmark>=4.0.0 ; extra == 'test'
Requires-Dist: maturin>=1.0.0 ; extra == 'rust'
Provides-Extra: test
Provides-Extra: rust
License-File: LICENSE
Summary: Non-lookahead bias range bar construction from Binance aggTrades data
Keywords: binance,range-bars,trading,cryptocurrency,futures,technical-analysis
Author-email: Terry Li <terry@eonlabs.com>
License: MIT
Requires-Python: >=3.12
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
Project-URL: Homepage, https://github.com/eonlabs/rangebar
Project-URL: Repository, https://github.com/eonlabs/rangebar
Project-URL: Issues, https://github.com/eonlabs/rangebar/issues

# RangeBar

High-performance non-lookahead bias range bar construction from Binance UM Futures aggTrades data.

## Overview

RangeBar implements precise range bar construction using a threshold-based algorithm where bars close when price moves ±0.8% (configurable) from the bar's **open price**. This ensures non-lookahead bias - thresholds are computed only from the bar's opening price and never recalculated.

### Key Features

- **Non-lookahead Bias**: Thresholds computed from bar open only, never from high/low ranges
- **Breach Inclusion**: Breach tick is included in the closing bar before next tick opens new bar
- **High Performance**: Rust core processes 2.5M+ trades/second
- **Fixed-Point Arithmetic**: No floating-point rounding errors (8 decimal precision)
- **UM Futures Only**: Designed specifically for Binance USD-M Futures aggTrades data

## Installation

### Using UV (Recommended)

```bash
uv add rangebar
```

### Using pip

```bash
pip install rangebar
```

## Quick Start

### CLI Usage

```bash
# Fetch UM Futures aggTrades data
rangebar fetch BTCUSDT 2024-01-01 2024-01-01

# Generate range bars 
rangebar generate BTCUSDT_2024-01-01_aggtrades.parquet --threshold-bps 8000

# Inspect generated bars
rangebar inspect BTCUSDT_2024-01-01_range_bars_80bps.parquet --head 5
```

### Python API

```python
from rangebar.range_bars import iter_range_bars_from_aggtrades, AggTrade
from decimal import Decimal
import asyncio

# Create sample trades
trades_data = [
    {'a': 1, 'p': '50000.0', 'q': '1.0', 'f': 1, 'l': 1, 'T': 1000, 'm': False},
    {'a': 2, 'p': '50400.0', 'q': '1.0', 'f': 2, 'l': 2, 'T': 2000, 'm': False},  # +0.8% breach
    {'a': 3, 'p': '50500.0', 'q': '1.0', 'f': 3, 'l': 3, 'T': 3000, 'm': False},  # New bar
]

trades = [AggTrade(data) for data in trades_data]

# Generate range bars
bars = list(iter_range_bars_from_aggtrades(trades, pct=Decimal('0.008')))

print(f"Generated {len(bars)} range bars")
for i, bar in enumerate(bars):
    print(f"Bar {i}: Open={bar['open']}, High={bar['high']}, Low={bar['low']}, Close={bar['close']}")
```

### Fetching Market Data

```python
from rangebar.data_fetcher import fetch_um_futures_aggtrades
import asyncio

async def main():
    # Fetch UM Futures aggTrades
    trades = await fetch_um_futures_aggtrades('BTCUSDT', '2024-01-01', '2024-01-01')
    print(f"Fetched {len(trades)} aggTrades")

asyncio.run(main())
```

## Algorithm Specification

### Non-Lookahead Bias Range Bars

1. **Threshold Calculation**: When a bar opens, thresholds are computed as:
   - Upper threshold = Open price × (1 + 0.008) = Open × 1.008
   - Lower threshold = Open price × (1 - 0.008) = Open × 0.992

2. **Breach Detection**: For each incoming trade tick:
   - Update bar OHLCV with the trade (always include the trade)
   - Check if trade price ≥ upper threshold OR ≤ lower threshold
   - If breach: close current bar, next tick opens new bar

3. **Critical Property**: Thresholds are **NEVER** recalculated after bar opening. This prevents lookahead bias.

### Example: 0.8% Threshold

```
Bar opens at $50,000:
- Upper threshold: $50,000 × 1.008 = $50,400 (fixed)
- Lower threshold: $50,000 × 0.992 = $49,600 (fixed)

Trades sequence:
1. $50,200 → update bar, no breach
2. $50,400 → update bar, BREACH detected → close bar
3. $50,500 → opens new bar with new thresholds
```

## Data Sources

RangeBar fetches data from Binance UM Futures using the [binance-historical-data](https://github.com/stas-prokopiev/binance_historical_data) library.

### Supported Symbols

All Binance UM Futures perpetual contracts (USDT-margined):
- BTCUSDT, ETHUSDT, ADAUSDT, etc.
- Use Binance API symbols exactly as listed

### Data Format

Input: Binance UM Futures aggTrades JSON/CSV
```json
{
  "a": 123456789,     // Aggregate trade ID
  "p": "50000.12345", // Price
  "q": "1.50000000",  // Quantity
  "f": 100,           // First trade ID
  "l": 105,           // Last trade ID  
  "T": 1609459200000, // Timestamp
  "m": false          // Is buyer maker
}
```

## Performance

- **Rust Core**: 2.5M+ trades/second processing
- **Memory Efficient**: Streaming processing, minimal memory footprint
- **Fixed-Point**: No floating-point precision errors

## Development

### Requirements

- Python 3.12+
- Rust 1.70+
- UV package manager

### Building from Source

```bash
# Clone repository
git clone https://github.com/eonlabs/rangebar.git
cd rangebar

# Install dependencies
uv sync

# Build Rust extension
uv run maturin develop --release

# Run tests
uv run pytest
cargo test --release
```

### Running Validation

```bash
# Comprehensive algorithm validation
uv run python validate_algorithm_parity.py
```

## License

MIT License. See [LICENSE](LICENSE) for details.

## Contributing

1. Fork the repository
2. Create a feature branch
3. Run tests: `cargo test --release && uv run pytest`
4. Submit a pull request

## Support

- Issues: [GitHub Issues](https://github.com/eonlabs/rangebar/issues)
- Documentation: See CLI help `rangebar --help`
