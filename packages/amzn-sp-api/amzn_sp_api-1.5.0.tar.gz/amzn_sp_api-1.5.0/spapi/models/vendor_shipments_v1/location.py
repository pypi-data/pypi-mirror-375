# coding: utf-8

"""
    Selling Partner API for Retail Procurement Shipments

    The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'location_code': 'str',
        'country_code': 'str',
    }

    attribute_map = {
        'type': 'type',
        'location_code': 'locationCode',
        'country_code': 'countryCode',
    }

    def __init__(self, type=None, location_code=None, country_code=None, _configuration=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._location_code = None
        self._country_code = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if location_code is not None:
            self.location_code = location_code
        if country_code is not None:
            self.country_code = country_code

    @property
    def type(self):
        """Gets the type of this Location.  # noqa: E501

        Type of location identification.  # noqa: E501

        :return: The type of this Location.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Location.

        Type of location identification.  # noqa: E501

        :param type: The type of this Location.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def location_code(self):
        """Gets the location_code of this Location.  # noqa: E501

        Location code.  # noqa: E501

        :return: The location_code of this Location.  # noqa: E501
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this Location.

        Location code.  # noqa: E501

        :param location_code: The location_code of this Location.  # noqa: E501
        :type: str
        """

        self._location_code = location_code

    @property
    def country_code(self):
        """Gets the country_code of this Location.  # noqa: E501

        The two digit country code. In ISO 3166-1 alpha-2 format.  # noqa: E501

        :return: The country_code of this Location.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Location.

        The two digit country code. In ISO 3166-1 alpha-2 format.  # noqa: E501

        :param country_code: The country_code of this Location.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Location):
            return True

        return self.to_dict() != other.to_dict()
