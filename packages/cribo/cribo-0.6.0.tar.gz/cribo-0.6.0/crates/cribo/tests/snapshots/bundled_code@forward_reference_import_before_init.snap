---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/forward_reference_import_before_init/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypkg_compat = _cribo.types.SimpleNamespace(__name__='mypkg.compat', __initializing__=False, __initialized__=False)
def _cribo_init___cribo_4089db_mypkg_compat(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    try:
        from fakejson import JSONDecodeError
        mypkg_compat.JSONDecodeError = JSONDecodeError
    except ImportError:
        JSONDecodeError = _cribo.json.JSONDecodeError
        mypkg_compat.JSONDecodeError = JSONDecodeError
    MutableMapping = _cribo.collections.abc.MutableMapping
    self.MutableMapping = MutableMapping
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypkg_compat.__init__ = _cribo_init___cribo_4089db_mypkg_compat
mypkg = _cribo.types.SimpleNamespace(__name__='mypkg', __initializing__=False, __initialized__=False)
mypkg.compat = mypkg_compat
mypkg_exceptions = _cribo.types.SimpleNamespace(__name__='mypkg.exceptions', __initializing__=False, __initialized__=False)
mypkg.exceptions = mypkg_exceptions
def _cribo_init___cribo_30661c_mypkg(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global mypkg_exceptions
    mypkg_exceptions = _cribo_init___cribo_72b028_mypkg_exceptions(mypkg_exceptions)
    CustomJSONError = mypkg_exceptions.CustomJSONError
    self.CustomJSONError = CustomJSONError
    self.CustomJSONError = CustomJSONError
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypkg.__init__ = _cribo_init___cribo_30661c_mypkg
def _cribo_init___cribo_72b028_mypkg_exceptions(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global mypkg_compat
    mypkg_compat = _cribo_init___cribo_4089db_mypkg_compat(mypkg_compat)
    CompatJSONDecodeError = mypkg.compat.JSONDecodeError
    self.CompatJSONDecodeError = CompatJSONDecodeError
    self.CompatJSONDecodeError = CompatJSONDecodeError

    class BaseException(Exception):
        """Base exception class"""
        pass
    BaseException.__module__ = 'mypkg.exceptions'
    self.BaseException = BaseException

    class CustomJSONError(BaseException, CompatJSONDecodeError):
        """Custom JSON error that inherits from compat's JSONDecodeError"""

        def __init__(self, *args):
            CompatJSONDecodeError.__init__(self, *args)
            BaseException.__init__(self, str(args[0]) if args else "")

        def __reduce__(self):
            return CompatJSONDecodeError.__reduce__(self)
    CustomJSONError.__module__ = 'mypkg.exceptions'
    self.CustomJSONError = CustomJSONError
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypkg_exceptions.__init__ = _cribo_init___cribo_72b028_mypkg_exceptions
__cribo_init_result = _cribo_init___cribo_30661c_mypkg(mypkg)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypkg, attr, getattr(__cribo_init_result, attr))
try:
    raise mypkg.CustomJSONError("Test error", "doc", 42)
except mypkg.CustomJSONError as e:
    print(f"Caught error: {e}")
    print("SUCCESS")
exceptions = mypkg.exceptions
compat = mypkg.compat
