# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.well_test_type import WellTestType
from typing import Optional, Set
from typing_extensions import Self

class WellTest(BaseModel):
    """
    WellTest
    """ # noqa: E501
    well_xid: StrictStr = Field(description="Xecta unique well identifier", alias="wellXid")
    uwi: StrictStr = Field(description="Unique Well Identifier")
    var_date: datetime = Field(description="Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="date")
    type: Optional[WellTestType] = WellTestType.WELLTEST
    is_valid: Optional[StrictBool] = Field(default=True, alias="isValid")
    oil_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Oil Flow Rate, STB/d", alias="oilRate")
    gas_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gas Flow Rate, Mscf/d", alias="gasRate")
    water_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Water Flow Rate, STB/d", alias="waterRate")
    tubing_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tubing / wellhead pressure, psig", alias="tubingPressure")
    tubing_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tubing / wellhead temperature, degF", alias="tubingTemperature")
    casing_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Casing pressure, psig", alias="casingPressure")
    casing_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Casing temperature, degF", alias="casingTemperature")
    gauge_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downhole gauge pressure (downhole gauge must be available in downhole equipment table), psig", alias="gaugePressure")
    gauge_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downhole gauge temperature (downhole gauge must be available in downhole equipment table), degF", alias="gaugeTemperature")
    choke: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Choke opening, %")
    upstream_choke_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Upstream choke pressure, psig", alias="upstreamChokePressure")
    downstream_choke_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downstream choke pressure, psig", alias="downstreamChokePressure")
    basic_sediment_and_water: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage basic sediment and water, %", alias="basicSedimentAndWater")
    duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Well test duration, hr")
    separator_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Test separator pressure, psig", alias="separatorPressure")
    separator_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Test separator temperature, degF", alias="separatorTemperature")
    gas_lift_injection_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Test gas lift injection rate, Mscf/d", alias="gasLiftInjectionRate")
    water_gas_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Test gas lift injection rate, STB/MMscf", alias="waterGasRatio")
    condensate_gas_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Test condensate/gas ratio, STB/MMscf", alias="condensateGasRatio")
    salinity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Test salinity, ppm")
    __properties: ClassVar[List[str]] = ["wellXid", "uwi", "date", "type", "isValid", "oilRate", "gasRate", "waterRate", "tubingPressure", "tubingTemperature", "casingPressure", "casingTemperature", "gaugePressure", "gaugeTemperature", "choke", "upstreamChokePressure", "downstreamChokePressure", "basicSedimentAndWater", "duration", "separatorPressure", "separatorTemperature", "gasLiftInjectionRate", "waterGasRatio", "condensateGasRatio", "salinity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WellTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if is_valid (nullable) is None
        # and model_fields_set contains the field
        if self.is_valid is None and "is_valid" in self.model_fields_set:
            _dict['isValid'] = None

        # set to None if oil_rate (nullable) is None
        # and model_fields_set contains the field
        if self.oil_rate is None and "oil_rate" in self.model_fields_set:
            _dict['oilRate'] = None

        # set to None if gas_rate (nullable) is None
        # and model_fields_set contains the field
        if self.gas_rate is None and "gas_rate" in self.model_fields_set:
            _dict['gasRate'] = None

        # set to None if water_rate (nullable) is None
        # and model_fields_set contains the field
        if self.water_rate is None and "water_rate" in self.model_fields_set:
            _dict['waterRate'] = None

        # set to None if tubing_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.tubing_pressure is None and "tubing_pressure" in self.model_fields_set:
            _dict['tubingPressure'] = None

        # set to None if tubing_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.tubing_temperature is None and "tubing_temperature" in self.model_fields_set:
            _dict['tubingTemperature'] = None

        # set to None if casing_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.casing_pressure is None and "casing_pressure" in self.model_fields_set:
            _dict['casingPressure'] = None

        # set to None if casing_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.casing_temperature is None and "casing_temperature" in self.model_fields_set:
            _dict['casingTemperature'] = None

        # set to None if gauge_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.gauge_pressure is None and "gauge_pressure" in self.model_fields_set:
            _dict['gaugePressure'] = None

        # set to None if gauge_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.gauge_temperature is None and "gauge_temperature" in self.model_fields_set:
            _dict['gaugeTemperature'] = None

        # set to None if choke (nullable) is None
        # and model_fields_set contains the field
        if self.choke is None and "choke" in self.model_fields_set:
            _dict['choke'] = None

        # set to None if upstream_choke_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.upstream_choke_pressure is None and "upstream_choke_pressure" in self.model_fields_set:
            _dict['upstreamChokePressure'] = None

        # set to None if downstream_choke_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_choke_pressure is None and "downstream_choke_pressure" in self.model_fields_set:
            _dict['downstreamChokePressure'] = None

        # set to None if basic_sediment_and_water (nullable) is None
        # and model_fields_set contains the field
        if self.basic_sediment_and_water is None and "basic_sediment_and_water" in self.model_fields_set:
            _dict['basicSedimentAndWater'] = None

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict['duration'] = None

        # set to None if separator_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.separator_pressure is None and "separator_pressure" in self.model_fields_set:
            _dict['separatorPressure'] = None

        # set to None if separator_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.separator_temperature is None and "separator_temperature" in self.model_fields_set:
            _dict['separatorTemperature'] = None

        # set to None if gas_lift_injection_rate (nullable) is None
        # and model_fields_set contains the field
        if self.gas_lift_injection_rate is None and "gas_lift_injection_rate" in self.model_fields_set:
            _dict['gasLiftInjectionRate'] = None

        # set to None if water_gas_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.water_gas_ratio is None and "water_gas_ratio" in self.model_fields_set:
            _dict['waterGasRatio'] = None

        # set to None if condensate_gas_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.condensate_gas_ratio is None and "condensate_gas_ratio" in self.model_fields_set:
            _dict['condensateGasRatio'] = None

        # set to None if salinity (nullable) is None
        # and model_fields_set contains the field
        if self.salinity is None and "salinity" in self.model_fields_set:
            _dict['salinity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WellTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "wellXid": obj.get("wellXid"),
            "uwi": obj.get("uwi"),
            "date": obj.get("date"),
            "type": obj.get("type") if obj.get("type") is not None else WellTestType.WELLTEST,
            "isValid": obj.get("isValid") if obj.get("isValid") is not None else True,
            "oilRate": obj.get("oilRate"),
            "gasRate": obj.get("gasRate"),
            "waterRate": obj.get("waterRate"),
            "tubingPressure": obj.get("tubingPressure"),
            "tubingTemperature": obj.get("tubingTemperature"),
            "casingPressure": obj.get("casingPressure"),
            "casingTemperature": obj.get("casingTemperature"),
            "gaugePressure": obj.get("gaugePressure"),
            "gaugeTemperature": obj.get("gaugeTemperature"),
            "choke": obj.get("choke"),
            "upstreamChokePressure": obj.get("upstreamChokePressure"),
            "downstreamChokePressure": obj.get("downstreamChokePressure"),
            "basicSedimentAndWater": obj.get("basicSedimentAndWater"),
            "duration": obj.get("duration"),
            "separatorPressure": obj.get("separatorPressure"),
            "separatorTemperature": obj.get("separatorTemperature"),
            "gasLiftInjectionRate": obj.get("gasLiftInjectionRate"),
            "waterGasRatio": obj.get("waterGasRatio"),
            "condensateGasRatio": obj.get("condensateGasRatio"),
            "salinity": obj.get("salinity")
        })
        return _obj


