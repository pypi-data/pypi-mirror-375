def OutlierFilterTransform(data=None, object=None, **generic_arguments):
    """
    DESCRIPTION:
        OutlierFilterTransform() function filters the outliers from the input teradataml DataFrame.
        OutlierFilterTransform() uses the result DataFrame from OutlierFilterFit() function to get
        statistics like median, count of rows, lower percentile and upper percentile for every column
        specified in target columns argument and filters the outliers in the input data.
        Notes:
            * Partitioning of input data and model is allowed using 'data_partition_column' and
              'object_partition_column' only if 'group_columns' are passed while creating model
              using OutlierFilterFit() function.
            * Neither 'data_partition_column' nor 'object_partition_column' can be used independently.

    PARAMETERS:
        data:
            Required Argument.
            Specifies the input teradataml DataFrame.
            Types: teradataml DataFrame

        object:
            Required Argument.
            Specifies the teradataml DataFrame containing the outlier metrics generated by
            OutlierFilterFit() function or an instance of OutlierFilterFit.
            Types: teradataml DataFrame or OutlierFilterFit

        **generic_arguments:
            Specifies the generic keyword arguments SQLE functions accept.
            Below are the generic keyword arguments:
                persist:
                    Optional Argument.
                    Specifies whether to persist the results of the function in table or not.
                    When set to True, results are persisted in table; otherwise, results
                    are garbage collected at the end of the session.
                    Default Value: False
                    Types: boolean

                volatile:
                    Optional Argument.
                    Specifies whether to put the results of the function in volatile table or not.
                    When set to True, results are stored in volatile table, otherwise not.
                    Default Value: False
                    Types: boolean

            Function allows the user to partition, hash, order or local order the input
            data. These generic arguments are available for each argument that accepts
            teradataml DataFrame as input and can be accessed as:
                * "<input_data_arg_name>_partition_column" accepts str or list of str (Strings)
                * "<input_data_arg_name>_hash_column" accepts str or list of str (Strings)
                * "<input_data_arg_name>_order_column" accepts str or list of str (Strings)
                * "local_order_<input_data_arg_name>" accepts boolean
            Note:
                These generic arguments are supported by teradataml if the underlying
                SQLE Engine function supports, else an exception is raised.


    RETURNS:
        Instance of OutlierFilterTransform.
        Output teradataml DataFrames can be accessed using attribute
        references, such as OutlierFilterTransformObj.<attribute_name>.
        Output teradataml DataFrame attribute name is:
            result


    RAISES:
        TeradataMlException, TypeError, ValueError


    EXAMPLES:
        # Notes:
        #     1. Get the connection to Vantage to execute the function.
        #     2. One must import the required functions mentioned in
        #        the example from teradataml.
        #     3. Function will raise error if not supported on the Vantage
        #        user is connected to.

        # Load the example data.
        load_example_data("teradataml", ["titanic"])

        # Create teradataml DataFrame object.
        titanic_data = DataFrame.from_table("titanic")

        # Check the list of available analytic functions.
        display_analytic_functions()

        # Example 1: Finding outliers in column "fare" using "PERCENTILE" method.
        # Generate fit object for column "fare".
        fit_obj = OutlierFilterFit(data=titanic_data,
                                   target_columns="fare",
                                   lower_percentile=0.1,
                                   upper_percentile=0.9,
                                   outlier_method="PERCENTILE",
                                   replacement_value="MEDIAN",
                                   percentile_method="PERCENTILECONT")

        # Print the result DataFrame.
        print(fit_obj.result)

        # Find the outliers by transforming fit object result DataFrame.
        obj = OutlierFilterTransform(data=titanic_data,
                                     object=fit_obj.result
                                     )

        # Print the result DataFrame.
        print(obj.result)
    """
