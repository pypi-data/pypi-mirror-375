#!/usr/bin/env python3

"""
Test script for random_experiments function in trexselector Python package

Note: This script reads test data generated by the R script test_random_experiments.R.
"""

import numpy as np
import time
import pandas as pd
import os
from trexselector import random_experiments

# Set random seed for reproducibility
np.random.seed(42)

def load_test_data(prefix):
    """
    Load test dataset from CSV files.
    
    Parameters
    ----------
    prefix : str
        Prefix of the CSV files to load.
        
    Returns
    -------
    dict
        Dictionary containing X, y, beta, and active_indices.
    """
    # Load data from CSV files
    X = pd.read_csv(f"test_data/{prefix}_X.csv").values
    y = pd.read_csv(f"test_data/{prefix}_y.csv").values.ravel()
    beta = pd.read_csv(f"test_data/{prefix}_beta.csv").values.ravel()
    active_indices = pd.read_csv(f"test_data/{prefix}_active_indices.csv").values.ravel()
    
    # Convert R's 1-based indices to Python's 0-based indices
    active_indices = active_indices - 1
    
    return {
        'X': X,
        'y': y,
        'beta': beta,
        'active_indices': active_indices
    }

def compare_results(prefix, key, python_result):
    """
    Compare Python results with R results.
    
    Parameters
    ----------
    prefix : str
        Prefix of the R result CSV file.
    key : str
        The key in the results to compare ('phi_T_mat' or 'Phi').
    python_result : ndarray
        The Python result to compare.
    
    Returns
    -------
    float
        Mean absolute difference between R and Python results.
    """
    # Load R result
    r_file = f"test_data/{prefix}_{key}_R.csv"
    if not os.path.exists(r_file):
        print(f"Warning: R result file {r_file} does not exist. Skipping comparison.")
        return None
    
    r_result = pd.read_csv(r_file).values
    
    # If key is Phi, it might be a 1D array in Python but a column vector in R
    if key == "Phi" and len(python_result.shape) == 1:
        python_result = python_result.reshape(-1, 1)
    
    # Calculate difference
    if r_result.shape != python_result.shape:
        print(f"Warning: Shape mismatch between R result {r_result.shape} and Python result {python_result.shape}")
        # Try to reshape if dimensions are compatible
        if r_result.size == python_result.size:
            r_result = r_result.reshape(python_result.shape)
        else:
            return None
    
    diff = np.abs(r_result - python_result)
    mean_abs_diff = np.mean(diff)
    
    return mean_abs_diff

def test_random_experiments_basic():
    """Test the basic functionality of random_experiments."""
    print("Testing random_experiments basic functionality...")
    
    # Load test data
    test_data = load_test_data('rand_exp_basic')
    X = test_data['X']
    y = test_data['y']
    
    # Run random_experiments with default parameters
    t_start = time.time()
    result = random_experiments(X=X, y=y, K=5, T_stop=1, num_dummies=20)
    t_end = time.time()
    
    # Print some info about the result
    print(f"Time taken: {t_end - t_start:.4f} seconds")
    print(f"Type of result: {type(result)}")
    
    # Save Python results for comparison
    pd.DataFrame(result["phi_T_mat"]).to_csv("test_data/rand_exp_basic_phi_T_mat_py.csv", index=False)
    pd.DataFrame(result["Phi"].reshape(-1, 1)).to_csv("test_data/rand_exp_basic_Phi_py.csv", index=False)
    
    # Compare with R results
    phi_diff = compare_results("rand_exp_basic", "phi_T_mat", result["phi_T_mat"])
    Phi_diff = compare_results("rand_exp_basic", "Phi", result["Phi"])
    
    print(f"phi_T_mat shape: {result['phi_T_mat'].shape}")
    # Sum of phi_T_mat
    print(f"phi_T_mat sum: {np.sum(result['phi_T_mat'])}")
    print(f"Phi length: {len(result['Phi'])}")
    print(f"Phi sum: {np.sum(result['Phi'])}")
    
    if phi_diff is not None:
        print(f"Mean absolute difference in phi_T_mat: {phi_diff:.8f}")
    if Phi_diff is not None:
        print(f"Mean absolute difference in Phi: {Phi_diff:.8f}")
    
    print("Test completed.\n")
    return result

def test_random_experiments_K():
    """Test random_experiments with different K values."""
    print("Testing random_experiments with different K values...")
    
    # Load test data
    test_data = load_test_data('rand_exp_K')
    X = test_data['X']
    y = test_data['y']
    
    # Test with different K values
    for K_val in [3, 5]:
        print(f"K = {K_val}")
        
        # Run random_experiments
        t_start = time.time()
        result = random_experiments(X=X, y=y, K=K_val, T_stop=1, num_dummies=20)
        t_end = time.time()
        
        print(f"Time taken: {t_end - t_start:.4f} seconds")
        
        # Save Python results for comparison
        pd.DataFrame(result["phi_T_mat"]).to_csv(f"test_data/rand_exp_K{K_val}_phi_T_mat_py.csv", index=False)
        pd.DataFrame(result["Phi"].reshape(-1, 1)).to_csv(f"test_data/rand_exp_K{K_val}_Phi_py.csv", index=False)
        
        # Compare with R results
        phi_diff = compare_results(f"rand_exp_K{K_val}", "phi_T_mat", result["phi_T_mat"])
        Phi_diff = compare_results(f"rand_exp_K{K_val}", "Phi", result["Phi"])
        
        print(f"phi_T_mat shape: {result['phi_T_mat'].shape}")
        # Sum of phi_T_mat
        print(f"phi_T_mat sum: {np.sum(result['phi_T_mat'])}")
        print(f"Phi length: {len(result['Phi'])}")
        print(f"Phi sum: {np.sum(result['Phi'])}")
        
        if phi_diff is not None:
            print(f"Mean absolute difference in phi_T_mat: {phi_diff:.8f}")
        if Phi_diff is not None:
            print(f"Mean absolute difference in Phi: {Phi_diff:.8f}")
        
        print("")
    
    print("Test completed.\n")

def test_random_experiments_T_stop():
    """Test random_experiments with different T_stop values."""
    print("Testing random_experiments with different T_stop values...")
    
    # Load test data
    test_data = load_test_data('rand_exp_T_stop')
    X = test_data['X']
    y = test_data['y']
    
    # Test with different T_stop values
    for t_stop in [1, 2]:
        print(f"T_stop = {t_stop}")
        
        # Run random_experiments
        t_start = time.time()
        result = random_experiments(X=X, y=y, K=3, T_stop=t_stop, num_dummies=20)
        t_end = time.time()
        
        print(f"Time taken: {t_end - t_start:.4f} seconds")
        
        # Save Python results for comparison
        pd.DataFrame(result["phi_T_mat"]).to_csv(f"test_data/rand_exp_T_stop{t_stop}_phi_T_mat_py.csv", index=False)
        pd.DataFrame(result["Phi"].reshape(-1, 1)).to_csv(f"test_data/rand_exp_T_stop{t_stop}_Phi_py.csv", index=False)
        
        # Compare with R results
        phi_diff = compare_results(f"rand_exp_T_stop{t_stop}", "phi_T_mat", result["phi_T_mat"])
        Phi_diff = compare_results(f"rand_exp_T_stop{t_stop}", "Phi", result["Phi"])
        
        print(f"phi_T_mat shape: {result['phi_T_mat'].shape}")
        # Sum of phi_T_mat
        print(f"phi_T_mat sum: {np.sum(result['phi_T_mat'])}")
        print(f"Phi length: {len(result['Phi'])}")
        print(f"Phi sum: {np.sum(result['Phi'])}")
        
        if phi_diff is not None:
            print(f"Mean absolute difference in phi_T_mat: {phi_diff:.8f}")
        if Phi_diff is not None:
            print(f"Mean absolute difference in Phi: {Phi_diff:.8f}")
        
        print("")
    
    print("Test completed.\n")

def test_random_experiments_methods():
    """Test random_experiments with different method values."""
    print("Testing random_experiments with different method values...")
    
    # Load test data
    test_data = load_test_data('rand_exp_methods')
    X = test_data['X']
    y = test_data['y']
    
    # Test with different method values
    methods = ["trex"]  # Only testing "trex" for simplicity
    
    for method in methods:
        print(f"Method = {method}")
        
        # Run random_experiments
        t_start = time.time()
        result = random_experiments(X=X, y=y, K=3, T_stop=1, num_dummies=20, method=method)
        t_end = time.time()
        
        print(f"Time taken: {t_end - t_start:.4f} seconds")
        
        # Save Python results for comparison
        pd.DataFrame(result["phi_T_mat"]).to_csv(f"test_data/rand_exp_method_{method}_phi_T_mat_py.csv", index=False)
        pd.DataFrame(result["Phi"].reshape(-1, 1)).to_csv(f"test_data/rand_exp_method_{method}_Phi_py.csv", index=False)
        
        # Compare with R results
        phi_diff = compare_results(f"rand_exp_method_{method}", "phi_T_mat", result["phi_T_mat"])
        Phi_diff = compare_results(f"rand_exp_method_{method}", "Phi", result["Phi"])
        
        print(f"phi_T_mat shape: {result['phi_T_mat'].shape}")
        # Sum of phi_T_mat
        print(f"phi_T_mat sum: {np.sum(result['phi_T_mat'])}")
        print(f"Phi length: {len(result['Phi'])}")
        print(f"Phi sum: {np.sum(result['Phi'])}")
        
        if phi_diff is not None:
            print(f"Mean absolute difference in phi_T_mat: {phi_diff:.8f}")
        if Phi_diff is not None:
            print(f"Mean absolute difference in Phi: {Phi_diff:.8f}")
        
        print("")
    
    print("Test completed.\n")

def run_all_tests():
    """Run all tests for random_experiments function."""
    print("=== Running all tests for random_experiments in Python ===\n")
    
    test_random_experiments_basic()
    test_random_experiments_K()
    test_random_experiments_T_stop()
    test_random_experiments_methods()
    
    print("=== All tests completed ===")

if __name__ == "__main__":
    run_all_tests() 