# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class InvalidReturnItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seller_return_item_id': 'str',
        'seller_fulfillment_order_item_id': 'str',
        'invalid_item_reason': 'InvalidItemReason',
    }

    attribute_map = {
        'seller_return_item_id': 'sellerReturnItemId',
        'seller_fulfillment_order_item_id': 'sellerFulfillmentOrderItemId',
        'invalid_item_reason': 'invalidItemReason',
    }

    def __init__(self, seller_return_item_id=None, seller_fulfillment_order_item_id=None, invalid_item_reason=None, _configuration=None):  # noqa: E501
        """InvalidReturnItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._seller_return_item_id = None
        self._seller_fulfillment_order_item_id = None
        self._invalid_item_reason = None
        self.discriminator = None

        self.seller_return_item_id = seller_return_item_id
        self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id
        self.invalid_item_reason = invalid_item_reason

    @property
    def seller_return_item_id(self):
        """Gets the seller_return_item_id of this InvalidReturnItem.  # noqa: E501

        An identifier the seller assigns to the return item.  # noqa: E501

        :return: The seller_return_item_id of this InvalidReturnItem.  # noqa: E501
        :rtype: str
        """
        return self._seller_return_item_id

    @seller_return_item_id.setter
    def seller_return_item_id(self, seller_return_item_id):
        """Sets the seller_return_item_id of this InvalidReturnItem.

        An identifier the seller assigns to the return item.  # noqa: E501

        :param seller_return_item_id: The seller_return_item_id of this InvalidReturnItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and seller_return_item_id is None:
            raise ValueError("Invalid value for `seller_return_item_id`, must not be `None`")  # noqa: E501

        self._seller_return_item_id = seller_return_item_id

    @property
    def seller_fulfillment_order_item_id(self):
        """Gets the seller_fulfillment_order_item_id of this InvalidReturnItem.  # noqa: E501

        The identifier assigned to the item by the seller when the fulfillment order was created.  # noqa: E501

        :return: The seller_fulfillment_order_item_id of this InvalidReturnItem.  # noqa: E501
        :rtype: str
        """
        return self._seller_fulfillment_order_item_id

    @seller_fulfillment_order_item_id.setter
    def seller_fulfillment_order_item_id(self, seller_fulfillment_order_item_id):
        """Sets the seller_fulfillment_order_item_id of this InvalidReturnItem.

        The identifier assigned to the item by the seller when the fulfillment order was created.  # noqa: E501

        :param seller_fulfillment_order_item_id: The seller_fulfillment_order_item_id of this InvalidReturnItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and seller_fulfillment_order_item_id is None:
            raise ValueError("Invalid value for `seller_fulfillment_order_item_id`, must not be `None`")  # noqa: E501

        self._seller_fulfillment_order_item_id = seller_fulfillment_order_item_id

    @property
    def invalid_item_reason(self):
        """Gets the invalid_item_reason of this InvalidReturnItem.  # noqa: E501


        :return: The invalid_item_reason of this InvalidReturnItem.  # noqa: E501
        :rtype: InvalidItemReason
        """
        return self._invalid_item_reason

    @invalid_item_reason.setter
    def invalid_item_reason(self, invalid_item_reason):
        """Sets the invalid_item_reason of this InvalidReturnItem.


        :param invalid_item_reason: The invalid_item_reason of this InvalidReturnItem.  # noqa: E501
        :type: InvalidItemReason
        """
        if self._configuration.client_side_validation and invalid_item_reason is None:
            raise ValueError("Invalid value for `invalid_item_reason`, must not be `None`")  # noqa: E501

        self._invalid_item_reason = invalid_item_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvalidReturnItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvalidReturnItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvalidReturnItem):
            return True

        return self.to_dict() != other.to_dict()
