# coding: utf-8

"""
    Selling Partner API for Retail Procurement Orders

    The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class OrderAcknowledgementItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_sequence_number': 'str',
        'amazon_product_identifier': 'str',
        'vendor_product_identifier': 'str',
        'ordered_quantity': 'ItemQuantity',
        'net_cost': 'Money',
        'list_price': 'Money',
        'discount_multiplier': 'str',
        'item_acknowledgements': 'List[OrderItemAcknowledgement]',
    }

    attribute_map = {
        'item_sequence_number': 'itemSequenceNumber',
        'amazon_product_identifier': 'amazonProductIdentifier',
        'vendor_product_identifier': 'vendorProductIdentifier',
        'ordered_quantity': 'orderedQuantity',
        'net_cost': 'netCost',
        'list_price': 'listPrice',
        'discount_multiplier': 'discountMultiplier',
        'item_acknowledgements': 'itemAcknowledgements',
    }

    def __init__(self, item_sequence_number=None, amazon_product_identifier=None, vendor_product_identifier=None, ordered_quantity=None, net_cost=None, list_price=None, discount_multiplier=None, item_acknowledgements=None, _configuration=None):  # noqa: E501
        """OrderAcknowledgementItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._item_sequence_number = None
        self._amazon_product_identifier = None
        self._vendor_product_identifier = None
        self._ordered_quantity = None
        self._net_cost = None
        self._list_price = None
        self._discount_multiplier = None
        self._item_acknowledgements = None
        self.discriminator = None

        if item_sequence_number is not None:
            self.item_sequence_number = item_sequence_number
        if amazon_product_identifier is not None:
            self.amazon_product_identifier = amazon_product_identifier
        if vendor_product_identifier is not None:
            self.vendor_product_identifier = vendor_product_identifier
        self.ordered_quantity = ordered_quantity
        if net_cost is not None:
            self.net_cost = net_cost
        if list_price is not None:
            self.list_price = list_price
        if discount_multiplier is not None:
            self.discount_multiplier = discount_multiplier
        self.item_acknowledgements = item_acknowledgements

    @property
    def item_sequence_number(self):
        """Gets the item_sequence_number of this OrderAcknowledgementItem.  # noqa: E501

        Line item sequence number for the item.  # noqa: E501

        :return: The item_sequence_number of this OrderAcknowledgementItem.  # noqa: E501
        :rtype: str
        """
        return self._item_sequence_number

    @item_sequence_number.setter
    def item_sequence_number(self, item_sequence_number):
        """Sets the item_sequence_number of this OrderAcknowledgementItem.

        Line item sequence number for the item.  # noqa: E501

        :param item_sequence_number: The item_sequence_number of this OrderAcknowledgementItem.  # noqa: E501
        :type: str
        """

        self._item_sequence_number = item_sequence_number

    @property
    def amazon_product_identifier(self):
        """Gets the amazon_product_identifier of this OrderAcknowledgementItem.  # noqa: E501

        Amazon Standard Identification Number (ASIN) of an item.  # noqa: E501

        :return: The amazon_product_identifier of this OrderAcknowledgementItem.  # noqa: E501
        :rtype: str
        """
        return self._amazon_product_identifier

    @amazon_product_identifier.setter
    def amazon_product_identifier(self, amazon_product_identifier):
        """Sets the amazon_product_identifier of this OrderAcknowledgementItem.

        Amazon Standard Identification Number (ASIN) of an item.  # noqa: E501

        :param amazon_product_identifier: The amazon_product_identifier of this OrderAcknowledgementItem.  # noqa: E501
        :type: str
        """

        self._amazon_product_identifier = amazon_product_identifier

    @property
    def vendor_product_identifier(self):
        """Gets the vendor_product_identifier of this OrderAcknowledgementItem.  # noqa: E501

        The vendor selected product identification of the item. Should be the same as was sent in the purchase order.  # noqa: E501

        :return: The vendor_product_identifier of this OrderAcknowledgementItem.  # noqa: E501
        :rtype: str
        """
        return self._vendor_product_identifier

    @vendor_product_identifier.setter
    def vendor_product_identifier(self, vendor_product_identifier):
        """Sets the vendor_product_identifier of this OrderAcknowledgementItem.

        The vendor selected product identification of the item. Should be the same as was sent in the purchase order.  # noqa: E501

        :param vendor_product_identifier: The vendor_product_identifier of this OrderAcknowledgementItem.  # noqa: E501
        :type: str
        """

        self._vendor_product_identifier = vendor_product_identifier

    @property
    def ordered_quantity(self):
        """Gets the ordered_quantity of this OrderAcknowledgementItem.  # noqa: E501


        :return: The ordered_quantity of this OrderAcknowledgementItem.  # noqa: E501
        :rtype: ItemQuantity
        """
        return self._ordered_quantity

    @ordered_quantity.setter
    def ordered_quantity(self, ordered_quantity):
        """Sets the ordered_quantity of this OrderAcknowledgementItem.


        :param ordered_quantity: The ordered_quantity of this OrderAcknowledgementItem.  # noqa: E501
        :type: ItemQuantity
        """
        if self._configuration.client_side_validation and ordered_quantity is None:
            raise ValueError("Invalid value for `ordered_quantity`, must not be `None`")  # noqa: E501

        self._ordered_quantity = ordered_quantity

    @property
    def net_cost(self):
        """Gets the net_cost of this OrderAcknowledgementItem.  # noqa: E501


        :return: The net_cost of this OrderAcknowledgementItem.  # noqa: E501
        :rtype: Money
        """
        return self._net_cost

    @net_cost.setter
    def net_cost(self, net_cost):
        """Sets the net_cost of this OrderAcknowledgementItem.


        :param net_cost: The net_cost of this OrderAcknowledgementItem.  # noqa: E501
        :type: Money
        """

        self._net_cost = net_cost

    @property
    def list_price(self):
        """Gets the list_price of this OrderAcknowledgementItem.  # noqa: E501


        :return: The list_price of this OrderAcknowledgementItem.  # noqa: E501
        :rtype: Money
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this OrderAcknowledgementItem.


        :param list_price: The list_price of this OrderAcknowledgementItem.  # noqa: E501
        :type: Money
        """

        self._list_price = list_price

    @property
    def discount_multiplier(self):
        """Gets the discount_multiplier of this OrderAcknowledgementItem.  # noqa: E501

        The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given.  # noqa: E501

        :return: The discount_multiplier of this OrderAcknowledgementItem.  # noqa: E501
        :rtype: str
        """
        return self._discount_multiplier

    @discount_multiplier.setter
    def discount_multiplier(self, discount_multiplier):
        """Sets the discount_multiplier of this OrderAcknowledgementItem.

        The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given.  # noqa: E501

        :param discount_multiplier: The discount_multiplier of this OrderAcknowledgementItem.  # noqa: E501
        :type: str
        """

        self._discount_multiplier = discount_multiplier

    @property
    def item_acknowledgements(self):
        """Gets the item_acknowledgements of this OrderAcknowledgementItem.  # noqa: E501

        This is used to indicate acknowledged quantity.  # noqa: E501

        :return: The item_acknowledgements of this OrderAcknowledgementItem.  # noqa: E501
        :rtype: List[OrderItemAcknowledgement]
        """
        return self._item_acknowledgements

    @item_acknowledgements.setter
    def item_acknowledgements(self, item_acknowledgements):
        """Sets the item_acknowledgements of this OrderAcknowledgementItem.

        This is used to indicate acknowledged quantity.  # noqa: E501

        :param item_acknowledgements: The item_acknowledgements of this OrderAcknowledgementItem.  # noqa: E501
        :type: List[OrderItemAcknowledgement]
        """
        if self._configuration.client_side_validation and item_acknowledgements is None:
            raise ValueError("Invalid value for `item_acknowledgements`, must not be `None`")  # noqa: E501

        self._item_acknowledgements = item_acknowledgements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderAcknowledgementItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderAcknowledgementItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderAcknowledgementItem):
            return True

        return self.to_dict() != other.to_dict()
