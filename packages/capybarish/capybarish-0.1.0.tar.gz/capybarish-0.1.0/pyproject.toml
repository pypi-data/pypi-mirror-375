[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "capybarish"
version = "0.1.0"
description = "Lightweight communication middleware for cloud-based robotics controllers"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Chen Yu", email = "chenyu@u.northwestern.edu"}
]
maintainers = [
    {name = "Chen Yu", email = "chenyu@u.northwestern.edu"}
]
keywords = [
    "robotics",
    "middleware",
    "communication",
    "modular-robots",
    "udp",
    "real-time",
    "cloud-robotics",
    "distributed-systems"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Networking",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.20.0",
    "omegaconf>=2.1.0",
    "msgpack>=1.0.0",
    "rich>=10.0.0",
    "pyyaml>=5.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "pytest-asyncio>=0.18.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.17.0",
]
test = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "pytest-asyncio>=0.18.0",
    "pytest-mock>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/chenyu-northwestern/capybarish"
Repository = "https://github.com/chenyu-northwestern/capybarish.git"
"Bug Tracker" = "https://github.com/chenyu-northwestern/capybarish/issues"
"Research Paper" = "https://arxiv.org/abs/2505.00784"

[project.scripts]
capybarish = "capybarish.interface:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["capybarish*", "plugins*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
capybarish = [
    "py.typed",
    "*.yaml",
    "*.yml",
    "*.json",
]

# Black formatting
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["capybarish", "plugins", "examples", "tests"]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "msgpack.*",
    "rich.*",
    "omegaconf.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=capybarish",
    "--cov-report=term-missing",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["capybarish"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]