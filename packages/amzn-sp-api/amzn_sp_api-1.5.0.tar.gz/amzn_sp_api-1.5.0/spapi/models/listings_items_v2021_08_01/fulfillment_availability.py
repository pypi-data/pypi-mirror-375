# coding: utf-8

"""
    Selling Partner API for Listings Items

    The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).

    The version of the OpenAPI document: 2021-08-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class FulfillmentAvailability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fulfillment_channel_code': 'str',
        'quantity': 'int',
    }

    attribute_map = {
        'fulfillment_channel_code': 'fulfillmentChannelCode',
        'quantity': 'quantity',
    }

    def __init__(self, fulfillment_channel_code=None, quantity=None, _configuration=None):  # noqa: E501
        """FulfillmentAvailability - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fulfillment_channel_code = None
        self._quantity = None
        self.discriminator = None

        self.fulfillment_channel_code = fulfillment_channel_code
        if quantity is not None:
            self.quantity = quantity

    @property
    def fulfillment_channel_code(self):
        """Gets the fulfillment_channel_code of this FulfillmentAvailability.  # noqa: E501

        Designates which fulfillment network is used.  # noqa: E501

        :return: The fulfillment_channel_code of this FulfillmentAvailability.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_channel_code

    @fulfillment_channel_code.setter
    def fulfillment_channel_code(self, fulfillment_channel_code):
        """Sets the fulfillment_channel_code of this FulfillmentAvailability.

        Designates which fulfillment network is used.  # noqa: E501

        :param fulfillment_channel_code: The fulfillment_channel_code of this FulfillmentAvailability.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and fulfillment_channel_code is None:
            raise ValueError("Invalid value for `fulfillment_channel_code`, must not be `None`")  # noqa: E501

        self._fulfillment_channel_code = fulfillment_channel_code

    @property
    def quantity(self):
        """Gets the quantity of this FulfillmentAvailability.  # noqa: E501

        The quantity of the item you are making available for sale.  # noqa: E501

        :return: The quantity of this FulfillmentAvailability.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this FulfillmentAvailability.

        The quantity of the item you are making available for sale.  # noqa: E501

        :param quantity: The quantity of this FulfillmentAvailability.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                quantity is not None and quantity < 0):  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FulfillmentAvailability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FulfillmentAvailability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FulfillmentAvailability):
            return True

        return self.to_dict() != other.to_dict()
