[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "mseep-mockloop-mcp"
version = "2.2.10"
description = "MCP server to generate and run mock APIs from specifications."
requires-python = ">=3.10"
authors = [
    { name = "mseep", email = "support@skydeck.ai" },
]
keywords = [
    "mcp",
    "api",
    "mock",
    "fastapi",
    "openapi",
    "swagger",
    "generator",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Environment :: Console",
    "Topic :: Software Development :: Testing :: Mocking",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "Jinja2>=3.1.0",
    "PyYAML>=6.0",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "mcp[cli]>=1.0.0",
    "schemapin>=1.0.0",
]

[project.readme]
content-type = "text/plain"
text = "Package managed by MseeP.ai"

[project.license]
text = "MIT License"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0.0",
    "pip-audit>=2.6.0",
    "semgrep>=1.45.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/mockloop/mockloop-mcp"
Repository = "https://github.com/mockloop/mockloop-mcp"

[project.scripts]
mockloop-mcp = "mockloop_mcp.main:main"

[tool.setuptools.packages.find]
where = [
    "src",
]

[tool.black]
line-length = 88
target-version = [
    "py310",
    "py311",
    "py312",
]
include = "\\.pyi?$"
extend-exclude = "/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | build\n  | dist\n  | src/mockloop_mcp/templates\n)/\n"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = [
    "src",
    "tests",
]
skip_glob = [
    "src/mockloop_mcp/templates/*",
]

[tool.ruff]
line-length = 88
target-version = "py312"
src = [
    "src",
    "tests",
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "src/mockloop_mcp/templates",
]

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "I",
    "UP",
    "C4",
    "B",
    "A",
    "RUF",
    "S",
    "T20",
    "SIM",
    "ARG",
    "PTH",
    "ERA",
    "PL",
    "TRY",
    "FLY",
    "PERF",
]
ignore = [
    "E402",
    "E501",
    "E701",
    "E702",
    "E722",
    "F401",
    "I001",
    "S101",
    "S110",
    "S113",
    "S603",
    "S607",
    "T201",
    "ARG001",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PLR2004",
    "PTH123",
    "TRY003",
    "TRY203",
    "TRY300",
    "TRY301",
    "ERA001",
    "PERF203",
    "PERF401",
    "SIM103",
    "SIM117",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",
    "ARG001",
    "ARG002",
    "PLR2004",
]
"src/mockloop_mcp/templates/*" = [
    "ALL",
]

[tool.ruff.lint.isort]
known-first-party = [
    "mockloop_mcp",
]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
exclude = [
    "src/mockloop_mcp/templates/",
    "build/",
    "dist/",
    ".venv/",
    "venv/",
]

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "fastapi.*",
    "jinja2.*",
    "yaml.*",
    "aiohttp.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = [
    "tests",
    "src/mockloop_mcp/templates",
]
skips = [
    "B101",
    "B601",
]

[tool.bandit.assert_used]
skips = [
    "*_test.py",
    "test_*.py",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov-config=.coveragerc",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "network: Tests requiring network access",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = [
    "src/mockloop_mcp",
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/templates/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[dependency-groups]
dev = [
    "ruff>=0.11.11",
]
