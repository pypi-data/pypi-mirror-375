[project]
authors = [{name = "Tristan Bester", email = "tristanbester@email.com"}]
dependencies = [
  "gymnasium==0.29.1",
  "numpy==1.26.4",
  "stable-baselines3>=2.3.2",
  "torch==2.6.0",
  "tqdm>=4.67.1",
]
description = "Python package for RL with Reward Machines and Counting Reward Machines."
name = "pyrewardmachines"
readme = "README.md"
requires-python = ">=3.10,<3.13"
version = "1.0.0"

[dependency-groups]
examples = [
  "wandb>=0.19.10",
  "tensorboard>=2.19.0",
]

[tool.uv]
dev-dependencies = [
  "pyright>=1.1.389",
  "pytest>=8.3.3",
  "pytest-cov>=6.0.0",
  "ruff>=0.8.1",
]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.wheel]
packages = ["pycrm"]

[tool.pyright]
exclude = [".venv", "examples/", "htmlcov/"]
pythonVersion = "3.12"
reportAbstractUsage = "none"
reportAssertAlwaysTrue = "warning"
reportCallInDefaultInitializer = "warning"
reportConstantRedefinition = "error"
reportDuplicateImport = "warning"
reportImplicitStringConcatenation = "warning"
reportImportCycles = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "warning"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "warning"
reportMissingImports = "warning"
reportMissingSuperCall = "warning"
reportMissingTypeStubs = "warning"
reportOverlappingOverload = "error"
reportPrivateImportUsage = "none"
reportSelfClsParameterName = "warning"
reportUnboundVariable = "error"
reportUndefinedVariable = "error"
reportUninitializedInstanceVariable = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnsupportedDunderAll = "warning"
reportUnusedClass = "warning"
reportUnusedCoroutine = "error"
reportUnusedFunction = "warning"
reportUnusedImport = "warning"
reportUnusedVariable = "warning"
venv = ".venv"
venvPath = "."

[tool.ruff]
line-length = 88

[tool.ruff.lint]
ignore = [
  "C901", # too complex
  "W191", # indentation contains tabs
  "D401", # imperative mood
  "D100", # missing docstring in public module
  "D104", # missing docstring in public package
  "B010", # conflicting with pyright
]
select = [
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "F", # pyflakes
  "I", # isort
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "N", # PEP8 naming conventions
  "D", # pydocstyle
]

[tool.ruff.lint.pydocstyle]
convention = "google"
