---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/forward_reference_attribute_access/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mymodule_compat = _cribo.types.SimpleNamespace(__name__='mymodule.compat')
mymodule = _cribo.types.SimpleNamespace(__name__='mymodule', __initializing__=False, __initialized__=False)
mymodule.compat = mymodule_compat
JSONDecodeError = _cribo.json.JSONDecodeError
mymodule_compat.JSONDecodeError = JSONDecodeError
mymodule_exceptions = _cribo.types.SimpleNamespace(__name__='mymodule.exceptions', __initializing__=False, __initialized__=False)
mymodule.exceptions = mymodule_exceptions
def _cribo_init___cribo_d7bb86_mymodule(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    global mymodule_exceptions
    mymodule_exceptions = _cribo_init___cribo_e5cbf4_mymodule_exceptions(mymodule_exceptions)
    MyError = mymodule_exceptions.MyError
    self.MyError = MyError
    self.MyError = MyError
    self.compat = mymodule_compat
    self.compat = mymodule_compat
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mymodule.__init__ = _cribo_init___cribo_d7bb86_mymodule
def _cribo_init___cribo_e5cbf4_mymodule_exceptions(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    CompatJSONDecodeError = JSONDecodeError
    mymodule_exceptions.CompatJSONDecodeError = CompatJSONDecodeError

    class MyError(Exception):
        """Base error class"""
        pass
    MyError.__module__ = 'mymodule.exceptions'
    self.MyError = MyError

    class MyJSONError(MyError, CompatJSONDecodeError):
        """JSON decode error that inherits from both our error and compat error"""

        def __init__(self, *args):
            CompatJSONDecodeError.__init__(self, *args)
            MyError.__init__(self, str(args[0]) if args else "")
    MyJSONError.__module__ = 'mymodule.exceptions'
    self.MyJSONError = MyJSONError
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mymodule_exceptions.__init__ = _cribo_init___cribo_e5cbf4_mymodule_exceptions
__cribo_init_result = _cribo_init___cribo_d7bb86_mymodule(mymodule)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mymodule, attr, getattr(__cribo_init_result, attr))
MyError = mymodule.MyError
CompatJSONDecodeError = mymodule_compat.JSONDecodeError
class CustomError(MyError, CompatJSONDecodeError):

    def __init__(self, *args):
        CompatJSONDecodeError.__init__(self, *args)
        MyError.__init__(self, str(self.args[0]) if self.args else "")
try:
    raise CustomError("Test error", "doc", 42)
except CustomError as e:
    print(f"Caught CustomError: {e}")
    print("SUCCESS")
compat = mymodule.compat
exceptions = mymodule.exceptions
