[project]
name = "keycardai"
dynamic = ["version"]
description = "Keycard Python SDK - A workspace for Keycard service packages"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "KeycardAI", email = "support@keycardai.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Security"
]
keywords = ["keycard", "oauth", "authentication", "security", "api"]

# This is a namespace/workspace root package with no source code
# All functionality is provided by workspace member packages
dependencies = []

# Optional dependencies for development
[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "black>=24.12.0",
    "isort>=5.13.2",
    "mypy>=1.14.1",
    "ruff>=0.12.10",
    "pre-commit>=4.3.0",
    "commitizen>=3.29.0",
]

[project.urls]
Homepage = "https://github.com/keycardai/python-sdk"
Documentation = "https://docs.keycardai.com"
Repository = "https://github.com/keycardai/python-sdk"
Issues = "https://github.com/keycardai/python-sdk/issues"

[tool.uv.workspace]
members = [
    ".",
    "packages/*",
]
# Exclude any packages that shouldn't be part of the workspace
exclude = []

[tool.uv.sources]
# Workspace sources will be defined here as packages are added
keycardai-oauth = { workspace = true }
keycardai-mcp-fastmcp = { workspace = true }
keycardai-mcp = { workspace = true }

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
pattern = "(?P<base>\\d+\\.\\d+\\.\\d+)-keycardai"
style = "pep440"

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[tool.commitizen]
name = "cz_customize"
version = "0.2.0"
tag_format = "${version}-keycardai"
ignored_tag_formats = ["${version}-*"]
update_changelog_on_bump = true
bump_message = "bump: keycardai $current_version â†’ $new_version"
major_version_zero = true

[tool.commitizen.customize]
changelog_pattern = "^(feat|fix|refactor|perf|test|build|ci|revert)\\(keycardai\\)(!)?:"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "ruff>=0.12.10",
    "pre-commit>=4.3.0",
    "commitizen>=3.29.0",
]

# Configure as a namespace/workspace root package
[tool.hatch.build.targets.wheel]
packages = ["src/keycardai"]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
