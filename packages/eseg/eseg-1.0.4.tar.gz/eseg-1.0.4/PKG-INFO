Metadata-Version: 2.4
Name: eseg
Version: 1.0.4
Summary: Models and utilities for event-based depth / segmentation (Surreal benchmark).
Author-email: Martin Barry <martin.barry@gmail.com>
License: MIT License
        
        Copyright (c) 2025 Martin Barry
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/youruser/surreal-events
Project-URL: Repository, https://github.com/youruser/surreal-events
Project-URL: Issues, https://github.com/youruser/surreal-events/issues
Keywords: event-camera,computer-vision,deep-learning,pytorch,depth,surreal
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: ==3.12.*
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: opencv-python>=4.9.0
Requires-Dist: numpy<3.0,>=1.24
Requires-Dist: h5py>=3.10
Requires-Dist: tqdm>=4.64
Requires-Dist: lpips>=0.1.4
Requires-Dist: scikit-learn>=1.2
Requires-Dist: plotly>=5.18
Requires-Dist: pytorch-ignite>=0.5.2
Requires-Dist: matplotlib>=3.7
Requires-Dist: build>=1.3.0
Requires-Dist: twine>=6.1.0
Requires-Dist: bump>=1.3.2
Requires-Dist: dv-processing==2.0.2
Requires-Dist: imageio>=2.37.0
Provides-Extra: dev
Requires-Dist: black>=24.0; extra == "dev"
Requires-Dist: ruff>=0.4.0; extra == "dev"
Requires-Dist: mypy>=1.8.0; extra == "dev"
Requires-Dist: pytest>=8.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: types-PyYAML; extra == "dev"
Dynamic: license-file

# Human Instance Segmentation using Evn

![](pedestrians.gif)


## Features
- ConvLSTM-based depth estimation model for event streams
- MobileNetV2 feature encoder with UNet-like decoder
- Event voxelization and augmentation utilities
- Real-time camera viewers (Metavision / DAVIS) with overlay visualization
- Mixed perceptual + edge loss utilities (LPIPS + Sobel)

## Requirements
We implemented the dataviewers on Both [dvprocessing](https://dv-processing.inivation.com/master/index.html) and [metavisionSDK](https://docs.prophesee.ai/stable/get_started/get_started_python.html)


Please install [metavisionSDK](https://docs.prophesee.ai/stable/get_started/get_started_python.html) for Prophesee live camera. 

⚠️ Warning DO NOT forget to set metavisionsdk in your python path especially for windows!

And / Or

[dvprocessing](https://dv-processing.inivation.com/master/index.html) for Davis Cameras

For hdf5 file we use [metavisionSDK](https://docs.prophesee.ai/stable/get_started/get_started_python.html)  aedat files can be processed using [dvprocessing](https://dv-processing.inivation.com/master/index.html)

Pleas, before installing eseg install a GPU enabled pytorch here: https://pytorch.org/get-started/locally/


## Installation



```bash
pip install eseg
```
(Once published to PyPI.)

For development:
```bash
git clone https://github.com/youruser/eseg.git
cd eseg
python -m venv .venv
source .venv/bin/activate  # Linux / macOS
pip install -e .[dev,viewer]

```
⚠️ Warning if you work on a virtualenvironment you will need to copy your global sdk library to your local environment
```
cp -r path/to/your/metavisionsdk/metavision_* <path/to/your/virtualenv/python<yourversion>/site-packages/
```


## Quick Start
```python
import torch
from eseg.models import ConvLSTM
# TODO: usage example after final API stabilizes
```

## Live Stream
```bash
python -m eseg.live_stream
```

## Testing
```bash
pytest
```

## License
MIT. See `LICENSE`.

## Disclaimer
Research code; APIs may change before 1.0.0.
