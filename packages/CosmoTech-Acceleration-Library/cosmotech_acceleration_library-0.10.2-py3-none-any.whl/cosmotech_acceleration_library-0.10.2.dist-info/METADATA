Metadata-Version: 2.4
Name: CosmoTech_Acceleration_Library
Version: 0.10.2
Summary: Acceleration libraries for CosmoTech cloud based solution development
Author-email: Cosmo Tech <platform@cosmotech.com>
Project-URL: Homepage, https://www.cosmotech.com
Project-URL: Source, https://github.com/Cosmo-Tech/CosmoTech-Acceleration-Library
Project-URL: Documentation, https://cosmo-tech.github.io/CosmoTech-Acceleration-Library
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: azure-functions~=1.20.0
Requires-Dist: azure-digitaltwins-core~=1.2.0
Requires-Dist: azure-identity~=1.16.1
Requires-Dist: azure-kusto-data~=4.4.1
Requires-Dist: azure-kusto-ingest~=4.4.1
Requires-Dist: tenacity~=8.3.0
Requires-Dist: python-keycloak~=4.7.3
Requires-Dist: redis==4.4.4
Requires-Dist: redisgraph_bulk_loader==0.10.2
Requires-Dist: cosmotech-api~=3.2
Requires-Dist: boto3~=1.35.19
Requires-Dist: requests~=2.32.3
Requires-Dist: singlestoredb~=1.10.0
Requires-Dist: cosmotech-run-orchestrator~=2.0.0
Requires-Dist: pyarrow~=20.0.0
Requires-Dist: adbc-driver-manager~=1.7.0
Requires-Dist: adbc-driver-sqlite~=1.7.0
Requires-Dist: adbc-driver-postgresql~=1.7.0
Requires-Dist: click~=8.1.7
Requires-Dist: rich-click~=1.7.3
Requires-Dist: click-log~=0.4.0
Requires-Dist: openpyxl~=3.1
Requires-Dist: pandas~=2.3
Requires-Dist: python-dateutil~=2.8
Requires-Dist: rich~=13.7
Requires-Dist: setuptools
Provides-Extra: doc
Requires-Dist: mkdocs>=1.5.3; extra == "doc"
Requires-Dist: mkdocs-click~=0.8.1; extra == "doc"
Requires-Dist: mkdocs-gen-files~=0.5.0; extra == "doc"
Requires-Dist: mkdocstrings[python]~=0.24; extra == "doc"
Requires-Dist: mkdocs-awesome-pages-plugin~=2.9.3; extra == "doc"
Requires-Dist: pymdown-extensions~=10.7; extra == "doc"
Requires-Dist: requirements-parser~=0.11.0; extra == "doc"
Requires-Dist: setuptools~=70.3.0; extra == "doc"
Requires-Dist: mike~=2.0.0; extra == "doc"
Requires-Dist: griffe~=0.47.0; extra == "doc"
Requires-Dist: mkdocs-include-dir-to-nav~=1.2.0; extra == "doc"
Requires-Dist: mkdocs-material[imaging]~=9.6.18; extra == "doc"
Requires-Dist: mkdocs-table-reader-plugin~=2.0.3; extra == "doc"
Requires-Dist: mkdocs-literate-nav~=0.6.1; extra == "doc"
Requires-Dist: pillow~=10.4; extra == "doc"
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-docker; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Provides-Extra: all
Requires-Dist: CosmoTech_Acceleration_Library[doc,test]; extra == "all"
Dynamic: license-file

# CosmoTech-Acceleration-Library
Acceleration library for CosmoTech cloud based solution development

## csm-data

`csm-data` is a CLI made to give CosmoTech solution modelers and integrators accelerators to start interacting with multiple systems.

It gives a first entrypoint to get ready to use commands to send and retrieve data from a number of systems in which a Cosmo Tech API could be integrated

## data-store

The data store gives a way to keep local data during simulations and comes with `csm-data` commands to easily send those data to a target system allowing to easily send results anywhere.


# Legacy part
The following description is tied to the legacy part of CoAL that is getting slowly moved to the new code organization before a 1.0.0 release

## Code organisation

In project root directory you'll find 4 main directories:

* CosmoTech_Acceleration_Library: containing all Cosmo Tech libraries to accelerate interaction with Cosmo Tech solutions
* data: a bunch of csv files on which samples are based
* samples: a bunch of python scripts to demonstrate how to use the library
* doc: for schema or specific documentation

## Accelerators

TODO

## Modelops library

The aim of this library is to simplify the model accesses via python code.

The library can be used by Data Scientists, Modelers, Developers, ...

### Utility classes

* `ModelImporter(host: str, port: int, name: str, version: int, graph_rotation:int = 1)` : will allow you to bulk import data from csv files with schema enforced (`samples/Modelops/Bulk_Import_from_CSV_with_schema.py`) or not (`samples/Modelops/Bulk_Import_from_CSV_without_schema.py`) (see [documentation](https://github.com/RedisGraph/redisgraph-bulk-loader#input-schemas) for further details)
* `ModelExporter(host: str, port: int, name: str, version: int, export_dir: str = '/')` : will allow you to export data from a model cache instance
* `ModelReader(host: str, port: int, name: str, version: int)` : will allow you to read data from a model cache instance ([object returned](https://github.com/RedisGraph/redisgraph-py/blob/master/redisgraph/query_result.py))
* `ModelWriter(host: str, port: int, name: str, version: int, graph_rotation:int = 1)` : will allow you to write data into a model instance
* `ModelUtil` : a bunch of utilities to manipulate and facilitate interaction with model instance (result_set_to_json, print_query_result, ... )
* `ModelMetadata`: will allow you to management graph metadata
