---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/all_variable_loop_reference/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypkg__internal = _cribo.types.SimpleNamespace(__name__='mypkg._internal')
mypkg = _cribo.types.SimpleNamespace(__name__='mypkg', __initializing__=False, __initialized__=False)
mypkg._internal = mypkg__internal
class MyClass:

    def __init__(self):
        self.value = "Hello from MyClass"
MyClass.__module__ = 'mypkg._internal'
def my_func():
    return "Hello from my_func"
mypkg__internal.MyClass = MyClass
mypkg__internal.my_func = my_func
def _cribo_init___cribo_4c9561_mypkg(self):
    if getattr(self, '__initialized__', False):
        return self
    if getattr(self, '__initializing__', False):
        return self
    self.__initializing__ = True
    MyClass = mypkg__internal.MyClass
    mypkg.MyClass = MyClass
    my_func = mypkg__internal.my_func
    mypkg.my_func = my_func
    __all__ = ["MyClass", "my_func"]
    __locals = vars(mypkg)
    self.__locals = __locals
    for __name in __all__:
        if not __name.startswith("__"):
            setattr(__locals[__name], "__module__", "mypkg")
    self._internal = mypkg__internal
    self._internal = mypkg__internal
    self.MyClass = MyClass
    self.my_func = my_func
    self.__initialized__ = True
    self.__initializing__ = False
    return self
mypkg.__init__ = _cribo_init___cribo_4c9561_mypkg
__cribo_init_result = _cribo_init___cribo_4c9561_mypkg(mypkg)
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypkg, attr, getattr(__cribo_init_result, attr))
obj = MyClass()
print(obj.value)
print(my_func())
