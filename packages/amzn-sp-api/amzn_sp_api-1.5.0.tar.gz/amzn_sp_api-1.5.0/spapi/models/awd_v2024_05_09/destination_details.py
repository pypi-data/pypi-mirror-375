# coding: utf-8

"""
    The Selling Partner API for Amazon Warehousing and Distribution

    The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.

    The version of the OpenAPI document: 2024-05-09
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class DestinationDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_address': 'Address',
        'destination_region': 'str',
        'shipment_id': 'str',
    }

    attribute_map = {
        'destination_address': 'destinationAddress',
        'destination_region': 'destinationRegion',
        'shipment_id': 'shipmentId',
    }

    def __init__(self, destination_address=None, destination_region=None, shipment_id=None, _configuration=None):  # noqa: E501
        """DestinationDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._destination_address = None
        self._destination_region = None
        self._shipment_id = None
        self.discriminator = None

        if destination_address is not None:
            self.destination_address = destination_address
        if destination_region is not None:
            self.destination_region = destination_region
        if shipment_id is not None:
            self.shipment_id = shipment_id

    @property
    def destination_address(self):
        """Gets the destination_address of this DestinationDetails.  # noqa: E501


        :return: The destination_address of this DestinationDetails.  # noqa: E501
        :rtype: Address
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this DestinationDetails.


        :param destination_address: The destination_address of this DestinationDetails.  # noqa: E501
        :type: Address
        """

        self._destination_address = destination_address

    @property
    def destination_region(self):
        """Gets the destination_region of this DestinationDetails.  # noqa: E501

        Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east, us-southcentral, us-southeast]  # noqa: E501

        :return: The destination_region of this DestinationDetails.  # noqa: E501
        :rtype: str
        """
        return self._destination_region

    @destination_region.setter
    def destination_region(self, destination_region):
        """Sets the destination_region of this DestinationDetails.

        Assigned region where the order will be shipped. This can differ from what was passed as preference. AWD currently supports following region IDs: [us-west, us-east, us-southcentral, us-southeast]  # noqa: E501

        :param destination_region: The destination_region of this DestinationDetails.  # noqa: E501
        :type: str
        """

        self._destination_region = destination_region

    @property
    def shipment_id(self):
        """Gets the shipment_id of this DestinationDetails.  # noqa: E501

        Unique ID of the confirmed shipment being shipped to the assigned destination. This will be available only after an inbound order is confirmed and can be used to track the shipment.  # noqa: E501

        :return: The shipment_id of this DestinationDetails.  # noqa: E501
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this DestinationDetails.

        Unique ID of the confirmed shipment being shipped to the assigned destination. This will be available only after an inbound order is confirmed and can be used to track the shipment.  # noqa: E501

        :param shipment_id: The shipment_id of this DestinationDetails.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                shipment_id is not None and len(shipment_id) < 1):
            raise ValueError("Invalid value for `shipment_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._shipment_id = shipment_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DestinationDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinationDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DestinationDetails):
            return True

        return self.to_dict() != other.to_dict()
