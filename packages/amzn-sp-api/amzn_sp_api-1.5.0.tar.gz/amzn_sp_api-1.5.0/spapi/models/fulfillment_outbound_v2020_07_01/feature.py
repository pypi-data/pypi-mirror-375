# coding: utf-8

"""
    Selling Partner APIs for Fulfillment Outbound

    The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.

    The version of the OpenAPI document: 2020-07-01
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class Feature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_name': 'str',
        'feature_description': 'str',
        'seller_eligible': 'bool',
    }

    attribute_map = {
        'feature_name': 'featureName',
        'feature_description': 'featureDescription',
        'seller_eligible': 'sellerEligible',
    }

    def __init__(self, feature_name=None, feature_description=None, seller_eligible=None, _configuration=None):  # noqa: E501
        """Feature - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._feature_name = None
        self._feature_description = None
        self._seller_eligible = None
        self.discriminator = None

        self.feature_name = feature_name
        self.feature_description = feature_description
        if seller_eligible is not None:
            self.seller_eligible = seller_eligible

    @property
    def feature_name(self):
        """Gets the feature_name of this Feature.  # noqa: E501

        The feature name.  # noqa: E501

        :return: The feature_name of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this Feature.

        The feature name.  # noqa: E501

        :param feature_name: The feature_name of this Feature.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and feature_name is None:
            raise ValueError("Invalid value for `feature_name`, must not be `None`")  # noqa: E501

        self._feature_name = feature_name

    @property
    def feature_description(self):
        """Gets the feature_description of this Feature.  # noqa: E501

        The feature description.  # noqa: E501

        :return: The feature_description of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._feature_description

    @feature_description.setter
    def feature_description(self, feature_description):
        """Sets the feature_description of this Feature.

        The feature description.  # noqa: E501

        :param feature_description: The feature_description of this Feature.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and feature_description is None:
            raise ValueError("Invalid value for `feature_description`, must not be `None`")  # noqa: E501

        self._feature_description = feature_description

    @property
    def seller_eligible(self):
        """Gets the seller_eligible of this Feature.  # noqa: E501

        When true, indicates that the seller is eligible to use the feature.  # noqa: E501

        :return: The seller_eligible of this Feature.  # noqa: E501
        :rtype: bool
        """
        return self._seller_eligible

    @seller_eligible.setter
    def seller_eligible(self, seller_eligible):
        """Sets the seller_eligible of this Feature.

        When true, indicates that the seller is eligible to use the feature.  # noqa: E501

        :param seller_eligible: The seller_eligible of this Feature.  # noqa: E501
        :type: bool
        """

        self._seller_eligible = seller_eligible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Feature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Feature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Feature):
            return True

        return self.to_dict() != other.to_dict()
