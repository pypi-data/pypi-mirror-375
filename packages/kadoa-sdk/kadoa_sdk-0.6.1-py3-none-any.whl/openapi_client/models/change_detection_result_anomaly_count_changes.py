# coding: utf-8

"""
    Kadoa API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3.0.0
    Contact: support@kadoa.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.change_detection_record import ChangeDetectionRecord
from typing import Optional, Set
from typing_extensions import Self

class ChangeDetectionResultAnomalyCountChanges(BaseModel):
    """
    ChangeDetectionResultAnomalyCountChanges
    """ # noqa: E501
    previous_job_id: StrictStr = Field(alias="previousJobId")
    previous_validation_id: StrictStr = Field(alias="previousValidationId")
    anomalies_count_total: ChangeDetectionRecord = Field(alias="anomaliesCountTotal")
    anomalies_count_by_rule: Dict[str, ChangeDetectionRecord] = Field(alias="anomaliesCountByRule")
    __properties: ClassVar[List[str]] = ["previousJobId", "previousValidationId", "anomaliesCountTotal", "anomaliesCountByRule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeDetectionResultAnomalyCountChanges from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of anomalies_count_total
        if self.anomalies_count_total:
            _dict['anomaliesCountTotal'] = self.anomalies_count_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in anomalies_count_by_rule (dict)
        _field_dict = {}
        if self.anomalies_count_by_rule:
            for _key_anomalies_count_by_rule in self.anomalies_count_by_rule:
                if self.anomalies_count_by_rule[_key_anomalies_count_by_rule]:
                    _field_dict[_key_anomalies_count_by_rule] = self.anomalies_count_by_rule[_key_anomalies_count_by_rule].to_dict()
            _dict['anomaliesCountByRule'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeDetectionResultAnomalyCountChanges from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "previousJobId": obj.get("previousJobId"),
            "previousValidationId": obj.get("previousValidationId"),
            "anomaliesCountTotal": ChangeDetectionRecord.from_dict(obj["anomaliesCountTotal"]) if obj.get("anomaliesCountTotal") is not None else None,
            "anomaliesCountByRule": dict(
                (_k, ChangeDetectionRecord.from_dict(_v))
                for _k, _v in obj["anomaliesCountByRule"].items()
            )
            if obj.get("anomaliesCountByRule") is not None
            else None
        })
        return _obj


