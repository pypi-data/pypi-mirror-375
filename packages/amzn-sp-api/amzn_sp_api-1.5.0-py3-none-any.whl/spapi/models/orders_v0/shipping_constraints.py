# coding: utf-8

"""
    Selling Partner API for Orders

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ShippingConstraints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pallet_delivery': 'ConstraintType',
        'signature_confirmation': 'ConstraintType',
        'recipient_identity_verification': 'ConstraintType',
        'recipient_age_verification': 'ConstraintType',
    }

    attribute_map = {
        'pallet_delivery': 'PalletDelivery',
        'signature_confirmation': 'SignatureConfirmation',
        'recipient_identity_verification': 'RecipientIdentityVerification',
        'recipient_age_verification': 'RecipientAgeVerification',
    }

    def __init__(self, pallet_delivery=None, signature_confirmation=None, recipient_identity_verification=None, recipient_age_verification=None, _configuration=None):  # noqa: E501
        """ShippingConstraints - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._pallet_delivery = None
        self._signature_confirmation = None
        self._recipient_identity_verification = None
        self._recipient_age_verification = None
        self.discriminator = None

        if pallet_delivery is not None:
            self.pallet_delivery = pallet_delivery
        if signature_confirmation is not None:
            self.signature_confirmation = signature_confirmation
        if recipient_identity_verification is not None:
            self.recipient_identity_verification = recipient_identity_verification
        if recipient_age_verification is not None:
            self.recipient_age_verification = recipient_age_verification

    @property
    def pallet_delivery(self):
        """Gets the pallet_delivery of this ShippingConstraints.  # noqa: E501


        :return: The pallet_delivery of this ShippingConstraints.  # noqa: E501
        :rtype: ConstraintType
        """
        return self._pallet_delivery

    @pallet_delivery.setter
    def pallet_delivery(self, pallet_delivery):
        """Sets the pallet_delivery of this ShippingConstraints.


        :param pallet_delivery: The pallet_delivery of this ShippingConstraints.  # noqa: E501
        :type: ConstraintType
        """

        self._pallet_delivery = pallet_delivery

    @property
    def signature_confirmation(self):
        """Gets the signature_confirmation of this ShippingConstraints.  # noqa: E501


        :return: The signature_confirmation of this ShippingConstraints.  # noqa: E501
        :rtype: ConstraintType
        """
        return self._signature_confirmation

    @signature_confirmation.setter
    def signature_confirmation(self, signature_confirmation):
        """Sets the signature_confirmation of this ShippingConstraints.


        :param signature_confirmation: The signature_confirmation of this ShippingConstraints.  # noqa: E501
        :type: ConstraintType
        """

        self._signature_confirmation = signature_confirmation

    @property
    def recipient_identity_verification(self):
        """Gets the recipient_identity_verification of this ShippingConstraints.  # noqa: E501


        :return: The recipient_identity_verification of this ShippingConstraints.  # noqa: E501
        :rtype: ConstraintType
        """
        return self._recipient_identity_verification

    @recipient_identity_verification.setter
    def recipient_identity_verification(self, recipient_identity_verification):
        """Sets the recipient_identity_verification of this ShippingConstraints.


        :param recipient_identity_verification: The recipient_identity_verification of this ShippingConstraints.  # noqa: E501
        :type: ConstraintType
        """

        self._recipient_identity_verification = recipient_identity_verification

    @property
    def recipient_age_verification(self):
        """Gets the recipient_age_verification of this ShippingConstraints.  # noqa: E501


        :return: The recipient_age_verification of this ShippingConstraints.  # noqa: E501
        :rtype: ConstraintType
        """
        return self._recipient_age_verification

    @recipient_age_verification.setter
    def recipient_age_verification(self, recipient_age_verification):
        """Sets the recipient_age_verification of this ShippingConstraints.


        :param recipient_age_verification: The recipient_age_verification of this ShippingConstraints.  # noqa: E501
        :type: ConstraintType
        """

        self._recipient_age_verification = recipient_age_verification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShippingConstraints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShippingConstraints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShippingConstraints):
            return True

        return self.to_dict() != other.to_dict()
