name: Publish (PyPI)

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write  # Needed for PyPI trusted publishing (PEP 741)

concurrency:
  group: publish-pypi-${{ github.ref }}
  cancel-in-progress: false

jobs:
  test:
    name: Test (matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package (dev extras)
        run: |
          python -m pip install --upgrade pip
          pip install '.[dev,parquet]'

      - name: Run tests
        run: pytest -q

  build-publish:
    name: Build & Publish
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Ensure version is non-dev
        id: version_check
        run: |
          VERSION=$(python -c "import tomllib;print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
          echo "Project version: $VERSION"
          if [[ "$VERSION" == *dev* ]]; then
            echo "Error: refusing to publish a development version to production PyPI." >&2
            exit 1
          fi

      - name: Verify tag matches version (if tag push)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          FILE_VERSION=$(python -c "import tomllib;print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
          echo "Tag version: $TAG_VERSION"
          echo "File version: $FILE_VERSION"
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "Tag version $TAG_VERSION != project version $FILE_VERSION" >&2
            exit 1
          fi

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          pip install build
          # Optional lint (ignored failures) â€“ uncomment if desired
          # pip install ruff
          # ruff check . || true

      - name: Build wheel & sdist
        run: python -m build --sdist --wheel --outdir dist/

      - name: Verify artifacts
        run: |
          ls -l dist
          python -m tarfile -l dist/*.tar.gz || true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # For trusted publishing via OIDC no token is needed, ensure project is configured on PyPI.
          skip-existing: true
          verbose: true
          attestations: true

      - name: Show install hint
        if: always()
        run: |
          VERSION=$(python -c "import tomllib;print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
          echo "Install with: pip install pyforcis==$VERSION"
